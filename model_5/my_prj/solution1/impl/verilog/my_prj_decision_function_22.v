// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_22 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_2_val,
        x_6_val,
        x_10_val,
        x_15_val,
        x_16_val,
        x_17_val,
        x_23_val,
        x_29_val,
        x_32_val,
        x_33_val,
        x_35_val,
        x_39_val,
        x_40_val,
        x_44_val,
        x_45_val,
        x_46_val,
        x_47_val,
        x_48_val,
        x_51_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_2_val;
input  [17:0] x_6_val;
input  [17:0] x_10_val;
input  [17:0] x_15_val;
input  [17:0] x_16_val;
input  [17:0] x_17_val;
input  [17:0] x_23_val;
input  [17:0] x_29_val;
input  [17:0] x_32_val;
input  [17:0] x_33_val;
input  [17:0] x_35_val;
input  [17:0] x_39_val;
input  [17:0] x_40_val;
input  [17:0] x_44_val;
input  [17:0] x_45_val;
input  [17:0] x_46_val;
input  [17:0] x_47_val;
input  [17:0] x_48_val;
input  [17:0] x_51_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_384_p2;
reg   [0:0] icmp_ln86_reg_1425;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_573_fu_396_p2;
reg   [0:0] icmp_ln86_573_reg_1434;
wire   [0:0] icmp_ln86_576_fu_414_p2;
reg   [0:0] icmp_ln86_576_reg_1440;
wire   [0:0] icmp_ln86_577_fu_420_p2;
reg   [0:0] icmp_ln86_577_reg_1446;
wire   [0:0] icmp_ln86_582_fu_450_p2;
reg   [0:0] icmp_ln86_582_reg_1452;
wire   [0:0] icmp_ln86_583_fu_456_p2;
reg   [0:0] icmp_ln86_583_reg_1458;
wire   [0:0] icmp_ln86_584_fu_462_p2;
reg   [0:0] icmp_ln86_584_reg_1464;
wire   [0:0] icmp_ln86_585_fu_468_p2;
reg   [0:0] icmp_ln86_585_reg_1470;
wire   [0:0] icmp_ln86_594_fu_522_p2;
reg   [0:0] icmp_ln86_594_reg_1476;
wire   [0:0] icmp_ln86_595_fu_528_p2;
reg   [0:0] icmp_ln86_595_reg_1481;
wire   [0:0] icmp_ln86_596_fu_534_p2;
reg   [0:0] icmp_ln86_596_reg_1486;
wire   [0:0] icmp_ln86_597_fu_540_p2;
reg   [0:0] icmp_ln86_597_reg_1491;
wire   [0:0] icmp_ln86_598_fu_546_p2;
reg   [0:0] icmp_ln86_598_reg_1496;
wire   [0:0] icmp_ln86_599_fu_552_p2;
reg   [0:0] icmp_ln86_599_reg_1501;
wire   [0:0] icmp_ln86_600_fu_558_p2;
reg   [0:0] icmp_ln86_600_reg_1506;
wire   [4:0] select_ln117_569_fu_938_p3;
reg   [4:0] select_ln117_569_reg_1511;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln86_572_fu_390_p2;
wire   [0:0] xor_ln104_276_fu_570_p2;
wire   [0:0] icmp_ln86_574_fu_402_p2;
wire   [0:0] and_ln102_fu_564_p2;
wire   [0:0] xor_ln104_278_fu_588_p2;
wire   [0:0] icmp_ln86_575_fu_408_p2;
wire   [0:0] and_ln104_fu_576_p2;
wire   [0:0] xor_ln104_279_fu_606_p2;
wire   [0:0] icmp_ln86_578_fu_426_p2;
wire   [0:0] and_ln102_551_fu_582_p2;
wire   [0:0] icmp_ln86_579_fu_432_p2;
wire   [0:0] and_ln104_114_fu_594_p2;
wire   [0:0] icmp_ln86_580_fu_438_p2;
wire   [0:0] and_ln102_552_fu_600_p2;
wire   [0:0] icmp_ln86_581_fu_444_p2;
wire   [0:0] and_ln104_115_fu_612_p2;
wire   [0:0] icmp_ln86_586_fu_474_p2;
wire   [0:0] and_ln102_555_fu_618_p2;
wire   [0:0] icmp_ln86_587_fu_480_p2;
wire   [0:0] xor_ln104_282_fu_624_p2;
wire   [0:0] and_ln102_577_fu_672_p2;
wire   [0:0] icmp_ln86_588_fu_486_p2;
wire   [0:0] and_ln102_556_fu_630_p2;
wire   [0:0] icmp_ln86_589_fu_492_p2;
wire   [0:0] xor_ln104_283_fu_636_p2;
wire   [0:0] and_ln102_578_fu_690_p2;
wire   [0:0] icmp_ln86_590_fu_498_p2;
wire   [0:0] and_ln102_557_fu_642_p2;
wire   [0:0] icmp_ln86_591_fu_504_p2;
wire   [0:0] xor_ln104_284_fu_648_p2;
wire   [0:0] and_ln102_579_fu_708_p2;
wire   [0:0] icmp_ln86_592_fu_510_p2;
wire   [0:0] and_ln102_558_fu_654_p2;
wire   [0:0] icmp_ln86_593_fu_516_p2;
wire   [0:0] xor_ln104_285_fu_660_p2;
wire   [0:0] and_ln102_580_fu_726_p2;
wire   [0:0] and_ln102_562_fu_666_p2;
wire   [0:0] xor_ln117_fu_738_p2;
wire   [0:0] and_ln102_563_fu_678_p2;
wire   [1:0] zext_ln117_fu_744_p1;
wire   [0:0] or_ln117_fu_748_p2;
wire   [1:0] select_ln117_fu_754_p3;
wire   [1:0] select_ln117_556_fu_762_p3;
wire   [0:0] and_ln102_564_fu_684_p2;
wire   [2:0] zext_ln117_63_fu_770_p1;
wire   [0:0] or_ln117_531_fu_774_p2;
wire   [2:0] select_ln117_557_fu_780_p3;
wire   [0:0] or_ln117_532_fu_788_p2;
wire   [0:0] and_ln102_565_fu_696_p2;
wire   [2:0] select_ln117_558_fu_794_p3;
wire   [0:0] or_ln117_533_fu_802_p2;
wire   [2:0] select_ln117_559_fu_808_p3;
wire   [2:0] select_ln117_560_fu_816_p3;
wire   [0:0] and_ln102_566_fu_702_p2;
wire   [3:0] zext_ln117_64_fu_824_p1;
wire   [0:0] or_ln117_534_fu_828_p2;
wire   [3:0] select_ln117_561_fu_834_p3;
wire   [0:0] or_ln117_535_fu_842_p2;
wire   [0:0] and_ln102_567_fu_714_p2;
wire   [3:0] select_ln117_562_fu_848_p3;
wire   [0:0] or_ln117_536_fu_856_p2;
wire   [3:0] select_ln117_563_fu_862_p3;
wire   [0:0] or_ln117_537_fu_870_p2;
wire   [0:0] and_ln102_568_fu_720_p2;
wire   [3:0] select_ln117_564_fu_876_p3;
wire   [0:0] or_ln117_538_fu_884_p2;
wire   [3:0] select_ln117_565_fu_890_p3;
wire   [0:0] or_ln117_539_fu_898_p2;
wire   [0:0] and_ln102_569_fu_732_p2;
wire   [3:0] select_ln117_566_fu_904_p3;
wire   [0:0] or_ln117_540_fu_912_p2;
wire   [3:0] select_ln117_567_fu_918_p3;
wire   [3:0] select_ln117_568_fu_926_p3;
wire   [4:0] zext_ln117_65_fu_934_p1;
wire   [0:0] xor_ln104_fu_946_p2;
wire   [0:0] xor_ln104_277_fu_956_p2;
wire   [0:0] and_ln102_550_fu_951_p2;
wire   [0:0] xor_ln104_280_fu_972_p2;
wire   [0:0] and_ln104_113_fu_961_p2;
wire   [0:0] xor_ln104_281_fu_988_p2;
wire   [0:0] and_ln102_553_fu_967_p2;
wire   [0:0] and_ln102_554_fu_983_p2;
wire   [0:0] and_ln104_117_fu_993_p2;
wire   [0:0] and_ln102_559_fu_999_p2;
wire   [0:0] xor_ln104_286_fu_1004_p2;
wire   [0:0] and_ln102_581_fu_1039_p2;
wire   [0:0] and_ln104_116_fu_977_p2;
wire   [0:0] xor_ln104_287_fu_1009_p2;
wire   [0:0] and_ln102_582_fu_1055_p2;
wire   [0:0] and_ln102_560_fu_1014_p2;
wire   [0:0] xor_ln104_288_fu_1019_p2;
wire   [0:0] and_ln102_583_fu_1071_p2;
wire   [0:0] and_ln102_561_fu_1024_p2;
wire   [0:0] xor_ln104_289_fu_1029_p2;
wire   [0:0] and_ln102_584_fu_1087_p2;
wire   [0:0] and_ln102_570_fu_1034_p2;
wire   [0:0] or_ln117_541_fu_1098_p2;
wire   [0:0] or_ln117_542_fu_1103_p2;
wire   [0:0] and_ln102_571_fu_1044_p2;
wire   [4:0] select_ln117_570_fu_1108_p3;
wire   [0:0] or_ln117_543_fu_1115_p2;
wire   [4:0] select_ln117_571_fu_1121_p3;
wire   [0:0] or_ln117_544_fu_1129_p2;
wire   [0:0] and_ln104_118_fu_1050_p2;
wire   [4:0] select_ln117_572_fu_1134_p3;
wire   [0:0] or_ln117_545_fu_1142_p2;
wire   [0:0] and_ln102_572_fu_1060_p2;
wire   [4:0] select_ln117_573_fu_1148_p3;
wire   [0:0] or_ln117_546_fu_1156_p2;
wire   [4:0] select_ln117_574_fu_1162_p3;
wire   [0:0] or_ln117_547_fu_1170_p2;
wire   [0:0] and_ln102_573_fu_1066_p2;
wire   [4:0] select_ln117_575_fu_1175_p3;
wire   [0:0] or_ln117_548_fu_1183_p2;
wire   [4:0] select_ln117_576_fu_1189_p3;
wire   [0:0] or_ln117_549_fu_1197_p2;
wire   [0:0] and_ln102_574_fu_1076_p2;
wire   [4:0] select_ln117_577_fu_1203_p3;
wire   [0:0] or_ln117_550_fu_1211_p2;
wire   [4:0] select_ln117_578_fu_1217_p3;
wire   [0:0] or_ln117_551_fu_1225_p2;
wire   [0:0] and_ln102_575_fu_1082_p2;
wire   [4:0] select_ln117_579_fu_1231_p3;
wire   [0:0] or_ln117_552_fu_1239_p2;
wire   [4:0] select_ln117_580_fu_1245_p3;
wire   [0:0] or_ln117_553_fu_1253_p2;
wire   [0:0] and_ln102_576_fu_1092_p2;
wire   [4:0] select_ln117_581_fu_1259_p3;
wire   [0:0] or_ln117_554_fu_1267_p2;
wire   [4:0] select_ln117_582_fu_1273_p3;
wire   [11:0] agg_result_fu_1289_p65;
wire   [4:0] agg_result_fu_1289_p66;
wire   [11:0] agg_result_fu_1289_p67;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1289_p1;
wire   [4:0] agg_result_fu_1289_p3;
wire   [4:0] agg_result_fu_1289_p5;
wire   [4:0] agg_result_fu_1289_p7;
wire   [4:0] agg_result_fu_1289_p9;
wire   [4:0] agg_result_fu_1289_p11;
wire   [4:0] agg_result_fu_1289_p13;
wire   [4:0] agg_result_fu_1289_p15;
wire   [4:0] agg_result_fu_1289_p17;
wire   [4:0] agg_result_fu_1289_p19;
wire   [4:0] agg_result_fu_1289_p21;
wire   [4:0] agg_result_fu_1289_p23;
wire   [4:0] agg_result_fu_1289_p25;
wire   [4:0] agg_result_fu_1289_p27;
wire   [4:0] agg_result_fu_1289_p29;
wire   [4:0] agg_result_fu_1289_p31;
wire  signed [4:0] agg_result_fu_1289_p33;
wire  signed [4:0] agg_result_fu_1289_p35;
wire  signed [4:0] agg_result_fu_1289_p37;
wire  signed [4:0] agg_result_fu_1289_p39;
wire  signed [4:0] agg_result_fu_1289_p41;
wire  signed [4:0] agg_result_fu_1289_p43;
wire  signed [4:0] agg_result_fu_1289_p45;
wire  signed [4:0] agg_result_fu_1289_p47;
wire  signed [4:0] agg_result_fu_1289_p49;
wire  signed [4:0] agg_result_fu_1289_p51;
wire  signed [4:0] agg_result_fu_1289_p53;
wire  signed [4:0] agg_result_fu_1289_p55;
wire  signed [4:0] agg_result_fu_1289_p57;
wire  signed [4:0] agg_result_fu_1289_p59;
wire  signed [4:0] agg_result_fu_1289_p61;
wire  signed [4:0] agg_result_fu_1289_p63;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_65_5_12_1_1_x30 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 12 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 12 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 12 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 12 ),
    .CASE31( 5'h1F ),
    .din31_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_65_5_12_1_1_x30_U1680(
    .din0(12'd24),
    .din1(12'd4070),
    .din2(12'd1398),
    .din3(12'd3973),
    .din4(12'd3726),
    .din5(12'd471),
    .din6(12'd79),
    .din7(12'd4083),
    .din8(12'd10),
    .din9(12'd3761),
    .din10(12'd3760),
    .din11(12'd1747),
    .din12(12'd3497),
    .din13(12'd4066),
    .din14(12'd4078),
    .din15(12'd3895),
    .din16(12'd58),
    .din17(12'd323),
    .din18(12'd1416),
    .din19(12'd54),
    .din20(12'd4036),
    .din21(12'd1510),
    .din22(12'd3962),
    .din23(12'd552),
    .din24(12'd3970),
    .din25(12'd3365),
    .din26(12'd597),
    .din27(12'd3903),
    .din28(12'd92),
    .din29(12'd3566),
    .din30(12'd1754),
    .din31(12'd153),
    .def(agg_result_fu_1289_p65),
    .sel(agg_result_fu_1289_p66),
    .dout(agg_result_fu_1289_p67)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_573_reg_1434 <= icmp_ln86_573_fu_396_p2;
        icmp_ln86_576_reg_1440 <= icmp_ln86_576_fu_414_p2;
        icmp_ln86_577_reg_1446 <= icmp_ln86_577_fu_420_p2;
        icmp_ln86_582_reg_1452 <= icmp_ln86_582_fu_450_p2;
        icmp_ln86_583_reg_1458 <= icmp_ln86_583_fu_456_p2;
        icmp_ln86_584_reg_1464 <= icmp_ln86_584_fu_462_p2;
        icmp_ln86_585_reg_1470 <= icmp_ln86_585_fu_468_p2;
        icmp_ln86_594_reg_1476 <= icmp_ln86_594_fu_522_p2;
        icmp_ln86_595_reg_1481 <= icmp_ln86_595_fu_528_p2;
        icmp_ln86_596_reg_1486 <= icmp_ln86_596_fu_534_p2;
        icmp_ln86_597_reg_1491 <= icmp_ln86_597_fu_540_p2;
        icmp_ln86_598_reg_1496 <= icmp_ln86_598_fu_546_p2;
        icmp_ln86_599_reg_1501 <= icmp_ln86_599_fu_552_p2;
        icmp_ln86_600_reg_1506 <= icmp_ln86_600_fu_558_p2;
        icmp_ln86_reg_1425 <= icmp_ln86_fu_384_p2;
        select_ln117_569_reg_1511 <= select_ln117_569_fu_938_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1289_p65 = 'bx;

assign agg_result_fu_1289_p66 = ((or_ln117_554_fu_1267_p2[0:0] == 1'b1) ? select_ln117_582_fu_1273_p3 : 5'd31);

assign and_ln102_550_fu_951_p2 = (xor_ln104_fu_946_p2 & icmp_ln86_573_reg_1434);

assign and_ln102_551_fu_582_p2 = (icmp_ln86_574_fu_402_p2 & and_ln102_fu_564_p2);

assign and_ln102_552_fu_600_p2 = (icmp_ln86_575_fu_408_p2 & and_ln104_fu_576_p2);

assign and_ln102_553_fu_967_p2 = (icmp_ln86_576_reg_1440 & and_ln102_550_fu_951_p2);

assign and_ln102_554_fu_983_p2 = (icmp_ln86_577_reg_1446 & and_ln104_113_fu_961_p2);

assign and_ln102_555_fu_618_p2 = (icmp_ln86_578_fu_426_p2 & and_ln102_551_fu_582_p2);

assign and_ln102_556_fu_630_p2 = (icmp_ln86_579_fu_432_p2 & and_ln104_114_fu_594_p2);

assign and_ln102_557_fu_642_p2 = (icmp_ln86_580_fu_438_p2 & and_ln102_552_fu_600_p2);

assign and_ln102_558_fu_654_p2 = (icmp_ln86_581_fu_444_p2 & and_ln104_115_fu_612_p2);

assign and_ln102_559_fu_999_p2 = (icmp_ln86_582_reg_1452 & and_ln102_553_fu_967_p2);

assign and_ln102_560_fu_1014_p2 = (icmp_ln86_584_reg_1464 & and_ln102_554_fu_983_p2);

assign and_ln102_561_fu_1024_p2 = (icmp_ln86_585_reg_1470 & and_ln104_117_fu_993_p2);

assign and_ln102_562_fu_666_p2 = (icmp_ln86_586_fu_474_p2 & and_ln102_555_fu_618_p2);

assign and_ln102_563_fu_678_p2 = (and_ln102_577_fu_672_p2 & and_ln102_551_fu_582_p2);

assign and_ln102_564_fu_684_p2 = (icmp_ln86_588_fu_486_p2 & and_ln102_556_fu_630_p2);

assign and_ln102_565_fu_696_p2 = (and_ln104_114_fu_594_p2 & and_ln102_578_fu_690_p2);

assign and_ln102_566_fu_702_p2 = (icmp_ln86_590_fu_498_p2 & and_ln102_557_fu_642_p2);

assign and_ln102_567_fu_714_p2 = (and_ln102_579_fu_708_p2 & and_ln102_552_fu_600_p2);

assign and_ln102_568_fu_720_p2 = (icmp_ln86_592_fu_510_p2 & and_ln102_558_fu_654_p2);

assign and_ln102_569_fu_732_p2 = (and_ln104_115_fu_612_p2 & and_ln102_580_fu_726_p2);

assign and_ln102_570_fu_1034_p2 = (icmp_ln86_594_reg_1476 & and_ln102_559_fu_999_p2);

assign and_ln102_571_fu_1044_p2 = (and_ln102_581_fu_1039_p2 & and_ln102_553_fu_967_p2);

assign and_ln102_572_fu_1060_p2 = (and_ln104_116_fu_977_p2 & and_ln102_582_fu_1055_p2);

assign and_ln102_573_fu_1066_p2 = (icmp_ln86_597_reg_1491 & and_ln102_560_fu_1014_p2);

assign and_ln102_574_fu_1076_p2 = (and_ln102_583_fu_1071_p2 & and_ln102_554_fu_983_p2);

assign and_ln102_575_fu_1082_p2 = (icmp_ln86_599_reg_1501 & and_ln102_561_fu_1024_p2);

assign and_ln102_576_fu_1092_p2 = (and_ln104_117_fu_993_p2 & and_ln102_584_fu_1087_p2);

assign and_ln102_577_fu_672_p2 = (xor_ln104_282_fu_624_p2 & icmp_ln86_587_fu_480_p2);

assign and_ln102_578_fu_690_p2 = (xor_ln104_283_fu_636_p2 & icmp_ln86_589_fu_492_p2);

assign and_ln102_579_fu_708_p2 = (xor_ln104_284_fu_648_p2 & icmp_ln86_591_fu_504_p2);

assign and_ln102_580_fu_726_p2 = (xor_ln104_285_fu_660_p2 & icmp_ln86_593_fu_516_p2);

assign and_ln102_581_fu_1039_p2 = (xor_ln104_286_fu_1004_p2 & icmp_ln86_595_reg_1481);

assign and_ln102_582_fu_1055_p2 = (xor_ln104_287_fu_1009_p2 & icmp_ln86_596_reg_1486);

assign and_ln102_583_fu_1071_p2 = (xor_ln104_288_fu_1019_p2 & icmp_ln86_598_reg_1496);

assign and_ln102_584_fu_1087_p2 = (xor_ln104_289_fu_1029_p2 & icmp_ln86_600_reg_1506);

assign and_ln102_fu_564_p2 = (icmp_ln86_fu_384_p2 & icmp_ln86_572_fu_390_p2);

assign and_ln104_113_fu_961_p2 = (xor_ln104_fu_946_p2 & xor_ln104_277_fu_956_p2);

assign and_ln104_114_fu_594_p2 = (xor_ln104_278_fu_588_p2 & and_ln102_fu_564_p2);

assign and_ln104_115_fu_612_p2 = (xor_ln104_279_fu_606_p2 & and_ln104_fu_576_p2);

assign and_ln104_116_fu_977_p2 = (xor_ln104_280_fu_972_p2 & and_ln102_550_fu_951_p2);

assign and_ln104_117_fu_993_p2 = (xor_ln104_281_fu_988_p2 & and_ln104_113_fu_961_p2);

assign and_ln104_118_fu_1050_p2 = (icmp_ln86_583_reg_1458 & and_ln104_116_fu_977_p2);

assign and_ln104_fu_576_p2 = (xor_ln104_276_fu_570_p2 & icmp_ln86_fu_384_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1289_p67;

assign icmp_ln86_572_fu_390_p2 = (($signed(x_45_val) < $signed(18'd371)) ? 1'b1 : 1'b0);

assign icmp_ln86_573_fu_396_p2 = (($signed(x_33_val) < $signed(18'd710)) ? 1'b1 : 1'b0);

assign icmp_ln86_574_fu_402_p2 = (($signed(x_40_val) < $signed(18'd1203)) ? 1'b1 : 1'b0);

assign icmp_ln86_575_fu_408_p2 = (($signed(x_46_val) < $signed(18'd209)) ? 1'b1 : 1'b0);

assign icmp_ln86_576_fu_414_p2 = (($signed(x_32_val) < $signed(18'd824)) ? 1'b1 : 1'b0);

assign icmp_ln86_577_fu_420_p2 = (($signed(x_33_val) < $signed(18'd843)) ? 1'b1 : 1'b0);

assign icmp_ln86_578_fu_426_p2 = (($signed(x_39_val) < $signed(18'd1491)) ? 1'b1 : 1'b0);

assign icmp_ln86_579_fu_432_p2 = (($signed(x_6_val) < $signed(18'd7286)) ? 1'b1 : 1'b0);

assign icmp_ln86_580_fu_438_p2 = (($signed(x_10_val) < $signed(18'd929)) ? 1'b1 : 1'b0);

assign icmp_ln86_581_fu_444_p2 = (($signed(x_2_val) < $signed(18'd260572)) ? 1'b1 : 1'b0);

assign icmp_ln86_582_fu_450_p2 = (($signed(x_33_val) < $signed(18'd702)) ? 1'b1 : 1'b0);

assign icmp_ln86_583_fu_456_p2 = (($signed(x_17_val) < $signed(18'd59)) ? 1'b1 : 1'b0);

assign icmp_ln86_584_fu_462_p2 = (($signed(x_48_val) < $signed(18'd114804)) ? 1'b1 : 1'b0);

assign icmp_ln86_585_fu_468_p2 = (($signed(x_35_val) < $signed(18'd14)) ? 1'b1 : 1'b0);

assign icmp_ln86_586_fu_474_p2 = (($signed(x_44_val) < $signed(18'd30)) ? 1'b1 : 1'b0);

assign icmp_ln86_587_fu_480_p2 = (($signed(x_23_val) < $signed(18'd5)) ? 1'b1 : 1'b0);

assign icmp_ln86_588_fu_486_p2 = (($signed(x_33_val) < $signed(18'd750)) ? 1'b1 : 1'b0);

assign icmp_ln86_589_fu_492_p2 = (($signed(x_2_val) < $signed(18'd472)) ? 1'b1 : 1'b0);

assign icmp_ln86_590_fu_498_p2 = (($signed(x_51_val) < $signed(18'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_591_fu_504_p2 = (($signed(x_16_val) < $signed(18'd82)) ? 1'b1 : 1'b0);

assign icmp_ln86_592_fu_510_p2 = (($signed(x_47_val) < $signed(18'd124830)) ? 1'b1 : 1'b0);

assign icmp_ln86_593_fu_516_p2 = (($signed(x_16_val) < $signed(18'd154)) ? 1'b1 : 1'b0);

assign icmp_ln86_594_fu_522_p2 = (($signed(x_2_val) < $signed(18'd1158)) ? 1'b1 : 1'b0);

assign icmp_ln86_595_fu_528_p2 = (($signed(x_39_val) < $signed(18'd1684)) ? 1'b1 : 1'b0);

assign icmp_ln86_596_fu_534_p2 = (($signed(x_47_val) < $signed(18'd82875)) ? 1'b1 : 1'b0);

assign icmp_ln86_597_fu_540_p2 = (($signed(x_15_val) < $signed(18'd19)) ? 1'b1 : 1'b0);

assign icmp_ln86_598_fu_546_p2 = (($signed(x_33_val) < $signed(18'd772)) ? 1'b1 : 1'b0);

assign icmp_ln86_599_fu_552_p2 = (($signed(x_33_val) < $signed(18'd847)) ? 1'b1 : 1'b0);

assign icmp_ln86_600_fu_558_p2 = (($signed(x_29_val) < $signed(18'd601)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_384_p2 = (($signed(x_17_val) < $signed(18'd58)) ? 1'b1 : 1'b0);

assign or_ln117_531_fu_774_p2 = (and_ln102_564_fu_684_p2 | and_ln102_551_fu_582_p2);

assign or_ln117_532_fu_788_p2 = (and_ln102_556_fu_630_p2 | and_ln102_551_fu_582_p2);

assign or_ln117_533_fu_802_p2 = (or_ln117_532_fu_788_p2 | and_ln102_565_fu_696_p2);

assign or_ln117_534_fu_828_p2 = (and_ln102_fu_564_p2 | and_ln102_566_fu_702_p2);

assign or_ln117_535_fu_842_p2 = (and_ln102_fu_564_p2 | and_ln102_557_fu_642_p2);

assign or_ln117_536_fu_856_p2 = (or_ln117_535_fu_842_p2 | and_ln102_567_fu_714_p2);

assign or_ln117_537_fu_870_p2 = (and_ln102_fu_564_p2 | and_ln102_552_fu_600_p2);

assign or_ln117_538_fu_884_p2 = (or_ln117_537_fu_870_p2 | and_ln102_568_fu_720_p2);

assign or_ln117_539_fu_898_p2 = (or_ln117_537_fu_870_p2 | and_ln102_558_fu_654_p2);

assign or_ln117_540_fu_912_p2 = (or_ln117_539_fu_898_p2 | and_ln102_569_fu_732_p2);

assign or_ln117_541_fu_1098_p2 = (icmp_ln86_reg_1425 | and_ln102_570_fu_1034_p2);

assign or_ln117_542_fu_1103_p2 = (icmp_ln86_reg_1425 | and_ln102_559_fu_999_p2);

assign or_ln117_543_fu_1115_p2 = (or_ln117_542_fu_1103_p2 | and_ln102_571_fu_1044_p2);

assign or_ln117_544_fu_1129_p2 = (icmp_ln86_reg_1425 | and_ln102_553_fu_967_p2);

assign or_ln117_545_fu_1142_p2 = (or_ln117_544_fu_1129_p2 | and_ln104_118_fu_1050_p2);

assign or_ln117_546_fu_1156_p2 = (or_ln117_545_fu_1142_p2 | and_ln102_572_fu_1060_p2);

assign or_ln117_547_fu_1170_p2 = (icmp_ln86_reg_1425 | and_ln102_550_fu_951_p2);

assign or_ln117_548_fu_1183_p2 = (or_ln117_547_fu_1170_p2 | and_ln102_573_fu_1066_p2);

assign or_ln117_549_fu_1197_p2 = (or_ln117_547_fu_1170_p2 | and_ln102_560_fu_1014_p2);

assign or_ln117_550_fu_1211_p2 = (or_ln117_549_fu_1197_p2 | and_ln102_574_fu_1076_p2);

assign or_ln117_551_fu_1225_p2 = (or_ln117_547_fu_1170_p2 | and_ln102_554_fu_983_p2);

assign or_ln117_552_fu_1239_p2 = (or_ln117_551_fu_1225_p2 | and_ln102_575_fu_1082_p2);

assign or_ln117_553_fu_1253_p2 = (or_ln117_551_fu_1225_p2 | and_ln102_561_fu_1024_p2);

assign or_ln117_554_fu_1267_p2 = (or_ln117_553_fu_1253_p2 | and_ln102_576_fu_1092_p2);

assign or_ln117_fu_748_p2 = (and_ln102_563_fu_678_p2 | and_ln102_555_fu_618_p2);

assign select_ln117_556_fu_762_p3 = ((or_ln117_fu_748_p2[0:0] == 1'b1) ? select_ln117_fu_754_p3 : 2'd3);

assign select_ln117_557_fu_780_p3 = ((and_ln102_551_fu_582_p2[0:0] == 1'b1) ? zext_ln117_63_fu_770_p1 : 3'd4);

assign select_ln117_558_fu_794_p3 = ((or_ln117_531_fu_774_p2[0:0] == 1'b1) ? select_ln117_557_fu_780_p3 : 3'd5);

assign select_ln117_559_fu_808_p3 = ((or_ln117_532_fu_788_p2[0:0] == 1'b1) ? select_ln117_558_fu_794_p3 : 3'd6);

assign select_ln117_560_fu_816_p3 = ((or_ln117_533_fu_802_p2[0:0] == 1'b1) ? select_ln117_559_fu_808_p3 : 3'd7);

assign select_ln117_561_fu_834_p3 = ((and_ln102_fu_564_p2[0:0] == 1'b1) ? zext_ln117_64_fu_824_p1 : 4'd8);

assign select_ln117_562_fu_848_p3 = ((or_ln117_534_fu_828_p2[0:0] == 1'b1) ? select_ln117_561_fu_834_p3 : 4'd9);

assign select_ln117_563_fu_862_p3 = ((or_ln117_535_fu_842_p2[0:0] == 1'b1) ? select_ln117_562_fu_848_p3 : 4'd10);

assign select_ln117_564_fu_876_p3 = ((or_ln117_536_fu_856_p2[0:0] == 1'b1) ? select_ln117_563_fu_862_p3 : 4'd11);

assign select_ln117_565_fu_890_p3 = ((or_ln117_537_fu_870_p2[0:0] == 1'b1) ? select_ln117_564_fu_876_p3 : 4'd12);

assign select_ln117_566_fu_904_p3 = ((or_ln117_538_fu_884_p2[0:0] == 1'b1) ? select_ln117_565_fu_890_p3 : 4'd13);

assign select_ln117_567_fu_918_p3 = ((or_ln117_539_fu_898_p2[0:0] == 1'b1) ? select_ln117_566_fu_904_p3 : 4'd14);

assign select_ln117_568_fu_926_p3 = ((or_ln117_540_fu_912_p2[0:0] == 1'b1) ? select_ln117_567_fu_918_p3 : 4'd15);

assign select_ln117_569_fu_938_p3 = ((icmp_ln86_fu_384_p2[0:0] == 1'b1) ? zext_ln117_65_fu_934_p1 : 5'd16);

assign select_ln117_570_fu_1108_p3 = ((or_ln117_541_fu_1098_p2[0:0] == 1'b1) ? select_ln117_569_reg_1511 : 5'd17);

assign select_ln117_571_fu_1121_p3 = ((or_ln117_542_fu_1103_p2[0:0] == 1'b1) ? select_ln117_570_fu_1108_p3 : 5'd18);

assign select_ln117_572_fu_1134_p3 = ((or_ln117_543_fu_1115_p2[0:0] == 1'b1) ? select_ln117_571_fu_1121_p3 : 5'd19);

assign select_ln117_573_fu_1148_p3 = ((or_ln117_544_fu_1129_p2[0:0] == 1'b1) ? select_ln117_572_fu_1134_p3 : 5'd21);

assign select_ln117_574_fu_1162_p3 = ((or_ln117_545_fu_1142_p2[0:0] == 1'b1) ? select_ln117_573_fu_1148_p3 : 5'd22);

assign select_ln117_575_fu_1175_p3 = ((or_ln117_546_fu_1156_p2[0:0] == 1'b1) ? select_ln117_574_fu_1162_p3 : 5'd23);

assign select_ln117_576_fu_1189_p3 = ((or_ln117_547_fu_1170_p2[0:0] == 1'b1) ? select_ln117_575_fu_1175_p3 : 5'd24);

assign select_ln117_577_fu_1203_p3 = ((or_ln117_548_fu_1183_p2[0:0] == 1'b1) ? select_ln117_576_fu_1189_p3 : 5'd25);

assign select_ln117_578_fu_1217_p3 = ((or_ln117_549_fu_1197_p2[0:0] == 1'b1) ? select_ln117_577_fu_1203_p3 : 5'd26);

assign select_ln117_579_fu_1231_p3 = ((or_ln117_550_fu_1211_p2[0:0] == 1'b1) ? select_ln117_578_fu_1217_p3 : 5'd27);

assign select_ln117_580_fu_1245_p3 = ((or_ln117_551_fu_1225_p2[0:0] == 1'b1) ? select_ln117_579_fu_1231_p3 : 5'd28);

assign select_ln117_581_fu_1259_p3 = ((or_ln117_552_fu_1239_p2[0:0] == 1'b1) ? select_ln117_580_fu_1245_p3 : 5'd29);

assign select_ln117_582_fu_1273_p3 = ((or_ln117_553_fu_1253_p2[0:0] == 1'b1) ? select_ln117_581_fu_1259_p3 : 5'd30);

assign select_ln117_fu_754_p3 = ((and_ln102_555_fu_618_p2[0:0] == 1'b1) ? zext_ln117_fu_744_p1 : 2'd2);

assign xor_ln104_276_fu_570_p2 = (icmp_ln86_572_fu_390_p2 ^ 1'd1);

assign xor_ln104_277_fu_956_p2 = (icmp_ln86_573_reg_1434 ^ 1'd1);

assign xor_ln104_278_fu_588_p2 = (icmp_ln86_574_fu_402_p2 ^ 1'd1);

assign xor_ln104_279_fu_606_p2 = (icmp_ln86_575_fu_408_p2 ^ 1'd1);

assign xor_ln104_280_fu_972_p2 = (icmp_ln86_576_reg_1440 ^ 1'd1);

assign xor_ln104_281_fu_988_p2 = (icmp_ln86_577_reg_1446 ^ 1'd1);

assign xor_ln104_282_fu_624_p2 = (icmp_ln86_578_fu_426_p2 ^ 1'd1);

assign xor_ln104_283_fu_636_p2 = (icmp_ln86_579_fu_432_p2 ^ 1'd1);

assign xor_ln104_284_fu_648_p2 = (icmp_ln86_580_fu_438_p2 ^ 1'd1);

assign xor_ln104_285_fu_660_p2 = (icmp_ln86_581_fu_444_p2 ^ 1'd1);

assign xor_ln104_286_fu_1004_p2 = (icmp_ln86_582_reg_1452 ^ 1'd1);

assign xor_ln104_287_fu_1009_p2 = (icmp_ln86_583_reg_1458 ^ 1'd1);

assign xor_ln104_288_fu_1019_p2 = (icmp_ln86_584_reg_1464 ^ 1'd1);

assign xor_ln104_289_fu_1029_p2 = (icmp_ln86_585_reg_1470 ^ 1'd1);

assign xor_ln104_fu_946_p2 = (icmp_ln86_reg_1425 ^ 1'd1);

assign xor_ln117_fu_738_p2 = (1'd1 ^ and_ln102_562_fu_666_p2);

assign zext_ln117_63_fu_770_p1 = select_ln117_556_fu_762_p3;

assign zext_ln117_64_fu_824_p1 = select_ln117_560_fu_816_p3;

assign zext_ln117_65_fu_934_p1 = select_ln117_568_fu_926_p3;

assign zext_ln117_fu_744_p1 = xor_ln117_fu_738_p2;

endmodule //my_prj_decision_function_22
