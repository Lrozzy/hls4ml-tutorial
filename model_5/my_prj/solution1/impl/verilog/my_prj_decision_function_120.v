// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_120 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_3_val,
        x_10_val,
        x_12_val,
        x_14_val,
        x_18_val,
        x_19_val,
        x_21_val,
        x_22_val,
        x_39_val,
        x_40_val,
        x_43_val,
        x_44_val,
        x_45_val,
        x_47_val,
        x_51_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_3_val;
input  [17:0] x_10_val;
input  [17:0] x_12_val;
input  [17:0] x_14_val;
input  [17:0] x_18_val;
input  [17:0] x_19_val;
input  [17:0] x_21_val;
input  [17:0] x_22_val;
input  [17:0] x_39_val;
input  [17:0] x_40_val;
input  [17:0] x_43_val;
input  [17:0] x_44_val;
input  [17:0] x_45_val;
input  [17:0] x_47_val;
input  [17:0] x_51_val;
input  [17:0] x_52_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_360_p2;
reg   [0:0] icmp_ln86_reg_1422;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_1495_fu_372_p2;
reg   [0:0] icmp_ln86_1495_reg_1431;
wire   [0:0] icmp_ln86_1498_fu_390_p2;
reg   [0:0] icmp_ln86_1498_reg_1437;
wire   [0:0] icmp_ln86_1499_fu_396_p2;
reg   [0:0] icmp_ln86_1499_reg_1443;
wire   [0:0] icmp_ln86_1504_fu_426_p2;
reg   [0:0] icmp_ln86_1504_reg_1449;
wire   [0:0] icmp_ln86_1505_fu_432_p2;
reg   [0:0] icmp_ln86_1505_reg_1455;
wire   [0:0] icmp_ln86_1506_fu_438_p2;
reg   [0:0] icmp_ln86_1506_reg_1461;
wire   [0:0] icmp_ln86_1507_fu_444_p2;
reg   [0:0] icmp_ln86_1507_reg_1467;
wire   [0:0] icmp_ln86_1514_fu_494_p2;
reg   [0:0] icmp_ln86_1514_reg_1473;
wire   [0:0] icmp_ln86_1515_fu_500_p2;
reg   [0:0] icmp_ln86_1515_reg_1478;
wire   [0:0] icmp_ln86_1516_fu_506_p2;
reg   [0:0] icmp_ln86_1516_reg_1483;
wire   [0:0] icmp_ln86_1517_fu_512_p2;
reg   [0:0] icmp_ln86_1517_reg_1488;
wire   [0:0] icmp_ln86_1518_fu_518_p2;
reg   [0:0] icmp_ln86_1518_reg_1493;
wire   [0:0] icmp_ln86_1519_fu_524_p2;
reg   [0:0] icmp_ln86_1519_reg_1498;
wire   [0:0] icmp_ln86_1520_fu_530_p2;
reg   [0:0] icmp_ln86_1520_reg_1503;
wire   [0:0] icmp_ln86_1521_fu_536_p2;
reg   [0:0] icmp_ln86_1521_reg_1508;
wire   [4:0] select_ln117_1459_fu_916_p3;
reg   [4:0] select_ln117_1459_reg_1513;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln86_1494_fu_366_p2;
wire   [0:0] xor_ln104_714_fu_548_p2;
wire   [0:0] icmp_ln86_1496_fu_378_p2;
wire   [0:0] and_ln102_fu_542_p2;
wire   [0:0] xor_ln104_716_fu_566_p2;
wire   [0:0] icmp_ln86_1497_fu_384_p2;
wire   [0:0] and_ln104_fu_554_p2;
wire   [0:0] xor_ln104_717_fu_584_p2;
wire   [0:0] icmp_ln86_1500_fu_402_p2;
wire   [0:0] and_ln102_1644_fu_560_p2;
wire   [0:0] icmp_ln86_1501_fu_408_p2;
wire   [0:0] and_ln104_283_fu_572_p2;
wire   [0:0] icmp_ln86_1502_fu_414_p2;
wire   [0:0] and_ln102_1645_fu_578_p2;
wire   [0:0] icmp_ln86_1503_fu_420_p2;
wire   [0:0] and_ln104_284_fu_590_p2;
wire   [0:0] tmp_fu_450_p3;
wire   [0:0] and_ln102_1648_fu_596_p2;
wire   [0:0] icmp_ln86_1508_fu_458_p2;
wire   [0:0] xor_ln104_720_fu_602_p2;
wire   [0:0] and_ln102_1657_fu_650_p2;
wire   [0:0] and_ln102_1649_fu_608_p2;
wire   [0:0] icmp_ln86_1509_fu_464_p2;
wire   [0:0] xor_ln104_721_fu_614_p2;
wire   [0:0] and_ln102_1660_fu_668_p2;
wire   [0:0] icmp_ln86_1510_fu_470_p2;
wire   [0:0] and_ln102_1650_fu_620_p2;
wire   [0:0] icmp_ln86_1511_fu_476_p2;
wire   [0:0] xor_ln104_722_fu_626_p2;
wire   [0:0] and_ln102_1663_fu_686_p2;
wire   [0:0] icmp_ln86_1512_fu_482_p2;
wire   [0:0] and_ln102_1651_fu_632_p2;
wire   [0:0] icmp_ln86_1513_fu_488_p2;
wire   [0:0] xor_ln104_723_fu_638_p2;
wire   [0:0] and_ln102_1666_fu_704_p2;
wire   [0:0] and_ln102_1656_fu_644_p2;
wire   [0:0] xor_ln117_fu_716_p2;
wire   [0:0] and_ln102_1658_fu_656_p2;
wire   [1:0] zext_ln117_fu_722_p1;
wire   [0:0] or_ln117_fu_726_p2;
wire   [1:0] select_ln117_fu_732_p3;
wire   [1:0] select_ln117_1446_fu_740_p3;
wire   [0:0] and_ln102_1659_fu_662_p2;
wire   [2:0] zext_ln117_162_fu_748_p1;
wire   [0:0] or_ln117_1343_fu_752_p2;
wire   [2:0] select_ln117_1447_fu_758_p3;
wire   [0:0] or_ln117_1344_fu_766_p2;
wire   [0:0] and_ln102_1661_fu_674_p2;
wire   [2:0] select_ln117_1448_fu_772_p3;
wire   [0:0] or_ln117_1345_fu_780_p2;
wire   [2:0] select_ln117_1449_fu_786_p3;
wire   [2:0] select_ln117_1450_fu_794_p3;
wire   [0:0] and_ln102_1662_fu_680_p2;
wire   [3:0] zext_ln117_163_fu_802_p1;
wire   [0:0] or_ln117_1346_fu_806_p2;
wire   [3:0] select_ln117_1451_fu_812_p3;
wire   [0:0] or_ln117_1347_fu_820_p2;
wire   [0:0] and_ln102_1664_fu_692_p2;
wire   [3:0] select_ln117_1452_fu_826_p3;
wire   [0:0] or_ln117_1348_fu_834_p2;
wire   [3:0] select_ln117_1453_fu_840_p3;
wire   [0:0] or_ln117_1349_fu_848_p2;
wire   [0:0] and_ln102_1665_fu_698_p2;
wire   [3:0] select_ln117_1454_fu_854_p3;
wire   [0:0] or_ln117_1350_fu_862_p2;
wire   [3:0] select_ln117_1455_fu_868_p3;
wire   [0:0] or_ln117_1351_fu_876_p2;
wire   [0:0] and_ln102_1667_fu_710_p2;
wire   [3:0] select_ln117_1456_fu_882_p3;
wire   [0:0] or_ln117_1352_fu_890_p2;
wire   [3:0] select_ln117_1457_fu_896_p3;
wire   [3:0] select_ln117_1458_fu_904_p3;
wire   [4:0] zext_ln117_164_fu_912_p1;
wire   [0:0] xor_ln104_fu_924_p2;
wire   [0:0] xor_ln104_715_fu_934_p2;
wire   [0:0] and_ln102_1643_fu_929_p2;
wire   [0:0] xor_ln104_718_fu_950_p2;
wire   [0:0] and_ln104_282_fu_939_p2;
wire   [0:0] xor_ln104_719_fu_966_p2;
wire   [0:0] and_ln102_1646_fu_945_p2;
wire   [0:0] and_ln104_285_fu_955_p2;
wire   [0:0] and_ln102_1647_fu_961_p2;
wire   [0:0] and_ln104_286_fu_971_p2;
wire   [0:0] and_ln102_1652_fu_977_p2;
wire   [0:0] xor_ln104_724_fu_982_p2;
wire   [0:0] and_ln102_1669_fu_1022_p2;
wire   [0:0] and_ln102_1653_fu_987_p2;
wire   [0:0] xor_ln104_725_fu_992_p2;
wire   [0:0] and_ln102_1672_fu_1038_p2;
wire   [0:0] and_ln102_1654_fu_997_p2;
wire   [0:0] xor_ln104_726_fu_1002_p2;
wire   [0:0] and_ln102_1675_fu_1054_p2;
wire   [0:0] and_ln102_1655_fu_1007_p2;
wire   [0:0] xor_ln104_727_fu_1012_p2;
wire   [0:0] and_ln102_1678_fu_1070_p2;
wire   [0:0] and_ln102_1668_fu_1017_p2;
wire   [0:0] or_ln117_1353_fu_1081_p2;
wire   [0:0] or_ln117_1354_fu_1086_p2;
wire   [0:0] and_ln102_1670_fu_1027_p2;
wire   [4:0] select_ln117_1460_fu_1091_p3;
wire   [0:0] or_ln117_1355_fu_1098_p2;
wire   [4:0] select_ln117_1461_fu_1104_p3;
wire   [0:0] or_ln117_1356_fu_1112_p2;
wire   [0:0] and_ln102_1671_fu_1033_p2;
wire   [4:0] select_ln117_1462_fu_1117_p3;
wire   [0:0] or_ln117_1357_fu_1125_p2;
wire   [4:0] select_ln117_1463_fu_1131_p3;
wire   [0:0] or_ln117_1358_fu_1139_p2;
wire   [0:0] and_ln102_1673_fu_1043_p2;
wire   [4:0] select_ln117_1464_fu_1145_p3;
wire   [0:0] or_ln117_1359_fu_1153_p2;
wire   [4:0] select_ln117_1465_fu_1159_p3;
wire   [0:0] or_ln117_1360_fu_1167_p2;
wire   [0:0] and_ln102_1674_fu_1049_p2;
wire   [4:0] select_ln117_1466_fu_1172_p3;
wire   [0:0] or_ln117_1361_fu_1180_p2;
wire   [4:0] select_ln117_1467_fu_1186_p3;
wire   [0:0] or_ln117_1362_fu_1194_p2;
wire   [0:0] and_ln102_1676_fu_1059_p2;
wire   [4:0] select_ln117_1468_fu_1200_p3;
wire   [0:0] or_ln117_1363_fu_1208_p2;
wire   [4:0] select_ln117_1469_fu_1214_p3;
wire   [0:0] or_ln117_1364_fu_1222_p2;
wire   [0:0] and_ln102_1677_fu_1065_p2;
wire   [4:0] select_ln117_1470_fu_1228_p3;
wire   [0:0] or_ln117_1365_fu_1236_p2;
wire   [4:0] select_ln117_1471_fu_1242_p3;
wire   [0:0] or_ln117_1366_fu_1250_p2;
wire   [0:0] and_ln102_1679_fu_1075_p2;
wire   [4:0] select_ln117_1472_fu_1256_p3;
wire   [0:0] or_ln117_1367_fu_1264_p2;
wire   [4:0] select_ln117_1473_fu_1270_p3;
wire   [11:0] agg_result_fu_1286_p65;
wire   [4:0] agg_result_fu_1286_p66;
wire   [11:0] agg_result_fu_1286_p67;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1286_p1;
wire   [4:0] agg_result_fu_1286_p3;
wire   [4:0] agg_result_fu_1286_p5;
wire   [4:0] agg_result_fu_1286_p7;
wire   [4:0] agg_result_fu_1286_p9;
wire   [4:0] agg_result_fu_1286_p11;
wire   [4:0] agg_result_fu_1286_p13;
wire   [4:0] agg_result_fu_1286_p15;
wire   [4:0] agg_result_fu_1286_p17;
wire   [4:0] agg_result_fu_1286_p19;
wire   [4:0] agg_result_fu_1286_p21;
wire   [4:0] agg_result_fu_1286_p23;
wire   [4:0] agg_result_fu_1286_p25;
wire   [4:0] agg_result_fu_1286_p27;
wire   [4:0] agg_result_fu_1286_p29;
wire   [4:0] agg_result_fu_1286_p31;
wire  signed [4:0] agg_result_fu_1286_p33;
wire  signed [4:0] agg_result_fu_1286_p35;
wire  signed [4:0] agg_result_fu_1286_p37;
wire  signed [4:0] agg_result_fu_1286_p39;
wire  signed [4:0] agg_result_fu_1286_p41;
wire  signed [4:0] agg_result_fu_1286_p43;
wire  signed [4:0] agg_result_fu_1286_p45;
wire  signed [4:0] agg_result_fu_1286_p47;
wire  signed [4:0] agg_result_fu_1286_p49;
wire  signed [4:0] agg_result_fu_1286_p51;
wire  signed [4:0] agg_result_fu_1286_p53;
wire  signed [4:0] agg_result_fu_1286_p55;
wire  signed [4:0] agg_result_fu_1286_p57;
wire  signed [4:0] agg_result_fu_1286_p59;
wire  signed [4:0] agg_result_fu_1286_p61;
wire  signed [4:0] agg_result_fu_1286_p63;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_65_5_12_1_1_x33 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 12 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 12 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 12 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 12 ),
    .CASE31( 5'h1F ),
    .din31_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_65_5_12_1_1_x33_U2138(
    .din0(12'd511),
    .din1(12'd4067),
    .din2(12'd1669),
    .din3(12'd4095),
    .din4(12'd2829),
    .din5(12'd425),
    .din6(12'd213),
    .din7(12'd12),
    .din8(12'd85),
    .din9(12'd3885),
    .din10(12'd1433),
    .din11(12'd68),
    .din12(12'd4002),
    .din13(12'd12),
    .din14(12'd3753),
    .din15(12'd27),
    .din16(12'd46),
    .din17(12'd3921),
    .din18(12'd915),
    .din19(12'd36),
    .din20(12'd3495),
    .din21(12'd376),
    .din22(12'd3682),
    .din23(12'd2532),
    .din24(12'd3540),
    .din25(12'd3983),
    .din26(12'd4050),
    .din27(12'd0),
    .din28(12'd42),
    .din29(12'd3005),
    .din30(12'd902),
    .din31(12'd3431),
    .def(agg_result_fu_1286_p65),
    .sel(agg_result_fu_1286_p66),
    .dout(agg_result_fu_1286_p67)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_1495_reg_1431 <= icmp_ln86_1495_fu_372_p2;
        icmp_ln86_1498_reg_1437 <= icmp_ln86_1498_fu_390_p2;
        icmp_ln86_1499_reg_1443 <= icmp_ln86_1499_fu_396_p2;
        icmp_ln86_1504_reg_1449 <= icmp_ln86_1504_fu_426_p2;
        icmp_ln86_1505_reg_1455 <= icmp_ln86_1505_fu_432_p2;
        icmp_ln86_1506_reg_1461 <= icmp_ln86_1506_fu_438_p2;
        icmp_ln86_1507_reg_1467 <= icmp_ln86_1507_fu_444_p2;
        icmp_ln86_1514_reg_1473 <= icmp_ln86_1514_fu_494_p2;
        icmp_ln86_1515_reg_1478 <= icmp_ln86_1515_fu_500_p2;
        icmp_ln86_1516_reg_1483 <= icmp_ln86_1516_fu_506_p2;
        icmp_ln86_1517_reg_1488 <= icmp_ln86_1517_fu_512_p2;
        icmp_ln86_1518_reg_1493 <= icmp_ln86_1518_fu_518_p2;
        icmp_ln86_1519_reg_1498 <= icmp_ln86_1519_fu_524_p2;
        icmp_ln86_1520_reg_1503 <= icmp_ln86_1520_fu_530_p2;
        icmp_ln86_1521_reg_1508 <= icmp_ln86_1521_fu_536_p2;
        icmp_ln86_reg_1422 <= icmp_ln86_fu_360_p2;
        select_ln117_1459_reg_1513 <= select_ln117_1459_fu_916_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1286_p65 = 'bx;

assign agg_result_fu_1286_p66 = ((or_ln117_1367_fu_1264_p2[0:0] == 1'b1) ? select_ln117_1473_fu_1270_p3 : 5'd31);

assign and_ln102_1643_fu_929_p2 = (xor_ln104_fu_924_p2 & icmp_ln86_1495_reg_1431);

assign and_ln102_1644_fu_560_p2 = (icmp_ln86_1496_fu_378_p2 & and_ln102_fu_542_p2);

assign and_ln102_1645_fu_578_p2 = (icmp_ln86_1497_fu_384_p2 & and_ln104_fu_554_p2);

assign and_ln102_1646_fu_945_p2 = (icmp_ln86_1498_reg_1437 & and_ln102_1643_fu_929_p2);

assign and_ln102_1647_fu_961_p2 = (icmp_ln86_1499_reg_1443 & and_ln104_282_fu_939_p2);

assign and_ln102_1648_fu_596_p2 = (icmp_ln86_1500_fu_402_p2 & and_ln102_1644_fu_560_p2);

assign and_ln102_1649_fu_608_p2 = (icmp_ln86_1501_fu_408_p2 & and_ln104_283_fu_572_p2);

assign and_ln102_1650_fu_620_p2 = (icmp_ln86_1502_fu_414_p2 & and_ln102_1645_fu_578_p2);

assign and_ln102_1651_fu_632_p2 = (icmp_ln86_1503_fu_420_p2 & and_ln104_284_fu_590_p2);

assign and_ln102_1652_fu_977_p2 = (icmp_ln86_1504_reg_1449 & and_ln102_1646_fu_945_p2);

assign and_ln102_1653_fu_987_p2 = (icmp_ln86_1505_reg_1455 & and_ln104_285_fu_955_p2);

assign and_ln102_1654_fu_997_p2 = (icmp_ln86_1506_reg_1461 & and_ln102_1647_fu_961_p2);

assign and_ln102_1655_fu_1007_p2 = (icmp_ln86_1507_reg_1467 & and_ln104_286_fu_971_p2);

assign and_ln102_1656_fu_644_p2 = (tmp_fu_450_p3 & and_ln102_1648_fu_596_p2);

assign and_ln102_1657_fu_650_p2 = (xor_ln104_720_fu_602_p2 & icmp_ln86_1508_fu_458_p2);

assign and_ln102_1658_fu_656_p2 = (and_ln102_1657_fu_650_p2 & and_ln102_1644_fu_560_p2);

assign and_ln102_1659_fu_662_p2 = (icmp_ln86_1505_fu_432_p2 & and_ln102_1649_fu_608_p2);

assign and_ln102_1660_fu_668_p2 = (xor_ln104_721_fu_614_p2 & icmp_ln86_1509_fu_464_p2);

assign and_ln102_1661_fu_674_p2 = (and_ln104_283_fu_572_p2 & and_ln102_1660_fu_668_p2);

assign and_ln102_1662_fu_680_p2 = (icmp_ln86_1510_fu_470_p2 & and_ln102_1650_fu_620_p2);

assign and_ln102_1663_fu_686_p2 = (xor_ln104_722_fu_626_p2 & icmp_ln86_1511_fu_476_p2);

assign and_ln102_1664_fu_692_p2 = (and_ln102_1663_fu_686_p2 & and_ln102_1645_fu_578_p2);

assign and_ln102_1665_fu_698_p2 = (icmp_ln86_1512_fu_482_p2 & and_ln102_1651_fu_632_p2);

assign and_ln102_1666_fu_704_p2 = (xor_ln104_723_fu_638_p2 & icmp_ln86_1513_fu_488_p2);

assign and_ln102_1667_fu_710_p2 = (and_ln104_284_fu_590_p2 & and_ln102_1666_fu_704_p2);

assign and_ln102_1668_fu_1017_p2 = (icmp_ln86_1514_reg_1473 & and_ln102_1652_fu_977_p2);

assign and_ln102_1669_fu_1022_p2 = (xor_ln104_724_fu_982_p2 & icmp_ln86_1515_reg_1478);

assign and_ln102_1670_fu_1027_p2 = (and_ln102_1669_fu_1022_p2 & and_ln102_1646_fu_945_p2);

assign and_ln102_1671_fu_1033_p2 = (icmp_ln86_1516_reg_1483 & and_ln102_1653_fu_987_p2);

assign and_ln102_1672_fu_1038_p2 = (xor_ln104_725_fu_992_p2 & icmp_ln86_1517_reg_1488);

assign and_ln102_1673_fu_1043_p2 = (and_ln104_285_fu_955_p2 & and_ln102_1672_fu_1038_p2);

assign and_ln102_1674_fu_1049_p2 = (icmp_ln86_1518_reg_1493 & and_ln102_1654_fu_997_p2);

assign and_ln102_1675_fu_1054_p2 = (xor_ln104_726_fu_1002_p2 & icmp_ln86_1519_reg_1498);

assign and_ln102_1676_fu_1059_p2 = (and_ln102_1675_fu_1054_p2 & and_ln102_1647_fu_961_p2);

assign and_ln102_1677_fu_1065_p2 = (icmp_ln86_1520_reg_1503 & and_ln102_1655_fu_1007_p2);

assign and_ln102_1678_fu_1070_p2 = (xor_ln104_727_fu_1012_p2 & icmp_ln86_1521_reg_1508);

assign and_ln102_1679_fu_1075_p2 = (and_ln104_286_fu_971_p2 & and_ln102_1678_fu_1070_p2);

assign and_ln102_fu_542_p2 = (icmp_ln86_fu_360_p2 & icmp_ln86_1494_fu_366_p2);

assign and_ln104_282_fu_939_p2 = (xor_ln104_fu_924_p2 & xor_ln104_715_fu_934_p2);

assign and_ln104_283_fu_572_p2 = (xor_ln104_716_fu_566_p2 & and_ln102_fu_542_p2);

assign and_ln104_284_fu_590_p2 = (xor_ln104_717_fu_584_p2 & and_ln104_fu_554_p2);

assign and_ln104_285_fu_955_p2 = (xor_ln104_718_fu_950_p2 & and_ln102_1643_fu_929_p2);

assign and_ln104_286_fu_971_p2 = (xor_ln104_719_fu_966_p2 & and_ln104_282_fu_939_p2);

assign and_ln104_fu_554_p2 = (xor_ln104_714_fu_548_p2 & icmp_ln86_fu_360_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1286_p67;

assign icmp_ln86_1494_fu_366_p2 = (($signed(x_40_val) < $signed(18'd436)) ? 1'b1 : 1'b0);

assign icmp_ln86_1495_fu_372_p2 = (($signed(x_40_val) < $signed(18'd820)) ? 1'b1 : 1'b0);

assign icmp_ln86_1496_fu_378_p2 = (($signed(x_39_val) < $signed(18'd880)) ? 1'b1 : 1'b0);

assign icmp_ln86_1497_fu_384_p2 = (($signed(x_39_val) < $signed(18'd1107)) ? 1'b1 : 1'b0);

assign icmp_ln86_1498_fu_390_p2 = (($signed(x_44_val) < $signed(18'd70)) ? 1'b1 : 1'b0);

assign icmp_ln86_1499_fu_396_p2 = (($signed(x_12_val) < $signed(18'd260188)) ? 1'b1 : 1'b0);

assign icmp_ln86_1500_fu_402_p2 = (($signed(x_22_val) < $signed(18'd101)) ? 1'b1 : 1'b0);

assign icmp_ln86_1501_fu_408_p2 = (($signed(x_47_val) < $signed(18'd20343)) ? 1'b1 : 1'b0);

assign icmp_ln86_1502_fu_414_p2 = (($signed(x_51_val) < $signed(18'd160633)) ? 1'b1 : 1'b0);

assign icmp_ln86_1503_fu_420_p2 = (($signed(x_10_val) < $signed(18'd939)) ? 1'b1 : 1'b0);

assign icmp_ln86_1504_fu_426_p2 = (($signed(x_40_val) < $signed(18'd819)) ? 1'b1 : 1'b0);

assign icmp_ln86_1505_fu_432_p2 = (($signed(x_51_val) < $signed(18'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_1506_fu_438_p2 = (($signed(x_43_val) < $signed(18'd57)) ? 1'b1 : 1'b0);

assign icmp_ln86_1507_fu_444_p2 = (($signed(x_52_val) < $signed(18'd51713)) ? 1'b1 : 1'b0);

assign icmp_ln86_1508_fu_458_p2 = (($signed(x_10_val) < $signed(18'd624)) ? 1'b1 : 1'b0);

assign icmp_ln86_1509_fu_464_p2 = (($signed(x_45_val) < $signed(18'd208)) ? 1'b1 : 1'b0);

assign icmp_ln86_1510_fu_470_p2 = (($signed(x_3_val) < $signed(18'd47916)) ? 1'b1 : 1'b0);

assign icmp_ln86_1511_fu_476_p2 = (($signed(x_3_val) < $signed(18'd166676)) ? 1'b1 : 1'b0);

assign icmp_ln86_1512_fu_482_p2 = (($signed(x_12_val) < $signed(18'd259132)) ? 1'b1 : 1'b0);

assign icmp_ln86_1513_fu_488_p2 = (($signed(x_39_val) < $signed(18'd2130)) ? 1'b1 : 1'b0);

assign icmp_ln86_1514_fu_494_p2 = (($signed(x_52_val) < $signed(18'd97793)) ? 1'b1 : 1'b0);

assign icmp_ln86_1515_fu_500_p2 = (($signed(x_3_val) < $signed(18'd87412)) ? 1'b1 : 1'b0);

assign icmp_ln86_1516_fu_506_p2 = (($signed(x_21_val) < $signed(18'd155)) ? 1'b1 : 1'b0);

assign icmp_ln86_1517_fu_512_p2 = (($signed(x_18_val) < $signed(18'd9643)) ? 1'b1 : 1'b0);

assign icmp_ln86_1518_fu_518_p2 = (($signed(x_14_val) < $signed(18'd29)) ? 1'b1 : 1'b0);

assign icmp_ln86_1519_fu_524_p2 = (($signed(x_45_val) < $signed(18'd303)) ? 1'b1 : 1'b0);

assign icmp_ln86_1520_fu_530_p2 = (($signed(x_22_val) < $signed(18'd110)) ? 1'b1 : 1'b0);

assign icmp_ln86_1521_fu_536_p2 = (($signed(x_19_val) < $signed(18'd17614)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_360_p2 = (($signed(x_44_val) < $signed(18'd23)) ? 1'b1 : 1'b0);

assign or_ln117_1343_fu_752_p2 = (and_ln102_1659_fu_662_p2 | and_ln102_1644_fu_560_p2);

assign or_ln117_1344_fu_766_p2 = (and_ln102_1649_fu_608_p2 | and_ln102_1644_fu_560_p2);

assign or_ln117_1345_fu_780_p2 = (or_ln117_1344_fu_766_p2 | and_ln102_1661_fu_674_p2);

assign or_ln117_1346_fu_806_p2 = (and_ln102_fu_542_p2 | and_ln102_1662_fu_680_p2);

assign or_ln117_1347_fu_820_p2 = (and_ln102_fu_542_p2 | and_ln102_1650_fu_620_p2);

assign or_ln117_1348_fu_834_p2 = (or_ln117_1347_fu_820_p2 | and_ln102_1664_fu_692_p2);

assign or_ln117_1349_fu_848_p2 = (and_ln102_fu_542_p2 | and_ln102_1645_fu_578_p2);

assign or_ln117_1350_fu_862_p2 = (or_ln117_1349_fu_848_p2 | and_ln102_1665_fu_698_p2);

assign or_ln117_1351_fu_876_p2 = (or_ln117_1349_fu_848_p2 | and_ln102_1651_fu_632_p2);

assign or_ln117_1352_fu_890_p2 = (or_ln117_1351_fu_876_p2 | and_ln102_1667_fu_710_p2);

assign or_ln117_1353_fu_1081_p2 = (icmp_ln86_reg_1422 | and_ln102_1668_fu_1017_p2);

assign or_ln117_1354_fu_1086_p2 = (icmp_ln86_reg_1422 | and_ln102_1652_fu_977_p2);

assign or_ln117_1355_fu_1098_p2 = (or_ln117_1354_fu_1086_p2 | and_ln102_1670_fu_1027_p2);

assign or_ln117_1356_fu_1112_p2 = (icmp_ln86_reg_1422 | and_ln102_1646_fu_945_p2);

assign or_ln117_1357_fu_1125_p2 = (or_ln117_1356_fu_1112_p2 | and_ln102_1671_fu_1033_p2);

assign or_ln117_1358_fu_1139_p2 = (or_ln117_1356_fu_1112_p2 | and_ln102_1653_fu_987_p2);

assign or_ln117_1359_fu_1153_p2 = (or_ln117_1358_fu_1139_p2 | and_ln102_1673_fu_1043_p2);

assign or_ln117_1360_fu_1167_p2 = (icmp_ln86_reg_1422 | and_ln102_1643_fu_929_p2);

assign or_ln117_1361_fu_1180_p2 = (or_ln117_1360_fu_1167_p2 | and_ln102_1674_fu_1049_p2);

assign or_ln117_1362_fu_1194_p2 = (or_ln117_1360_fu_1167_p2 | and_ln102_1654_fu_997_p2);

assign or_ln117_1363_fu_1208_p2 = (or_ln117_1362_fu_1194_p2 | and_ln102_1676_fu_1059_p2);

assign or_ln117_1364_fu_1222_p2 = (or_ln117_1360_fu_1167_p2 | and_ln102_1647_fu_961_p2);

assign or_ln117_1365_fu_1236_p2 = (or_ln117_1364_fu_1222_p2 | and_ln102_1677_fu_1065_p2);

assign or_ln117_1366_fu_1250_p2 = (or_ln117_1364_fu_1222_p2 | and_ln102_1655_fu_1007_p2);

assign or_ln117_1367_fu_1264_p2 = (or_ln117_1366_fu_1250_p2 | and_ln102_1679_fu_1075_p2);

assign or_ln117_fu_726_p2 = (and_ln102_1658_fu_656_p2 | and_ln102_1648_fu_596_p2);

assign select_ln117_1446_fu_740_p3 = ((or_ln117_fu_726_p2[0:0] == 1'b1) ? select_ln117_fu_732_p3 : 2'd3);

assign select_ln117_1447_fu_758_p3 = ((and_ln102_1644_fu_560_p2[0:0] == 1'b1) ? zext_ln117_162_fu_748_p1 : 3'd4);

assign select_ln117_1448_fu_772_p3 = ((or_ln117_1343_fu_752_p2[0:0] == 1'b1) ? select_ln117_1447_fu_758_p3 : 3'd5);

assign select_ln117_1449_fu_786_p3 = ((or_ln117_1344_fu_766_p2[0:0] == 1'b1) ? select_ln117_1448_fu_772_p3 : 3'd6);

assign select_ln117_1450_fu_794_p3 = ((or_ln117_1345_fu_780_p2[0:0] == 1'b1) ? select_ln117_1449_fu_786_p3 : 3'd7);

assign select_ln117_1451_fu_812_p3 = ((and_ln102_fu_542_p2[0:0] == 1'b1) ? zext_ln117_163_fu_802_p1 : 4'd8);

assign select_ln117_1452_fu_826_p3 = ((or_ln117_1346_fu_806_p2[0:0] == 1'b1) ? select_ln117_1451_fu_812_p3 : 4'd9);

assign select_ln117_1453_fu_840_p3 = ((or_ln117_1347_fu_820_p2[0:0] == 1'b1) ? select_ln117_1452_fu_826_p3 : 4'd10);

assign select_ln117_1454_fu_854_p3 = ((or_ln117_1348_fu_834_p2[0:0] == 1'b1) ? select_ln117_1453_fu_840_p3 : 4'd11);

assign select_ln117_1455_fu_868_p3 = ((or_ln117_1349_fu_848_p2[0:0] == 1'b1) ? select_ln117_1454_fu_854_p3 : 4'd12);

assign select_ln117_1456_fu_882_p3 = ((or_ln117_1350_fu_862_p2[0:0] == 1'b1) ? select_ln117_1455_fu_868_p3 : 4'd13);

assign select_ln117_1457_fu_896_p3 = ((or_ln117_1351_fu_876_p2[0:0] == 1'b1) ? select_ln117_1456_fu_882_p3 : 4'd14);

assign select_ln117_1458_fu_904_p3 = ((or_ln117_1352_fu_890_p2[0:0] == 1'b1) ? select_ln117_1457_fu_896_p3 : 4'd15);

assign select_ln117_1459_fu_916_p3 = ((icmp_ln86_fu_360_p2[0:0] == 1'b1) ? zext_ln117_164_fu_912_p1 : 5'd16);

assign select_ln117_1460_fu_1091_p3 = ((or_ln117_1353_fu_1081_p2[0:0] == 1'b1) ? select_ln117_1459_reg_1513 : 5'd17);

assign select_ln117_1461_fu_1104_p3 = ((or_ln117_1354_fu_1086_p2[0:0] == 1'b1) ? select_ln117_1460_fu_1091_p3 : 5'd18);

assign select_ln117_1462_fu_1117_p3 = ((or_ln117_1355_fu_1098_p2[0:0] == 1'b1) ? select_ln117_1461_fu_1104_p3 : 5'd19);

assign select_ln117_1463_fu_1131_p3 = ((or_ln117_1356_fu_1112_p2[0:0] == 1'b1) ? select_ln117_1462_fu_1117_p3 : 5'd20);

assign select_ln117_1464_fu_1145_p3 = ((or_ln117_1357_fu_1125_p2[0:0] == 1'b1) ? select_ln117_1463_fu_1131_p3 : 5'd21);

assign select_ln117_1465_fu_1159_p3 = ((or_ln117_1358_fu_1139_p2[0:0] == 1'b1) ? select_ln117_1464_fu_1145_p3 : 5'd22);

assign select_ln117_1466_fu_1172_p3 = ((or_ln117_1359_fu_1153_p2[0:0] == 1'b1) ? select_ln117_1465_fu_1159_p3 : 5'd23);

assign select_ln117_1467_fu_1186_p3 = ((or_ln117_1360_fu_1167_p2[0:0] == 1'b1) ? select_ln117_1466_fu_1172_p3 : 5'd24);

assign select_ln117_1468_fu_1200_p3 = ((or_ln117_1361_fu_1180_p2[0:0] == 1'b1) ? select_ln117_1467_fu_1186_p3 : 5'd25);

assign select_ln117_1469_fu_1214_p3 = ((or_ln117_1362_fu_1194_p2[0:0] == 1'b1) ? select_ln117_1468_fu_1200_p3 : 5'd26);

assign select_ln117_1470_fu_1228_p3 = ((or_ln117_1363_fu_1208_p2[0:0] == 1'b1) ? select_ln117_1469_fu_1214_p3 : 5'd27);

assign select_ln117_1471_fu_1242_p3 = ((or_ln117_1364_fu_1222_p2[0:0] == 1'b1) ? select_ln117_1470_fu_1228_p3 : 5'd28);

assign select_ln117_1472_fu_1256_p3 = ((or_ln117_1365_fu_1236_p2[0:0] == 1'b1) ? select_ln117_1471_fu_1242_p3 : 5'd29);

assign select_ln117_1473_fu_1270_p3 = ((or_ln117_1366_fu_1250_p2[0:0] == 1'b1) ? select_ln117_1472_fu_1256_p3 : 5'd30);

assign select_ln117_fu_732_p3 = ((and_ln102_1648_fu_596_p2[0:0] == 1'b1) ? zext_ln117_fu_722_p1 : 2'd2);

assign tmp_fu_450_p3 = x_51_val[32'd17];

assign xor_ln104_714_fu_548_p2 = (icmp_ln86_1494_fu_366_p2 ^ 1'd1);

assign xor_ln104_715_fu_934_p2 = (icmp_ln86_1495_reg_1431 ^ 1'd1);

assign xor_ln104_716_fu_566_p2 = (icmp_ln86_1496_fu_378_p2 ^ 1'd1);

assign xor_ln104_717_fu_584_p2 = (icmp_ln86_1497_fu_384_p2 ^ 1'd1);

assign xor_ln104_718_fu_950_p2 = (icmp_ln86_1498_reg_1437 ^ 1'd1);

assign xor_ln104_719_fu_966_p2 = (icmp_ln86_1499_reg_1443 ^ 1'd1);

assign xor_ln104_720_fu_602_p2 = (icmp_ln86_1500_fu_402_p2 ^ 1'd1);

assign xor_ln104_721_fu_614_p2 = (icmp_ln86_1501_fu_408_p2 ^ 1'd1);

assign xor_ln104_722_fu_626_p2 = (icmp_ln86_1502_fu_414_p2 ^ 1'd1);

assign xor_ln104_723_fu_638_p2 = (icmp_ln86_1503_fu_420_p2 ^ 1'd1);

assign xor_ln104_724_fu_982_p2 = (icmp_ln86_1504_reg_1449 ^ 1'd1);

assign xor_ln104_725_fu_992_p2 = (icmp_ln86_1505_reg_1455 ^ 1'd1);

assign xor_ln104_726_fu_1002_p2 = (icmp_ln86_1506_reg_1461 ^ 1'd1);

assign xor_ln104_727_fu_1012_p2 = (icmp_ln86_1507_reg_1467 ^ 1'd1);

assign xor_ln104_fu_924_p2 = (icmp_ln86_reg_1422 ^ 1'd1);

assign xor_ln117_fu_716_p2 = (1'd1 ^ and_ln102_1656_fu_644_p2);

assign zext_ln117_162_fu_748_p1 = select_ln117_1446_fu_740_p3;

assign zext_ln117_163_fu_802_p1 = select_ln117_1450_fu_794_p3;

assign zext_ln117_164_fu_912_p1 = select_ln117_1458_fu_904_p3;

assign zext_ln117_fu_722_p1 = xor_ln117_fu_716_p2;

endmodule //my_prj_decision_function_120
