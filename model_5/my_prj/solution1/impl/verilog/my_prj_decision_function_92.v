// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_92 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_2_val,
        x_3_val,
        x_4_val,
        x_6_val,
        x_10_val,
        x_11_val,
        x_13_val,
        x_17_val,
        x_19_val,
        x_21_val,
        x_23_val,
        x_24_val,
        x_30_val,
        x_32_val,
        x_38_val,
        x_43_val,
        x_47_val,
        x_49_val,
        x_51_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_2_val;
input  [17:0] x_3_val;
input  [17:0] x_4_val;
input  [17:0] x_6_val;
input  [17:0] x_10_val;
input  [17:0] x_11_val;
input  [17:0] x_13_val;
input  [17:0] x_17_val;
input  [17:0] x_19_val;
input  [17:0] x_21_val;
input  [17:0] x_23_val;
input  [17:0] x_24_val;
input  [17:0] x_30_val;
input  [17:0] x_32_val;
input  [17:0] x_38_val;
input  [17:0] x_43_val;
input  [17:0] x_47_val;
input  [17:0] x_49_val;
input  [17:0] x_51_val;
input  [17:0] x_52_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_418_p2;
reg   [0:0] icmp_ln86_reg_1484;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_190_fu_430_p2;
reg   [0:0] icmp_ln86_190_reg_1493;
wire   [0:0] icmp_ln86_193_fu_448_p2;
reg   [0:0] icmp_ln86_193_reg_1499;
wire   [0:0] icmp_ln86_194_fu_454_p2;
reg   [0:0] icmp_ln86_194_reg_1505;
wire   [0:0] icmp_ln86_199_fu_484_p2;
reg   [0:0] icmp_ln86_199_reg_1511;
wire   [0:0] icmp_ln86_200_fu_490_p2;
reg   [0:0] icmp_ln86_200_reg_1517;
wire   [0:0] icmp_ln86_201_fu_496_p2;
reg   [0:0] icmp_ln86_201_reg_1523;
wire   [0:0] icmp_ln86_202_fu_502_p2;
reg   [0:0] icmp_ln86_202_reg_1529;
wire   [0:0] icmp_ln86_211_fu_556_p2;
reg   [0:0] icmp_ln86_211_reg_1535;
wire   [0:0] icmp_ln86_212_fu_562_p2;
reg   [0:0] icmp_ln86_212_reg_1540;
wire   [0:0] icmp_ln86_213_fu_568_p2;
reg   [0:0] icmp_ln86_213_reg_1545;
wire   [0:0] icmp_ln86_214_fu_574_p2;
reg   [0:0] icmp_ln86_214_reg_1550;
wire   [0:0] icmp_ln86_215_fu_580_p2;
reg   [0:0] icmp_ln86_215_reg_1555;
wire   [0:0] icmp_ln86_216_fu_586_p2;
reg   [0:0] icmp_ln86_216_reg_1560;
wire   [0:0] icmp_ln86_217_fu_592_p2;
reg   [0:0] icmp_ln86_217_reg_1565;
wire   [0:0] icmp_ln86_218_fu_598_p2;
reg   [0:0] icmp_ln86_218_reg_1570;
wire   [4:0] select_ln117_197_fu_978_p3;
reg   [4:0] select_ln117_197_reg_1575;
wire    ap_block_pp0_stage0;
wire   [14:0] tmp_fu_408_p4;
wire   [0:0] icmp_ln86_189_fu_424_p2;
wire   [0:0] xor_ln104_90_fu_610_p2;
wire   [0:0] icmp_ln86_191_fu_436_p2;
wire   [0:0] and_ln102_fu_604_p2;
wire   [0:0] xor_ln104_92_fu_628_p2;
wire   [0:0] icmp_ln86_192_fu_442_p2;
wire   [0:0] and_ln104_fu_616_p2;
wire   [0:0] xor_ln104_93_fu_646_p2;
wire   [0:0] icmp_ln86_195_fu_460_p2;
wire   [0:0] and_ln102_232_fu_622_p2;
wire   [0:0] icmp_ln86_196_fu_466_p2;
wire   [0:0] and_ln104_37_fu_634_p2;
wire   [0:0] icmp_ln86_197_fu_472_p2;
wire   [0:0] and_ln102_233_fu_640_p2;
wire   [0:0] icmp_ln86_198_fu_478_p2;
wire   [0:0] and_ln104_38_fu_652_p2;
wire   [0:0] icmp_ln86_203_fu_508_p2;
wire   [0:0] and_ln102_236_fu_658_p2;
wire   [0:0] icmp_ln86_204_fu_514_p2;
wire   [0:0] xor_ln104_96_fu_664_p2;
wire   [0:0] and_ln102_245_fu_712_p2;
wire   [0:0] icmp_ln86_205_fu_520_p2;
wire   [0:0] and_ln102_237_fu_670_p2;
wire   [0:0] icmp_ln86_206_fu_526_p2;
wire   [0:0] xor_ln104_97_fu_676_p2;
wire   [0:0] and_ln102_248_fu_730_p2;
wire   [0:0] icmp_ln86_207_fu_532_p2;
wire   [0:0] and_ln102_238_fu_682_p2;
wire   [0:0] icmp_ln86_208_fu_538_p2;
wire   [0:0] xor_ln104_98_fu_688_p2;
wire   [0:0] and_ln102_251_fu_748_p2;
wire   [0:0] icmp_ln86_209_fu_544_p2;
wire   [0:0] and_ln102_239_fu_694_p2;
wire   [0:0] icmp_ln86_210_fu_550_p2;
wire   [0:0] xor_ln104_99_fu_700_p2;
wire   [0:0] and_ln102_254_fu_766_p2;
wire   [0:0] and_ln102_244_fu_706_p2;
wire   [0:0] xor_ln117_fu_778_p2;
wire   [0:0] and_ln102_246_fu_718_p2;
wire   [1:0] zext_ln117_fu_784_p1;
wire   [0:0] or_ln117_fu_788_p2;
wire   [1:0] select_ln117_fu_794_p3;
wire   [1:0] select_ln117_184_fu_802_p3;
wire   [0:0] and_ln102_247_fu_724_p2;
wire   [2:0] zext_ln117_22_fu_810_p1;
wire   [0:0] or_ln117_173_fu_814_p2;
wire   [2:0] select_ln117_185_fu_820_p3;
wire   [0:0] or_ln117_174_fu_828_p2;
wire   [0:0] and_ln102_249_fu_736_p2;
wire   [2:0] select_ln117_186_fu_834_p3;
wire   [0:0] or_ln117_175_fu_842_p2;
wire   [2:0] select_ln117_187_fu_848_p3;
wire   [2:0] select_ln117_188_fu_856_p3;
wire   [0:0] and_ln102_250_fu_742_p2;
wire   [3:0] zext_ln117_23_fu_864_p1;
wire   [0:0] or_ln117_176_fu_868_p2;
wire   [3:0] select_ln117_189_fu_874_p3;
wire   [0:0] or_ln117_177_fu_882_p2;
wire   [0:0] and_ln102_252_fu_754_p2;
wire   [3:0] select_ln117_190_fu_888_p3;
wire   [0:0] or_ln117_178_fu_896_p2;
wire   [3:0] select_ln117_191_fu_902_p3;
wire   [0:0] or_ln117_179_fu_910_p2;
wire   [0:0] and_ln102_253_fu_760_p2;
wire   [3:0] select_ln117_192_fu_916_p3;
wire   [0:0] or_ln117_180_fu_924_p2;
wire   [3:0] select_ln117_193_fu_930_p3;
wire   [0:0] or_ln117_181_fu_938_p2;
wire   [0:0] and_ln102_255_fu_772_p2;
wire   [3:0] select_ln117_194_fu_944_p3;
wire   [0:0] or_ln117_182_fu_952_p2;
wire   [3:0] select_ln117_195_fu_958_p3;
wire   [3:0] select_ln117_196_fu_966_p3;
wire   [4:0] zext_ln117_24_fu_974_p1;
wire   [0:0] xor_ln104_fu_986_p2;
wire   [0:0] xor_ln104_91_fu_996_p2;
wire   [0:0] and_ln102_231_fu_991_p2;
wire   [0:0] xor_ln104_94_fu_1012_p2;
wire   [0:0] and_ln104_36_fu_1001_p2;
wire   [0:0] xor_ln104_95_fu_1028_p2;
wire   [0:0] and_ln102_234_fu_1007_p2;
wire   [0:0] and_ln104_39_fu_1017_p2;
wire   [0:0] and_ln102_235_fu_1023_p2;
wire   [0:0] and_ln104_40_fu_1033_p2;
wire   [0:0] and_ln102_240_fu_1039_p2;
wire   [0:0] xor_ln104_100_fu_1044_p2;
wire   [0:0] and_ln102_257_fu_1084_p2;
wire   [0:0] and_ln102_241_fu_1049_p2;
wire   [0:0] xor_ln104_101_fu_1054_p2;
wire   [0:0] and_ln102_260_fu_1100_p2;
wire   [0:0] and_ln102_242_fu_1059_p2;
wire   [0:0] xor_ln104_102_fu_1064_p2;
wire   [0:0] and_ln102_263_fu_1116_p2;
wire   [0:0] and_ln102_243_fu_1069_p2;
wire   [0:0] xor_ln104_103_fu_1074_p2;
wire   [0:0] and_ln102_266_fu_1132_p2;
wire   [0:0] and_ln102_256_fu_1079_p2;
wire   [0:0] or_ln117_183_fu_1143_p2;
wire   [0:0] or_ln117_184_fu_1148_p2;
wire   [0:0] and_ln102_258_fu_1089_p2;
wire   [4:0] select_ln117_198_fu_1153_p3;
wire   [0:0] or_ln117_185_fu_1160_p2;
wire   [4:0] select_ln117_199_fu_1166_p3;
wire   [0:0] or_ln117_186_fu_1174_p2;
wire   [0:0] and_ln102_259_fu_1095_p2;
wire   [4:0] select_ln117_200_fu_1179_p3;
wire   [0:0] or_ln117_187_fu_1187_p2;
wire   [4:0] select_ln117_201_fu_1193_p3;
wire   [0:0] or_ln117_188_fu_1201_p2;
wire   [0:0] and_ln102_261_fu_1105_p2;
wire   [4:0] select_ln117_202_fu_1207_p3;
wire   [0:0] or_ln117_189_fu_1215_p2;
wire   [4:0] select_ln117_203_fu_1221_p3;
wire   [0:0] or_ln117_190_fu_1229_p2;
wire   [0:0] and_ln102_262_fu_1111_p2;
wire   [4:0] select_ln117_204_fu_1234_p3;
wire   [0:0] or_ln117_191_fu_1242_p2;
wire   [4:0] select_ln117_205_fu_1248_p3;
wire   [0:0] or_ln117_192_fu_1256_p2;
wire   [0:0] and_ln102_264_fu_1121_p2;
wire   [4:0] select_ln117_206_fu_1262_p3;
wire   [0:0] or_ln117_193_fu_1270_p2;
wire   [4:0] select_ln117_207_fu_1276_p3;
wire   [0:0] or_ln117_194_fu_1284_p2;
wire   [0:0] and_ln102_265_fu_1127_p2;
wire   [4:0] select_ln117_208_fu_1290_p3;
wire   [0:0] or_ln117_195_fu_1298_p2;
wire   [4:0] select_ln117_209_fu_1304_p3;
wire   [0:0] or_ln117_196_fu_1312_p2;
wire   [0:0] and_ln102_267_fu_1137_p2;
wire   [4:0] select_ln117_210_fu_1318_p3;
wire   [0:0] or_ln117_197_fu_1326_p2;
wire   [4:0] select_ln117_211_fu_1332_p3;
wire   [11:0] agg_result_fu_1348_p65;
wire   [4:0] agg_result_fu_1348_p66;
wire   [11:0] agg_result_fu_1348_p67;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1348_p1;
wire   [4:0] agg_result_fu_1348_p3;
wire   [4:0] agg_result_fu_1348_p5;
wire   [4:0] agg_result_fu_1348_p7;
wire   [4:0] agg_result_fu_1348_p9;
wire   [4:0] agg_result_fu_1348_p11;
wire   [4:0] agg_result_fu_1348_p13;
wire   [4:0] agg_result_fu_1348_p15;
wire   [4:0] agg_result_fu_1348_p17;
wire   [4:0] agg_result_fu_1348_p19;
wire   [4:0] agg_result_fu_1348_p21;
wire   [4:0] agg_result_fu_1348_p23;
wire   [4:0] agg_result_fu_1348_p25;
wire   [4:0] agg_result_fu_1348_p27;
wire   [4:0] agg_result_fu_1348_p29;
wire   [4:0] agg_result_fu_1348_p31;
wire  signed [4:0] agg_result_fu_1348_p33;
wire  signed [4:0] agg_result_fu_1348_p35;
wire  signed [4:0] agg_result_fu_1348_p37;
wire  signed [4:0] agg_result_fu_1348_p39;
wire  signed [4:0] agg_result_fu_1348_p41;
wire  signed [4:0] agg_result_fu_1348_p43;
wire  signed [4:0] agg_result_fu_1348_p45;
wire  signed [4:0] agg_result_fu_1348_p47;
wire  signed [4:0] agg_result_fu_1348_p49;
wire  signed [4:0] agg_result_fu_1348_p51;
wire  signed [4:0] agg_result_fu_1348_p53;
wire  signed [4:0] agg_result_fu_1348_p55;
wire  signed [4:0] agg_result_fu_1348_p57;
wire  signed [4:0] agg_result_fu_1348_p59;
wire  signed [4:0] agg_result_fu_1348_p61;
wire  signed [4:0] agg_result_fu_1348_p63;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_65_5_12_1_1_x4 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 12 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 12 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 12 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 12 ),
    .CASE31( 5'h1F ),
    .din31_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_65_5_12_1_1_x4_U278(
    .din0(12'd628),
    .din1(12'd3622),
    .din2(12'd3784),
    .din3(12'd33),
    .din4(12'd3781),
    .din5(12'd108),
    .din6(12'd3748),
    .din7(12'd1053),
    .din8(12'd639),
    .din9(12'd3964),
    .din10(12'd4005),
    .din11(12'd589),
    .din12(12'd78),
    .din13(12'd3607),
    .din14(12'd3805),
    .din15(12'd293),
    .din16(12'd47),
    .din17(12'd327),
    .din18(12'd126),
    .din19(12'd4006),
    .din20(12'd3854),
    .din21(12'd4079),
    .din22(12'd119),
    .din23(12'd4035),
    .din24(12'd4093),
    .din25(12'd238),
    .din26(12'd387),
    .din27(12'd77),
    .din28(12'd3959),
    .din29(12'd166),
    .din30(12'd780),
    .din31(12'd306),
    .def(agg_result_fu_1348_p65),
    .sel(agg_result_fu_1348_p66),
    .dout(agg_result_fu_1348_p67)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_190_reg_1493 <= icmp_ln86_190_fu_430_p2;
        icmp_ln86_193_reg_1499 <= icmp_ln86_193_fu_448_p2;
        icmp_ln86_194_reg_1505 <= icmp_ln86_194_fu_454_p2;
        icmp_ln86_199_reg_1511 <= icmp_ln86_199_fu_484_p2;
        icmp_ln86_200_reg_1517 <= icmp_ln86_200_fu_490_p2;
        icmp_ln86_201_reg_1523 <= icmp_ln86_201_fu_496_p2;
        icmp_ln86_202_reg_1529 <= icmp_ln86_202_fu_502_p2;
        icmp_ln86_211_reg_1535 <= icmp_ln86_211_fu_556_p2;
        icmp_ln86_212_reg_1540 <= icmp_ln86_212_fu_562_p2;
        icmp_ln86_213_reg_1545 <= icmp_ln86_213_fu_568_p2;
        icmp_ln86_214_reg_1550 <= icmp_ln86_214_fu_574_p2;
        icmp_ln86_215_reg_1555 <= icmp_ln86_215_fu_580_p2;
        icmp_ln86_216_reg_1560 <= icmp_ln86_216_fu_586_p2;
        icmp_ln86_217_reg_1565 <= icmp_ln86_217_fu_592_p2;
        icmp_ln86_218_reg_1570 <= icmp_ln86_218_fu_598_p2;
        icmp_ln86_reg_1484 <= icmp_ln86_fu_418_p2;
        select_ln117_197_reg_1575 <= select_ln117_197_fu_978_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1348_p65 = 'bx;

assign agg_result_fu_1348_p66 = ((or_ln117_197_fu_1326_p2[0:0] == 1'b1) ? select_ln117_211_fu_1332_p3 : 5'd31);

assign and_ln102_231_fu_991_p2 = (xor_ln104_fu_986_p2 & icmp_ln86_190_reg_1493);

assign and_ln102_232_fu_622_p2 = (icmp_ln86_191_fu_436_p2 & and_ln102_fu_604_p2);

assign and_ln102_233_fu_640_p2 = (icmp_ln86_192_fu_442_p2 & and_ln104_fu_616_p2);

assign and_ln102_234_fu_1007_p2 = (icmp_ln86_193_reg_1499 & and_ln102_231_fu_991_p2);

assign and_ln102_235_fu_1023_p2 = (icmp_ln86_194_reg_1505 & and_ln104_36_fu_1001_p2);

assign and_ln102_236_fu_658_p2 = (icmp_ln86_195_fu_460_p2 & and_ln102_232_fu_622_p2);

assign and_ln102_237_fu_670_p2 = (icmp_ln86_196_fu_466_p2 & and_ln104_37_fu_634_p2);

assign and_ln102_238_fu_682_p2 = (icmp_ln86_197_fu_472_p2 & and_ln102_233_fu_640_p2);

assign and_ln102_239_fu_694_p2 = (icmp_ln86_198_fu_478_p2 & and_ln104_38_fu_652_p2);

assign and_ln102_240_fu_1039_p2 = (icmp_ln86_199_reg_1511 & and_ln102_234_fu_1007_p2);

assign and_ln102_241_fu_1049_p2 = (icmp_ln86_200_reg_1517 & and_ln104_39_fu_1017_p2);

assign and_ln102_242_fu_1059_p2 = (icmp_ln86_201_reg_1523 & and_ln102_235_fu_1023_p2);

assign and_ln102_243_fu_1069_p2 = (icmp_ln86_202_reg_1529 & and_ln104_40_fu_1033_p2);

assign and_ln102_244_fu_706_p2 = (icmp_ln86_203_fu_508_p2 & and_ln102_236_fu_658_p2);

assign and_ln102_245_fu_712_p2 = (xor_ln104_96_fu_664_p2 & icmp_ln86_204_fu_514_p2);

assign and_ln102_246_fu_718_p2 = (and_ln102_245_fu_712_p2 & and_ln102_232_fu_622_p2);

assign and_ln102_247_fu_724_p2 = (icmp_ln86_205_fu_520_p2 & and_ln102_237_fu_670_p2);

assign and_ln102_248_fu_730_p2 = (xor_ln104_97_fu_676_p2 & icmp_ln86_206_fu_526_p2);

assign and_ln102_249_fu_736_p2 = (and_ln104_37_fu_634_p2 & and_ln102_248_fu_730_p2);

assign and_ln102_250_fu_742_p2 = (icmp_ln86_207_fu_532_p2 & and_ln102_238_fu_682_p2);

assign and_ln102_251_fu_748_p2 = (xor_ln104_98_fu_688_p2 & icmp_ln86_208_fu_538_p2);

assign and_ln102_252_fu_754_p2 = (and_ln102_251_fu_748_p2 & and_ln102_233_fu_640_p2);

assign and_ln102_253_fu_760_p2 = (icmp_ln86_209_fu_544_p2 & and_ln102_239_fu_694_p2);

assign and_ln102_254_fu_766_p2 = (xor_ln104_99_fu_700_p2 & icmp_ln86_210_fu_550_p2);

assign and_ln102_255_fu_772_p2 = (and_ln104_38_fu_652_p2 & and_ln102_254_fu_766_p2);

assign and_ln102_256_fu_1079_p2 = (icmp_ln86_211_reg_1535 & and_ln102_240_fu_1039_p2);

assign and_ln102_257_fu_1084_p2 = (xor_ln104_100_fu_1044_p2 & icmp_ln86_212_reg_1540);

assign and_ln102_258_fu_1089_p2 = (and_ln102_257_fu_1084_p2 & and_ln102_234_fu_1007_p2);

assign and_ln102_259_fu_1095_p2 = (icmp_ln86_213_reg_1545 & and_ln102_241_fu_1049_p2);

assign and_ln102_260_fu_1100_p2 = (xor_ln104_101_fu_1054_p2 & icmp_ln86_214_reg_1550);

assign and_ln102_261_fu_1105_p2 = (and_ln104_39_fu_1017_p2 & and_ln102_260_fu_1100_p2);

assign and_ln102_262_fu_1111_p2 = (icmp_ln86_215_reg_1555 & and_ln102_242_fu_1059_p2);

assign and_ln102_263_fu_1116_p2 = (xor_ln104_102_fu_1064_p2 & icmp_ln86_216_reg_1560);

assign and_ln102_264_fu_1121_p2 = (and_ln102_263_fu_1116_p2 & and_ln102_235_fu_1023_p2);

assign and_ln102_265_fu_1127_p2 = (icmp_ln86_217_reg_1565 & and_ln102_243_fu_1069_p2);

assign and_ln102_266_fu_1132_p2 = (xor_ln104_103_fu_1074_p2 & icmp_ln86_218_reg_1570);

assign and_ln102_267_fu_1137_p2 = (and_ln104_40_fu_1033_p2 & and_ln102_266_fu_1132_p2);

assign and_ln102_fu_604_p2 = (icmp_ln86_fu_418_p2 & icmp_ln86_189_fu_424_p2);

assign and_ln104_36_fu_1001_p2 = (xor_ln104_fu_986_p2 & xor_ln104_91_fu_996_p2);

assign and_ln104_37_fu_634_p2 = (xor_ln104_92_fu_628_p2 & and_ln102_fu_604_p2);

assign and_ln104_38_fu_652_p2 = (xor_ln104_93_fu_646_p2 & and_ln104_fu_616_p2);

assign and_ln104_39_fu_1017_p2 = (xor_ln104_94_fu_1012_p2 & and_ln102_231_fu_991_p2);

assign and_ln104_40_fu_1033_p2 = (xor_ln104_95_fu_1028_p2 & and_ln104_36_fu_1001_p2);

assign and_ln104_fu_616_p2 = (xor_ln104_90_fu_610_p2 & icmp_ln86_fu_418_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1348_p67;

assign icmp_ln86_189_fu_424_p2 = (($signed(x_49_val) < $signed(18'd133801)) ? 1'b1 : 1'b0);

assign icmp_ln86_190_fu_430_p2 = (($signed(x_1_val) < $signed(18'd17485)) ? 1'b1 : 1'b0);

assign icmp_ln86_191_fu_436_p2 = (($signed(x_19_val) < $signed(18'd1262)) ? 1'b1 : 1'b0);

assign icmp_ln86_192_fu_442_p2 = (($signed(x_23_val) < $signed(18'd13)) ? 1'b1 : 1'b0);

assign icmp_ln86_193_fu_448_p2 = (($signed(x_1_val) < $signed(18'd214654)) ? 1'b1 : 1'b0);

assign icmp_ln86_194_fu_454_p2 = (($signed(x_10_val) < $signed(18'd882)) ? 1'b1 : 1'b0);

assign icmp_ln86_195_fu_460_p2 = (($signed(x_3_val) < $signed(18'd102004)) ? 1'b1 : 1'b0);

assign icmp_ln86_196_fu_466_p2 = (($signed(x_32_val) < $signed(18'd889)) ? 1'b1 : 1'b0);

assign icmp_ln86_197_fu_472_p2 = (($signed(x_38_val) < $signed(18'd5)) ? 1'b1 : 1'b0);

assign icmp_ln86_198_fu_478_p2 = (($signed(x_52_val) < $signed(18'd66049)) ? 1'b1 : 1'b0);

assign icmp_ln86_199_fu_484_p2 = (($signed(x_1_val) < $signed(18'd111626)) ? 1'b1 : 1'b0);

assign icmp_ln86_200_fu_490_p2 = (($signed(x_52_val) < $signed(18'd75265)) ? 1'b1 : 1'b0);

assign icmp_ln86_201_fu_496_p2 = (($signed(x_52_val) < $signed(18'd78337)) ? 1'b1 : 1'b0);

assign icmp_ln86_202_fu_502_p2 = (($signed(x_49_val) < $signed(18'd11282)) ? 1'b1 : 1'b0);

assign icmp_ln86_203_fu_508_p2 = (($signed(x_47_val) < $signed(18'd63364)) ? 1'b1 : 1'b0);

assign icmp_ln86_204_fu_514_p2 = (($signed(x_19_val) < $signed(18'd540)) ? 1'b1 : 1'b0);

assign icmp_ln86_205_fu_520_p2 = (($signed(x_11_val) < $signed(18'd825)) ? 1'b1 : 1'b0);

assign icmp_ln86_206_fu_526_p2 = (($signed(x_30_val) < $signed(18'd271)) ? 1'b1 : 1'b0);

assign icmp_ln86_207_fu_532_p2 = (($signed(x_24_val) < $signed(18'd102)) ? 1'b1 : 1'b0);

assign icmp_ln86_208_fu_538_p2 = (($signed(x_13_val) < $signed(18'd432)) ? 1'b1 : 1'b0);

assign icmp_ln86_209_fu_544_p2 = (($signed(x_51_val) < $signed(18'd145)) ? 1'b1 : 1'b0);

assign icmp_ln86_210_fu_550_p2 = (($signed(x_2_val) < $signed(18'd261715)) ? 1'b1 : 1'b0);

assign icmp_ln86_211_fu_556_p2 = (($signed(x_43_val) < $signed(18'd73)) ? 1'b1 : 1'b0);

assign icmp_ln86_212_fu_562_p2 = (($signed(x_4_val) < $signed(18'd74685)) ? 1'b1 : 1'b0);

assign icmp_ln86_213_fu_568_p2 = (($signed(x_10_val) < $signed(18'd875)) ? 1'b1 : 1'b0);

assign icmp_ln86_214_fu_574_p2 = (($signed(x_23_val) < $signed(18'd55)) ? 1'b1 : 1'b0);

assign icmp_ln86_215_fu_580_p2 = (($signed(x_24_val) < $signed(18'd446)) ? 1'b1 : 1'b0);

assign icmp_ln86_216_fu_586_p2 = (($signed(x_1_val) < $signed(18'd81198)) ? 1'b1 : 1'b0);

assign icmp_ln86_217_fu_592_p2 = (($signed(x_21_val) < $signed(18'd209)) ? 1'b1 : 1'b0);

assign icmp_ln86_218_fu_598_p2 = (($signed(x_6_val) < $signed(18'd8412)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_418_p2 = (($signed(tmp_fu_408_p4) < $signed(15'd1)) ? 1'b1 : 1'b0);

assign or_ln117_173_fu_814_p2 = (and_ln102_247_fu_724_p2 | and_ln102_232_fu_622_p2);

assign or_ln117_174_fu_828_p2 = (and_ln102_237_fu_670_p2 | and_ln102_232_fu_622_p2);

assign or_ln117_175_fu_842_p2 = (or_ln117_174_fu_828_p2 | and_ln102_249_fu_736_p2);

assign or_ln117_176_fu_868_p2 = (and_ln102_fu_604_p2 | and_ln102_250_fu_742_p2);

assign or_ln117_177_fu_882_p2 = (and_ln102_fu_604_p2 | and_ln102_238_fu_682_p2);

assign or_ln117_178_fu_896_p2 = (or_ln117_177_fu_882_p2 | and_ln102_252_fu_754_p2);

assign or_ln117_179_fu_910_p2 = (and_ln102_fu_604_p2 | and_ln102_233_fu_640_p2);

assign or_ln117_180_fu_924_p2 = (or_ln117_179_fu_910_p2 | and_ln102_253_fu_760_p2);

assign or_ln117_181_fu_938_p2 = (or_ln117_179_fu_910_p2 | and_ln102_239_fu_694_p2);

assign or_ln117_182_fu_952_p2 = (or_ln117_181_fu_938_p2 | and_ln102_255_fu_772_p2);

assign or_ln117_183_fu_1143_p2 = (icmp_ln86_reg_1484 | and_ln102_256_fu_1079_p2);

assign or_ln117_184_fu_1148_p2 = (icmp_ln86_reg_1484 | and_ln102_240_fu_1039_p2);

assign or_ln117_185_fu_1160_p2 = (or_ln117_184_fu_1148_p2 | and_ln102_258_fu_1089_p2);

assign or_ln117_186_fu_1174_p2 = (icmp_ln86_reg_1484 | and_ln102_234_fu_1007_p2);

assign or_ln117_187_fu_1187_p2 = (or_ln117_186_fu_1174_p2 | and_ln102_259_fu_1095_p2);

assign or_ln117_188_fu_1201_p2 = (or_ln117_186_fu_1174_p2 | and_ln102_241_fu_1049_p2);

assign or_ln117_189_fu_1215_p2 = (or_ln117_188_fu_1201_p2 | and_ln102_261_fu_1105_p2);

assign or_ln117_190_fu_1229_p2 = (icmp_ln86_reg_1484 | and_ln102_231_fu_991_p2);

assign or_ln117_191_fu_1242_p2 = (or_ln117_190_fu_1229_p2 | and_ln102_262_fu_1111_p2);

assign or_ln117_192_fu_1256_p2 = (or_ln117_190_fu_1229_p2 | and_ln102_242_fu_1059_p2);

assign or_ln117_193_fu_1270_p2 = (or_ln117_192_fu_1256_p2 | and_ln102_264_fu_1121_p2);

assign or_ln117_194_fu_1284_p2 = (or_ln117_190_fu_1229_p2 | and_ln102_235_fu_1023_p2);

assign or_ln117_195_fu_1298_p2 = (or_ln117_194_fu_1284_p2 | and_ln102_265_fu_1127_p2);

assign or_ln117_196_fu_1312_p2 = (or_ln117_194_fu_1284_p2 | and_ln102_243_fu_1069_p2);

assign or_ln117_197_fu_1326_p2 = (or_ln117_196_fu_1312_p2 | and_ln102_267_fu_1137_p2);

assign or_ln117_fu_788_p2 = (and_ln102_246_fu_718_p2 | and_ln102_236_fu_658_p2);

assign select_ln117_184_fu_802_p3 = ((or_ln117_fu_788_p2[0:0] == 1'b1) ? select_ln117_fu_794_p3 : 2'd3);

assign select_ln117_185_fu_820_p3 = ((and_ln102_232_fu_622_p2[0:0] == 1'b1) ? zext_ln117_22_fu_810_p1 : 3'd4);

assign select_ln117_186_fu_834_p3 = ((or_ln117_173_fu_814_p2[0:0] == 1'b1) ? select_ln117_185_fu_820_p3 : 3'd5);

assign select_ln117_187_fu_848_p3 = ((or_ln117_174_fu_828_p2[0:0] == 1'b1) ? select_ln117_186_fu_834_p3 : 3'd6);

assign select_ln117_188_fu_856_p3 = ((or_ln117_175_fu_842_p2[0:0] == 1'b1) ? select_ln117_187_fu_848_p3 : 3'd7);

assign select_ln117_189_fu_874_p3 = ((and_ln102_fu_604_p2[0:0] == 1'b1) ? zext_ln117_23_fu_864_p1 : 4'd8);

assign select_ln117_190_fu_888_p3 = ((or_ln117_176_fu_868_p2[0:0] == 1'b1) ? select_ln117_189_fu_874_p3 : 4'd9);

assign select_ln117_191_fu_902_p3 = ((or_ln117_177_fu_882_p2[0:0] == 1'b1) ? select_ln117_190_fu_888_p3 : 4'd10);

assign select_ln117_192_fu_916_p3 = ((or_ln117_178_fu_896_p2[0:0] == 1'b1) ? select_ln117_191_fu_902_p3 : 4'd11);

assign select_ln117_193_fu_930_p3 = ((or_ln117_179_fu_910_p2[0:0] == 1'b1) ? select_ln117_192_fu_916_p3 : 4'd12);

assign select_ln117_194_fu_944_p3 = ((or_ln117_180_fu_924_p2[0:0] == 1'b1) ? select_ln117_193_fu_930_p3 : 4'd13);

assign select_ln117_195_fu_958_p3 = ((or_ln117_181_fu_938_p2[0:0] == 1'b1) ? select_ln117_194_fu_944_p3 : 4'd14);

assign select_ln117_196_fu_966_p3 = ((or_ln117_182_fu_952_p2[0:0] == 1'b1) ? select_ln117_195_fu_958_p3 : 4'd15);

assign select_ln117_197_fu_978_p3 = ((icmp_ln86_fu_418_p2[0:0] == 1'b1) ? zext_ln117_24_fu_974_p1 : 5'd16);

assign select_ln117_198_fu_1153_p3 = ((or_ln117_183_fu_1143_p2[0:0] == 1'b1) ? select_ln117_197_reg_1575 : 5'd17);

assign select_ln117_199_fu_1166_p3 = ((or_ln117_184_fu_1148_p2[0:0] == 1'b1) ? select_ln117_198_fu_1153_p3 : 5'd18);

assign select_ln117_200_fu_1179_p3 = ((or_ln117_185_fu_1160_p2[0:0] == 1'b1) ? select_ln117_199_fu_1166_p3 : 5'd19);

assign select_ln117_201_fu_1193_p3 = ((or_ln117_186_fu_1174_p2[0:0] == 1'b1) ? select_ln117_200_fu_1179_p3 : 5'd20);

assign select_ln117_202_fu_1207_p3 = ((or_ln117_187_fu_1187_p2[0:0] == 1'b1) ? select_ln117_201_fu_1193_p3 : 5'd21);

assign select_ln117_203_fu_1221_p3 = ((or_ln117_188_fu_1201_p2[0:0] == 1'b1) ? select_ln117_202_fu_1207_p3 : 5'd22);

assign select_ln117_204_fu_1234_p3 = ((or_ln117_189_fu_1215_p2[0:0] == 1'b1) ? select_ln117_203_fu_1221_p3 : 5'd23);

assign select_ln117_205_fu_1248_p3 = ((or_ln117_190_fu_1229_p2[0:0] == 1'b1) ? select_ln117_204_fu_1234_p3 : 5'd24);

assign select_ln117_206_fu_1262_p3 = ((or_ln117_191_fu_1242_p2[0:0] == 1'b1) ? select_ln117_205_fu_1248_p3 : 5'd25);

assign select_ln117_207_fu_1276_p3 = ((or_ln117_192_fu_1256_p2[0:0] == 1'b1) ? select_ln117_206_fu_1262_p3 : 5'd26);

assign select_ln117_208_fu_1290_p3 = ((or_ln117_193_fu_1270_p2[0:0] == 1'b1) ? select_ln117_207_fu_1276_p3 : 5'd27);

assign select_ln117_209_fu_1304_p3 = ((or_ln117_194_fu_1284_p2[0:0] == 1'b1) ? select_ln117_208_fu_1290_p3 : 5'd28);

assign select_ln117_210_fu_1318_p3 = ((or_ln117_195_fu_1298_p2[0:0] == 1'b1) ? select_ln117_209_fu_1304_p3 : 5'd29);

assign select_ln117_211_fu_1332_p3 = ((or_ln117_196_fu_1312_p2[0:0] == 1'b1) ? select_ln117_210_fu_1318_p3 : 5'd30);

assign select_ln117_fu_794_p3 = ((and_ln102_236_fu_658_p2[0:0] == 1'b1) ? zext_ln117_fu_784_p1 : 2'd2);

assign tmp_fu_408_p4 = {{x_17_val[17:3]}};

assign xor_ln104_100_fu_1044_p2 = (icmp_ln86_199_reg_1511 ^ 1'd1);

assign xor_ln104_101_fu_1054_p2 = (icmp_ln86_200_reg_1517 ^ 1'd1);

assign xor_ln104_102_fu_1064_p2 = (icmp_ln86_201_reg_1523 ^ 1'd1);

assign xor_ln104_103_fu_1074_p2 = (icmp_ln86_202_reg_1529 ^ 1'd1);

assign xor_ln104_90_fu_610_p2 = (icmp_ln86_189_fu_424_p2 ^ 1'd1);

assign xor_ln104_91_fu_996_p2 = (icmp_ln86_190_reg_1493 ^ 1'd1);

assign xor_ln104_92_fu_628_p2 = (icmp_ln86_191_fu_436_p2 ^ 1'd1);

assign xor_ln104_93_fu_646_p2 = (icmp_ln86_192_fu_442_p2 ^ 1'd1);

assign xor_ln104_94_fu_1012_p2 = (icmp_ln86_193_reg_1499 ^ 1'd1);

assign xor_ln104_95_fu_1028_p2 = (icmp_ln86_194_reg_1505 ^ 1'd1);

assign xor_ln104_96_fu_664_p2 = (icmp_ln86_195_fu_460_p2 ^ 1'd1);

assign xor_ln104_97_fu_676_p2 = (icmp_ln86_196_fu_466_p2 ^ 1'd1);

assign xor_ln104_98_fu_688_p2 = (icmp_ln86_197_fu_472_p2 ^ 1'd1);

assign xor_ln104_99_fu_700_p2 = (icmp_ln86_198_fu_478_p2 ^ 1'd1);

assign xor_ln104_fu_986_p2 = (icmp_ln86_reg_1484 ^ 1'd1);

assign xor_ln117_fu_778_p2 = (1'd1 ^ and_ln102_244_fu_706_p2);

assign zext_ln117_22_fu_810_p1 = select_ln117_184_fu_802_p3;

assign zext_ln117_23_fu_864_p1 = select_ln117_188_fu_856_p3;

assign zext_ln117_24_fu_974_p1 = select_ln117_196_fu_966_p3;

assign zext_ln117_fu_784_p1 = xor_ln117_fu_778_p2;

endmodule //my_prj_decision_function_92
