// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_10 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_3_val,
        x_7_val,
        x_8_val,
        x_14_val,
        x_15_val,
        x_18_val,
        x_19_val,
        x_23_val,
        x_29_val,
        x_36_val,
        x_37_val,
        x_39_val,
        x_46_val,
        x_48_val,
        x_49_val,
        x_50_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_3_val;
input  [17:0] x_7_val;
input  [17:0] x_8_val;
input  [17:0] x_14_val;
input  [17:0] x_15_val;
input  [17:0] x_18_val;
input  [17:0] x_19_val;
input  [17:0] x_23_val;
input  [17:0] x_29_val;
input  [17:0] x_36_val;
input  [17:0] x_37_val;
input  [17:0] x_39_val;
input  [17:0] x_46_val;
input  [17:0] x_48_val;
input  [17:0] x_49_val;
input  [17:0] x_50_val;
input  [17:0] x_52_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_380_p2;
reg   [0:0] icmp_ln86_reg_1456;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_257_fu_392_p2;
reg   [0:0] icmp_ln86_257_reg_1465;
wire   [0:0] icmp_ln86_260_fu_420_p2;
reg   [0:0] icmp_ln86_260_reg_1471;
wire   [0:0] icmp_ln86_261_fu_426_p2;
reg   [0:0] icmp_ln86_261_reg_1477;
wire   [0:0] icmp_ln86_266_fu_456_p2;
reg   [0:0] icmp_ln86_266_reg_1483;
wire   [0:0] icmp_ln86_267_fu_462_p2;
reg   [0:0] icmp_ln86_267_reg_1489;
wire   [0:0] icmp_ln86_268_fu_468_p2;
reg   [0:0] icmp_ln86_268_reg_1495;
wire   [0:0] icmp_ln86_269_fu_474_p2;
reg   [0:0] icmp_ln86_269_reg_1501;
wire   [0:0] icmp_ln86_278_fu_528_p2;
reg   [0:0] icmp_ln86_278_reg_1507;
wire   [0:0] icmp_ln86_279_fu_534_p2;
reg   [0:0] icmp_ln86_279_reg_1512;
wire   [0:0] icmp_ln86_280_fu_540_p2;
reg   [0:0] icmp_ln86_280_reg_1517;
wire   [0:0] icmp_ln86_281_fu_546_p2;
reg   [0:0] icmp_ln86_281_reg_1522;
wire   [0:0] icmp_ln86_282_fu_552_p2;
reg   [0:0] icmp_ln86_282_reg_1527;
wire   [0:0] icmp_ln86_283_fu_558_p2;
reg   [0:0] icmp_ln86_283_reg_1532;
wire   [0:0] icmp_ln86_284_fu_564_p2;
reg   [0:0] icmp_ln86_284_reg_1537;
wire   [0:0] icmp_ln86_285_fu_570_p2;
reg   [0:0] icmp_ln86_285_reg_1542;
wire   [4:0] select_ln117_263_fu_950_p3;
reg   [4:0] select_ln117_263_reg_1547;
wire    ap_block_pp0_stage0;
wire   [16:0] tmp_fu_398_p4;
wire   [0:0] icmp_ln86_256_fu_386_p2;
wire   [0:0] xor_ln104_123_fu_582_p2;
wire   [0:0] icmp_ln86_2033_fu_408_p2;
wire   [0:0] and_ln102_fu_576_p2;
wire   [0:0] xor_ln104_125_fu_600_p2;
wire   [0:0] icmp_ln86_259_fu_414_p2;
wire   [0:0] and_ln104_fu_588_p2;
wire   [0:0] xor_ln104_126_fu_618_p2;
wire   [0:0] icmp_ln86_262_fu_432_p2;
wire   [0:0] and_ln102_246_fu_594_p2;
wire   [0:0] icmp_ln86_263_fu_438_p2;
wire   [0:0] and_ln104_50_fu_606_p2;
wire   [0:0] icmp_ln86_264_fu_444_p2;
wire   [0:0] and_ln102_247_fu_612_p2;
wire   [0:0] icmp_ln86_265_fu_450_p2;
wire   [0:0] and_ln104_51_fu_624_p2;
wire   [0:0] icmp_ln86_270_fu_480_p2;
wire   [0:0] and_ln102_250_fu_630_p2;
wire   [0:0] icmp_ln86_271_fu_486_p2;
wire   [0:0] xor_ln104_129_fu_636_p2;
wire   [0:0] and_ln102_274_fu_684_p2;
wire   [0:0] icmp_ln86_272_fu_492_p2;
wire   [0:0] and_ln102_251_fu_642_p2;
wire   [0:0] icmp_ln86_273_fu_498_p2;
wire   [0:0] xor_ln104_130_fu_648_p2;
wire   [0:0] and_ln102_275_fu_702_p2;
wire   [0:0] icmp_ln86_274_fu_504_p2;
wire   [0:0] and_ln102_252_fu_654_p2;
wire   [0:0] icmp_ln86_275_fu_510_p2;
wire   [0:0] xor_ln104_131_fu_660_p2;
wire   [0:0] and_ln102_276_fu_720_p2;
wire   [0:0] icmp_ln86_276_fu_516_p2;
wire   [0:0] and_ln102_253_fu_666_p2;
wire   [0:0] icmp_ln86_277_fu_522_p2;
wire   [0:0] xor_ln104_132_fu_672_p2;
wire   [0:0] and_ln102_277_fu_738_p2;
wire   [0:0] and_ln102_258_fu_678_p2;
wire   [0:0] xor_ln117_fu_750_p2;
wire   [0:0] and_ln102_259_fu_690_p2;
wire   [1:0] zext_ln117_fu_756_p1;
wire   [0:0] or_ln117_fu_760_p2;
wire   [1:0] select_ln117_fu_766_p3;
wire   [1:0] select_ln117_250_fu_774_p3;
wire   [0:0] and_ln102_260_fu_696_p2;
wire   [2:0] zext_ln117_27_fu_782_p1;
wire   [0:0] or_ln117_241_fu_786_p2;
wire   [2:0] select_ln117_251_fu_792_p3;
wire   [0:0] or_ln117_242_fu_800_p2;
wire   [0:0] and_ln102_261_fu_708_p2;
wire   [2:0] select_ln117_252_fu_806_p3;
wire   [0:0] or_ln117_243_fu_814_p2;
wire   [2:0] select_ln117_253_fu_820_p3;
wire   [2:0] select_ln117_254_fu_828_p3;
wire   [0:0] and_ln102_262_fu_714_p2;
wire   [3:0] zext_ln117_28_fu_836_p1;
wire   [0:0] or_ln117_244_fu_840_p2;
wire   [3:0] select_ln117_255_fu_846_p3;
wire   [0:0] or_ln117_245_fu_854_p2;
wire   [0:0] and_ln102_263_fu_726_p2;
wire   [3:0] select_ln117_256_fu_860_p3;
wire   [0:0] or_ln117_246_fu_868_p2;
wire   [3:0] select_ln117_257_fu_874_p3;
wire   [0:0] or_ln117_247_fu_882_p2;
wire   [0:0] and_ln102_264_fu_732_p2;
wire   [3:0] select_ln117_258_fu_888_p3;
wire   [0:0] or_ln117_248_fu_896_p2;
wire   [3:0] select_ln117_259_fu_902_p3;
wire   [0:0] or_ln117_249_fu_910_p2;
wire   [0:0] and_ln102_265_fu_744_p2;
wire   [3:0] select_ln117_260_fu_916_p3;
wire   [0:0] or_ln117_250_fu_924_p2;
wire   [3:0] select_ln117_261_fu_930_p3;
wire   [3:0] select_ln117_262_fu_938_p3;
wire   [4:0] zext_ln117_29_fu_946_p1;
wire   [0:0] xor_ln104_fu_958_p2;
wire   [0:0] xor_ln104_124_fu_968_p2;
wire   [0:0] and_ln102_245_fu_963_p2;
wire   [0:0] xor_ln104_127_fu_984_p2;
wire   [0:0] and_ln104_49_fu_973_p2;
wire   [0:0] xor_ln104_128_fu_1000_p2;
wire   [0:0] and_ln102_248_fu_979_p2;
wire   [0:0] and_ln104_52_fu_989_p2;
wire   [0:0] and_ln102_249_fu_995_p2;
wire   [0:0] and_ln104_53_fu_1005_p2;
wire   [0:0] and_ln102_254_fu_1011_p2;
wire   [0:0] xor_ln104_133_fu_1016_p2;
wire   [0:0] and_ln102_278_fu_1056_p2;
wire   [0:0] and_ln102_255_fu_1021_p2;
wire   [0:0] xor_ln104_134_fu_1026_p2;
wire   [0:0] and_ln102_279_fu_1072_p2;
wire   [0:0] and_ln102_256_fu_1031_p2;
wire   [0:0] xor_ln104_135_fu_1036_p2;
wire   [0:0] and_ln102_280_fu_1088_p2;
wire   [0:0] and_ln102_257_fu_1041_p2;
wire   [0:0] xor_ln104_136_fu_1046_p2;
wire   [0:0] and_ln102_281_fu_1104_p2;
wire   [0:0] and_ln102_266_fu_1051_p2;
wire   [0:0] or_ln117_251_fu_1115_p2;
wire   [0:0] or_ln117_252_fu_1120_p2;
wire   [0:0] and_ln102_267_fu_1061_p2;
wire   [4:0] select_ln117_264_fu_1125_p3;
wire   [0:0] or_ln117_253_fu_1132_p2;
wire   [4:0] select_ln117_265_fu_1138_p3;
wire   [0:0] or_ln117_254_fu_1146_p2;
wire   [0:0] and_ln102_268_fu_1067_p2;
wire   [4:0] select_ln117_266_fu_1151_p3;
wire   [0:0] or_ln117_255_fu_1159_p2;
wire   [4:0] select_ln117_267_fu_1165_p3;
wire   [0:0] or_ln117_256_fu_1173_p2;
wire   [0:0] and_ln102_269_fu_1077_p2;
wire   [4:0] select_ln117_268_fu_1179_p3;
wire   [0:0] or_ln117_257_fu_1187_p2;
wire   [4:0] select_ln117_269_fu_1193_p3;
wire   [0:0] or_ln117_258_fu_1201_p2;
wire   [0:0] and_ln102_270_fu_1083_p2;
wire   [4:0] select_ln117_270_fu_1206_p3;
wire   [0:0] or_ln117_259_fu_1214_p2;
wire   [4:0] select_ln117_271_fu_1220_p3;
wire   [0:0] or_ln117_260_fu_1228_p2;
wire   [0:0] and_ln102_271_fu_1093_p2;
wire   [4:0] select_ln117_272_fu_1234_p3;
wire   [0:0] or_ln117_261_fu_1242_p2;
wire   [4:0] select_ln117_273_fu_1248_p3;
wire   [0:0] or_ln117_262_fu_1256_p2;
wire   [0:0] and_ln102_272_fu_1099_p2;
wire   [4:0] select_ln117_274_fu_1262_p3;
wire   [0:0] or_ln117_263_fu_1270_p2;
wire   [4:0] select_ln117_275_fu_1276_p3;
wire   [0:0] or_ln117_264_fu_1284_p2;
wire   [0:0] and_ln102_273_fu_1109_p2;
wire   [4:0] select_ln117_276_fu_1290_p3;
wire   [0:0] or_ln117_265_fu_1298_p2;
wire   [4:0] select_ln117_277_fu_1304_p3;
wire   [11:0] agg_result_fu_1320_p65;
wire   [4:0] agg_result_fu_1320_p66;
wire   [11:0] agg_result_fu_1320_p67;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1320_p1;
wire   [4:0] agg_result_fu_1320_p3;
wire   [4:0] agg_result_fu_1320_p5;
wire   [4:0] agg_result_fu_1320_p7;
wire   [4:0] agg_result_fu_1320_p9;
wire   [4:0] agg_result_fu_1320_p11;
wire   [4:0] agg_result_fu_1320_p13;
wire   [4:0] agg_result_fu_1320_p15;
wire   [4:0] agg_result_fu_1320_p17;
wire   [4:0] agg_result_fu_1320_p19;
wire   [4:0] agg_result_fu_1320_p21;
wire   [4:0] agg_result_fu_1320_p23;
wire   [4:0] agg_result_fu_1320_p25;
wire   [4:0] agg_result_fu_1320_p27;
wire   [4:0] agg_result_fu_1320_p29;
wire   [4:0] agg_result_fu_1320_p31;
wire  signed [4:0] agg_result_fu_1320_p33;
wire  signed [4:0] agg_result_fu_1320_p35;
wire  signed [4:0] agg_result_fu_1320_p37;
wire  signed [4:0] agg_result_fu_1320_p39;
wire  signed [4:0] agg_result_fu_1320_p41;
wire  signed [4:0] agg_result_fu_1320_p43;
wire  signed [4:0] agg_result_fu_1320_p45;
wire  signed [4:0] agg_result_fu_1320_p47;
wire  signed [4:0] agg_result_fu_1320_p49;
wire  signed [4:0] agg_result_fu_1320_p51;
wire  signed [4:0] agg_result_fu_1320_p53;
wire  signed [4:0] agg_result_fu_1320_p55;
wire  signed [4:0] agg_result_fu_1320_p57;
wire  signed [4:0] agg_result_fu_1320_p59;
wire  signed [4:0] agg_result_fu_1320_p61;
wire  signed [4:0] agg_result_fu_1320_p63;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_65_5_12_1_1_x1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 12 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 12 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 12 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 12 ),
    .CASE31( 5'h1F ),
    .din31_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_65_5_12_1_1_x1_U160(
    .din0(12'd3651),
    .din1(12'd3854),
    .din2(12'd20),
    .din3(12'd1656),
    .din4(12'd362),
    .din5(12'd3717),
    .din6(12'd3779),
    .din7(12'd20),
    .din8(12'd3571),
    .din9(12'd733),
    .din10(12'd3764),
    .din11(12'd3634),
    .din12(12'd3732),
    .din13(12'd3588),
    .din14(12'd285),
    .din15(12'd3823),
    .din16(12'd146),
    .din17(12'd486),
    .din18(12'd3770),
    .din19(12'd182),
    .din20(12'd3966),
    .din21(12'd337),
    .din22(12'd2837),
    .din23(12'd3535),
    .din24(12'd448),
    .din25(12'd116),
    .din26(12'd593),
    .din27(12'd279),
    .din28(12'd16),
    .din29(12'd3706),
    .din30(12'd4001),
    .din31(12'd425),
    .def(agg_result_fu_1320_p65),
    .sel(agg_result_fu_1320_p66),
    .dout(agg_result_fu_1320_p67)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_257_reg_1465 <= icmp_ln86_257_fu_392_p2;
        icmp_ln86_260_reg_1471 <= icmp_ln86_260_fu_420_p2;
        icmp_ln86_261_reg_1477 <= icmp_ln86_261_fu_426_p2;
        icmp_ln86_266_reg_1483 <= icmp_ln86_266_fu_456_p2;
        icmp_ln86_267_reg_1489 <= icmp_ln86_267_fu_462_p2;
        icmp_ln86_268_reg_1495 <= icmp_ln86_268_fu_468_p2;
        icmp_ln86_269_reg_1501 <= icmp_ln86_269_fu_474_p2;
        icmp_ln86_278_reg_1507 <= icmp_ln86_278_fu_528_p2;
        icmp_ln86_279_reg_1512 <= icmp_ln86_279_fu_534_p2;
        icmp_ln86_280_reg_1517 <= icmp_ln86_280_fu_540_p2;
        icmp_ln86_281_reg_1522 <= icmp_ln86_281_fu_546_p2;
        icmp_ln86_282_reg_1527 <= icmp_ln86_282_fu_552_p2;
        icmp_ln86_283_reg_1532 <= icmp_ln86_283_fu_558_p2;
        icmp_ln86_284_reg_1537 <= icmp_ln86_284_fu_564_p2;
        icmp_ln86_285_reg_1542 <= icmp_ln86_285_fu_570_p2;
        icmp_ln86_reg_1456 <= icmp_ln86_fu_380_p2;
        select_ln117_263_reg_1547 <= select_ln117_263_fu_950_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1320_p65 = 'bx;

assign agg_result_fu_1320_p66 = ((or_ln117_265_fu_1298_p2[0:0] == 1'b1) ? select_ln117_277_fu_1304_p3 : 5'd31);

assign and_ln102_245_fu_963_p2 = (xor_ln104_fu_958_p2 & icmp_ln86_257_reg_1465);

assign and_ln102_246_fu_594_p2 = (icmp_ln86_2033_fu_408_p2 & and_ln102_fu_576_p2);

assign and_ln102_247_fu_612_p2 = (icmp_ln86_259_fu_414_p2 & and_ln104_fu_588_p2);

assign and_ln102_248_fu_979_p2 = (icmp_ln86_260_reg_1471 & and_ln102_245_fu_963_p2);

assign and_ln102_249_fu_995_p2 = (icmp_ln86_261_reg_1477 & and_ln104_49_fu_973_p2);

assign and_ln102_250_fu_630_p2 = (icmp_ln86_262_fu_432_p2 & and_ln102_246_fu_594_p2);

assign and_ln102_251_fu_642_p2 = (icmp_ln86_263_fu_438_p2 & and_ln104_50_fu_606_p2);

assign and_ln102_252_fu_654_p2 = (icmp_ln86_264_fu_444_p2 & and_ln102_247_fu_612_p2);

assign and_ln102_253_fu_666_p2 = (icmp_ln86_265_fu_450_p2 & and_ln104_51_fu_624_p2);

assign and_ln102_254_fu_1011_p2 = (icmp_ln86_266_reg_1483 & and_ln102_248_fu_979_p2);

assign and_ln102_255_fu_1021_p2 = (icmp_ln86_267_reg_1489 & and_ln104_52_fu_989_p2);

assign and_ln102_256_fu_1031_p2 = (icmp_ln86_268_reg_1495 & and_ln102_249_fu_995_p2);

assign and_ln102_257_fu_1041_p2 = (icmp_ln86_269_reg_1501 & and_ln104_53_fu_1005_p2);

assign and_ln102_258_fu_678_p2 = (icmp_ln86_270_fu_480_p2 & and_ln102_250_fu_630_p2);

assign and_ln102_259_fu_690_p2 = (and_ln102_274_fu_684_p2 & and_ln102_246_fu_594_p2);

assign and_ln102_260_fu_696_p2 = (icmp_ln86_272_fu_492_p2 & and_ln102_251_fu_642_p2);

assign and_ln102_261_fu_708_p2 = (and_ln104_50_fu_606_p2 & and_ln102_275_fu_702_p2);

assign and_ln102_262_fu_714_p2 = (icmp_ln86_274_fu_504_p2 & and_ln102_252_fu_654_p2);

assign and_ln102_263_fu_726_p2 = (and_ln102_276_fu_720_p2 & and_ln102_247_fu_612_p2);

assign and_ln102_264_fu_732_p2 = (icmp_ln86_276_fu_516_p2 & and_ln102_253_fu_666_p2);

assign and_ln102_265_fu_744_p2 = (and_ln104_51_fu_624_p2 & and_ln102_277_fu_738_p2);

assign and_ln102_266_fu_1051_p2 = (icmp_ln86_278_reg_1507 & and_ln102_254_fu_1011_p2);

assign and_ln102_267_fu_1061_p2 = (and_ln102_278_fu_1056_p2 & and_ln102_248_fu_979_p2);

assign and_ln102_268_fu_1067_p2 = (icmp_ln86_280_reg_1517 & and_ln102_255_fu_1021_p2);

assign and_ln102_269_fu_1077_p2 = (and_ln104_52_fu_989_p2 & and_ln102_279_fu_1072_p2);

assign and_ln102_270_fu_1083_p2 = (icmp_ln86_282_reg_1527 & and_ln102_256_fu_1031_p2);

assign and_ln102_271_fu_1093_p2 = (and_ln102_280_fu_1088_p2 & and_ln102_249_fu_995_p2);

assign and_ln102_272_fu_1099_p2 = (icmp_ln86_284_reg_1537 & and_ln102_257_fu_1041_p2);

assign and_ln102_273_fu_1109_p2 = (and_ln104_53_fu_1005_p2 & and_ln102_281_fu_1104_p2);

assign and_ln102_274_fu_684_p2 = (xor_ln104_129_fu_636_p2 & icmp_ln86_271_fu_486_p2);

assign and_ln102_275_fu_702_p2 = (xor_ln104_130_fu_648_p2 & icmp_ln86_273_fu_498_p2);

assign and_ln102_276_fu_720_p2 = (xor_ln104_131_fu_660_p2 & icmp_ln86_275_fu_510_p2);

assign and_ln102_277_fu_738_p2 = (xor_ln104_132_fu_672_p2 & icmp_ln86_277_fu_522_p2);

assign and_ln102_278_fu_1056_p2 = (xor_ln104_133_fu_1016_p2 & icmp_ln86_279_reg_1512);

assign and_ln102_279_fu_1072_p2 = (xor_ln104_134_fu_1026_p2 & icmp_ln86_281_reg_1522);

assign and_ln102_280_fu_1088_p2 = (xor_ln104_135_fu_1036_p2 & icmp_ln86_283_reg_1532);

assign and_ln102_281_fu_1104_p2 = (xor_ln104_136_fu_1046_p2 & icmp_ln86_285_reg_1542);

assign and_ln102_fu_576_p2 = (icmp_ln86_fu_380_p2 & icmp_ln86_256_fu_386_p2);

assign and_ln104_49_fu_973_p2 = (xor_ln104_fu_958_p2 & xor_ln104_124_fu_968_p2);

assign and_ln104_50_fu_606_p2 = (xor_ln104_125_fu_600_p2 & and_ln102_fu_576_p2);

assign and_ln104_51_fu_624_p2 = (xor_ln104_126_fu_618_p2 & and_ln104_fu_588_p2);

assign and_ln104_52_fu_989_p2 = (xor_ln104_127_fu_984_p2 & and_ln102_245_fu_963_p2);

assign and_ln104_53_fu_1005_p2 = (xor_ln104_128_fu_1000_p2 & and_ln104_49_fu_973_p2);

assign and_ln104_fu_588_p2 = (xor_ln104_123_fu_582_p2 & icmp_ln86_fu_380_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1320_p67;

assign icmp_ln86_2033_fu_408_p2 = (($signed(tmp_fu_398_p4) < $signed(17'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_256_fu_386_p2 = (($signed(x_1_val) < $signed(18'd226059)) ? 1'b1 : 1'b0);

assign icmp_ln86_257_fu_392_p2 = (($signed(x_8_val) < $signed(18'd6715)) ? 1'b1 : 1'b0);

assign icmp_ln86_259_fu_414_p2 = (($signed(x_36_val) < $signed(18'd3)) ? 1'b1 : 1'b0);

assign icmp_ln86_260_fu_420_p2 = (($signed(x_1_val) < $signed(18'd232820)) ? 1'b1 : 1'b0);

assign icmp_ln86_261_fu_426_p2 = (($signed(x_52_val) < $signed(18'd94721)) ? 1'b1 : 1'b0);

assign icmp_ln86_262_fu_432_p2 = (($signed(x_15_val) < $signed(18'd6)) ? 1'b1 : 1'b0);

assign icmp_ln86_263_fu_438_p2 = (($signed(x_39_val) < $signed(18'd1893)) ? 1'b1 : 1'b0);

assign icmp_ln86_264_fu_444_p2 = (($signed(x_14_val) < $signed(18'd25)) ? 1'b1 : 1'b0);

assign icmp_ln86_265_fu_450_p2 = (($signed(x_19_val) < $signed(18'd1082)) ? 1'b1 : 1'b0);

assign icmp_ln86_266_fu_456_p2 = (($signed(x_37_val) < $signed(18'd72)) ? 1'b1 : 1'b0);

assign icmp_ln86_267_fu_462_p2 = (($signed(x_48_val) < $signed(18'd191285)) ? 1'b1 : 1'b0);

assign icmp_ln86_268_fu_468_p2 = (($signed(x_50_val) < $signed(18'd157540)) ? 1'b1 : 1'b0);

assign icmp_ln86_269_fu_474_p2 = (($signed(x_50_val) < $signed(18'd158988)) ? 1'b1 : 1'b0);

assign icmp_ln86_270_fu_480_p2 = (($signed(x_14_val) < $signed(18'd18)) ? 1'b1 : 1'b0);

assign icmp_ln86_271_fu_486_p2 = (($signed(x_18_val) < $signed(18'd6533)) ? 1'b1 : 1'b0);

assign icmp_ln86_272_fu_492_p2 = (($signed(x_29_val) < $signed(18'd7771)) ? 1'b1 : 1'b0);

assign icmp_ln86_273_fu_498_p2 = (($signed(x_7_val) < $signed(18'd6396)) ? 1'b1 : 1'b0);

assign icmp_ln86_274_fu_504_p2 = (($signed(x_1_val) < $signed(18'd135077)) ? 1'b1 : 1'b0);

assign icmp_ln86_275_fu_510_p2 = (($signed(x_1_val) < $signed(18'd236751)) ? 1'b1 : 1'b0);

assign icmp_ln86_276_fu_516_p2 = (($signed(x_48_val) < $signed(18'd90593)) ? 1'b1 : 1'b0);

assign icmp_ln86_277_fu_522_p2 = (($signed(x_46_val) < $signed(18'd75)) ? 1'b1 : 1'b0);

assign icmp_ln86_278_fu_528_p2 = (($signed(x_49_val) < $signed(18'd70747)) ? 1'b1 : 1'b0);

assign icmp_ln86_279_fu_534_p2 = (($signed(x_1_val) < $signed(18'd70861)) ? 1'b1 : 1'b0);

assign icmp_ln86_280_fu_540_p2 = (($signed(x_3_val) < $signed(18'd171247)) ? 1'b1 : 1'b0);

assign icmp_ln86_281_fu_546_p2 = (($signed(x_1_val) < $signed(18'd40598)) ? 1'b1 : 1'b0);

assign icmp_ln86_282_fu_552_p2 = (($signed(x_1_val) < $signed(18'd237205)) ? 1'b1 : 1'b0);

assign icmp_ln86_283_fu_558_p2 = (($signed(x_49_val) < $signed(18'd187414)) ? 1'b1 : 1'b0);

assign icmp_ln86_284_fu_564_p2 = (($signed(x_1_val) < $signed(18'd220892)) ? 1'b1 : 1'b0);

assign icmp_ln86_285_fu_570_p2 = (($signed(x_23_val) < $signed(18'd60)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_380_p2 = (($signed(x_15_val) < $signed(18'd9)) ? 1'b1 : 1'b0);

assign or_ln117_241_fu_786_p2 = (and_ln102_260_fu_696_p2 | and_ln102_246_fu_594_p2);

assign or_ln117_242_fu_800_p2 = (and_ln102_251_fu_642_p2 | and_ln102_246_fu_594_p2);

assign or_ln117_243_fu_814_p2 = (or_ln117_242_fu_800_p2 | and_ln102_261_fu_708_p2);

assign or_ln117_244_fu_840_p2 = (and_ln102_fu_576_p2 | and_ln102_262_fu_714_p2);

assign or_ln117_245_fu_854_p2 = (and_ln102_fu_576_p2 | and_ln102_252_fu_654_p2);

assign or_ln117_246_fu_868_p2 = (or_ln117_245_fu_854_p2 | and_ln102_263_fu_726_p2);

assign or_ln117_247_fu_882_p2 = (and_ln102_fu_576_p2 | and_ln102_247_fu_612_p2);

assign or_ln117_248_fu_896_p2 = (or_ln117_247_fu_882_p2 | and_ln102_264_fu_732_p2);

assign or_ln117_249_fu_910_p2 = (or_ln117_247_fu_882_p2 | and_ln102_253_fu_666_p2);

assign or_ln117_250_fu_924_p2 = (or_ln117_249_fu_910_p2 | and_ln102_265_fu_744_p2);

assign or_ln117_251_fu_1115_p2 = (icmp_ln86_reg_1456 | and_ln102_266_fu_1051_p2);

assign or_ln117_252_fu_1120_p2 = (icmp_ln86_reg_1456 | and_ln102_254_fu_1011_p2);

assign or_ln117_253_fu_1132_p2 = (or_ln117_252_fu_1120_p2 | and_ln102_267_fu_1061_p2);

assign or_ln117_254_fu_1146_p2 = (icmp_ln86_reg_1456 | and_ln102_248_fu_979_p2);

assign or_ln117_255_fu_1159_p2 = (or_ln117_254_fu_1146_p2 | and_ln102_268_fu_1067_p2);

assign or_ln117_256_fu_1173_p2 = (or_ln117_254_fu_1146_p2 | and_ln102_255_fu_1021_p2);

assign or_ln117_257_fu_1187_p2 = (or_ln117_256_fu_1173_p2 | and_ln102_269_fu_1077_p2);

assign or_ln117_258_fu_1201_p2 = (icmp_ln86_reg_1456 | and_ln102_245_fu_963_p2);

assign or_ln117_259_fu_1214_p2 = (or_ln117_258_fu_1201_p2 | and_ln102_270_fu_1083_p2);

assign or_ln117_260_fu_1228_p2 = (or_ln117_258_fu_1201_p2 | and_ln102_256_fu_1031_p2);

assign or_ln117_261_fu_1242_p2 = (or_ln117_260_fu_1228_p2 | and_ln102_271_fu_1093_p2);

assign or_ln117_262_fu_1256_p2 = (or_ln117_258_fu_1201_p2 | and_ln102_249_fu_995_p2);

assign or_ln117_263_fu_1270_p2 = (or_ln117_262_fu_1256_p2 | and_ln102_272_fu_1099_p2);

assign or_ln117_264_fu_1284_p2 = (or_ln117_262_fu_1256_p2 | and_ln102_257_fu_1041_p2);

assign or_ln117_265_fu_1298_p2 = (or_ln117_264_fu_1284_p2 | and_ln102_273_fu_1109_p2);

assign or_ln117_fu_760_p2 = (and_ln102_259_fu_690_p2 | and_ln102_250_fu_630_p2);

assign select_ln117_250_fu_774_p3 = ((or_ln117_fu_760_p2[0:0] == 1'b1) ? select_ln117_fu_766_p3 : 2'd3);

assign select_ln117_251_fu_792_p3 = ((and_ln102_246_fu_594_p2[0:0] == 1'b1) ? zext_ln117_27_fu_782_p1 : 3'd4);

assign select_ln117_252_fu_806_p3 = ((or_ln117_241_fu_786_p2[0:0] == 1'b1) ? select_ln117_251_fu_792_p3 : 3'd5);

assign select_ln117_253_fu_820_p3 = ((or_ln117_242_fu_800_p2[0:0] == 1'b1) ? select_ln117_252_fu_806_p3 : 3'd6);

assign select_ln117_254_fu_828_p3 = ((or_ln117_243_fu_814_p2[0:0] == 1'b1) ? select_ln117_253_fu_820_p3 : 3'd7);

assign select_ln117_255_fu_846_p3 = ((and_ln102_fu_576_p2[0:0] == 1'b1) ? zext_ln117_28_fu_836_p1 : 4'd8);

assign select_ln117_256_fu_860_p3 = ((or_ln117_244_fu_840_p2[0:0] == 1'b1) ? select_ln117_255_fu_846_p3 : 4'd9);

assign select_ln117_257_fu_874_p3 = ((or_ln117_245_fu_854_p2[0:0] == 1'b1) ? select_ln117_256_fu_860_p3 : 4'd10);

assign select_ln117_258_fu_888_p3 = ((or_ln117_246_fu_868_p2[0:0] == 1'b1) ? select_ln117_257_fu_874_p3 : 4'd11);

assign select_ln117_259_fu_902_p3 = ((or_ln117_247_fu_882_p2[0:0] == 1'b1) ? select_ln117_258_fu_888_p3 : 4'd12);

assign select_ln117_260_fu_916_p3 = ((or_ln117_248_fu_896_p2[0:0] == 1'b1) ? select_ln117_259_fu_902_p3 : 4'd13);

assign select_ln117_261_fu_930_p3 = ((or_ln117_249_fu_910_p2[0:0] == 1'b1) ? select_ln117_260_fu_916_p3 : 4'd14);

assign select_ln117_262_fu_938_p3 = ((or_ln117_250_fu_924_p2[0:0] == 1'b1) ? select_ln117_261_fu_930_p3 : 4'd15);

assign select_ln117_263_fu_950_p3 = ((icmp_ln86_fu_380_p2[0:0] == 1'b1) ? zext_ln117_29_fu_946_p1 : 5'd16);

assign select_ln117_264_fu_1125_p3 = ((or_ln117_251_fu_1115_p2[0:0] == 1'b1) ? select_ln117_263_reg_1547 : 5'd17);

assign select_ln117_265_fu_1138_p3 = ((or_ln117_252_fu_1120_p2[0:0] == 1'b1) ? select_ln117_264_fu_1125_p3 : 5'd18);

assign select_ln117_266_fu_1151_p3 = ((or_ln117_253_fu_1132_p2[0:0] == 1'b1) ? select_ln117_265_fu_1138_p3 : 5'd19);

assign select_ln117_267_fu_1165_p3 = ((or_ln117_254_fu_1146_p2[0:0] == 1'b1) ? select_ln117_266_fu_1151_p3 : 5'd20);

assign select_ln117_268_fu_1179_p3 = ((or_ln117_255_fu_1159_p2[0:0] == 1'b1) ? select_ln117_267_fu_1165_p3 : 5'd21);

assign select_ln117_269_fu_1193_p3 = ((or_ln117_256_fu_1173_p2[0:0] == 1'b1) ? select_ln117_268_fu_1179_p3 : 5'd22);

assign select_ln117_270_fu_1206_p3 = ((or_ln117_257_fu_1187_p2[0:0] == 1'b1) ? select_ln117_269_fu_1193_p3 : 5'd23);

assign select_ln117_271_fu_1220_p3 = ((or_ln117_258_fu_1201_p2[0:0] == 1'b1) ? select_ln117_270_fu_1206_p3 : 5'd24);

assign select_ln117_272_fu_1234_p3 = ((or_ln117_259_fu_1214_p2[0:0] == 1'b1) ? select_ln117_271_fu_1220_p3 : 5'd25);

assign select_ln117_273_fu_1248_p3 = ((or_ln117_260_fu_1228_p2[0:0] == 1'b1) ? select_ln117_272_fu_1234_p3 : 5'd26);

assign select_ln117_274_fu_1262_p3 = ((or_ln117_261_fu_1242_p2[0:0] == 1'b1) ? select_ln117_273_fu_1248_p3 : 5'd27);

assign select_ln117_275_fu_1276_p3 = ((or_ln117_262_fu_1256_p2[0:0] == 1'b1) ? select_ln117_274_fu_1262_p3 : 5'd28);

assign select_ln117_276_fu_1290_p3 = ((or_ln117_263_fu_1270_p2[0:0] == 1'b1) ? select_ln117_275_fu_1276_p3 : 5'd29);

assign select_ln117_277_fu_1304_p3 = ((or_ln117_264_fu_1284_p2[0:0] == 1'b1) ? select_ln117_276_fu_1290_p3 : 5'd30);

assign select_ln117_fu_766_p3 = ((and_ln102_250_fu_630_p2[0:0] == 1'b1) ? zext_ln117_fu_756_p1 : 2'd2);

assign tmp_fu_398_p4 = {{x_36_val[17:1]}};

assign xor_ln104_123_fu_582_p2 = (icmp_ln86_256_fu_386_p2 ^ 1'd1);

assign xor_ln104_124_fu_968_p2 = (icmp_ln86_257_reg_1465 ^ 1'd1);

assign xor_ln104_125_fu_600_p2 = (icmp_ln86_2033_fu_408_p2 ^ 1'd1);

assign xor_ln104_126_fu_618_p2 = (icmp_ln86_259_fu_414_p2 ^ 1'd1);

assign xor_ln104_127_fu_984_p2 = (icmp_ln86_260_reg_1471 ^ 1'd1);

assign xor_ln104_128_fu_1000_p2 = (icmp_ln86_261_reg_1477 ^ 1'd1);

assign xor_ln104_129_fu_636_p2 = (icmp_ln86_262_fu_432_p2 ^ 1'd1);

assign xor_ln104_130_fu_648_p2 = (icmp_ln86_263_fu_438_p2 ^ 1'd1);

assign xor_ln104_131_fu_660_p2 = (icmp_ln86_264_fu_444_p2 ^ 1'd1);

assign xor_ln104_132_fu_672_p2 = (icmp_ln86_265_fu_450_p2 ^ 1'd1);

assign xor_ln104_133_fu_1016_p2 = (icmp_ln86_266_reg_1483 ^ 1'd1);

assign xor_ln104_134_fu_1026_p2 = (icmp_ln86_267_reg_1489 ^ 1'd1);

assign xor_ln104_135_fu_1036_p2 = (icmp_ln86_268_reg_1495 ^ 1'd1);

assign xor_ln104_136_fu_1046_p2 = (icmp_ln86_269_reg_1501 ^ 1'd1);

assign xor_ln104_fu_958_p2 = (icmp_ln86_reg_1456 ^ 1'd1);

assign xor_ln117_fu_750_p2 = (1'd1 ^ and_ln102_258_fu_678_p2);

assign zext_ln117_27_fu_782_p1 = select_ln117_250_fu_774_p3;

assign zext_ln117_28_fu_836_p1 = select_ln117_254_fu_828_p3;

assign zext_ln117_29_fu_946_p1 = select_ln117_262_fu_938_p3;

assign zext_ln117_fu_756_p1 = xor_ln117_fu_750_p2;

endmodule //my_prj_decision_function_10
