// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_79 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_2_val,
        x_4_val,
        x_7_val,
        x_10_val,
        x_11_val,
        x_12_val,
        x_15_val,
        x_16_val,
        x_18_val,
        x_19_val,
        x_24_val,
        x_25_val,
        x_29_val,
        x_35_val,
        x_44_val,
        x_48_val,
        x_49_val,
        x_50_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_2_val;
input  [17:0] x_4_val;
input  [17:0] x_7_val;
input  [17:0] x_10_val;
input  [17:0] x_11_val;
input  [17:0] x_12_val;
input  [17:0] x_15_val;
input  [17:0] x_16_val;
input  [17:0] x_18_val;
input  [17:0] x_19_val;
input  [17:0] x_24_val;
input  [17:0] x_25_val;
input  [17:0] x_29_val;
input  [17:0] x_35_val;
input  [17:0] x_44_val;
input  [17:0] x_48_val;
input  [17:0] x_49_val;
input  [17:0] x_50_val;
input  [17:0] x_52_val;
output  [12:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_571_fu_420_p2;
reg   [0:0] icmp_ln86_571_reg_1459;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_576_fu_450_p2;
reg   [0:0] icmp_ln86_576_reg_1465;
wire   [0:0] icmp_ln86_577_fu_456_p2;
reg   [0:0] icmp_ln86_577_reg_1470;
wire   [0:0] icmp_ln86_578_fu_462_p2;
reg   [0:0] icmp_ln86_578_reg_1476;
wire   [0:0] icmp_ln86_579_fu_468_p2;
reg   [0:0] icmp_ln86_579_reg_1482;
wire   [0:0] icmp_ln86_588_fu_522_p2;
reg   [0:0] icmp_ln86_588_reg_1488;
wire   [0:0] icmp_ln86_589_fu_528_p2;
reg   [0:0] icmp_ln86_589_reg_1493;
wire   [0:0] icmp_ln86_590_fu_534_p2;
reg   [0:0] icmp_ln86_590_reg_1498;
wire   [0:0] icmp_ln86_591_fu_540_p2;
reg   [0:0] icmp_ln86_591_reg_1503;
wire   [0:0] icmp_ln86_592_fu_546_p2;
reg   [0:0] icmp_ln86_592_reg_1508;
wire   [0:0] icmp_ln86_593_fu_552_p2;
reg   [0:0] icmp_ln86_593_reg_1513;
wire   [0:0] icmp_ln86_594_fu_558_p2;
reg   [0:0] icmp_ln86_594_reg_1518;
wire   [0:0] icmp_ln86_595_fu_564_p2;
reg   [0:0] icmp_ln86_595_reg_1523;
wire   [0:0] and_ln102_697_fu_594_p2;
reg   [0:0] and_ln102_697_reg_1528;
wire   [0:0] and_ln104_101_fu_642_p2;
reg   [0:0] and_ln104_101_reg_1535;
wire   [0:0] and_ln102_701_fu_648_p2;
reg   [0:0] and_ln102_701_reg_1540;
wire   [0:0] and_ln104_104_fu_720_p2;
reg   [0:0] and_ln104_104_reg_1547;
wire   [0:0] or_ln117_506_fu_978_p2;
reg   [0:0] or_ln117_506_reg_1553;
wire   [3:0] select_ln117_562_fu_992_p3;
reg   [3:0] select_ln117_562_reg_1558;
wire   [0:0] or_ln117_508_fu_1000_p2;
reg   [0:0] or_ln117_508_reg_1563;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln86_fu_390_p2;
wire   [0:0] icmp_ln86_567_fu_396_p2;
wire   [0:0] xor_ln104_267_fu_582_p2;
wire   [0:0] icmp_ln86_568_fu_402_p2;
wire   [0:0] xor_ln104_fu_570_p2;
wire   [0:0] xor_ln104_268_fu_600_p2;
wire   [0:0] icmp_ln86_569_fu_408_p2;
wire   [0:0] and_ln102_fu_576_p2;
wire   [0:0] xor_ln104_269_fu_618_p2;
wire   [0:0] icmp_ln86_570_fu_414_p2;
wire   [0:0] and_ln104_fu_588_p2;
wire   [0:0] xor_ln104_270_fu_636_p2;
wire   [0:0] icmp_ln86_572_fu_426_p2;
wire   [0:0] and_ln104_99_fu_606_p2;
wire   [0:0] xor_ln104_272_fu_654_p2;
wire   [0:0] icmp_ln86_573_fu_432_p2;
wire   [0:0] and_ln102_698_fu_612_p2;
wire   [0:0] icmp_ln86_574_fu_438_p2;
wire   [0:0] and_ln104_100_fu_624_p2;
wire   [0:0] icmp_ln86_575_fu_444_p2;
wire   [0:0] and_ln102_699_fu_630_p2;
wire   [0:0] icmp_ln86_580_fu_474_p2;
wire   [0:0] and_ln104_103_fu_660_p2;
wire   [0:0] xor_ln104_280_fu_714_p2;
wire   [0:0] icmp_ln86_581_fu_480_p2;
wire   [0:0] and_ln102_702_fu_666_p2;
wire   [0:0] icmp_ln86_582_fu_486_p2;
wire   [0:0] xor_ln104_273_fu_672_p2;
wire   [0:0] and_ln102_711_fu_732_p2;
wire   [0:0] icmp_ln86_583_fu_492_p2;
wire   [0:0] and_ln102_703_fu_678_p2;
wire   [0:0] icmp_ln86_584_fu_498_p2;
wire   [0:0] xor_ln104_274_fu_684_p2;
wire   [0:0] and_ln102_714_fu_750_p2;
wire   [0:0] icmp_ln86_585_fu_504_p2;
wire   [0:0] and_ln102_704_fu_690_p2;
wire   [0:0] icmp_ln86_586_fu_510_p2;
wire   [0:0] xor_ln104_275_fu_696_p2;
wire   [0:0] and_ln102_717_fu_768_p2;
wire   [0:0] icmp_ln86_587_fu_516_p2;
wire   [0:0] and_ln102_705_fu_702_p2;
wire   [0:0] and_ln102_709_fu_708_p2;
wire   [0:0] and_ln102_710_fu_726_p2;
wire   [0:0] xor_ln117_fu_792_p2;
wire   [0:0] or_ln117_fu_786_p2;
wire   [1:0] zext_ln117_fu_798_p1;
wire   [0:0] or_ln117_494_fu_802_p2;
wire   [0:0] and_ln102_712_fu_738_p2;
wire   [1:0] select_ln117_fu_808_p3;
wire   [1:0] select_ln117_550_fu_822_p3;
wire   [0:0] or_ln117_495_fu_816_p2;
wire   [2:0] zext_ln117_61_fu_830_p1;
wire   [0:0] or_ln117_496_fu_834_p2;
wire   [0:0] and_ln102_713_fu_744_p2;
wire   [2:0] select_ln117_551_fu_840_p3;
wire   [0:0] or_ln117_497_fu_848_p2;
wire   [2:0] select_ln117_552_fu_854_p3;
wire   [0:0] or_ln117_498_fu_862_p2;
wire   [0:0] and_ln102_715_fu_756_p2;
wire   [2:0] select_ln117_553_fu_868_p3;
wire   [2:0] select_ln117_554_fu_882_p3;
wire   [0:0] or_ln117_499_fu_876_p2;
wire   [3:0] zext_ln117_62_fu_890_p1;
wire   [0:0] or_ln117_500_fu_894_p2;
wire   [0:0] and_ln102_716_fu_762_p2;
wire   [3:0] select_ln117_555_fu_900_p3;
wire   [0:0] or_ln117_501_fu_908_p2;
wire   [3:0] select_ln117_556_fu_914_p3;
wire   [0:0] or_ln117_502_fu_922_p2;
wire   [0:0] and_ln102_718_fu_774_p2;
wire   [3:0] select_ln117_557_fu_928_p3;
wire   [0:0] or_ln117_503_fu_936_p2;
wire   [3:0] select_ln117_558_fu_942_p3;
wire   [0:0] or_ln117_504_fu_950_p2;
wire   [0:0] and_ln102_719_fu_780_p2;
wire   [3:0] select_ln117_559_fu_956_p3;
wire   [0:0] or_ln117_505_fu_964_p2;
wire   [3:0] select_ln117_560_fu_970_p3;
wire   [3:0] select_ln117_561_fu_984_p3;
wire   [0:0] xor_ln104_271_fu_1010_p2;
wire   [0:0] and_ln102_700_fu_1006_p2;
wire   [0:0] and_ln104_102_fu_1015_p2;
wire   [0:0] xor_ln104_276_fu_1020_p2;
wire   [0:0] and_ln102_720_fu_1054_p2;
wire   [0:0] and_ln102_706_fu_1025_p2;
wire   [0:0] xor_ln104_277_fu_1030_p2;
wire   [0:0] and_ln102_723_fu_1069_p2;
wire   [0:0] and_ln102_707_fu_1035_p2;
wire   [0:0] xor_ln104_278_fu_1040_p2;
wire   [0:0] and_ln102_726_fu_1085_p2;
wire   [0:0] and_ln102_708_fu_1045_p2;
wire   [0:0] xor_ln104_279_fu_1049_p2;
wire   [0:0] and_ln102_729_fu_1101_p2;
wire   [0:0] and_ln102_721_fu_1059_p2;
wire   [0:0] or_ln117_507_fu_1115_p2;
wire   [4:0] zext_ln117_63_fu_1120_p1;
wire   [0:0] and_ln102_722_fu_1064_p2;
wire   [4:0] select_ln117_563_fu_1123_p3;
wire   [0:0] or_ln117_509_fu_1131_p2;
wire   [4:0] select_ln117_564_fu_1136_p3;
wire   [0:0] or_ln117_510_fu_1143_p2;
wire   [0:0] and_ln102_724_fu_1074_p2;
wire   [4:0] select_ln117_565_fu_1148_p3;
wire   [0:0] or_ln117_511_fu_1156_p2;
wire   [4:0] select_ln117_566_fu_1162_p3;
wire   [0:0] or_ln117_512_fu_1170_p2;
wire   [0:0] and_ln102_725_fu_1080_p2;
wire   [4:0] select_ln117_567_fu_1175_p3;
wire   [0:0] or_ln117_513_fu_1183_p2;
wire   [4:0] select_ln117_568_fu_1189_p3;
wire   [0:0] or_ln117_514_fu_1197_p2;
wire   [0:0] and_ln102_727_fu_1090_p2;
wire   [4:0] select_ln117_569_fu_1203_p3;
wire   [0:0] or_ln117_515_fu_1211_p2;
wire   [4:0] select_ln117_570_fu_1217_p3;
wire   [0:0] or_ln117_516_fu_1225_p2;
wire   [0:0] and_ln102_728_fu_1096_p2;
wire   [4:0] select_ln117_571_fu_1229_p3;
wire   [0:0] or_ln117_517_fu_1237_p2;
wire   [4:0] select_ln117_572_fu_1243_p3;
wire   [0:0] or_ln117_518_fu_1251_p2;
wire   [0:0] and_ln102_730_fu_1106_p2;
wire   [4:0] select_ln117_573_fu_1257_p3;
wire   [0:0] or_ln117_519_fu_1265_p2;
wire   [4:0] select_ln117_574_fu_1271_p3;
wire   [0:0] or_ln117_520_fu_1279_p2;
wire   [0:0] and_ln102_731_fu_1111_p2;
wire   [4:0] select_ln117_575_fu_1284_p3;
wire   [0:0] or_ln117_521_fu_1292_p2;
wire   [4:0] select_ln117_576_fu_1298_p3;
wire   [12:0] tmp_fu_1319_p63;
wire   [4:0] tmp_fu_1319_p64;
wire   [0:0] or_ln117_522_fu_1306_p2;
wire   [12:0] tmp_fu_1319_p65;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] tmp_fu_1319_p1;
wire   [4:0] tmp_fu_1319_p3;
wire   [4:0] tmp_fu_1319_p5;
wire   [4:0] tmp_fu_1319_p7;
wire   [4:0] tmp_fu_1319_p9;
wire   [4:0] tmp_fu_1319_p11;
wire   [4:0] tmp_fu_1319_p13;
wire   [4:0] tmp_fu_1319_p15;
wire   [4:0] tmp_fu_1319_p17;
wire   [4:0] tmp_fu_1319_p19;
wire   [4:0] tmp_fu_1319_p21;
wire   [4:0] tmp_fu_1319_p23;
wire   [4:0] tmp_fu_1319_p25;
wire   [4:0] tmp_fu_1319_p27;
wire   [4:0] tmp_fu_1319_p29;
wire   [4:0] tmp_fu_1319_p31;
wire  signed [4:0] tmp_fu_1319_p33;
wire  signed [4:0] tmp_fu_1319_p35;
wire  signed [4:0] tmp_fu_1319_p37;
wire  signed [4:0] tmp_fu_1319_p39;
wire  signed [4:0] tmp_fu_1319_p41;
wire  signed [4:0] tmp_fu_1319_p43;
wire  signed [4:0] tmp_fu_1319_p45;
wire  signed [4:0] tmp_fu_1319_p47;
wire  signed [4:0] tmp_fu_1319_p49;
wire  signed [4:0] tmp_fu_1319_p51;
wire  signed [4:0] tmp_fu_1319_p53;
wire  signed [4:0] tmp_fu_1319_p55;
wire  signed [4:0] tmp_fu_1319_p57;
wire  signed [4:0] tmp_fu_1319_p59;
wire  signed [4:0] tmp_fu_1319_p61;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_63_5_13_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 13 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 13 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 13 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 13 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 13 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 13 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 13 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 13 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 13 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 13 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 13 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 13 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 13 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 13 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 13 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 13 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 13 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 13 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 13 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 13 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 13 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 13 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 13 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 13 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 13 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 13 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 13 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 13 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 13 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 13 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 13 ),
    .def_WIDTH( 13 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 13 ))
sparsemux_63_5_13_1_1_U541(
    .din0(13'd758),
    .din1(13'd148),
    .din2(13'd14),
    .din3(13'd8130),
    .din4(13'd7708),
    .din5(13'd497),
    .din6(13'd1127),
    .din7(13'd240),
    .din8(13'd7804),
    .din9(13'd8070),
    .din10(13'd145),
    .din11(13'd8172),
    .din12(13'd7937),
    .din13(13'd7844),
    .din14(13'd8036),
    .din15(13'd8166),
    .din16(13'd7792),
    .din17(13'd580),
    .din18(13'd7732),
    .din19(13'd7889),
    .din20(13'd2705),
    .din21(13'd380),
    .din22(13'd7830),
    .din23(13'd7706),
    .din24(13'd362),
    .din25(13'd7778),
    .din26(13'd8044),
    .din27(13'd1461),
    .din28(13'd8183),
    .din29(13'd7687),
    .din30(13'd7914),
    .def(tmp_fu_1319_p63),
    .sel(tmp_fu_1319_p64),
    .dout(tmp_fu_1319_p65)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln102_697_reg_1528 <= and_ln102_697_fu_594_p2;
        and_ln102_701_reg_1540 <= and_ln102_701_fu_648_p2;
        and_ln104_101_reg_1535 <= and_ln104_101_fu_642_p2;
        and_ln104_104_reg_1547 <= and_ln104_104_fu_720_p2;
        icmp_ln86_571_reg_1459 <= icmp_ln86_571_fu_420_p2;
        icmp_ln86_576_reg_1465 <= icmp_ln86_576_fu_450_p2;
        icmp_ln86_577_reg_1470 <= icmp_ln86_577_fu_456_p2;
        icmp_ln86_578_reg_1476 <= icmp_ln86_578_fu_462_p2;
        icmp_ln86_579_reg_1482 <= icmp_ln86_579_fu_468_p2;
        icmp_ln86_588_reg_1488 <= icmp_ln86_588_fu_522_p2;
        icmp_ln86_589_reg_1493 <= icmp_ln86_589_fu_528_p2;
        icmp_ln86_590_reg_1498 <= icmp_ln86_590_fu_534_p2;
        icmp_ln86_591_reg_1503 <= icmp_ln86_591_fu_540_p2;
        icmp_ln86_592_reg_1508 <= icmp_ln86_592_fu_546_p2;
        icmp_ln86_593_reg_1513 <= icmp_ln86_593_fu_552_p2;
        icmp_ln86_594_reg_1518 <= icmp_ln86_594_fu_558_p2;
        icmp_ln86_595_reg_1523 <= icmp_ln86_595_fu_564_p2;
        or_ln117_506_reg_1553 <= or_ln117_506_fu_978_p2;
        or_ln117_508_reg_1563 <= or_ln117_508_fu_1000_p2;
        select_ln117_562_reg_1558 <= select_ln117_562_fu_992_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln102_697_fu_594_p2 = (xor_ln104_fu_570_p2 & icmp_ln86_568_fu_402_p2);

assign and_ln102_698_fu_612_p2 = (icmp_ln86_569_fu_408_p2 & and_ln102_fu_576_p2);

assign and_ln102_699_fu_630_p2 = (icmp_ln86_570_fu_414_p2 & and_ln104_fu_588_p2);

assign and_ln102_700_fu_1006_p2 = (icmp_ln86_571_reg_1459 & and_ln102_697_reg_1528);

assign and_ln102_701_fu_648_p2 = (icmp_ln86_572_fu_426_p2 & and_ln104_99_fu_606_p2);

assign and_ln102_702_fu_666_p2 = (icmp_ln86_573_fu_432_p2 & and_ln102_698_fu_612_p2);

assign and_ln102_703_fu_678_p2 = (icmp_ln86_574_fu_438_p2 & and_ln104_100_fu_624_p2);

assign and_ln102_704_fu_690_p2 = (icmp_ln86_575_fu_444_p2 & and_ln102_699_fu_630_p2);

assign and_ln102_705_fu_702_p2 = (icmp_ln86_576_fu_450_p2 & and_ln104_101_fu_642_p2);

assign and_ln102_706_fu_1025_p2 = (icmp_ln86_577_reg_1470 & and_ln102_700_fu_1006_p2);

assign and_ln102_707_fu_1035_p2 = (icmp_ln86_578_reg_1476 & and_ln104_102_fu_1015_p2);

assign and_ln102_708_fu_1045_p2 = (icmp_ln86_579_reg_1482 & and_ln102_701_reg_1540);

assign and_ln102_709_fu_708_p2 = (icmp_ln86_580_fu_474_p2 & and_ln104_103_fu_660_p2);

assign and_ln102_710_fu_726_p2 = (icmp_ln86_581_fu_480_p2 & and_ln102_702_fu_666_p2);

assign and_ln102_711_fu_732_p2 = (xor_ln104_273_fu_672_p2 & icmp_ln86_582_fu_486_p2);

assign and_ln102_712_fu_738_p2 = (and_ln102_711_fu_732_p2 & and_ln102_698_fu_612_p2);

assign and_ln102_713_fu_744_p2 = (icmp_ln86_583_fu_492_p2 & and_ln102_703_fu_678_p2);

assign and_ln102_714_fu_750_p2 = (xor_ln104_274_fu_684_p2 & icmp_ln86_584_fu_498_p2);

assign and_ln102_715_fu_756_p2 = (and_ln104_100_fu_624_p2 & and_ln102_714_fu_750_p2);

assign and_ln102_716_fu_762_p2 = (icmp_ln86_585_fu_504_p2 & and_ln102_704_fu_690_p2);

assign and_ln102_717_fu_768_p2 = (xor_ln104_275_fu_696_p2 & icmp_ln86_586_fu_510_p2);

assign and_ln102_718_fu_774_p2 = (and_ln102_717_fu_768_p2 & and_ln102_699_fu_630_p2);

assign and_ln102_719_fu_780_p2 = (icmp_ln86_587_fu_516_p2 & and_ln102_705_fu_702_p2);

assign and_ln102_720_fu_1054_p2 = (xor_ln104_276_fu_1020_p2 & icmp_ln86_588_reg_1488);

assign and_ln102_721_fu_1059_p2 = (and_ln104_101_reg_1535 & and_ln102_720_fu_1054_p2);

assign and_ln102_722_fu_1064_p2 = (icmp_ln86_589_reg_1493 & and_ln102_706_fu_1025_p2);

assign and_ln102_723_fu_1069_p2 = (xor_ln104_277_fu_1030_p2 & icmp_ln86_590_reg_1498);

assign and_ln102_724_fu_1074_p2 = (and_ln102_723_fu_1069_p2 & and_ln102_700_fu_1006_p2);

assign and_ln102_725_fu_1080_p2 = (icmp_ln86_591_reg_1503 & and_ln102_707_fu_1035_p2);

assign and_ln102_726_fu_1085_p2 = (xor_ln104_278_fu_1040_p2 & icmp_ln86_592_reg_1508);

assign and_ln102_727_fu_1090_p2 = (and_ln104_102_fu_1015_p2 & and_ln102_726_fu_1085_p2);

assign and_ln102_728_fu_1096_p2 = (icmp_ln86_593_reg_1513 & and_ln102_708_fu_1045_p2);

assign and_ln102_729_fu_1101_p2 = (xor_ln104_279_fu_1049_p2 & icmp_ln86_594_reg_1518);

assign and_ln102_730_fu_1106_p2 = (and_ln102_729_fu_1101_p2 & and_ln102_701_reg_1540);

assign and_ln102_731_fu_1111_p2 = (icmp_ln86_595_reg_1523 & and_ln104_104_reg_1547);

assign and_ln102_fu_576_p2 = (icmp_ln86_fu_390_p2 & icmp_ln86_567_fu_396_p2);

assign and_ln104_100_fu_624_p2 = (xor_ln104_269_fu_618_p2 & and_ln102_fu_576_p2);

assign and_ln104_101_fu_642_p2 = (xor_ln104_270_fu_636_p2 & and_ln104_fu_588_p2);

assign and_ln104_102_fu_1015_p2 = (xor_ln104_271_fu_1010_p2 & and_ln102_697_reg_1528);

assign and_ln104_103_fu_660_p2 = (xor_ln104_272_fu_654_p2 & and_ln104_99_fu_606_p2);

assign and_ln104_104_fu_720_p2 = (xor_ln104_280_fu_714_p2 & and_ln104_103_fu_660_p2);

assign and_ln104_99_fu_606_p2 = (xor_ln104_fu_570_p2 & xor_ln104_268_fu_600_p2);

assign and_ln104_fu_588_p2 = (xor_ln104_267_fu_582_p2 & icmp_ln86_fu_390_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((or_ln117_522_fu_1306_p2[0:0] == 1'b1) ? tmp_fu_1319_p65 : 13'd0);

assign icmp_ln86_567_fu_396_p2 = (($signed(x_52_val) < $signed(18'd37377)) ? 1'b1 : 1'b0);

assign icmp_ln86_568_fu_402_p2 = (($signed(x_1_val) < $signed(18'd12674)) ? 1'b1 : 1'b0);

assign icmp_ln86_569_fu_408_p2 = (($signed(x_50_val) < $signed(18'd87978)) ? 1'b1 : 1'b0);

assign icmp_ln86_570_fu_414_p2 = (($signed(x_11_val) < $signed(18'd709)) ? 1'b1 : 1'b0);

assign icmp_ln86_571_fu_420_p2 = (($signed(x_35_val) < $signed(18'd37)) ? 1'b1 : 1'b0);

assign icmp_ln86_572_fu_426_p2 = (($signed(x_10_val) < $signed(18'd821)) ? 1'b1 : 1'b0);

assign icmp_ln86_573_fu_432_p2 = (($signed(x_50_val) < $signed(18'd83570)) ? 1'b1 : 1'b0);

assign icmp_ln86_574_fu_438_p2 = (($signed(x_50_val) < $signed(18'd89726)) ? 1'b1 : 1'b0);

assign icmp_ln86_575_fu_444_p2 = (($signed(x_7_val) < $signed(18'd6732)) ? 1'b1 : 1'b0);

assign icmp_ln86_576_fu_450_p2 = (($signed(x_15_val) < $signed(18'd6)) ? 1'b1 : 1'b0);

assign icmp_ln86_577_fu_456_p2 = (($signed(x_4_val) < $signed(18'd43761)) ? 1'b1 : 1'b0);

assign icmp_ln86_578_fu_462_p2 = (($signed(x_49_val) < $signed(18'd86459)) ? 1'b1 : 1'b0);

assign icmp_ln86_579_fu_468_p2 = (($signed(x_12_val) < $signed(18'd258851)) ? 1'b1 : 1'b0);

assign icmp_ln86_580_fu_474_p2 = (($signed(x_4_val) < $signed(18'd40137)) ? 1'b1 : 1'b0);

assign icmp_ln86_581_fu_480_p2 = (($signed(x_25_val) < $signed(18'd241)) ? 1'b1 : 1'b0);

assign icmp_ln86_582_fu_486_p2 = (($signed(x_18_val) < $signed(18'd3061)) ? 1'b1 : 1'b0);

assign icmp_ln86_583_fu_492_p2 = (($signed(x_50_val) < $signed(18'd89366)) ? 1'b1 : 1'b0);

assign icmp_ln86_584_fu_498_p2 = (($signed(x_1_val) < $signed(18'd233824)) ? 1'b1 : 1'b0);

assign icmp_ln86_585_fu_504_p2 = (($signed(x_7_val) < $signed(18'd4124)) ? 1'b1 : 1'b0);

assign icmp_ln86_586_fu_510_p2 = (($signed(x_24_val) < $signed(18'd350)) ? 1'b1 : 1'b0);

assign icmp_ln86_587_fu_516_p2 = (($signed(x_19_val) < $signed(18'd2941)) ? 1'b1 : 1'b0);

assign icmp_ln86_588_fu_522_p2 = (($signed(x_16_val) < $signed(18'd117)) ? 1'b1 : 1'b0);

assign icmp_ln86_589_fu_528_p2 = (($signed(x_2_val) < $signed(18'd261142)) ? 1'b1 : 1'b0);

assign icmp_ln86_590_fu_534_p2 = (($signed(x_48_val) < $signed(18'd93087)) ? 1'b1 : 1'b0);

assign icmp_ln86_591_fu_540_p2 = (($signed(x_11_val) < $signed(18'd363)) ? 1'b1 : 1'b0);

assign icmp_ln86_592_fu_546_p2 = (($signed(x_11_val) < $signed(18'd992)) ? 1'b1 : 1'b0);

assign icmp_ln86_593_fu_552_p2 = (($signed(x_18_val) < $signed(18'd1343)) ? 1'b1 : 1'b0);

assign icmp_ln86_594_fu_558_p2 = (($signed(x_12_val) < $signed(18'd258857)) ? 1'b1 : 1'b0);

assign icmp_ln86_595_fu_564_p2 = (($signed(x_44_val) < $signed(18'd24)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_390_p2 = (($signed(x_29_val) < $signed(18'd7665)) ? 1'b1 : 1'b0);

assign or_ln117_494_fu_802_p2 = (and_ln102_709_fu_708_p2 | and_ln102_702_fu_666_p2);

assign or_ln117_495_fu_816_p2 = (or_ln117_494_fu_802_p2 | and_ln102_712_fu_738_p2);

assign or_ln117_496_fu_834_p2 = (and_ln102_709_fu_708_p2 | and_ln102_698_fu_612_p2);

assign or_ln117_497_fu_848_p2 = (or_ln117_496_fu_834_p2 | and_ln102_713_fu_744_p2);

assign or_ln117_498_fu_862_p2 = (or_ln117_496_fu_834_p2 | and_ln102_703_fu_678_p2);

assign or_ln117_499_fu_876_p2 = (or_ln117_498_fu_862_p2 | and_ln102_715_fu_756_p2);

assign or_ln117_500_fu_894_p2 = (and_ln102_fu_576_p2 | and_ln102_709_fu_708_p2);

assign or_ln117_501_fu_908_p2 = (or_ln117_500_fu_894_p2 | and_ln102_716_fu_762_p2);

assign or_ln117_502_fu_922_p2 = (or_ln117_500_fu_894_p2 | and_ln102_704_fu_690_p2);

assign or_ln117_503_fu_936_p2 = (or_ln117_502_fu_922_p2 | and_ln102_718_fu_774_p2);

assign or_ln117_504_fu_950_p2 = (or_ln117_500_fu_894_p2 | and_ln102_699_fu_630_p2);

assign or_ln117_505_fu_964_p2 = (or_ln117_504_fu_950_p2 | and_ln102_719_fu_780_p2);

assign or_ln117_506_fu_978_p2 = (or_ln117_504_fu_950_p2 | and_ln102_705_fu_702_p2);

assign or_ln117_507_fu_1115_p2 = (or_ln117_506_reg_1553 | and_ln102_721_fu_1059_p2);

assign or_ln117_508_fu_1000_p2 = (icmp_ln86_fu_390_p2 | and_ln102_709_fu_708_p2);

assign or_ln117_509_fu_1131_p2 = (or_ln117_508_reg_1563 | and_ln102_722_fu_1064_p2);

assign or_ln117_510_fu_1143_p2 = (or_ln117_508_reg_1563 | and_ln102_706_fu_1025_p2);

assign or_ln117_511_fu_1156_p2 = (or_ln117_510_fu_1143_p2 | and_ln102_724_fu_1074_p2);

assign or_ln117_512_fu_1170_p2 = (or_ln117_508_reg_1563 | and_ln102_700_fu_1006_p2);

assign or_ln117_513_fu_1183_p2 = (or_ln117_512_fu_1170_p2 | and_ln102_725_fu_1080_p2);

assign or_ln117_514_fu_1197_p2 = (or_ln117_512_fu_1170_p2 | and_ln102_707_fu_1035_p2);

assign or_ln117_515_fu_1211_p2 = (or_ln117_514_fu_1197_p2 | and_ln102_727_fu_1090_p2);

assign or_ln117_516_fu_1225_p2 = (or_ln117_508_reg_1563 | and_ln102_697_reg_1528);

assign or_ln117_517_fu_1237_p2 = (or_ln117_516_fu_1225_p2 | and_ln102_728_fu_1096_p2);

assign or_ln117_518_fu_1251_p2 = (or_ln117_516_fu_1225_p2 | and_ln102_708_fu_1045_p2);

assign or_ln117_519_fu_1265_p2 = (or_ln117_518_fu_1251_p2 | and_ln102_730_fu_1106_p2);

assign or_ln117_520_fu_1279_p2 = (or_ln117_516_fu_1225_p2 | and_ln102_701_reg_1540);

assign or_ln117_521_fu_1292_p2 = (or_ln117_520_fu_1279_p2 | and_ln102_731_fu_1111_p2);

assign or_ln117_522_fu_1306_p2 = (or_ln117_520_fu_1279_p2 | and_ln104_104_reg_1547);

assign or_ln117_fu_786_p2 = (and_ln102_710_fu_726_p2 | and_ln102_709_fu_708_p2);

assign select_ln117_550_fu_822_p3 = ((or_ln117_494_fu_802_p2[0:0] == 1'b1) ? select_ln117_fu_808_p3 : 2'd3);

assign select_ln117_551_fu_840_p3 = ((or_ln117_495_fu_816_p2[0:0] == 1'b1) ? zext_ln117_61_fu_830_p1 : 3'd4);

assign select_ln117_552_fu_854_p3 = ((or_ln117_496_fu_834_p2[0:0] == 1'b1) ? select_ln117_551_fu_840_p3 : 3'd5);

assign select_ln117_553_fu_868_p3 = ((or_ln117_497_fu_848_p2[0:0] == 1'b1) ? select_ln117_552_fu_854_p3 : 3'd6);

assign select_ln117_554_fu_882_p3 = ((or_ln117_498_fu_862_p2[0:0] == 1'b1) ? select_ln117_553_fu_868_p3 : 3'd7);

assign select_ln117_555_fu_900_p3 = ((or_ln117_499_fu_876_p2[0:0] == 1'b1) ? zext_ln117_62_fu_890_p1 : 4'd8);

assign select_ln117_556_fu_914_p3 = ((or_ln117_500_fu_894_p2[0:0] == 1'b1) ? select_ln117_555_fu_900_p3 : 4'd9);

assign select_ln117_557_fu_928_p3 = ((or_ln117_501_fu_908_p2[0:0] == 1'b1) ? select_ln117_556_fu_914_p3 : 4'd10);

assign select_ln117_558_fu_942_p3 = ((or_ln117_502_fu_922_p2[0:0] == 1'b1) ? select_ln117_557_fu_928_p3 : 4'd11);

assign select_ln117_559_fu_956_p3 = ((or_ln117_503_fu_936_p2[0:0] == 1'b1) ? select_ln117_558_fu_942_p3 : 4'd12);

assign select_ln117_560_fu_970_p3 = ((or_ln117_504_fu_950_p2[0:0] == 1'b1) ? select_ln117_559_fu_956_p3 : 4'd13);

assign select_ln117_561_fu_984_p3 = ((or_ln117_505_fu_964_p2[0:0] == 1'b1) ? select_ln117_560_fu_970_p3 : 4'd14);

assign select_ln117_562_fu_992_p3 = ((or_ln117_506_fu_978_p2[0:0] == 1'b1) ? select_ln117_561_fu_984_p3 : 4'd15);

assign select_ln117_563_fu_1123_p3 = ((or_ln117_507_fu_1115_p2[0:0] == 1'b1) ? zext_ln117_63_fu_1120_p1 : 5'd16);

assign select_ln117_564_fu_1136_p3 = ((or_ln117_508_reg_1563[0:0] == 1'b1) ? select_ln117_563_fu_1123_p3 : 5'd17);

assign select_ln117_565_fu_1148_p3 = ((or_ln117_509_fu_1131_p2[0:0] == 1'b1) ? select_ln117_564_fu_1136_p3 : 5'd18);

assign select_ln117_566_fu_1162_p3 = ((or_ln117_510_fu_1143_p2[0:0] == 1'b1) ? select_ln117_565_fu_1148_p3 : 5'd19);

assign select_ln117_567_fu_1175_p3 = ((or_ln117_511_fu_1156_p2[0:0] == 1'b1) ? select_ln117_566_fu_1162_p3 : 5'd20);

assign select_ln117_568_fu_1189_p3 = ((or_ln117_512_fu_1170_p2[0:0] == 1'b1) ? select_ln117_567_fu_1175_p3 : 5'd21);

assign select_ln117_569_fu_1203_p3 = ((or_ln117_513_fu_1183_p2[0:0] == 1'b1) ? select_ln117_568_fu_1189_p3 : 5'd22);

assign select_ln117_570_fu_1217_p3 = ((or_ln117_514_fu_1197_p2[0:0] == 1'b1) ? select_ln117_569_fu_1203_p3 : 5'd23);

assign select_ln117_571_fu_1229_p3 = ((or_ln117_515_fu_1211_p2[0:0] == 1'b1) ? select_ln117_570_fu_1217_p3 : 5'd24);

assign select_ln117_572_fu_1243_p3 = ((or_ln117_516_fu_1225_p2[0:0] == 1'b1) ? select_ln117_571_fu_1229_p3 : 5'd25);

assign select_ln117_573_fu_1257_p3 = ((or_ln117_517_fu_1237_p2[0:0] == 1'b1) ? select_ln117_572_fu_1243_p3 : 5'd26);

assign select_ln117_574_fu_1271_p3 = ((or_ln117_518_fu_1251_p2[0:0] == 1'b1) ? select_ln117_573_fu_1257_p3 : 5'd27);

assign select_ln117_575_fu_1284_p3 = ((or_ln117_519_fu_1265_p2[0:0] == 1'b1) ? select_ln117_574_fu_1271_p3 : 5'd28);

assign select_ln117_576_fu_1298_p3 = ((or_ln117_520_fu_1279_p2[0:0] == 1'b1) ? select_ln117_575_fu_1284_p3 : 5'd29);

assign select_ln117_fu_808_p3 = ((or_ln117_fu_786_p2[0:0] == 1'b1) ? zext_ln117_fu_798_p1 : 2'd2);

assign tmp_fu_1319_p63 = 'bx;

assign tmp_fu_1319_p64 = ((or_ln117_521_fu_1292_p2[0:0] == 1'b1) ? select_ln117_576_fu_1298_p3 : 5'd30);

assign xor_ln104_267_fu_582_p2 = (icmp_ln86_567_fu_396_p2 ^ 1'd1);

assign xor_ln104_268_fu_600_p2 = (icmp_ln86_568_fu_402_p2 ^ 1'd1);

assign xor_ln104_269_fu_618_p2 = (icmp_ln86_569_fu_408_p2 ^ 1'd1);

assign xor_ln104_270_fu_636_p2 = (icmp_ln86_570_fu_414_p2 ^ 1'd1);

assign xor_ln104_271_fu_1010_p2 = (icmp_ln86_571_reg_1459 ^ 1'd1);

assign xor_ln104_272_fu_654_p2 = (icmp_ln86_572_fu_426_p2 ^ 1'd1);

assign xor_ln104_273_fu_672_p2 = (icmp_ln86_573_fu_432_p2 ^ 1'd1);

assign xor_ln104_274_fu_684_p2 = (icmp_ln86_574_fu_438_p2 ^ 1'd1);

assign xor_ln104_275_fu_696_p2 = (icmp_ln86_575_fu_444_p2 ^ 1'd1);

assign xor_ln104_276_fu_1020_p2 = (icmp_ln86_576_reg_1465 ^ 1'd1);

assign xor_ln104_277_fu_1030_p2 = (icmp_ln86_577_reg_1470 ^ 1'd1);

assign xor_ln104_278_fu_1040_p2 = (icmp_ln86_578_reg_1476 ^ 1'd1);

assign xor_ln104_279_fu_1049_p2 = (icmp_ln86_579_reg_1482 ^ 1'd1);

assign xor_ln104_280_fu_714_p2 = (icmp_ln86_580_fu_474_p2 ^ 1'd1);

assign xor_ln104_fu_570_p2 = (icmp_ln86_fu_390_p2 ^ 1'd1);

assign xor_ln117_fu_792_p2 = (1'd1 ^ and_ln102_709_fu_708_p2);

assign zext_ln117_61_fu_830_p1 = select_ln117_550_fu_822_p3;

assign zext_ln117_62_fu_890_p1 = select_ln117_554_fu_882_p3;

assign zext_ln117_63_fu_1120_p1 = select_ln117_562_reg_1558;

assign zext_ln117_fu_798_p1 = xor_ln117_fu_792_p2;

endmodule //my_prj_decision_function_79
