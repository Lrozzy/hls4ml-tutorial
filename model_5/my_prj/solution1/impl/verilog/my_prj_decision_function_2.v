// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_12_val,
        x_14_val,
        x_15_val,
        x_16_val,
        x_17_val,
        x_19_val,
        x_21_val,
        x_23_val,
        x_26_val,
        x_27_val,
        x_29_val,
        x_33_val,
        x_37_val,
        x_38_val,
        x_39_val,
        x_44_val,
        x_46_val,
        x_47_val,
        x_48_val,
        x_49_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_12_val;
input  [17:0] x_14_val;
input  [17:0] x_15_val;
input  [17:0] x_16_val;
input  [17:0] x_17_val;
input  [17:0] x_19_val;
input  [17:0] x_21_val;
input  [17:0] x_23_val;
input  [17:0] x_26_val;
input  [17:0] x_27_val;
input  [17:0] x_29_val;
input  [17:0] x_33_val;
input  [17:0] x_37_val;
input  [17:0] x_38_val;
input  [17:0] x_39_val;
input  [17:0] x_44_val;
input  [17:0] x_46_val;
input  [17:0] x_47_val;
input  [17:0] x_48_val;
input  [17:0] x_49_val;
input  [17:0] x_52_val;
output  [12:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_414_p2;
reg   [0:0] icmp_ln86_reg_1440;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_56_fu_426_p2;
reg   [0:0] icmp_ln86_56_reg_1448;
wire   [0:0] icmp_ln86_59_fu_444_p2;
reg   [0:0] icmp_ln86_59_reg_1454;
wire   [0:0] icmp_ln86_60_fu_450_p2;
reg   [0:0] icmp_ln86_60_reg_1460;
wire   [0:0] icmp_ln86_1399_fu_490_p2;
reg   [0:0] icmp_ln86_1399_reg_1466;
wire   [0:0] icmp_ln86_66_fu_496_p2;
reg   [0:0] icmp_ln86_66_reg_1472;
wire   [0:0] icmp_ln86_67_fu_502_p2;
reg   [0:0] icmp_ln86_67_reg_1478;
wire   [0:0] icmp_ln86_1400_fu_566_p2;
reg   [0:0] icmp_ln86_1400_reg_1484;
wire   [0:0] icmp_ln86_77_fu_572_p2;
reg   [0:0] icmp_ln86_77_reg_1489;
wire   [0:0] icmp_ln86_78_fu_578_p2;
reg   [0:0] icmp_ln86_78_reg_1494;
wire   [0:0] icmp_ln86_79_fu_584_p2;
reg   [0:0] icmp_ln86_79_reg_1499;
wire   [0:0] icmp_ln86_80_fu_590_p2;
reg   [0:0] icmp_ln86_80_reg_1504;
wire   [0:0] icmp_ln86_81_fu_596_p2;
reg   [0:0] icmp_ln86_81_reg_1509;
wire   [0:0] icmp_ln86_82_fu_602_p2;
reg   [0:0] icmp_ln86_82_reg_1514;
wire   [4:0] select_ln117_67_fu_982_p3;
reg   [4:0] select_ln117_67_reg_1519;
wire    ap_block_pp0_stage0;
wire   [14:0] tmp_fu_480_p4;
wire   [13:0] tmp_25_fu_556_p4;
wire   [0:0] icmp_ln86_55_fu_420_p2;
wire   [0:0] xor_ln104_27_fu_614_p2;
wire   [0:0] icmp_ln86_57_fu_432_p2;
wire   [0:0] and_ln102_fu_608_p2;
wire   [0:0] xor_ln104_29_fu_632_p2;
wire   [0:0] icmp_ln86_58_fu_438_p2;
wire   [0:0] and_ln104_fu_620_p2;
wire   [0:0] xor_ln104_30_fu_650_p2;
wire   [0:0] icmp_ln86_61_fu_456_p2;
wire   [0:0] and_ln102_54_fu_626_p2;
wire   [0:0] icmp_ln86_62_fu_462_p2;
wire   [0:0] and_ln104_12_fu_638_p2;
wire   [0:0] icmp_ln86_63_fu_468_p2;
wire   [0:0] and_ln102_55_fu_644_p2;
wire   [0:0] icmp_ln86_64_fu_474_p2;
wire   [0:0] and_ln104_13_fu_656_p2;
wire   [0:0] icmp_ln86_68_fu_508_p2;
wire   [0:0] and_ln102_57_fu_662_p2;
wire   [0:0] icmp_ln86_69_fu_514_p2;
wire   [0:0] xor_ln104_33_fu_668_p2;
wire   [0:0] and_ln102_80_fu_716_p2;
wire   [0:0] icmp_ln86_70_fu_520_p2;
wire   [0:0] and_ln102_58_fu_674_p2;
wire   [0:0] icmp_ln86_71_fu_526_p2;
wire   [0:0] xor_ln104_34_fu_680_p2;
wire   [0:0] and_ln102_81_fu_734_p2;
wire   [0:0] icmp_ln86_72_fu_532_p2;
wire   [0:0] and_ln102_59_fu_686_p2;
wire   [0:0] icmp_ln86_73_fu_538_p2;
wire   [0:0] xor_ln104_35_fu_692_p2;
wire   [0:0] and_ln102_82_fu_752_p2;
wire   [0:0] icmp_ln86_74_fu_544_p2;
wire   [0:0] and_ln102_60_fu_698_p2;
wire   [0:0] icmp_ln86_75_fu_550_p2;
wire   [0:0] xor_ln104_36_fu_704_p2;
wire   [0:0] and_ln102_83_fu_770_p2;
wire   [0:0] and_ln102_65_fu_710_p2;
wire   [0:0] xor_ln117_fu_782_p2;
wire   [0:0] and_ln102_66_fu_722_p2;
wire   [1:0] zext_ln117_fu_788_p1;
wire   [0:0] or_ln117_fu_792_p2;
wire   [1:0] select_ln117_fu_798_p3;
wire   [1:0] select_ln117_54_fu_806_p3;
wire   [0:0] and_ln102_67_fu_728_p2;
wire   [2:0] zext_ln117_5_fu_814_p1;
wire   [0:0] or_ln117_55_fu_818_p2;
wire   [2:0] select_ln117_55_fu_824_p3;
wire   [0:0] or_ln117_56_fu_832_p2;
wire   [0:0] and_ln102_68_fu_740_p2;
wire   [2:0] select_ln117_56_fu_838_p3;
wire   [0:0] or_ln117_57_fu_846_p2;
wire   [2:0] select_ln117_57_fu_852_p3;
wire   [2:0] select_ln117_58_fu_860_p3;
wire   [0:0] and_ln102_69_fu_746_p2;
wire   [3:0] zext_ln117_6_fu_868_p1;
wire   [0:0] or_ln117_58_fu_872_p2;
wire   [3:0] select_ln117_59_fu_878_p3;
wire   [0:0] or_ln117_59_fu_886_p2;
wire   [0:0] and_ln102_70_fu_758_p2;
wire   [3:0] select_ln117_60_fu_892_p3;
wire   [0:0] or_ln117_60_fu_900_p2;
wire   [3:0] select_ln117_61_fu_906_p3;
wire   [0:0] or_ln117_61_fu_914_p2;
wire   [0:0] and_ln102_71_fu_764_p2;
wire   [3:0] select_ln117_62_fu_920_p3;
wire   [0:0] or_ln117_62_fu_928_p2;
wire   [3:0] select_ln117_63_fu_934_p3;
wire   [0:0] or_ln117_63_fu_942_p2;
wire   [0:0] and_ln102_72_fu_776_p2;
wire   [3:0] select_ln117_64_fu_948_p3;
wire   [0:0] or_ln117_64_fu_956_p2;
wire   [3:0] select_ln117_65_fu_962_p3;
wire   [3:0] select_ln117_66_fu_970_p3;
wire   [4:0] zext_ln117_7_fu_978_p1;
wire   [0:0] xor_ln104_fu_990_p2;
wire   [0:0] xor_ln104_28_fu_1000_p2;
wire   [0:0] and_ln102_53_fu_995_p2;
wire   [0:0] xor_ln104_31_fu_1011_p2;
wire   [0:0] and_ln104_11_fu_1005_p2;
wire   [0:0] xor_ln104_32_fu_1027_p2;
wire   [0:0] and_ln104_14_fu_1016_p2;
wire   [0:0] and_ln102_56_fu_1022_p2;
wire   [0:0] and_ln104_15_fu_1032_p2;
wire   [0:0] and_ln102_61_fu_1038_p2;
wire   [0:0] and_ln102_62_fu_1043_p2;
wire   [0:0] xor_ln104_37_fu_1048_p2;
wire   [0:0] and_ln102_84_fu_1083_p2;
wire   [0:0] and_ln102_63_fu_1053_p2;
wire   [0:0] xor_ln104_38_fu_1058_p2;
wire   [0:0] and_ln102_85_fu_1099_p2;
wire   [0:0] and_ln102_64_fu_1063_p2;
wire   [0:0] xor_ln104_39_fu_1068_p2;
wire   [0:0] and_ln102_86_fu_1115_p2;
wire   [0:0] and_ln102_73_fu_1073_p2;
wire   [0:0] or_ln117_65_fu_1126_p2;
wire   [0:0] or_ln117_66_fu_1131_p2;
wire   [0:0] and_ln102_74_fu_1078_p2;
wire   [4:0] select_ln117_68_fu_1136_p3;
wire   [0:0] or_ln117_67_fu_1143_p2;
wire   [4:0] select_ln117_69_fu_1149_p3;
wire   [0:0] or_ln117_68_fu_1157_p2;
wire   [0:0] and_ln102_75_fu_1088_p2;
wire   [4:0] select_ln117_70_fu_1163_p3;
wire   [0:0] or_ln117_69_fu_1171_p2;
wire   [4:0] select_ln117_71_fu_1177_p3;
wire   [0:0] or_ln117_70_fu_1185_p2;
wire   [0:0] and_ln102_76_fu_1094_p2;
wire   [4:0] select_ln117_72_fu_1190_p3;
wire   [0:0] or_ln117_71_fu_1198_p2;
wire   [4:0] select_ln117_73_fu_1204_p3;
wire   [0:0] or_ln117_72_fu_1212_p2;
wire   [0:0] and_ln102_77_fu_1104_p2;
wire   [4:0] select_ln117_74_fu_1218_p3;
wire   [0:0] or_ln117_73_fu_1226_p2;
wire   [4:0] select_ln117_75_fu_1232_p3;
wire   [0:0] or_ln117_74_fu_1240_p2;
wire   [0:0] and_ln102_78_fu_1110_p2;
wire   [4:0] select_ln117_76_fu_1246_p3;
wire   [0:0] or_ln117_75_fu_1254_p2;
wire   [4:0] select_ln117_77_fu_1260_p3;
wire   [0:0] or_ln117_76_fu_1268_p2;
wire   [0:0] and_ln102_79_fu_1120_p2;
wire   [4:0] select_ln117_78_fu_1274_p3;
wire   [0:0] or_ln117_77_fu_1282_p2;
wire   [4:0] select_ln117_79_fu_1288_p3;
wire   [12:0] agg_result_fu_1304_p65;
wire   [4:0] agg_result_fu_1304_p66;
wire   [12:0] agg_result_fu_1304_p67;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1304_p1;
wire   [4:0] agg_result_fu_1304_p3;
wire   [4:0] agg_result_fu_1304_p5;
wire   [4:0] agg_result_fu_1304_p7;
wire   [4:0] agg_result_fu_1304_p9;
wire   [4:0] agg_result_fu_1304_p11;
wire   [4:0] agg_result_fu_1304_p13;
wire   [4:0] agg_result_fu_1304_p15;
wire   [4:0] agg_result_fu_1304_p17;
wire   [4:0] agg_result_fu_1304_p19;
wire   [4:0] agg_result_fu_1304_p21;
wire   [4:0] agg_result_fu_1304_p23;
wire   [4:0] agg_result_fu_1304_p25;
wire   [4:0] agg_result_fu_1304_p27;
wire   [4:0] agg_result_fu_1304_p29;
wire   [4:0] agg_result_fu_1304_p31;
wire  signed [4:0] agg_result_fu_1304_p33;
wire  signed [4:0] agg_result_fu_1304_p35;
wire  signed [4:0] agg_result_fu_1304_p37;
wire  signed [4:0] agg_result_fu_1304_p39;
wire  signed [4:0] agg_result_fu_1304_p41;
wire  signed [4:0] agg_result_fu_1304_p43;
wire  signed [4:0] agg_result_fu_1304_p45;
wire  signed [4:0] agg_result_fu_1304_p47;
wire  signed [4:0] agg_result_fu_1304_p49;
wire  signed [4:0] agg_result_fu_1304_p51;
wire  signed [4:0] agg_result_fu_1304_p53;
wire  signed [4:0] agg_result_fu_1304_p55;
wire  signed [4:0] agg_result_fu_1304_p57;
wire  signed [4:0] agg_result_fu_1304_p59;
wire  signed [4:0] agg_result_fu_1304_p61;
wire  signed [4:0] agg_result_fu_1304_p63;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_65_5_13_1_1_x10 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 13 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 13 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 13 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 13 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 13 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 13 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 13 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 13 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 13 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 13 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 13 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 13 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 13 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 13 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 13 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 13 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 13 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 13 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 13 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 13 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 13 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 13 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 13 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 13 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 13 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 13 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 13 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 13 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 13 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 13 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 13 ),
    .CASE31( 5'h1F ),
    .din31_WIDTH( 13 ),
    .def_WIDTH( 13 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 13 ))
sparsemux_65_5_13_1_1_x10_U2054(
    .din0(13'd8155),
    .din1(13'd8002),
    .din2(13'd213),
    .din3(13'd8105),
    .din4(13'd391),
    .din5(13'd2092),
    .din6(13'd7821),
    .din7(13'd739),
    .din8(13'd1763),
    .din9(13'd56),
    .din10(13'd309),
    .din11(13'd957),
    .din12(13'd7982),
    .din13(13'd1077),
    .din14(13'd13),
    .din15(13'd8108),
    .din16(13'd46),
    .din17(13'd326),
    .din18(13'd7585),
    .din19(13'd8153),
    .din20(13'd226),
    .din21(13'd637),
    .din22(13'd65),
    .din23(13'd519),
    .din24(13'd7433),
    .din25(13'd7986),
    .din26(13'd8072),
    .din27(13'd343),
    .din28(13'd7987),
    .din29(13'd56),
    .din30(13'd7907),
    .din31(13'd8172),
    .def(agg_result_fu_1304_p65),
    .sel(agg_result_fu_1304_p66),
    .dout(agg_result_fu_1304_p67)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_1399_reg_1466 <= icmp_ln86_1399_fu_490_p2;
        icmp_ln86_1400_reg_1484 <= icmp_ln86_1400_fu_566_p2;
        icmp_ln86_56_reg_1448 <= icmp_ln86_56_fu_426_p2;
        icmp_ln86_59_reg_1454 <= icmp_ln86_59_fu_444_p2;
        icmp_ln86_60_reg_1460 <= icmp_ln86_60_fu_450_p2;
        icmp_ln86_66_reg_1472 <= icmp_ln86_66_fu_496_p2;
        icmp_ln86_67_reg_1478 <= icmp_ln86_67_fu_502_p2;
        icmp_ln86_77_reg_1489 <= icmp_ln86_77_fu_572_p2;
        icmp_ln86_78_reg_1494 <= icmp_ln86_78_fu_578_p2;
        icmp_ln86_79_reg_1499 <= icmp_ln86_79_fu_584_p2;
        icmp_ln86_80_reg_1504 <= icmp_ln86_80_fu_590_p2;
        icmp_ln86_81_reg_1509 <= icmp_ln86_81_fu_596_p2;
        icmp_ln86_82_reg_1514 <= icmp_ln86_82_fu_602_p2;
        icmp_ln86_reg_1440 <= icmp_ln86_fu_414_p2;
        select_ln117_67_reg_1519 <= select_ln117_67_fu_982_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1304_p65 = 'bx;

assign agg_result_fu_1304_p66 = ((or_ln117_77_fu_1282_p2[0:0] == 1'b1) ? select_ln117_79_fu_1288_p3 : 5'd31);

assign and_ln102_53_fu_995_p2 = (xor_ln104_fu_990_p2 & icmp_ln86_56_reg_1448);

assign and_ln102_54_fu_626_p2 = (icmp_ln86_57_fu_432_p2 & and_ln102_fu_608_p2);

assign and_ln102_55_fu_644_p2 = (icmp_ln86_58_fu_438_p2 & and_ln104_fu_620_p2);

assign and_ln102_56_fu_1022_p2 = (icmp_ln86_60_reg_1460 & and_ln104_11_fu_1005_p2);

assign and_ln102_57_fu_662_p2 = (icmp_ln86_61_fu_456_p2 & and_ln102_54_fu_626_p2);

assign and_ln102_58_fu_674_p2 = (icmp_ln86_62_fu_462_p2 & and_ln104_12_fu_638_p2);

assign and_ln102_59_fu_686_p2 = (icmp_ln86_63_fu_468_p2 & and_ln102_55_fu_644_p2);

assign and_ln102_60_fu_698_p2 = (icmp_ln86_64_fu_474_p2 & and_ln104_13_fu_656_p2);

assign and_ln102_61_fu_1038_p2 = (icmp_ln86_59_reg_1454 & and_ln102_53_fu_995_p2);

assign and_ln102_62_fu_1043_p2 = (icmp_ln86_1399_reg_1466 & and_ln104_14_fu_1016_p2);

assign and_ln102_63_fu_1053_p2 = (icmp_ln86_66_reg_1472 & and_ln102_56_fu_1022_p2);

assign and_ln102_64_fu_1063_p2 = (icmp_ln86_67_reg_1478 & and_ln104_15_fu_1032_p2);

assign and_ln102_65_fu_710_p2 = (icmp_ln86_68_fu_508_p2 & and_ln102_57_fu_662_p2);

assign and_ln102_66_fu_722_p2 = (and_ln102_80_fu_716_p2 & and_ln102_54_fu_626_p2);

assign and_ln102_67_fu_728_p2 = (icmp_ln86_70_fu_520_p2 & and_ln102_58_fu_674_p2);

assign and_ln102_68_fu_740_p2 = (and_ln104_12_fu_638_p2 & and_ln102_81_fu_734_p2);

assign and_ln102_69_fu_746_p2 = (icmp_ln86_72_fu_532_p2 & and_ln102_59_fu_686_p2);

assign and_ln102_70_fu_758_p2 = (and_ln102_82_fu_752_p2 & and_ln102_55_fu_644_p2);

assign and_ln102_71_fu_764_p2 = (icmp_ln86_74_fu_544_p2 & and_ln102_60_fu_698_p2);

assign and_ln102_72_fu_776_p2 = (and_ln104_13_fu_656_p2 & and_ln102_83_fu_770_p2);

assign and_ln102_73_fu_1073_p2 = (icmp_ln86_1400_reg_1484 & and_ln102_61_fu_1038_p2);

assign and_ln102_74_fu_1078_p2 = (icmp_ln86_77_reg_1489 & and_ln102_62_fu_1043_p2);

assign and_ln102_75_fu_1088_p2 = (and_ln104_14_fu_1016_p2 & and_ln102_84_fu_1083_p2);

assign and_ln102_76_fu_1094_p2 = (icmp_ln86_79_reg_1499 & and_ln102_63_fu_1053_p2);

assign and_ln102_77_fu_1104_p2 = (and_ln102_85_fu_1099_p2 & and_ln102_56_fu_1022_p2);

assign and_ln102_78_fu_1110_p2 = (icmp_ln86_81_reg_1509 & and_ln102_64_fu_1063_p2);

assign and_ln102_79_fu_1120_p2 = (and_ln104_15_fu_1032_p2 & and_ln102_86_fu_1115_p2);

assign and_ln102_80_fu_716_p2 = (xor_ln104_33_fu_668_p2 & icmp_ln86_69_fu_514_p2);

assign and_ln102_81_fu_734_p2 = (xor_ln104_34_fu_680_p2 & icmp_ln86_71_fu_526_p2);

assign and_ln102_82_fu_752_p2 = (xor_ln104_35_fu_692_p2 & icmp_ln86_73_fu_538_p2);

assign and_ln102_83_fu_770_p2 = (xor_ln104_36_fu_704_p2 & icmp_ln86_75_fu_550_p2);

assign and_ln102_84_fu_1083_p2 = (xor_ln104_37_fu_1048_p2 & icmp_ln86_78_reg_1494);

assign and_ln102_85_fu_1099_p2 = (xor_ln104_38_fu_1058_p2 & icmp_ln86_80_reg_1504);

assign and_ln102_86_fu_1115_p2 = (xor_ln104_39_fu_1068_p2 & icmp_ln86_82_reg_1514);

assign and_ln102_fu_608_p2 = (icmp_ln86_fu_414_p2 & icmp_ln86_55_fu_420_p2);

assign and_ln104_11_fu_1005_p2 = (xor_ln104_fu_990_p2 & xor_ln104_28_fu_1000_p2);

assign and_ln104_12_fu_638_p2 = (xor_ln104_29_fu_632_p2 & and_ln102_fu_608_p2);

assign and_ln104_13_fu_656_p2 = (xor_ln104_30_fu_650_p2 & and_ln104_fu_620_p2);

assign and_ln104_14_fu_1016_p2 = (xor_ln104_31_fu_1011_p2 & and_ln102_53_fu_995_p2);

assign and_ln104_15_fu_1032_p2 = (xor_ln104_32_fu_1027_p2 & and_ln104_11_fu_1005_p2);

assign and_ln104_fu_620_p2 = (xor_ln104_27_fu_614_p2 & icmp_ln86_fu_414_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1304_p67;

assign icmp_ln86_1399_fu_490_p2 = (($signed(tmp_fu_480_p4) < $signed(15'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_1400_fu_566_p2 = (($signed(tmp_25_fu_556_p4) < $signed(14'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_55_fu_420_p2 = (($signed(x_46_val) < $signed(18'd129)) ? 1'b1 : 1'b0);

assign icmp_ln86_56_fu_426_p2 = (($signed(x_29_val) < $signed(18'd6711)) ? 1'b1 : 1'b0);

assign icmp_ln86_57_fu_432_p2 = (($signed(x_48_val) < $signed(18'd89359)) ? 1'b1 : 1'b0);

assign icmp_ln86_58_fu_438_p2 = (($signed(x_38_val) < $signed(18'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_59_fu_444_p2 = (($signed(x_15_val) < $signed(18'd7)) ? 1'b1 : 1'b0);

assign icmp_ln86_60_fu_450_p2 = (($signed(x_19_val) < $signed(18'd553)) ? 1'b1 : 1'b0);

assign icmp_ln86_61_fu_456_p2 = (($signed(x_23_val) < $signed(18'd48)) ? 1'b1 : 1'b0);

assign icmp_ln86_62_fu_462_p2 = (($signed(x_1_val) < $signed(18'd256101)) ? 1'b1 : 1'b0);

assign icmp_ln86_63_fu_468_p2 = (($signed(x_27_val) < $signed(18'd813)) ? 1'b1 : 1'b0);

assign icmp_ln86_64_fu_474_p2 = (($signed(x_1_val) < $signed(18'd184989)) ? 1'b1 : 1'b0);

assign icmp_ln86_66_fu_496_p2 = (($signed(x_12_val) < $signed(18'd259692)) ? 1'b1 : 1'b0);

assign icmp_ln86_67_fu_502_p2 = (($signed(x_46_val) < $signed(18'd155)) ? 1'b1 : 1'b0);

assign icmp_ln86_68_fu_508_p2 = (($signed(x_52_val) < $signed(18'd58881)) ? 1'b1 : 1'b0);

assign icmp_ln86_69_fu_514_p2 = (($signed(x_23_val) < $signed(18'd56)) ? 1'b1 : 1'b0);

assign icmp_ln86_70_fu_520_p2 = (($signed(x_1_val) < $signed(18'd83912)) ? 1'b1 : 1'b0);

assign icmp_ln86_71_fu_526_p2 = (($signed(x_47_val) < $signed(18'd106634)) ? 1'b1 : 1'b0);

assign icmp_ln86_72_fu_532_p2 = (($signed(x_44_val) < $signed(18'd20)) ? 1'b1 : 1'b0);

assign icmp_ln86_73_fu_538_p2 = (($signed(x_33_val) < $signed(18'd469)) ? 1'b1 : 1'b0);

assign icmp_ln86_74_fu_544_p2 = (($signed(x_39_val) < $signed(18'd2965)) ? 1'b1 : 1'b0);

assign icmp_ln86_75_fu_550_p2 = (($signed(x_16_val) < $signed(18'd117)) ? 1'b1 : 1'b0);

assign icmp_ln86_77_fu_572_p2 = (($signed(x_49_val) < $signed(18'd80881)) ? 1'b1 : 1'b0);

assign icmp_ln86_78_fu_578_p2 = (($signed(x_29_val) < $signed(18'd6664)) ? 1'b1 : 1'b0);

assign icmp_ln86_79_fu_584_p2 = (($signed(x_37_val) < $signed(18'd22)) ? 1'b1 : 1'b0);

assign icmp_ln86_80_fu_590_p2 = (($signed(x_26_val) < $signed(18'd64374)) ? 1'b1 : 1'b0);

assign icmp_ln86_81_fu_596_p2 = (($signed(x_14_val) < $signed(18'd33)) ? 1'b1 : 1'b0);

assign icmp_ln86_82_fu_602_p2 = (($signed(x_21_val) < $signed(18'd233)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_414_p2 = (($signed(x_29_val) < $signed(18'd6181)) ? 1'b1 : 1'b0);

assign or_ln117_55_fu_818_p2 = (and_ln102_67_fu_728_p2 | and_ln102_54_fu_626_p2);

assign or_ln117_56_fu_832_p2 = (and_ln102_58_fu_674_p2 | and_ln102_54_fu_626_p2);

assign or_ln117_57_fu_846_p2 = (or_ln117_56_fu_832_p2 | and_ln102_68_fu_740_p2);

assign or_ln117_58_fu_872_p2 = (and_ln102_fu_608_p2 | and_ln102_69_fu_746_p2);

assign or_ln117_59_fu_886_p2 = (and_ln102_fu_608_p2 | and_ln102_59_fu_686_p2);

assign or_ln117_60_fu_900_p2 = (or_ln117_59_fu_886_p2 | and_ln102_70_fu_758_p2);

assign or_ln117_61_fu_914_p2 = (and_ln102_fu_608_p2 | and_ln102_55_fu_644_p2);

assign or_ln117_62_fu_928_p2 = (or_ln117_61_fu_914_p2 | and_ln102_71_fu_764_p2);

assign or_ln117_63_fu_942_p2 = (or_ln117_61_fu_914_p2 | and_ln102_60_fu_698_p2);

assign or_ln117_64_fu_956_p2 = (or_ln117_63_fu_942_p2 | and_ln102_72_fu_776_p2);

assign or_ln117_65_fu_1126_p2 = (icmp_ln86_reg_1440 | and_ln102_73_fu_1073_p2);

assign or_ln117_66_fu_1131_p2 = (icmp_ln86_reg_1440 | and_ln102_61_fu_1038_p2);

assign or_ln117_67_fu_1143_p2 = (or_ln117_66_fu_1131_p2 | and_ln102_74_fu_1078_p2);

assign or_ln117_68_fu_1157_p2 = (or_ln117_66_fu_1131_p2 | and_ln102_62_fu_1043_p2);

assign or_ln117_69_fu_1171_p2 = (or_ln117_68_fu_1157_p2 | and_ln102_75_fu_1088_p2);

assign or_ln117_70_fu_1185_p2 = (icmp_ln86_reg_1440 | and_ln102_53_fu_995_p2);

assign or_ln117_71_fu_1198_p2 = (or_ln117_70_fu_1185_p2 | and_ln102_76_fu_1094_p2);

assign or_ln117_72_fu_1212_p2 = (or_ln117_70_fu_1185_p2 | and_ln102_63_fu_1053_p2);

assign or_ln117_73_fu_1226_p2 = (or_ln117_72_fu_1212_p2 | and_ln102_77_fu_1104_p2);

assign or_ln117_74_fu_1240_p2 = (or_ln117_70_fu_1185_p2 | and_ln102_56_fu_1022_p2);

assign or_ln117_75_fu_1254_p2 = (or_ln117_74_fu_1240_p2 | and_ln102_78_fu_1110_p2);

assign or_ln117_76_fu_1268_p2 = (or_ln117_74_fu_1240_p2 | and_ln102_64_fu_1063_p2);

assign or_ln117_77_fu_1282_p2 = (or_ln117_76_fu_1268_p2 | and_ln102_79_fu_1120_p2);

assign or_ln117_fu_792_p2 = (and_ln102_66_fu_722_p2 | and_ln102_57_fu_662_p2);

assign select_ln117_54_fu_806_p3 = ((or_ln117_fu_792_p2[0:0] == 1'b1) ? select_ln117_fu_798_p3 : 2'd3);

assign select_ln117_55_fu_824_p3 = ((and_ln102_54_fu_626_p2[0:0] == 1'b1) ? zext_ln117_5_fu_814_p1 : 3'd4);

assign select_ln117_56_fu_838_p3 = ((or_ln117_55_fu_818_p2[0:0] == 1'b1) ? select_ln117_55_fu_824_p3 : 3'd5);

assign select_ln117_57_fu_852_p3 = ((or_ln117_56_fu_832_p2[0:0] == 1'b1) ? select_ln117_56_fu_838_p3 : 3'd6);

assign select_ln117_58_fu_860_p3 = ((or_ln117_57_fu_846_p2[0:0] == 1'b1) ? select_ln117_57_fu_852_p3 : 3'd7);

assign select_ln117_59_fu_878_p3 = ((and_ln102_fu_608_p2[0:0] == 1'b1) ? zext_ln117_6_fu_868_p1 : 4'd8);

assign select_ln117_60_fu_892_p3 = ((or_ln117_58_fu_872_p2[0:0] == 1'b1) ? select_ln117_59_fu_878_p3 : 4'd9);

assign select_ln117_61_fu_906_p3 = ((or_ln117_59_fu_886_p2[0:0] == 1'b1) ? select_ln117_60_fu_892_p3 : 4'd10);

assign select_ln117_62_fu_920_p3 = ((or_ln117_60_fu_900_p2[0:0] == 1'b1) ? select_ln117_61_fu_906_p3 : 4'd11);

assign select_ln117_63_fu_934_p3 = ((or_ln117_61_fu_914_p2[0:0] == 1'b1) ? select_ln117_62_fu_920_p3 : 4'd12);

assign select_ln117_64_fu_948_p3 = ((or_ln117_62_fu_928_p2[0:0] == 1'b1) ? select_ln117_63_fu_934_p3 : 4'd13);

assign select_ln117_65_fu_962_p3 = ((or_ln117_63_fu_942_p2[0:0] == 1'b1) ? select_ln117_64_fu_948_p3 : 4'd14);

assign select_ln117_66_fu_970_p3 = ((or_ln117_64_fu_956_p2[0:0] == 1'b1) ? select_ln117_65_fu_962_p3 : 4'd15);

assign select_ln117_67_fu_982_p3 = ((icmp_ln86_fu_414_p2[0:0] == 1'b1) ? zext_ln117_7_fu_978_p1 : 5'd16);

assign select_ln117_68_fu_1136_p3 = ((or_ln117_65_fu_1126_p2[0:0] == 1'b1) ? select_ln117_67_reg_1519 : 5'd17);

assign select_ln117_69_fu_1149_p3 = ((or_ln117_66_fu_1131_p2[0:0] == 1'b1) ? select_ln117_68_fu_1136_p3 : 5'd20);

assign select_ln117_70_fu_1163_p3 = ((or_ln117_67_fu_1143_p2[0:0] == 1'b1) ? select_ln117_69_fu_1149_p3 : 5'd21);

assign select_ln117_71_fu_1177_p3 = ((or_ln117_68_fu_1157_p2[0:0] == 1'b1) ? select_ln117_70_fu_1163_p3 : 5'd22);

assign select_ln117_72_fu_1190_p3 = ((or_ln117_69_fu_1171_p2[0:0] == 1'b1) ? select_ln117_71_fu_1177_p3 : 5'd23);

assign select_ln117_73_fu_1204_p3 = ((or_ln117_70_fu_1185_p2[0:0] == 1'b1) ? select_ln117_72_fu_1190_p3 : 5'd24);

assign select_ln117_74_fu_1218_p3 = ((or_ln117_71_fu_1198_p2[0:0] == 1'b1) ? select_ln117_73_fu_1204_p3 : 5'd25);

assign select_ln117_75_fu_1232_p3 = ((or_ln117_72_fu_1212_p2[0:0] == 1'b1) ? select_ln117_74_fu_1218_p3 : 5'd26);

assign select_ln117_76_fu_1246_p3 = ((or_ln117_73_fu_1226_p2[0:0] == 1'b1) ? select_ln117_75_fu_1232_p3 : 5'd27);

assign select_ln117_77_fu_1260_p3 = ((or_ln117_74_fu_1240_p2[0:0] == 1'b1) ? select_ln117_76_fu_1246_p3 : 5'd28);

assign select_ln117_78_fu_1274_p3 = ((or_ln117_75_fu_1254_p2[0:0] == 1'b1) ? select_ln117_77_fu_1260_p3 : 5'd29);

assign select_ln117_79_fu_1288_p3 = ((or_ln117_76_fu_1268_p2[0:0] == 1'b1) ? select_ln117_78_fu_1274_p3 : 5'd30);

assign select_ln117_fu_798_p3 = ((and_ln102_57_fu_662_p2[0:0] == 1'b1) ? zext_ln117_fu_788_p1 : 2'd2);

assign tmp_25_fu_556_p4 = {{x_17_val[17:4]}};

assign tmp_fu_480_p4 = {{x_15_val[17:3]}};

assign xor_ln104_27_fu_614_p2 = (icmp_ln86_55_fu_420_p2 ^ 1'd1);

assign xor_ln104_28_fu_1000_p2 = (icmp_ln86_56_reg_1448 ^ 1'd1);

assign xor_ln104_29_fu_632_p2 = (icmp_ln86_57_fu_432_p2 ^ 1'd1);

assign xor_ln104_30_fu_650_p2 = (icmp_ln86_58_fu_438_p2 ^ 1'd1);

assign xor_ln104_31_fu_1011_p2 = (icmp_ln86_59_reg_1454 ^ 1'd1);

assign xor_ln104_32_fu_1027_p2 = (icmp_ln86_60_reg_1460 ^ 1'd1);

assign xor_ln104_33_fu_668_p2 = (icmp_ln86_61_fu_456_p2 ^ 1'd1);

assign xor_ln104_34_fu_680_p2 = (icmp_ln86_62_fu_462_p2 ^ 1'd1);

assign xor_ln104_35_fu_692_p2 = (icmp_ln86_63_fu_468_p2 ^ 1'd1);

assign xor_ln104_36_fu_704_p2 = (icmp_ln86_64_fu_474_p2 ^ 1'd1);

assign xor_ln104_37_fu_1048_p2 = (icmp_ln86_1399_reg_1466 ^ 1'd1);

assign xor_ln104_38_fu_1058_p2 = (icmp_ln86_66_reg_1472 ^ 1'd1);

assign xor_ln104_39_fu_1068_p2 = (icmp_ln86_67_reg_1478 ^ 1'd1);

assign xor_ln104_fu_990_p2 = (icmp_ln86_reg_1440 ^ 1'd1);

assign xor_ln117_fu_782_p2 = (1'd1 ^ and_ln102_65_fu_710_p2);

assign zext_ln117_5_fu_814_p1 = select_ln117_54_fu_806_p3;

assign zext_ln117_6_fu_868_p1 = select_ln117_58_fu_860_p3;

assign zext_ln117_7_fu_978_p1 = select_ln117_66_fu_970_p3;

assign zext_ln117_fu_788_p1 = xor_ln117_fu_782_p2;

endmodule //my_prj_decision_function_2
