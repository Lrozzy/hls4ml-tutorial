// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_3_val,
        x_7_val,
        x_10_val,
        x_11_val,
        x_14_val,
        x_16_val,
        x_17_val,
        x_18_val,
        x_29_val,
        x_31_val,
        x_32_val,
        x_35_val,
        x_39_val,
        x_40_val,
        x_47_val,
        x_49_val,
        x_50_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_3_val;
input  [17:0] x_7_val;
input  [17:0] x_10_val;
input  [17:0] x_11_val;
input  [17:0] x_14_val;
input  [17:0] x_16_val;
input  [17:0] x_17_val;
input  [17:0] x_18_val;
input  [17:0] x_29_val;
input  [17:0] x_31_val;
input  [17:0] x_32_val;
input  [17:0] x_35_val;
input  [17:0] x_39_val;
input  [17:0] x_40_val;
input  [17:0] x_47_val;
input  [17:0] x_49_val;
input  [17:0] x_50_val;
input  [17:0] x_52_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_30_fu_416_p2;
reg   [0:0] icmp_ln86_30_reg_1465;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_35_fu_446_p2;
reg   [0:0] icmp_ln86_35_reg_1471;
wire   [0:0] icmp_ln86_36_fu_452_p2;
reg   [0:0] icmp_ln86_36_reg_1476;
wire   [0:0] icmp_ln86_37_fu_458_p2;
reg   [0:0] icmp_ln86_37_reg_1482;
wire   [0:0] icmp_ln86_39_fu_470_p2;
reg   [0:0] icmp_ln86_39_reg_1488;
wire   [0:0] icmp_ln86_47_fu_518_p2;
reg   [0:0] icmp_ln86_47_reg_1494;
wire   [0:0] icmp_ln86_2034_fu_534_p2;
reg   [0:0] icmp_ln86_2034_reg_1499;
wire   [0:0] icmp_ln86_49_fu_540_p2;
reg   [0:0] icmp_ln86_49_reg_1504;
wire   [0:0] icmp_ln86_50_fu_546_p2;
reg   [0:0] icmp_ln86_50_reg_1509;
wire   [0:0] icmp_ln86_51_fu_552_p2;
reg   [0:0] icmp_ln86_51_reg_1514;
wire   [0:0] icmp_ln86_52_fu_558_p2;
reg   [0:0] icmp_ln86_52_reg_1519;
wire   [0:0] icmp_ln86_53_fu_564_p2;
reg   [0:0] icmp_ln86_53_reg_1524;
wire   [0:0] icmp_ln86_54_fu_570_p2;
reg   [0:0] icmp_ln86_54_reg_1529;
wire   [0:0] and_ln102_25_fu_600_p2;
reg   [0:0] and_ln102_25_reg_1534;
wire   [0:0] and_ln104_7_fu_648_p2;
reg   [0:0] and_ln104_7_reg_1541;
wire   [0:0] and_ln104_9_fu_666_p2;
reg   [0:0] and_ln104_9_reg_1546;
wire   [0:0] and_ln104_10_fu_726_p2;
reg   [0:0] and_ln104_10_reg_1553;
wire   [0:0] or_ln117_38_fu_984_p2;
reg   [0:0] or_ln117_38_reg_1559;
wire   [3:0] select_ln117_38_fu_998_p3;
reg   [3:0] select_ln117_38_reg_1564;
wire   [0:0] or_ln117_40_fu_1006_p2;
reg   [0:0] or_ln117_40_reg_1569;
wire    ap_block_pp0_stage0;
wire   [7:0] tmp_38_fu_524_p4;
wire   [0:0] icmp_ln86_fu_386_p2;
wire   [0:0] icmp_ln86_26_fu_392_p2;
wire   [0:0] xor_ln104_13_fu_588_p2;
wire   [0:0] icmp_ln86_27_fu_398_p2;
wire   [0:0] xor_ln104_fu_576_p2;
wire   [0:0] xor_ln104_14_fu_606_p2;
wire   [0:0] icmp_ln86_28_fu_404_p2;
wire   [0:0] and_ln102_fu_582_p2;
wire   [0:0] xor_ln104_15_fu_624_p2;
wire   [0:0] icmp_ln86_29_fu_410_p2;
wire   [0:0] and_ln104_fu_594_p2;
wire   [0:0] xor_ln104_16_fu_642_p2;
wire   [0:0] icmp_ln86_31_fu_422_p2;
wire   [0:0] and_ln104_5_fu_612_p2;
wire   [0:0] xor_ln104_18_fu_660_p2;
wire   [0:0] icmp_ln86_32_fu_428_p2;
wire   [0:0] and_ln102_26_fu_618_p2;
wire   [0:0] icmp_ln86_33_fu_434_p2;
wire   [0:0] and_ln104_6_fu_630_p2;
wire   [0:0] icmp_ln86_34_fu_440_p2;
wire   [0:0] and_ln102_27_fu_636_p2;
wire   [0:0] icmp_ln86_38_fu_464_p2;
wire   [0:0] and_ln102_29_fu_654_p2;
wire   [0:0] xor_ln104_25_fu_720_p2;
wire   [0:0] icmp_ln86_40_fu_476_p2;
wire   [0:0] and_ln102_30_fu_672_p2;
wire   [0:0] icmp_ln86_41_fu_482_p2;
wire   [0:0] xor_ln104_19_fu_678_p2;
wire   [0:0] and_ln102_53_fu_738_p2;
wire   [0:0] icmp_ln86_42_fu_488_p2;
wire   [0:0] and_ln102_31_fu_684_p2;
wire   [0:0] icmp_ln86_43_fu_494_p2;
wire   [0:0] xor_ln104_20_fu_690_p2;
wire   [0:0] and_ln102_54_fu_756_p2;
wire   [0:0] icmp_ln86_44_fu_500_p2;
wire   [0:0] and_ln102_32_fu_696_p2;
wire   [0:0] icmp_ln86_45_fu_506_p2;
wire   [0:0] xor_ln104_21_fu_702_p2;
wire   [0:0] and_ln102_55_fu_774_p2;
wire   [0:0] icmp_ln86_46_fu_512_p2;
wire   [0:0] and_ln102_33_fu_708_p2;
wire   [0:0] and_ln102_36_fu_714_p2;
wire   [0:0] and_ln102_38_fu_732_p2;
wire   [0:0] xor_ln117_fu_798_p2;
wire   [0:0] or_ln117_fu_792_p2;
wire   [1:0] zext_ln117_fu_804_p1;
wire   [0:0] or_ln117_26_fu_808_p2;
wire   [0:0] and_ln102_39_fu_744_p2;
wire   [1:0] select_ln117_fu_814_p3;
wire   [1:0] select_ln117_26_fu_828_p3;
wire   [0:0] or_ln117_27_fu_822_p2;
wire   [2:0] zext_ln117_2_fu_836_p1;
wire   [0:0] or_ln117_28_fu_840_p2;
wire   [0:0] and_ln102_40_fu_750_p2;
wire   [2:0] select_ln117_27_fu_846_p3;
wire   [0:0] or_ln117_29_fu_854_p2;
wire   [2:0] select_ln117_28_fu_860_p3;
wire   [0:0] or_ln117_30_fu_868_p2;
wire   [0:0] and_ln102_41_fu_762_p2;
wire   [2:0] select_ln117_29_fu_874_p3;
wire   [2:0] select_ln117_30_fu_888_p3;
wire   [0:0] or_ln117_31_fu_882_p2;
wire   [3:0] zext_ln117_3_fu_896_p1;
wire   [0:0] or_ln117_32_fu_900_p2;
wire   [0:0] and_ln102_42_fu_768_p2;
wire   [3:0] select_ln117_31_fu_906_p3;
wire   [0:0] or_ln117_33_fu_914_p2;
wire   [3:0] select_ln117_32_fu_920_p3;
wire   [0:0] or_ln117_34_fu_928_p2;
wire   [0:0] and_ln102_43_fu_780_p2;
wire   [3:0] select_ln117_33_fu_934_p3;
wire   [0:0] or_ln117_35_fu_942_p2;
wire   [3:0] select_ln117_34_fu_948_p3;
wire   [0:0] or_ln117_36_fu_956_p2;
wire   [0:0] and_ln102_44_fu_786_p2;
wire   [3:0] select_ln117_35_fu_962_p3;
wire   [0:0] or_ln117_37_fu_970_p2;
wire   [3:0] select_ln117_36_fu_976_p3;
wire   [3:0] select_ln117_37_fu_990_p3;
wire   [0:0] xor_ln104_17_fu_1016_p2;
wire   [0:0] and_ln102_28_fu_1012_p2;
wire   [0:0] and_ln104_8_fu_1021_p2;
wire   [0:0] xor_ln104_22_fu_1026_p2;
wire   [0:0] and_ln102_56_fu_1060_p2;
wire   [0:0] and_ln102_34_fu_1031_p2;
wire   [0:0] xor_ln104_23_fu_1036_p2;
wire   [0:0] and_ln102_57_fu_1075_p2;
wire   [0:0] and_ln102_35_fu_1041_p2;
wire   [0:0] xor_ln104_24_fu_1046_p2;
wire   [0:0] and_ln102_58_fu_1091_p2;
wire   [0:0] and_ln102_37_fu_1051_p2;
wire   [0:0] xor_ln104_26_fu_1055_p2;
wire   [0:0] and_ln102_59_fu_1111_p2;
wire   [0:0] and_ln102_45_fu_1065_p2;
wire   [0:0] or_ln117_39_fu_1121_p2;
wire   [4:0] zext_ln117_4_fu_1126_p1;
wire   [0:0] and_ln102_46_fu_1070_p2;
wire   [4:0] select_ln117_39_fu_1129_p3;
wire   [0:0] or_ln117_41_fu_1137_p2;
wire   [4:0] select_ln117_40_fu_1142_p3;
wire   [0:0] or_ln117_42_fu_1149_p2;
wire   [0:0] and_ln102_47_fu_1080_p2;
wire   [4:0] select_ln117_41_fu_1154_p3;
wire   [0:0] or_ln117_43_fu_1162_p2;
wire   [4:0] select_ln117_42_fu_1168_p3;
wire   [0:0] or_ln117_44_fu_1176_p2;
wire   [0:0] and_ln102_48_fu_1086_p2;
wire   [4:0] select_ln117_43_fu_1181_p3;
wire   [0:0] or_ln117_45_fu_1189_p2;
wire   [4:0] select_ln117_44_fu_1195_p3;
wire   [0:0] or_ln117_46_fu_1203_p2;
wire   [0:0] and_ln102_49_fu_1096_p2;
wire   [4:0] select_ln117_45_fu_1209_p3;
wire   [0:0] or_ln117_47_fu_1217_p2;
wire   [4:0] select_ln117_46_fu_1223_p3;
wire   [0:0] or_ln117_48_fu_1231_p2;
wire   [0:0] and_ln102_50_fu_1102_p2;
wire   [4:0] select_ln117_47_fu_1235_p3;
wire   [0:0] or_ln117_49_fu_1243_p2;
wire   [4:0] select_ln117_48_fu_1249_p3;
wire   [0:0] or_ln117_50_fu_1257_p2;
wire   [0:0] and_ln102_51_fu_1106_p2;
wire   [4:0] select_ln117_49_fu_1262_p3;
wire   [0:0] or_ln117_51_fu_1270_p2;
wire   [4:0] select_ln117_50_fu_1276_p3;
wire   [0:0] or_ln117_52_fu_1284_p2;
wire   [0:0] and_ln102_52_fu_1116_p2;
wire   [4:0] select_ln117_51_fu_1290_p3;
wire   [0:0] or_ln117_53_fu_1298_p2;
wire   [4:0] select_ln117_52_fu_1304_p3;
wire   [11:0] tmp_fu_1325_p63;
wire   [4:0] tmp_fu_1325_p64;
wire   [0:0] or_ln117_54_fu_1312_p2;
wire   [11:0] tmp_fu_1325_p65;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] tmp_fu_1325_p1;
wire   [4:0] tmp_fu_1325_p3;
wire   [4:0] tmp_fu_1325_p5;
wire   [4:0] tmp_fu_1325_p7;
wire   [4:0] tmp_fu_1325_p9;
wire   [4:0] tmp_fu_1325_p11;
wire   [4:0] tmp_fu_1325_p13;
wire   [4:0] tmp_fu_1325_p15;
wire   [4:0] tmp_fu_1325_p17;
wire   [4:0] tmp_fu_1325_p19;
wire   [4:0] tmp_fu_1325_p21;
wire   [4:0] tmp_fu_1325_p23;
wire   [4:0] tmp_fu_1325_p25;
wire   [4:0] tmp_fu_1325_p27;
wire   [4:0] tmp_fu_1325_p29;
wire   [4:0] tmp_fu_1325_p31;
wire  signed [4:0] tmp_fu_1325_p33;
wire  signed [4:0] tmp_fu_1325_p35;
wire  signed [4:0] tmp_fu_1325_p37;
wire  signed [4:0] tmp_fu_1325_p39;
wire  signed [4:0] tmp_fu_1325_p41;
wire  signed [4:0] tmp_fu_1325_p43;
wire  signed [4:0] tmp_fu_1325_p45;
wire  signed [4:0] tmp_fu_1325_p47;
wire  signed [4:0] tmp_fu_1325_p49;
wire  signed [4:0] tmp_fu_1325_p51;
wire  signed [4:0] tmp_fu_1325_p53;
wire  signed [4:0] tmp_fu_1325_p55;
wire  signed [4:0] tmp_fu_1325_p57;
wire  signed [4:0] tmp_fu_1325_p59;
wire  signed [4:0] tmp_fu_1325_p61;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_63_5_12_1_1_x3 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 12 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 12 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 12 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_63_5_12_1_1_x3_U2078(
    .din0(12'd1178),
    .din1(12'd3),
    .din2(12'd4002),
    .din3(12'd79),
    .din4(12'd3964),
    .din5(12'd3916),
    .din6(12'd358),
    .din7(12'd1356),
    .din8(12'd125),
    .din9(12'd595),
    .din10(12'd3717),
    .din11(12'd2344),
    .din12(12'd256),
    .din13(12'd995),
    .din14(12'd103),
    .din15(12'd4005),
    .din16(12'd3471),
    .din17(12'd3922),
    .din18(12'd1107),
    .din19(12'd284),
    .din20(12'd3460),
    .din21(12'd3989),
    .din22(12'd2993),
    .din23(12'd3715),
    .din24(12'd358),
    .din25(12'd758),
    .din26(12'd3611),
    .din27(12'd4073),
    .din28(12'd406),
    .din29(12'd3886),
    .din30(12'd4058),
    .def(tmp_fu_1325_p63),
    .sel(tmp_fu_1325_p64),
    .dout(tmp_fu_1325_p65)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln102_25_reg_1534 <= and_ln102_25_fu_600_p2;
        and_ln104_10_reg_1553 <= and_ln104_10_fu_726_p2;
        and_ln104_7_reg_1541 <= and_ln104_7_fu_648_p2;
        and_ln104_9_reg_1546 <= and_ln104_9_fu_666_p2;
        icmp_ln86_2034_reg_1499 <= icmp_ln86_2034_fu_534_p2;
        icmp_ln86_30_reg_1465 <= icmp_ln86_30_fu_416_p2;
        icmp_ln86_35_reg_1471 <= icmp_ln86_35_fu_446_p2;
        icmp_ln86_36_reg_1476 <= icmp_ln86_36_fu_452_p2;
        icmp_ln86_37_reg_1482 <= icmp_ln86_37_fu_458_p2;
        icmp_ln86_39_reg_1488 <= icmp_ln86_39_fu_470_p2;
        icmp_ln86_47_reg_1494 <= icmp_ln86_47_fu_518_p2;
        icmp_ln86_49_reg_1504 <= icmp_ln86_49_fu_540_p2;
        icmp_ln86_50_reg_1509 <= icmp_ln86_50_fu_546_p2;
        icmp_ln86_51_reg_1514 <= icmp_ln86_51_fu_552_p2;
        icmp_ln86_52_reg_1519 <= icmp_ln86_52_fu_558_p2;
        icmp_ln86_53_reg_1524 <= icmp_ln86_53_fu_564_p2;
        icmp_ln86_54_reg_1529 <= icmp_ln86_54_fu_570_p2;
        or_ln117_38_reg_1559 <= or_ln117_38_fu_984_p2;
        or_ln117_40_reg_1569 <= or_ln117_40_fu_1006_p2;
        select_ln117_38_reg_1564 <= select_ln117_38_fu_998_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln102_25_fu_600_p2 = (xor_ln104_fu_576_p2 & icmp_ln86_27_fu_398_p2);

assign and_ln102_26_fu_618_p2 = (icmp_ln86_28_fu_404_p2 & and_ln102_fu_582_p2);

assign and_ln102_27_fu_636_p2 = (icmp_ln86_29_fu_410_p2 & and_ln104_fu_594_p2);

assign and_ln102_28_fu_1012_p2 = (icmp_ln86_30_reg_1465 & and_ln102_25_reg_1534);

assign and_ln102_29_fu_654_p2 = (icmp_ln86_31_fu_422_p2 & and_ln104_5_fu_612_p2);

assign and_ln102_30_fu_672_p2 = (icmp_ln86_32_fu_428_p2 & and_ln102_26_fu_618_p2);

assign and_ln102_31_fu_684_p2 = (icmp_ln86_33_fu_434_p2 & and_ln104_6_fu_630_p2);

assign and_ln102_32_fu_696_p2 = (icmp_ln86_34_fu_440_p2 & and_ln102_27_fu_636_p2);

assign and_ln102_33_fu_708_p2 = (icmp_ln86_35_fu_446_p2 & and_ln104_7_fu_648_p2);

assign and_ln102_34_fu_1031_p2 = (icmp_ln86_36_reg_1476 & and_ln102_28_fu_1012_p2);

assign and_ln102_35_fu_1041_p2 = (icmp_ln86_37_reg_1482 & and_ln104_8_fu_1021_p2);

assign and_ln102_36_fu_714_p2 = (icmp_ln86_38_fu_464_p2 & and_ln102_29_fu_654_p2);

assign and_ln102_37_fu_1051_p2 = (icmp_ln86_39_reg_1488 & and_ln104_9_reg_1546);

assign and_ln102_38_fu_732_p2 = (icmp_ln86_40_fu_476_p2 & and_ln102_30_fu_672_p2);

assign and_ln102_39_fu_744_p2 = (and_ln102_53_fu_738_p2 & and_ln102_26_fu_618_p2);

assign and_ln102_40_fu_750_p2 = (icmp_ln86_42_fu_488_p2 & and_ln102_31_fu_684_p2);

assign and_ln102_41_fu_762_p2 = (and_ln104_6_fu_630_p2 & and_ln102_54_fu_756_p2);

assign and_ln102_42_fu_768_p2 = (icmp_ln86_44_fu_500_p2 & and_ln102_32_fu_696_p2);

assign and_ln102_43_fu_780_p2 = (and_ln102_55_fu_774_p2 & and_ln102_27_fu_636_p2);

assign and_ln102_44_fu_786_p2 = (icmp_ln86_46_fu_512_p2 & and_ln102_33_fu_708_p2);

assign and_ln102_45_fu_1065_p2 = (and_ln104_7_reg_1541 & and_ln102_56_fu_1060_p2);

assign and_ln102_46_fu_1070_p2 = (icmp_ln86_2034_reg_1499 & and_ln102_34_fu_1031_p2);

assign and_ln102_47_fu_1080_p2 = (and_ln102_57_fu_1075_p2 & and_ln102_28_fu_1012_p2);

assign and_ln102_48_fu_1086_p2 = (icmp_ln86_50_reg_1509 & and_ln102_35_fu_1041_p2);

assign and_ln102_49_fu_1096_p2 = (and_ln104_8_fu_1021_p2 & and_ln102_58_fu_1091_p2);

assign and_ln102_50_fu_1102_p2 = (icmp_ln86_52_reg_1519 & and_ln104_10_reg_1553);

assign and_ln102_51_fu_1106_p2 = (icmp_ln86_53_reg_1524 & and_ln102_37_fu_1051_p2);

assign and_ln102_52_fu_1116_p2 = (and_ln104_9_reg_1546 & and_ln102_59_fu_1111_p2);

assign and_ln102_53_fu_738_p2 = (xor_ln104_19_fu_678_p2 & icmp_ln86_41_fu_482_p2);

assign and_ln102_54_fu_756_p2 = (xor_ln104_20_fu_690_p2 & icmp_ln86_43_fu_494_p2);

assign and_ln102_55_fu_774_p2 = (xor_ln104_21_fu_702_p2 & icmp_ln86_45_fu_506_p2);

assign and_ln102_56_fu_1060_p2 = (xor_ln104_22_fu_1026_p2 & icmp_ln86_47_reg_1494);

assign and_ln102_57_fu_1075_p2 = (xor_ln104_23_fu_1036_p2 & icmp_ln86_49_reg_1504);

assign and_ln102_58_fu_1091_p2 = (xor_ln104_24_fu_1046_p2 & icmp_ln86_51_reg_1514);

assign and_ln102_59_fu_1111_p2 = (xor_ln104_26_fu_1055_p2 & icmp_ln86_54_reg_1529);

assign and_ln102_fu_582_p2 = (icmp_ln86_fu_386_p2 & icmp_ln86_26_fu_392_p2);

assign and_ln104_10_fu_726_p2 = (xor_ln104_25_fu_720_p2 & and_ln102_29_fu_654_p2);

assign and_ln104_5_fu_612_p2 = (xor_ln104_fu_576_p2 & xor_ln104_14_fu_606_p2);

assign and_ln104_6_fu_630_p2 = (xor_ln104_15_fu_624_p2 & and_ln102_fu_582_p2);

assign and_ln104_7_fu_648_p2 = (xor_ln104_16_fu_642_p2 & and_ln104_fu_594_p2);

assign and_ln104_8_fu_1021_p2 = (xor_ln104_17_fu_1016_p2 & and_ln102_25_reg_1534);

assign and_ln104_9_fu_666_p2 = (xor_ln104_18_fu_660_p2 & and_ln104_5_fu_612_p2);

assign and_ln104_fu_594_p2 = (xor_ln104_13_fu_588_p2 & icmp_ln86_fu_386_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((or_ln117_54_fu_1312_p2[0:0] == 1'b1) ? tmp_fu_1325_p65 : 12'd0);

assign icmp_ln86_2034_fu_534_p2 = (($signed(tmp_38_fu_524_p4) < $signed(8'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_26_fu_392_p2 = (($signed(x_47_val) < $signed(18'd99431)) ? 1'b1 : 1'b0);

assign icmp_ln86_27_fu_398_p2 = (($signed(x_50_val) < $signed(18'd93721)) ? 1'b1 : 1'b0);

assign icmp_ln86_28_fu_404_p2 = (($signed(x_31_val) < $signed(18'd1610)) ? 1'b1 : 1'b0);

assign icmp_ln86_29_fu_410_p2 = (($signed(x_1_val) < $signed(18'd51508)) ? 1'b1 : 1'b0);

assign icmp_ln86_30_fu_416_p2 = (($signed(x_35_val) < $signed(18'd40)) ? 1'b1 : 1'b0);

assign icmp_ln86_31_fu_422_p2 = (($signed(x_47_val) < $signed(18'd91314)) ? 1'b1 : 1'b0);

assign icmp_ln86_32_fu_428_p2 = (($signed(x_7_val) < $signed(18'd7819)) ? 1'b1 : 1'b0);

assign icmp_ln86_33_fu_434_p2 = (($signed(x_32_val) < $signed(18'd892)) ? 1'b1 : 1'b0);

assign icmp_ln86_34_fu_440_p2 = (($signed(x_29_val) < $signed(18'd8689)) ? 1'b1 : 1'b0);

assign icmp_ln86_35_fu_446_p2 = (($signed(x_7_val) < $signed(18'd7963)) ? 1'b1 : 1'b0);

assign icmp_ln86_36_fu_452_p2 = (($signed(x_40_val) < $signed(18'd1763)) ? 1'b1 : 1'b0);

assign icmp_ln86_37_fu_458_p2 = (($signed(x_14_val) < $signed(18'd48)) ? 1'b1 : 1'b0);

assign icmp_ln86_38_fu_464_p2 = (($signed(x_18_val) < $signed(18'd1085)) ? 1'b1 : 1'b0);

assign icmp_ln86_39_fu_470_p2 = (($signed(x_47_val) < $signed(18'd96694)) ? 1'b1 : 1'b0);

assign icmp_ln86_40_fu_476_p2 = (($signed(x_3_val) < $signed(18'd92283)) ? 1'b1 : 1'b0);

assign icmp_ln86_41_fu_482_p2 = (($signed(x_17_val) < $signed(18'd27)) ? 1'b1 : 1'b0);

assign icmp_ln86_42_fu_488_p2 = (($signed(x_29_val) < $signed(18'd6921)) ? 1'b1 : 1'b0);

assign icmp_ln86_43_fu_494_p2 = (($signed(x_32_val) < $signed(18'd917)) ? 1'b1 : 1'b0);

assign icmp_ln86_44_fu_500_p2 = (($signed(x_16_val) < $signed(18'd112)) ? 1'b1 : 1'b0);

assign icmp_ln86_45_fu_506_p2 = (($signed(x_7_val) < $signed(18'd8776)) ? 1'b1 : 1'b0);

assign icmp_ln86_46_fu_512_p2 = (($signed(x_52_val) < $signed(18'd31233)) ? 1'b1 : 1'b0);

assign icmp_ln86_47_fu_518_p2 = (($signed(x_1_val) < $signed(18'd151755)) ? 1'b1 : 1'b0);

assign icmp_ln86_49_fu_540_p2 = (($signed(x_10_val) < $signed(18'd756)) ? 1'b1 : 1'b0);

assign icmp_ln86_50_fu_546_p2 = (($signed(x_11_val) < $signed(18'd961)) ? 1'b1 : 1'b0);

assign icmp_ln86_51_fu_552_p2 = (($signed(x_47_val) < $signed(18'd90782)) ? 1'b1 : 1'b0);

assign icmp_ln86_52_fu_558_p2 = (($signed(x_50_val) < $signed(18'd95385)) ? 1'b1 : 1'b0);

assign icmp_ln86_53_fu_564_p2 = (($signed(x_49_val) < $signed(18'd92319)) ? 1'b1 : 1'b0);

assign icmp_ln86_54_fu_570_p2 = (($signed(x_7_val) < $signed(18'd9418)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_386_p2 = (($signed(x_7_val) < $signed(18'd8853)) ? 1'b1 : 1'b0);

assign or_ln117_26_fu_808_p2 = (and_ln102_36_fu_714_p2 | and_ln102_30_fu_672_p2);

assign or_ln117_27_fu_822_p2 = (or_ln117_26_fu_808_p2 | and_ln102_39_fu_744_p2);

assign or_ln117_28_fu_840_p2 = (and_ln102_36_fu_714_p2 | and_ln102_26_fu_618_p2);

assign or_ln117_29_fu_854_p2 = (or_ln117_28_fu_840_p2 | and_ln102_40_fu_750_p2);

assign or_ln117_30_fu_868_p2 = (or_ln117_28_fu_840_p2 | and_ln102_31_fu_684_p2);

assign or_ln117_31_fu_882_p2 = (or_ln117_30_fu_868_p2 | and_ln102_41_fu_762_p2);

assign or_ln117_32_fu_900_p2 = (and_ln102_fu_582_p2 | and_ln102_36_fu_714_p2);

assign or_ln117_33_fu_914_p2 = (or_ln117_32_fu_900_p2 | and_ln102_42_fu_768_p2);

assign or_ln117_34_fu_928_p2 = (or_ln117_32_fu_900_p2 | and_ln102_32_fu_696_p2);

assign or_ln117_35_fu_942_p2 = (or_ln117_34_fu_928_p2 | and_ln102_43_fu_780_p2);

assign or_ln117_36_fu_956_p2 = (or_ln117_32_fu_900_p2 | and_ln102_27_fu_636_p2);

assign or_ln117_37_fu_970_p2 = (or_ln117_36_fu_956_p2 | and_ln102_44_fu_786_p2);

assign or_ln117_38_fu_984_p2 = (or_ln117_36_fu_956_p2 | and_ln102_33_fu_708_p2);

assign or_ln117_39_fu_1121_p2 = (or_ln117_38_reg_1559 | and_ln102_45_fu_1065_p2);

assign or_ln117_40_fu_1006_p2 = (icmp_ln86_fu_386_p2 | and_ln102_36_fu_714_p2);

assign or_ln117_41_fu_1137_p2 = (or_ln117_40_reg_1569 | and_ln102_46_fu_1070_p2);

assign or_ln117_42_fu_1149_p2 = (or_ln117_40_reg_1569 | and_ln102_34_fu_1031_p2);

assign or_ln117_43_fu_1162_p2 = (or_ln117_42_fu_1149_p2 | and_ln102_47_fu_1080_p2);

assign or_ln117_44_fu_1176_p2 = (or_ln117_40_reg_1569 | and_ln102_28_fu_1012_p2);

assign or_ln117_45_fu_1189_p2 = (or_ln117_44_fu_1176_p2 | and_ln102_48_fu_1086_p2);

assign or_ln117_46_fu_1203_p2 = (or_ln117_44_fu_1176_p2 | and_ln102_35_fu_1041_p2);

assign or_ln117_47_fu_1217_p2 = (or_ln117_46_fu_1203_p2 | and_ln102_49_fu_1096_p2);

assign or_ln117_48_fu_1231_p2 = (or_ln117_40_reg_1569 | and_ln102_25_reg_1534);

assign or_ln117_49_fu_1243_p2 = (or_ln117_48_fu_1231_p2 | and_ln102_50_fu_1102_p2);

assign or_ln117_50_fu_1257_p2 = (or_ln117_48_fu_1231_p2 | and_ln104_10_reg_1553);

assign or_ln117_51_fu_1270_p2 = (or_ln117_50_fu_1257_p2 | and_ln102_51_fu_1106_p2);

assign or_ln117_52_fu_1284_p2 = (or_ln117_50_fu_1257_p2 | and_ln102_37_fu_1051_p2);

assign or_ln117_53_fu_1298_p2 = (or_ln117_52_fu_1284_p2 | and_ln102_52_fu_1116_p2);

assign or_ln117_54_fu_1312_p2 = (or_ln117_50_fu_1257_p2 | and_ln104_9_reg_1546);

assign or_ln117_fu_792_p2 = (and_ln102_38_fu_732_p2 | and_ln102_36_fu_714_p2);

assign select_ln117_26_fu_828_p3 = ((or_ln117_26_fu_808_p2[0:0] == 1'b1) ? select_ln117_fu_814_p3 : 2'd3);

assign select_ln117_27_fu_846_p3 = ((or_ln117_27_fu_822_p2[0:0] == 1'b1) ? zext_ln117_2_fu_836_p1 : 3'd4);

assign select_ln117_28_fu_860_p3 = ((or_ln117_28_fu_840_p2[0:0] == 1'b1) ? select_ln117_27_fu_846_p3 : 3'd5);

assign select_ln117_29_fu_874_p3 = ((or_ln117_29_fu_854_p2[0:0] == 1'b1) ? select_ln117_28_fu_860_p3 : 3'd6);

assign select_ln117_30_fu_888_p3 = ((or_ln117_30_fu_868_p2[0:0] == 1'b1) ? select_ln117_29_fu_874_p3 : 3'd7);

assign select_ln117_31_fu_906_p3 = ((or_ln117_31_fu_882_p2[0:0] == 1'b1) ? zext_ln117_3_fu_896_p1 : 4'd8);

assign select_ln117_32_fu_920_p3 = ((or_ln117_32_fu_900_p2[0:0] == 1'b1) ? select_ln117_31_fu_906_p3 : 4'd9);

assign select_ln117_33_fu_934_p3 = ((or_ln117_33_fu_914_p2[0:0] == 1'b1) ? select_ln117_32_fu_920_p3 : 4'd10);

assign select_ln117_34_fu_948_p3 = ((or_ln117_34_fu_928_p2[0:0] == 1'b1) ? select_ln117_33_fu_934_p3 : 4'd11);

assign select_ln117_35_fu_962_p3 = ((or_ln117_35_fu_942_p2[0:0] == 1'b1) ? select_ln117_34_fu_948_p3 : 4'd12);

assign select_ln117_36_fu_976_p3 = ((or_ln117_36_fu_956_p2[0:0] == 1'b1) ? select_ln117_35_fu_962_p3 : 4'd13);

assign select_ln117_37_fu_990_p3 = ((or_ln117_37_fu_970_p2[0:0] == 1'b1) ? select_ln117_36_fu_976_p3 : 4'd14);

assign select_ln117_38_fu_998_p3 = ((or_ln117_38_fu_984_p2[0:0] == 1'b1) ? select_ln117_37_fu_990_p3 : 4'd15);

assign select_ln117_39_fu_1129_p3 = ((or_ln117_39_fu_1121_p2[0:0] == 1'b1) ? zext_ln117_4_fu_1126_p1 : 5'd16);

assign select_ln117_40_fu_1142_p3 = ((or_ln117_40_reg_1569[0:0] == 1'b1) ? select_ln117_39_fu_1129_p3 : 5'd17);

assign select_ln117_41_fu_1154_p3 = ((or_ln117_41_fu_1137_p2[0:0] == 1'b1) ? select_ln117_40_fu_1142_p3 : 5'd18);

assign select_ln117_42_fu_1168_p3 = ((or_ln117_42_fu_1149_p2[0:0] == 1'b1) ? select_ln117_41_fu_1154_p3 : 5'd19);

assign select_ln117_43_fu_1181_p3 = ((or_ln117_43_fu_1162_p2[0:0] == 1'b1) ? select_ln117_42_fu_1168_p3 : 5'd20);

assign select_ln117_44_fu_1195_p3 = ((or_ln117_44_fu_1176_p2[0:0] == 1'b1) ? select_ln117_43_fu_1181_p3 : 5'd21);

assign select_ln117_45_fu_1209_p3 = ((or_ln117_45_fu_1189_p2[0:0] == 1'b1) ? select_ln117_44_fu_1195_p3 : 5'd22);

assign select_ln117_46_fu_1223_p3 = ((or_ln117_46_fu_1203_p2[0:0] == 1'b1) ? select_ln117_45_fu_1209_p3 : 5'd23);

assign select_ln117_47_fu_1235_p3 = ((or_ln117_47_fu_1217_p2[0:0] == 1'b1) ? select_ln117_46_fu_1223_p3 : 5'd24);

assign select_ln117_48_fu_1249_p3 = ((or_ln117_48_fu_1231_p2[0:0] == 1'b1) ? select_ln117_47_fu_1235_p3 : 5'd25);

assign select_ln117_49_fu_1262_p3 = ((or_ln117_49_fu_1243_p2[0:0] == 1'b1) ? select_ln117_48_fu_1249_p3 : 5'd26);

assign select_ln117_50_fu_1276_p3 = ((or_ln117_50_fu_1257_p2[0:0] == 1'b1) ? select_ln117_49_fu_1262_p3 : 5'd27);

assign select_ln117_51_fu_1290_p3 = ((or_ln117_51_fu_1270_p2[0:0] == 1'b1) ? select_ln117_50_fu_1276_p3 : 5'd28);

assign select_ln117_52_fu_1304_p3 = ((or_ln117_52_fu_1284_p2[0:0] == 1'b1) ? select_ln117_51_fu_1290_p3 : 5'd29);

assign select_ln117_fu_814_p3 = ((or_ln117_fu_792_p2[0:0] == 1'b1) ? zext_ln117_fu_804_p1 : 2'd2);

assign tmp_38_fu_524_p4 = {{x_39_val[17:10]}};

assign tmp_fu_1325_p63 = 'bx;

assign tmp_fu_1325_p64 = ((or_ln117_53_fu_1298_p2[0:0] == 1'b1) ? select_ln117_52_fu_1304_p3 : 5'd30);

assign xor_ln104_13_fu_588_p2 = (icmp_ln86_26_fu_392_p2 ^ 1'd1);

assign xor_ln104_14_fu_606_p2 = (icmp_ln86_27_fu_398_p2 ^ 1'd1);

assign xor_ln104_15_fu_624_p2 = (icmp_ln86_28_fu_404_p2 ^ 1'd1);

assign xor_ln104_16_fu_642_p2 = (icmp_ln86_29_fu_410_p2 ^ 1'd1);

assign xor_ln104_17_fu_1016_p2 = (icmp_ln86_30_reg_1465 ^ 1'd1);

assign xor_ln104_18_fu_660_p2 = (icmp_ln86_31_fu_422_p2 ^ 1'd1);

assign xor_ln104_19_fu_678_p2 = (icmp_ln86_32_fu_428_p2 ^ 1'd1);

assign xor_ln104_20_fu_690_p2 = (icmp_ln86_33_fu_434_p2 ^ 1'd1);

assign xor_ln104_21_fu_702_p2 = (icmp_ln86_34_fu_440_p2 ^ 1'd1);

assign xor_ln104_22_fu_1026_p2 = (icmp_ln86_35_reg_1471 ^ 1'd1);

assign xor_ln104_23_fu_1036_p2 = (icmp_ln86_36_reg_1476 ^ 1'd1);

assign xor_ln104_24_fu_1046_p2 = (icmp_ln86_37_reg_1482 ^ 1'd1);

assign xor_ln104_25_fu_720_p2 = (icmp_ln86_38_fu_464_p2 ^ 1'd1);

assign xor_ln104_26_fu_1055_p2 = (icmp_ln86_39_reg_1488 ^ 1'd1);

assign xor_ln104_fu_576_p2 = (icmp_ln86_fu_386_p2 ^ 1'd1);

assign xor_ln117_fu_798_p2 = (1'd1 ^ and_ln102_36_fu_714_p2);

assign zext_ln117_2_fu_836_p1 = select_ln117_26_fu_828_p3;

assign zext_ln117_3_fu_896_p1 = select_ln117_30_fu_888_p3;

assign zext_ln117_4_fu_1126_p1 = select_ln117_38_reg_1564;

assign zext_ln117_fu_804_p1 = xor_ln117_fu_798_p2;

endmodule //my_prj_decision_function_1
