// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_34 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_3_val,
        x_6_val,
        x_7_val,
        x_9_val,
        x_10_val,
        x_11_val,
        x_18_val,
        x_19_val,
        x_44_val,
        x_47_val,
        x_48_val,
        x_49_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_3_val;
input  [17:0] x_6_val;
input  [17:0] x_7_val;
input  [17:0] x_9_val;
input  [17:0] x_10_val;
input  [17:0] x_11_val;
input  [17:0] x_18_val;
input  [17:0] x_19_val;
input  [17:0] x_44_val;
input  [17:0] x_47_val;
input  [17:0] x_48_val;
input  [17:0] x_49_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_914_fu_322_p2;
reg   [0:0] icmp_ln86_914_reg_909;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_920_fu_358_p2;
reg   [0:0] icmp_ln86_920_reg_915;
wire   [0:0] icmp_ln86_921_fu_364_p2;
reg   [0:0] icmp_ln86_921_reg_920;
wire   [0:0] and_ln104_179_fu_454_p2;
reg   [0:0] and_ln104_179_reg_925;
wire   [0:0] or_ln117_840_fu_724_p2;
reg   [0:0] or_ln117_840_reg_932;
wire   [3:0] select_ln117_889_fu_738_p3;
reg   [3:0] select_ln117_889_reg_939;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln86_fu_262_p2;
wire   [0:0] icmp_ln86_905_fu_268_p2;
wire   [0:0] icmp_ln86_906_fu_274_p2;
wire   [0:0] xor_ln104_fu_370_p2;
wire   [0:0] xor_ln104_435_fu_394_p2;
wire   [0:0] icmp_ln86_907_fu_280_p2;
wire   [0:0] and_ln102_fu_376_p2;
wire   [0:0] icmp_ln86_908_fu_286_p2;
wire   [0:0] xor_ln104_434_fu_382_p2;
wire   [0:0] and_ln102_886_fu_412_p2;
wire   [0:0] icmp_ln86_909_fu_292_p2;
wire   [0:0] and_ln102_870_fu_388_p2;
wire   [0:0] xor_ln104_436_fu_430_p2;
wire   [0:0] icmp_ln86_910_fu_298_p2;
wire   [0:0] and_ln104_fu_400_p2;
wire   [0:0] xor_ln104_437_fu_448_p2;
wire   [0:0] icmp_ln86_911_fu_304_p2;
wire   [0:0] and_ln102_873_fu_424_p2;
wire   [0:0] icmp_ln86_912_fu_310_p2;
wire   [0:0] and_ln104_178_fu_436_p2;
wire   [0:0] icmp_ln86_913_fu_316_p2;
wire   [0:0] and_ln102_874_fu_442_p2;
wire   [0:0] xor_ln104_440_fu_490_p2;
wire   [0:0] icmp_ln86_915_fu_328_p2;
wire   [0:0] and_ln102_875_fu_460_p2;
wire   [0:0] icmp_ln86_916_fu_334_p2;
wire   [0:0] xor_ln104_438_fu_466_p2;
wire   [0:0] and_ln102_887_fu_508_p2;
wire   [0:0] icmp_ln86_917_fu_340_p2;
wire   [0:0] and_ln102_876_fu_472_p2;
wire   [0:0] icmp_ln86_918_fu_346_p2;
wire   [0:0] xor_ln104_439_fu_478_p2;
wire   [0:0] and_ln102_888_fu_526_p2;
wire   [0:0] icmp_ln86_919_fu_352_p2;
wire   [0:0] and_ln104_180_fu_496_p2;
wire   [0:0] and_ln102_871_fu_406_p2;
wire   [0:0] xor_ln117_fu_544_p2;
wire   [0:0] and_ln102_872_fu_418_p2;
wire   [1:0] zext_ln117_fu_550_p1;
wire   [0:0] or_ln117_fu_554_p2;
wire   [1:0] select_ln117_fu_560_p3;
wire   [1:0] select_ln117_877_fu_568_p3;
wire   [0:0] and_ln102_877_fu_484_p2;
wire   [2:0] zext_ln117_99_fu_576_p1;
wire   [0:0] or_ln117_830_fu_580_p2;
wire   [0:0] and_ln102_879_fu_502_p2;
wire   [2:0] select_ln117_878_fu_586_p3;
wire   [0:0] or_ln117_831_fu_594_p2;
wire   [2:0] select_ln117_879_fu_600_p3;
wire   [0:0] or_ln117_832_fu_608_p2;
wire   [0:0] and_ln102_880_fu_514_p2;
wire   [2:0] select_ln117_880_fu_614_p3;
wire   [2:0] select_ln117_881_fu_628_p3;
wire   [0:0] or_ln117_833_fu_622_p2;
wire   [3:0] zext_ln117_100_fu_636_p1;
wire   [0:0] or_ln117_834_fu_640_p2;
wire   [0:0] and_ln102_881_fu_520_p2;
wire   [3:0] select_ln117_882_fu_646_p3;
wire   [0:0] or_ln117_835_fu_654_p2;
wire   [3:0] select_ln117_883_fu_660_p3;
wire   [0:0] or_ln117_836_fu_668_p2;
wire   [0:0] and_ln102_882_fu_532_p2;
wire   [3:0] select_ln117_884_fu_674_p3;
wire   [0:0] or_ln117_837_fu_682_p2;
wire   [3:0] select_ln117_885_fu_688_p3;
wire   [0:0] or_ln117_838_fu_696_p2;
wire   [0:0] and_ln102_883_fu_538_p2;
wire   [3:0] select_ln117_886_fu_702_p3;
wire   [0:0] or_ln117_839_fu_710_p2;
wire   [3:0] select_ln117_887_fu_716_p3;
wire   [3:0] select_ln117_888_fu_730_p3;
wire   [0:0] and_ln102_878_fu_746_p2;
wire   [0:0] xor_ln104_441_fu_750_p2;
wire   [0:0] and_ln102_889_fu_760_p2;
wire   [0:0] and_ln102_884_fu_755_p2;
wire   [0:0] or_ln117_841_fu_770_p2;
wire   [4:0] zext_ln117_101_fu_775_p1;
wire   [0:0] or_ln117_842_fu_778_p2;
wire   [0:0] and_ln102_885_fu_765_p2;
wire   [4:0] select_ln117_890_fu_783_p3;
wire   [0:0] or_ln117_843_fu_791_p2;
wire   [4:0] select_ln117_891_fu_797_p3;
wire   [11:0] tmp_fu_817_p39;
wire   [4:0] tmp_fu_817_p40;
wire   [0:0] or_ln117_844_fu_805_p2;
wire   [11:0] tmp_fu_817_p41;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] tmp_fu_817_p1;
wire   [4:0] tmp_fu_817_p3;
wire   [4:0] tmp_fu_817_p5;
wire   [4:0] tmp_fu_817_p7;
wire   [4:0] tmp_fu_817_p9;
wire   [4:0] tmp_fu_817_p11;
wire   [4:0] tmp_fu_817_p13;
wire   [4:0] tmp_fu_817_p15;
wire   [4:0] tmp_fu_817_p17;
wire   [4:0] tmp_fu_817_p19;
wire   [4:0] tmp_fu_817_p21;
wire   [4:0] tmp_fu_817_p23;
wire   [4:0] tmp_fu_817_p25;
wire   [4:0] tmp_fu_817_p27;
wire   [4:0] tmp_fu_817_p29;
wire   [4:0] tmp_fu_817_p31;
wire  signed [4:0] tmp_fu_817_p33;
wire  signed [4:0] tmp_fu_817_p35;
wire  signed [4:0] tmp_fu_817_p37;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_39_5_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_39_5_12_1_1_U1439(
    .din0(12'd3744),
    .din1(12'd679),
    .din2(12'd223),
    .din3(12'd3577),
    .din4(12'd1602),
    .din5(12'd530),
    .din6(12'd3918),
    .din7(12'd57),
    .din8(12'd4078),
    .din9(12'd58),
    .din10(12'd3609),
    .din11(12'd511),
    .din12(12'd4028),
    .din13(12'd3961),
    .din14(12'd1139),
    .din15(12'd802),
    .din16(12'd4091),
    .din17(12'd3797),
    .din18(12'd4087),
    .def(tmp_fu_817_p39),
    .sel(tmp_fu_817_p40),
    .dout(tmp_fu_817_p41)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln104_179_reg_925 <= and_ln104_179_fu_454_p2;
        icmp_ln86_914_reg_909 <= icmp_ln86_914_fu_322_p2;
        icmp_ln86_920_reg_915 <= icmp_ln86_920_fu_358_p2;
        icmp_ln86_921_reg_920 <= icmp_ln86_921_fu_364_p2;
        or_ln117_840_reg_932 <= or_ln117_840_fu_724_p2;
        select_ln117_889_reg_939 <= select_ln117_889_fu_738_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln102_870_fu_388_p2 = (xor_ln104_fu_370_p2 & icmp_ln86_906_fu_274_p2);

assign and_ln102_871_fu_406_p2 = (icmp_ln86_907_fu_280_p2 & and_ln102_fu_376_p2);

assign and_ln102_872_fu_418_p2 = (icmp_ln86_fu_262_p2 & and_ln102_886_fu_412_p2);

assign and_ln102_873_fu_424_p2 = (icmp_ln86_909_fu_292_p2 & and_ln102_870_fu_388_p2);

assign and_ln102_874_fu_442_p2 = (icmp_ln86_910_fu_298_p2 & and_ln104_fu_400_p2);

assign and_ln102_875_fu_460_p2 = (icmp_ln86_911_fu_304_p2 & and_ln102_873_fu_424_p2);

assign and_ln102_876_fu_472_p2 = (icmp_ln86_912_fu_310_p2 & and_ln104_178_fu_436_p2);

assign and_ln102_877_fu_484_p2 = (icmp_ln86_913_fu_316_p2 & and_ln102_874_fu_442_p2);

assign and_ln102_878_fu_746_p2 = (icmp_ln86_914_reg_909 & and_ln104_179_reg_925);

assign and_ln102_879_fu_502_p2 = (icmp_ln86_915_fu_328_p2 & and_ln102_875_fu_460_p2);

assign and_ln102_880_fu_514_p2 = (and_ln102_887_fu_508_p2 & and_ln102_873_fu_424_p2);

assign and_ln102_881_fu_520_p2 = (icmp_ln86_917_fu_340_p2 & and_ln102_876_fu_472_p2);

assign and_ln102_882_fu_532_p2 = (and_ln104_178_fu_436_p2 & and_ln102_888_fu_526_p2);

assign and_ln102_883_fu_538_p2 = (icmp_ln86_919_fu_352_p2 & and_ln104_180_fu_496_p2);

assign and_ln102_884_fu_755_p2 = (icmp_ln86_920_reg_915 & and_ln102_878_fu_746_p2);

assign and_ln102_885_fu_765_p2 = (and_ln104_179_reg_925 & and_ln102_889_fu_760_p2);

assign and_ln102_886_fu_412_p2 = (xor_ln104_434_fu_382_p2 & icmp_ln86_908_fu_286_p2);

assign and_ln102_887_fu_508_p2 = (xor_ln104_438_fu_466_p2 & icmp_ln86_916_fu_334_p2);

assign and_ln102_888_fu_526_p2 = (xor_ln104_439_fu_478_p2 & icmp_ln86_918_fu_346_p2);

assign and_ln102_889_fu_760_p2 = (xor_ln104_441_fu_750_p2 & icmp_ln86_921_reg_920);

assign and_ln102_fu_376_p2 = (icmp_ln86_fu_262_p2 & icmp_ln86_905_fu_268_p2);

assign and_ln104_178_fu_436_p2 = (xor_ln104_436_fu_430_p2 & and_ln102_870_fu_388_p2);

assign and_ln104_179_fu_454_p2 = (xor_ln104_437_fu_448_p2 & and_ln104_fu_400_p2);

assign and_ln104_180_fu_496_p2 = (xor_ln104_440_fu_490_p2 & and_ln102_874_fu_442_p2);

assign and_ln104_fu_400_p2 = (xor_ln104_fu_370_p2 & xor_ln104_435_fu_394_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((or_ln117_844_fu_805_p2[0:0] == 1'b1) ? tmp_fu_817_p41 : 12'd0);

assign icmp_ln86_905_fu_268_p2 = (($signed(x_44_val) < $signed(18'd12)) ? 1'b1 : 1'b0);

assign icmp_ln86_906_fu_274_p2 = (($signed(x_19_val) < $signed(18'd3013)) ? 1'b1 : 1'b0);

assign icmp_ln86_907_fu_280_p2 = (($signed(x_48_val) < $signed(18'd89015)) ? 1'b1 : 1'b0);

assign icmp_ln86_908_fu_286_p2 = (($signed(x_11_val) < $signed(18'd221)) ? 1'b1 : 1'b0);

assign icmp_ln86_909_fu_292_p2 = (($signed(x_18_val) < $signed(18'd3676)) ? 1'b1 : 1'b0);

assign icmp_ln86_910_fu_298_p2 = (($signed(x_1_val) < $signed(18'd217047)) ? 1'b1 : 1'b0);

assign icmp_ln86_911_fu_304_p2 = (($signed(x_49_val) < $signed(18'd12747)) ? 1'b1 : 1'b0);

assign icmp_ln86_912_fu_310_p2 = (($signed(x_3_val) < $signed(18'd76592)) ? 1'b1 : 1'b0);

assign icmp_ln86_913_fu_316_p2 = (($signed(x_9_val) < $signed(18'd60)) ? 1'b1 : 1'b0);

assign icmp_ln86_914_fu_322_p2 = (($signed(x_1_val) < $signed(18'd219517)) ? 1'b1 : 1'b0);

assign icmp_ln86_915_fu_328_p2 = (($signed(x_6_val) < $signed(18'd4833)) ? 1'b1 : 1'b0);

assign icmp_ln86_916_fu_334_p2 = (($signed(x_48_val) < $signed(18'd87628)) ? 1'b1 : 1'b0);

assign icmp_ln86_917_fu_340_p2 = (($signed(x_9_val) < $signed(18'd438)) ? 1'b1 : 1'b0);

assign icmp_ln86_918_fu_346_p2 = (($signed(x_47_val) < $signed(18'd87577)) ? 1'b1 : 1'b0);

assign icmp_ln86_919_fu_352_p2 = (($signed(x_10_val) < $signed(18'd988)) ? 1'b1 : 1'b0);

assign icmp_ln86_920_fu_358_p2 = (($signed(x_1_val) < $signed(18'd217257)) ? 1'b1 : 1'b0);

assign icmp_ln86_921_fu_364_p2 = (($signed(x_7_val) < $signed(18'd5177)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_262_p2 = (($signed(x_1_val) < $signed(18'd70370)) ? 1'b1 : 1'b0);

assign or_ln117_830_fu_580_p2 = (icmp_ln86_fu_262_p2 | and_ln102_877_fu_484_p2);

assign or_ln117_831_fu_594_p2 = (or_ln117_830_fu_580_p2 | and_ln102_879_fu_502_p2);

assign or_ln117_832_fu_608_p2 = (or_ln117_830_fu_580_p2 | and_ln102_875_fu_460_p2);

assign or_ln117_833_fu_622_p2 = (or_ln117_832_fu_608_p2 | and_ln102_880_fu_514_p2);

assign or_ln117_834_fu_640_p2 = (or_ln117_830_fu_580_p2 | and_ln102_873_fu_424_p2);

assign or_ln117_835_fu_654_p2 = (or_ln117_834_fu_640_p2 | and_ln102_881_fu_520_p2);

assign or_ln117_836_fu_668_p2 = (or_ln117_834_fu_640_p2 | and_ln102_876_fu_472_p2);

assign or_ln117_837_fu_682_p2 = (or_ln117_836_fu_668_p2 | and_ln102_882_fu_532_p2);

assign or_ln117_838_fu_696_p2 = (or_ln117_830_fu_580_p2 | and_ln102_870_fu_388_p2);

assign or_ln117_839_fu_710_p2 = (or_ln117_838_fu_696_p2 | and_ln102_883_fu_538_p2);

assign or_ln117_840_fu_724_p2 = (or_ln117_838_fu_696_p2 | and_ln104_180_fu_496_p2);

assign or_ln117_841_fu_770_p2 = (or_ln117_840_reg_932 | and_ln102_884_fu_755_p2);

assign or_ln117_842_fu_778_p2 = (or_ln117_840_reg_932 | and_ln102_878_fu_746_p2);

assign or_ln117_843_fu_791_p2 = (or_ln117_842_fu_778_p2 | and_ln102_885_fu_765_p2);

assign or_ln117_844_fu_805_p2 = (or_ln117_840_reg_932 | and_ln104_179_reg_925);

assign or_ln117_fu_554_p2 = (and_ln102_fu_376_p2 | and_ln102_872_fu_418_p2);

assign select_ln117_877_fu_568_p3 = ((or_ln117_fu_554_p2[0:0] == 1'b1) ? select_ln117_fu_560_p3 : 2'd3);

assign select_ln117_878_fu_586_p3 = ((icmp_ln86_fu_262_p2[0:0] == 1'b1) ? zext_ln117_99_fu_576_p1 : 3'd4);

assign select_ln117_879_fu_600_p3 = ((or_ln117_830_fu_580_p2[0:0] == 1'b1) ? select_ln117_878_fu_586_p3 : 3'd5);

assign select_ln117_880_fu_614_p3 = ((or_ln117_831_fu_594_p2[0:0] == 1'b1) ? select_ln117_879_fu_600_p3 : 3'd6);

assign select_ln117_881_fu_628_p3 = ((or_ln117_832_fu_608_p2[0:0] == 1'b1) ? select_ln117_880_fu_614_p3 : 3'd7);

assign select_ln117_882_fu_646_p3 = ((or_ln117_833_fu_622_p2[0:0] == 1'b1) ? zext_ln117_100_fu_636_p1 : 4'd8);

assign select_ln117_883_fu_660_p3 = ((or_ln117_834_fu_640_p2[0:0] == 1'b1) ? select_ln117_882_fu_646_p3 : 4'd9);

assign select_ln117_884_fu_674_p3 = ((or_ln117_835_fu_654_p2[0:0] == 1'b1) ? select_ln117_883_fu_660_p3 : 4'd10);

assign select_ln117_885_fu_688_p3 = ((or_ln117_836_fu_668_p2[0:0] == 1'b1) ? select_ln117_884_fu_674_p3 : 4'd11);

assign select_ln117_886_fu_702_p3 = ((or_ln117_837_fu_682_p2[0:0] == 1'b1) ? select_ln117_885_fu_688_p3 : 4'd12);

assign select_ln117_887_fu_716_p3 = ((or_ln117_838_fu_696_p2[0:0] == 1'b1) ? select_ln117_886_fu_702_p3 : 4'd13);

assign select_ln117_888_fu_730_p3 = ((or_ln117_839_fu_710_p2[0:0] == 1'b1) ? select_ln117_887_fu_716_p3 : 4'd14);

assign select_ln117_889_fu_738_p3 = ((or_ln117_840_fu_724_p2[0:0] == 1'b1) ? select_ln117_888_fu_730_p3 : 4'd15);

assign select_ln117_890_fu_783_p3 = ((or_ln117_841_fu_770_p2[0:0] == 1'b1) ? zext_ln117_101_fu_775_p1 : 5'd16);

assign select_ln117_891_fu_797_p3 = ((or_ln117_842_fu_778_p2[0:0] == 1'b1) ? select_ln117_890_fu_783_p3 : 5'd17);

assign select_ln117_fu_560_p3 = ((and_ln102_fu_376_p2[0:0] == 1'b1) ? zext_ln117_fu_550_p1 : 2'd2);

assign tmp_fu_817_p39 = 'bx;

assign tmp_fu_817_p40 = ((or_ln117_843_fu_791_p2[0:0] == 1'b1) ? select_ln117_891_fu_797_p3 : 5'd18);

assign xor_ln104_434_fu_382_p2 = (icmp_ln86_905_fu_268_p2 ^ 1'd1);

assign xor_ln104_435_fu_394_p2 = (icmp_ln86_906_fu_274_p2 ^ 1'd1);

assign xor_ln104_436_fu_430_p2 = (icmp_ln86_909_fu_292_p2 ^ 1'd1);

assign xor_ln104_437_fu_448_p2 = (icmp_ln86_910_fu_298_p2 ^ 1'd1);

assign xor_ln104_438_fu_466_p2 = (icmp_ln86_911_fu_304_p2 ^ 1'd1);

assign xor_ln104_439_fu_478_p2 = (icmp_ln86_912_fu_310_p2 ^ 1'd1);

assign xor_ln104_440_fu_490_p2 = (icmp_ln86_913_fu_316_p2 ^ 1'd1);

assign xor_ln104_441_fu_750_p2 = (icmp_ln86_914_reg_909 ^ 1'd1);

assign xor_ln104_fu_370_p2 = (icmp_ln86_fu_262_p2 ^ 1'd1);

assign xor_ln117_fu_544_p2 = (1'd1 ^ and_ln102_871_fu_406_p2);

assign zext_ln117_100_fu_636_p1 = select_ln117_881_fu_628_p3;

assign zext_ln117_101_fu_775_p1 = select_ln117_889_reg_939;

assign zext_ln117_99_fu_576_p1 = select_ln117_877_fu_568_p3;

assign zext_ln117_fu_550_p1 = xor_ln117_fu_544_p2;

endmodule //my_prj_decision_function_34
