// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_76 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_3_val,
        x_7_val,
        x_9_val,
        x_12_val,
        x_15_val,
        x_16_val,
        x_17_val,
        x_25_val,
        x_36_val,
        x_47_val,
        x_48_val,
        x_50_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_3_val;
input  [17:0] x_7_val;
input  [17:0] x_9_val;
input  [17:0] x_12_val;
input  [17:0] x_15_val;
input  [17:0] x_16_val;
input  [17:0] x_17_val;
input  [17:0] x_25_val;
input  [17:0] x_36_val;
input  [17:0] x_47_val;
input  [17:0] x_48_val;
input  [17:0] x_50_val;
input  [17:0] x_52_val;
output  [12:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_344_p2;
reg   [0:0] icmp_ln86_reg_1410;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_655_fu_356_p2;
reg   [0:0] icmp_ln86_655_reg_1419;
wire   [0:0] icmp_ln86_658_fu_374_p2;
reg   [0:0] icmp_ln86_658_reg_1425;
wire   [0:0] icmp_ln86_659_fu_380_p2;
reg   [0:0] icmp_ln86_659_reg_1431;
wire   [0:0] icmp_ln86_664_fu_410_p2;
reg   [0:0] icmp_ln86_664_reg_1437;
wire   [0:0] icmp_ln86_665_fu_416_p2;
reg   [0:0] icmp_ln86_665_reg_1443;
wire   [0:0] icmp_ln86_666_fu_422_p2;
reg   [0:0] icmp_ln86_666_reg_1449;
wire   [0:0] icmp_ln86_667_fu_428_p2;
reg   [0:0] icmp_ln86_667_reg_1455;
wire   [0:0] icmp_ln86_676_fu_482_p2;
reg   [0:0] icmp_ln86_676_reg_1461;
wire   [0:0] icmp_ln86_677_fu_488_p2;
reg   [0:0] icmp_ln86_677_reg_1466;
wire   [0:0] icmp_ln86_678_fu_494_p2;
reg   [0:0] icmp_ln86_678_reg_1471;
wire   [0:0] icmp_ln86_679_fu_500_p2;
reg   [0:0] icmp_ln86_679_reg_1476;
wire   [0:0] icmp_ln86_680_fu_506_p2;
reg   [0:0] icmp_ln86_680_reg_1481;
wire   [0:0] icmp_ln86_681_fu_512_p2;
reg   [0:0] icmp_ln86_681_reg_1486;
wire   [0:0] icmp_ln86_682_fu_518_p2;
reg   [0:0] icmp_ln86_682_reg_1491;
wire   [0:0] icmp_ln86_683_fu_524_p2;
reg   [0:0] icmp_ln86_683_reg_1496;
wire   [4:0] select_ln117_648_fu_904_p3;
reg   [4:0] select_ln117_648_reg_1501;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln86_654_fu_350_p2;
wire   [0:0] xor_ln104_309_fu_536_p2;
wire   [0:0] icmp_ln86_656_fu_362_p2;
wire   [0:0] and_ln102_fu_530_p2;
wire   [0:0] xor_ln104_311_fu_554_p2;
wire   [0:0] icmp_ln86_657_fu_368_p2;
wire   [0:0] and_ln104_fu_542_p2;
wire   [0:0] xor_ln104_312_fu_572_p2;
wire   [0:0] icmp_ln86_660_fu_386_p2;
wire   [0:0] and_ln102_805_fu_548_p2;
wire   [0:0] icmp_ln86_661_fu_392_p2;
wire   [0:0] and_ln104_117_fu_560_p2;
wire   [0:0] icmp_ln86_662_fu_398_p2;
wire   [0:0] and_ln102_806_fu_566_p2;
wire   [0:0] icmp_ln86_663_fu_404_p2;
wire   [0:0] and_ln104_118_fu_578_p2;
wire   [0:0] icmp_ln86_668_fu_434_p2;
wire   [0:0] and_ln102_809_fu_584_p2;
wire   [0:0] icmp_ln86_669_fu_440_p2;
wire   [0:0] xor_ln104_315_fu_590_p2;
wire   [0:0] and_ln102_818_fu_638_p2;
wire   [0:0] icmp_ln86_670_fu_446_p2;
wire   [0:0] and_ln102_810_fu_596_p2;
wire   [0:0] icmp_ln86_671_fu_452_p2;
wire   [0:0] xor_ln104_316_fu_602_p2;
wire   [0:0] and_ln102_821_fu_656_p2;
wire   [0:0] icmp_ln86_672_fu_458_p2;
wire   [0:0] and_ln102_811_fu_608_p2;
wire   [0:0] icmp_ln86_673_fu_464_p2;
wire   [0:0] xor_ln104_317_fu_614_p2;
wire   [0:0] and_ln102_824_fu_674_p2;
wire   [0:0] icmp_ln86_674_fu_470_p2;
wire   [0:0] and_ln102_812_fu_620_p2;
wire   [0:0] icmp_ln86_675_fu_476_p2;
wire   [0:0] xor_ln104_318_fu_626_p2;
wire   [0:0] and_ln102_827_fu_692_p2;
wire   [0:0] and_ln102_817_fu_632_p2;
wire   [0:0] xor_ln117_fu_704_p2;
wire   [0:0] and_ln102_819_fu_644_p2;
wire   [1:0] zext_ln117_fu_710_p1;
wire   [0:0] or_ln117_fu_714_p2;
wire   [1:0] select_ln117_fu_720_p3;
wire   [1:0] select_ln117_635_fu_728_p3;
wire   [0:0] and_ln102_820_fu_650_p2;
wire   [2:0] zext_ln117_70_fu_736_p1;
wire   [0:0] or_ln117_576_fu_740_p2;
wire   [2:0] select_ln117_636_fu_746_p3;
wire   [0:0] or_ln117_577_fu_754_p2;
wire   [0:0] and_ln102_822_fu_662_p2;
wire   [2:0] select_ln117_637_fu_760_p3;
wire   [0:0] or_ln117_578_fu_768_p2;
wire   [2:0] select_ln117_638_fu_774_p3;
wire   [2:0] select_ln117_639_fu_782_p3;
wire   [0:0] and_ln102_823_fu_668_p2;
wire   [3:0] zext_ln117_71_fu_790_p1;
wire   [0:0] or_ln117_579_fu_794_p2;
wire   [3:0] select_ln117_640_fu_800_p3;
wire   [0:0] or_ln117_580_fu_808_p2;
wire   [0:0] and_ln102_825_fu_680_p2;
wire   [3:0] select_ln117_641_fu_814_p3;
wire   [0:0] or_ln117_581_fu_822_p2;
wire   [3:0] select_ln117_642_fu_828_p3;
wire   [0:0] or_ln117_582_fu_836_p2;
wire   [0:0] and_ln102_826_fu_686_p2;
wire   [3:0] select_ln117_643_fu_842_p3;
wire   [0:0] or_ln117_583_fu_850_p2;
wire   [3:0] select_ln117_644_fu_856_p3;
wire   [0:0] or_ln117_584_fu_864_p2;
wire   [0:0] and_ln102_828_fu_698_p2;
wire   [3:0] select_ln117_645_fu_870_p3;
wire   [0:0] or_ln117_585_fu_878_p2;
wire   [3:0] select_ln117_646_fu_884_p3;
wire   [3:0] select_ln117_647_fu_892_p3;
wire   [4:0] zext_ln117_72_fu_900_p1;
wire   [0:0] xor_ln104_fu_912_p2;
wire   [0:0] xor_ln104_310_fu_922_p2;
wire   [0:0] and_ln102_804_fu_917_p2;
wire   [0:0] xor_ln104_313_fu_938_p2;
wire   [0:0] and_ln104_116_fu_927_p2;
wire   [0:0] xor_ln104_314_fu_954_p2;
wire   [0:0] and_ln102_807_fu_933_p2;
wire   [0:0] and_ln104_119_fu_943_p2;
wire   [0:0] and_ln102_808_fu_949_p2;
wire   [0:0] and_ln104_120_fu_959_p2;
wire   [0:0] and_ln102_813_fu_965_p2;
wire   [0:0] xor_ln104_319_fu_970_p2;
wire   [0:0] and_ln102_830_fu_1010_p2;
wire   [0:0] and_ln102_814_fu_975_p2;
wire   [0:0] xor_ln104_320_fu_980_p2;
wire   [0:0] and_ln102_833_fu_1026_p2;
wire   [0:0] and_ln102_815_fu_985_p2;
wire   [0:0] xor_ln104_321_fu_990_p2;
wire   [0:0] and_ln102_836_fu_1042_p2;
wire   [0:0] and_ln102_816_fu_995_p2;
wire   [0:0] xor_ln104_322_fu_1000_p2;
wire   [0:0] and_ln102_839_fu_1058_p2;
wire   [0:0] and_ln102_829_fu_1005_p2;
wire   [0:0] or_ln117_586_fu_1069_p2;
wire   [0:0] or_ln117_587_fu_1074_p2;
wire   [0:0] and_ln102_831_fu_1015_p2;
wire   [4:0] select_ln117_649_fu_1079_p3;
wire   [0:0] or_ln117_588_fu_1086_p2;
wire   [4:0] select_ln117_650_fu_1092_p3;
wire   [0:0] or_ln117_589_fu_1100_p2;
wire   [0:0] and_ln102_832_fu_1021_p2;
wire   [4:0] select_ln117_651_fu_1105_p3;
wire   [0:0] or_ln117_590_fu_1113_p2;
wire   [4:0] select_ln117_652_fu_1119_p3;
wire   [0:0] or_ln117_591_fu_1127_p2;
wire   [0:0] and_ln102_834_fu_1031_p2;
wire   [4:0] select_ln117_653_fu_1133_p3;
wire   [0:0] or_ln117_592_fu_1141_p2;
wire   [4:0] select_ln117_654_fu_1147_p3;
wire   [0:0] or_ln117_593_fu_1155_p2;
wire   [0:0] and_ln102_835_fu_1037_p2;
wire   [4:0] select_ln117_655_fu_1160_p3;
wire   [0:0] or_ln117_594_fu_1168_p2;
wire   [4:0] select_ln117_656_fu_1174_p3;
wire   [0:0] or_ln117_595_fu_1182_p2;
wire   [0:0] and_ln102_837_fu_1047_p2;
wire   [4:0] select_ln117_657_fu_1188_p3;
wire   [0:0] or_ln117_596_fu_1196_p2;
wire   [4:0] select_ln117_658_fu_1202_p3;
wire   [0:0] or_ln117_597_fu_1210_p2;
wire   [0:0] and_ln102_838_fu_1053_p2;
wire   [4:0] select_ln117_659_fu_1216_p3;
wire   [0:0] or_ln117_598_fu_1224_p2;
wire   [4:0] select_ln117_660_fu_1230_p3;
wire   [0:0] or_ln117_599_fu_1238_p2;
wire   [0:0] and_ln102_840_fu_1063_p2;
wire   [4:0] select_ln117_661_fu_1244_p3;
wire   [0:0] or_ln117_600_fu_1252_p2;
wire   [4:0] select_ln117_662_fu_1258_p3;
wire   [12:0] agg_result_fu_1274_p65;
wire   [4:0] agg_result_fu_1274_p66;
wire   [12:0] agg_result_fu_1274_p67;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1274_p1;
wire   [4:0] agg_result_fu_1274_p3;
wire   [4:0] agg_result_fu_1274_p5;
wire   [4:0] agg_result_fu_1274_p7;
wire   [4:0] agg_result_fu_1274_p9;
wire   [4:0] agg_result_fu_1274_p11;
wire   [4:0] agg_result_fu_1274_p13;
wire   [4:0] agg_result_fu_1274_p15;
wire   [4:0] agg_result_fu_1274_p17;
wire   [4:0] agg_result_fu_1274_p19;
wire   [4:0] agg_result_fu_1274_p21;
wire   [4:0] agg_result_fu_1274_p23;
wire   [4:0] agg_result_fu_1274_p25;
wire   [4:0] agg_result_fu_1274_p27;
wire   [4:0] agg_result_fu_1274_p29;
wire   [4:0] agg_result_fu_1274_p31;
wire  signed [4:0] agg_result_fu_1274_p33;
wire  signed [4:0] agg_result_fu_1274_p35;
wire  signed [4:0] agg_result_fu_1274_p37;
wire  signed [4:0] agg_result_fu_1274_p39;
wire  signed [4:0] agg_result_fu_1274_p41;
wire  signed [4:0] agg_result_fu_1274_p43;
wire  signed [4:0] agg_result_fu_1274_p45;
wire  signed [4:0] agg_result_fu_1274_p47;
wire  signed [4:0] agg_result_fu_1274_p49;
wire  signed [4:0] agg_result_fu_1274_p51;
wire  signed [4:0] agg_result_fu_1274_p53;
wire  signed [4:0] agg_result_fu_1274_p55;
wire  signed [4:0] agg_result_fu_1274_p57;
wire  signed [4:0] agg_result_fu_1274_p59;
wire  signed [4:0] agg_result_fu_1274_p61;
wire  signed [4:0] agg_result_fu_1274_p63;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_65_5_13_1_1_x0 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 13 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 13 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 13 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 13 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 13 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 13 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 13 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 13 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 13 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 13 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 13 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 13 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 13 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 13 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 13 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 13 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 13 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 13 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 13 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 13 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 13 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 13 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 13 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 13 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 13 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 13 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 13 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 13 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 13 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 13 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 13 ),
    .CASE31( 5'h1F ),
    .din31_WIDTH( 13 ),
    .def_WIDTH( 13 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 13 ))
sparsemux_65_5_13_1_1_x0_U53(
    .din0(13'd7604),
    .din1(13'd7929),
    .din2(13'd8078),
    .din3(13'd868),
    .din4(13'd460),
    .din5(13'd7834),
    .din6(13'd996),
    .din7(13'd7987),
    .din8(13'd7984),
    .din9(13'd1977),
    .din10(13'd2424),
    .din11(13'd23),
    .din12(13'd1173),
    .din13(13'd8079),
    .din14(13'd7756),
    .din15(13'd7559),
    .din16(13'd7609),
    .din17(13'd7954),
    .din18(13'd7710),
    .din19(13'd7590),
    .din20(13'd7959),
    .din21(13'd1437),
    .din22(13'd767),
    .din23(13'd7957),
    .din24(13'd7640),
    .din25(13'd7972),
    .din26(13'd89),
    .din27(13'd7578),
    .din28(13'd7554),
    .din29(13'd89),
    .din30(13'd7636),
    .din31(13'd7571),
    .def(agg_result_fu_1274_p65),
    .sel(agg_result_fu_1274_p66),
    .dout(agg_result_fu_1274_p67)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_655_reg_1419 <= icmp_ln86_655_fu_356_p2;
        icmp_ln86_658_reg_1425 <= icmp_ln86_658_fu_374_p2;
        icmp_ln86_659_reg_1431 <= icmp_ln86_659_fu_380_p2;
        icmp_ln86_664_reg_1437 <= icmp_ln86_664_fu_410_p2;
        icmp_ln86_665_reg_1443 <= icmp_ln86_665_fu_416_p2;
        icmp_ln86_666_reg_1449 <= icmp_ln86_666_fu_422_p2;
        icmp_ln86_667_reg_1455 <= icmp_ln86_667_fu_428_p2;
        icmp_ln86_676_reg_1461 <= icmp_ln86_676_fu_482_p2;
        icmp_ln86_677_reg_1466 <= icmp_ln86_677_fu_488_p2;
        icmp_ln86_678_reg_1471 <= icmp_ln86_678_fu_494_p2;
        icmp_ln86_679_reg_1476 <= icmp_ln86_679_fu_500_p2;
        icmp_ln86_680_reg_1481 <= icmp_ln86_680_fu_506_p2;
        icmp_ln86_681_reg_1486 <= icmp_ln86_681_fu_512_p2;
        icmp_ln86_682_reg_1491 <= icmp_ln86_682_fu_518_p2;
        icmp_ln86_683_reg_1496 <= icmp_ln86_683_fu_524_p2;
        icmp_ln86_reg_1410 <= icmp_ln86_fu_344_p2;
        select_ln117_648_reg_1501 <= select_ln117_648_fu_904_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1274_p65 = 'bx;

assign agg_result_fu_1274_p66 = ((or_ln117_600_fu_1252_p2[0:0] == 1'b1) ? select_ln117_662_fu_1258_p3 : 5'd31);

assign and_ln102_804_fu_917_p2 = (xor_ln104_fu_912_p2 & icmp_ln86_655_reg_1419);

assign and_ln102_805_fu_548_p2 = (icmp_ln86_656_fu_362_p2 & and_ln102_fu_530_p2);

assign and_ln102_806_fu_566_p2 = (icmp_ln86_657_fu_368_p2 & and_ln104_fu_542_p2);

assign and_ln102_807_fu_933_p2 = (icmp_ln86_658_reg_1425 & and_ln102_804_fu_917_p2);

assign and_ln102_808_fu_949_p2 = (icmp_ln86_659_reg_1431 & and_ln104_116_fu_927_p2);

assign and_ln102_809_fu_584_p2 = (icmp_ln86_660_fu_386_p2 & and_ln102_805_fu_548_p2);

assign and_ln102_810_fu_596_p2 = (icmp_ln86_661_fu_392_p2 & and_ln104_117_fu_560_p2);

assign and_ln102_811_fu_608_p2 = (icmp_ln86_662_fu_398_p2 & and_ln102_806_fu_566_p2);

assign and_ln102_812_fu_620_p2 = (icmp_ln86_663_fu_404_p2 & and_ln104_118_fu_578_p2);

assign and_ln102_813_fu_965_p2 = (icmp_ln86_664_reg_1437 & and_ln102_807_fu_933_p2);

assign and_ln102_814_fu_975_p2 = (icmp_ln86_665_reg_1443 & and_ln104_119_fu_943_p2);

assign and_ln102_815_fu_985_p2 = (icmp_ln86_666_reg_1449 & and_ln102_808_fu_949_p2);

assign and_ln102_816_fu_995_p2 = (icmp_ln86_667_reg_1455 & and_ln104_120_fu_959_p2);

assign and_ln102_817_fu_632_p2 = (icmp_ln86_668_fu_434_p2 & and_ln102_809_fu_584_p2);

assign and_ln102_818_fu_638_p2 = (xor_ln104_315_fu_590_p2 & icmp_ln86_669_fu_440_p2);

assign and_ln102_819_fu_644_p2 = (and_ln102_818_fu_638_p2 & and_ln102_805_fu_548_p2);

assign and_ln102_820_fu_650_p2 = (icmp_ln86_670_fu_446_p2 & and_ln102_810_fu_596_p2);

assign and_ln102_821_fu_656_p2 = (xor_ln104_316_fu_602_p2 & icmp_ln86_671_fu_452_p2);

assign and_ln102_822_fu_662_p2 = (and_ln104_117_fu_560_p2 & and_ln102_821_fu_656_p2);

assign and_ln102_823_fu_668_p2 = (icmp_ln86_672_fu_458_p2 & and_ln102_811_fu_608_p2);

assign and_ln102_824_fu_674_p2 = (xor_ln104_317_fu_614_p2 & icmp_ln86_673_fu_464_p2);

assign and_ln102_825_fu_680_p2 = (and_ln102_824_fu_674_p2 & and_ln102_806_fu_566_p2);

assign and_ln102_826_fu_686_p2 = (icmp_ln86_674_fu_470_p2 & and_ln102_812_fu_620_p2);

assign and_ln102_827_fu_692_p2 = (xor_ln104_318_fu_626_p2 & icmp_ln86_675_fu_476_p2);

assign and_ln102_828_fu_698_p2 = (and_ln104_118_fu_578_p2 & and_ln102_827_fu_692_p2);

assign and_ln102_829_fu_1005_p2 = (icmp_ln86_676_reg_1461 & and_ln102_813_fu_965_p2);

assign and_ln102_830_fu_1010_p2 = (xor_ln104_319_fu_970_p2 & icmp_ln86_677_reg_1466);

assign and_ln102_831_fu_1015_p2 = (and_ln102_830_fu_1010_p2 & and_ln102_807_fu_933_p2);

assign and_ln102_832_fu_1021_p2 = (icmp_ln86_678_reg_1471 & and_ln102_814_fu_975_p2);

assign and_ln102_833_fu_1026_p2 = (xor_ln104_320_fu_980_p2 & icmp_ln86_679_reg_1476);

assign and_ln102_834_fu_1031_p2 = (and_ln104_119_fu_943_p2 & and_ln102_833_fu_1026_p2);

assign and_ln102_835_fu_1037_p2 = (icmp_ln86_680_reg_1481 & and_ln102_815_fu_985_p2);

assign and_ln102_836_fu_1042_p2 = (xor_ln104_321_fu_990_p2 & icmp_ln86_681_reg_1486);

assign and_ln102_837_fu_1047_p2 = (and_ln102_836_fu_1042_p2 & and_ln102_808_fu_949_p2);

assign and_ln102_838_fu_1053_p2 = (icmp_ln86_682_reg_1491 & and_ln102_816_fu_995_p2);

assign and_ln102_839_fu_1058_p2 = (xor_ln104_322_fu_1000_p2 & icmp_ln86_683_reg_1496);

assign and_ln102_840_fu_1063_p2 = (and_ln104_120_fu_959_p2 & and_ln102_839_fu_1058_p2);

assign and_ln102_fu_530_p2 = (icmp_ln86_fu_344_p2 & icmp_ln86_654_fu_350_p2);

assign and_ln104_116_fu_927_p2 = (xor_ln104_fu_912_p2 & xor_ln104_310_fu_922_p2);

assign and_ln104_117_fu_560_p2 = (xor_ln104_311_fu_554_p2 & and_ln102_fu_530_p2);

assign and_ln104_118_fu_578_p2 = (xor_ln104_312_fu_572_p2 & and_ln104_fu_542_p2);

assign and_ln104_119_fu_943_p2 = (xor_ln104_313_fu_938_p2 & and_ln102_804_fu_917_p2);

assign and_ln104_120_fu_959_p2 = (xor_ln104_314_fu_954_p2 & and_ln104_116_fu_927_p2);

assign and_ln104_fu_542_p2 = (xor_ln104_309_fu_536_p2 & icmp_ln86_fu_344_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1274_p67;

assign icmp_ln86_654_fu_350_p2 = (($signed(x_50_val) < $signed(18'd87640)) ? 1'b1 : 1'b0);

assign icmp_ln86_655_fu_356_p2 = (($signed(x_47_val) < $signed(18'd103258)) ? 1'b1 : 1'b0);

assign icmp_ln86_656_fu_362_p2 = (($signed(x_50_val) < $signed(18'd86008)) ? 1'b1 : 1'b0);

assign icmp_ln86_657_fu_368_p2 = (($signed(x_7_val) < $signed(18'd9371)) ? 1'b1 : 1'b0);

assign icmp_ln86_658_fu_374_p2 = (($signed(x_47_val) < $signed(18'd86731)) ? 1'b1 : 1'b0);

assign icmp_ln86_659_fu_380_p2 = (($signed(x_36_val) < $signed(18'd11)) ? 1'b1 : 1'b0);

assign icmp_ln86_660_fu_386_p2 = (($signed(x_16_val) < $signed(18'd85)) ? 1'b1 : 1'b0);

assign icmp_ln86_661_fu_392_p2 = (($signed(x_7_val) < $signed(18'd7036)) ? 1'b1 : 1'b0);

assign icmp_ln86_662_fu_398_p2 = (($signed(x_7_val) < $signed(18'd7033)) ? 1'b1 : 1'b0);

assign icmp_ln86_663_fu_404_p2 = (($signed(x_7_val) < $signed(18'd9916)) ? 1'b1 : 1'b0);

assign icmp_ln86_664_fu_410_p2 = (($signed(x_25_val) < $signed(18'd276)) ? 1'b1 : 1'b0);

assign icmp_ln86_665_fu_416_p2 = (($signed(x_9_val) < $signed(18'd1411)) ? 1'b1 : 1'b0);

assign icmp_ln86_666_fu_422_p2 = (($signed(x_52_val) < $signed(18'd70145)) ? 1'b1 : 1'b0);

assign icmp_ln86_667_fu_428_p2 = (($signed(x_1_val) < $signed(18'd5339)) ? 1'b1 : 1'b0);

assign icmp_ln86_668_fu_434_p2 = (($signed(x_15_val) < $signed(18'd7)) ? 1'b1 : 1'b0);

assign icmp_ln86_669_fu_440_p2 = (($signed(x_7_val) < $signed(18'd6565)) ? 1'b1 : 1'b0);

assign icmp_ln86_670_fu_446_p2 = (($signed(x_36_val) < $signed(18'd5)) ? 1'b1 : 1'b0);

assign icmp_ln86_671_fu_452_p2 = (($signed(x_15_val) < $signed(18'd9)) ? 1'b1 : 1'b0);

assign icmp_ln86_672_fu_458_p2 = (($signed(x_1_val) < $signed(18'd98449)) ? 1'b1 : 1'b0);

assign icmp_ln86_673_fu_464_p2 = (($signed(x_1_val) < $signed(18'd236939)) ? 1'b1 : 1'b0);

assign icmp_ln86_674_fu_470_p2 = (($signed(x_52_val) < $signed(18'd42497)) ? 1'b1 : 1'b0);

assign icmp_ln86_675_fu_476_p2 = (($signed(x_7_val) < $signed(18'd10883)) ? 1'b1 : 1'b0);

assign icmp_ln86_676_fu_482_p2 = (($signed(x_1_val) < $signed(18'd204358)) ? 1'b1 : 1'b0);

assign icmp_ln86_677_fu_488_p2 = (($signed(x_1_val) < $signed(18'd81103)) ? 1'b1 : 1'b0);

assign icmp_ln86_678_fu_494_p2 = (($signed(x_1_val) < $signed(18'd218594)) ? 1'b1 : 1'b0);

assign icmp_ln86_679_fu_500_p2 = (($signed(x_17_val) < $signed(18'd21)) ? 1'b1 : 1'b0);

assign icmp_ln86_680_fu_506_p2 = (($signed(x_48_val) < $signed(18'd90546)) ? 1'b1 : 1'b0);

assign icmp_ln86_681_fu_512_p2 = (($signed(x_15_val) < $signed(18'd3)) ? 1'b1 : 1'b0);

assign icmp_ln86_682_fu_518_p2 = (($signed(x_12_val) < $signed(18'd260461)) ? 1'b1 : 1'b0);

assign icmp_ln86_683_fu_524_p2 = (($signed(x_3_val) < $signed(18'd137588)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_344_p2 = (($signed(x_17_val) < $signed(18'd14)) ? 1'b1 : 1'b0);

assign or_ln117_576_fu_740_p2 = (and_ln102_820_fu_650_p2 | and_ln102_805_fu_548_p2);

assign or_ln117_577_fu_754_p2 = (and_ln102_810_fu_596_p2 | and_ln102_805_fu_548_p2);

assign or_ln117_578_fu_768_p2 = (or_ln117_577_fu_754_p2 | and_ln102_822_fu_662_p2);

assign or_ln117_579_fu_794_p2 = (and_ln102_fu_530_p2 | and_ln102_823_fu_668_p2);

assign or_ln117_580_fu_808_p2 = (and_ln102_fu_530_p2 | and_ln102_811_fu_608_p2);

assign or_ln117_581_fu_822_p2 = (or_ln117_580_fu_808_p2 | and_ln102_825_fu_680_p2);

assign or_ln117_582_fu_836_p2 = (and_ln102_fu_530_p2 | and_ln102_806_fu_566_p2);

assign or_ln117_583_fu_850_p2 = (or_ln117_582_fu_836_p2 | and_ln102_826_fu_686_p2);

assign or_ln117_584_fu_864_p2 = (or_ln117_582_fu_836_p2 | and_ln102_812_fu_620_p2);

assign or_ln117_585_fu_878_p2 = (or_ln117_584_fu_864_p2 | and_ln102_828_fu_698_p2);

assign or_ln117_586_fu_1069_p2 = (icmp_ln86_reg_1410 | and_ln102_829_fu_1005_p2);

assign or_ln117_587_fu_1074_p2 = (icmp_ln86_reg_1410 | and_ln102_813_fu_965_p2);

assign or_ln117_588_fu_1086_p2 = (or_ln117_587_fu_1074_p2 | and_ln102_831_fu_1015_p2);

assign or_ln117_589_fu_1100_p2 = (icmp_ln86_reg_1410 | and_ln102_807_fu_933_p2);

assign or_ln117_590_fu_1113_p2 = (or_ln117_589_fu_1100_p2 | and_ln102_832_fu_1021_p2);

assign or_ln117_591_fu_1127_p2 = (or_ln117_589_fu_1100_p2 | and_ln102_814_fu_975_p2);

assign or_ln117_592_fu_1141_p2 = (or_ln117_591_fu_1127_p2 | and_ln102_834_fu_1031_p2);

assign or_ln117_593_fu_1155_p2 = (icmp_ln86_reg_1410 | and_ln102_804_fu_917_p2);

assign or_ln117_594_fu_1168_p2 = (or_ln117_593_fu_1155_p2 | and_ln102_835_fu_1037_p2);

assign or_ln117_595_fu_1182_p2 = (or_ln117_593_fu_1155_p2 | and_ln102_815_fu_985_p2);

assign or_ln117_596_fu_1196_p2 = (or_ln117_595_fu_1182_p2 | and_ln102_837_fu_1047_p2);

assign or_ln117_597_fu_1210_p2 = (or_ln117_593_fu_1155_p2 | and_ln102_808_fu_949_p2);

assign or_ln117_598_fu_1224_p2 = (or_ln117_597_fu_1210_p2 | and_ln102_838_fu_1053_p2);

assign or_ln117_599_fu_1238_p2 = (or_ln117_597_fu_1210_p2 | and_ln102_816_fu_995_p2);

assign or_ln117_600_fu_1252_p2 = (or_ln117_599_fu_1238_p2 | and_ln102_840_fu_1063_p2);

assign or_ln117_fu_714_p2 = (and_ln102_819_fu_644_p2 | and_ln102_809_fu_584_p2);

assign select_ln117_635_fu_728_p3 = ((or_ln117_fu_714_p2[0:0] == 1'b1) ? select_ln117_fu_720_p3 : 2'd3);

assign select_ln117_636_fu_746_p3 = ((and_ln102_805_fu_548_p2[0:0] == 1'b1) ? zext_ln117_70_fu_736_p1 : 3'd4);

assign select_ln117_637_fu_760_p3 = ((or_ln117_576_fu_740_p2[0:0] == 1'b1) ? select_ln117_636_fu_746_p3 : 3'd5);

assign select_ln117_638_fu_774_p3 = ((or_ln117_577_fu_754_p2[0:0] == 1'b1) ? select_ln117_637_fu_760_p3 : 3'd6);

assign select_ln117_639_fu_782_p3 = ((or_ln117_578_fu_768_p2[0:0] == 1'b1) ? select_ln117_638_fu_774_p3 : 3'd7);

assign select_ln117_640_fu_800_p3 = ((and_ln102_fu_530_p2[0:0] == 1'b1) ? zext_ln117_71_fu_790_p1 : 4'd8);

assign select_ln117_641_fu_814_p3 = ((or_ln117_579_fu_794_p2[0:0] == 1'b1) ? select_ln117_640_fu_800_p3 : 4'd9);

assign select_ln117_642_fu_828_p3 = ((or_ln117_580_fu_808_p2[0:0] == 1'b1) ? select_ln117_641_fu_814_p3 : 4'd10);

assign select_ln117_643_fu_842_p3 = ((or_ln117_581_fu_822_p2[0:0] == 1'b1) ? select_ln117_642_fu_828_p3 : 4'd11);

assign select_ln117_644_fu_856_p3 = ((or_ln117_582_fu_836_p2[0:0] == 1'b1) ? select_ln117_643_fu_842_p3 : 4'd12);

assign select_ln117_645_fu_870_p3 = ((or_ln117_583_fu_850_p2[0:0] == 1'b1) ? select_ln117_644_fu_856_p3 : 4'd13);

assign select_ln117_646_fu_884_p3 = ((or_ln117_584_fu_864_p2[0:0] == 1'b1) ? select_ln117_645_fu_870_p3 : 4'd14);

assign select_ln117_647_fu_892_p3 = ((or_ln117_585_fu_878_p2[0:0] == 1'b1) ? select_ln117_646_fu_884_p3 : 4'd15);

assign select_ln117_648_fu_904_p3 = ((icmp_ln86_fu_344_p2[0:0] == 1'b1) ? zext_ln117_72_fu_900_p1 : 5'd16);

assign select_ln117_649_fu_1079_p3 = ((or_ln117_586_fu_1069_p2[0:0] == 1'b1) ? select_ln117_648_reg_1501 : 5'd17);

assign select_ln117_650_fu_1092_p3 = ((or_ln117_587_fu_1074_p2[0:0] == 1'b1) ? select_ln117_649_fu_1079_p3 : 5'd18);

assign select_ln117_651_fu_1105_p3 = ((or_ln117_588_fu_1086_p2[0:0] == 1'b1) ? select_ln117_650_fu_1092_p3 : 5'd19);

assign select_ln117_652_fu_1119_p3 = ((or_ln117_589_fu_1100_p2[0:0] == 1'b1) ? select_ln117_651_fu_1105_p3 : 5'd20);

assign select_ln117_653_fu_1133_p3 = ((or_ln117_590_fu_1113_p2[0:0] == 1'b1) ? select_ln117_652_fu_1119_p3 : 5'd21);

assign select_ln117_654_fu_1147_p3 = ((or_ln117_591_fu_1127_p2[0:0] == 1'b1) ? select_ln117_653_fu_1133_p3 : 5'd22);

assign select_ln117_655_fu_1160_p3 = ((or_ln117_592_fu_1141_p2[0:0] == 1'b1) ? select_ln117_654_fu_1147_p3 : 5'd23);

assign select_ln117_656_fu_1174_p3 = ((or_ln117_593_fu_1155_p2[0:0] == 1'b1) ? select_ln117_655_fu_1160_p3 : 5'd24);

assign select_ln117_657_fu_1188_p3 = ((or_ln117_594_fu_1168_p2[0:0] == 1'b1) ? select_ln117_656_fu_1174_p3 : 5'd25);

assign select_ln117_658_fu_1202_p3 = ((or_ln117_595_fu_1182_p2[0:0] == 1'b1) ? select_ln117_657_fu_1188_p3 : 5'd26);

assign select_ln117_659_fu_1216_p3 = ((or_ln117_596_fu_1196_p2[0:0] == 1'b1) ? select_ln117_658_fu_1202_p3 : 5'd27);

assign select_ln117_660_fu_1230_p3 = ((or_ln117_597_fu_1210_p2[0:0] == 1'b1) ? select_ln117_659_fu_1216_p3 : 5'd28);

assign select_ln117_661_fu_1244_p3 = ((or_ln117_598_fu_1224_p2[0:0] == 1'b1) ? select_ln117_660_fu_1230_p3 : 5'd29);

assign select_ln117_662_fu_1258_p3 = ((or_ln117_599_fu_1238_p2[0:0] == 1'b1) ? select_ln117_661_fu_1244_p3 : 5'd30);

assign select_ln117_fu_720_p3 = ((and_ln102_809_fu_584_p2[0:0] == 1'b1) ? zext_ln117_fu_710_p1 : 2'd2);

assign xor_ln104_309_fu_536_p2 = (icmp_ln86_654_fu_350_p2 ^ 1'd1);

assign xor_ln104_310_fu_922_p2 = (icmp_ln86_655_reg_1419 ^ 1'd1);

assign xor_ln104_311_fu_554_p2 = (icmp_ln86_656_fu_362_p2 ^ 1'd1);

assign xor_ln104_312_fu_572_p2 = (icmp_ln86_657_fu_368_p2 ^ 1'd1);

assign xor_ln104_313_fu_938_p2 = (icmp_ln86_658_reg_1425 ^ 1'd1);

assign xor_ln104_314_fu_954_p2 = (icmp_ln86_659_reg_1431 ^ 1'd1);

assign xor_ln104_315_fu_590_p2 = (icmp_ln86_660_fu_386_p2 ^ 1'd1);

assign xor_ln104_316_fu_602_p2 = (icmp_ln86_661_fu_392_p2 ^ 1'd1);

assign xor_ln104_317_fu_614_p2 = (icmp_ln86_662_fu_398_p2 ^ 1'd1);

assign xor_ln104_318_fu_626_p2 = (icmp_ln86_663_fu_404_p2 ^ 1'd1);

assign xor_ln104_319_fu_970_p2 = (icmp_ln86_664_reg_1437 ^ 1'd1);

assign xor_ln104_320_fu_980_p2 = (icmp_ln86_665_reg_1443 ^ 1'd1);

assign xor_ln104_321_fu_990_p2 = (icmp_ln86_666_reg_1449 ^ 1'd1);

assign xor_ln104_322_fu_1000_p2 = (icmp_ln86_667_reg_1455 ^ 1'd1);

assign xor_ln104_fu_912_p2 = (icmp_ln86_reg_1410 ^ 1'd1);

assign xor_ln117_fu_704_p2 = (1'd1 ^ and_ln102_817_fu_632_p2);

assign zext_ln117_70_fu_736_p1 = select_ln117_635_fu_728_p3;

assign zext_ln117_71_fu_790_p1 = select_ln117_639_fu_782_p3;

assign zext_ln117_72_fu_900_p1 = select_ln117_647_fu_892_p3;

assign zext_ln117_fu_710_p1 = xor_ln117_fu_704_p2;

endmodule //my_prj_decision_function_76
