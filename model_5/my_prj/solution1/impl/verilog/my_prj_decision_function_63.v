// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_63 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_3_val,
        x_4_val,
        x_6_val,
        x_7_val,
        x_10_val,
        x_12_val,
        x_23_val,
        x_25_val,
        x_28_val,
        x_32_val,
        x_34_val,
        x_39_val,
        x_40_val,
        x_47_val,
        x_48_val,
        x_50_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_3_val;
input  [17:0] x_4_val;
input  [17:0] x_6_val;
input  [17:0] x_7_val;
input  [17:0] x_10_val;
input  [17:0] x_12_val;
input  [17:0] x_23_val;
input  [17:0] x_25_val;
input  [17:0] x_28_val;
input  [17:0] x_32_val;
input  [17:0] x_34_val;
input  [17:0] x_39_val;
input  [17:0] x_40_val;
input  [17:0] x_47_val;
input  [17:0] x_48_val;
input  [17:0] x_50_val;
input  [17:0] x_52_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_382_p2;
reg   [0:0] icmp_ln86_reg_1468;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_1036_fu_394_p2;
reg   [0:0] icmp_ln86_1036_reg_1477;
wire   [0:0] icmp_ln86_1039_fu_422_p2;
reg   [0:0] icmp_ln86_1039_reg_1483;
wire   [0:0] icmp_ln86_1040_fu_428_p2;
reg   [0:0] icmp_ln86_1040_reg_1489;
wire   [0:0] icmp_ln86_1045_fu_458_p2;
reg   [0:0] icmp_ln86_1045_reg_1495;
wire   [0:0] icmp_ln86_1046_fu_464_p2;
reg   [0:0] icmp_ln86_1046_reg_1501;
wire   [0:0] icmp_ln86_1047_fu_480_p2;
reg   [0:0] icmp_ln86_1047_reg_1507;
wire   [0:0] icmp_ln86_1048_fu_486_p2;
reg   [0:0] icmp_ln86_1048_reg_1513;
wire   [0:0] icmp_ln86_1057_fu_540_p2;
reg   [0:0] icmp_ln86_1057_reg_1519;
wire   [0:0] icmp_ln86_1058_fu_546_p2;
reg   [0:0] icmp_ln86_1058_reg_1524;
wire   [0:0] icmp_ln86_1059_fu_552_p2;
reg   [0:0] icmp_ln86_1059_reg_1529;
wire   [0:0] icmp_ln86_1060_fu_558_p2;
reg   [0:0] icmp_ln86_1060_reg_1534;
wire   [0:0] icmp_ln86_1061_fu_564_p2;
reg   [0:0] icmp_ln86_1061_reg_1539;
wire   [0:0] icmp_ln86_1062_fu_570_p2;
reg   [0:0] icmp_ln86_1062_reg_1544;
wire   [0:0] icmp_ln86_1063_fu_576_p2;
reg   [0:0] icmp_ln86_1063_reg_1549;
wire   [0:0] icmp_ln86_1064_fu_582_p2;
reg   [0:0] icmp_ln86_1064_reg_1554;
wire   [4:0] select_ln117_1016_fu_962_p3;
reg   [4:0] select_ln117_1016_reg_1559;
wire    ap_block_pp0_stage0;
wire   [4:0] tmp_fu_412_p4;
wire   [13:0] tmp_13_fu_470_p4;
wire   [0:0] icmp_ln86_1035_fu_388_p2;
wire   [0:0] xor_ln104_490_fu_594_p2;
wire   [0:0] icmp_ln86_1037_fu_400_p2;
wire   [0:0] and_ln102_fu_588_p2;
wire   [0:0] xor_ln104_492_fu_612_p2;
wire   [0:0] icmp_ln86_1038_fu_406_p2;
wire   [0:0] and_ln104_fu_600_p2;
wire   [0:0] xor_ln104_493_fu_630_p2;
wire   [0:0] icmp_ln86_1041_fu_434_p2;
wire   [0:0] and_ln102_1270_fu_606_p2;
wire   [0:0] icmp_ln86_1042_fu_440_p2;
wire   [0:0] and_ln104_187_fu_618_p2;
wire   [0:0] icmp_ln86_1043_fu_446_p2;
wire   [0:0] and_ln102_1271_fu_624_p2;
wire   [0:0] icmp_ln86_1044_fu_452_p2;
wire   [0:0] and_ln104_188_fu_636_p2;
wire   [0:0] icmp_ln86_1049_fu_492_p2;
wire   [0:0] and_ln102_1274_fu_642_p2;
wire   [0:0] icmp_ln86_1050_fu_498_p2;
wire   [0:0] xor_ln104_496_fu_648_p2;
wire   [0:0] and_ln102_1283_fu_696_p2;
wire   [0:0] icmp_ln86_1051_fu_504_p2;
wire   [0:0] and_ln102_1275_fu_654_p2;
wire   [0:0] icmp_ln86_1052_fu_510_p2;
wire   [0:0] xor_ln104_497_fu_660_p2;
wire   [0:0] and_ln102_1286_fu_714_p2;
wire   [0:0] icmp_ln86_1053_fu_516_p2;
wire   [0:0] and_ln102_1276_fu_666_p2;
wire   [0:0] icmp_ln86_1054_fu_522_p2;
wire   [0:0] xor_ln104_498_fu_672_p2;
wire   [0:0] and_ln102_1289_fu_732_p2;
wire   [0:0] icmp_ln86_1055_fu_528_p2;
wire   [0:0] and_ln102_1277_fu_678_p2;
wire   [0:0] icmp_ln86_1056_fu_534_p2;
wire   [0:0] xor_ln104_499_fu_684_p2;
wire   [0:0] and_ln102_1292_fu_750_p2;
wire   [0:0] and_ln102_1282_fu_690_p2;
wire   [0:0] xor_ln117_fu_762_p2;
wire   [0:0] and_ln102_1284_fu_702_p2;
wire   [1:0] zext_ln117_fu_768_p1;
wire   [0:0] or_ln117_fu_772_p2;
wire   [1:0] select_ln117_fu_778_p3;
wire   [1:0] select_ln117_1003_fu_786_p3;
wire   [0:0] and_ln102_1285_fu_708_p2;
wire   [2:0] zext_ln117_109_fu_794_p1;
wire   [0:0] or_ln117_912_fu_798_p2;
wire   [2:0] select_ln117_1004_fu_804_p3;
wire   [0:0] or_ln117_913_fu_812_p2;
wire   [0:0] and_ln102_1287_fu_720_p2;
wire   [2:0] select_ln117_1005_fu_818_p3;
wire   [0:0] or_ln117_914_fu_826_p2;
wire   [2:0] select_ln117_1006_fu_832_p3;
wire   [2:0] select_ln117_1007_fu_840_p3;
wire   [0:0] and_ln102_1288_fu_726_p2;
wire   [3:0] zext_ln117_110_fu_848_p1;
wire   [0:0] or_ln117_915_fu_852_p2;
wire   [3:0] select_ln117_1008_fu_858_p3;
wire   [0:0] or_ln117_916_fu_866_p2;
wire   [0:0] and_ln102_1290_fu_738_p2;
wire   [3:0] select_ln117_1009_fu_872_p3;
wire   [0:0] or_ln117_917_fu_880_p2;
wire   [3:0] select_ln117_1010_fu_886_p3;
wire   [0:0] or_ln117_918_fu_894_p2;
wire   [0:0] and_ln102_1291_fu_744_p2;
wire   [3:0] select_ln117_1011_fu_900_p3;
wire   [0:0] or_ln117_919_fu_908_p2;
wire   [3:0] select_ln117_1012_fu_914_p3;
wire   [0:0] or_ln117_920_fu_922_p2;
wire   [0:0] and_ln102_1293_fu_756_p2;
wire   [3:0] select_ln117_1013_fu_928_p3;
wire   [0:0] or_ln117_921_fu_936_p2;
wire   [3:0] select_ln117_1014_fu_942_p3;
wire   [3:0] select_ln117_1015_fu_950_p3;
wire   [4:0] zext_ln117_111_fu_958_p1;
wire   [0:0] xor_ln104_fu_970_p2;
wire   [0:0] xor_ln104_491_fu_980_p2;
wire   [0:0] and_ln102_1269_fu_975_p2;
wire   [0:0] xor_ln104_494_fu_996_p2;
wire   [0:0] and_ln104_186_fu_985_p2;
wire   [0:0] xor_ln104_495_fu_1012_p2;
wire   [0:0] and_ln102_1272_fu_991_p2;
wire   [0:0] and_ln104_189_fu_1001_p2;
wire   [0:0] and_ln102_1273_fu_1007_p2;
wire   [0:0] and_ln104_190_fu_1017_p2;
wire   [0:0] and_ln102_1278_fu_1023_p2;
wire   [0:0] xor_ln104_500_fu_1028_p2;
wire   [0:0] and_ln102_1295_fu_1068_p2;
wire   [0:0] and_ln102_1279_fu_1033_p2;
wire   [0:0] xor_ln104_501_fu_1038_p2;
wire   [0:0] and_ln102_1298_fu_1084_p2;
wire   [0:0] and_ln102_1280_fu_1043_p2;
wire   [0:0] xor_ln104_502_fu_1048_p2;
wire   [0:0] and_ln102_1301_fu_1100_p2;
wire   [0:0] and_ln102_1281_fu_1053_p2;
wire   [0:0] xor_ln104_503_fu_1058_p2;
wire   [0:0] and_ln102_1304_fu_1116_p2;
wire   [0:0] and_ln102_1294_fu_1063_p2;
wire   [0:0] or_ln117_922_fu_1127_p2;
wire   [0:0] or_ln117_923_fu_1132_p2;
wire   [0:0] and_ln102_1296_fu_1073_p2;
wire   [4:0] select_ln117_1017_fu_1137_p3;
wire   [0:0] or_ln117_924_fu_1144_p2;
wire   [4:0] select_ln117_1018_fu_1150_p3;
wire   [0:0] or_ln117_925_fu_1158_p2;
wire   [0:0] and_ln102_1297_fu_1079_p2;
wire   [4:0] select_ln117_1019_fu_1163_p3;
wire   [0:0] or_ln117_926_fu_1171_p2;
wire   [4:0] select_ln117_1020_fu_1177_p3;
wire   [0:0] or_ln117_927_fu_1185_p2;
wire   [0:0] and_ln102_1299_fu_1089_p2;
wire   [4:0] select_ln117_1021_fu_1191_p3;
wire   [0:0] or_ln117_928_fu_1199_p2;
wire   [4:0] select_ln117_1022_fu_1205_p3;
wire   [0:0] or_ln117_929_fu_1213_p2;
wire   [0:0] and_ln102_1300_fu_1095_p2;
wire   [4:0] select_ln117_1023_fu_1218_p3;
wire   [0:0] or_ln117_930_fu_1226_p2;
wire   [4:0] select_ln117_1024_fu_1232_p3;
wire   [0:0] or_ln117_931_fu_1240_p2;
wire   [0:0] and_ln102_1302_fu_1105_p2;
wire   [4:0] select_ln117_1025_fu_1246_p3;
wire   [0:0] or_ln117_932_fu_1254_p2;
wire   [4:0] select_ln117_1026_fu_1260_p3;
wire   [0:0] or_ln117_933_fu_1268_p2;
wire   [0:0] and_ln102_1303_fu_1111_p2;
wire   [4:0] select_ln117_1027_fu_1274_p3;
wire   [0:0] or_ln117_934_fu_1282_p2;
wire   [4:0] select_ln117_1028_fu_1288_p3;
wire   [0:0] or_ln117_935_fu_1296_p2;
wire   [0:0] and_ln102_1305_fu_1121_p2;
wire   [4:0] select_ln117_1029_fu_1302_p3;
wire   [0:0] or_ln117_936_fu_1310_p2;
wire   [4:0] select_ln117_1030_fu_1316_p3;
wire   [11:0] agg_result_fu_1332_p65;
wire   [4:0] agg_result_fu_1332_p66;
wire   [11:0] agg_result_fu_1332_p67;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1332_p1;
wire   [4:0] agg_result_fu_1332_p3;
wire   [4:0] agg_result_fu_1332_p5;
wire   [4:0] agg_result_fu_1332_p7;
wire   [4:0] agg_result_fu_1332_p9;
wire   [4:0] agg_result_fu_1332_p11;
wire   [4:0] agg_result_fu_1332_p13;
wire   [4:0] agg_result_fu_1332_p15;
wire   [4:0] agg_result_fu_1332_p17;
wire   [4:0] agg_result_fu_1332_p19;
wire   [4:0] agg_result_fu_1332_p21;
wire   [4:0] agg_result_fu_1332_p23;
wire   [4:0] agg_result_fu_1332_p25;
wire   [4:0] agg_result_fu_1332_p27;
wire   [4:0] agg_result_fu_1332_p29;
wire   [4:0] agg_result_fu_1332_p31;
wire  signed [4:0] agg_result_fu_1332_p33;
wire  signed [4:0] agg_result_fu_1332_p35;
wire  signed [4:0] agg_result_fu_1332_p37;
wire  signed [4:0] agg_result_fu_1332_p39;
wire  signed [4:0] agg_result_fu_1332_p41;
wire  signed [4:0] agg_result_fu_1332_p43;
wire  signed [4:0] agg_result_fu_1332_p45;
wire  signed [4:0] agg_result_fu_1332_p47;
wire  signed [4:0] agg_result_fu_1332_p49;
wire  signed [4:0] agg_result_fu_1332_p51;
wire  signed [4:0] agg_result_fu_1332_p53;
wire  signed [4:0] agg_result_fu_1332_p55;
wire  signed [4:0] agg_result_fu_1332_p57;
wire  signed [4:0] agg_result_fu_1332_p59;
wire  signed [4:0] agg_result_fu_1332_p61;
wire  signed [4:0] agg_result_fu_1332_p63;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_65_5_12_1_1_x17 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 12 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 12 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 12 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 12 ),
    .CASE31( 5'h1F ),
    .din31_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_65_5_12_1_1_x17_U843(
    .din0(12'd4026),
    .din1(12'd4080),
    .din2(12'd4070),
    .din3(12'd119),
    .din4(12'd7),
    .din5(12'd3769),
    .din6(12'd245),
    .din7(12'd60),
    .din8(12'd4048),
    .din9(12'd299),
    .din10(12'd212),
    .din11(12'd3998),
    .din12(12'd1),
    .din13(12'd246),
    .din14(12'd3811),
    .din15(12'd4029),
    .din16(12'd283),
    .din17(12'd4080),
    .din18(12'd3771),
    .din19(12'd4048),
    .din20(12'd493),
    .din21(12'd80),
    .din22(12'd558),
    .din23(12'd103),
    .din24(12'd124),
    .din25(12'd1259),
    .din26(12'd3819),
    .din27(12'd4063),
    .din28(12'd3711),
    .din29(12'd4040),
    .din30(12'd167),
    .din31(12'd4035),
    .def(agg_result_fu_1332_p65),
    .sel(agg_result_fu_1332_p66),
    .dout(agg_result_fu_1332_p67)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_1036_reg_1477 <= icmp_ln86_1036_fu_394_p2;
        icmp_ln86_1039_reg_1483 <= icmp_ln86_1039_fu_422_p2;
        icmp_ln86_1040_reg_1489 <= icmp_ln86_1040_fu_428_p2;
        icmp_ln86_1045_reg_1495 <= icmp_ln86_1045_fu_458_p2;
        icmp_ln86_1046_reg_1501 <= icmp_ln86_1046_fu_464_p2;
        icmp_ln86_1047_reg_1507 <= icmp_ln86_1047_fu_480_p2;
        icmp_ln86_1048_reg_1513 <= icmp_ln86_1048_fu_486_p2;
        icmp_ln86_1057_reg_1519 <= icmp_ln86_1057_fu_540_p2;
        icmp_ln86_1058_reg_1524 <= icmp_ln86_1058_fu_546_p2;
        icmp_ln86_1059_reg_1529 <= icmp_ln86_1059_fu_552_p2;
        icmp_ln86_1060_reg_1534 <= icmp_ln86_1060_fu_558_p2;
        icmp_ln86_1061_reg_1539 <= icmp_ln86_1061_fu_564_p2;
        icmp_ln86_1062_reg_1544 <= icmp_ln86_1062_fu_570_p2;
        icmp_ln86_1063_reg_1549 <= icmp_ln86_1063_fu_576_p2;
        icmp_ln86_1064_reg_1554 <= icmp_ln86_1064_fu_582_p2;
        icmp_ln86_reg_1468 <= icmp_ln86_fu_382_p2;
        select_ln117_1016_reg_1559 <= select_ln117_1016_fu_962_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1332_p65 = 'bx;

assign agg_result_fu_1332_p66 = ((or_ln117_936_fu_1310_p2[0:0] == 1'b1) ? select_ln117_1030_fu_1316_p3 : 5'd31);

assign and_ln102_1269_fu_975_p2 = (xor_ln104_fu_970_p2 & icmp_ln86_1036_reg_1477);

assign and_ln102_1270_fu_606_p2 = (icmp_ln86_1037_fu_400_p2 & and_ln102_fu_588_p2);

assign and_ln102_1271_fu_624_p2 = (icmp_ln86_1038_fu_406_p2 & and_ln104_fu_600_p2);

assign and_ln102_1272_fu_991_p2 = (icmp_ln86_1039_reg_1483 & and_ln102_1269_fu_975_p2);

assign and_ln102_1273_fu_1007_p2 = (icmp_ln86_1040_reg_1489 & and_ln104_186_fu_985_p2);

assign and_ln102_1274_fu_642_p2 = (icmp_ln86_1041_fu_434_p2 & and_ln102_1270_fu_606_p2);

assign and_ln102_1275_fu_654_p2 = (icmp_ln86_1042_fu_440_p2 & and_ln104_187_fu_618_p2);

assign and_ln102_1276_fu_666_p2 = (icmp_ln86_1043_fu_446_p2 & and_ln102_1271_fu_624_p2);

assign and_ln102_1277_fu_678_p2 = (icmp_ln86_1044_fu_452_p2 & and_ln104_188_fu_636_p2);

assign and_ln102_1278_fu_1023_p2 = (icmp_ln86_1045_reg_1495 & and_ln102_1272_fu_991_p2);

assign and_ln102_1279_fu_1033_p2 = (icmp_ln86_1046_reg_1501 & and_ln104_189_fu_1001_p2);

assign and_ln102_1280_fu_1043_p2 = (icmp_ln86_1047_reg_1507 & and_ln102_1273_fu_1007_p2);

assign and_ln102_1281_fu_1053_p2 = (icmp_ln86_1048_reg_1513 & and_ln104_190_fu_1017_p2);

assign and_ln102_1282_fu_690_p2 = (icmp_ln86_1049_fu_492_p2 & and_ln102_1274_fu_642_p2);

assign and_ln102_1283_fu_696_p2 = (xor_ln104_496_fu_648_p2 & icmp_ln86_1050_fu_498_p2);

assign and_ln102_1284_fu_702_p2 = (and_ln102_1283_fu_696_p2 & and_ln102_1270_fu_606_p2);

assign and_ln102_1285_fu_708_p2 = (icmp_ln86_1051_fu_504_p2 & and_ln102_1275_fu_654_p2);

assign and_ln102_1286_fu_714_p2 = (xor_ln104_497_fu_660_p2 & icmp_ln86_1052_fu_510_p2);

assign and_ln102_1287_fu_720_p2 = (and_ln104_187_fu_618_p2 & and_ln102_1286_fu_714_p2);

assign and_ln102_1288_fu_726_p2 = (icmp_ln86_1053_fu_516_p2 & and_ln102_1276_fu_666_p2);

assign and_ln102_1289_fu_732_p2 = (xor_ln104_498_fu_672_p2 & icmp_ln86_1054_fu_522_p2);

assign and_ln102_1290_fu_738_p2 = (and_ln102_1289_fu_732_p2 & and_ln102_1271_fu_624_p2);

assign and_ln102_1291_fu_744_p2 = (icmp_ln86_1055_fu_528_p2 & and_ln102_1277_fu_678_p2);

assign and_ln102_1292_fu_750_p2 = (xor_ln104_499_fu_684_p2 & icmp_ln86_1056_fu_534_p2);

assign and_ln102_1293_fu_756_p2 = (and_ln104_188_fu_636_p2 & and_ln102_1292_fu_750_p2);

assign and_ln102_1294_fu_1063_p2 = (icmp_ln86_1057_reg_1519 & and_ln102_1278_fu_1023_p2);

assign and_ln102_1295_fu_1068_p2 = (xor_ln104_500_fu_1028_p2 & icmp_ln86_1058_reg_1524);

assign and_ln102_1296_fu_1073_p2 = (and_ln102_1295_fu_1068_p2 & and_ln102_1272_fu_991_p2);

assign and_ln102_1297_fu_1079_p2 = (icmp_ln86_1059_reg_1529 & and_ln102_1279_fu_1033_p2);

assign and_ln102_1298_fu_1084_p2 = (xor_ln104_501_fu_1038_p2 & icmp_ln86_1060_reg_1534);

assign and_ln102_1299_fu_1089_p2 = (and_ln104_189_fu_1001_p2 & and_ln102_1298_fu_1084_p2);

assign and_ln102_1300_fu_1095_p2 = (icmp_ln86_1061_reg_1539 & and_ln102_1280_fu_1043_p2);

assign and_ln102_1301_fu_1100_p2 = (xor_ln104_502_fu_1048_p2 & icmp_ln86_1062_reg_1544);

assign and_ln102_1302_fu_1105_p2 = (and_ln102_1301_fu_1100_p2 & and_ln102_1273_fu_1007_p2);

assign and_ln102_1303_fu_1111_p2 = (icmp_ln86_1063_reg_1549 & and_ln102_1281_fu_1053_p2);

assign and_ln102_1304_fu_1116_p2 = (xor_ln104_503_fu_1058_p2 & icmp_ln86_1064_reg_1554);

assign and_ln102_1305_fu_1121_p2 = (and_ln104_190_fu_1017_p2 & and_ln102_1304_fu_1116_p2);

assign and_ln102_fu_588_p2 = (icmp_ln86_fu_382_p2 & icmp_ln86_1035_fu_388_p2);

assign and_ln104_186_fu_985_p2 = (xor_ln104_fu_970_p2 & xor_ln104_491_fu_980_p2);

assign and_ln104_187_fu_618_p2 = (xor_ln104_492_fu_612_p2 & and_ln102_fu_588_p2);

assign and_ln104_188_fu_636_p2 = (xor_ln104_493_fu_630_p2 & and_ln104_fu_600_p2);

assign and_ln104_189_fu_1001_p2 = (xor_ln104_494_fu_996_p2 & and_ln102_1269_fu_975_p2);

assign and_ln104_190_fu_1017_p2 = (xor_ln104_495_fu_1012_p2 & and_ln104_186_fu_985_p2);

assign and_ln104_fu_600_p2 = (xor_ln104_490_fu_594_p2 & icmp_ln86_fu_382_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1332_p67;

assign icmp_ln86_1035_fu_388_p2 = (($signed(x_52_val) < $signed(18'd68097)) ? 1'b1 : 1'b0);

assign icmp_ln86_1036_fu_394_p2 = (($signed(x_50_val) < $signed(18'd73488)) ? 1'b1 : 1'b0);

assign icmp_ln86_1037_fu_400_p2 = (($signed(x_12_val) < $signed(18'd259798)) ? 1'b1 : 1'b0);

assign icmp_ln86_1038_fu_406_p2 = (($signed(x_40_val) < $signed(18'd1170)) ? 1'b1 : 1'b0);

assign icmp_ln86_1039_fu_422_p2 = (($signed(tmp_fu_412_p4) < $signed(5'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_1040_fu_428_p2 = (($signed(x_10_val) < $signed(18'd596)) ? 1'b1 : 1'b0);

assign icmp_ln86_1041_fu_434_p2 = (($signed(x_25_val) < $signed(18'd357)) ? 1'b1 : 1'b0);

assign icmp_ln86_1042_fu_440_p2 = (($signed(x_3_val) < $signed(18'd64652)) ? 1'b1 : 1'b0);

assign icmp_ln86_1043_fu_446_p2 = (($signed(x_1_val) < $signed(18'd220680)) ? 1'b1 : 1'b0);

assign icmp_ln86_1044_fu_452_p2 = (($signed(x_47_val) < $signed(18'd115975)) ? 1'b1 : 1'b0);

assign icmp_ln86_1045_fu_458_p2 = (($signed(x_32_val) < $signed(18'd483)) ? 1'b1 : 1'b0);

assign icmp_ln86_1046_fu_464_p2 = (($signed(x_4_val) < $signed(18'd16513)) ? 1'b1 : 1'b0);

assign icmp_ln86_1047_fu_480_p2 = (($signed(tmp_13_fu_470_p4) < $signed(14'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_1048_fu_486_p2 = (($signed(x_28_val) < $signed(18'd12292)) ? 1'b1 : 1'b0);

assign icmp_ln86_1049_fu_492_p2 = (($signed(x_6_val) < $signed(18'd13157)) ? 1'b1 : 1'b0);

assign icmp_ln86_1050_fu_498_p2 = (($signed(x_52_val) < $signed(18'd46593)) ? 1'b1 : 1'b0);

assign icmp_ln86_1051_fu_504_p2 = (($signed(x_7_val) < $signed(18'd3502)) ? 1'b1 : 1'b0);

assign icmp_ln86_1052_fu_510_p2 = (($signed(x_7_val) < $signed(18'd4323)) ? 1'b1 : 1'b0);

assign icmp_ln86_1053_fu_516_p2 = (($signed(x_48_val) < $signed(18'd179411)) ? 1'b1 : 1'b0);

assign icmp_ln86_1054_fu_522_p2 = (($signed(x_1_val) < $signed(18'd45686)) ? 1'b1 : 1'b0);

assign icmp_ln86_1055_fu_528_p2 = (($signed(x_47_val) < $signed(18'd109653)) ? 1'b1 : 1'b0);

assign icmp_ln86_1056_fu_534_p2 = (($signed(x_28_val) < $signed(18'd21902)) ? 1'b1 : 1'b0);

assign icmp_ln86_1057_fu_540_p2 = (($signed(x_50_val) < $signed(18'd22533)) ? 1'b1 : 1'b0);

assign icmp_ln86_1058_fu_546_p2 = (($signed(x_1_val) < $signed(18'd108857)) ? 1'b1 : 1'b0);

assign icmp_ln86_1059_fu_552_p2 = (($signed(x_39_val) < $signed(18'd1842)) ? 1'b1 : 1'b0);

assign icmp_ln86_1060_fu_558_p2 = (($signed(x_1_val) < $signed(18'd86184)) ? 1'b1 : 1'b0);

assign icmp_ln86_1061_fu_564_p2 = (($signed(x_23_val) < $signed(18'd15)) ? 1'b1 : 1'b0);

assign icmp_ln86_1062_fu_570_p2 = (($signed(x_52_val) < $signed(18'd79361)) ? 1'b1 : 1'b0);

assign icmp_ln86_1063_fu_576_p2 = (($signed(x_39_val) < $signed(18'd713)) ? 1'b1 : 1'b0);

assign icmp_ln86_1064_fu_582_p2 = (($signed(x_34_val) < $signed(18'd484)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_382_p2 = (($signed(x_1_val) < $signed(18'd81122)) ? 1'b1 : 1'b0);

assign or_ln117_912_fu_798_p2 = (and_ln102_1285_fu_708_p2 | and_ln102_1270_fu_606_p2);

assign or_ln117_913_fu_812_p2 = (and_ln102_1275_fu_654_p2 | and_ln102_1270_fu_606_p2);

assign or_ln117_914_fu_826_p2 = (or_ln117_913_fu_812_p2 | and_ln102_1287_fu_720_p2);

assign or_ln117_915_fu_852_p2 = (and_ln102_fu_588_p2 | and_ln102_1288_fu_726_p2);

assign or_ln117_916_fu_866_p2 = (and_ln102_fu_588_p2 | and_ln102_1276_fu_666_p2);

assign or_ln117_917_fu_880_p2 = (or_ln117_916_fu_866_p2 | and_ln102_1290_fu_738_p2);

assign or_ln117_918_fu_894_p2 = (and_ln102_fu_588_p2 | and_ln102_1271_fu_624_p2);

assign or_ln117_919_fu_908_p2 = (or_ln117_918_fu_894_p2 | and_ln102_1291_fu_744_p2);

assign or_ln117_920_fu_922_p2 = (or_ln117_918_fu_894_p2 | and_ln102_1277_fu_678_p2);

assign or_ln117_921_fu_936_p2 = (or_ln117_920_fu_922_p2 | and_ln102_1293_fu_756_p2);

assign or_ln117_922_fu_1127_p2 = (icmp_ln86_reg_1468 | and_ln102_1294_fu_1063_p2);

assign or_ln117_923_fu_1132_p2 = (icmp_ln86_reg_1468 | and_ln102_1278_fu_1023_p2);

assign or_ln117_924_fu_1144_p2 = (or_ln117_923_fu_1132_p2 | and_ln102_1296_fu_1073_p2);

assign or_ln117_925_fu_1158_p2 = (icmp_ln86_reg_1468 | and_ln102_1272_fu_991_p2);

assign or_ln117_926_fu_1171_p2 = (or_ln117_925_fu_1158_p2 | and_ln102_1297_fu_1079_p2);

assign or_ln117_927_fu_1185_p2 = (or_ln117_925_fu_1158_p2 | and_ln102_1279_fu_1033_p2);

assign or_ln117_928_fu_1199_p2 = (or_ln117_927_fu_1185_p2 | and_ln102_1299_fu_1089_p2);

assign or_ln117_929_fu_1213_p2 = (icmp_ln86_reg_1468 | and_ln102_1269_fu_975_p2);

assign or_ln117_930_fu_1226_p2 = (or_ln117_929_fu_1213_p2 | and_ln102_1300_fu_1095_p2);

assign or_ln117_931_fu_1240_p2 = (or_ln117_929_fu_1213_p2 | and_ln102_1280_fu_1043_p2);

assign or_ln117_932_fu_1254_p2 = (or_ln117_931_fu_1240_p2 | and_ln102_1302_fu_1105_p2);

assign or_ln117_933_fu_1268_p2 = (or_ln117_929_fu_1213_p2 | and_ln102_1273_fu_1007_p2);

assign or_ln117_934_fu_1282_p2 = (or_ln117_933_fu_1268_p2 | and_ln102_1303_fu_1111_p2);

assign or_ln117_935_fu_1296_p2 = (or_ln117_933_fu_1268_p2 | and_ln102_1281_fu_1053_p2);

assign or_ln117_936_fu_1310_p2 = (or_ln117_935_fu_1296_p2 | and_ln102_1305_fu_1121_p2);

assign or_ln117_fu_772_p2 = (and_ln102_1284_fu_702_p2 | and_ln102_1274_fu_642_p2);

assign select_ln117_1003_fu_786_p3 = ((or_ln117_fu_772_p2[0:0] == 1'b1) ? select_ln117_fu_778_p3 : 2'd3);

assign select_ln117_1004_fu_804_p3 = ((and_ln102_1270_fu_606_p2[0:0] == 1'b1) ? zext_ln117_109_fu_794_p1 : 3'd4);

assign select_ln117_1005_fu_818_p3 = ((or_ln117_912_fu_798_p2[0:0] == 1'b1) ? select_ln117_1004_fu_804_p3 : 3'd5);

assign select_ln117_1006_fu_832_p3 = ((or_ln117_913_fu_812_p2[0:0] == 1'b1) ? select_ln117_1005_fu_818_p3 : 3'd6);

assign select_ln117_1007_fu_840_p3 = ((or_ln117_914_fu_826_p2[0:0] == 1'b1) ? select_ln117_1006_fu_832_p3 : 3'd7);

assign select_ln117_1008_fu_858_p3 = ((and_ln102_fu_588_p2[0:0] == 1'b1) ? zext_ln117_110_fu_848_p1 : 4'd8);

assign select_ln117_1009_fu_872_p3 = ((or_ln117_915_fu_852_p2[0:0] == 1'b1) ? select_ln117_1008_fu_858_p3 : 4'd9);

assign select_ln117_1010_fu_886_p3 = ((or_ln117_916_fu_866_p2[0:0] == 1'b1) ? select_ln117_1009_fu_872_p3 : 4'd10);

assign select_ln117_1011_fu_900_p3 = ((or_ln117_917_fu_880_p2[0:0] == 1'b1) ? select_ln117_1010_fu_886_p3 : 4'd11);

assign select_ln117_1012_fu_914_p3 = ((or_ln117_918_fu_894_p2[0:0] == 1'b1) ? select_ln117_1011_fu_900_p3 : 4'd12);

assign select_ln117_1013_fu_928_p3 = ((or_ln117_919_fu_908_p2[0:0] == 1'b1) ? select_ln117_1012_fu_914_p3 : 4'd13);

assign select_ln117_1014_fu_942_p3 = ((or_ln117_920_fu_922_p2[0:0] == 1'b1) ? select_ln117_1013_fu_928_p3 : 4'd14);

assign select_ln117_1015_fu_950_p3 = ((or_ln117_921_fu_936_p2[0:0] == 1'b1) ? select_ln117_1014_fu_942_p3 : 4'd15);

assign select_ln117_1016_fu_962_p3 = ((icmp_ln86_fu_382_p2[0:0] == 1'b1) ? zext_ln117_111_fu_958_p1 : 5'd16);

assign select_ln117_1017_fu_1137_p3 = ((or_ln117_922_fu_1127_p2[0:0] == 1'b1) ? select_ln117_1016_reg_1559 : 5'd17);

assign select_ln117_1018_fu_1150_p3 = ((or_ln117_923_fu_1132_p2[0:0] == 1'b1) ? select_ln117_1017_fu_1137_p3 : 5'd18);

assign select_ln117_1019_fu_1163_p3 = ((or_ln117_924_fu_1144_p2[0:0] == 1'b1) ? select_ln117_1018_fu_1150_p3 : 5'd19);

assign select_ln117_1020_fu_1177_p3 = ((or_ln117_925_fu_1158_p2[0:0] == 1'b1) ? select_ln117_1019_fu_1163_p3 : 5'd20);

assign select_ln117_1021_fu_1191_p3 = ((or_ln117_926_fu_1171_p2[0:0] == 1'b1) ? select_ln117_1020_fu_1177_p3 : 5'd21);

assign select_ln117_1022_fu_1205_p3 = ((or_ln117_927_fu_1185_p2[0:0] == 1'b1) ? select_ln117_1021_fu_1191_p3 : 5'd22);

assign select_ln117_1023_fu_1218_p3 = ((or_ln117_928_fu_1199_p2[0:0] == 1'b1) ? select_ln117_1022_fu_1205_p3 : 5'd23);

assign select_ln117_1024_fu_1232_p3 = ((or_ln117_929_fu_1213_p2[0:0] == 1'b1) ? select_ln117_1023_fu_1218_p3 : 5'd24);

assign select_ln117_1025_fu_1246_p3 = ((or_ln117_930_fu_1226_p2[0:0] == 1'b1) ? select_ln117_1024_fu_1232_p3 : 5'd25);

assign select_ln117_1026_fu_1260_p3 = ((or_ln117_931_fu_1240_p2[0:0] == 1'b1) ? select_ln117_1025_fu_1246_p3 : 5'd26);

assign select_ln117_1027_fu_1274_p3 = ((or_ln117_932_fu_1254_p2[0:0] == 1'b1) ? select_ln117_1026_fu_1260_p3 : 5'd27);

assign select_ln117_1028_fu_1288_p3 = ((or_ln117_933_fu_1268_p2[0:0] == 1'b1) ? select_ln117_1027_fu_1274_p3 : 5'd28);

assign select_ln117_1029_fu_1302_p3 = ((or_ln117_934_fu_1282_p2[0:0] == 1'b1) ? select_ln117_1028_fu_1288_p3 : 5'd29);

assign select_ln117_1030_fu_1316_p3 = ((or_ln117_935_fu_1296_p2[0:0] == 1'b1) ? select_ln117_1029_fu_1302_p3 : 5'd30);

assign select_ln117_fu_778_p3 = ((and_ln102_1274_fu_642_p2[0:0] == 1'b1) ? zext_ln117_fu_768_p1 : 2'd2);

assign tmp_13_fu_470_p4 = {{x_23_val[17:4]}};

assign tmp_fu_412_p4 = {{x_6_val[17:13]}};

assign xor_ln104_490_fu_594_p2 = (icmp_ln86_1035_fu_388_p2 ^ 1'd1);

assign xor_ln104_491_fu_980_p2 = (icmp_ln86_1036_reg_1477 ^ 1'd1);

assign xor_ln104_492_fu_612_p2 = (icmp_ln86_1037_fu_400_p2 ^ 1'd1);

assign xor_ln104_493_fu_630_p2 = (icmp_ln86_1038_fu_406_p2 ^ 1'd1);

assign xor_ln104_494_fu_996_p2 = (icmp_ln86_1039_reg_1483 ^ 1'd1);

assign xor_ln104_495_fu_1012_p2 = (icmp_ln86_1040_reg_1489 ^ 1'd1);

assign xor_ln104_496_fu_648_p2 = (icmp_ln86_1041_fu_434_p2 ^ 1'd1);

assign xor_ln104_497_fu_660_p2 = (icmp_ln86_1042_fu_440_p2 ^ 1'd1);

assign xor_ln104_498_fu_672_p2 = (icmp_ln86_1043_fu_446_p2 ^ 1'd1);

assign xor_ln104_499_fu_684_p2 = (icmp_ln86_1044_fu_452_p2 ^ 1'd1);

assign xor_ln104_500_fu_1028_p2 = (icmp_ln86_1045_reg_1495 ^ 1'd1);

assign xor_ln104_501_fu_1038_p2 = (icmp_ln86_1046_reg_1501 ^ 1'd1);

assign xor_ln104_502_fu_1048_p2 = (icmp_ln86_1047_reg_1507 ^ 1'd1);

assign xor_ln104_503_fu_1058_p2 = (icmp_ln86_1048_reg_1513 ^ 1'd1);

assign xor_ln104_fu_970_p2 = (icmp_ln86_reg_1468 ^ 1'd1);

assign xor_ln117_fu_762_p2 = (1'd1 ^ and_ln102_1282_fu_690_p2);

assign zext_ln117_109_fu_794_p1 = select_ln117_1003_fu_786_p3;

assign zext_ln117_110_fu_848_p1 = select_ln117_1007_fu_840_p3;

assign zext_ln117_111_fu_958_p1 = select_ln117_1015_fu_950_p3;

assign zext_ln117_fu_768_p1 = xor_ln117_fu_762_p2;

endmodule //my_prj_decision_function_63
