// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_40 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_2_val,
        x_3_val,
        x_5_val,
        x_6_val,
        x_7_val,
        x_10_val,
        x_13_val,
        x_14_val,
        x_16_val,
        x_23_val,
        x_24_val,
        x_25_val,
        x_26_val,
        x_33_val,
        x_37_val,
        x_38_val,
        x_39_val,
        x_42_val,
        x_44_val,
        x_45_val,
        x_49_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_2_val;
input  [17:0] x_3_val;
input  [17:0] x_5_val;
input  [17:0] x_6_val;
input  [17:0] x_7_val;
input  [17:0] x_10_val;
input  [17:0] x_13_val;
input  [17:0] x_14_val;
input  [17:0] x_16_val;
input  [17:0] x_23_val;
input  [17:0] x_24_val;
input  [17:0] x_25_val;
input  [17:0] x_26_val;
input  [17:0] x_33_val;
input  [17:0] x_37_val;
input  [17:0] x_38_val;
input  [17:0] x_39_val;
input  [17:0] x_42_val;
input  [17:0] x_44_val;
input  [17:0] x_45_val;
input  [17:0] x_49_val;
input  [17:0] x_52_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_424_p2;
reg   [0:0] icmp_ln86_reg_1520;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_1045_fu_436_p2;
reg   [0:0] icmp_ln86_1045_reg_1529;
wire   [0:0] icmp_ln86_1048_fu_454_p2;
reg   [0:0] icmp_ln86_1048_reg_1535;
wire   [0:0] icmp_ln86_1049_fu_460_p2;
reg   [0:0] icmp_ln86_1049_reg_1541;
wire   [0:0] icmp_ln86_1054_fu_500_p2;
reg   [0:0] icmp_ln86_1054_reg_1547;
wire   [0:0] icmp_ln86_1055_fu_506_p2;
reg   [0:0] icmp_ln86_1055_reg_1553;
wire   [0:0] icmp_ln86_1056_fu_512_p2;
reg   [0:0] icmp_ln86_1056_reg_1559;
wire   [0:0] icmp_ln86_1057_fu_518_p2;
reg   [0:0] icmp_ln86_1057_reg_1565;
wire   [0:0] icmp_ln86_1066_fu_582_p2;
reg   [0:0] icmp_ln86_1066_reg_1571;
wire   [0:0] icmp_ln86_1067_fu_588_p2;
reg   [0:0] icmp_ln86_1067_reg_1576;
wire   [0:0] icmp_ln86_1068_fu_594_p2;
reg   [0:0] icmp_ln86_1068_reg_1581;
wire   [0:0] icmp_ln86_1069_fu_600_p2;
reg   [0:0] icmp_ln86_1069_reg_1586;
wire   [0:0] icmp_ln86_1070_fu_606_p2;
reg   [0:0] icmp_ln86_1070_reg_1591;
wire   [0:0] icmp_ln86_1071_fu_612_p2;
reg   [0:0] icmp_ln86_1071_reg_1596;
wire   [0:0] icmp_ln86_1072_fu_618_p2;
reg   [0:0] icmp_ln86_1072_reg_1601;
wire   [0:0] icmp_ln86_1390_fu_634_p2;
reg   [0:0] icmp_ln86_1390_reg_1606;
wire   [4:0] select_ln117_1024_fu_1014_p3;
reg   [4:0] select_ln117_1024_reg_1611;
wire    ap_block_pp0_stage0;
wire   [15:0] tmp_fu_472_p4;
wire   [15:0] tmp_21_fu_554_p4;
wire   [14:0] tmp_22_fu_624_p4;
wire   [0:0] icmp_ln86_1044_fu_430_p2;
wire   [0:0] xor_ln104_501_fu_646_p2;
wire   [0:0] icmp_ln86_1046_fu_442_p2;
wire   [0:0] and_ln102_fu_640_p2;
wire   [0:0] xor_ln104_503_fu_664_p2;
wire   [0:0] icmp_ln86_1047_fu_448_p2;
wire   [0:0] and_ln104_fu_652_p2;
wire   [0:0] xor_ln104_504_fu_682_p2;
wire   [0:0] icmp_ln86_1050_fu_466_p2;
wire   [0:0] and_ln102_1005_fu_658_p2;
wire   [0:0] icmp_ln86_1388_fu_482_p2;
wire   [0:0] and_ln104_205_fu_670_p2;
wire   [0:0] icmp_ln86_1052_fu_488_p2;
wire   [0:0] and_ln102_1006_fu_676_p2;
wire   [0:0] icmp_ln86_1053_fu_494_p2;
wire   [0:0] and_ln104_206_fu_688_p2;
wire   [0:0] icmp_ln86_1058_fu_524_p2;
wire   [0:0] and_ln102_1009_fu_694_p2;
wire   [0:0] icmp_ln86_1059_fu_530_p2;
wire   [0:0] xor_ln104_507_fu_700_p2;
wire   [0:0] and_ln102_1033_fu_748_p2;
wire   [0:0] icmp_ln86_1060_fu_536_p2;
wire   [0:0] and_ln102_1010_fu_706_p2;
wire   [0:0] icmp_ln86_1061_fu_542_p2;
wire   [0:0] xor_ln104_508_fu_712_p2;
wire   [0:0] and_ln102_1034_fu_766_p2;
wire   [0:0] icmp_ln86_1062_fu_548_p2;
wire   [0:0] and_ln102_1011_fu_718_p2;
wire   [0:0] icmp_ln86_1389_fu_564_p2;
wire   [0:0] xor_ln104_509_fu_724_p2;
wire   [0:0] and_ln102_1035_fu_784_p2;
wire   [0:0] icmp_ln86_1064_fu_570_p2;
wire   [0:0] and_ln102_1012_fu_730_p2;
wire   [0:0] icmp_ln86_1065_fu_576_p2;
wire   [0:0] xor_ln104_510_fu_736_p2;
wire   [0:0] and_ln102_1036_fu_802_p2;
wire   [0:0] and_ln102_1017_fu_742_p2;
wire   [0:0] xor_ln117_fu_814_p2;
wire   [0:0] and_ln102_1018_fu_754_p2;
wire   [1:0] zext_ln117_fu_820_p1;
wire   [0:0] or_ln117_fu_824_p2;
wire   [1:0] select_ln117_fu_830_p3;
wire   [1:0] select_ln117_1011_fu_838_p3;
wire   [0:0] and_ln102_1019_fu_760_p2;
wire   [2:0] zext_ln117_117_fu_846_p1;
wire   [0:0] or_ln117_954_fu_850_p2;
wire   [2:0] select_ln117_1012_fu_856_p3;
wire   [0:0] or_ln117_955_fu_864_p2;
wire   [0:0] and_ln102_1020_fu_772_p2;
wire   [2:0] select_ln117_1013_fu_870_p3;
wire   [0:0] or_ln117_956_fu_878_p2;
wire   [2:0] select_ln117_1014_fu_884_p3;
wire   [2:0] select_ln117_1015_fu_892_p3;
wire   [0:0] and_ln102_1021_fu_778_p2;
wire   [3:0] zext_ln117_118_fu_900_p1;
wire   [0:0] or_ln117_957_fu_904_p2;
wire   [3:0] select_ln117_1016_fu_910_p3;
wire   [0:0] or_ln117_958_fu_918_p2;
wire   [0:0] and_ln102_1022_fu_790_p2;
wire   [3:0] select_ln117_1017_fu_924_p3;
wire   [0:0] or_ln117_959_fu_932_p2;
wire   [3:0] select_ln117_1018_fu_938_p3;
wire   [0:0] or_ln117_960_fu_946_p2;
wire   [0:0] and_ln102_1023_fu_796_p2;
wire   [3:0] select_ln117_1019_fu_952_p3;
wire   [0:0] or_ln117_961_fu_960_p2;
wire   [3:0] select_ln117_1020_fu_966_p3;
wire   [0:0] or_ln117_962_fu_974_p2;
wire   [0:0] and_ln102_1024_fu_808_p2;
wire   [3:0] select_ln117_1021_fu_980_p3;
wire   [0:0] or_ln117_963_fu_988_p2;
wire   [3:0] select_ln117_1022_fu_994_p3;
wire   [3:0] select_ln117_1023_fu_1002_p3;
wire   [4:0] zext_ln117_119_fu_1010_p1;
wire   [0:0] xor_ln104_fu_1022_p2;
wire   [0:0] xor_ln104_502_fu_1032_p2;
wire   [0:0] and_ln102_1004_fu_1027_p2;
wire   [0:0] xor_ln104_505_fu_1048_p2;
wire   [0:0] and_ln104_204_fu_1037_p2;
wire   [0:0] xor_ln104_506_fu_1064_p2;
wire   [0:0] and_ln102_1007_fu_1043_p2;
wire   [0:0] and_ln104_207_fu_1053_p2;
wire   [0:0] and_ln102_1008_fu_1059_p2;
wire   [0:0] and_ln104_208_fu_1069_p2;
wire   [0:0] and_ln102_1013_fu_1075_p2;
wire   [0:0] xor_ln104_511_fu_1080_p2;
wire   [0:0] and_ln102_1037_fu_1120_p2;
wire   [0:0] and_ln102_1014_fu_1085_p2;
wire   [0:0] xor_ln104_512_fu_1090_p2;
wire   [0:0] and_ln102_1038_fu_1136_p2;
wire   [0:0] and_ln102_1015_fu_1095_p2;
wire   [0:0] xor_ln104_513_fu_1100_p2;
wire   [0:0] and_ln102_1039_fu_1152_p2;
wire   [0:0] and_ln102_1016_fu_1105_p2;
wire   [0:0] xor_ln104_514_fu_1110_p2;
wire   [0:0] and_ln102_1040_fu_1168_p2;
wire   [0:0] and_ln102_1025_fu_1115_p2;
wire   [0:0] or_ln117_964_fu_1179_p2;
wire   [0:0] or_ln117_965_fu_1184_p2;
wire   [0:0] and_ln102_1026_fu_1125_p2;
wire   [4:0] select_ln117_1025_fu_1189_p3;
wire   [0:0] or_ln117_966_fu_1196_p2;
wire   [4:0] select_ln117_1026_fu_1202_p3;
wire   [0:0] or_ln117_967_fu_1210_p2;
wire   [0:0] and_ln102_1027_fu_1131_p2;
wire   [4:0] select_ln117_1027_fu_1215_p3;
wire   [0:0] or_ln117_968_fu_1223_p2;
wire   [4:0] select_ln117_1028_fu_1229_p3;
wire   [0:0] or_ln117_969_fu_1237_p2;
wire   [0:0] and_ln102_1028_fu_1141_p2;
wire   [4:0] select_ln117_1029_fu_1243_p3;
wire   [0:0] or_ln117_970_fu_1251_p2;
wire   [4:0] select_ln117_1030_fu_1257_p3;
wire   [0:0] or_ln117_971_fu_1265_p2;
wire   [0:0] and_ln102_1029_fu_1147_p2;
wire   [4:0] select_ln117_1031_fu_1270_p3;
wire   [0:0] or_ln117_972_fu_1278_p2;
wire   [4:0] select_ln117_1032_fu_1284_p3;
wire   [0:0] or_ln117_973_fu_1292_p2;
wire   [0:0] and_ln102_1030_fu_1157_p2;
wire   [4:0] select_ln117_1033_fu_1298_p3;
wire   [0:0] or_ln117_974_fu_1306_p2;
wire   [4:0] select_ln117_1034_fu_1312_p3;
wire   [0:0] or_ln117_975_fu_1320_p2;
wire   [0:0] and_ln102_1031_fu_1163_p2;
wire   [4:0] select_ln117_1035_fu_1326_p3;
wire   [0:0] or_ln117_976_fu_1334_p2;
wire   [4:0] select_ln117_1036_fu_1340_p3;
wire   [0:0] or_ln117_977_fu_1348_p2;
wire   [0:0] and_ln102_1032_fu_1173_p2;
wire   [4:0] select_ln117_1037_fu_1354_p3;
wire   [0:0] or_ln117_978_fu_1362_p2;
wire   [4:0] select_ln117_1038_fu_1368_p3;
wire   [11:0] agg_result_fu_1384_p65;
wire   [4:0] agg_result_fu_1384_p66;
wire   [11:0] agg_result_fu_1384_p67;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1384_p1;
wire   [4:0] agg_result_fu_1384_p3;
wire   [4:0] agg_result_fu_1384_p5;
wire   [4:0] agg_result_fu_1384_p7;
wire   [4:0] agg_result_fu_1384_p9;
wire   [4:0] agg_result_fu_1384_p11;
wire   [4:0] agg_result_fu_1384_p13;
wire   [4:0] agg_result_fu_1384_p15;
wire   [4:0] agg_result_fu_1384_p17;
wire   [4:0] agg_result_fu_1384_p19;
wire   [4:0] agg_result_fu_1384_p21;
wire   [4:0] agg_result_fu_1384_p23;
wire   [4:0] agg_result_fu_1384_p25;
wire   [4:0] agg_result_fu_1384_p27;
wire   [4:0] agg_result_fu_1384_p29;
wire   [4:0] agg_result_fu_1384_p31;
wire  signed [4:0] agg_result_fu_1384_p33;
wire  signed [4:0] agg_result_fu_1384_p35;
wire  signed [4:0] agg_result_fu_1384_p37;
wire  signed [4:0] agg_result_fu_1384_p39;
wire  signed [4:0] agg_result_fu_1384_p41;
wire  signed [4:0] agg_result_fu_1384_p43;
wire  signed [4:0] agg_result_fu_1384_p45;
wire  signed [4:0] agg_result_fu_1384_p47;
wire  signed [4:0] agg_result_fu_1384_p49;
wire  signed [4:0] agg_result_fu_1384_p51;
wire  signed [4:0] agg_result_fu_1384_p53;
wire  signed [4:0] agg_result_fu_1384_p55;
wire  signed [4:0] agg_result_fu_1384_p57;
wire  signed [4:0] agg_result_fu_1384_p59;
wire  signed [4:0] agg_result_fu_1384_p61;
wire  signed [4:0] agg_result_fu_1384_p63;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_65_5_12_1_1_x25 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 12 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 12 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 12 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 12 ),
    .CASE31( 5'h1F ),
    .din31_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_65_5_12_1_1_x25_U1315(
    .din0(12'd4068),
    .din1(12'd555),
    .din2(12'd1460),
    .din3(12'd225),
    .din4(12'd3931),
    .din5(12'd881),
    .din6(12'd120),
    .din7(12'd3796),
    .din8(12'd3637),
    .din9(12'd682),
    .din10(12'd815),
    .din11(12'd286),
    .din12(12'd3452),
    .din13(12'd367),
    .din14(12'd701),
    .din15(12'd92),
    .din16(12'd3631),
    .din17(12'd291),
    .din18(12'd3611),
    .din19(12'd2774),
    .din20(12'd4032),
    .din21(12'd13),
    .din22(12'd3221),
    .din23(12'd4029),
    .din24(12'd4075),
    .din25(12'd3363),
    .din26(12'd525),
    .din27(12'd3857),
    .din28(12'd225),
    .din29(12'd1743),
    .din30(12'd2680),
    .din31(12'd3755),
    .def(agg_result_fu_1384_p65),
    .sel(agg_result_fu_1384_p66),
    .dout(agg_result_fu_1384_p67)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_1045_reg_1529 <= icmp_ln86_1045_fu_436_p2;
        icmp_ln86_1048_reg_1535 <= icmp_ln86_1048_fu_454_p2;
        icmp_ln86_1049_reg_1541 <= icmp_ln86_1049_fu_460_p2;
        icmp_ln86_1054_reg_1547 <= icmp_ln86_1054_fu_500_p2;
        icmp_ln86_1055_reg_1553 <= icmp_ln86_1055_fu_506_p2;
        icmp_ln86_1056_reg_1559 <= icmp_ln86_1056_fu_512_p2;
        icmp_ln86_1057_reg_1565 <= icmp_ln86_1057_fu_518_p2;
        icmp_ln86_1066_reg_1571 <= icmp_ln86_1066_fu_582_p2;
        icmp_ln86_1067_reg_1576 <= icmp_ln86_1067_fu_588_p2;
        icmp_ln86_1068_reg_1581 <= icmp_ln86_1068_fu_594_p2;
        icmp_ln86_1069_reg_1586 <= icmp_ln86_1069_fu_600_p2;
        icmp_ln86_1070_reg_1591 <= icmp_ln86_1070_fu_606_p2;
        icmp_ln86_1071_reg_1596 <= icmp_ln86_1071_fu_612_p2;
        icmp_ln86_1072_reg_1601 <= icmp_ln86_1072_fu_618_p2;
        icmp_ln86_1390_reg_1606 <= icmp_ln86_1390_fu_634_p2;
        icmp_ln86_reg_1520 <= icmp_ln86_fu_424_p2;
        select_ln117_1024_reg_1611 <= select_ln117_1024_fu_1014_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1384_p65 = 'bx;

assign agg_result_fu_1384_p66 = ((or_ln117_978_fu_1362_p2[0:0] == 1'b1) ? select_ln117_1038_fu_1368_p3 : 5'd31);

assign and_ln102_1004_fu_1027_p2 = (xor_ln104_fu_1022_p2 & icmp_ln86_1045_reg_1529);

assign and_ln102_1005_fu_658_p2 = (icmp_ln86_1046_fu_442_p2 & and_ln102_fu_640_p2);

assign and_ln102_1006_fu_676_p2 = (icmp_ln86_1047_fu_448_p2 & and_ln104_fu_652_p2);

assign and_ln102_1007_fu_1043_p2 = (icmp_ln86_1048_reg_1535 & and_ln102_1004_fu_1027_p2);

assign and_ln102_1008_fu_1059_p2 = (icmp_ln86_1049_reg_1541 & and_ln104_204_fu_1037_p2);

assign and_ln102_1009_fu_694_p2 = (icmp_ln86_1050_fu_466_p2 & and_ln102_1005_fu_658_p2);

assign and_ln102_1010_fu_706_p2 = (icmp_ln86_1388_fu_482_p2 & and_ln104_205_fu_670_p2);

assign and_ln102_1011_fu_718_p2 = (icmp_ln86_1052_fu_488_p2 & and_ln102_1006_fu_676_p2);

assign and_ln102_1012_fu_730_p2 = (icmp_ln86_1053_fu_494_p2 & and_ln104_206_fu_688_p2);

assign and_ln102_1013_fu_1075_p2 = (icmp_ln86_1054_reg_1547 & and_ln102_1007_fu_1043_p2);

assign and_ln102_1014_fu_1085_p2 = (icmp_ln86_1055_reg_1553 & and_ln104_207_fu_1053_p2);

assign and_ln102_1015_fu_1095_p2 = (icmp_ln86_1056_reg_1559 & and_ln102_1008_fu_1059_p2);

assign and_ln102_1016_fu_1105_p2 = (icmp_ln86_1057_reg_1565 & and_ln104_208_fu_1069_p2);

assign and_ln102_1017_fu_742_p2 = (icmp_ln86_1058_fu_524_p2 & and_ln102_1009_fu_694_p2);

assign and_ln102_1018_fu_754_p2 = (and_ln102_1033_fu_748_p2 & and_ln102_1005_fu_658_p2);

assign and_ln102_1019_fu_760_p2 = (icmp_ln86_1060_fu_536_p2 & and_ln102_1010_fu_706_p2);

assign and_ln102_1020_fu_772_p2 = (and_ln104_205_fu_670_p2 & and_ln102_1034_fu_766_p2);

assign and_ln102_1021_fu_778_p2 = (icmp_ln86_1062_fu_548_p2 & and_ln102_1011_fu_718_p2);

assign and_ln102_1022_fu_790_p2 = (and_ln102_1035_fu_784_p2 & and_ln102_1006_fu_676_p2);

assign and_ln102_1023_fu_796_p2 = (icmp_ln86_1064_fu_570_p2 & and_ln102_1012_fu_730_p2);

assign and_ln102_1024_fu_808_p2 = (and_ln104_206_fu_688_p2 & and_ln102_1036_fu_802_p2);

assign and_ln102_1025_fu_1115_p2 = (icmp_ln86_1066_reg_1571 & and_ln102_1013_fu_1075_p2);

assign and_ln102_1026_fu_1125_p2 = (and_ln102_1037_fu_1120_p2 & and_ln102_1007_fu_1043_p2);

assign and_ln102_1027_fu_1131_p2 = (icmp_ln86_1068_reg_1581 & and_ln102_1014_fu_1085_p2);

assign and_ln102_1028_fu_1141_p2 = (and_ln104_207_fu_1053_p2 & and_ln102_1038_fu_1136_p2);

assign and_ln102_1029_fu_1147_p2 = (icmp_ln86_1070_reg_1591 & and_ln102_1015_fu_1095_p2);

assign and_ln102_1030_fu_1157_p2 = (and_ln102_1039_fu_1152_p2 & and_ln102_1008_fu_1059_p2);

assign and_ln102_1031_fu_1163_p2 = (icmp_ln86_1072_reg_1601 & and_ln102_1016_fu_1105_p2);

assign and_ln102_1032_fu_1173_p2 = (and_ln104_208_fu_1069_p2 & and_ln102_1040_fu_1168_p2);

assign and_ln102_1033_fu_748_p2 = (xor_ln104_507_fu_700_p2 & icmp_ln86_1059_fu_530_p2);

assign and_ln102_1034_fu_766_p2 = (xor_ln104_508_fu_712_p2 & icmp_ln86_1061_fu_542_p2);

assign and_ln102_1035_fu_784_p2 = (xor_ln104_509_fu_724_p2 & icmp_ln86_1389_fu_564_p2);

assign and_ln102_1036_fu_802_p2 = (xor_ln104_510_fu_736_p2 & icmp_ln86_1065_fu_576_p2);

assign and_ln102_1037_fu_1120_p2 = (xor_ln104_511_fu_1080_p2 & icmp_ln86_1067_reg_1576);

assign and_ln102_1038_fu_1136_p2 = (xor_ln104_512_fu_1090_p2 & icmp_ln86_1069_reg_1586);

assign and_ln102_1039_fu_1152_p2 = (xor_ln104_513_fu_1100_p2 & icmp_ln86_1071_reg_1596);

assign and_ln102_1040_fu_1168_p2 = (xor_ln104_514_fu_1110_p2 & icmp_ln86_1390_reg_1606);

assign and_ln102_fu_640_p2 = (icmp_ln86_fu_424_p2 & icmp_ln86_1044_fu_430_p2);

assign and_ln104_204_fu_1037_p2 = (xor_ln104_fu_1022_p2 & xor_ln104_502_fu_1032_p2);

assign and_ln104_205_fu_670_p2 = (xor_ln104_503_fu_664_p2 & and_ln102_fu_640_p2);

assign and_ln104_206_fu_688_p2 = (xor_ln104_504_fu_682_p2 & and_ln104_fu_652_p2);

assign and_ln104_207_fu_1053_p2 = (xor_ln104_505_fu_1048_p2 & and_ln102_1004_fu_1027_p2);

assign and_ln104_208_fu_1069_p2 = (xor_ln104_506_fu_1064_p2 & and_ln104_204_fu_1037_p2);

assign and_ln104_fu_652_p2 = (xor_ln104_501_fu_646_p2 & icmp_ln86_fu_424_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1384_p67;

assign icmp_ln86_1044_fu_430_p2 = (($signed(x_6_val) < $signed(18'd8395)) ? 1'b1 : 1'b0);

assign icmp_ln86_1045_fu_436_p2 = (($signed(x_2_val) < $signed(18'd1468)) ? 1'b1 : 1'b0);

assign icmp_ln86_1046_fu_442_p2 = (($signed(x_16_val) < $signed(18'd98)) ? 1'b1 : 1'b0);

assign icmp_ln86_1047_fu_448_p2 = (($signed(x_6_val) < $signed(18'd8661)) ? 1'b1 : 1'b0);

assign icmp_ln86_1048_fu_454_p2 = (($signed(x_23_val) < $signed(18'd6)) ? 1'b1 : 1'b0);

assign icmp_ln86_1049_fu_460_p2 = (($signed(x_13_val) < $signed(18'd389)) ? 1'b1 : 1'b0);

assign icmp_ln86_1050_fu_466_p2 = (($signed(x_3_val) < $signed(18'd92071)) ? 1'b1 : 1'b0);

assign icmp_ln86_1052_fu_488_p2 = (($signed(x_5_val) < $signed(18'd9579)) ? 1'b1 : 1'b0);

assign icmp_ln86_1053_fu_494_p2 = (($signed(x_38_val) < $signed(18'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_1054_fu_500_p2 = (($signed(x_14_val) < $signed(18'd22)) ? 1'b1 : 1'b0);

assign icmp_ln86_1055_fu_506_p2 = (($signed(x_33_val) < $signed(18'd816)) ? 1'b1 : 1'b0);

assign icmp_ln86_1056_fu_512_p2 = (($signed(x_1_val) < $signed(18'd17053)) ? 1'b1 : 1'b0);

assign icmp_ln86_1057_fu_518_p2 = (($signed(x_49_val) < $signed(18'd82847)) ? 1'b1 : 1'b0);

assign icmp_ln86_1058_fu_524_p2 = (($signed(x_45_val) < $signed(18'd422)) ? 1'b1 : 1'b0);

assign icmp_ln86_1059_fu_530_p2 = (($signed(x_49_val) < $signed(18'd8877)) ? 1'b1 : 1'b0);

assign icmp_ln86_1060_fu_536_p2 = (($signed(x_7_val) < $signed(18'd935)) ? 1'b1 : 1'b0);

assign icmp_ln86_1061_fu_542_p2 = (($signed(x_10_val) < $signed(18'd906)) ? 1'b1 : 1'b0);

assign icmp_ln86_1062_fu_548_p2 = (($signed(x_42_val) < $signed(18'd286)) ? 1'b1 : 1'b0);

assign icmp_ln86_1064_fu_570_p2 = (($signed(x_39_val) < $signed(18'd1110)) ? 1'b1 : 1'b0);

assign icmp_ln86_1065_fu_576_p2 = (($signed(x_26_val) < $signed(18'd1507)) ? 1'b1 : 1'b0);

assign icmp_ln86_1066_fu_582_p2 = (($signed(x_33_val) < $signed(18'd530)) ? 1'b1 : 1'b0);

assign icmp_ln86_1067_fu_588_p2 = (($signed(x_23_val) < $signed(18'd5)) ? 1'b1 : 1'b0);

assign icmp_ln86_1068_fu_594_p2 = (($signed(x_7_val) < $signed(18'd3891)) ? 1'b1 : 1'b0);

assign icmp_ln86_1069_fu_600_p2 = (($signed(x_25_val) < $signed(18'd33)) ? 1'b1 : 1'b0);

assign icmp_ln86_1070_fu_606_p2 = (($signed(x_24_val) < $signed(18'd271)) ? 1'b1 : 1'b0);

assign icmp_ln86_1071_fu_612_p2 = (($signed(x_1_val) < $signed(18'd46976)) ? 1'b1 : 1'b0);

assign icmp_ln86_1072_fu_618_p2 = (($signed(x_7_val) < $signed(18'd13131)) ? 1'b1 : 1'b0);

assign icmp_ln86_1388_fu_482_p2 = (($signed(tmp_fu_472_p4) < $signed(16'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_1389_fu_564_p2 = (($signed(tmp_21_fu_554_p4) < $signed(16'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_1390_fu_634_p2 = (($signed(tmp_22_fu_624_p4) < $signed(15'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_424_p2 = (($signed(x_52_val) < $signed(18'd33281)) ? 1'b1 : 1'b0);

assign or_ln117_954_fu_850_p2 = (and_ln102_1019_fu_760_p2 | and_ln102_1005_fu_658_p2);

assign or_ln117_955_fu_864_p2 = (and_ln102_1010_fu_706_p2 | and_ln102_1005_fu_658_p2);

assign or_ln117_956_fu_878_p2 = (or_ln117_955_fu_864_p2 | and_ln102_1020_fu_772_p2);

assign or_ln117_957_fu_904_p2 = (and_ln102_fu_640_p2 | and_ln102_1021_fu_778_p2);

assign or_ln117_958_fu_918_p2 = (and_ln102_fu_640_p2 | and_ln102_1011_fu_718_p2);

assign or_ln117_959_fu_932_p2 = (or_ln117_958_fu_918_p2 | and_ln102_1022_fu_790_p2);

assign or_ln117_960_fu_946_p2 = (and_ln102_fu_640_p2 | and_ln102_1006_fu_676_p2);

assign or_ln117_961_fu_960_p2 = (or_ln117_960_fu_946_p2 | and_ln102_1023_fu_796_p2);

assign or_ln117_962_fu_974_p2 = (or_ln117_960_fu_946_p2 | and_ln102_1012_fu_730_p2);

assign or_ln117_963_fu_988_p2 = (or_ln117_962_fu_974_p2 | and_ln102_1024_fu_808_p2);

assign or_ln117_964_fu_1179_p2 = (icmp_ln86_reg_1520 | and_ln102_1025_fu_1115_p2);

assign or_ln117_965_fu_1184_p2 = (icmp_ln86_reg_1520 | and_ln102_1013_fu_1075_p2);

assign or_ln117_966_fu_1196_p2 = (or_ln117_965_fu_1184_p2 | and_ln102_1026_fu_1125_p2);

assign or_ln117_967_fu_1210_p2 = (icmp_ln86_reg_1520 | and_ln102_1007_fu_1043_p2);

assign or_ln117_968_fu_1223_p2 = (or_ln117_967_fu_1210_p2 | and_ln102_1027_fu_1131_p2);

assign or_ln117_969_fu_1237_p2 = (or_ln117_967_fu_1210_p2 | and_ln102_1014_fu_1085_p2);

assign or_ln117_970_fu_1251_p2 = (or_ln117_969_fu_1237_p2 | and_ln102_1028_fu_1141_p2);

assign or_ln117_971_fu_1265_p2 = (icmp_ln86_reg_1520 | and_ln102_1004_fu_1027_p2);

assign or_ln117_972_fu_1278_p2 = (or_ln117_971_fu_1265_p2 | and_ln102_1029_fu_1147_p2);

assign or_ln117_973_fu_1292_p2 = (or_ln117_971_fu_1265_p2 | and_ln102_1015_fu_1095_p2);

assign or_ln117_974_fu_1306_p2 = (or_ln117_973_fu_1292_p2 | and_ln102_1030_fu_1157_p2);

assign or_ln117_975_fu_1320_p2 = (or_ln117_971_fu_1265_p2 | and_ln102_1008_fu_1059_p2);

assign or_ln117_976_fu_1334_p2 = (or_ln117_975_fu_1320_p2 | and_ln102_1031_fu_1163_p2);

assign or_ln117_977_fu_1348_p2 = (or_ln117_975_fu_1320_p2 | and_ln102_1016_fu_1105_p2);

assign or_ln117_978_fu_1362_p2 = (or_ln117_977_fu_1348_p2 | and_ln102_1032_fu_1173_p2);

assign or_ln117_fu_824_p2 = (and_ln102_1018_fu_754_p2 | and_ln102_1009_fu_694_p2);

assign select_ln117_1011_fu_838_p3 = ((or_ln117_fu_824_p2[0:0] == 1'b1) ? select_ln117_fu_830_p3 : 2'd3);

assign select_ln117_1012_fu_856_p3 = ((and_ln102_1005_fu_658_p2[0:0] == 1'b1) ? zext_ln117_117_fu_846_p1 : 3'd4);

assign select_ln117_1013_fu_870_p3 = ((or_ln117_954_fu_850_p2[0:0] == 1'b1) ? select_ln117_1012_fu_856_p3 : 3'd5);

assign select_ln117_1014_fu_884_p3 = ((or_ln117_955_fu_864_p2[0:0] == 1'b1) ? select_ln117_1013_fu_870_p3 : 3'd6);

assign select_ln117_1015_fu_892_p3 = ((or_ln117_956_fu_878_p2[0:0] == 1'b1) ? select_ln117_1014_fu_884_p3 : 3'd7);

assign select_ln117_1016_fu_910_p3 = ((and_ln102_fu_640_p2[0:0] == 1'b1) ? zext_ln117_118_fu_900_p1 : 4'd8);

assign select_ln117_1017_fu_924_p3 = ((or_ln117_957_fu_904_p2[0:0] == 1'b1) ? select_ln117_1016_fu_910_p3 : 4'd9);

assign select_ln117_1018_fu_938_p3 = ((or_ln117_958_fu_918_p2[0:0] == 1'b1) ? select_ln117_1017_fu_924_p3 : 4'd10);

assign select_ln117_1019_fu_952_p3 = ((or_ln117_959_fu_932_p2[0:0] == 1'b1) ? select_ln117_1018_fu_938_p3 : 4'd11);

assign select_ln117_1020_fu_966_p3 = ((or_ln117_960_fu_946_p2[0:0] == 1'b1) ? select_ln117_1019_fu_952_p3 : 4'd12);

assign select_ln117_1021_fu_980_p3 = ((or_ln117_961_fu_960_p2[0:0] == 1'b1) ? select_ln117_1020_fu_966_p3 : 4'd13);

assign select_ln117_1022_fu_994_p3 = ((or_ln117_962_fu_974_p2[0:0] == 1'b1) ? select_ln117_1021_fu_980_p3 : 4'd14);

assign select_ln117_1023_fu_1002_p3 = ((or_ln117_963_fu_988_p2[0:0] == 1'b1) ? select_ln117_1022_fu_994_p3 : 4'd15);

assign select_ln117_1024_fu_1014_p3 = ((icmp_ln86_fu_424_p2[0:0] == 1'b1) ? zext_ln117_119_fu_1010_p1 : 5'd16);

assign select_ln117_1025_fu_1189_p3 = ((or_ln117_964_fu_1179_p2[0:0] == 1'b1) ? select_ln117_1024_reg_1611 : 5'd17);

assign select_ln117_1026_fu_1202_p3 = ((or_ln117_965_fu_1184_p2[0:0] == 1'b1) ? select_ln117_1025_fu_1189_p3 : 5'd18);

assign select_ln117_1027_fu_1215_p3 = ((or_ln117_966_fu_1196_p2[0:0] == 1'b1) ? select_ln117_1026_fu_1202_p3 : 5'd19);

assign select_ln117_1028_fu_1229_p3 = ((or_ln117_967_fu_1210_p2[0:0] == 1'b1) ? select_ln117_1027_fu_1215_p3 : 5'd20);

assign select_ln117_1029_fu_1243_p3 = ((or_ln117_968_fu_1223_p2[0:0] == 1'b1) ? select_ln117_1028_fu_1229_p3 : 5'd21);

assign select_ln117_1030_fu_1257_p3 = ((or_ln117_969_fu_1237_p2[0:0] == 1'b1) ? select_ln117_1029_fu_1243_p3 : 5'd22);

assign select_ln117_1031_fu_1270_p3 = ((or_ln117_970_fu_1251_p2[0:0] == 1'b1) ? select_ln117_1030_fu_1257_p3 : 5'd23);

assign select_ln117_1032_fu_1284_p3 = ((or_ln117_971_fu_1265_p2[0:0] == 1'b1) ? select_ln117_1031_fu_1270_p3 : 5'd24);

assign select_ln117_1033_fu_1298_p3 = ((or_ln117_972_fu_1278_p2[0:0] == 1'b1) ? select_ln117_1032_fu_1284_p3 : 5'd25);

assign select_ln117_1034_fu_1312_p3 = ((or_ln117_973_fu_1292_p2[0:0] == 1'b1) ? select_ln117_1033_fu_1298_p3 : 5'd26);

assign select_ln117_1035_fu_1326_p3 = ((or_ln117_974_fu_1306_p2[0:0] == 1'b1) ? select_ln117_1034_fu_1312_p3 : 5'd27);

assign select_ln117_1036_fu_1340_p3 = ((or_ln117_975_fu_1320_p2[0:0] == 1'b1) ? select_ln117_1035_fu_1326_p3 : 5'd28);

assign select_ln117_1037_fu_1354_p3 = ((or_ln117_976_fu_1334_p2[0:0] == 1'b1) ? select_ln117_1036_fu_1340_p3 : 5'd29);

assign select_ln117_1038_fu_1368_p3 = ((or_ln117_977_fu_1348_p2[0:0] == 1'b1) ? select_ln117_1037_fu_1354_p3 : 5'd30);

assign select_ln117_fu_830_p3 = ((and_ln102_1009_fu_694_p2[0:0] == 1'b1) ? zext_ln117_fu_820_p1 : 2'd2);

assign tmp_21_fu_554_p4 = {{x_37_val[17:2]}};

assign tmp_22_fu_624_p4 = {{x_44_val[17:3]}};

assign tmp_fu_472_p4 = {{x_23_val[17:2]}};

assign xor_ln104_501_fu_646_p2 = (icmp_ln86_1044_fu_430_p2 ^ 1'd1);

assign xor_ln104_502_fu_1032_p2 = (icmp_ln86_1045_reg_1529 ^ 1'd1);

assign xor_ln104_503_fu_664_p2 = (icmp_ln86_1046_fu_442_p2 ^ 1'd1);

assign xor_ln104_504_fu_682_p2 = (icmp_ln86_1047_fu_448_p2 ^ 1'd1);

assign xor_ln104_505_fu_1048_p2 = (icmp_ln86_1048_reg_1535 ^ 1'd1);

assign xor_ln104_506_fu_1064_p2 = (icmp_ln86_1049_reg_1541 ^ 1'd1);

assign xor_ln104_507_fu_700_p2 = (icmp_ln86_1050_fu_466_p2 ^ 1'd1);

assign xor_ln104_508_fu_712_p2 = (icmp_ln86_1388_fu_482_p2 ^ 1'd1);

assign xor_ln104_509_fu_724_p2 = (icmp_ln86_1052_fu_488_p2 ^ 1'd1);

assign xor_ln104_510_fu_736_p2 = (icmp_ln86_1053_fu_494_p2 ^ 1'd1);

assign xor_ln104_511_fu_1080_p2 = (icmp_ln86_1054_reg_1547 ^ 1'd1);

assign xor_ln104_512_fu_1090_p2 = (icmp_ln86_1055_reg_1553 ^ 1'd1);

assign xor_ln104_513_fu_1100_p2 = (icmp_ln86_1056_reg_1559 ^ 1'd1);

assign xor_ln104_514_fu_1110_p2 = (icmp_ln86_1057_reg_1565 ^ 1'd1);

assign xor_ln104_fu_1022_p2 = (icmp_ln86_reg_1520 ^ 1'd1);

assign xor_ln117_fu_814_p2 = (1'd1 ^ and_ln102_1017_fu_742_p2);

assign zext_ln117_117_fu_846_p1 = select_ln117_1011_fu_838_p3;

assign zext_ln117_118_fu_900_p1 = select_ln117_1015_fu_892_p3;

assign zext_ln117_119_fu_1010_p1 = select_ln117_1023_fu_1002_p3;

assign zext_ln117_fu_820_p1 = xor_ln117_fu_814_p2;

endmodule //my_prj_decision_function_40
