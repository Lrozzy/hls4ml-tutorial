// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_104 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_2_val,
        x_3_val,
        x_5_val,
        x_12_val,
        x_18_val,
        x_21_val,
        x_24_val,
        x_26_val,
        x_27_val,
        x_28_val,
        x_30_val,
        x_31_val,
        x_34_val,
        x_42_val,
        x_45_val,
        x_47_val,
        x_51_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_2_val;
input  [17:0] x_3_val;
input  [17:0] x_5_val;
input  [17:0] x_12_val;
input  [17:0] x_18_val;
input  [17:0] x_21_val;
input  [17:0] x_24_val;
input  [17:0] x_26_val;
input  [17:0] x_27_val;
input  [17:0] x_28_val;
input  [17:0] x_30_val;
input  [17:0] x_31_val;
input  [17:0] x_34_val;
input  [17:0] x_42_val;
input  [17:0] x_45_val;
input  [17:0] x_47_val;
input  [17:0] x_51_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
reg   [17:0] x_51_val_read_reg_1132;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_fu_342_p2;
reg   [0:0] icmp_ln86_reg_1137;
wire   [0:0] icmp_ln86_1903_fu_390_p2;
reg   [0:0] icmp_ln86_1903_reg_1143;
wire   [0:0] icmp_ln86_1904_fu_396_p2;
reg   [0:0] icmp_ln86_1904_reg_1149;
wire   [0:0] icmp_ln86_1905_fu_402_p2;
reg   [0:0] icmp_ln86_1905_reg_1154;
wire   [0:0] icmp_ln86_1912_fu_444_p2;
reg   [0:0] icmp_ln86_1912_reg_1160;
wire   [0:0] icmp_ln86_1913_fu_450_p2;
reg   [0:0] icmp_ln86_1913_reg_1165;
wire   [0:0] icmp_ln86_1914_fu_456_p2;
reg   [0:0] icmp_ln86_1914_reg_1170;
wire   [0:0] icmp_ln86_1915_fu_462_p2;
reg   [0:0] icmp_ln86_1915_reg_1175;
wire   [0:0] and_ln104_359_fu_522_p2;
reg   [0:0] and_ln104_359_reg_1180;
wire   [0:0] and_ln102_2139_fu_528_p2;
reg   [0:0] and_ln102_2139_reg_1186;
wire   [0:0] and_ln104_360_fu_540_p2;
reg   [0:0] and_ln104_360_reg_1192;
wire   [0:0] and_ln104_361_fu_588_p2;
reg   [0:0] and_ln104_361_reg_1198;
wire   [0:0] or_ln117_1734_fu_806_p2;
reg   [0:0] or_ln117_1734_reg_1203;
wire   [3:0] select_ln117_1853_fu_820_p3;
reg   [3:0] select_ln117_1853_reg_1209;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln86_1896_fu_348_p2;
wire   [0:0] xor_ln104_907_fu_480_p2;
wire   [0:0] icmp_ln86_1897_fu_354_p2;
wire   [0:0] and_ln102_fu_474_p2;
wire   [0:0] xor_ln104_908_fu_498_p2;
wire   [0:0] icmp_ln86_1898_fu_360_p2;
wire   [0:0] and_ln104_fu_486_p2;
wire   [0:0] xor_ln104_909_fu_516_p2;
wire   [0:0] icmp_ln86_1899_fu_366_p2;
wire   [0:0] xor_ln104_fu_468_p2;
wire   [0:0] xor_ln104_910_fu_534_p2;
wire   [0:0] icmp_ln86_1900_fu_372_p2;
wire   [0:0] and_ln102_2137_fu_492_p2;
wire   [0:0] icmp_ln86_1901_fu_378_p2;
wire   [0:0] and_ln104_358_fu_504_p2;
wire   [0:0] icmp_ln86_1902_fu_384_p2;
wire   [0:0] and_ln102_2138_fu_510_p2;
wire   [0:0] xor_ln104_915_fu_582_p2;
wire   [0:0] icmp_ln86_1906_fu_408_p2;
wire   [0:0] and_ln102_2140_fu_546_p2;
wire   [0:0] icmp_ln86_1907_fu_414_p2;
wire   [0:0] xor_ln104_911_fu_552_p2;
wire   [0:0] and_ln102_2146_fu_600_p2;
wire   [0:0] icmp_ln86_1908_fu_420_p2;
wire   [0:0] and_ln102_2141_fu_558_p2;
wire   [0:0] icmp_ln86_1909_fu_426_p2;
wire   [0:0] xor_ln104_912_fu_564_p2;
wire   [0:0] and_ln102_2149_fu_618_p2;
wire   [0:0] icmp_ln86_1910_fu_432_p2;
wire   [0:0] and_ln102_2142_fu_570_p2;
wire   [0:0] icmp_ln86_1911_fu_438_p2;
wire   [0:0] xor_ln104_913_fu_576_p2;
wire   [0:0] and_ln102_2152_fu_636_p2;
wire   [0:0] and_ln102_2145_fu_594_p2;
wire   [0:0] or_ln117_fu_648_p2;
wire   [2:0] select_ln117_fu_654_p3;
wire   [0:0] or_ln117_1724_fu_662_p2;
wire   [0:0] and_ln102_2147_fu_606_p2;
wire   [2:0] select_ln117_1842_fu_668_p3;
wire   [0:0] or_ln117_1725_fu_676_p2;
wire   [2:0] select_ln117_1843_fu_682_p3;
wire   [0:0] or_ln117_1726_fu_690_p2;
wire   [0:0] and_ln102_2148_fu_612_p2;
wire   [2:0] select_ln117_1844_fu_696_p3;
wire   [2:0] select_ln117_1845_fu_710_p3;
wire   [0:0] or_ln117_1727_fu_704_p2;
wire   [3:0] zext_ln117_fu_718_p1;
wire   [0:0] or_ln117_1728_fu_722_p2;
wire   [0:0] and_ln102_2150_fu_624_p2;
wire   [3:0] select_ln117_1846_fu_728_p3;
wire   [0:0] or_ln117_1729_fu_736_p2;
wire   [3:0] select_ln117_1847_fu_742_p3;
wire   [0:0] or_ln117_1730_fu_750_p2;
wire   [0:0] and_ln102_2151_fu_630_p2;
wire   [3:0] select_ln117_1848_fu_756_p3;
wire   [0:0] or_ln117_1731_fu_764_p2;
wire   [3:0] select_ln117_1849_fu_770_p3;
wire   [0:0] or_ln117_1732_fu_778_p2;
wire   [0:0] and_ln102_2153_fu_642_p2;
wire   [3:0] select_ln117_1850_fu_784_p3;
wire   [0:0] or_ln117_1733_fu_792_p2;
wire   [3:0] select_ln117_1851_fu_798_p3;
wire   [3:0] select_ln117_1852_fu_812_p3;
wire   [0:0] and_ln102_2143_fu_835_p2;
wire   [0:0] xor_ln104_914_fu_839_p2;
wire   [0:0] and_ln102_2155_fu_858_p2;
wire   [0:0] and_ln102_2157_fu_868_p2;
wire   [0:0] and_ln102_2144_fu_844_p2;
wire   [0:0] tmp_fu_828_p3;
wire   [0:0] xor_ln104_916_fu_848_p2;
wire   [0:0] and_ln102_2160_fu_882_p2;
wire   [0:0] and_ln102_2154_fu_853_p2;
wire   [0:0] or_ln117_1735_fu_893_p2;
wire   [4:0] zext_ln117_207_fu_898_p1;
wire   [0:0] or_ln117_1736_fu_901_p2;
wire   [0:0] and_ln102_2156_fu_863_p2;
wire   [4:0] select_ln117_1854_fu_906_p3;
wire   [0:0] or_ln117_1737_fu_914_p2;
wire   [4:0] select_ln117_1855_fu_920_p3;
wire   [0:0] or_ln117_1738_fu_928_p2;
wire   [0:0] and_ln102_2158_fu_872_p2;
wire   [4:0] select_ln117_1856_fu_932_p3;
wire   [0:0] or_ln117_1739_fu_940_p2;
wire   [4:0] select_ln117_1857_fu_946_p3;
wire   [0:0] or_ln117_1740_fu_954_p2;
wire   [0:0] and_ln102_2159_fu_877_p2;
wire   [4:0] select_ln117_1858_fu_958_p3;
wire   [0:0] or_ln117_1741_fu_966_p2;
wire   [4:0] select_ln117_1859_fu_972_p3;
wire   [0:0] or_ln117_1742_fu_980_p2;
wire   [0:0] and_ln102_2161_fu_888_p2;
wire   [4:0] select_ln117_1860_fu_986_p3;
wire   [0:0] or_ln117_1743_fu_994_p2;
wire   [4:0] select_ln117_1861_fu_1000_p3;
wire   [11:0] agg_result_fu_1016_p55;
wire   [4:0] agg_result_fu_1016_p56;
wire   [11:0] agg_result_fu_1016_p57;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1016_p1;
wire   [4:0] agg_result_fu_1016_p3;
wire   [4:0] agg_result_fu_1016_p5;
wire   [4:0] agg_result_fu_1016_p7;
wire   [4:0] agg_result_fu_1016_p9;
wire   [4:0] agg_result_fu_1016_p11;
wire   [4:0] agg_result_fu_1016_p13;
wire   [4:0] agg_result_fu_1016_p15;
wire   [4:0] agg_result_fu_1016_p17;
wire   [4:0] agg_result_fu_1016_p19;
wire   [4:0] agg_result_fu_1016_p21;
wire   [4:0] agg_result_fu_1016_p23;
wire   [4:0] agg_result_fu_1016_p25;
wire   [4:0] agg_result_fu_1016_p27;
wire  signed [4:0] agg_result_fu_1016_p29;
wire  signed [4:0] agg_result_fu_1016_p31;
wire  signed [4:0] agg_result_fu_1016_p33;
wire  signed [4:0] agg_result_fu_1016_p35;
wire  signed [4:0] agg_result_fu_1016_p37;
wire  signed [4:0] agg_result_fu_1016_p39;
wire  signed [4:0] agg_result_fu_1016_p41;
wire  signed [4:0] agg_result_fu_1016_p43;
wire  signed [4:0] agg_result_fu_1016_p45;
wire  signed [4:0] agg_result_fu_1016_p47;
wire  signed [4:0] agg_result_fu_1016_p49;
wire  signed [4:0] agg_result_fu_1016_p51;
wire  signed [4:0] agg_result_fu_1016_p53;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_55_5_12_1_1_x3 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h2 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h3 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h4 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h5 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h6 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h7 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h8 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h9 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'hA ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'hB ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hC ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hD ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hE ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hF ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'h10 ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'h11 ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h12 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h13 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h14 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h15 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h16 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h17 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h18 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h19 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h1A ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h1B ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1C ),
    .din26_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_55_5_12_1_1_x3_U2443(
    .din0(12'd3578),
    .din1(12'd3990),
    .din2(12'd214),
    .din3(12'd4089),
    .din4(12'd3807),
    .din5(12'd1525),
    .din6(12'd408),
    .din7(12'd4072),
    .din8(12'd686),
    .din9(12'd4),
    .din10(12'd4038),
    .din11(12'd67),
    .din12(12'd1723),
    .din13(12'd3997),
    .din14(12'd3691),
    .din15(12'd1644),
    .din16(12'd101),
    .din17(12'd3968),
    .din18(12'd3601),
    .din19(12'd3819),
    .din20(12'd1085),
    .din21(12'd396),
    .din22(12'd1689),
    .din23(12'd4033),
    .din24(12'd1177),
    .din25(12'd830),
    .din26(12'd30),
    .def(agg_result_fu_1016_p55),
    .sel(agg_result_fu_1016_p56),
    .dout(agg_result_fu_1016_p57)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln102_2139_reg_1186 <= and_ln102_2139_fu_528_p2;
        and_ln104_359_reg_1180 <= and_ln104_359_fu_522_p2;
        and_ln104_360_reg_1192 <= and_ln104_360_fu_540_p2;
        and_ln104_361_reg_1198 <= and_ln104_361_fu_588_p2;
        icmp_ln86_1903_reg_1143 <= icmp_ln86_1903_fu_390_p2;
        icmp_ln86_1904_reg_1149 <= icmp_ln86_1904_fu_396_p2;
        icmp_ln86_1905_reg_1154 <= icmp_ln86_1905_fu_402_p2;
        icmp_ln86_1912_reg_1160 <= icmp_ln86_1912_fu_444_p2;
        icmp_ln86_1913_reg_1165 <= icmp_ln86_1913_fu_450_p2;
        icmp_ln86_1914_reg_1170 <= icmp_ln86_1914_fu_456_p2;
        icmp_ln86_1915_reg_1175 <= icmp_ln86_1915_fu_462_p2;
        icmp_ln86_reg_1137 <= icmp_ln86_fu_342_p2;
        or_ln117_1734_reg_1203 <= or_ln117_1734_fu_806_p2;
        select_ln117_1853_reg_1209 <= select_ln117_1853_fu_820_p3;
        x_51_val_read_reg_1132 <= x_51_val;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1016_p55 = 'bx;

assign agg_result_fu_1016_p56 = ((or_ln117_1743_fu_994_p2[0:0] == 1'b1) ? select_ln117_1861_fu_1000_p3 : 5'd28);

assign and_ln102_2137_fu_492_p2 = (icmp_ln86_1897_fu_354_p2 & and_ln102_fu_474_p2);

assign and_ln102_2138_fu_510_p2 = (icmp_ln86_1898_fu_360_p2 & and_ln104_fu_486_p2);

assign and_ln102_2139_fu_528_p2 = (xor_ln104_fu_468_p2 & icmp_ln86_1899_fu_366_p2);

assign and_ln102_2140_fu_546_p2 = (icmp_ln86_1900_fu_372_p2 & and_ln102_2137_fu_492_p2);

assign and_ln102_2141_fu_558_p2 = (icmp_ln86_1901_fu_378_p2 & and_ln104_358_fu_504_p2);

assign and_ln102_2142_fu_570_p2 = (icmp_ln86_1902_fu_384_p2 & and_ln102_2138_fu_510_p2);

assign and_ln102_2143_fu_835_p2 = (icmp_ln86_1903_reg_1143 & and_ln104_359_reg_1180);

assign and_ln102_2144_fu_844_p2 = (icmp_ln86_1905_reg_1154 & and_ln104_360_reg_1192);

assign and_ln102_2145_fu_594_p2 = (icmp_ln86_1906_fu_408_p2 & and_ln102_2140_fu_546_p2);

assign and_ln102_2146_fu_600_p2 = (xor_ln104_911_fu_552_p2 & icmp_ln86_1907_fu_414_p2);

assign and_ln102_2147_fu_606_p2 = (and_ln102_2146_fu_600_p2 & and_ln102_2137_fu_492_p2);

assign and_ln102_2148_fu_612_p2 = (icmp_ln86_1908_fu_420_p2 & and_ln102_2141_fu_558_p2);

assign and_ln102_2149_fu_618_p2 = (xor_ln104_912_fu_564_p2 & icmp_ln86_1909_fu_426_p2);

assign and_ln102_2150_fu_624_p2 = (and_ln104_358_fu_504_p2 & and_ln102_2149_fu_618_p2);

assign and_ln102_2151_fu_630_p2 = (icmp_ln86_1910_fu_432_p2 & and_ln102_2142_fu_570_p2);

assign and_ln102_2152_fu_636_p2 = (xor_ln104_913_fu_576_p2 & icmp_ln86_1911_fu_438_p2);

assign and_ln102_2153_fu_642_p2 = (and_ln102_2152_fu_636_p2 & and_ln102_2138_fu_510_p2);

assign and_ln102_2154_fu_853_p2 = (icmp_ln86_1912_reg_1160 & and_ln102_2143_fu_835_p2);

assign and_ln102_2155_fu_858_p2 = (xor_ln104_914_fu_839_p2 & icmp_ln86_1913_reg_1165);

assign and_ln102_2156_fu_863_p2 = (and_ln104_359_reg_1180 & and_ln102_2155_fu_858_p2);

assign and_ln102_2157_fu_868_p2 = (icmp_ln86_1914_reg_1170 & and_ln102_2139_reg_1186);

assign and_ln102_2158_fu_872_p2 = (icmp_ln86_1904_reg_1149 & and_ln102_2157_fu_868_p2);

assign and_ln102_2159_fu_877_p2 = (icmp_ln86_1915_reg_1175 & and_ln102_2144_fu_844_p2);

assign and_ln102_2160_fu_882_p2 = (xor_ln104_916_fu_848_p2 & tmp_fu_828_p3);

assign and_ln102_2161_fu_888_p2 = (and_ln104_360_reg_1192 & and_ln102_2160_fu_882_p2);

assign and_ln102_fu_474_p2 = (icmp_ln86_fu_342_p2 & icmp_ln86_1896_fu_348_p2);

assign and_ln104_358_fu_504_p2 = (xor_ln104_908_fu_498_p2 & and_ln102_fu_474_p2);

assign and_ln104_359_fu_522_p2 = (xor_ln104_909_fu_516_p2 & and_ln104_fu_486_p2);

assign and_ln104_360_fu_540_p2 = (xor_ln104_fu_468_p2 & xor_ln104_910_fu_534_p2);

assign and_ln104_361_fu_588_p2 = (xor_ln104_915_fu_582_p2 & and_ln102_2139_fu_528_p2);

assign and_ln104_fu_486_p2 = (xor_ln104_907_fu_480_p2 & icmp_ln86_fu_342_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1016_p57;

assign icmp_ln86_1896_fu_348_p2 = (($signed(x_12_val) < $signed(18'd258524)) ? 1'b1 : 1'b0);

assign icmp_ln86_1897_fu_354_p2 = (($signed(x_5_val) < $signed(18'd53710)) ? 1'b1 : 1'b0);

assign icmp_ln86_1898_fu_360_p2 = (($signed(x_27_val) < $signed(18'd59110)) ? 1'b1 : 1'b0);

assign icmp_ln86_1899_fu_366_p2 = (($signed(x_47_val) < $signed(18'd39132)) ? 1'b1 : 1'b0);

assign icmp_ln86_1900_fu_372_p2 = (($signed(x_3_val) < $signed(18'd115736)) ? 1'b1 : 1'b0);

assign icmp_ln86_1901_fu_378_p2 = (($signed(x_21_val) < $signed(18'd266)) ? 1'b1 : 1'b0);

assign icmp_ln86_1902_fu_384_p2 = (($signed(x_31_val) < $signed(18'd5421)) ? 1'b1 : 1'b0);

assign icmp_ln86_1903_fu_390_p2 = (($signed(x_28_val) < $signed(18'd51660)) ? 1'b1 : 1'b0);

assign icmp_ln86_1904_fu_396_p2 = (($signed(x_24_val) < $signed(18'd454)) ? 1'b1 : 1'b0);

assign icmp_ln86_1905_fu_402_p2 = (($signed(x_26_val) < $signed(18'd121695)) ? 1'b1 : 1'b0);

assign icmp_ln86_1906_fu_408_p2 = (($signed(x_2_val) < $signed(18'd261518)) ? 1'b1 : 1'b0);

assign icmp_ln86_1907_fu_414_p2 = (($signed(x_42_val) < $signed(18'd208)) ? 1'b1 : 1'b0);

assign icmp_ln86_1908_fu_420_p2 = (($signed(x_47_val) < $signed(18'd151473)) ? 1'b1 : 1'b0);

assign icmp_ln86_1909_fu_426_p2 = (($signed(x_2_val) < $signed(18'd862)) ? 1'b1 : 1'b0);

assign icmp_ln86_1910_fu_432_p2 = (($signed(x_45_val) < $signed(18'd420)) ? 1'b1 : 1'b0);

assign icmp_ln86_1911_fu_438_p2 = (($signed(x_1_val) < $signed(18'd216082)) ? 1'b1 : 1'b0);

assign icmp_ln86_1912_fu_444_p2 = (($signed(x_18_val) < $signed(18'd1536)) ? 1'b1 : 1'b0);

assign icmp_ln86_1913_fu_450_p2 = (($signed(x_30_val) < $signed(18'd11118)) ? 1'b1 : 1'b0);

assign icmp_ln86_1914_fu_456_p2 = (($signed(x_5_val) < $signed(18'd19506)) ? 1'b1 : 1'b0);

assign icmp_ln86_1915_fu_462_p2 = (($signed(x_24_val) < $signed(18'd465)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_342_p2 = (($signed(x_34_val) < $signed(18'd489)) ? 1'b1 : 1'b0);

assign or_ln117_1724_fu_662_p2 = (and_ln104_361_fu_588_p2 | and_ln102_2140_fu_546_p2);

assign or_ln117_1725_fu_676_p2 = (or_ln117_1724_fu_662_p2 | and_ln102_2147_fu_606_p2);

assign or_ln117_1726_fu_690_p2 = (and_ln104_361_fu_588_p2 | and_ln102_2137_fu_492_p2);

assign or_ln117_1727_fu_704_p2 = (or_ln117_1726_fu_690_p2 | and_ln102_2148_fu_612_p2);

assign or_ln117_1728_fu_722_p2 = (or_ln117_1726_fu_690_p2 | and_ln102_2141_fu_558_p2);

assign or_ln117_1729_fu_736_p2 = (or_ln117_1728_fu_722_p2 | and_ln102_2150_fu_624_p2);

assign or_ln117_1730_fu_750_p2 = (and_ln104_361_fu_588_p2 | and_ln102_fu_474_p2);

assign or_ln117_1731_fu_764_p2 = (or_ln117_1730_fu_750_p2 | and_ln102_2151_fu_630_p2);

assign or_ln117_1732_fu_778_p2 = (or_ln117_1730_fu_750_p2 | and_ln102_2142_fu_570_p2);

assign or_ln117_1733_fu_792_p2 = (or_ln117_1732_fu_778_p2 | and_ln102_2153_fu_642_p2);

assign or_ln117_1734_fu_806_p2 = (or_ln117_1730_fu_750_p2 | and_ln102_2138_fu_510_p2);

assign or_ln117_1735_fu_893_p2 = (or_ln117_1734_reg_1203 | and_ln102_2154_fu_853_p2);

assign or_ln117_1736_fu_901_p2 = (or_ln117_1734_reg_1203 | and_ln102_2143_fu_835_p2);

assign or_ln117_1737_fu_914_p2 = (or_ln117_1736_fu_901_p2 | and_ln102_2156_fu_863_p2);

assign or_ln117_1738_fu_928_p2 = (icmp_ln86_reg_1137 | and_ln104_361_reg_1198);

assign or_ln117_1739_fu_940_p2 = (or_ln117_1738_fu_928_p2 | and_ln102_2158_fu_872_p2);

assign or_ln117_1740_fu_954_p2 = (icmp_ln86_reg_1137 | and_ln102_2139_reg_1186);

assign or_ln117_1741_fu_966_p2 = (or_ln117_1740_fu_954_p2 | and_ln102_2159_fu_877_p2);

assign or_ln117_1742_fu_980_p2 = (or_ln117_1740_fu_954_p2 | and_ln102_2144_fu_844_p2);

assign or_ln117_1743_fu_994_p2 = (or_ln117_1742_fu_980_p2 | and_ln102_2161_fu_888_p2);

assign or_ln117_fu_648_p2 = (and_ln104_361_fu_588_p2 | and_ln102_2145_fu_594_p2);

assign select_ln117_1842_fu_668_p3 = ((or_ln117_fu_648_p2[0:0] == 1'b1) ? select_ln117_fu_654_p3 : 3'd4);

assign select_ln117_1843_fu_682_p3 = ((or_ln117_1724_fu_662_p2[0:0] == 1'b1) ? select_ln117_1842_fu_668_p3 : 3'd5);

assign select_ln117_1844_fu_696_p3 = ((or_ln117_1725_fu_676_p2[0:0] == 1'b1) ? select_ln117_1843_fu_682_p3 : 3'd6);

assign select_ln117_1845_fu_710_p3 = ((or_ln117_1726_fu_690_p2[0:0] == 1'b1) ? select_ln117_1844_fu_696_p3 : 3'd7);

assign select_ln117_1846_fu_728_p3 = ((or_ln117_1727_fu_704_p2[0:0] == 1'b1) ? zext_ln117_fu_718_p1 : 4'd8);

assign select_ln117_1847_fu_742_p3 = ((or_ln117_1728_fu_722_p2[0:0] == 1'b1) ? select_ln117_1846_fu_728_p3 : 4'd9);

assign select_ln117_1848_fu_756_p3 = ((or_ln117_1729_fu_736_p2[0:0] == 1'b1) ? select_ln117_1847_fu_742_p3 : 4'd10);

assign select_ln117_1849_fu_770_p3 = ((or_ln117_1730_fu_750_p2[0:0] == 1'b1) ? select_ln117_1848_fu_756_p3 : 4'd11);

assign select_ln117_1850_fu_784_p3 = ((or_ln117_1731_fu_764_p2[0:0] == 1'b1) ? select_ln117_1849_fu_770_p3 : 4'd12);

assign select_ln117_1851_fu_798_p3 = ((or_ln117_1732_fu_778_p2[0:0] == 1'b1) ? select_ln117_1850_fu_784_p3 : 4'd13);

assign select_ln117_1852_fu_812_p3 = ((or_ln117_1733_fu_792_p2[0:0] == 1'b1) ? select_ln117_1851_fu_798_p3 : 4'd14);

assign select_ln117_1853_fu_820_p3 = ((or_ln117_1734_fu_806_p2[0:0] == 1'b1) ? select_ln117_1852_fu_812_p3 : 4'd15);

assign select_ln117_1854_fu_906_p3 = ((or_ln117_1735_fu_893_p2[0:0] == 1'b1) ? zext_ln117_207_fu_898_p1 : 5'd16);

assign select_ln117_1855_fu_920_p3 = ((or_ln117_1736_fu_901_p2[0:0] == 1'b1) ? select_ln117_1854_fu_906_p3 : 5'd17);

assign select_ln117_1856_fu_932_p3 = ((or_ln117_1737_fu_914_p2[0:0] == 1'b1) ? select_ln117_1855_fu_920_p3 : 5'd18);

assign select_ln117_1857_fu_946_p3 = ((or_ln117_1738_fu_928_p2[0:0] == 1'b1) ? select_ln117_1856_fu_932_p3 : 5'd23);

assign select_ln117_1858_fu_958_p3 = ((or_ln117_1739_fu_940_p2[0:0] == 1'b1) ? select_ln117_1857_fu_946_p3 : 5'd24);

assign select_ln117_1859_fu_972_p3 = ((or_ln117_1740_fu_954_p2[0:0] == 1'b1) ? select_ln117_1858_fu_958_p3 : 5'd25);

assign select_ln117_1860_fu_986_p3 = ((or_ln117_1741_fu_966_p2[0:0] == 1'b1) ? select_ln117_1859_fu_972_p3 : 5'd26);

assign select_ln117_1861_fu_1000_p3 = ((or_ln117_1742_fu_980_p2[0:0] == 1'b1) ? select_ln117_1860_fu_986_p3 : 5'd27);

assign select_ln117_fu_654_p3 = ((and_ln104_361_fu_588_p2[0:0] == 1'b1) ? 3'd2 : 3'd3);

assign tmp_fu_828_p3 = x_51_val_read_reg_1132[32'd17];

assign xor_ln104_907_fu_480_p2 = (icmp_ln86_1896_fu_348_p2 ^ 1'd1);

assign xor_ln104_908_fu_498_p2 = (icmp_ln86_1897_fu_354_p2 ^ 1'd1);

assign xor_ln104_909_fu_516_p2 = (icmp_ln86_1898_fu_360_p2 ^ 1'd1);

assign xor_ln104_910_fu_534_p2 = (icmp_ln86_1899_fu_366_p2 ^ 1'd1);

assign xor_ln104_911_fu_552_p2 = (icmp_ln86_1900_fu_372_p2 ^ 1'd1);

assign xor_ln104_912_fu_564_p2 = (icmp_ln86_1901_fu_378_p2 ^ 1'd1);

assign xor_ln104_913_fu_576_p2 = (icmp_ln86_1902_fu_384_p2 ^ 1'd1);

assign xor_ln104_914_fu_839_p2 = (icmp_ln86_1903_reg_1143 ^ 1'd1);

assign xor_ln104_915_fu_582_p2 = (icmp_ln86_1904_fu_396_p2 ^ 1'd1);

assign xor_ln104_916_fu_848_p2 = (icmp_ln86_1905_reg_1154 ^ 1'd1);

assign xor_ln104_fu_468_p2 = (icmp_ln86_fu_342_p2 ^ 1'd1);

assign zext_ln117_207_fu_898_p1 = select_ln117_1853_reg_1209;

assign zext_ln117_fu_718_p1 = select_ln117_1845_fu_710_p3;

endmodule //my_prj_decision_function_104
