// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_18 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_2_val,
        x_3_val,
        x_4_val,
        x_6_val,
        x_7_val,
        x_10_val,
        x_13_val,
        x_16_val,
        x_17_val,
        x_22_val,
        x_25_val,
        x_33_val,
        x_36_val,
        x_39_val,
        x_42_val,
        x_43_val,
        x_44_val,
        x_45_val,
        x_49_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_2_val;
input  [17:0] x_3_val;
input  [17:0] x_4_val;
input  [17:0] x_6_val;
input  [17:0] x_7_val;
input  [17:0] x_10_val;
input  [17:0] x_13_val;
input  [17:0] x_16_val;
input  [17:0] x_17_val;
input  [17:0] x_22_val;
input  [17:0] x_25_val;
input  [17:0] x_33_val;
input  [17:0] x_36_val;
input  [17:0] x_39_val;
input  [17:0] x_42_val;
input  [17:0] x_43_val;
input  [17:0] x_44_val;
input  [17:0] x_45_val;
input  [17:0] x_49_val;
input  [17:0] x_52_val;
output  [12:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_470_fu_432_p2;
reg   [0:0] icmp_ln86_470_reg_1461;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_474_fu_456_p2;
reg   [0:0] icmp_ln86_474_reg_1467;
wire   [0:0] icmp_ln86_476_fu_468_p2;
reg   [0:0] icmp_ln86_476_reg_1472;
wire   [0:0] icmp_ln86_477_fu_474_p2;
reg   [0:0] icmp_ln86_477_reg_1478;
wire   [0:0] icmp_ln86_478_fu_480_p2;
reg   [0:0] icmp_ln86_478_reg_1484;
wire   [0:0] icmp_ln86_486_fu_528_p2;
reg   [0:0] icmp_ln86_486_reg_1490;
wire   [0:0] icmp_ln86_487_fu_534_p2;
reg   [0:0] icmp_ln86_487_reg_1495;
wire   [0:0] icmp_ln86_488_fu_540_p2;
reg   [0:0] icmp_ln86_488_reg_1500;
wire   [0:0] icmp_ln86_489_fu_546_p2;
reg   [0:0] icmp_ln86_489_reg_1505;
wire   [0:0] icmp_ln86_490_fu_552_p2;
reg   [0:0] icmp_ln86_490_reg_1510;
wire   [0:0] icmp_ln86_491_fu_558_p2;
reg   [0:0] icmp_ln86_491_reg_1515;
wire   [0:0] icmp_ln86_492_fu_564_p2;
reg   [0:0] icmp_ln86_492_reg_1520;
wire   [0:0] icmp_ln86_493_fu_570_p2;
reg   [0:0] icmp_ln86_493_reg_1525;
wire   [0:0] and_ln104_91_fu_606_p2;
reg   [0:0] and_ln104_91_reg_1530;
wire   [0:0] and_ln104_93_fu_642_p2;
reg   [0:0] and_ln104_93_reg_1537;
wire   [0:0] and_ln104_94_fu_660_p2;
reg   [0:0] and_ln104_94_reg_1542;
wire   [0:0] and_ln104_96_fu_720_p2;
reg   [0:0] and_ln104_96_reg_1549;
wire   [0:0] or_ln117_442_fu_978_p2;
reg   [0:0] or_ln117_442_reg_1555;
wire   [3:0] select_ln117_465_fu_992_p3;
reg   [3:0] select_ln117_465_reg_1560;
wire   [0:0] or_ln117_444_fu_1000_p2;
reg   [0:0] or_ln117_444_reg_1565;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln86_fu_396_p2;
wire   [0:0] icmp_ln86_465_fu_402_p2;
wire   [0:0] xor_ln104_224_fu_582_p2;
wire   [0:0] icmp_ln86_466_fu_408_p2;
wire   [0:0] xor_ln104_fu_576_p2;
wire   [0:0] xor_ln104_225_fu_600_p2;
wire   [0:0] icmp_ln86_467_fu_414_p2;
wire   [0:0] xor_ln104_226_fu_618_p2;
wire   [0:0] icmp_ln86_468_fu_420_p2;
wire   [0:0] and_ln104_fu_588_p2;
wire   [0:0] xor_ln104_227_fu_636_p2;
wire   [0:0] icmp_ln86_469_fu_426_p2;
wire   [0:0] and_ln102_fu_594_p2;
wire   [0:0] xor_ln104_228_fu_654_p2;
wire   [0:0] icmp_ln86_471_fu_438_p2;
wire   [0:0] and_ln102_448_fu_612_p2;
wire   [0:0] icmp_ln86_472_fu_444_p2;
wire   [0:0] and_ln104_92_fu_624_p2;
wire   [0:0] icmp_ln86_473_fu_450_p2;
wire   [0:0] and_ln102_449_fu_630_p2;
wire   [0:0] icmp_ln86_475_fu_462_p2;
wire   [0:0] and_ln102_450_fu_648_p2;
wire   [0:0] xor_ln104_234_fu_714_p2;
wire   [0:0] icmp_ln86_479_fu_486_p2;
wire   [0:0] and_ln102_452_fu_666_p2;
wire   [0:0] icmp_ln86_480_fu_492_p2;
wire   [0:0] xor_ln104_230_fu_672_p2;
wire   [0:0] and_ln102_475_fu_732_p2;
wire   [0:0] icmp_ln86_481_fu_498_p2;
wire   [0:0] and_ln102_453_fu_678_p2;
wire   [0:0] icmp_ln86_482_fu_504_p2;
wire   [0:0] xor_ln104_231_fu_684_p2;
wire   [0:0] and_ln102_476_fu_750_p2;
wire   [0:0] icmp_ln86_483_fu_510_p2;
wire   [0:0] and_ln102_454_fu_690_p2;
wire   [0:0] icmp_ln86_484_fu_516_p2;
wire   [0:0] xor_ln104_232_fu_696_p2;
wire   [0:0] and_ln102_477_fu_768_p2;
wire   [0:0] icmp_ln86_485_fu_522_p2;
wire   [0:0] and_ln102_455_fu_702_p2;
wire   [0:0] and_ln102_456_fu_708_p2;
wire   [0:0] and_ln102_460_fu_726_p2;
wire   [0:0] xor_ln117_fu_792_p2;
wire   [0:0] or_ln117_fu_786_p2;
wire   [1:0] zext_ln117_fu_798_p1;
wire   [0:0] or_ln117_430_fu_802_p2;
wire   [0:0] and_ln102_461_fu_738_p2;
wire   [1:0] select_ln117_fu_808_p3;
wire   [1:0] select_ln117_453_fu_822_p3;
wire   [0:0] or_ln117_431_fu_816_p2;
wire   [2:0] zext_ln117_51_fu_830_p1;
wire   [0:0] or_ln117_432_fu_834_p2;
wire   [0:0] and_ln102_462_fu_744_p2;
wire   [2:0] select_ln117_454_fu_840_p3;
wire   [0:0] or_ln117_433_fu_848_p2;
wire   [2:0] select_ln117_455_fu_854_p3;
wire   [0:0] or_ln117_434_fu_862_p2;
wire   [0:0] and_ln102_463_fu_756_p2;
wire   [2:0] select_ln117_456_fu_868_p3;
wire   [2:0] select_ln117_457_fu_882_p3;
wire   [0:0] or_ln117_435_fu_876_p2;
wire   [3:0] zext_ln117_52_fu_890_p1;
wire   [0:0] or_ln117_436_fu_894_p2;
wire   [0:0] and_ln102_464_fu_762_p2;
wire   [3:0] select_ln117_458_fu_900_p3;
wire   [0:0] or_ln117_437_fu_908_p2;
wire   [3:0] select_ln117_459_fu_914_p3;
wire   [0:0] or_ln117_438_fu_922_p2;
wire   [0:0] and_ln102_465_fu_774_p2;
wire   [3:0] select_ln117_460_fu_928_p3;
wire   [0:0] or_ln117_439_fu_936_p2;
wire   [3:0] select_ln117_461_fu_942_p3;
wire   [0:0] or_ln117_440_fu_950_p2;
wire   [0:0] and_ln102_466_fu_780_p2;
wire   [3:0] select_ln117_462_fu_956_p3;
wire   [0:0] or_ln117_441_fu_964_p2;
wire   [3:0] select_ln117_463_fu_970_p3;
wire   [3:0] select_ln117_464_fu_984_p3;
wire   [0:0] xor_ln104_229_fu_1010_p2;
wire   [0:0] and_ln102_451_fu_1006_p2;
wire   [0:0] and_ln104_95_fu_1015_p2;
wire   [0:0] xor_ln104_233_fu_1020_p2;
wire   [0:0] and_ln102_478_fu_1054_p2;
wire   [0:0] and_ln102_457_fu_1025_p2;
wire   [0:0] xor_ln104_235_fu_1029_p2;
wire   [0:0] and_ln102_479_fu_1073_p2;
wire   [0:0] and_ln102_458_fu_1034_p2;
wire   [0:0] xor_ln104_236_fu_1039_p2;
wire   [0:0] and_ln102_480_fu_1088_p2;
wire   [0:0] and_ln102_459_fu_1044_p2;
wire   [0:0] xor_ln104_237_fu_1049_p2;
wire   [0:0] and_ln102_481_fu_1104_p2;
wire   [0:0] and_ln102_467_fu_1059_p2;
wire   [0:0] or_ln117_443_fu_1115_p2;
wire   [4:0] zext_ln117_53_fu_1120_p1;
wire   [0:0] and_ln102_468_fu_1064_p2;
wire   [4:0] select_ln117_466_fu_1123_p3;
wire   [0:0] or_ln117_445_fu_1131_p2;
wire   [4:0] select_ln117_467_fu_1136_p3;
wire   [0:0] or_ln117_446_fu_1143_p2;
wire   [0:0] and_ln102_469_fu_1068_p2;
wire   [4:0] select_ln117_468_fu_1147_p3;
wire   [0:0] or_ln117_447_fu_1155_p2;
wire   [4:0] select_ln117_469_fu_1161_p3;
wire   [0:0] or_ln117_448_fu_1169_p2;
wire   [0:0] and_ln102_470_fu_1078_p2;
wire   [4:0] select_ln117_470_fu_1175_p3;
wire   [0:0] or_ln117_449_fu_1183_p2;
wire   [4:0] select_ln117_471_fu_1189_p3;
wire   [0:0] or_ln117_450_fu_1197_p2;
wire   [0:0] and_ln102_471_fu_1083_p2;
wire   [4:0] select_ln117_472_fu_1202_p3;
wire   [0:0] or_ln117_451_fu_1210_p2;
wire   [4:0] select_ln117_473_fu_1216_p3;
wire   [0:0] or_ln117_452_fu_1224_p2;
wire   [0:0] and_ln102_472_fu_1093_p2;
wire   [4:0] select_ln117_474_fu_1230_p3;
wire   [0:0] or_ln117_453_fu_1238_p2;
wire   [4:0] select_ln117_475_fu_1244_p3;
wire   [0:0] or_ln117_454_fu_1252_p2;
wire   [0:0] and_ln102_473_fu_1099_p2;
wire   [4:0] select_ln117_476_fu_1258_p3;
wire   [0:0] or_ln117_455_fu_1266_p2;
wire   [4:0] select_ln117_477_fu_1272_p3;
wire   [0:0] or_ln117_456_fu_1280_p2;
wire   [0:0] and_ln102_474_fu_1109_p2;
wire   [4:0] select_ln117_478_fu_1286_p3;
wire   [0:0] or_ln117_457_fu_1294_p2;
wire   [4:0] select_ln117_479_fu_1300_p3;
wire   [12:0] tmp_fu_1321_p63;
wire   [4:0] tmp_fu_1321_p64;
wire   [0:0] or_ln117_458_fu_1308_p2;
wire   [12:0] tmp_fu_1321_p65;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] tmp_fu_1321_p1;
wire   [4:0] tmp_fu_1321_p3;
wire   [4:0] tmp_fu_1321_p5;
wire   [4:0] tmp_fu_1321_p7;
wire   [4:0] tmp_fu_1321_p9;
wire   [4:0] tmp_fu_1321_p11;
wire   [4:0] tmp_fu_1321_p13;
wire   [4:0] tmp_fu_1321_p15;
wire   [4:0] tmp_fu_1321_p17;
wire   [4:0] tmp_fu_1321_p19;
wire   [4:0] tmp_fu_1321_p21;
wire   [4:0] tmp_fu_1321_p23;
wire   [4:0] tmp_fu_1321_p25;
wire   [4:0] tmp_fu_1321_p27;
wire   [4:0] tmp_fu_1321_p29;
wire   [4:0] tmp_fu_1321_p31;
wire  signed [4:0] tmp_fu_1321_p33;
wire  signed [4:0] tmp_fu_1321_p35;
wire  signed [4:0] tmp_fu_1321_p37;
wire  signed [4:0] tmp_fu_1321_p39;
wire  signed [4:0] tmp_fu_1321_p41;
wire  signed [4:0] tmp_fu_1321_p43;
wire  signed [4:0] tmp_fu_1321_p45;
wire  signed [4:0] tmp_fu_1321_p47;
wire  signed [4:0] tmp_fu_1321_p49;
wire  signed [4:0] tmp_fu_1321_p51;
wire  signed [4:0] tmp_fu_1321_p53;
wire  signed [4:0] tmp_fu_1321_p55;
wire  signed [4:0] tmp_fu_1321_p57;
wire  signed [4:0] tmp_fu_1321_p59;
wire  signed [4:0] tmp_fu_1321_p61;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_63_5_13_1_1_x2 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 13 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 13 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 13 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 13 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 13 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 13 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 13 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 13 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 13 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 13 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 13 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 13 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 13 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 13 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 13 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 13 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 13 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 13 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 13 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 13 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 13 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 13 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 13 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 13 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 13 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 13 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 13 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 13 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 13 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 13 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 13 ),
    .def_WIDTH( 13 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 13 ))
sparsemux_63_5_13_1_1_x2_U1740(
    .din0(13'd775),
    .din1(13'd8152),
    .din2(13'd19),
    .din3(13'd200),
    .din4(13'd1045),
    .din5(13'd477),
    .din6(13'd7874),
    .din7(13'd7969),
    .din8(13'd16),
    .din9(13'd505),
    .din10(13'd83),
    .din11(13'd224),
    .din12(13'd2278),
    .din13(13'd172),
    .din14(13'd1343),
    .din15(13'd224),
    .din16(13'd8057),
    .din17(13'd282),
    .din18(13'd7893),
    .din19(13'd8171),
    .din20(13'd1339),
    .din21(13'd1793),
    .din22(13'd96),
    .din23(13'd243),
    .din24(13'd7674),
    .din25(13'd7978),
    .din26(13'd528),
    .din27(13'd8153),
    .din28(13'd7961),
    .din29(13'd1779),
    .din30(13'd7827),
    .def(tmp_fu_1321_p63),
    .sel(tmp_fu_1321_p64),
    .dout(tmp_fu_1321_p65)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln104_91_reg_1530 <= and_ln104_91_fu_606_p2;
        and_ln104_93_reg_1537 <= and_ln104_93_fu_642_p2;
        and_ln104_94_reg_1542 <= and_ln104_94_fu_660_p2;
        and_ln104_96_reg_1549 <= and_ln104_96_fu_720_p2;
        icmp_ln86_470_reg_1461 <= icmp_ln86_470_fu_432_p2;
        icmp_ln86_474_reg_1467 <= icmp_ln86_474_fu_456_p2;
        icmp_ln86_476_reg_1472 <= icmp_ln86_476_fu_468_p2;
        icmp_ln86_477_reg_1478 <= icmp_ln86_477_fu_474_p2;
        icmp_ln86_478_reg_1484 <= icmp_ln86_478_fu_480_p2;
        icmp_ln86_486_reg_1490 <= icmp_ln86_486_fu_528_p2;
        icmp_ln86_487_reg_1495 <= icmp_ln86_487_fu_534_p2;
        icmp_ln86_488_reg_1500 <= icmp_ln86_488_fu_540_p2;
        icmp_ln86_489_reg_1505 <= icmp_ln86_489_fu_546_p2;
        icmp_ln86_490_reg_1510 <= icmp_ln86_490_fu_552_p2;
        icmp_ln86_491_reg_1515 <= icmp_ln86_491_fu_558_p2;
        icmp_ln86_492_reg_1520 <= icmp_ln86_492_fu_564_p2;
        icmp_ln86_493_reg_1525 <= icmp_ln86_493_fu_570_p2;
        or_ln117_442_reg_1555 <= or_ln117_442_fu_978_p2;
        or_ln117_444_reg_1565 <= or_ln117_444_fu_1000_p2;
        select_ln117_465_reg_1560 <= select_ln117_465_fu_992_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln102_448_fu_612_p2 = (icmp_ln86_467_fu_414_p2 & icmp_ln86_465_fu_402_p2);

assign and_ln102_449_fu_630_p2 = (icmp_ln86_468_fu_420_p2 & and_ln104_fu_588_p2);

assign and_ln102_450_fu_648_p2 = (icmp_ln86_469_fu_426_p2 & and_ln102_fu_594_p2);

assign and_ln102_451_fu_1006_p2 = (icmp_ln86_470_reg_1461 & and_ln104_91_reg_1530);

assign and_ln102_452_fu_666_p2 = (icmp_ln86_471_fu_438_p2 & and_ln102_448_fu_612_p2);

assign and_ln102_453_fu_678_p2 = (icmp_ln86_472_fu_444_p2 & and_ln104_92_fu_624_p2);

assign and_ln102_454_fu_690_p2 = (icmp_ln86_473_fu_450_p2 & and_ln102_449_fu_630_p2);

assign and_ln102_455_fu_702_p2 = (icmp_ln86_474_fu_456_p2 & and_ln104_93_fu_642_p2);

assign and_ln102_456_fu_708_p2 = (icmp_ln86_475_fu_462_p2 & and_ln102_450_fu_648_p2);

assign and_ln102_457_fu_1025_p2 = (icmp_ln86_476_reg_1472 & and_ln104_94_reg_1542);

assign and_ln102_458_fu_1034_p2 = (icmp_ln86_477_reg_1478 & and_ln102_451_fu_1006_p2);

assign and_ln102_459_fu_1044_p2 = (icmp_ln86_478_reg_1484 & and_ln104_95_fu_1015_p2);

assign and_ln102_460_fu_726_p2 = (icmp_ln86_479_fu_486_p2 & and_ln102_452_fu_666_p2);

assign and_ln102_461_fu_738_p2 = (and_ln102_475_fu_732_p2 & and_ln102_448_fu_612_p2);

assign and_ln102_462_fu_744_p2 = (icmp_ln86_481_fu_498_p2 & and_ln102_453_fu_678_p2);

assign and_ln102_463_fu_756_p2 = (and_ln104_92_fu_624_p2 & and_ln102_476_fu_750_p2);

assign and_ln102_464_fu_762_p2 = (icmp_ln86_483_fu_510_p2 & and_ln102_454_fu_690_p2);

assign and_ln102_465_fu_774_p2 = (and_ln102_477_fu_768_p2 & and_ln102_449_fu_630_p2);

assign and_ln102_466_fu_780_p2 = (icmp_ln86_485_fu_522_p2 & and_ln102_455_fu_702_p2);

assign and_ln102_467_fu_1059_p2 = (and_ln104_93_reg_1537 & and_ln102_478_fu_1054_p2);

assign and_ln102_468_fu_1064_p2 = (icmp_ln86_487_reg_1495 & and_ln104_96_reg_1549);

assign and_ln102_469_fu_1068_p2 = (icmp_ln86_488_reg_1500 & and_ln102_457_fu_1025_p2);

assign and_ln102_470_fu_1078_p2 = (and_ln104_94_reg_1542 & and_ln102_479_fu_1073_p2);

assign and_ln102_471_fu_1083_p2 = (icmp_ln86_490_reg_1510 & and_ln102_458_fu_1034_p2);

assign and_ln102_472_fu_1093_p2 = (and_ln102_480_fu_1088_p2 & and_ln102_451_fu_1006_p2);

assign and_ln102_473_fu_1099_p2 = (icmp_ln86_492_reg_1520 & and_ln102_459_fu_1044_p2);

assign and_ln102_474_fu_1109_p2 = (and_ln104_95_fu_1015_p2 & and_ln102_481_fu_1104_p2);

assign and_ln102_475_fu_732_p2 = (xor_ln104_230_fu_672_p2 & icmp_ln86_480_fu_492_p2);

assign and_ln102_476_fu_750_p2 = (xor_ln104_231_fu_684_p2 & icmp_ln86_482_fu_504_p2);

assign and_ln102_477_fu_768_p2 = (xor_ln104_232_fu_696_p2 & icmp_ln86_484_fu_516_p2);

assign and_ln102_478_fu_1054_p2 = (xor_ln104_233_fu_1020_p2 & icmp_ln86_486_reg_1490);

assign and_ln102_479_fu_1073_p2 = (xor_ln104_235_fu_1029_p2 & icmp_ln86_489_reg_1505);

assign and_ln102_480_fu_1088_p2 = (xor_ln104_236_fu_1039_p2 & icmp_ln86_491_reg_1515);

assign and_ln102_481_fu_1104_p2 = (xor_ln104_237_fu_1049_p2 & icmp_ln86_493_reg_1525);

assign and_ln102_fu_594_p2 = (xor_ln104_fu_576_p2 & icmp_ln86_466_fu_408_p2);

assign and_ln104_91_fu_606_p2 = (xor_ln104_fu_576_p2 & xor_ln104_225_fu_600_p2);

assign and_ln104_92_fu_624_p2 = (xor_ln104_226_fu_618_p2 & icmp_ln86_465_fu_402_p2);

assign and_ln104_93_fu_642_p2 = (xor_ln104_227_fu_636_p2 & and_ln104_fu_588_p2);

assign and_ln104_94_fu_660_p2 = (xor_ln104_228_fu_654_p2 & and_ln102_fu_594_p2);

assign and_ln104_95_fu_1015_p2 = (xor_ln104_229_fu_1010_p2 & and_ln104_91_reg_1530);

assign and_ln104_96_fu_720_p2 = (xor_ln104_234_fu_714_p2 & and_ln102_450_fu_648_p2);

assign and_ln104_fu_588_p2 = (xor_ln104_224_fu_582_p2 & icmp_ln86_fu_396_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((or_ln117_458_fu_1308_p2[0:0] == 1'b1) ? tmp_fu_1321_p65 : 13'd0);

assign icmp_ln86_465_fu_402_p2 = (($signed(x_17_val) < $signed(18'd34)) ? 1'b1 : 1'b0);

assign icmp_ln86_466_fu_408_p2 = (($signed(x_13_val) < $signed(18'd458)) ? 1'b1 : 1'b0);

assign icmp_ln86_467_fu_414_p2 = (($signed(x_7_val) < $signed(18'd7814)) ? 1'b1 : 1'b0);

assign icmp_ln86_468_fu_420_p2 = (($signed(x_52_val) < $signed(18'd55809)) ? 1'b1 : 1'b0);

assign icmp_ln86_469_fu_426_p2 = (($signed(x_1_val) < $signed(18'd213132)) ? 1'b1 : 1'b0);

assign icmp_ln86_470_fu_432_p2 = (($signed(x_43_val) < $signed(18'd81)) ? 1'b1 : 1'b0);

assign icmp_ln86_471_fu_438_p2 = (($signed(x_6_val) < $signed(18'd29044)) ? 1'b1 : 1'b0);

assign icmp_ln86_472_fu_444_p2 = (($signed(x_49_val) < $signed(18'd74922)) ? 1'b1 : 1'b0);

assign icmp_ln86_473_fu_450_p2 = (($signed(x_22_val) < $signed(18'd148)) ? 1'b1 : 1'b0);

assign icmp_ln86_474_fu_456_p2 = (($signed(x_39_val) < $signed(18'd1141)) ? 1'b1 : 1'b0);

assign icmp_ln86_475_fu_462_p2 = (($signed(x_2_val) < $signed(18'd260503)) ? 1'b1 : 1'b0);

assign icmp_ln86_476_fu_468_p2 = (($signed(x_42_val) < $signed(18'd269)) ? 1'b1 : 1'b0);

assign icmp_ln86_477_fu_474_p2 = (($signed(x_1_val) < $signed(18'd245328)) ? 1'b1 : 1'b0);

assign icmp_ln86_478_fu_480_p2 = (($signed(x_10_val) < $signed(18'd981)) ? 1'b1 : 1'b0);

assign icmp_ln86_479_fu_486_p2 = (($signed(x_7_val) < $signed(18'd3718)) ? 1'b1 : 1'b0);

assign icmp_ln86_480_fu_492_p2 = (($signed(x_33_val) < $signed(18'd738)) ? 1'b1 : 1'b0);

assign icmp_ln86_481_fu_498_p2 = (($signed(x_4_val) < $signed(18'd30874)) ? 1'b1 : 1'b0);

assign icmp_ln86_482_fu_504_p2 = (($signed(x_3_val) < $signed(18'd96000)) ? 1'b1 : 1'b0);

assign icmp_ln86_483_fu_510_p2 = (($signed(x_25_val) < $signed(18'd164)) ? 1'b1 : 1'b0);

assign icmp_ln86_484_fu_516_p2 = (($signed(x_17_val) < $signed(18'd39)) ? 1'b1 : 1'b0);

assign icmp_ln86_485_fu_522_p2 = (($signed(x_39_val) < $signed(18'd1118)) ? 1'b1 : 1'b0);

assign icmp_ln86_486_fu_528_p2 = (($signed(x_17_val) < $signed(18'd35)) ? 1'b1 : 1'b0);

assign icmp_ln86_487_fu_534_p2 = (($signed(x_36_val) < $signed(18'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_488_fu_540_p2 = (($signed(x_33_val) < $signed(18'd983)) ? 1'b1 : 1'b0);

assign icmp_ln86_489_fu_546_p2 = (($signed(x_1_val) < $signed(18'd214506)) ? 1'b1 : 1'b0);

assign icmp_ln86_490_fu_552_p2 = (($signed(x_45_val) < $signed(18'd192)) ? 1'b1 : 1'b0);

assign icmp_ln86_491_fu_558_p2 = (($signed(x_44_val) < $signed(18'd15)) ? 1'b1 : 1'b0);

assign icmp_ln86_492_fu_564_p2 = (($signed(x_16_val) < $signed(18'd77)) ? 1'b1 : 1'b0);

assign icmp_ln86_493_fu_570_p2 = (($signed(x_44_val) < $signed(18'd82)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_396_p2 = (($signed(x_17_val) < $signed(18'd44)) ? 1'b1 : 1'b0);

assign or_ln117_430_fu_802_p2 = (and_ln102_456_fu_708_p2 | and_ln102_452_fu_666_p2);

assign or_ln117_431_fu_816_p2 = (or_ln117_430_fu_802_p2 | and_ln102_461_fu_738_p2);

assign or_ln117_432_fu_834_p2 = (and_ln102_456_fu_708_p2 | and_ln102_448_fu_612_p2);

assign or_ln117_433_fu_848_p2 = (or_ln117_432_fu_834_p2 | and_ln102_462_fu_744_p2);

assign or_ln117_434_fu_862_p2 = (or_ln117_432_fu_834_p2 | and_ln102_453_fu_678_p2);

assign or_ln117_435_fu_876_p2 = (or_ln117_434_fu_862_p2 | and_ln102_463_fu_756_p2);

assign or_ln117_436_fu_894_p2 = (icmp_ln86_465_fu_402_p2 | and_ln102_456_fu_708_p2);

assign or_ln117_437_fu_908_p2 = (or_ln117_436_fu_894_p2 | and_ln102_464_fu_762_p2);

assign or_ln117_438_fu_922_p2 = (or_ln117_436_fu_894_p2 | and_ln102_454_fu_690_p2);

assign or_ln117_439_fu_936_p2 = (or_ln117_438_fu_922_p2 | and_ln102_465_fu_774_p2);

assign or_ln117_440_fu_950_p2 = (or_ln117_436_fu_894_p2 | and_ln102_449_fu_630_p2);

assign or_ln117_441_fu_964_p2 = (or_ln117_440_fu_950_p2 | and_ln102_466_fu_780_p2);

assign or_ln117_442_fu_978_p2 = (or_ln117_440_fu_950_p2 | and_ln102_455_fu_702_p2);

assign or_ln117_443_fu_1115_p2 = (or_ln117_442_reg_1555 | and_ln102_467_fu_1059_p2);

assign or_ln117_444_fu_1000_p2 = (or_ln117_436_fu_894_p2 | and_ln104_fu_588_p2);

assign or_ln117_445_fu_1131_p2 = (or_ln117_444_reg_1565 | and_ln102_468_fu_1064_p2);

assign or_ln117_446_fu_1143_p2 = (or_ln117_444_reg_1565 | and_ln104_96_reg_1549);

assign or_ln117_447_fu_1155_p2 = (or_ln117_446_fu_1143_p2 | and_ln102_469_fu_1068_p2);

assign or_ln117_448_fu_1169_p2 = (or_ln117_446_fu_1143_p2 | and_ln102_457_fu_1025_p2);

assign or_ln117_449_fu_1183_p2 = (or_ln117_448_fu_1169_p2 | and_ln102_470_fu_1078_p2);

assign or_ln117_450_fu_1197_p2 = (or_ln117_446_fu_1143_p2 | and_ln104_94_reg_1542);

assign or_ln117_451_fu_1210_p2 = (or_ln117_450_fu_1197_p2 | and_ln102_471_fu_1083_p2);

assign or_ln117_452_fu_1224_p2 = (or_ln117_450_fu_1197_p2 | and_ln102_458_fu_1034_p2);

assign or_ln117_453_fu_1238_p2 = (or_ln117_452_fu_1224_p2 | and_ln102_472_fu_1093_p2);

assign or_ln117_454_fu_1252_p2 = (or_ln117_450_fu_1197_p2 | and_ln102_451_fu_1006_p2);

assign or_ln117_455_fu_1266_p2 = (or_ln117_454_fu_1252_p2 | and_ln102_473_fu_1099_p2);

assign or_ln117_456_fu_1280_p2 = (or_ln117_454_fu_1252_p2 | and_ln102_459_fu_1044_p2);

assign or_ln117_457_fu_1294_p2 = (or_ln117_456_fu_1280_p2 | and_ln102_474_fu_1109_p2);

assign or_ln117_458_fu_1308_p2 = (or_ln117_450_fu_1197_p2 | and_ln104_91_reg_1530);

assign or_ln117_fu_786_p2 = (and_ln102_460_fu_726_p2 | and_ln102_456_fu_708_p2);

assign select_ln117_453_fu_822_p3 = ((or_ln117_430_fu_802_p2[0:0] == 1'b1) ? select_ln117_fu_808_p3 : 2'd3);

assign select_ln117_454_fu_840_p3 = ((or_ln117_431_fu_816_p2[0:0] == 1'b1) ? zext_ln117_51_fu_830_p1 : 3'd4);

assign select_ln117_455_fu_854_p3 = ((or_ln117_432_fu_834_p2[0:0] == 1'b1) ? select_ln117_454_fu_840_p3 : 3'd5);

assign select_ln117_456_fu_868_p3 = ((or_ln117_433_fu_848_p2[0:0] == 1'b1) ? select_ln117_455_fu_854_p3 : 3'd6);

assign select_ln117_457_fu_882_p3 = ((or_ln117_434_fu_862_p2[0:0] == 1'b1) ? select_ln117_456_fu_868_p3 : 3'd7);

assign select_ln117_458_fu_900_p3 = ((or_ln117_435_fu_876_p2[0:0] == 1'b1) ? zext_ln117_52_fu_890_p1 : 4'd8);

assign select_ln117_459_fu_914_p3 = ((or_ln117_436_fu_894_p2[0:0] == 1'b1) ? select_ln117_458_fu_900_p3 : 4'd9);

assign select_ln117_460_fu_928_p3 = ((or_ln117_437_fu_908_p2[0:0] == 1'b1) ? select_ln117_459_fu_914_p3 : 4'd10);

assign select_ln117_461_fu_942_p3 = ((or_ln117_438_fu_922_p2[0:0] == 1'b1) ? select_ln117_460_fu_928_p3 : 4'd11);

assign select_ln117_462_fu_956_p3 = ((or_ln117_439_fu_936_p2[0:0] == 1'b1) ? select_ln117_461_fu_942_p3 : 4'd12);

assign select_ln117_463_fu_970_p3 = ((or_ln117_440_fu_950_p2[0:0] == 1'b1) ? select_ln117_462_fu_956_p3 : 4'd13);

assign select_ln117_464_fu_984_p3 = ((or_ln117_441_fu_964_p2[0:0] == 1'b1) ? select_ln117_463_fu_970_p3 : 4'd14);

assign select_ln117_465_fu_992_p3 = ((or_ln117_442_fu_978_p2[0:0] == 1'b1) ? select_ln117_464_fu_984_p3 : 4'd15);

assign select_ln117_466_fu_1123_p3 = ((or_ln117_443_fu_1115_p2[0:0] == 1'b1) ? zext_ln117_53_fu_1120_p1 : 5'd16);

assign select_ln117_467_fu_1136_p3 = ((or_ln117_444_reg_1565[0:0] == 1'b1) ? select_ln117_466_fu_1123_p3 : 5'd17);

assign select_ln117_468_fu_1147_p3 = ((or_ln117_445_fu_1131_p2[0:0] == 1'b1) ? select_ln117_467_fu_1136_p3 : 5'd18);

assign select_ln117_469_fu_1161_p3 = ((or_ln117_446_fu_1143_p2[0:0] == 1'b1) ? select_ln117_468_fu_1147_p3 : 5'd19);

assign select_ln117_470_fu_1175_p3 = ((or_ln117_447_fu_1155_p2[0:0] == 1'b1) ? select_ln117_469_fu_1161_p3 : 5'd20);

assign select_ln117_471_fu_1189_p3 = ((or_ln117_448_fu_1169_p2[0:0] == 1'b1) ? select_ln117_470_fu_1175_p3 : 5'd21);

assign select_ln117_472_fu_1202_p3 = ((or_ln117_449_fu_1183_p2[0:0] == 1'b1) ? select_ln117_471_fu_1189_p3 : 5'd22);

assign select_ln117_473_fu_1216_p3 = ((or_ln117_450_fu_1197_p2[0:0] == 1'b1) ? select_ln117_472_fu_1202_p3 : 5'd23);

assign select_ln117_474_fu_1230_p3 = ((or_ln117_451_fu_1210_p2[0:0] == 1'b1) ? select_ln117_473_fu_1216_p3 : 5'd24);

assign select_ln117_475_fu_1244_p3 = ((or_ln117_452_fu_1224_p2[0:0] == 1'b1) ? select_ln117_474_fu_1230_p3 : 5'd25);

assign select_ln117_476_fu_1258_p3 = ((or_ln117_453_fu_1238_p2[0:0] == 1'b1) ? select_ln117_475_fu_1244_p3 : 5'd26);

assign select_ln117_477_fu_1272_p3 = ((or_ln117_454_fu_1252_p2[0:0] == 1'b1) ? select_ln117_476_fu_1258_p3 : 5'd27);

assign select_ln117_478_fu_1286_p3 = ((or_ln117_455_fu_1266_p2[0:0] == 1'b1) ? select_ln117_477_fu_1272_p3 : 5'd28);

assign select_ln117_479_fu_1300_p3 = ((or_ln117_456_fu_1280_p2[0:0] == 1'b1) ? select_ln117_478_fu_1286_p3 : 5'd29);

assign select_ln117_fu_808_p3 = ((or_ln117_fu_786_p2[0:0] == 1'b1) ? zext_ln117_fu_798_p1 : 2'd2);

assign tmp_fu_1321_p63 = 'bx;

assign tmp_fu_1321_p64 = ((or_ln117_457_fu_1294_p2[0:0] == 1'b1) ? select_ln117_479_fu_1300_p3 : 5'd30);

assign xor_ln104_224_fu_582_p2 = (icmp_ln86_465_fu_402_p2 ^ 1'd1);

assign xor_ln104_225_fu_600_p2 = (icmp_ln86_466_fu_408_p2 ^ 1'd1);

assign xor_ln104_226_fu_618_p2 = (icmp_ln86_467_fu_414_p2 ^ 1'd1);

assign xor_ln104_227_fu_636_p2 = (icmp_ln86_468_fu_420_p2 ^ 1'd1);

assign xor_ln104_228_fu_654_p2 = (icmp_ln86_469_fu_426_p2 ^ 1'd1);

assign xor_ln104_229_fu_1010_p2 = (icmp_ln86_470_reg_1461 ^ 1'd1);

assign xor_ln104_230_fu_672_p2 = (icmp_ln86_471_fu_438_p2 ^ 1'd1);

assign xor_ln104_231_fu_684_p2 = (icmp_ln86_472_fu_444_p2 ^ 1'd1);

assign xor_ln104_232_fu_696_p2 = (icmp_ln86_473_fu_450_p2 ^ 1'd1);

assign xor_ln104_233_fu_1020_p2 = (icmp_ln86_474_reg_1467 ^ 1'd1);

assign xor_ln104_234_fu_714_p2 = (icmp_ln86_475_fu_462_p2 ^ 1'd1);

assign xor_ln104_235_fu_1029_p2 = (icmp_ln86_476_reg_1472 ^ 1'd1);

assign xor_ln104_236_fu_1039_p2 = (icmp_ln86_477_reg_1478 ^ 1'd1);

assign xor_ln104_237_fu_1049_p2 = (icmp_ln86_478_reg_1484 ^ 1'd1);

assign xor_ln104_fu_576_p2 = (icmp_ln86_fu_396_p2 ^ 1'd1);

assign xor_ln117_fu_792_p2 = (1'd1 ^ and_ln102_456_fu_708_p2);

assign zext_ln117_51_fu_830_p1 = select_ln117_453_fu_822_p3;

assign zext_ln117_52_fu_890_p1 = select_ln117_457_fu_882_p3;

assign zext_ln117_53_fu_1120_p1 = select_ln117_465_reg_1560;

assign zext_ln117_fu_798_p1 = xor_ln117_fu_792_p2;

endmodule //my_prj_decision_function_18
