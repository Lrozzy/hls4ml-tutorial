// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_44 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_6_val,
        x_11_val,
        x_14_val,
        x_17_val,
        x_22_val,
        x_25_val,
        x_27_val,
        x_28_val,
        x_33_val,
        x_34_val,
        x_36_val,
        x_38_val,
        x_39_val,
        x_43_val,
        x_45_val,
        x_47_val,
        x_49_val,
        x_50_val,
        x_51_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_6_val;
input  [17:0] x_11_val;
input  [17:0] x_14_val;
input  [17:0] x_17_val;
input  [17:0] x_22_val;
input  [17:0] x_25_val;
input  [17:0] x_27_val;
input  [17:0] x_28_val;
input  [17:0] x_33_val;
input  [17:0] x_34_val;
input  [17:0] x_36_val;
input  [17:0] x_38_val;
input  [17:0] x_39_val;
input  [17:0] x_43_val;
input  [17:0] x_45_val;
input  [17:0] x_47_val;
input  [17:0] x_49_val;
input  [17:0] x_50_val;
input  [17:0] x_51_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_396_p2;
reg   [0:0] icmp_ln86_reg_1434;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_1163_fu_408_p2;
reg   [0:0] icmp_ln86_1163_reg_1443;
wire   [0:0] icmp_ln86_1166_fu_426_p2;
reg   [0:0] icmp_ln86_1166_reg_1449;
wire   [0:0] icmp_ln86_1167_fu_432_p2;
reg   [0:0] icmp_ln86_1167_reg_1455;
wire   [0:0] icmp_ln86_1172_fu_462_p2;
reg   [0:0] icmp_ln86_1172_reg_1461;
wire   [0:0] icmp_ln86_1173_fu_468_p2;
reg   [0:0] icmp_ln86_1173_reg_1467;
wire   [0:0] icmp_ln86_1174_fu_474_p2;
reg   [0:0] icmp_ln86_1174_reg_1473;
wire   [0:0] icmp_ln86_1387_fu_490_p2;
reg   [0:0] icmp_ln86_1387_reg_1479;
wire   [0:0] icmp_ln86_1183_fu_538_p2;
reg   [0:0] icmp_ln86_1183_reg_1485;
wire   [0:0] icmp_ln86_1184_fu_544_p2;
reg   [0:0] icmp_ln86_1184_reg_1490;
wire   [0:0] icmp_ln86_1185_fu_550_p2;
reg   [0:0] icmp_ln86_1185_reg_1495;
wire   [0:0] icmp_ln86_1186_fu_556_p2;
reg   [0:0] icmp_ln86_1186_reg_1500;
wire   [0:0] icmp_ln86_1187_fu_562_p2;
reg   [0:0] icmp_ln86_1187_reg_1505;
wire   [0:0] icmp_ln86_1188_fu_568_p2;
reg   [0:0] icmp_ln86_1188_reg_1510;
wire   [0:0] icmp_ln86_1189_fu_574_p2;
reg   [0:0] icmp_ln86_1189_reg_1515;
wire   [0:0] icmp_ln86_1190_fu_580_p2;
reg   [0:0] icmp_ln86_1190_reg_1520;
wire   [4:0] select_ln117_1137_fu_928_p3;
reg   [4:0] select_ln117_1137_reg_1525;
wire    ap_block_pp0_stage0;
wire   [15:0] tmp_fu_480_p4;
wire   [0:0] icmp_ln86_1162_fu_402_p2;
wire   [0:0] xor_ln104_556_fu_592_p2;
wire   [0:0] icmp_ln86_1164_fu_414_p2;
wire   [0:0] and_ln102_fu_586_p2;
wire   [0:0] xor_ln104_558_fu_610_p2;
wire   [0:0] icmp_ln86_1165_fu_420_p2;
wire   [0:0] and_ln104_fu_598_p2;
wire   [0:0] xor_ln104_559_fu_628_p2;
wire   [0:0] icmp_ln86_1168_fu_438_p2;
wire   [0:0] and_ln102_1119_fu_604_p2;
wire   [0:0] icmp_ln86_1169_fu_444_p2;
wire   [0:0] and_ln104_225_fu_616_p2;
wire   [0:0] icmp_ln86_1170_fu_450_p2;
wire   [0:0] and_ln102_1120_fu_622_p2;
wire   [0:0] icmp_ln86_1171_fu_456_p2;
wire   [0:0] and_ln104_226_fu_634_p2;
wire   [0:0] icmp_ln86_1176_fu_496_p2;
wire   [0:0] and_ln102_1123_fu_640_p2;
wire   [0:0] icmp_ln86_1177_fu_502_p2;
wire   [0:0] and_ln102_1124_fu_646_p2;
wire   [0:0] icmp_ln86_1178_fu_508_p2;
wire   [0:0] xor_ln104_562_fu_652_p2;
wire   [0:0] and_ln102_1146_fu_694_p2;
wire   [0:0] icmp_ln86_1179_fu_514_p2;
wire   [0:0] and_ln102_1125_fu_658_p2;
wire   [0:0] icmp_ln86_1180_fu_520_p2;
wire   [0:0] xor_ln104_563_fu_664_p2;
wire   [0:0] and_ln102_1147_fu_712_p2;
wire   [0:0] icmp_ln86_1181_fu_526_p2;
wire   [0:0] and_ln102_1126_fu_670_p2;
wire   [0:0] icmp_ln86_1182_fu_532_p2;
wire   [0:0] xor_ln104_564_fu_676_p2;
wire   [0:0] and_ln102_1148_fu_730_p2;
wire   [0:0] and_ln102_1131_fu_682_p2;
wire   [0:0] xor_ln117_fu_742_p2;
wire   [1:0] zext_ln117_fu_748_p1;
wire   [1:0] select_ln117_fu_752_p3;
wire   [0:0] and_ln102_1132_fu_688_p2;
wire   [2:0] zext_ln117_129_fu_760_p1;
wire   [0:0] or_ln117_fu_764_p2;
wire   [2:0] select_ln117_1125_fu_770_p3;
wire   [0:0] or_ln117_1054_fu_778_p2;
wire   [0:0] and_ln102_1133_fu_700_p2;
wire   [2:0] select_ln117_1126_fu_784_p3;
wire   [0:0] or_ln117_1055_fu_792_p2;
wire   [2:0] select_ln117_1127_fu_798_p3;
wire   [2:0] select_ln117_1128_fu_806_p3;
wire   [0:0] and_ln102_1134_fu_706_p2;
wire   [3:0] zext_ln117_130_fu_814_p1;
wire   [0:0] or_ln117_1056_fu_818_p2;
wire   [3:0] select_ln117_1129_fu_824_p3;
wire   [0:0] or_ln117_1057_fu_832_p2;
wire   [0:0] and_ln102_1135_fu_718_p2;
wire   [3:0] select_ln117_1130_fu_838_p3;
wire   [0:0] or_ln117_1058_fu_846_p2;
wire   [3:0] select_ln117_1131_fu_852_p3;
wire   [0:0] or_ln117_1059_fu_860_p2;
wire   [0:0] and_ln102_1136_fu_724_p2;
wire   [3:0] select_ln117_1132_fu_866_p3;
wire   [0:0] or_ln117_1060_fu_874_p2;
wire   [3:0] select_ln117_1133_fu_880_p3;
wire   [0:0] or_ln117_1061_fu_888_p2;
wire   [0:0] and_ln102_1137_fu_736_p2;
wire   [3:0] select_ln117_1134_fu_894_p3;
wire   [0:0] or_ln117_1062_fu_902_p2;
wire   [3:0] select_ln117_1135_fu_908_p3;
wire   [3:0] select_ln117_1136_fu_916_p3;
wire   [4:0] zext_ln117_131_fu_924_p1;
wire   [0:0] xor_ln104_fu_936_p2;
wire   [0:0] xor_ln104_557_fu_946_p2;
wire   [0:0] and_ln102_1118_fu_941_p2;
wire   [0:0] xor_ln104_560_fu_962_p2;
wire   [0:0] and_ln104_224_fu_951_p2;
wire   [0:0] xor_ln104_561_fu_978_p2;
wire   [0:0] and_ln102_1121_fu_957_p2;
wire   [0:0] and_ln104_227_fu_967_p2;
wire   [0:0] and_ln102_1122_fu_973_p2;
wire   [0:0] and_ln104_228_fu_983_p2;
wire   [0:0] and_ln102_1127_fu_989_p2;
wire   [0:0] xor_ln104_565_fu_994_p2;
wire   [0:0] and_ln102_1149_fu_1034_p2;
wire   [0:0] and_ln102_1128_fu_999_p2;
wire   [0:0] xor_ln104_566_fu_1004_p2;
wire   [0:0] and_ln102_1150_fu_1050_p2;
wire   [0:0] and_ln102_1129_fu_1009_p2;
wire   [0:0] xor_ln104_567_fu_1014_p2;
wire   [0:0] and_ln102_1151_fu_1066_p2;
wire   [0:0] and_ln102_1130_fu_1019_p2;
wire   [0:0] xor_ln104_568_fu_1024_p2;
wire   [0:0] and_ln102_1152_fu_1082_p2;
wire   [0:0] and_ln102_1138_fu_1029_p2;
wire   [0:0] or_ln117_1063_fu_1093_p2;
wire   [0:0] or_ln117_1064_fu_1098_p2;
wire   [0:0] and_ln102_1139_fu_1039_p2;
wire   [4:0] select_ln117_1138_fu_1103_p3;
wire   [0:0] or_ln117_1065_fu_1110_p2;
wire   [4:0] select_ln117_1139_fu_1116_p3;
wire   [0:0] or_ln117_1066_fu_1124_p2;
wire   [0:0] and_ln102_1140_fu_1045_p2;
wire   [4:0] select_ln117_1140_fu_1129_p3;
wire   [0:0] or_ln117_1067_fu_1137_p2;
wire   [4:0] select_ln117_1141_fu_1143_p3;
wire   [0:0] or_ln117_1068_fu_1151_p2;
wire   [0:0] and_ln102_1141_fu_1055_p2;
wire   [4:0] select_ln117_1142_fu_1157_p3;
wire   [0:0] or_ln117_1069_fu_1165_p2;
wire   [4:0] select_ln117_1143_fu_1171_p3;
wire   [0:0] or_ln117_1070_fu_1179_p2;
wire   [0:0] and_ln102_1142_fu_1061_p2;
wire   [4:0] select_ln117_1144_fu_1184_p3;
wire   [0:0] or_ln117_1071_fu_1192_p2;
wire   [4:0] select_ln117_1145_fu_1198_p3;
wire   [0:0] or_ln117_1072_fu_1206_p2;
wire   [0:0] and_ln102_1143_fu_1071_p2;
wire   [4:0] select_ln117_1146_fu_1212_p3;
wire   [0:0] or_ln117_1073_fu_1220_p2;
wire   [4:0] select_ln117_1147_fu_1226_p3;
wire   [0:0] or_ln117_1074_fu_1234_p2;
wire   [0:0] and_ln102_1144_fu_1077_p2;
wire   [4:0] select_ln117_1148_fu_1240_p3;
wire   [0:0] or_ln117_1075_fu_1248_p2;
wire   [4:0] select_ln117_1149_fu_1254_p3;
wire   [0:0] or_ln117_1076_fu_1262_p2;
wire   [0:0] and_ln102_1145_fu_1087_p2;
wire   [4:0] select_ln117_1150_fu_1268_p3;
wire   [0:0] or_ln117_1077_fu_1276_p2;
wire   [4:0] select_ln117_1151_fu_1282_p3;
wire   [11:0] agg_result_fu_1298_p65;
wire   [4:0] agg_result_fu_1298_p66;
wire   [11:0] agg_result_fu_1298_p67;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1298_p1;
wire   [4:0] agg_result_fu_1298_p3;
wire   [4:0] agg_result_fu_1298_p5;
wire   [4:0] agg_result_fu_1298_p7;
wire   [4:0] agg_result_fu_1298_p9;
wire   [4:0] agg_result_fu_1298_p11;
wire   [4:0] agg_result_fu_1298_p13;
wire   [4:0] agg_result_fu_1298_p15;
wire   [4:0] agg_result_fu_1298_p17;
wire   [4:0] agg_result_fu_1298_p19;
wire   [4:0] agg_result_fu_1298_p21;
wire   [4:0] agg_result_fu_1298_p23;
wire   [4:0] agg_result_fu_1298_p25;
wire   [4:0] agg_result_fu_1298_p27;
wire   [4:0] agg_result_fu_1298_p29;
wire   [4:0] agg_result_fu_1298_p31;
wire  signed [4:0] agg_result_fu_1298_p33;
wire  signed [4:0] agg_result_fu_1298_p35;
wire  signed [4:0] agg_result_fu_1298_p37;
wire  signed [4:0] agg_result_fu_1298_p39;
wire  signed [4:0] agg_result_fu_1298_p41;
wire  signed [4:0] agg_result_fu_1298_p43;
wire  signed [4:0] agg_result_fu_1298_p45;
wire  signed [4:0] agg_result_fu_1298_p47;
wire  signed [4:0] agg_result_fu_1298_p49;
wire  signed [4:0] agg_result_fu_1298_p51;
wire  signed [4:0] agg_result_fu_1298_p53;
wire  signed [4:0] agg_result_fu_1298_p55;
wire  signed [4:0] agg_result_fu_1298_p57;
wire  signed [4:0] agg_result_fu_1298_p59;
wire  signed [4:0] agg_result_fu_1298_p61;
wire  signed [4:0] agg_result_fu_1298_p63;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_65_5_12_1_1_x23 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 12 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 12 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 12 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 12 ),
    .CASE31( 5'h1F ),
    .din31_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_65_5_12_1_1_x23_U1243(
    .din0(12'd4069),
    .din1(12'd3917),
    .din2(12'd393),
    .din3(12'd1),
    .din4(12'd83),
    .din5(12'd621),
    .din6(12'd3503),
    .din7(12'd1268),
    .din8(12'd1469),
    .din9(12'd3799),
    .din10(12'd4092),
    .din11(12'd3891),
    .din12(12'd3123),
    .din13(12'd723),
    .din14(12'd118),
    .din15(12'd3534),
    .din16(12'd33),
    .din17(12'd267),
    .din18(12'd127),
    .din19(12'd650),
    .din20(12'd3750),
    .din21(12'd275),
    .din22(12'd1354),
    .din23(12'd3739),
    .din24(12'd3946),
    .din25(12'd811),
    .din26(12'd3674),
    .din27(12'd4041),
    .din28(12'd4058),
    .din29(12'd3748),
    .din30(12'd221),
    .din31(12'd14),
    .def(agg_result_fu_1298_p65),
    .sel(agg_result_fu_1298_p66),
    .dout(agg_result_fu_1298_p67)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_1163_reg_1443 <= icmp_ln86_1163_fu_408_p2;
        icmp_ln86_1166_reg_1449 <= icmp_ln86_1166_fu_426_p2;
        icmp_ln86_1167_reg_1455 <= icmp_ln86_1167_fu_432_p2;
        icmp_ln86_1172_reg_1461 <= icmp_ln86_1172_fu_462_p2;
        icmp_ln86_1173_reg_1467 <= icmp_ln86_1173_fu_468_p2;
        icmp_ln86_1174_reg_1473 <= icmp_ln86_1174_fu_474_p2;
        icmp_ln86_1183_reg_1485 <= icmp_ln86_1183_fu_538_p2;
        icmp_ln86_1184_reg_1490 <= icmp_ln86_1184_fu_544_p2;
        icmp_ln86_1185_reg_1495 <= icmp_ln86_1185_fu_550_p2;
        icmp_ln86_1186_reg_1500 <= icmp_ln86_1186_fu_556_p2;
        icmp_ln86_1187_reg_1505 <= icmp_ln86_1187_fu_562_p2;
        icmp_ln86_1188_reg_1510 <= icmp_ln86_1188_fu_568_p2;
        icmp_ln86_1189_reg_1515 <= icmp_ln86_1189_fu_574_p2;
        icmp_ln86_1190_reg_1520 <= icmp_ln86_1190_fu_580_p2;
        icmp_ln86_1387_reg_1479 <= icmp_ln86_1387_fu_490_p2;
        icmp_ln86_reg_1434 <= icmp_ln86_fu_396_p2;
        select_ln117_1137_reg_1525 <= select_ln117_1137_fu_928_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1298_p65 = 'bx;

assign agg_result_fu_1298_p66 = ((or_ln117_1077_fu_1276_p2[0:0] == 1'b1) ? select_ln117_1151_fu_1282_p3 : 5'd31);

assign and_ln102_1118_fu_941_p2 = (xor_ln104_fu_936_p2 & icmp_ln86_1163_reg_1443);

assign and_ln102_1119_fu_604_p2 = (icmp_ln86_1164_fu_414_p2 & and_ln102_fu_586_p2);

assign and_ln102_1120_fu_622_p2 = (icmp_ln86_1165_fu_420_p2 & and_ln104_fu_598_p2);

assign and_ln102_1121_fu_957_p2 = (icmp_ln86_1166_reg_1449 & and_ln102_1118_fu_941_p2);

assign and_ln102_1122_fu_973_p2 = (icmp_ln86_1167_reg_1455 & and_ln104_224_fu_951_p2);

assign and_ln102_1123_fu_640_p2 = (icmp_ln86_1168_fu_438_p2 & and_ln102_1119_fu_604_p2);

assign and_ln102_1124_fu_646_p2 = (icmp_ln86_1169_fu_444_p2 & and_ln104_225_fu_616_p2);

assign and_ln102_1125_fu_658_p2 = (icmp_ln86_1170_fu_450_p2 & and_ln102_1120_fu_622_p2);

assign and_ln102_1126_fu_670_p2 = (icmp_ln86_1171_fu_456_p2 & and_ln104_226_fu_634_p2);

assign and_ln102_1127_fu_989_p2 = (icmp_ln86_1172_reg_1461 & and_ln102_1121_fu_957_p2);

assign and_ln102_1128_fu_999_p2 = (icmp_ln86_1173_reg_1467 & and_ln104_227_fu_967_p2);

assign and_ln102_1129_fu_1009_p2 = (icmp_ln86_1174_reg_1473 & and_ln102_1122_fu_973_p2);

assign and_ln102_1130_fu_1019_p2 = (icmp_ln86_1387_reg_1479 & and_ln104_228_fu_983_p2);

assign and_ln102_1131_fu_682_p2 = (icmp_ln86_1176_fu_496_p2 & and_ln102_1123_fu_640_p2);

assign and_ln102_1132_fu_688_p2 = (icmp_ln86_1177_fu_502_p2 & and_ln102_1124_fu_646_p2);

assign and_ln102_1133_fu_700_p2 = (and_ln104_225_fu_616_p2 & and_ln102_1146_fu_694_p2);

assign and_ln102_1134_fu_706_p2 = (icmp_ln86_1179_fu_514_p2 & and_ln102_1125_fu_658_p2);

assign and_ln102_1135_fu_718_p2 = (and_ln102_1147_fu_712_p2 & and_ln102_1120_fu_622_p2);

assign and_ln102_1136_fu_724_p2 = (icmp_ln86_1181_fu_526_p2 & and_ln102_1126_fu_670_p2);

assign and_ln102_1137_fu_736_p2 = (and_ln104_226_fu_634_p2 & and_ln102_1148_fu_730_p2);

assign and_ln102_1138_fu_1029_p2 = (icmp_ln86_1183_reg_1485 & and_ln102_1127_fu_989_p2);

assign and_ln102_1139_fu_1039_p2 = (and_ln102_1149_fu_1034_p2 & and_ln102_1121_fu_957_p2);

assign and_ln102_1140_fu_1045_p2 = (icmp_ln86_1185_reg_1495 & and_ln102_1128_fu_999_p2);

assign and_ln102_1141_fu_1055_p2 = (and_ln104_227_fu_967_p2 & and_ln102_1150_fu_1050_p2);

assign and_ln102_1142_fu_1061_p2 = (icmp_ln86_1187_reg_1505 & and_ln102_1129_fu_1009_p2);

assign and_ln102_1143_fu_1071_p2 = (and_ln102_1151_fu_1066_p2 & and_ln102_1122_fu_973_p2);

assign and_ln102_1144_fu_1077_p2 = (icmp_ln86_1189_reg_1515 & and_ln102_1130_fu_1019_p2);

assign and_ln102_1145_fu_1087_p2 = (and_ln104_228_fu_983_p2 & and_ln102_1152_fu_1082_p2);

assign and_ln102_1146_fu_694_p2 = (xor_ln104_562_fu_652_p2 & icmp_ln86_1178_fu_508_p2);

assign and_ln102_1147_fu_712_p2 = (xor_ln104_563_fu_664_p2 & icmp_ln86_1180_fu_520_p2);

assign and_ln102_1148_fu_730_p2 = (xor_ln104_564_fu_676_p2 & icmp_ln86_1182_fu_532_p2);

assign and_ln102_1149_fu_1034_p2 = (xor_ln104_565_fu_994_p2 & icmp_ln86_1184_reg_1490);

assign and_ln102_1150_fu_1050_p2 = (xor_ln104_566_fu_1004_p2 & icmp_ln86_1186_reg_1500);

assign and_ln102_1151_fu_1066_p2 = (xor_ln104_567_fu_1014_p2 & icmp_ln86_1188_reg_1510);

assign and_ln102_1152_fu_1082_p2 = (xor_ln104_568_fu_1024_p2 & icmp_ln86_1190_reg_1520);

assign and_ln102_fu_586_p2 = (icmp_ln86_fu_396_p2 & icmp_ln86_1162_fu_402_p2);

assign and_ln104_224_fu_951_p2 = (xor_ln104_fu_936_p2 & xor_ln104_557_fu_946_p2);

assign and_ln104_225_fu_616_p2 = (xor_ln104_558_fu_610_p2 & and_ln102_fu_586_p2);

assign and_ln104_226_fu_634_p2 = (xor_ln104_559_fu_628_p2 & and_ln104_fu_598_p2);

assign and_ln104_227_fu_967_p2 = (xor_ln104_560_fu_962_p2 & and_ln102_1118_fu_941_p2);

assign and_ln104_228_fu_983_p2 = (xor_ln104_561_fu_978_p2 & and_ln104_224_fu_951_p2);

assign and_ln104_fu_598_p2 = (xor_ln104_556_fu_592_p2 & icmp_ln86_fu_396_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1298_p67;

assign icmp_ln86_1162_fu_402_p2 = (($signed(x_11_val) < $signed(18'd891)) ? 1'b1 : 1'b0);

assign icmp_ln86_1163_fu_408_p2 = (($signed(x_6_val) < $signed(18'd14468)) ? 1'b1 : 1'b0);

assign icmp_ln86_1164_fu_414_p2 = (($signed(x_17_val) < $signed(18'd79)) ? 1'b1 : 1'b0);

assign icmp_ln86_1165_fu_420_p2 = (($signed(x_14_val) < $signed(18'd42)) ? 1'b1 : 1'b0);

assign icmp_ln86_1166_fu_426_p2 = (($signed(x_43_val) < $signed(18'd118)) ? 1'b1 : 1'b0);

assign icmp_ln86_1167_fu_432_p2 = (($signed(x_1_val) < $signed(18'd212416)) ? 1'b1 : 1'b0);

assign icmp_ln86_1168_fu_438_p2 = (($signed(x_14_val) < $signed(18'd66)) ? 1'b1 : 1'b0);

assign icmp_ln86_1169_fu_444_p2 = (($signed(x_1_val) < $signed(18'd45764)) ? 1'b1 : 1'b0);

assign icmp_ln86_1170_fu_450_p2 = (($signed(x_11_val) < $signed(18'd892)) ? 1'b1 : 1'b0);

assign icmp_ln86_1171_fu_456_p2 = (($signed(x_33_val) < $signed(18'd621)) ? 1'b1 : 1'b0);

assign icmp_ln86_1172_fu_462_p2 = (($signed(x_25_val) < $signed(18'd154)) ? 1'b1 : 1'b0);

assign icmp_ln86_1173_fu_468_p2 = (($signed(x_25_val) < $signed(18'd384)) ? 1'b1 : 1'b0);

assign icmp_ln86_1174_fu_474_p2 = (($signed(x_34_val) < $signed(18'd474)) ? 1'b1 : 1'b0);

assign icmp_ln86_1176_fu_496_p2 = (($signed(x_49_val) < $signed(18'd91425)) ? 1'b1 : 1'b0);

assign icmp_ln86_1177_fu_502_p2 = (($signed(x_50_val) < $signed(18'd103573)) ? 1'b1 : 1'b0);

assign icmp_ln86_1178_fu_508_p2 = (($signed(x_33_val) < $signed(18'd761)) ? 1'b1 : 1'b0);

assign icmp_ln86_1179_fu_514_p2 = (($signed(x_14_val) < $signed(18'd38)) ? 1'b1 : 1'b0);

assign icmp_ln86_1180_fu_520_p2 = (($signed(x_27_val) < $signed(18'd11981)) ? 1'b1 : 1'b0);

assign icmp_ln86_1181_fu_526_p2 = (($signed(x_50_val) < $signed(18'd78808)) ? 1'b1 : 1'b0);

assign icmp_ln86_1182_fu_532_p2 = (($signed(x_45_val) < $signed(18'd330)) ? 1'b1 : 1'b0);

assign icmp_ln86_1183_fu_538_p2 = (($signed(x_47_val) < $signed(18'd95475)) ? 1'b1 : 1'b0);

assign icmp_ln86_1184_fu_544_p2 = (($signed(x_39_val) < $signed(18'd1236)) ? 1'b1 : 1'b0);

assign icmp_ln86_1185_fu_550_p2 = (($signed(x_51_val) < $signed(18'd518)) ? 1'b1 : 1'b0);

assign icmp_ln86_1186_fu_556_p2 = (($signed(x_22_val) < $signed(18'd129)) ? 1'b1 : 1'b0);

assign icmp_ln86_1187_fu_562_p2 = (($signed(x_11_val) < $signed(18'd655)) ? 1'b1 : 1'b0);

assign icmp_ln86_1188_fu_568_p2 = (($signed(x_6_val) < $signed(18'd26650)) ? 1'b1 : 1'b0);

assign icmp_ln86_1189_fu_574_p2 = (($signed(x_36_val) < $signed(18'd9)) ? 1'b1 : 1'b0);

assign icmp_ln86_1190_fu_580_p2 = (($signed(x_28_val) < $signed(18'd14429)) ? 1'b1 : 1'b0);

assign icmp_ln86_1387_fu_490_p2 = (($signed(tmp_fu_480_p4) < $signed(16'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_396_p2 = (($signed(x_34_val) < $signed(18'd473)) ? 1'b1 : 1'b0);

assign or_ln117_1054_fu_778_p2 = (and_ln102_1124_fu_646_p2 | and_ln102_1119_fu_604_p2);

assign or_ln117_1055_fu_792_p2 = (or_ln117_1054_fu_778_p2 | and_ln102_1133_fu_700_p2);

assign or_ln117_1056_fu_818_p2 = (and_ln102_fu_586_p2 | and_ln102_1134_fu_706_p2);

assign or_ln117_1057_fu_832_p2 = (and_ln102_fu_586_p2 | and_ln102_1125_fu_658_p2);

assign or_ln117_1058_fu_846_p2 = (or_ln117_1057_fu_832_p2 | and_ln102_1135_fu_718_p2);

assign or_ln117_1059_fu_860_p2 = (and_ln102_fu_586_p2 | and_ln102_1120_fu_622_p2);

assign or_ln117_1060_fu_874_p2 = (or_ln117_1059_fu_860_p2 | and_ln102_1136_fu_724_p2);

assign or_ln117_1061_fu_888_p2 = (or_ln117_1059_fu_860_p2 | and_ln102_1126_fu_670_p2);

assign or_ln117_1062_fu_902_p2 = (or_ln117_1061_fu_888_p2 | and_ln102_1137_fu_736_p2);

assign or_ln117_1063_fu_1093_p2 = (icmp_ln86_reg_1434 | and_ln102_1138_fu_1029_p2);

assign or_ln117_1064_fu_1098_p2 = (icmp_ln86_reg_1434 | and_ln102_1127_fu_989_p2);

assign or_ln117_1065_fu_1110_p2 = (or_ln117_1064_fu_1098_p2 | and_ln102_1139_fu_1039_p2);

assign or_ln117_1066_fu_1124_p2 = (icmp_ln86_reg_1434 | and_ln102_1121_fu_957_p2);

assign or_ln117_1067_fu_1137_p2 = (or_ln117_1066_fu_1124_p2 | and_ln102_1140_fu_1045_p2);

assign or_ln117_1068_fu_1151_p2 = (or_ln117_1066_fu_1124_p2 | and_ln102_1128_fu_999_p2);

assign or_ln117_1069_fu_1165_p2 = (or_ln117_1068_fu_1151_p2 | and_ln102_1141_fu_1055_p2);

assign or_ln117_1070_fu_1179_p2 = (icmp_ln86_reg_1434 | and_ln102_1118_fu_941_p2);

assign or_ln117_1071_fu_1192_p2 = (or_ln117_1070_fu_1179_p2 | and_ln102_1142_fu_1061_p2);

assign or_ln117_1072_fu_1206_p2 = (or_ln117_1070_fu_1179_p2 | and_ln102_1129_fu_1009_p2);

assign or_ln117_1073_fu_1220_p2 = (or_ln117_1072_fu_1206_p2 | and_ln102_1143_fu_1071_p2);

assign or_ln117_1074_fu_1234_p2 = (or_ln117_1070_fu_1179_p2 | and_ln102_1122_fu_973_p2);

assign or_ln117_1075_fu_1248_p2 = (or_ln117_1074_fu_1234_p2 | and_ln102_1144_fu_1077_p2);

assign or_ln117_1076_fu_1262_p2 = (or_ln117_1074_fu_1234_p2 | and_ln102_1130_fu_1019_p2);

assign or_ln117_1077_fu_1276_p2 = (or_ln117_1076_fu_1262_p2 | and_ln102_1145_fu_1087_p2);

assign or_ln117_fu_764_p2 = (and_ln102_1132_fu_688_p2 | and_ln102_1119_fu_604_p2);

assign select_ln117_1125_fu_770_p3 = ((and_ln102_1119_fu_604_p2[0:0] == 1'b1) ? zext_ln117_129_fu_760_p1 : 3'd4);

assign select_ln117_1126_fu_784_p3 = ((or_ln117_fu_764_p2[0:0] == 1'b1) ? select_ln117_1125_fu_770_p3 : 3'd5);

assign select_ln117_1127_fu_798_p3 = ((or_ln117_1054_fu_778_p2[0:0] == 1'b1) ? select_ln117_1126_fu_784_p3 : 3'd6);

assign select_ln117_1128_fu_806_p3 = ((or_ln117_1055_fu_792_p2[0:0] == 1'b1) ? select_ln117_1127_fu_798_p3 : 3'd7);

assign select_ln117_1129_fu_824_p3 = ((and_ln102_fu_586_p2[0:0] == 1'b1) ? zext_ln117_130_fu_814_p1 : 4'd8);

assign select_ln117_1130_fu_838_p3 = ((or_ln117_1056_fu_818_p2[0:0] == 1'b1) ? select_ln117_1129_fu_824_p3 : 4'd9);

assign select_ln117_1131_fu_852_p3 = ((or_ln117_1057_fu_832_p2[0:0] == 1'b1) ? select_ln117_1130_fu_838_p3 : 4'd10);

assign select_ln117_1132_fu_866_p3 = ((or_ln117_1058_fu_846_p2[0:0] == 1'b1) ? select_ln117_1131_fu_852_p3 : 4'd11);

assign select_ln117_1133_fu_880_p3 = ((or_ln117_1059_fu_860_p2[0:0] == 1'b1) ? select_ln117_1132_fu_866_p3 : 4'd12);

assign select_ln117_1134_fu_894_p3 = ((or_ln117_1060_fu_874_p2[0:0] == 1'b1) ? select_ln117_1133_fu_880_p3 : 4'd13);

assign select_ln117_1135_fu_908_p3 = ((or_ln117_1061_fu_888_p2[0:0] == 1'b1) ? select_ln117_1134_fu_894_p3 : 4'd14);

assign select_ln117_1136_fu_916_p3 = ((or_ln117_1062_fu_902_p2[0:0] == 1'b1) ? select_ln117_1135_fu_908_p3 : 4'd15);

assign select_ln117_1137_fu_928_p3 = ((icmp_ln86_fu_396_p2[0:0] == 1'b1) ? zext_ln117_131_fu_924_p1 : 5'd16);

assign select_ln117_1138_fu_1103_p3 = ((or_ln117_1063_fu_1093_p2[0:0] == 1'b1) ? select_ln117_1137_reg_1525 : 5'd17);

assign select_ln117_1139_fu_1116_p3 = ((or_ln117_1064_fu_1098_p2[0:0] == 1'b1) ? select_ln117_1138_fu_1103_p3 : 5'd18);

assign select_ln117_1140_fu_1129_p3 = ((or_ln117_1065_fu_1110_p2[0:0] == 1'b1) ? select_ln117_1139_fu_1116_p3 : 5'd19);

assign select_ln117_1141_fu_1143_p3 = ((or_ln117_1066_fu_1124_p2[0:0] == 1'b1) ? select_ln117_1140_fu_1129_p3 : 5'd20);

assign select_ln117_1142_fu_1157_p3 = ((or_ln117_1067_fu_1137_p2[0:0] == 1'b1) ? select_ln117_1141_fu_1143_p3 : 5'd21);

assign select_ln117_1143_fu_1171_p3 = ((or_ln117_1068_fu_1151_p2[0:0] == 1'b1) ? select_ln117_1142_fu_1157_p3 : 5'd22);

assign select_ln117_1144_fu_1184_p3 = ((or_ln117_1069_fu_1165_p2[0:0] == 1'b1) ? select_ln117_1143_fu_1171_p3 : 5'd23);

assign select_ln117_1145_fu_1198_p3 = ((or_ln117_1070_fu_1179_p2[0:0] == 1'b1) ? select_ln117_1144_fu_1184_p3 : 5'd24);

assign select_ln117_1146_fu_1212_p3 = ((or_ln117_1071_fu_1192_p2[0:0] == 1'b1) ? select_ln117_1145_fu_1198_p3 : 5'd25);

assign select_ln117_1147_fu_1226_p3 = ((or_ln117_1072_fu_1206_p2[0:0] == 1'b1) ? select_ln117_1146_fu_1212_p3 : 5'd26);

assign select_ln117_1148_fu_1240_p3 = ((or_ln117_1073_fu_1220_p2[0:0] == 1'b1) ? select_ln117_1147_fu_1226_p3 : 5'd27);

assign select_ln117_1149_fu_1254_p3 = ((or_ln117_1074_fu_1234_p2[0:0] == 1'b1) ? select_ln117_1148_fu_1240_p3 : 5'd28);

assign select_ln117_1150_fu_1268_p3 = ((or_ln117_1075_fu_1248_p2[0:0] == 1'b1) ? select_ln117_1149_fu_1254_p3 : 5'd29);

assign select_ln117_1151_fu_1282_p3 = ((or_ln117_1076_fu_1262_p2[0:0] == 1'b1) ? select_ln117_1150_fu_1268_p3 : 5'd30);

assign select_ln117_fu_752_p3 = ((and_ln102_1123_fu_640_p2[0:0] == 1'b1) ? zext_ln117_fu_748_p1 : 2'd3);

assign tmp_fu_480_p4 = {{x_38_val[17:2]}};

assign xor_ln104_556_fu_592_p2 = (icmp_ln86_1162_fu_402_p2 ^ 1'd1);

assign xor_ln104_557_fu_946_p2 = (icmp_ln86_1163_reg_1443 ^ 1'd1);

assign xor_ln104_558_fu_610_p2 = (icmp_ln86_1164_fu_414_p2 ^ 1'd1);

assign xor_ln104_559_fu_628_p2 = (icmp_ln86_1165_fu_420_p2 ^ 1'd1);

assign xor_ln104_560_fu_962_p2 = (icmp_ln86_1166_reg_1449 ^ 1'd1);

assign xor_ln104_561_fu_978_p2 = (icmp_ln86_1167_reg_1455 ^ 1'd1);

assign xor_ln104_562_fu_652_p2 = (icmp_ln86_1169_fu_444_p2 ^ 1'd1);

assign xor_ln104_563_fu_664_p2 = (icmp_ln86_1170_fu_450_p2 ^ 1'd1);

assign xor_ln104_564_fu_676_p2 = (icmp_ln86_1171_fu_456_p2 ^ 1'd1);

assign xor_ln104_565_fu_994_p2 = (icmp_ln86_1172_reg_1461 ^ 1'd1);

assign xor_ln104_566_fu_1004_p2 = (icmp_ln86_1173_reg_1467 ^ 1'd1);

assign xor_ln104_567_fu_1014_p2 = (icmp_ln86_1174_reg_1473 ^ 1'd1);

assign xor_ln104_568_fu_1024_p2 = (icmp_ln86_1387_reg_1479 ^ 1'd1);

assign xor_ln104_fu_936_p2 = (icmp_ln86_reg_1434 ^ 1'd1);

assign xor_ln117_fu_742_p2 = (1'd1 ^ and_ln102_1131_fu_682_p2);

assign zext_ln117_129_fu_760_p1 = select_ln117_fu_752_p3;

assign zext_ln117_130_fu_814_p1 = select_ln117_1128_fu_806_p3;

assign zext_ln117_131_fu_924_p1 = select_ln117_1136_fu_916_p3;

assign zext_ln117_fu_748_p1 = xor_ln117_fu_742_p2;

endmodule //my_prj_decision_function_44
