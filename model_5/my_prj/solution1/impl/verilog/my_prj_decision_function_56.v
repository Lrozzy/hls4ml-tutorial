// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_56 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_3_val,
        x_4_val,
        x_6_val,
        x_7_val,
        x_9_val,
        x_11_val,
        x_12_val,
        x_18_val,
        x_21_val,
        x_22_val,
        x_24_val,
        x_26_val,
        x_27_val,
        x_33_val,
        x_35_val,
        x_36_val,
        x_47_val,
        x_48_val,
        x_49_val,
        x_50_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_3_val;
input  [17:0] x_4_val;
input  [17:0] x_6_val;
input  [17:0] x_7_val;
input  [17:0] x_9_val;
input  [17:0] x_11_val;
input  [17:0] x_12_val;
input  [17:0] x_18_val;
input  [17:0] x_21_val;
input  [17:0] x_22_val;
input  [17:0] x_24_val;
input  [17:0] x_26_val;
input  [17:0] x_27_val;
input  [17:0] x_33_val;
input  [17:0] x_35_val;
input  [17:0] x_36_val;
input  [17:0] x_47_val;
input  [17:0] x_48_val;
input  [17:0] x_49_val;
input  [17:0] x_50_val;
output  [12:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_1243_fu_422_p2;
reg   [0:0] icmp_ln86_1243_reg_1437;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_1248_fu_452_p2;
reg   [0:0] icmp_ln86_1248_reg_1443;
wire   [0:0] icmp_ln86_1249_fu_458_p2;
reg   [0:0] icmp_ln86_1249_reg_1448;
wire   [0:0] icmp_ln86_1250_fu_464_p2;
reg   [0:0] icmp_ln86_1250_reg_1454;
wire   [0:0] icmp_ln86_1252_fu_476_p2;
reg   [0:0] icmp_ln86_1252_reg_1460;
wire   [0:0] icmp_ln86_1259_fu_518_p2;
reg   [0:0] icmp_ln86_1259_reg_1466;
wire   [0:0] icmp_ln86_1260_fu_524_p2;
reg   [0:0] icmp_ln86_1260_reg_1471;
wire   [0:0] icmp_ln86_1261_fu_530_p2;
reg   [0:0] icmp_ln86_1261_reg_1476;
wire   [0:0] icmp_ln86_1262_fu_536_p2;
reg   [0:0] icmp_ln86_1262_reg_1481;
wire   [0:0] icmp_ln86_1263_fu_542_p2;
reg   [0:0] icmp_ln86_1263_reg_1486;
wire   [0:0] icmp_ln86_1264_fu_548_p2;
reg   [0:0] icmp_ln86_1264_reg_1491;
wire   [0:0] icmp_ln86_1265_fu_554_p2;
reg   [0:0] icmp_ln86_1265_reg_1496;
wire   [0:0] icmp_ln86_1266_fu_560_p2;
reg   [0:0] icmp_ln86_1266_reg_1501;
wire   [0:0] and_ln102_1445_fu_590_p2;
reg   [0:0] and_ln102_1445_reg_1506;
wire   [0:0] and_ln104_225_fu_638_p2;
reg   [0:0] and_ln104_225_reg_1513;
wire   [0:0] and_ln104_227_fu_656_p2;
reg   [0:0] and_ln104_227_reg_1518;
wire   [0:0] and_ln102_1456_fu_704_p2;
reg   [0:0] and_ln102_1456_reg_1525;
wire   [0:0] or_ln117_1106_fu_960_p2;
reg   [0:0] or_ln117_1106_reg_1531;
wire   [3:0] select_ln117_1209_fu_974_p3;
reg   [3:0] select_ln117_1209_reg_1536;
wire   [0:0] or_ln117_1108_fu_982_p2;
reg   [0:0] or_ln117_1108_reg_1541;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln86_fu_392_p2;
wire   [0:0] icmp_ln86_1239_fu_398_p2;
wire   [0:0] xor_ln104_586_fu_578_p2;
wire   [0:0] icmp_ln86_1240_fu_404_p2;
wire   [0:0] xor_ln104_fu_566_p2;
wire   [0:0] xor_ln104_587_fu_596_p2;
wire   [0:0] icmp_ln86_1241_fu_410_p2;
wire   [0:0] and_ln102_fu_572_p2;
wire   [0:0] xor_ln104_588_fu_614_p2;
wire   [0:0] icmp_ln86_1242_fu_416_p2;
wire   [0:0] and_ln104_fu_584_p2;
wire   [0:0] xor_ln104_589_fu_632_p2;
wire   [0:0] icmp_ln86_1244_fu_428_p2;
wire   [0:0] and_ln104_223_fu_602_p2;
wire   [0:0] xor_ln104_591_fu_650_p2;
wire   [0:0] icmp_ln86_1245_fu_434_p2;
wire   [0:0] and_ln102_1446_fu_608_p2;
wire   [0:0] xor_ln104_592_fu_662_p2;
wire   [0:0] icmp_ln86_1246_fu_440_p2;
wire   [0:0] and_ln104_224_fu_620_p2;
wire   [0:0] icmp_ln86_1247_fu_446_p2;
wire   [0:0] and_ln102_1447_fu_626_p2;
wire   [0:0] icmp_ln86_1251_fu_470_p2;
wire   [0:0] and_ln102_1449_fu_644_p2;
wire   [0:0] xor_ln104_598_fu_710_p2;
wire   [0:0] icmp_ln86_1253_fu_482_p2;
wire   [0:0] and_ln102_1472_fu_722_p2;
wire   [0:0] icmp_ln86_1254_fu_488_p2;
wire   [0:0] and_ln102_1451_fu_674_p2;
wire   [0:0] icmp_ln86_1255_fu_494_p2;
wire   [0:0] xor_ln104_593_fu_680_p2;
wire   [0:0] and_ln102_1473_fu_740_p2;
wire   [0:0] icmp_ln86_1256_fu_500_p2;
wire   [0:0] and_ln102_1452_fu_686_p2;
wire   [0:0] icmp_ln86_1257_fu_506_p2;
wire   [0:0] xor_ln104_594_fu_692_p2;
wire   [0:0] and_ln102_1474_fu_758_p2;
wire   [0:0] icmp_ln86_1258_fu_512_p2;
wire   [0:0] and_ln102_1453_fu_698_p2;
wire   [0:0] and_ln104_228_fu_668_p2;
wire   [0:0] and_ln104_229_fu_716_p2;
wire   [0:0] xor_ln117_fu_782_p2;
wire   [0:0] or_ln117_1094_fu_788_p2;
wire   [0:0] or_ln117_fu_776_p2;
wire   [0:0] and_ln102_1458_fu_728_p2;
wire   [1:0] zext_ln117_fu_794_p1;
wire   [0:0] or_ln117_1095_fu_798_p2;
wire   [1:0] select_ln117_fu_804_p3;
wire   [1:0] select_ln117_1198_fu_818_p3;
wire   [0:0] or_ln117_1096_fu_812_p2;
wire   [0:0] and_ln102_1459_fu_734_p2;
wire   [2:0] zext_ln117_130_fu_826_p1;
wire   [0:0] or_ln117_1097_fu_830_p2;
wire   [2:0] select_ln117_1199_fu_836_p3;
wire   [0:0] or_ln117_1098_fu_844_p2;
wire   [0:0] and_ln102_1460_fu_746_p2;
wire   [2:0] select_ln117_1200_fu_850_p3;
wire   [0:0] or_ln117_1099_fu_858_p2;
wire   [2:0] select_ln117_1201_fu_864_p3;
wire   [2:0] select_ln117_1202_fu_878_p3;
wire   [0:0] or_ln117_1100_fu_872_p2;
wire   [0:0] and_ln102_1461_fu_752_p2;
wire   [3:0] zext_ln117_131_fu_886_p1;
wire   [0:0] or_ln117_1101_fu_890_p2;
wire   [3:0] select_ln117_1203_fu_896_p3;
wire   [0:0] or_ln117_1102_fu_904_p2;
wire   [0:0] and_ln102_1462_fu_764_p2;
wire   [3:0] select_ln117_1204_fu_910_p3;
wire   [0:0] or_ln117_1103_fu_918_p2;
wire   [3:0] select_ln117_1205_fu_924_p3;
wire   [0:0] or_ln117_1104_fu_932_p2;
wire   [0:0] and_ln102_1463_fu_770_p2;
wire   [3:0] select_ln117_1206_fu_938_p3;
wire   [0:0] or_ln117_1105_fu_946_p2;
wire   [3:0] select_ln117_1207_fu_952_p3;
wire   [3:0] select_ln117_1208_fu_966_p3;
wire   [0:0] xor_ln104_590_fu_992_p2;
wire   [0:0] and_ln102_1448_fu_988_p2;
wire   [0:0] and_ln104_226_fu_997_p2;
wire   [0:0] xor_ln104_595_fu_1002_p2;
wire   [0:0] and_ln102_1475_fu_1036_p2;
wire   [0:0] and_ln102_1454_fu_1007_p2;
wire   [0:0] xor_ln104_596_fu_1012_p2;
wire   [0:0] and_ln102_1476_fu_1051_p2;
wire   [0:0] and_ln102_1455_fu_1017_p2;
wire   [0:0] xor_ln104_597_fu_1022_p2;
wire   [0:0] and_ln102_1477_fu_1067_p2;
wire   [0:0] and_ln102_1457_fu_1027_p2;
wire   [0:0] xor_ln104_599_fu_1031_p2;
wire   [0:0] and_ln102_1478_fu_1087_p2;
wire   [0:0] and_ln102_1464_fu_1041_p2;
wire   [0:0] or_ln117_1107_fu_1097_p2;
wire   [3:0] select_ln117_1210_fu_1102_p3;
wire   [0:0] and_ln102_1465_fu_1046_p2;
wire   [4:0] zext_ln117_132_fu_1109_p1;
wire   [0:0] or_ln117_1109_fu_1113_p2;
wire   [4:0] select_ln117_1211_fu_1118_p3;
wire   [0:0] or_ln117_1110_fu_1125_p2;
wire   [0:0] and_ln102_1466_fu_1056_p2;
wire   [4:0] select_ln117_1212_fu_1130_p3;
wire   [0:0] or_ln117_1111_fu_1138_p2;
wire   [4:0] select_ln117_1213_fu_1144_p3;
wire   [0:0] or_ln117_1112_fu_1152_p2;
wire   [0:0] and_ln102_1467_fu_1062_p2;
wire   [4:0] select_ln117_1214_fu_1157_p3;
wire   [0:0] or_ln117_1113_fu_1165_p2;
wire   [4:0] select_ln117_1215_fu_1171_p3;
wire   [0:0] or_ln117_1114_fu_1179_p2;
wire   [0:0] and_ln102_1468_fu_1072_p2;
wire   [4:0] select_ln117_1216_fu_1185_p3;
wire   [0:0] or_ln117_1115_fu_1193_p2;
wire   [4:0] select_ln117_1217_fu_1199_p3;
wire   [0:0] or_ln117_1116_fu_1207_p2;
wire   [0:0] and_ln102_1469_fu_1078_p2;
wire   [4:0] select_ln117_1218_fu_1211_p3;
wire   [0:0] or_ln117_1117_fu_1219_p2;
wire   [4:0] select_ln117_1219_fu_1225_p3;
wire   [0:0] or_ln117_1118_fu_1233_p2;
wire   [0:0] and_ln102_1470_fu_1082_p2;
wire   [4:0] select_ln117_1220_fu_1238_p3;
wire   [0:0] or_ln117_1119_fu_1246_p2;
wire   [4:0] select_ln117_1221_fu_1252_p3;
wire   [0:0] or_ln117_1120_fu_1260_p2;
wire   [0:0] and_ln102_1471_fu_1092_p2;
wire   [4:0] select_ln117_1222_fu_1266_p3;
wire   [0:0] or_ln117_1121_fu_1274_p2;
wire   [4:0] select_ln117_1223_fu_1280_p3;
wire   [12:0] tmp_fu_1301_p61;
wire   [4:0] tmp_fu_1301_p62;
wire   [0:0] or_ln117_1122_fu_1288_p2;
wire   [12:0] tmp_fu_1301_p63;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] tmp_fu_1301_p1;
wire   [4:0] tmp_fu_1301_p3;
wire   [4:0] tmp_fu_1301_p5;
wire   [4:0] tmp_fu_1301_p7;
wire   [4:0] tmp_fu_1301_p9;
wire   [4:0] tmp_fu_1301_p11;
wire   [4:0] tmp_fu_1301_p13;
wire   [4:0] tmp_fu_1301_p15;
wire   [4:0] tmp_fu_1301_p17;
wire   [4:0] tmp_fu_1301_p19;
wire   [4:0] tmp_fu_1301_p21;
wire   [4:0] tmp_fu_1301_p23;
wire   [4:0] tmp_fu_1301_p25;
wire   [4:0] tmp_fu_1301_p27;
wire   [4:0] tmp_fu_1301_p29;
wire   [4:0] tmp_fu_1301_p31;
wire  signed [4:0] tmp_fu_1301_p33;
wire  signed [4:0] tmp_fu_1301_p35;
wire  signed [4:0] tmp_fu_1301_p37;
wire  signed [4:0] tmp_fu_1301_p39;
wire  signed [4:0] tmp_fu_1301_p41;
wire  signed [4:0] tmp_fu_1301_p43;
wire  signed [4:0] tmp_fu_1301_p45;
wire  signed [4:0] tmp_fu_1301_p47;
wire  signed [4:0] tmp_fu_1301_p49;
wire  signed [4:0] tmp_fu_1301_p51;
wire  signed [4:0] tmp_fu_1301_p53;
wire  signed [4:0] tmp_fu_1301_p55;
wire  signed [4:0] tmp_fu_1301_p57;
wire  signed [4:0] tmp_fu_1301_p59;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_61_5_13_1_1_x0 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 13 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 13 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 13 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 13 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 13 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 13 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 13 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 13 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 13 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 13 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 13 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 13 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 13 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 13 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 13 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 13 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 13 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 13 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 13 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 13 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 13 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 13 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 13 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 13 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 13 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 13 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 13 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 13 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 13 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 13 ),
    .def_WIDTH( 13 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 13 ))
sparsemux_61_5_13_1_1_x0_U998(
    .din0(13'd7758),
    .din1(13'd6689),
    .din2(13'd8076),
    .din3(13'd642),
    .din4(13'd8183),
    .din5(13'd1151),
    .din6(13'd150),
    .din7(13'd2484),
    .din8(13'd7999),
    .din9(13'd192),
    .din10(13'd869),
    .din11(13'd127),
    .din12(13'd7930),
    .din13(13'd275),
    .din14(13'd7448),
    .din15(13'd8143),
    .din16(13'd29),
    .din17(13'd8110),
    .din18(13'd7948),
    .din19(13'd97),
    .din20(13'd237),
    .din21(13'd7750),
    .din22(13'd351),
    .din23(13'd8150),
    .din24(13'd10),
    .din25(13'd7819),
    .din26(13'd8165),
    .din27(13'd7915),
    .din28(13'd7550),
    .din29(13'd7982),
    .def(tmp_fu_1301_p61),
    .sel(tmp_fu_1301_p62),
    .dout(tmp_fu_1301_p63)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln102_1445_reg_1506 <= and_ln102_1445_fu_590_p2;
        and_ln102_1456_reg_1525 <= and_ln102_1456_fu_704_p2;
        and_ln104_225_reg_1513 <= and_ln104_225_fu_638_p2;
        and_ln104_227_reg_1518 <= and_ln104_227_fu_656_p2;
        icmp_ln86_1243_reg_1437 <= icmp_ln86_1243_fu_422_p2;
        icmp_ln86_1248_reg_1443 <= icmp_ln86_1248_fu_452_p2;
        icmp_ln86_1249_reg_1448 <= icmp_ln86_1249_fu_458_p2;
        icmp_ln86_1250_reg_1454 <= icmp_ln86_1250_fu_464_p2;
        icmp_ln86_1252_reg_1460 <= icmp_ln86_1252_fu_476_p2;
        icmp_ln86_1259_reg_1466 <= icmp_ln86_1259_fu_518_p2;
        icmp_ln86_1260_reg_1471 <= icmp_ln86_1260_fu_524_p2;
        icmp_ln86_1261_reg_1476 <= icmp_ln86_1261_fu_530_p2;
        icmp_ln86_1262_reg_1481 <= icmp_ln86_1262_fu_536_p2;
        icmp_ln86_1263_reg_1486 <= icmp_ln86_1263_fu_542_p2;
        icmp_ln86_1264_reg_1491 <= icmp_ln86_1264_fu_548_p2;
        icmp_ln86_1265_reg_1496 <= icmp_ln86_1265_fu_554_p2;
        icmp_ln86_1266_reg_1501 <= icmp_ln86_1266_fu_560_p2;
        or_ln117_1106_reg_1531 <= or_ln117_1106_fu_960_p2;
        or_ln117_1108_reg_1541 <= or_ln117_1108_fu_982_p2;
        select_ln117_1209_reg_1536 <= select_ln117_1209_fu_974_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln102_1445_fu_590_p2 = (xor_ln104_fu_566_p2 & icmp_ln86_1240_fu_404_p2);

assign and_ln102_1446_fu_608_p2 = (icmp_ln86_1241_fu_410_p2 & and_ln102_fu_572_p2);

assign and_ln102_1447_fu_626_p2 = (icmp_ln86_1242_fu_416_p2 & and_ln104_fu_584_p2);

assign and_ln102_1448_fu_988_p2 = (icmp_ln86_1243_reg_1437 & and_ln102_1445_reg_1506);

assign and_ln102_1449_fu_644_p2 = (icmp_ln86_1244_fu_428_p2 & and_ln104_223_fu_602_p2);

assign and_ln102_1451_fu_674_p2 = (icmp_ln86_1246_fu_440_p2 & and_ln104_224_fu_620_p2);

assign and_ln102_1452_fu_686_p2 = (icmp_ln86_1247_fu_446_p2 & and_ln102_1447_fu_626_p2);

assign and_ln102_1453_fu_698_p2 = (icmp_ln86_1248_fu_452_p2 & and_ln104_225_fu_638_p2);

assign and_ln102_1454_fu_1007_p2 = (icmp_ln86_1249_reg_1448 & and_ln102_1448_fu_988_p2);

assign and_ln102_1455_fu_1017_p2 = (icmp_ln86_1250_reg_1454 & and_ln104_226_fu_997_p2);

assign and_ln102_1456_fu_704_p2 = (icmp_ln86_1251_fu_470_p2 & and_ln102_1449_fu_644_p2);

assign and_ln102_1457_fu_1027_p2 = (icmp_ln86_1252_reg_1460 & and_ln104_227_reg_1518);

assign and_ln102_1458_fu_728_p2 = (icmp_ln86_1245_fu_434_p2 & and_ln102_1472_fu_722_p2);

assign and_ln102_1459_fu_734_p2 = (icmp_ln86_1254_fu_488_p2 & and_ln102_1451_fu_674_p2);

assign and_ln102_1460_fu_746_p2 = (and_ln104_224_fu_620_p2 & and_ln102_1473_fu_740_p2);

assign and_ln102_1461_fu_752_p2 = (icmp_ln86_1256_fu_500_p2 & and_ln102_1452_fu_686_p2);

assign and_ln102_1462_fu_764_p2 = (and_ln102_1474_fu_758_p2 & and_ln102_1447_fu_626_p2);

assign and_ln102_1463_fu_770_p2 = (icmp_ln86_1258_fu_512_p2 & and_ln102_1453_fu_698_p2);

assign and_ln102_1464_fu_1041_p2 = (and_ln104_225_reg_1513 & and_ln102_1475_fu_1036_p2);

assign and_ln102_1465_fu_1046_p2 = (icmp_ln86_1260_reg_1471 & and_ln102_1454_fu_1007_p2);

assign and_ln102_1466_fu_1056_p2 = (and_ln102_1476_fu_1051_p2 & and_ln102_1448_fu_988_p2);

assign and_ln102_1467_fu_1062_p2 = (icmp_ln86_1262_reg_1481 & and_ln102_1455_fu_1017_p2);

assign and_ln102_1468_fu_1072_p2 = (and_ln104_226_fu_997_p2 & and_ln102_1477_fu_1067_p2);

assign and_ln102_1469_fu_1078_p2 = (icmp_ln86_1264_reg_1491 & and_ln102_1456_reg_1525);

assign and_ln102_1470_fu_1082_p2 = (icmp_ln86_1265_reg_1496 & and_ln102_1457_fu_1027_p2);

assign and_ln102_1471_fu_1092_p2 = (and_ln104_227_reg_1518 & and_ln102_1478_fu_1087_p2);

assign and_ln102_1472_fu_722_p2 = (icmp_ln86_1253_fu_482_p2 & and_ln102_1446_fu_608_p2);

assign and_ln102_1473_fu_740_p2 = (xor_ln104_593_fu_680_p2 & icmp_ln86_1255_fu_494_p2);

assign and_ln102_1474_fu_758_p2 = (xor_ln104_594_fu_692_p2 & icmp_ln86_1257_fu_506_p2);

assign and_ln102_1475_fu_1036_p2 = (xor_ln104_595_fu_1002_p2 & icmp_ln86_1259_reg_1466);

assign and_ln102_1476_fu_1051_p2 = (xor_ln104_596_fu_1012_p2 & icmp_ln86_1261_reg_1476);

assign and_ln102_1477_fu_1067_p2 = (xor_ln104_597_fu_1022_p2 & icmp_ln86_1263_reg_1486);

assign and_ln102_1478_fu_1087_p2 = (xor_ln104_599_fu_1031_p2 & icmp_ln86_1266_reg_1501);

assign and_ln102_fu_572_p2 = (icmp_ln86_fu_392_p2 & icmp_ln86_1239_fu_398_p2);

assign and_ln104_223_fu_602_p2 = (xor_ln104_fu_566_p2 & xor_ln104_587_fu_596_p2);

assign and_ln104_224_fu_620_p2 = (xor_ln104_588_fu_614_p2 & and_ln102_fu_572_p2);

assign and_ln104_225_fu_638_p2 = (xor_ln104_589_fu_632_p2 & and_ln104_fu_584_p2);

assign and_ln104_226_fu_997_p2 = (xor_ln104_590_fu_992_p2 & and_ln102_1445_reg_1506);

assign and_ln104_227_fu_656_p2 = (xor_ln104_591_fu_650_p2 & and_ln104_223_fu_602_p2);

assign and_ln104_228_fu_668_p2 = (xor_ln104_592_fu_662_p2 & and_ln102_1446_fu_608_p2);

assign and_ln104_229_fu_716_p2 = (xor_ln104_598_fu_710_p2 & and_ln102_1449_fu_644_p2);

assign and_ln104_fu_584_p2 = (xor_ln104_586_fu_578_p2 & icmp_ln86_fu_392_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((or_ln117_1122_fu_1288_p2[0:0] == 1'b1) ? tmp_fu_1301_p63 : 13'd0);

assign icmp_ln86_1239_fu_398_p2 = (($signed(x_26_val) < $signed(18'd1962)) ? 1'b1 : 1'b0);

assign icmp_ln86_1240_fu_404_p2 = (($signed(x_3_val) < $signed(18'd94071)) ? 1'b1 : 1'b0);

assign icmp_ln86_1241_fu_410_p2 = (($signed(x_22_val) < $signed(18'd36)) ? 1'b1 : 1'b0);

assign icmp_ln86_1242_fu_416_p2 = (($signed(x_9_val) < $signed(18'd1034)) ? 1'b1 : 1'b0);

assign icmp_ln86_1243_fu_422_p2 = (($signed(x_47_val) < $signed(18'd92453)) ? 1'b1 : 1'b0);

assign icmp_ln86_1244_fu_428_p2 = (($signed(x_50_val) < $signed(18'd89187)) ? 1'b1 : 1'b0);

assign icmp_ln86_1245_fu_434_p2 = (($signed(x_24_val) < $signed(18'd334)) ? 1'b1 : 1'b0);

assign icmp_ln86_1246_fu_440_p2 = (($signed(x_12_val) < $signed(18'd260169)) ? 1'b1 : 1'b0);

assign icmp_ln86_1247_fu_446_p2 = (($signed(x_35_val) < $signed(18'd49)) ? 1'b1 : 1'b0);

assign icmp_ln86_1248_fu_452_p2 = (($signed(x_33_val) < $signed(18'd754)) ? 1'b1 : 1'b0);

assign icmp_ln86_1249_fu_458_p2 = (($signed(x_1_val) < $signed(18'd135003)) ? 1'b1 : 1'b0);

assign icmp_ln86_1250_fu_464_p2 = (($signed(x_4_val) < $signed(18'd43149)) ? 1'b1 : 1'b0);

assign icmp_ln86_1251_fu_470_p2 = (($signed(x_48_val) < $signed(18'd89129)) ? 1'b1 : 1'b0);

assign icmp_ln86_1252_fu_476_p2 = (($signed(x_18_val) < $signed(18'd4011)) ? 1'b1 : 1'b0);

assign icmp_ln86_1253_fu_482_p2 = (($signed(x_21_val) < $signed(18'd97)) ? 1'b1 : 1'b0);

assign icmp_ln86_1254_fu_488_p2 = (($signed(x_36_val) < $signed(18'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_1255_fu_494_p2 = (($signed(x_4_val) < $signed(18'd5648)) ? 1'b1 : 1'b0);

assign icmp_ln86_1256_fu_500_p2 = (($signed(x_6_val) < $signed(18'd6794)) ? 1'b1 : 1'b0);

assign icmp_ln86_1257_fu_506_p2 = (($signed(x_49_val) < $signed(18'd96677)) ? 1'b1 : 1'b0);

assign icmp_ln86_1258_fu_512_p2 = (($signed(x_33_val) < $signed(18'd216)) ? 1'b1 : 1'b0);

assign icmp_ln86_1259_fu_518_p2 = (($signed(x_27_val) < $signed(18'd13650)) ? 1'b1 : 1'b0);

assign icmp_ln86_1260_fu_524_p2 = (($signed(x_3_val) < $signed(18'd89251)) ? 1'b1 : 1'b0);

assign icmp_ln86_1261_fu_530_p2 = (($signed(x_7_val) < $signed(18'd5336)) ? 1'b1 : 1'b0);

assign icmp_ln86_1262_fu_536_p2 = (($signed(x_9_val) < $signed(18'd837)) ? 1'b1 : 1'b0);

assign icmp_ln86_1263_fu_542_p2 = (($signed(x_33_val) < $signed(18'd851)) ? 1'b1 : 1'b0);

assign icmp_ln86_1264_fu_548_p2 = (($signed(x_9_val) < $signed(18'd813)) ? 1'b1 : 1'b0);

assign icmp_ln86_1265_fu_554_p2 = (($signed(x_36_val) < $signed(18'd14)) ? 1'b1 : 1'b0);

assign icmp_ln86_1266_fu_560_p2 = (($signed(x_50_val) < $signed(18'd97032)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_392_p2 = (($signed(x_11_val) < $signed(18'd255)) ? 1'b1 : 1'b0);

assign or_ln117_1094_fu_788_p2 = (xor_ln117_fu_782_p2 | icmp_ln86_1245_fu_434_p2);

assign or_ln117_1095_fu_798_p2 = (or_ln117_fu_776_p2 | and_ln102_1458_fu_728_p2);

assign or_ln117_1096_fu_812_p2 = (and_ln104_229_fu_716_p2 | and_ln102_1446_fu_608_p2);

assign or_ln117_1097_fu_830_p2 = (or_ln117_1096_fu_812_p2 | and_ln102_1459_fu_734_p2);

assign or_ln117_1098_fu_844_p2 = (or_ln117_1096_fu_812_p2 | and_ln102_1451_fu_674_p2);

assign or_ln117_1099_fu_858_p2 = (or_ln117_1098_fu_844_p2 | and_ln102_1460_fu_746_p2);

assign or_ln117_1100_fu_872_p2 = (and_ln104_229_fu_716_p2 | and_ln102_fu_572_p2);

assign or_ln117_1101_fu_890_p2 = (or_ln117_1100_fu_872_p2 | and_ln102_1461_fu_752_p2);

assign or_ln117_1102_fu_904_p2 = (or_ln117_1100_fu_872_p2 | and_ln102_1452_fu_686_p2);

assign or_ln117_1103_fu_918_p2 = (or_ln117_1102_fu_904_p2 | and_ln102_1462_fu_764_p2);

assign or_ln117_1104_fu_932_p2 = (or_ln117_1100_fu_872_p2 | and_ln102_1447_fu_626_p2);

assign or_ln117_1105_fu_946_p2 = (or_ln117_1104_fu_932_p2 | and_ln102_1463_fu_770_p2);

assign or_ln117_1106_fu_960_p2 = (or_ln117_1104_fu_932_p2 | and_ln102_1453_fu_698_p2);

assign or_ln117_1107_fu_1097_p2 = (or_ln117_1106_reg_1531 | and_ln102_1464_fu_1041_p2);

assign or_ln117_1108_fu_982_p2 = (icmp_ln86_fu_392_p2 | and_ln104_229_fu_716_p2);

assign or_ln117_1109_fu_1113_p2 = (or_ln117_1108_reg_1541 | and_ln102_1465_fu_1046_p2);

assign or_ln117_1110_fu_1125_p2 = (or_ln117_1108_reg_1541 | and_ln102_1454_fu_1007_p2);

assign or_ln117_1111_fu_1138_p2 = (or_ln117_1110_fu_1125_p2 | and_ln102_1466_fu_1056_p2);

assign or_ln117_1112_fu_1152_p2 = (or_ln117_1108_reg_1541 | and_ln102_1448_fu_988_p2);

assign or_ln117_1113_fu_1165_p2 = (or_ln117_1112_fu_1152_p2 | and_ln102_1467_fu_1062_p2);

assign or_ln117_1114_fu_1179_p2 = (or_ln117_1112_fu_1152_p2 | and_ln102_1455_fu_1017_p2);

assign or_ln117_1115_fu_1193_p2 = (or_ln117_1114_fu_1179_p2 | and_ln102_1468_fu_1072_p2);

assign or_ln117_1116_fu_1207_p2 = (or_ln117_1108_reg_1541 | and_ln102_1445_reg_1506);

assign or_ln117_1117_fu_1219_p2 = (or_ln117_1116_fu_1207_p2 | and_ln102_1469_fu_1078_p2);

assign or_ln117_1118_fu_1233_p2 = (or_ln117_1116_fu_1207_p2 | and_ln102_1456_reg_1525);

assign or_ln117_1119_fu_1246_p2 = (or_ln117_1118_fu_1233_p2 | and_ln102_1470_fu_1082_p2);

assign or_ln117_1120_fu_1260_p2 = (or_ln117_1118_fu_1233_p2 | and_ln102_1457_fu_1027_p2);

assign or_ln117_1121_fu_1274_p2 = (or_ln117_1120_fu_1260_p2 | and_ln102_1471_fu_1092_p2);

assign or_ln117_1122_fu_1288_p2 = (or_ln117_1118_fu_1233_p2 | and_ln104_227_reg_1518);

assign or_ln117_fu_776_p2 = (and_ln104_229_fu_716_p2 | and_ln104_228_fu_668_p2);

assign select_ln117_1198_fu_818_p3 = ((or_ln117_1095_fu_798_p2[0:0] == 1'b1) ? select_ln117_fu_804_p3 : 2'd3);

assign select_ln117_1199_fu_836_p3 = ((or_ln117_1096_fu_812_p2[0:0] == 1'b1) ? zext_ln117_130_fu_826_p1 : 3'd4);

assign select_ln117_1200_fu_850_p3 = ((or_ln117_1097_fu_830_p2[0:0] == 1'b1) ? select_ln117_1199_fu_836_p3 : 3'd5);

assign select_ln117_1201_fu_864_p3 = ((or_ln117_1098_fu_844_p2[0:0] == 1'b1) ? select_ln117_1200_fu_850_p3 : 3'd6);

assign select_ln117_1202_fu_878_p3 = ((or_ln117_1099_fu_858_p2[0:0] == 1'b1) ? select_ln117_1201_fu_864_p3 : 3'd7);

assign select_ln117_1203_fu_896_p3 = ((or_ln117_1100_fu_872_p2[0:0] == 1'b1) ? zext_ln117_131_fu_886_p1 : 4'd8);

assign select_ln117_1204_fu_910_p3 = ((or_ln117_1101_fu_890_p2[0:0] == 1'b1) ? select_ln117_1203_fu_896_p3 : 4'd9);

assign select_ln117_1205_fu_924_p3 = ((or_ln117_1102_fu_904_p2[0:0] == 1'b1) ? select_ln117_1204_fu_910_p3 : 4'd10);

assign select_ln117_1206_fu_938_p3 = ((or_ln117_1103_fu_918_p2[0:0] == 1'b1) ? select_ln117_1205_fu_924_p3 : 4'd11);

assign select_ln117_1207_fu_952_p3 = ((or_ln117_1104_fu_932_p2[0:0] == 1'b1) ? select_ln117_1206_fu_938_p3 : 4'd12);

assign select_ln117_1208_fu_966_p3 = ((or_ln117_1105_fu_946_p2[0:0] == 1'b1) ? select_ln117_1207_fu_952_p3 : 4'd13);

assign select_ln117_1209_fu_974_p3 = ((or_ln117_1106_fu_960_p2[0:0] == 1'b1) ? select_ln117_1208_fu_966_p3 : 4'd14);

assign select_ln117_1210_fu_1102_p3 = ((or_ln117_1107_fu_1097_p2[0:0] == 1'b1) ? select_ln117_1209_reg_1536 : 4'd15);

assign select_ln117_1211_fu_1118_p3 = ((or_ln117_1108_reg_1541[0:0] == 1'b1) ? zext_ln117_132_fu_1109_p1 : 5'd16);

assign select_ln117_1212_fu_1130_p3 = ((or_ln117_1109_fu_1113_p2[0:0] == 1'b1) ? select_ln117_1211_fu_1118_p3 : 5'd17);

assign select_ln117_1213_fu_1144_p3 = ((or_ln117_1110_fu_1125_p2[0:0] == 1'b1) ? select_ln117_1212_fu_1130_p3 : 5'd18);

assign select_ln117_1214_fu_1157_p3 = ((or_ln117_1111_fu_1138_p2[0:0] == 1'b1) ? select_ln117_1213_fu_1144_p3 : 5'd19);

assign select_ln117_1215_fu_1171_p3 = ((or_ln117_1112_fu_1152_p2[0:0] == 1'b1) ? select_ln117_1214_fu_1157_p3 : 5'd20);

assign select_ln117_1216_fu_1185_p3 = ((or_ln117_1113_fu_1165_p2[0:0] == 1'b1) ? select_ln117_1215_fu_1171_p3 : 5'd21);

assign select_ln117_1217_fu_1199_p3 = ((or_ln117_1114_fu_1179_p2[0:0] == 1'b1) ? select_ln117_1216_fu_1185_p3 : 5'd22);

assign select_ln117_1218_fu_1211_p3 = ((or_ln117_1115_fu_1193_p2[0:0] == 1'b1) ? select_ln117_1217_fu_1199_p3 : 5'd23);

assign select_ln117_1219_fu_1225_p3 = ((or_ln117_1116_fu_1207_p2[0:0] == 1'b1) ? select_ln117_1218_fu_1211_p3 : 5'd24);

assign select_ln117_1220_fu_1238_p3 = ((or_ln117_1117_fu_1219_p2[0:0] == 1'b1) ? select_ln117_1219_fu_1225_p3 : 5'd25);

assign select_ln117_1221_fu_1252_p3 = ((or_ln117_1118_fu_1233_p2[0:0] == 1'b1) ? select_ln117_1220_fu_1238_p3 : 5'd26);

assign select_ln117_1222_fu_1266_p3 = ((or_ln117_1119_fu_1246_p2[0:0] == 1'b1) ? select_ln117_1221_fu_1252_p3 : 5'd27);

assign select_ln117_1223_fu_1280_p3 = ((or_ln117_1120_fu_1260_p2[0:0] == 1'b1) ? select_ln117_1222_fu_1266_p3 : 5'd28);

assign select_ln117_fu_804_p3 = ((or_ln117_fu_776_p2[0:0] == 1'b1) ? zext_ln117_fu_794_p1 : 2'd2);

assign tmp_fu_1301_p61 = 'bx;

assign tmp_fu_1301_p62 = ((or_ln117_1121_fu_1274_p2[0:0] == 1'b1) ? select_ln117_1223_fu_1280_p3 : 5'd29);

assign xor_ln104_586_fu_578_p2 = (icmp_ln86_1239_fu_398_p2 ^ 1'd1);

assign xor_ln104_587_fu_596_p2 = (icmp_ln86_1240_fu_404_p2 ^ 1'd1);

assign xor_ln104_588_fu_614_p2 = (icmp_ln86_1241_fu_410_p2 ^ 1'd1);

assign xor_ln104_589_fu_632_p2 = (icmp_ln86_1242_fu_416_p2 ^ 1'd1);

assign xor_ln104_590_fu_992_p2 = (icmp_ln86_1243_reg_1437 ^ 1'd1);

assign xor_ln104_591_fu_650_p2 = (icmp_ln86_1244_fu_428_p2 ^ 1'd1);

assign xor_ln104_592_fu_662_p2 = (icmp_ln86_1245_fu_434_p2 ^ 1'd1);

assign xor_ln104_593_fu_680_p2 = (icmp_ln86_1246_fu_440_p2 ^ 1'd1);

assign xor_ln104_594_fu_692_p2 = (icmp_ln86_1247_fu_446_p2 ^ 1'd1);

assign xor_ln104_595_fu_1002_p2 = (icmp_ln86_1248_reg_1443 ^ 1'd1);

assign xor_ln104_596_fu_1012_p2 = (icmp_ln86_1249_reg_1448 ^ 1'd1);

assign xor_ln104_597_fu_1022_p2 = (icmp_ln86_1250_reg_1454 ^ 1'd1);

assign xor_ln104_598_fu_710_p2 = (icmp_ln86_1251_fu_470_p2 ^ 1'd1);

assign xor_ln104_599_fu_1031_p2 = (icmp_ln86_1252_reg_1460 ^ 1'd1);

assign xor_ln104_fu_566_p2 = (icmp_ln86_fu_392_p2 ^ 1'd1);

assign xor_ln117_fu_782_p2 = (1'd1 ^ and_ln102_1446_fu_608_p2);

assign zext_ln117_130_fu_826_p1 = select_ln117_1198_fu_818_p3;

assign zext_ln117_131_fu_886_p1 = select_ln117_1202_fu_878_p3;

assign zext_ln117_132_fu_1109_p1 = select_ln117_1210_fu_1102_p3;

assign zext_ln117_fu_794_p1 = or_ln117_1094_fu_788_p2;

endmodule //my_prj_decision_function_56
