// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_55 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_5_val,
        x_9_val,
        x_14_val,
        x_15_val,
        x_17_val,
        x_18_val,
        x_19_val,
        x_21_val,
        x_23_val,
        x_27_val,
        x_31_val,
        x_32_val,
        x_33_val,
        x_34_val,
        x_39_val,
        x_40_val,
        x_43_val,
        x_44_val,
        x_45_val,
        x_48_val,
        x_49_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_5_val;
input  [17:0] x_9_val;
input  [17:0] x_14_val;
input  [17:0] x_15_val;
input  [17:0] x_17_val;
input  [17:0] x_18_val;
input  [17:0] x_19_val;
input  [17:0] x_21_val;
input  [17:0] x_23_val;
input  [17:0] x_27_val;
input  [17:0] x_31_val;
input  [17:0] x_32_val;
input  [17:0] x_33_val;
input  [17:0] x_34_val;
input  [17:0] x_39_val;
input  [17:0] x_40_val;
input  [17:0] x_43_val;
input  [17:0] x_44_val;
input  [17:0] x_45_val;
input  [17:0] x_48_val;
input  [17:0] x_49_val;
input  [17:0] x_52_val;
output  [12:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_428_p2;
reg   [0:0] icmp_ln86_reg_1514;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_1268_fu_440_p2;
reg   [0:0] icmp_ln86_1268_reg_1523;
wire   [0:0] icmp_ln86_1271_fu_458_p2;
reg   [0:0] icmp_ln86_1271_reg_1529;
wire   [0:0] icmp_ln86_1272_fu_464_p2;
reg   [0:0] icmp_ln86_1272_reg_1535;
wire   [0:0] icmp_ln86_1277_fu_494_p2;
reg   [0:0] icmp_ln86_1277_reg_1541;
wire   [0:0] icmp_ln86_1278_fu_500_p2;
reg   [0:0] icmp_ln86_1278_reg_1547;
wire   [0:0] icmp_ln86_1279_fu_506_p2;
reg   [0:0] icmp_ln86_1279_reg_1553;
wire   [0:0] icmp_ln86_1280_fu_512_p2;
reg   [0:0] icmp_ln86_1280_reg_1559;
wire   [0:0] icmp_ln86_1289_fu_576_p2;
reg   [0:0] icmp_ln86_1289_reg_1565;
wire   [0:0] icmp_ln86_1290_fu_582_p2;
reg   [0:0] icmp_ln86_1290_reg_1570;
wire   [0:0] icmp_ln86_1291_fu_588_p2;
reg   [0:0] icmp_ln86_1291_reg_1575;
wire   [0:0] icmp_ln86_1292_fu_604_p2;
reg   [0:0] icmp_ln86_1292_reg_1580;
wire   [0:0] icmp_ln86_1293_fu_610_p2;
reg   [0:0] icmp_ln86_1293_reg_1585;
wire   [0:0] icmp_ln86_1294_fu_616_p2;
reg   [0:0] icmp_ln86_1294_reg_1590;
wire   [0:0] icmp_ln86_1295_fu_622_p2;
reg   [0:0] icmp_ln86_1295_reg_1595;
wire   [0:0] icmp_ln86_1296_fu_628_p2;
reg   [0:0] icmp_ln86_1296_reg_1600;
wire   [4:0] select_ln117_1238_fu_1008_p3;
reg   [4:0] select_ln117_1238_reg_1605;
wire    ap_block_pp0_stage0;
wire   [14:0] tmp_fu_566_p4;
wire   [13:0] tmp_18_fu_594_p4;
wire   [0:0] icmp_ln86_1267_fu_434_p2;
wire   [0:0] xor_ln104_600_fu_640_p2;
wire   [0:0] icmp_ln86_1269_fu_446_p2;
wire   [0:0] and_ln102_fu_634_p2;
wire   [0:0] xor_ln104_602_fu_658_p2;
wire   [0:0] icmp_ln86_1270_fu_452_p2;
wire   [0:0] and_ln104_fu_646_p2;
wire   [0:0] xor_ln104_603_fu_676_p2;
wire   [0:0] icmp_ln86_1273_fu_470_p2;
wire   [0:0] and_ln102_1417_fu_652_p2;
wire   [0:0] icmp_ln86_1274_fu_476_p2;
wire   [0:0] and_ln104_231_fu_664_p2;
wire   [0:0] icmp_ln86_1275_fu_482_p2;
wire   [0:0] and_ln102_1418_fu_670_p2;
wire   [0:0] icmp_ln86_1276_fu_488_p2;
wire   [0:0] and_ln104_232_fu_682_p2;
wire   [0:0] icmp_ln86_1281_fu_518_p2;
wire   [0:0] and_ln102_1421_fu_688_p2;
wire   [0:0] icmp_ln86_1282_fu_524_p2;
wire   [0:0] xor_ln104_606_fu_694_p2;
wire   [0:0] and_ln102_1445_fu_742_p2;
wire   [0:0] icmp_ln86_1283_fu_530_p2;
wire   [0:0] and_ln102_1422_fu_700_p2;
wire   [0:0] icmp_ln86_1284_fu_536_p2;
wire   [0:0] xor_ln104_607_fu_706_p2;
wire   [0:0] and_ln102_1446_fu_760_p2;
wire   [0:0] icmp_ln86_1285_fu_542_p2;
wire   [0:0] and_ln102_1423_fu_712_p2;
wire   [0:0] icmp_ln86_1286_fu_548_p2;
wire   [0:0] xor_ln104_608_fu_718_p2;
wire   [0:0] and_ln102_1447_fu_778_p2;
wire   [0:0] icmp_ln86_1287_fu_554_p2;
wire   [0:0] and_ln102_1424_fu_724_p2;
wire   [0:0] icmp_ln86_1288_fu_560_p2;
wire   [0:0] xor_ln104_609_fu_730_p2;
wire   [0:0] and_ln102_1448_fu_796_p2;
wire   [0:0] and_ln102_1429_fu_736_p2;
wire   [0:0] xor_ln117_fu_808_p2;
wire   [0:0] and_ln102_1430_fu_748_p2;
wire   [1:0] zext_ln117_fu_814_p1;
wire   [0:0] or_ln117_fu_818_p2;
wire   [1:0] select_ln117_fu_824_p3;
wire   [1:0] select_ln117_1225_fu_832_p3;
wire   [0:0] and_ln102_1431_fu_754_p2;
wire   [2:0] zext_ln117_133_fu_840_p1;
wire   [0:0] or_ln117_1123_fu_844_p2;
wire   [2:0] select_ln117_1226_fu_850_p3;
wire   [0:0] or_ln117_1124_fu_858_p2;
wire   [0:0] and_ln102_1432_fu_766_p2;
wire   [2:0] select_ln117_1227_fu_864_p3;
wire   [0:0] or_ln117_1125_fu_872_p2;
wire   [2:0] select_ln117_1228_fu_878_p3;
wire   [2:0] select_ln117_1229_fu_886_p3;
wire   [0:0] and_ln102_1433_fu_772_p2;
wire   [3:0] zext_ln117_134_fu_894_p1;
wire   [0:0] or_ln117_1126_fu_898_p2;
wire   [3:0] select_ln117_1230_fu_904_p3;
wire   [0:0] or_ln117_1127_fu_912_p2;
wire   [0:0] and_ln102_1434_fu_784_p2;
wire   [3:0] select_ln117_1231_fu_918_p3;
wire   [0:0] or_ln117_1128_fu_926_p2;
wire   [3:0] select_ln117_1232_fu_932_p3;
wire   [0:0] or_ln117_1129_fu_940_p2;
wire   [0:0] and_ln102_1435_fu_790_p2;
wire   [3:0] select_ln117_1233_fu_946_p3;
wire   [0:0] or_ln117_1130_fu_954_p2;
wire   [3:0] select_ln117_1234_fu_960_p3;
wire   [0:0] or_ln117_1131_fu_968_p2;
wire   [0:0] and_ln102_1436_fu_802_p2;
wire   [3:0] select_ln117_1235_fu_974_p3;
wire   [0:0] or_ln117_1132_fu_982_p2;
wire   [3:0] select_ln117_1236_fu_988_p3;
wire   [3:0] select_ln117_1237_fu_996_p3;
wire   [4:0] zext_ln117_135_fu_1004_p1;
wire   [0:0] xor_ln104_fu_1016_p2;
wire   [0:0] xor_ln104_601_fu_1026_p2;
wire   [0:0] and_ln102_1416_fu_1021_p2;
wire   [0:0] xor_ln104_604_fu_1042_p2;
wire   [0:0] and_ln104_230_fu_1031_p2;
wire   [0:0] xor_ln104_605_fu_1058_p2;
wire   [0:0] and_ln102_1419_fu_1037_p2;
wire   [0:0] and_ln104_233_fu_1047_p2;
wire   [0:0] and_ln102_1420_fu_1053_p2;
wire   [0:0] and_ln104_234_fu_1063_p2;
wire   [0:0] and_ln102_1425_fu_1069_p2;
wire   [0:0] xor_ln104_610_fu_1074_p2;
wire   [0:0] and_ln102_1449_fu_1114_p2;
wire   [0:0] and_ln102_1426_fu_1079_p2;
wire   [0:0] xor_ln104_611_fu_1084_p2;
wire   [0:0] and_ln102_1450_fu_1130_p2;
wire   [0:0] and_ln102_1427_fu_1089_p2;
wire   [0:0] xor_ln104_612_fu_1094_p2;
wire   [0:0] and_ln102_1451_fu_1146_p2;
wire   [0:0] and_ln102_1428_fu_1099_p2;
wire   [0:0] xor_ln104_613_fu_1104_p2;
wire   [0:0] and_ln102_1452_fu_1162_p2;
wire   [0:0] and_ln102_1437_fu_1109_p2;
wire   [0:0] or_ln117_1133_fu_1173_p2;
wire   [0:0] or_ln117_1134_fu_1178_p2;
wire   [0:0] and_ln102_1438_fu_1119_p2;
wire   [4:0] select_ln117_1239_fu_1183_p3;
wire   [0:0] or_ln117_1135_fu_1190_p2;
wire   [4:0] select_ln117_1240_fu_1196_p3;
wire   [0:0] or_ln117_1136_fu_1204_p2;
wire   [0:0] and_ln102_1439_fu_1125_p2;
wire   [4:0] select_ln117_1241_fu_1209_p3;
wire   [0:0] or_ln117_1137_fu_1217_p2;
wire   [4:0] select_ln117_1242_fu_1223_p3;
wire   [0:0] or_ln117_1138_fu_1231_p2;
wire   [0:0] and_ln102_1440_fu_1135_p2;
wire   [4:0] select_ln117_1243_fu_1237_p3;
wire   [0:0] or_ln117_1139_fu_1245_p2;
wire   [4:0] select_ln117_1244_fu_1251_p3;
wire   [0:0] or_ln117_1140_fu_1259_p2;
wire   [0:0] and_ln102_1441_fu_1141_p2;
wire   [4:0] select_ln117_1245_fu_1264_p3;
wire   [0:0] or_ln117_1141_fu_1272_p2;
wire   [4:0] select_ln117_1246_fu_1278_p3;
wire   [0:0] or_ln117_1142_fu_1286_p2;
wire   [0:0] and_ln102_1442_fu_1151_p2;
wire   [4:0] select_ln117_1247_fu_1292_p3;
wire   [0:0] or_ln117_1143_fu_1300_p2;
wire   [4:0] select_ln117_1248_fu_1306_p3;
wire   [0:0] or_ln117_1144_fu_1314_p2;
wire   [0:0] and_ln102_1443_fu_1157_p2;
wire   [4:0] select_ln117_1249_fu_1320_p3;
wire   [0:0] or_ln117_1145_fu_1328_p2;
wire   [4:0] select_ln117_1250_fu_1334_p3;
wire   [0:0] or_ln117_1146_fu_1342_p2;
wire   [0:0] and_ln102_1444_fu_1167_p2;
wire   [4:0] select_ln117_1251_fu_1348_p3;
wire   [0:0] or_ln117_1147_fu_1356_p2;
wire   [4:0] select_ln117_1252_fu_1362_p3;
wire   [12:0] agg_result_fu_1378_p65;
wire   [4:0] agg_result_fu_1378_p66;
wire   [12:0] agg_result_fu_1378_p67;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1378_p1;
wire   [4:0] agg_result_fu_1378_p3;
wire   [4:0] agg_result_fu_1378_p5;
wire   [4:0] agg_result_fu_1378_p7;
wire   [4:0] agg_result_fu_1378_p9;
wire   [4:0] agg_result_fu_1378_p11;
wire   [4:0] agg_result_fu_1378_p13;
wire   [4:0] agg_result_fu_1378_p15;
wire   [4:0] agg_result_fu_1378_p17;
wire   [4:0] agg_result_fu_1378_p19;
wire   [4:0] agg_result_fu_1378_p21;
wire   [4:0] agg_result_fu_1378_p23;
wire   [4:0] agg_result_fu_1378_p25;
wire   [4:0] agg_result_fu_1378_p27;
wire   [4:0] agg_result_fu_1378_p29;
wire   [4:0] agg_result_fu_1378_p31;
wire  signed [4:0] agg_result_fu_1378_p33;
wire  signed [4:0] agg_result_fu_1378_p35;
wire  signed [4:0] agg_result_fu_1378_p37;
wire  signed [4:0] agg_result_fu_1378_p39;
wire  signed [4:0] agg_result_fu_1378_p41;
wire  signed [4:0] agg_result_fu_1378_p43;
wire  signed [4:0] agg_result_fu_1378_p45;
wire  signed [4:0] agg_result_fu_1378_p47;
wire  signed [4:0] agg_result_fu_1378_p49;
wire  signed [4:0] agg_result_fu_1378_p51;
wire  signed [4:0] agg_result_fu_1378_p53;
wire  signed [4:0] agg_result_fu_1378_p55;
wire  signed [4:0] agg_result_fu_1378_p57;
wire  signed [4:0] agg_result_fu_1378_p59;
wire  signed [4:0] agg_result_fu_1378_p61;
wire  signed [4:0] agg_result_fu_1378_p63;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_65_5_13_1_1_x7 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 13 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 13 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 13 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 13 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 13 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 13 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 13 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 13 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 13 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 13 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 13 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 13 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 13 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 13 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 13 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 13 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 13 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 13 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 13 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 13 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 13 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 13 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 13 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 13 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 13 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 13 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 13 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 13 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 13 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 13 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 13 ),
    .CASE31( 5'h1F ),
    .din31_WIDTH( 13 ),
    .def_WIDTH( 13 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 13 ))
sparsemux_65_5_13_1_1_x7_U1021(
    .din0(13'd7829),
    .din1(13'd226),
    .din2(13'd2393),
    .din3(13'd756),
    .din4(13'd7834),
    .din5(13'd8105),
    .din6(13'd7783),
    .din7(13'd8028),
    .din8(13'd94),
    .din9(13'd8169),
    .din10(13'd7924),
    .din11(13'd396),
    .din12(13'd8029),
    .din13(13'd340),
    .din14(13'd227),
    .din15(13'd8002),
    .din16(13'd1279),
    .din17(13'd7984),
    .din18(13'd84),
    .din19(13'd256),
    .din20(13'd136),
    .din21(13'd699),
    .din22(13'd8019),
    .din23(13'd51),
    .din24(13'd8175),
    .din25(13'd7942),
    .din26(13'd8006),
    .din27(13'd7773),
    .din28(13'd112),
    .din29(13'd7871),
    .din30(13'd8097),
    .din31(13'd6),
    .def(agg_result_fu_1378_p65),
    .sel(agg_result_fu_1378_p66),
    .dout(agg_result_fu_1378_p67)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_1268_reg_1523 <= icmp_ln86_1268_fu_440_p2;
        icmp_ln86_1271_reg_1529 <= icmp_ln86_1271_fu_458_p2;
        icmp_ln86_1272_reg_1535 <= icmp_ln86_1272_fu_464_p2;
        icmp_ln86_1277_reg_1541 <= icmp_ln86_1277_fu_494_p2;
        icmp_ln86_1278_reg_1547 <= icmp_ln86_1278_fu_500_p2;
        icmp_ln86_1279_reg_1553 <= icmp_ln86_1279_fu_506_p2;
        icmp_ln86_1280_reg_1559 <= icmp_ln86_1280_fu_512_p2;
        icmp_ln86_1289_reg_1565 <= icmp_ln86_1289_fu_576_p2;
        icmp_ln86_1290_reg_1570 <= icmp_ln86_1290_fu_582_p2;
        icmp_ln86_1291_reg_1575 <= icmp_ln86_1291_fu_588_p2;
        icmp_ln86_1292_reg_1580 <= icmp_ln86_1292_fu_604_p2;
        icmp_ln86_1293_reg_1585 <= icmp_ln86_1293_fu_610_p2;
        icmp_ln86_1294_reg_1590 <= icmp_ln86_1294_fu_616_p2;
        icmp_ln86_1295_reg_1595 <= icmp_ln86_1295_fu_622_p2;
        icmp_ln86_1296_reg_1600 <= icmp_ln86_1296_fu_628_p2;
        icmp_ln86_reg_1514 <= icmp_ln86_fu_428_p2;
        select_ln117_1238_reg_1605 <= select_ln117_1238_fu_1008_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1378_p65 = 'bx;

assign agg_result_fu_1378_p66 = ((or_ln117_1147_fu_1356_p2[0:0] == 1'b1) ? select_ln117_1252_fu_1362_p3 : 5'd31);

assign and_ln102_1416_fu_1021_p2 = (xor_ln104_fu_1016_p2 & icmp_ln86_1268_reg_1523);

assign and_ln102_1417_fu_652_p2 = (icmp_ln86_1269_fu_446_p2 & and_ln102_fu_634_p2);

assign and_ln102_1418_fu_670_p2 = (icmp_ln86_1270_fu_452_p2 & and_ln104_fu_646_p2);

assign and_ln102_1419_fu_1037_p2 = (icmp_ln86_1271_reg_1529 & and_ln102_1416_fu_1021_p2);

assign and_ln102_1420_fu_1053_p2 = (icmp_ln86_1272_reg_1535 & and_ln104_230_fu_1031_p2);

assign and_ln102_1421_fu_688_p2 = (icmp_ln86_1273_fu_470_p2 & and_ln102_1417_fu_652_p2);

assign and_ln102_1422_fu_700_p2 = (icmp_ln86_1274_fu_476_p2 & and_ln104_231_fu_664_p2);

assign and_ln102_1423_fu_712_p2 = (icmp_ln86_1275_fu_482_p2 & and_ln102_1418_fu_670_p2);

assign and_ln102_1424_fu_724_p2 = (icmp_ln86_1276_fu_488_p2 & and_ln104_232_fu_682_p2);

assign and_ln102_1425_fu_1069_p2 = (icmp_ln86_1277_reg_1541 & and_ln102_1419_fu_1037_p2);

assign and_ln102_1426_fu_1079_p2 = (icmp_ln86_1278_reg_1547 & and_ln104_233_fu_1047_p2);

assign and_ln102_1427_fu_1089_p2 = (icmp_ln86_1279_reg_1553 & and_ln102_1420_fu_1053_p2);

assign and_ln102_1428_fu_1099_p2 = (icmp_ln86_1280_reg_1559 & and_ln104_234_fu_1063_p2);

assign and_ln102_1429_fu_736_p2 = (icmp_ln86_1281_fu_518_p2 & and_ln102_1421_fu_688_p2);

assign and_ln102_1430_fu_748_p2 = (and_ln102_1445_fu_742_p2 & and_ln102_1417_fu_652_p2);

assign and_ln102_1431_fu_754_p2 = (icmp_ln86_1283_fu_530_p2 & and_ln102_1422_fu_700_p2);

assign and_ln102_1432_fu_766_p2 = (and_ln104_231_fu_664_p2 & and_ln102_1446_fu_760_p2);

assign and_ln102_1433_fu_772_p2 = (icmp_ln86_1285_fu_542_p2 & and_ln102_1423_fu_712_p2);

assign and_ln102_1434_fu_784_p2 = (and_ln102_1447_fu_778_p2 & and_ln102_1418_fu_670_p2);

assign and_ln102_1435_fu_790_p2 = (icmp_ln86_1287_fu_554_p2 & and_ln102_1424_fu_724_p2);

assign and_ln102_1436_fu_802_p2 = (and_ln104_232_fu_682_p2 & and_ln102_1448_fu_796_p2);

assign and_ln102_1437_fu_1109_p2 = (icmp_ln86_1289_reg_1565 & and_ln102_1425_fu_1069_p2);

assign and_ln102_1438_fu_1119_p2 = (and_ln102_1449_fu_1114_p2 & and_ln102_1419_fu_1037_p2);

assign and_ln102_1439_fu_1125_p2 = (icmp_ln86_1291_reg_1575 & and_ln102_1426_fu_1079_p2);

assign and_ln102_1440_fu_1135_p2 = (and_ln104_233_fu_1047_p2 & and_ln102_1450_fu_1130_p2);

assign and_ln102_1441_fu_1141_p2 = (icmp_ln86_1293_reg_1585 & and_ln102_1427_fu_1089_p2);

assign and_ln102_1442_fu_1151_p2 = (and_ln102_1451_fu_1146_p2 & and_ln102_1420_fu_1053_p2);

assign and_ln102_1443_fu_1157_p2 = (icmp_ln86_1295_reg_1595 & and_ln102_1428_fu_1099_p2);

assign and_ln102_1444_fu_1167_p2 = (and_ln104_234_fu_1063_p2 & and_ln102_1452_fu_1162_p2);

assign and_ln102_1445_fu_742_p2 = (xor_ln104_606_fu_694_p2 & icmp_ln86_1282_fu_524_p2);

assign and_ln102_1446_fu_760_p2 = (xor_ln104_607_fu_706_p2 & icmp_ln86_1284_fu_536_p2);

assign and_ln102_1447_fu_778_p2 = (xor_ln104_608_fu_718_p2 & icmp_ln86_1286_fu_548_p2);

assign and_ln102_1448_fu_796_p2 = (xor_ln104_609_fu_730_p2 & icmp_ln86_1288_fu_560_p2);

assign and_ln102_1449_fu_1114_p2 = (xor_ln104_610_fu_1074_p2 & icmp_ln86_1290_reg_1570);

assign and_ln102_1450_fu_1130_p2 = (xor_ln104_611_fu_1084_p2 & icmp_ln86_1292_reg_1580);

assign and_ln102_1451_fu_1146_p2 = (xor_ln104_612_fu_1094_p2 & icmp_ln86_1294_reg_1590);

assign and_ln102_1452_fu_1162_p2 = (xor_ln104_613_fu_1104_p2 & icmp_ln86_1296_reg_1600);

assign and_ln102_fu_634_p2 = (icmp_ln86_fu_428_p2 & icmp_ln86_1267_fu_434_p2);

assign and_ln104_230_fu_1031_p2 = (xor_ln104_fu_1016_p2 & xor_ln104_601_fu_1026_p2);

assign and_ln104_231_fu_664_p2 = (xor_ln104_602_fu_658_p2 & and_ln102_fu_634_p2);

assign and_ln104_232_fu_682_p2 = (xor_ln104_603_fu_676_p2 & and_ln104_fu_646_p2);

assign and_ln104_233_fu_1047_p2 = (xor_ln104_604_fu_1042_p2 & and_ln102_1416_fu_1021_p2);

assign and_ln104_234_fu_1063_p2 = (xor_ln104_605_fu_1058_p2 & and_ln104_230_fu_1031_p2);

assign and_ln104_fu_646_p2 = (xor_ln104_600_fu_640_p2 & icmp_ln86_fu_428_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1378_p67;

assign icmp_ln86_1267_fu_434_p2 = (($signed(x_39_val) < $signed(18'd1174)) ? 1'b1 : 1'b0);

assign icmp_ln86_1268_fu_440_p2 = (($signed(x_49_val) < $signed(18'd84737)) ? 1'b1 : 1'b0);

assign icmp_ln86_1269_fu_446_p2 = (($signed(x_44_val) < $signed(18'd14)) ? 1'b1 : 1'b0);

assign icmp_ln86_1270_fu_452_p2 = (($signed(x_1_val) < $signed(18'd251871)) ? 1'b1 : 1'b0);

assign icmp_ln86_1271_fu_458_p2 = (($signed(x_32_val) < $signed(18'd777)) ? 1'b1 : 1'b0);

assign icmp_ln86_1272_fu_464_p2 = (($signed(x_17_val) < $signed(18'd10)) ? 1'b1 : 1'b0);

assign icmp_ln86_1273_fu_470_p2 = (($signed(x_45_val) < $signed(18'd200)) ? 1'b1 : 1'b0);

assign icmp_ln86_1274_fu_476_p2 = (($signed(x_21_val) < $signed(18'd240)) ? 1'b1 : 1'b0);

assign icmp_ln86_1275_fu_482_p2 = (($signed(x_39_val) < $signed(18'd2316)) ? 1'b1 : 1'b0);

assign icmp_ln86_1276_fu_488_p2 = (($signed(x_33_val) < $signed(18'd793)) ? 1'b1 : 1'b0);

assign icmp_ln86_1277_fu_494_p2 = (($signed(x_15_val) < $signed(18'd6)) ? 1'b1 : 1'b0);

assign icmp_ln86_1278_fu_500_p2 = (($signed(x_27_val) < $signed(18'd9412)) ? 1'b1 : 1'b0);

assign icmp_ln86_1279_fu_506_p2 = (($signed(x_39_val) < $signed(18'd957)) ? 1'b1 : 1'b0);

assign icmp_ln86_1280_fu_512_p2 = (($signed(x_18_val) < $signed(18'd1064)) ? 1'b1 : 1'b0);

assign icmp_ln86_1281_fu_518_p2 = (($signed(x_52_val) < $signed(18'd31233)) ? 1'b1 : 1'b0);

assign icmp_ln86_1282_fu_524_p2 = (($signed(x_15_val) < $signed(18'd5)) ? 1'b1 : 1'b0);

assign icmp_ln86_1283_fu_530_p2 = (($signed(x_40_val) < $signed(18'd397)) ? 1'b1 : 1'b0);

assign icmp_ln86_1284_fu_536_p2 = (($signed(x_9_val) < $signed(18'd1687)) ? 1'b1 : 1'b0);

assign icmp_ln86_1285_fu_542_p2 = (($signed(x_5_val) < $signed(18'd21852)) ? 1'b1 : 1'b0);

assign icmp_ln86_1286_fu_548_p2 = (($signed(x_14_val) < $signed(18'd50)) ? 1'b1 : 1'b0);

assign icmp_ln86_1287_fu_554_p2 = (($signed(x_34_val) < $signed(18'd493)) ? 1'b1 : 1'b0);

assign icmp_ln86_1288_fu_560_p2 = (($signed(x_39_val) < $signed(18'd1854)) ? 1'b1 : 1'b0);

assign icmp_ln86_1289_fu_576_p2 = (($signed(tmp_fu_566_p4) < $signed(15'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_1290_fu_582_p2 = (($signed(x_1_val) < $signed(18'd213139)) ? 1'b1 : 1'b0);

assign icmp_ln86_1291_fu_588_p2 = (($signed(x_43_val) < $signed(18'd47)) ? 1'b1 : 1'b0);

assign icmp_ln86_1292_fu_604_p2 = (($signed(tmp_18_fu_594_p4) < $signed(14'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_1293_fu_610_p2 = (($signed(x_15_val) < $signed(18'd24)) ? 1'b1 : 1'b0);

assign icmp_ln86_1294_fu_616_p2 = (($signed(x_31_val) < $signed(18'd721)) ? 1'b1 : 1'b0);

assign icmp_ln86_1295_fu_622_p2 = (($signed(x_1_val) < $signed(18'd202858)) ? 1'b1 : 1'b0);

assign icmp_ln86_1296_fu_628_p2 = (($signed(x_19_val) < $signed(18'd1104)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_428_p2 = (($signed(x_48_val) < $signed(18'd75432)) ? 1'b1 : 1'b0);

assign or_ln117_1123_fu_844_p2 = (and_ln102_1431_fu_754_p2 | and_ln102_1417_fu_652_p2);

assign or_ln117_1124_fu_858_p2 = (and_ln102_1422_fu_700_p2 | and_ln102_1417_fu_652_p2);

assign or_ln117_1125_fu_872_p2 = (or_ln117_1124_fu_858_p2 | and_ln102_1432_fu_766_p2);

assign or_ln117_1126_fu_898_p2 = (and_ln102_fu_634_p2 | and_ln102_1433_fu_772_p2);

assign or_ln117_1127_fu_912_p2 = (and_ln102_fu_634_p2 | and_ln102_1423_fu_712_p2);

assign or_ln117_1128_fu_926_p2 = (or_ln117_1127_fu_912_p2 | and_ln102_1434_fu_784_p2);

assign or_ln117_1129_fu_940_p2 = (and_ln102_fu_634_p2 | and_ln102_1418_fu_670_p2);

assign or_ln117_1130_fu_954_p2 = (or_ln117_1129_fu_940_p2 | and_ln102_1435_fu_790_p2);

assign or_ln117_1131_fu_968_p2 = (or_ln117_1129_fu_940_p2 | and_ln102_1424_fu_724_p2);

assign or_ln117_1132_fu_982_p2 = (or_ln117_1131_fu_968_p2 | and_ln102_1436_fu_802_p2);

assign or_ln117_1133_fu_1173_p2 = (icmp_ln86_reg_1514 | and_ln102_1437_fu_1109_p2);

assign or_ln117_1134_fu_1178_p2 = (icmp_ln86_reg_1514 | and_ln102_1425_fu_1069_p2);

assign or_ln117_1135_fu_1190_p2 = (or_ln117_1134_fu_1178_p2 | and_ln102_1438_fu_1119_p2);

assign or_ln117_1136_fu_1204_p2 = (icmp_ln86_reg_1514 | and_ln102_1419_fu_1037_p2);

assign or_ln117_1137_fu_1217_p2 = (or_ln117_1136_fu_1204_p2 | and_ln102_1439_fu_1125_p2);

assign or_ln117_1138_fu_1231_p2 = (or_ln117_1136_fu_1204_p2 | and_ln102_1426_fu_1079_p2);

assign or_ln117_1139_fu_1245_p2 = (or_ln117_1138_fu_1231_p2 | and_ln102_1440_fu_1135_p2);

assign or_ln117_1140_fu_1259_p2 = (icmp_ln86_reg_1514 | and_ln102_1416_fu_1021_p2);

assign or_ln117_1141_fu_1272_p2 = (or_ln117_1140_fu_1259_p2 | and_ln102_1441_fu_1141_p2);

assign or_ln117_1142_fu_1286_p2 = (or_ln117_1140_fu_1259_p2 | and_ln102_1427_fu_1089_p2);

assign or_ln117_1143_fu_1300_p2 = (or_ln117_1142_fu_1286_p2 | and_ln102_1442_fu_1151_p2);

assign or_ln117_1144_fu_1314_p2 = (or_ln117_1140_fu_1259_p2 | and_ln102_1420_fu_1053_p2);

assign or_ln117_1145_fu_1328_p2 = (or_ln117_1144_fu_1314_p2 | and_ln102_1443_fu_1157_p2);

assign or_ln117_1146_fu_1342_p2 = (or_ln117_1144_fu_1314_p2 | and_ln102_1428_fu_1099_p2);

assign or_ln117_1147_fu_1356_p2 = (or_ln117_1146_fu_1342_p2 | and_ln102_1444_fu_1167_p2);

assign or_ln117_fu_818_p2 = (and_ln102_1430_fu_748_p2 | and_ln102_1421_fu_688_p2);

assign select_ln117_1225_fu_832_p3 = ((or_ln117_fu_818_p2[0:0] == 1'b1) ? select_ln117_fu_824_p3 : 2'd3);

assign select_ln117_1226_fu_850_p3 = ((and_ln102_1417_fu_652_p2[0:0] == 1'b1) ? zext_ln117_133_fu_840_p1 : 3'd4);

assign select_ln117_1227_fu_864_p3 = ((or_ln117_1123_fu_844_p2[0:0] == 1'b1) ? select_ln117_1226_fu_850_p3 : 3'd5);

assign select_ln117_1228_fu_878_p3 = ((or_ln117_1124_fu_858_p2[0:0] == 1'b1) ? select_ln117_1227_fu_864_p3 : 3'd6);

assign select_ln117_1229_fu_886_p3 = ((or_ln117_1125_fu_872_p2[0:0] == 1'b1) ? select_ln117_1228_fu_878_p3 : 3'd7);

assign select_ln117_1230_fu_904_p3 = ((and_ln102_fu_634_p2[0:0] == 1'b1) ? zext_ln117_134_fu_894_p1 : 4'd8);

assign select_ln117_1231_fu_918_p3 = ((or_ln117_1126_fu_898_p2[0:0] == 1'b1) ? select_ln117_1230_fu_904_p3 : 4'd9);

assign select_ln117_1232_fu_932_p3 = ((or_ln117_1127_fu_912_p2[0:0] == 1'b1) ? select_ln117_1231_fu_918_p3 : 4'd10);

assign select_ln117_1233_fu_946_p3 = ((or_ln117_1128_fu_926_p2[0:0] == 1'b1) ? select_ln117_1232_fu_932_p3 : 4'd11);

assign select_ln117_1234_fu_960_p3 = ((or_ln117_1129_fu_940_p2[0:0] == 1'b1) ? select_ln117_1233_fu_946_p3 : 4'd12);

assign select_ln117_1235_fu_974_p3 = ((or_ln117_1130_fu_954_p2[0:0] == 1'b1) ? select_ln117_1234_fu_960_p3 : 4'd13);

assign select_ln117_1236_fu_988_p3 = ((or_ln117_1131_fu_968_p2[0:0] == 1'b1) ? select_ln117_1235_fu_974_p3 : 4'd14);

assign select_ln117_1237_fu_996_p3 = ((or_ln117_1132_fu_982_p2[0:0] == 1'b1) ? select_ln117_1236_fu_988_p3 : 4'd15);

assign select_ln117_1238_fu_1008_p3 = ((icmp_ln86_fu_428_p2[0:0] == 1'b1) ? zext_ln117_135_fu_1004_p1 : 5'd16);

assign select_ln117_1239_fu_1183_p3 = ((or_ln117_1133_fu_1173_p2[0:0] == 1'b1) ? select_ln117_1238_reg_1605 : 5'd17);

assign select_ln117_1240_fu_1196_p3 = ((or_ln117_1134_fu_1178_p2[0:0] == 1'b1) ? select_ln117_1239_fu_1183_p3 : 5'd18);

assign select_ln117_1241_fu_1209_p3 = ((or_ln117_1135_fu_1190_p2[0:0] == 1'b1) ? select_ln117_1240_fu_1196_p3 : 5'd19);

assign select_ln117_1242_fu_1223_p3 = ((or_ln117_1136_fu_1204_p2[0:0] == 1'b1) ? select_ln117_1241_fu_1209_p3 : 5'd20);

assign select_ln117_1243_fu_1237_p3 = ((or_ln117_1137_fu_1217_p2[0:0] == 1'b1) ? select_ln117_1242_fu_1223_p3 : 5'd21);

assign select_ln117_1244_fu_1251_p3 = ((or_ln117_1138_fu_1231_p2[0:0] == 1'b1) ? select_ln117_1243_fu_1237_p3 : 5'd22);

assign select_ln117_1245_fu_1264_p3 = ((or_ln117_1139_fu_1245_p2[0:0] == 1'b1) ? select_ln117_1244_fu_1251_p3 : 5'd23);

assign select_ln117_1246_fu_1278_p3 = ((or_ln117_1140_fu_1259_p2[0:0] == 1'b1) ? select_ln117_1245_fu_1264_p3 : 5'd24);

assign select_ln117_1247_fu_1292_p3 = ((or_ln117_1141_fu_1272_p2[0:0] == 1'b1) ? select_ln117_1246_fu_1278_p3 : 5'd25);

assign select_ln117_1248_fu_1306_p3 = ((or_ln117_1142_fu_1286_p2[0:0] == 1'b1) ? select_ln117_1247_fu_1292_p3 : 5'd26);

assign select_ln117_1249_fu_1320_p3 = ((or_ln117_1143_fu_1300_p2[0:0] == 1'b1) ? select_ln117_1248_fu_1306_p3 : 5'd27);

assign select_ln117_1250_fu_1334_p3 = ((or_ln117_1144_fu_1314_p2[0:0] == 1'b1) ? select_ln117_1249_fu_1320_p3 : 5'd28);

assign select_ln117_1251_fu_1348_p3 = ((or_ln117_1145_fu_1328_p2[0:0] == 1'b1) ? select_ln117_1250_fu_1334_p3 : 5'd29);

assign select_ln117_1252_fu_1362_p3 = ((or_ln117_1146_fu_1342_p2[0:0] == 1'b1) ? select_ln117_1251_fu_1348_p3 : 5'd30);

assign select_ln117_fu_824_p3 = ((and_ln102_1421_fu_688_p2[0:0] == 1'b1) ? zext_ln117_fu_814_p1 : 2'd2);

assign tmp_18_fu_594_p4 = {{x_23_val[17:4]}};

assign tmp_fu_566_p4 = {{x_44_val[17:3]}};

assign xor_ln104_600_fu_640_p2 = (icmp_ln86_1267_fu_434_p2 ^ 1'd1);

assign xor_ln104_601_fu_1026_p2 = (icmp_ln86_1268_reg_1523 ^ 1'd1);

assign xor_ln104_602_fu_658_p2 = (icmp_ln86_1269_fu_446_p2 ^ 1'd1);

assign xor_ln104_603_fu_676_p2 = (icmp_ln86_1270_fu_452_p2 ^ 1'd1);

assign xor_ln104_604_fu_1042_p2 = (icmp_ln86_1271_reg_1529 ^ 1'd1);

assign xor_ln104_605_fu_1058_p2 = (icmp_ln86_1272_reg_1535 ^ 1'd1);

assign xor_ln104_606_fu_694_p2 = (icmp_ln86_1273_fu_470_p2 ^ 1'd1);

assign xor_ln104_607_fu_706_p2 = (icmp_ln86_1274_fu_476_p2 ^ 1'd1);

assign xor_ln104_608_fu_718_p2 = (icmp_ln86_1275_fu_482_p2 ^ 1'd1);

assign xor_ln104_609_fu_730_p2 = (icmp_ln86_1276_fu_488_p2 ^ 1'd1);

assign xor_ln104_610_fu_1074_p2 = (icmp_ln86_1277_reg_1541 ^ 1'd1);

assign xor_ln104_611_fu_1084_p2 = (icmp_ln86_1278_reg_1547 ^ 1'd1);

assign xor_ln104_612_fu_1094_p2 = (icmp_ln86_1279_reg_1553 ^ 1'd1);

assign xor_ln104_613_fu_1104_p2 = (icmp_ln86_1280_reg_1559 ^ 1'd1);

assign xor_ln104_fu_1016_p2 = (icmp_ln86_reg_1514 ^ 1'd1);

assign xor_ln117_fu_808_p2 = (1'd1 ^ and_ln102_1429_fu_736_p2);

assign zext_ln117_133_fu_840_p1 = select_ln117_1225_fu_832_p3;

assign zext_ln117_134_fu_894_p1 = select_ln117_1229_fu_886_p3;

assign zext_ln117_135_fu_1004_p1 = select_ln117_1237_fu_996_p3;

assign zext_ln117_fu_814_p1 = xor_ln117_fu_808_p2;

endmodule //my_prj_decision_function_55
