// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_24 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_4_val,
        x_7_val,
        x_10_val,
        x_19_val,
        x_21_val,
        x_23_val,
        x_26_val,
        x_27_val,
        x_28_val,
        x_31_val,
        x_34_val,
        x_36_val,
        x_38_val,
        x_44_val,
        x_45_val,
        x_47_val,
        x_48_val,
        x_49_val,
        x_50_val,
        x_51_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_4_val;
input  [17:0] x_7_val;
input  [17:0] x_10_val;
input  [17:0] x_19_val;
input  [17:0] x_21_val;
input  [17:0] x_23_val;
input  [17:0] x_26_val;
input  [17:0] x_27_val;
input  [17:0] x_28_val;
input  [17:0] x_31_val;
input  [17:0] x_34_val;
input  [17:0] x_36_val;
input  [17:0] x_38_val;
input  [17:0] x_44_val;
input  [17:0] x_45_val;
input  [17:0] x_47_val;
input  [17:0] x_48_val;
input  [17:0] x_49_val;
input  [17:0] x_50_val;
input  [17:0] x_51_val;
input  [17:0] x_52_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_414_p2;
reg   [0:0] icmp_ln86_reg_1462;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_1397_fu_436_p2;
reg   [0:0] icmp_ln86_1397_reg_1471;
wire   [0:0] icmp_ln86_635_fu_454_p2;
reg   [0:0] icmp_ln86_635_reg_1477;
wire   [0:0] icmp_ln86_636_fu_460_p2;
reg   [0:0] icmp_ln86_636_reg_1483;
wire   [0:0] icmp_ln86_641_fu_490_p2;
reg   [0:0] icmp_ln86_641_reg_1489;
wire   [0:0] icmp_ln86_1398_fu_506_p2;
reg   [0:0] icmp_ln86_1398_reg_1495;
wire   [0:0] icmp_ln86_643_fu_512_p2;
reg   [0:0] icmp_ln86_643_reg_1501;
wire   [0:0] icmp_ln86_644_fu_518_p2;
reg   [0:0] icmp_ln86_644_reg_1507;
wire   [0:0] icmp_ln86_652_fu_566_p2;
reg   [0:0] icmp_ln86_652_reg_1513;
wire   [0:0] icmp_ln86_653_fu_572_p2;
reg   [0:0] icmp_ln86_653_reg_1518;
wire   [0:0] icmp_ln86_654_fu_578_p2;
reg   [0:0] icmp_ln86_654_reg_1523;
wire   [0:0] icmp_ln86_655_fu_584_p2;
reg   [0:0] icmp_ln86_655_reg_1528;
wire   [0:0] icmp_ln86_656_fu_590_p2;
reg   [0:0] icmp_ln86_656_reg_1533;
wire   [0:0] icmp_ln86_657_fu_596_p2;
reg   [0:0] icmp_ln86_657_reg_1538;
wire   [0:0] icmp_ln86_658_fu_602_p2;
reg   [0:0] icmp_ln86_658_reg_1543;
wire   [0:0] icmp_ln86_659_fu_608_p2;
reg   [0:0] icmp_ln86_659_reg_1548;
wire   [4:0] select_ln117_625_fu_956_p3;
reg   [4:0] select_ln117_625_reg_1553;
wire    ap_block_pp0_stage0;
wire   [16:0] tmp_fu_426_p4;
wire   [14:0] tmp_24_fu_496_p4;
wire   [0:0] icmp_ln86_631_fu_420_p2;
wire   [0:0] xor_ln104_304_fu_620_p2;
wire   [0:0] icmp_ln86_633_fu_442_p2;
wire   [0:0] and_ln102_fu_614_p2;
wire   [0:0] xor_ln104_306_fu_638_p2;
wire   [0:0] icmp_ln86_634_fu_448_p2;
wire   [0:0] and_ln104_fu_626_p2;
wire   [0:0] xor_ln104_307_fu_656_p2;
wire   [0:0] icmp_ln86_637_fu_466_p2;
wire   [0:0] and_ln102_607_fu_632_p2;
wire   [0:0] icmp_ln86_638_fu_472_p2;
wire   [0:0] and_ln104_125_fu_644_p2;
wire   [0:0] icmp_ln86_639_fu_478_p2;
wire   [0:0] and_ln102_608_fu_650_p2;
wire   [0:0] icmp_ln86_640_fu_484_p2;
wire   [0:0] and_ln104_126_fu_662_p2;
wire   [0:0] icmp_ln86_645_fu_524_p2;
wire   [0:0] and_ln102_611_fu_668_p2;
wire   [0:0] icmp_ln86_646_fu_530_p2;
wire   [0:0] xor_ln104_310_fu_674_p2;
wire   [0:0] and_ln102_634_fu_716_p2;
wire   [0:0] icmp_ln86_647_fu_536_p2;
wire   [0:0] and_ln102_612_fu_680_p2;
wire   [0:0] icmp_ln86_648_fu_542_p2;
wire   [0:0] xor_ln104_311_fu_686_p2;
wire   [0:0] and_ln102_635_fu_734_p2;
wire   [0:0] icmp_ln86_649_fu_548_p2;
wire   [0:0] and_ln102_613_fu_692_p2;
wire   [0:0] icmp_ln86_650_fu_554_p2;
wire   [0:0] and_ln102_614_fu_698_p2;
wire   [0:0] icmp_ln86_651_fu_560_p2;
wire   [0:0] xor_ln104_312_fu_704_p2;
wire   [0:0] and_ln102_636_fu_758_p2;
wire   [0:0] and_ln102_619_fu_710_p2;
wire   [0:0] xor_ln117_fu_770_p2;
wire   [0:0] and_ln102_620_fu_722_p2;
wire   [1:0] zext_ln117_fu_776_p1;
wire   [0:0] or_ln117_fu_780_p2;
wire   [1:0] select_ln117_fu_786_p3;
wire   [1:0] select_ln117_613_fu_794_p3;
wire   [0:0] and_ln102_621_fu_728_p2;
wire   [2:0] zext_ln117_69_fu_802_p1;
wire   [0:0] or_ln117_580_fu_806_p2;
wire   [2:0] select_ln117_614_fu_812_p3;
wire   [0:0] or_ln117_581_fu_820_p2;
wire   [0:0] and_ln102_622_fu_740_p2;
wire   [2:0] select_ln117_615_fu_826_p3;
wire   [0:0] or_ln117_582_fu_834_p2;
wire   [2:0] select_ln117_616_fu_840_p3;
wire   [2:0] select_ln117_617_fu_848_p3;
wire   [0:0] and_ln102_623_fu_746_p2;
wire   [3:0] zext_ln117_70_fu_856_p1;
wire   [0:0] or_ln117_583_fu_860_p2;
wire   [3:0] select_ln117_618_fu_866_p3;
wire   [0:0] or_ln117_584_fu_874_p2;
wire   [3:0] select_ln117_619_fu_880_p3;
wire   [0:0] or_ln117_585_fu_888_p2;
wire   [0:0] and_ln102_624_fu_752_p2;
wire   [3:0] select_ln117_620_fu_894_p3;
wire   [0:0] or_ln117_586_fu_902_p2;
wire   [3:0] select_ln117_621_fu_908_p3;
wire   [0:0] or_ln117_587_fu_916_p2;
wire   [0:0] and_ln102_625_fu_764_p2;
wire   [3:0] select_ln117_622_fu_922_p3;
wire   [0:0] or_ln117_588_fu_930_p2;
wire   [3:0] select_ln117_623_fu_936_p3;
wire   [3:0] select_ln117_624_fu_944_p3;
wire   [4:0] zext_ln117_71_fu_952_p1;
wire   [0:0] xor_ln104_fu_964_p2;
wire   [0:0] xor_ln104_305_fu_974_p2;
wire   [0:0] and_ln102_606_fu_969_p2;
wire   [0:0] xor_ln104_308_fu_990_p2;
wire   [0:0] and_ln104_124_fu_979_p2;
wire   [0:0] xor_ln104_309_fu_1006_p2;
wire   [0:0] and_ln102_609_fu_985_p2;
wire   [0:0] and_ln104_127_fu_995_p2;
wire   [0:0] and_ln102_610_fu_1001_p2;
wire   [0:0] and_ln104_128_fu_1011_p2;
wire   [0:0] and_ln102_615_fu_1017_p2;
wire   [0:0] xor_ln104_313_fu_1022_p2;
wire   [0:0] and_ln102_637_fu_1062_p2;
wire   [0:0] and_ln102_616_fu_1027_p2;
wire   [0:0] xor_ln104_314_fu_1032_p2;
wire   [0:0] and_ln102_638_fu_1078_p2;
wire   [0:0] and_ln102_617_fu_1037_p2;
wire   [0:0] xor_ln104_315_fu_1042_p2;
wire   [0:0] and_ln102_639_fu_1094_p2;
wire   [0:0] and_ln102_618_fu_1047_p2;
wire   [0:0] xor_ln104_316_fu_1052_p2;
wire   [0:0] and_ln102_640_fu_1110_p2;
wire   [0:0] and_ln102_626_fu_1057_p2;
wire   [0:0] or_ln117_589_fu_1121_p2;
wire   [0:0] or_ln117_590_fu_1126_p2;
wire   [0:0] and_ln102_627_fu_1067_p2;
wire   [4:0] select_ln117_626_fu_1131_p3;
wire   [0:0] or_ln117_591_fu_1138_p2;
wire   [4:0] select_ln117_627_fu_1144_p3;
wire   [0:0] or_ln117_592_fu_1152_p2;
wire   [0:0] and_ln102_628_fu_1073_p2;
wire   [4:0] select_ln117_628_fu_1157_p3;
wire   [0:0] or_ln117_593_fu_1165_p2;
wire   [4:0] select_ln117_629_fu_1171_p3;
wire   [0:0] or_ln117_594_fu_1179_p2;
wire   [0:0] and_ln102_629_fu_1083_p2;
wire   [4:0] select_ln117_630_fu_1185_p3;
wire   [0:0] or_ln117_595_fu_1193_p2;
wire   [4:0] select_ln117_631_fu_1199_p3;
wire   [0:0] or_ln117_596_fu_1207_p2;
wire   [0:0] and_ln102_630_fu_1089_p2;
wire   [4:0] select_ln117_632_fu_1212_p3;
wire   [0:0] or_ln117_597_fu_1220_p2;
wire   [4:0] select_ln117_633_fu_1226_p3;
wire   [0:0] or_ln117_598_fu_1234_p2;
wire   [0:0] and_ln102_631_fu_1099_p2;
wire   [4:0] select_ln117_634_fu_1240_p3;
wire   [0:0] or_ln117_599_fu_1248_p2;
wire   [4:0] select_ln117_635_fu_1254_p3;
wire   [0:0] or_ln117_600_fu_1262_p2;
wire   [0:0] and_ln102_632_fu_1105_p2;
wire   [4:0] select_ln117_636_fu_1268_p3;
wire   [0:0] or_ln117_601_fu_1276_p2;
wire   [4:0] select_ln117_637_fu_1282_p3;
wire   [0:0] or_ln117_602_fu_1290_p2;
wire   [0:0] and_ln102_633_fu_1115_p2;
wire   [4:0] select_ln117_638_fu_1296_p3;
wire   [0:0] or_ln117_603_fu_1304_p2;
wire   [4:0] select_ln117_639_fu_1310_p3;
wire   [11:0] agg_result_fu_1326_p65;
wire   [4:0] agg_result_fu_1326_p66;
wire   [11:0] agg_result_fu_1326_p67;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1326_p1;
wire   [4:0] agg_result_fu_1326_p3;
wire   [4:0] agg_result_fu_1326_p5;
wire   [4:0] agg_result_fu_1326_p7;
wire   [4:0] agg_result_fu_1326_p9;
wire   [4:0] agg_result_fu_1326_p11;
wire   [4:0] agg_result_fu_1326_p13;
wire   [4:0] agg_result_fu_1326_p15;
wire   [4:0] agg_result_fu_1326_p17;
wire   [4:0] agg_result_fu_1326_p19;
wire   [4:0] agg_result_fu_1326_p21;
wire   [4:0] agg_result_fu_1326_p23;
wire   [4:0] agg_result_fu_1326_p25;
wire   [4:0] agg_result_fu_1326_p27;
wire   [4:0] agg_result_fu_1326_p29;
wire   [4:0] agg_result_fu_1326_p31;
wire  signed [4:0] agg_result_fu_1326_p33;
wire  signed [4:0] agg_result_fu_1326_p35;
wire  signed [4:0] agg_result_fu_1326_p37;
wire  signed [4:0] agg_result_fu_1326_p39;
wire  signed [4:0] agg_result_fu_1326_p41;
wire  signed [4:0] agg_result_fu_1326_p43;
wire  signed [4:0] agg_result_fu_1326_p45;
wire  signed [4:0] agg_result_fu_1326_p47;
wire  signed [4:0] agg_result_fu_1326_p49;
wire  signed [4:0] agg_result_fu_1326_p51;
wire  signed [4:0] agg_result_fu_1326_p53;
wire  signed [4:0] agg_result_fu_1326_p55;
wire  signed [4:0] agg_result_fu_1326_p57;
wire  signed [4:0] agg_result_fu_1326_p59;
wire  signed [4:0] agg_result_fu_1326_p61;
wire  signed [4:0] agg_result_fu_1326_p63;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_65_5_12_1_1_x28 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 12 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 12 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 12 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 12 ),
    .CASE31( 5'h1F ),
    .din31_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_65_5_12_1_1_x28_U1631(
    .din0(12'd3939),
    .din1(12'd133),
    .din2(12'd3946),
    .din3(12'd8),
    .din4(12'd3747),
    .din5(12'd4043),
    .din6(12'd4040),
    .din7(12'd329),
    .din8(12'd4093),
    .din9(12'd145),
    .din10(12'd2604),
    .din11(12'd3961),
    .din12(12'd424),
    .din13(12'd1199),
    .din14(12'd2767),
    .din15(12'd206),
    .din16(12'd427),
    .din17(12'd4090),
    .din18(12'd1474),
    .din19(12'd3777),
    .din20(12'd347),
    .din21(12'd3844),
    .din22(12'd3594),
    .din23(12'd277),
    .din24(12'd3872),
    .din25(12'd568),
    .din26(12'd3915),
    .din27(12'd4076),
    .din28(12'd3840),
    .din29(12'd543),
    .din30(12'd787),
    .din31(12'd3950),
    .def(agg_result_fu_1326_p65),
    .sel(agg_result_fu_1326_p66),
    .dout(agg_result_fu_1326_p67)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_1397_reg_1471 <= icmp_ln86_1397_fu_436_p2;
        icmp_ln86_1398_reg_1495 <= icmp_ln86_1398_fu_506_p2;
        icmp_ln86_635_reg_1477 <= icmp_ln86_635_fu_454_p2;
        icmp_ln86_636_reg_1483 <= icmp_ln86_636_fu_460_p2;
        icmp_ln86_641_reg_1489 <= icmp_ln86_641_fu_490_p2;
        icmp_ln86_643_reg_1501 <= icmp_ln86_643_fu_512_p2;
        icmp_ln86_644_reg_1507 <= icmp_ln86_644_fu_518_p2;
        icmp_ln86_652_reg_1513 <= icmp_ln86_652_fu_566_p2;
        icmp_ln86_653_reg_1518 <= icmp_ln86_653_fu_572_p2;
        icmp_ln86_654_reg_1523 <= icmp_ln86_654_fu_578_p2;
        icmp_ln86_655_reg_1528 <= icmp_ln86_655_fu_584_p2;
        icmp_ln86_656_reg_1533 <= icmp_ln86_656_fu_590_p2;
        icmp_ln86_657_reg_1538 <= icmp_ln86_657_fu_596_p2;
        icmp_ln86_658_reg_1543 <= icmp_ln86_658_fu_602_p2;
        icmp_ln86_659_reg_1548 <= icmp_ln86_659_fu_608_p2;
        icmp_ln86_reg_1462 <= icmp_ln86_fu_414_p2;
        select_ln117_625_reg_1553 <= select_ln117_625_fu_956_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1326_p65 = 'bx;

assign agg_result_fu_1326_p66 = ((or_ln117_603_fu_1304_p2[0:0] == 1'b1) ? select_ln117_639_fu_1310_p3 : 5'd31);

assign and_ln102_606_fu_969_p2 = (xor_ln104_fu_964_p2 & icmp_ln86_1397_reg_1471);

assign and_ln102_607_fu_632_p2 = (icmp_ln86_633_fu_442_p2 & and_ln102_fu_614_p2);

assign and_ln102_608_fu_650_p2 = (icmp_ln86_634_fu_448_p2 & and_ln104_fu_626_p2);

assign and_ln102_609_fu_985_p2 = (icmp_ln86_635_reg_1477 & and_ln102_606_fu_969_p2);

assign and_ln102_610_fu_1001_p2 = (icmp_ln86_636_reg_1483 & and_ln104_124_fu_979_p2);

assign and_ln102_611_fu_668_p2 = (icmp_ln86_637_fu_466_p2 & and_ln102_607_fu_632_p2);

assign and_ln102_612_fu_680_p2 = (icmp_ln86_638_fu_472_p2 & and_ln104_125_fu_644_p2);

assign and_ln102_613_fu_692_p2 = (icmp_ln86_639_fu_478_p2 & and_ln102_608_fu_650_p2);

assign and_ln102_614_fu_698_p2 = (icmp_ln86_640_fu_484_p2 & and_ln104_126_fu_662_p2);

assign and_ln102_615_fu_1017_p2 = (icmp_ln86_641_reg_1489 & and_ln102_609_fu_985_p2);

assign and_ln102_616_fu_1027_p2 = (icmp_ln86_1398_reg_1495 & and_ln104_127_fu_995_p2);

assign and_ln102_617_fu_1037_p2 = (icmp_ln86_643_reg_1501 & and_ln102_610_fu_1001_p2);

assign and_ln102_618_fu_1047_p2 = (icmp_ln86_644_reg_1507 & and_ln104_128_fu_1011_p2);

assign and_ln102_619_fu_710_p2 = (icmp_ln86_645_fu_524_p2 & and_ln102_611_fu_668_p2);

assign and_ln102_620_fu_722_p2 = (and_ln102_634_fu_716_p2 & and_ln102_607_fu_632_p2);

assign and_ln102_621_fu_728_p2 = (icmp_ln86_647_fu_536_p2 & and_ln102_612_fu_680_p2);

assign and_ln102_622_fu_740_p2 = (and_ln104_125_fu_644_p2 & and_ln102_635_fu_734_p2);

assign and_ln102_623_fu_746_p2 = (icmp_ln86_649_fu_548_p2 & and_ln102_613_fu_692_p2);

assign and_ln102_624_fu_752_p2 = (icmp_ln86_650_fu_554_p2 & and_ln102_614_fu_698_p2);

assign and_ln102_625_fu_764_p2 = (and_ln104_126_fu_662_p2 & and_ln102_636_fu_758_p2);

assign and_ln102_626_fu_1057_p2 = (icmp_ln86_652_reg_1513 & and_ln102_615_fu_1017_p2);

assign and_ln102_627_fu_1067_p2 = (and_ln102_637_fu_1062_p2 & and_ln102_609_fu_985_p2);

assign and_ln102_628_fu_1073_p2 = (icmp_ln86_654_reg_1523 & and_ln102_616_fu_1027_p2);

assign and_ln102_629_fu_1083_p2 = (and_ln104_127_fu_995_p2 & and_ln102_638_fu_1078_p2);

assign and_ln102_630_fu_1089_p2 = (icmp_ln86_656_reg_1533 & and_ln102_617_fu_1037_p2);

assign and_ln102_631_fu_1099_p2 = (and_ln102_639_fu_1094_p2 & and_ln102_610_fu_1001_p2);

assign and_ln102_632_fu_1105_p2 = (icmp_ln86_658_reg_1543 & and_ln102_618_fu_1047_p2);

assign and_ln102_633_fu_1115_p2 = (and_ln104_128_fu_1011_p2 & and_ln102_640_fu_1110_p2);

assign and_ln102_634_fu_716_p2 = (xor_ln104_310_fu_674_p2 & icmp_ln86_646_fu_530_p2);

assign and_ln102_635_fu_734_p2 = (xor_ln104_311_fu_686_p2 & icmp_ln86_648_fu_542_p2);

assign and_ln102_636_fu_758_p2 = (xor_ln104_312_fu_704_p2 & icmp_ln86_651_fu_560_p2);

assign and_ln102_637_fu_1062_p2 = (xor_ln104_313_fu_1022_p2 & icmp_ln86_653_reg_1518);

assign and_ln102_638_fu_1078_p2 = (xor_ln104_314_fu_1032_p2 & icmp_ln86_655_reg_1528);

assign and_ln102_639_fu_1094_p2 = (xor_ln104_315_fu_1042_p2 & icmp_ln86_657_reg_1538);

assign and_ln102_640_fu_1110_p2 = (xor_ln104_316_fu_1052_p2 & icmp_ln86_659_reg_1548);

assign and_ln102_fu_614_p2 = (icmp_ln86_fu_414_p2 & icmp_ln86_631_fu_420_p2);

assign and_ln104_124_fu_979_p2 = (xor_ln104_fu_964_p2 & xor_ln104_305_fu_974_p2);

assign and_ln104_125_fu_644_p2 = (xor_ln104_306_fu_638_p2 & and_ln102_fu_614_p2);

assign and_ln104_126_fu_662_p2 = (xor_ln104_307_fu_656_p2 & and_ln104_fu_626_p2);

assign and_ln104_127_fu_995_p2 = (xor_ln104_308_fu_990_p2 & and_ln102_606_fu_969_p2);

assign and_ln104_128_fu_1011_p2 = (xor_ln104_309_fu_1006_p2 & and_ln104_124_fu_979_p2);

assign and_ln104_fu_626_p2 = (xor_ln104_304_fu_620_p2 & icmp_ln86_fu_414_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1326_p67;

assign icmp_ln86_1397_fu_436_p2 = (($signed(tmp_fu_426_p4) < $signed(17'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_1398_fu_506_p2 = (($signed(tmp_24_fu_496_p4) < $signed(15'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_631_fu_420_p2 = (($signed(x_48_val) < $signed(18'd80758)) ? 1'b1 : 1'b0);

assign icmp_ln86_633_fu_442_p2 = (($signed(x_48_val) < $signed(18'd74872)) ? 1'b1 : 1'b0);

assign icmp_ln86_634_fu_448_p2 = (($signed(x_21_val) < $signed(18'd268)) ? 1'b1 : 1'b0);

assign icmp_ln86_635_fu_454_p2 = (($signed(x_26_val) < $signed(18'd70034)) ? 1'b1 : 1'b0);

assign icmp_ln86_636_fu_460_p2 = (($signed(x_10_val) < $signed(18'd833)) ? 1'b1 : 1'b0);

assign icmp_ln86_637_fu_466_p2 = (($signed(x_19_val) < $signed(18'd2263)) ? 1'b1 : 1'b0);

assign icmp_ln86_638_fu_472_p2 = (($signed(x_50_val) < $signed(18'd77291)) ? 1'b1 : 1'b0);

assign icmp_ln86_639_fu_478_p2 = (($signed(x_38_val) < $signed(18'd9)) ? 1'b1 : 1'b0);

assign icmp_ln86_640_fu_484_p2 = (($signed(x_45_val) < $signed(18'd408)) ? 1'b1 : 1'b0);

assign icmp_ln86_641_fu_490_p2 = (($signed(x_1_val) < $signed(18'd155566)) ? 1'b1 : 1'b0);

assign icmp_ln86_643_fu_512_p2 = (($signed(x_23_val) < $signed(18'd11)) ? 1'b1 : 1'b0);

assign icmp_ln86_644_fu_518_p2 = (($signed(x_48_val) < $signed(18'd91026)) ? 1'b1 : 1'b0);

assign icmp_ln86_645_fu_524_p2 = (($signed(x_4_val) < $signed(18'd25281)) ? 1'b1 : 1'b0);

assign icmp_ln86_646_fu_530_p2 = (($signed(x_19_val) < $signed(18'd3006)) ? 1'b1 : 1'b0);

assign icmp_ln86_647_fu_536_p2 = (($signed(x_31_val) < $signed(18'd592)) ? 1'b1 : 1'b0);

assign icmp_ln86_648_fu_542_p2 = (($signed(x_38_val) < $signed(18'd12)) ? 1'b1 : 1'b0);

assign icmp_ln86_649_fu_548_p2 = (($signed(x_28_val) < $signed(18'd9006)) ? 1'b1 : 1'b0);

assign icmp_ln86_650_fu_554_p2 = (($signed(x_47_val) < $signed(18'd84767)) ? 1'b1 : 1'b0);

assign icmp_ln86_651_fu_560_p2 = (($signed(x_52_val) < $signed(18'd62977)) ? 1'b1 : 1'b0);

assign icmp_ln86_652_fu_566_p2 = (($signed(x_7_val) < $signed(18'd6208)) ? 1'b1 : 1'b0);

assign icmp_ln86_653_fu_572_p2 = (($signed(x_34_val) < $signed(18'd153)) ? 1'b1 : 1'b0);

assign icmp_ln86_654_fu_578_p2 = (($signed(x_51_val) < $signed(18'd492)) ? 1'b1 : 1'b0);

assign icmp_ln86_655_fu_584_p2 = (($signed(x_44_val) < $signed(18'd15)) ? 1'b1 : 1'b0);

assign icmp_ln86_656_fu_590_p2 = (($signed(x_21_val) < $signed(18'd83)) ? 1'b1 : 1'b0);

assign icmp_ln86_657_fu_596_p2 = (($signed(x_27_val) < $signed(18'd13159)) ? 1'b1 : 1'b0);

assign icmp_ln86_658_fu_602_p2 = (($signed(x_23_val) < $signed(18'd60)) ? 1'b1 : 1'b0);

assign icmp_ln86_659_fu_608_p2 = (($signed(x_49_val) < $signed(18'd83118)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_414_p2 = (($signed(x_47_val) < $signed(18'd85032)) ? 1'b1 : 1'b0);

assign or_ln117_580_fu_806_p2 = (and_ln102_621_fu_728_p2 | and_ln102_607_fu_632_p2);

assign or_ln117_581_fu_820_p2 = (and_ln102_612_fu_680_p2 | and_ln102_607_fu_632_p2);

assign or_ln117_582_fu_834_p2 = (or_ln117_581_fu_820_p2 | and_ln102_622_fu_740_p2);

assign or_ln117_583_fu_860_p2 = (and_ln102_fu_614_p2 | and_ln102_623_fu_746_p2);

assign or_ln117_584_fu_874_p2 = (and_ln102_fu_614_p2 | and_ln102_613_fu_692_p2);

assign or_ln117_585_fu_888_p2 = (and_ln102_fu_614_p2 | and_ln102_608_fu_650_p2);

assign or_ln117_586_fu_902_p2 = (or_ln117_585_fu_888_p2 | and_ln102_624_fu_752_p2);

assign or_ln117_587_fu_916_p2 = (or_ln117_585_fu_888_p2 | and_ln102_614_fu_698_p2);

assign or_ln117_588_fu_930_p2 = (or_ln117_587_fu_916_p2 | and_ln102_625_fu_764_p2);

assign or_ln117_589_fu_1121_p2 = (icmp_ln86_reg_1462 | and_ln102_626_fu_1057_p2);

assign or_ln117_590_fu_1126_p2 = (icmp_ln86_reg_1462 | and_ln102_615_fu_1017_p2);

assign or_ln117_591_fu_1138_p2 = (or_ln117_590_fu_1126_p2 | and_ln102_627_fu_1067_p2);

assign or_ln117_592_fu_1152_p2 = (icmp_ln86_reg_1462 | and_ln102_609_fu_985_p2);

assign or_ln117_593_fu_1165_p2 = (or_ln117_592_fu_1152_p2 | and_ln102_628_fu_1073_p2);

assign or_ln117_594_fu_1179_p2 = (or_ln117_592_fu_1152_p2 | and_ln102_616_fu_1027_p2);

assign or_ln117_595_fu_1193_p2 = (or_ln117_594_fu_1179_p2 | and_ln102_629_fu_1083_p2);

assign or_ln117_596_fu_1207_p2 = (icmp_ln86_reg_1462 | and_ln102_606_fu_969_p2);

assign or_ln117_597_fu_1220_p2 = (or_ln117_596_fu_1207_p2 | and_ln102_630_fu_1089_p2);

assign or_ln117_598_fu_1234_p2 = (or_ln117_596_fu_1207_p2 | and_ln102_617_fu_1037_p2);

assign or_ln117_599_fu_1248_p2 = (or_ln117_598_fu_1234_p2 | and_ln102_631_fu_1099_p2);

assign or_ln117_600_fu_1262_p2 = (or_ln117_596_fu_1207_p2 | and_ln102_610_fu_1001_p2);

assign or_ln117_601_fu_1276_p2 = (or_ln117_600_fu_1262_p2 | and_ln102_632_fu_1105_p2);

assign or_ln117_602_fu_1290_p2 = (or_ln117_600_fu_1262_p2 | and_ln102_618_fu_1047_p2);

assign or_ln117_603_fu_1304_p2 = (or_ln117_602_fu_1290_p2 | and_ln102_633_fu_1115_p2);

assign or_ln117_fu_780_p2 = (and_ln102_620_fu_722_p2 | and_ln102_611_fu_668_p2);

assign select_ln117_613_fu_794_p3 = ((or_ln117_fu_780_p2[0:0] == 1'b1) ? select_ln117_fu_786_p3 : 2'd3);

assign select_ln117_614_fu_812_p3 = ((and_ln102_607_fu_632_p2[0:0] == 1'b1) ? zext_ln117_69_fu_802_p1 : 3'd4);

assign select_ln117_615_fu_826_p3 = ((or_ln117_580_fu_806_p2[0:0] == 1'b1) ? select_ln117_614_fu_812_p3 : 3'd5);

assign select_ln117_616_fu_840_p3 = ((or_ln117_581_fu_820_p2[0:0] == 1'b1) ? select_ln117_615_fu_826_p3 : 3'd6);

assign select_ln117_617_fu_848_p3 = ((or_ln117_582_fu_834_p2[0:0] == 1'b1) ? select_ln117_616_fu_840_p3 : 3'd7);

assign select_ln117_618_fu_866_p3 = ((and_ln102_fu_614_p2[0:0] == 1'b1) ? zext_ln117_70_fu_856_p1 : 4'd8);

assign select_ln117_619_fu_880_p3 = ((or_ln117_583_fu_860_p2[0:0] == 1'b1) ? select_ln117_618_fu_866_p3 : 4'd9);

assign select_ln117_620_fu_894_p3 = ((or_ln117_584_fu_874_p2[0:0] == 1'b1) ? select_ln117_619_fu_880_p3 : 4'd11);

assign select_ln117_621_fu_908_p3 = ((or_ln117_585_fu_888_p2[0:0] == 1'b1) ? select_ln117_620_fu_894_p3 : 4'd12);

assign select_ln117_622_fu_922_p3 = ((or_ln117_586_fu_902_p2[0:0] == 1'b1) ? select_ln117_621_fu_908_p3 : 4'd13);

assign select_ln117_623_fu_936_p3 = ((or_ln117_587_fu_916_p2[0:0] == 1'b1) ? select_ln117_622_fu_922_p3 : 4'd14);

assign select_ln117_624_fu_944_p3 = ((or_ln117_588_fu_930_p2[0:0] == 1'b1) ? select_ln117_623_fu_936_p3 : 4'd15);

assign select_ln117_625_fu_956_p3 = ((icmp_ln86_fu_414_p2[0:0] == 1'b1) ? zext_ln117_71_fu_952_p1 : 5'd16);

assign select_ln117_626_fu_1131_p3 = ((or_ln117_589_fu_1121_p2[0:0] == 1'b1) ? select_ln117_625_reg_1553 : 5'd17);

assign select_ln117_627_fu_1144_p3 = ((or_ln117_590_fu_1126_p2[0:0] == 1'b1) ? select_ln117_626_fu_1131_p3 : 5'd18);

assign select_ln117_628_fu_1157_p3 = ((or_ln117_591_fu_1138_p2[0:0] == 1'b1) ? select_ln117_627_fu_1144_p3 : 5'd19);

assign select_ln117_629_fu_1171_p3 = ((or_ln117_592_fu_1152_p2[0:0] == 1'b1) ? select_ln117_628_fu_1157_p3 : 5'd20);

assign select_ln117_630_fu_1185_p3 = ((or_ln117_593_fu_1165_p2[0:0] == 1'b1) ? select_ln117_629_fu_1171_p3 : 5'd21);

assign select_ln117_631_fu_1199_p3 = ((or_ln117_594_fu_1179_p2[0:0] == 1'b1) ? select_ln117_630_fu_1185_p3 : 5'd22);

assign select_ln117_632_fu_1212_p3 = ((or_ln117_595_fu_1193_p2[0:0] == 1'b1) ? select_ln117_631_fu_1199_p3 : 5'd23);

assign select_ln117_633_fu_1226_p3 = ((or_ln117_596_fu_1207_p2[0:0] == 1'b1) ? select_ln117_632_fu_1212_p3 : 5'd24);

assign select_ln117_634_fu_1240_p3 = ((or_ln117_597_fu_1220_p2[0:0] == 1'b1) ? select_ln117_633_fu_1226_p3 : 5'd25);

assign select_ln117_635_fu_1254_p3 = ((or_ln117_598_fu_1234_p2[0:0] == 1'b1) ? select_ln117_634_fu_1240_p3 : 5'd26);

assign select_ln117_636_fu_1268_p3 = ((or_ln117_599_fu_1248_p2[0:0] == 1'b1) ? select_ln117_635_fu_1254_p3 : 5'd27);

assign select_ln117_637_fu_1282_p3 = ((or_ln117_600_fu_1262_p2[0:0] == 1'b1) ? select_ln117_636_fu_1268_p3 : 5'd28);

assign select_ln117_638_fu_1296_p3 = ((or_ln117_601_fu_1276_p2[0:0] == 1'b1) ? select_ln117_637_fu_1282_p3 : 5'd29);

assign select_ln117_639_fu_1310_p3 = ((or_ln117_602_fu_1290_p2[0:0] == 1'b1) ? select_ln117_638_fu_1296_p3 : 5'd30);

assign select_ln117_fu_786_p3 = ((and_ln102_611_fu_668_p2[0:0] == 1'b1) ? zext_ln117_fu_776_p1 : 2'd2);

assign tmp_24_fu_496_p4 = {{x_36_val[17:3]}};

assign tmp_fu_426_p4 = {{x_38_val[17:1]}};

assign xor_ln104_304_fu_620_p2 = (icmp_ln86_631_fu_420_p2 ^ 1'd1);

assign xor_ln104_305_fu_974_p2 = (icmp_ln86_1397_reg_1471 ^ 1'd1);

assign xor_ln104_306_fu_638_p2 = (icmp_ln86_633_fu_442_p2 ^ 1'd1);

assign xor_ln104_307_fu_656_p2 = (icmp_ln86_634_fu_448_p2 ^ 1'd1);

assign xor_ln104_308_fu_990_p2 = (icmp_ln86_635_reg_1477 ^ 1'd1);

assign xor_ln104_309_fu_1006_p2 = (icmp_ln86_636_reg_1483 ^ 1'd1);

assign xor_ln104_310_fu_674_p2 = (icmp_ln86_637_fu_466_p2 ^ 1'd1);

assign xor_ln104_311_fu_686_p2 = (icmp_ln86_638_fu_472_p2 ^ 1'd1);

assign xor_ln104_312_fu_704_p2 = (icmp_ln86_640_fu_484_p2 ^ 1'd1);

assign xor_ln104_313_fu_1022_p2 = (icmp_ln86_641_reg_1489 ^ 1'd1);

assign xor_ln104_314_fu_1032_p2 = (icmp_ln86_1398_reg_1495 ^ 1'd1);

assign xor_ln104_315_fu_1042_p2 = (icmp_ln86_643_reg_1501 ^ 1'd1);

assign xor_ln104_316_fu_1052_p2 = (icmp_ln86_644_reg_1507 ^ 1'd1);

assign xor_ln104_fu_964_p2 = (icmp_ln86_reg_1462 ^ 1'd1);

assign xor_ln117_fu_770_p2 = (1'd1 ^ and_ln102_619_fu_710_p2);

assign zext_ln117_69_fu_802_p1 = select_ln117_613_fu_794_p3;

assign zext_ln117_70_fu_856_p1 = select_ln117_617_fu_848_p3;

assign zext_ln117_71_fu_952_p1 = select_ln117_624_fu_944_p3;

assign zext_ln117_fu_776_p1 = xor_ln117_fu_770_p2;

endmodule //my_prj_decision_function_24
