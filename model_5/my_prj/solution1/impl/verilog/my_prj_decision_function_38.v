// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_38 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_2_val,
        x_7_val,
        x_9_val,
        x_10_val,
        x_15_val,
        x_17_val,
        x_19_val,
        x_22_val,
        x_23_val,
        x_31_val,
        x_32_val,
        x_34_val,
        x_37_val,
        x_38_val,
        x_39_val,
        x_40_val,
        x_44_val,
        x_48_val,
        x_49_val,
        x_50_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_2_val;
input  [17:0] x_7_val;
input  [17:0] x_9_val;
input  [17:0] x_10_val;
input  [17:0] x_15_val;
input  [17:0] x_17_val;
input  [17:0] x_19_val;
input  [17:0] x_22_val;
input  [17:0] x_23_val;
input  [17:0] x_31_val;
input  [17:0] x_32_val;
input  [17:0] x_34_val;
input  [17:0] x_37_val;
input  [17:0] x_38_val;
input  [17:0] x_39_val;
input  [17:0] x_40_val;
input  [17:0] x_44_val;
input  [17:0] x_48_val;
input  [17:0] x_49_val;
input  [17:0] x_50_val;
input  [17:0] x_52_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_412_p2;
reg   [0:0] icmp_ln86_reg_1477;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_989_fu_424_p2;
reg   [0:0] icmp_ln86_989_reg_1486;
wire   [0:0] icmp_ln86_992_fu_442_p2;
reg   [0:0] icmp_ln86_992_reg_1492;
wire   [0:0] icmp_ln86_993_fu_448_p2;
reg   [0:0] icmp_ln86_993_reg_1498;
wire   [0:0] icmp_ln86_998_fu_478_p2;
reg   [0:0] icmp_ln86_998_reg_1505;
wire   [0:0] icmp_ln86_999_fu_484_p2;
reg   [0:0] icmp_ln86_999_reg_1511;
wire   [0:0] icmp_ln86_1000_fu_490_p2;
reg   [0:0] icmp_ln86_1000_reg_1517;
wire   [0:0] icmp_ln86_1009_fu_554_p2;
reg   [0:0] icmp_ln86_1009_reg_1523;
wire   [0:0] icmp_ln86_1010_fu_560_p2;
reg   [0:0] icmp_ln86_1010_reg_1528;
wire   [0:0] icmp_ln86_1011_fu_566_p2;
reg   [0:0] icmp_ln86_1011_reg_1533;
wire   [0:0] icmp_ln86_1012_fu_572_p2;
reg   [0:0] icmp_ln86_1012_reg_1538;
wire   [0:0] icmp_ln86_1013_fu_578_p2;
reg   [0:0] icmp_ln86_1013_reg_1543;
wire   [0:0] icmp_ln86_1014_fu_584_p2;
reg   [0:0] icmp_ln86_1014_reg_1548;
wire   [0:0] icmp_ln86_1015_fu_590_p2;
reg   [0:0] icmp_ln86_1015_reg_1553;
wire   [0:0] icmp_ln86_1016_fu_596_p2;
reg   [0:0] icmp_ln86_1016_reg_1558;
wire   [4:0] select_ln117_969_fu_976_p3;
reg   [4:0] select_ln117_969_reg_1563;
wire    ap_block_pp0_stage0;
wire   [16:0] tmp_fu_520_p4;
wire   [0:0] icmp_ln86_988_fu_418_p2;
wire   [0:0] xor_ln104_474_fu_608_p2;
wire   [0:0] icmp_ln86_990_fu_430_p2;
wire   [0:0] and_ln102_fu_602_p2;
wire   [0:0] xor_ln104_476_fu_626_p2;
wire   [0:0] icmp_ln86_991_fu_436_p2;
wire   [0:0] and_ln104_fu_614_p2;
wire   [0:0] xor_ln104_477_fu_644_p2;
wire   [0:0] icmp_ln86_994_fu_454_p2;
wire   [0:0] and_ln102_950_fu_620_p2;
wire   [0:0] icmp_ln86_995_fu_460_p2;
wire   [0:0] and_ln104_193_fu_632_p2;
wire   [0:0] icmp_ln86_996_fu_466_p2;
wire   [0:0] and_ln102_951_fu_638_p2;
wire   [0:0] icmp_ln86_997_fu_472_p2;
wire   [0:0] and_ln104_194_fu_650_p2;
wire   [0:0] icmp_ln86_1001_fu_496_p2;
wire   [0:0] and_ln102_954_fu_656_p2;
wire   [0:0] icmp_ln86_1002_fu_502_p2;
wire   [0:0] xor_ln104_480_fu_662_p2;
wire   [0:0] and_ln102_978_fu_710_p2;
wire   [0:0] icmp_ln86_1003_fu_508_p2;
wire   [0:0] and_ln102_955_fu_668_p2;
wire   [0:0] icmp_ln86_1004_fu_514_p2;
wire   [0:0] xor_ln104_481_fu_674_p2;
wire   [0:0] and_ln102_979_fu_728_p2;
wire   [0:0] icmp_ln86_1391_fu_530_p2;
wire   [0:0] and_ln102_956_fu_680_p2;
wire   [0:0] icmp_ln86_1006_fu_536_p2;
wire   [0:0] xor_ln104_482_fu_686_p2;
wire   [0:0] and_ln102_980_fu_746_p2;
wire   [0:0] icmp_ln86_1007_fu_542_p2;
wire   [0:0] and_ln102_957_fu_692_p2;
wire   [0:0] icmp_ln86_1008_fu_548_p2;
wire   [0:0] xor_ln104_483_fu_698_p2;
wire   [0:0] and_ln102_981_fu_764_p2;
wire   [0:0] and_ln102_962_fu_704_p2;
wire   [0:0] xor_ln117_fu_776_p2;
wire   [0:0] and_ln102_963_fu_716_p2;
wire   [1:0] zext_ln117_fu_782_p1;
wire   [0:0] or_ln117_fu_786_p2;
wire   [1:0] select_ln117_fu_792_p3;
wire   [1:0] select_ln117_956_fu_800_p3;
wire   [0:0] and_ln102_964_fu_722_p2;
wire   [2:0] zext_ln117_111_fu_808_p1;
wire   [0:0] or_ln117_902_fu_812_p2;
wire   [2:0] select_ln117_957_fu_818_p3;
wire   [0:0] or_ln117_903_fu_826_p2;
wire   [0:0] and_ln102_965_fu_734_p2;
wire   [2:0] select_ln117_958_fu_832_p3;
wire   [0:0] or_ln117_904_fu_840_p2;
wire   [2:0] select_ln117_959_fu_846_p3;
wire   [2:0] select_ln117_960_fu_854_p3;
wire   [0:0] and_ln102_966_fu_740_p2;
wire   [3:0] zext_ln117_112_fu_862_p1;
wire   [0:0] or_ln117_905_fu_866_p2;
wire   [3:0] select_ln117_961_fu_872_p3;
wire   [0:0] or_ln117_906_fu_880_p2;
wire   [0:0] and_ln102_967_fu_752_p2;
wire   [3:0] select_ln117_962_fu_886_p3;
wire   [0:0] or_ln117_907_fu_894_p2;
wire   [3:0] select_ln117_963_fu_900_p3;
wire   [0:0] or_ln117_908_fu_908_p2;
wire   [0:0] and_ln102_968_fu_758_p2;
wire   [3:0] select_ln117_964_fu_914_p3;
wire   [0:0] or_ln117_909_fu_922_p2;
wire   [3:0] select_ln117_965_fu_928_p3;
wire   [0:0] or_ln117_910_fu_936_p2;
wire   [0:0] and_ln102_969_fu_770_p2;
wire   [3:0] select_ln117_966_fu_942_p3;
wire   [0:0] or_ln117_911_fu_950_p2;
wire   [3:0] select_ln117_967_fu_956_p3;
wire   [3:0] select_ln117_968_fu_964_p3;
wire   [4:0] zext_ln117_113_fu_972_p1;
wire   [0:0] xor_ln104_fu_984_p2;
wire   [0:0] xor_ln104_475_fu_994_p2;
wire   [0:0] and_ln102_949_fu_989_p2;
wire   [0:0] xor_ln104_478_fu_1010_p2;
wire   [0:0] and_ln104_192_fu_999_p2;
wire   [0:0] xor_ln104_479_fu_1026_p2;
wire   [0:0] and_ln102_952_fu_1005_p2;
wire   [0:0] and_ln104_195_fu_1015_p2;
wire   [0:0] and_ln102_953_fu_1021_p2;
wire   [0:0] and_ln104_196_fu_1031_p2;
wire   [0:0] and_ln102_958_fu_1037_p2;
wire   [0:0] and_ln102_982_fu_1077_p2;
wire   [0:0] and_ln102_959_fu_1042_p2;
wire   [0:0] xor_ln104_484_fu_1047_p2;
wire   [0:0] and_ln102_983_fu_1093_p2;
wire   [0:0] and_ln102_960_fu_1052_p2;
wire   [0:0] xor_ln104_485_fu_1057_p2;
wire   [0:0] and_ln102_984_fu_1109_p2;
wire   [0:0] and_ln102_961_fu_1062_p2;
wire   [0:0] xor_ln104_486_fu_1067_p2;
wire   [0:0] and_ln102_985_fu_1125_p2;
wire   [0:0] and_ln102_970_fu_1072_p2;
wire   [0:0] or_ln117_912_fu_1136_p2;
wire   [0:0] or_ln117_913_fu_1141_p2;
wire   [0:0] and_ln102_971_fu_1082_p2;
wire   [4:0] select_ln117_970_fu_1146_p3;
wire   [0:0] or_ln117_914_fu_1153_p2;
wire   [4:0] select_ln117_971_fu_1159_p3;
wire   [0:0] or_ln117_915_fu_1167_p2;
wire   [0:0] and_ln102_972_fu_1088_p2;
wire   [4:0] select_ln117_972_fu_1172_p3;
wire   [0:0] or_ln117_916_fu_1180_p2;
wire   [4:0] select_ln117_973_fu_1186_p3;
wire   [0:0] or_ln117_917_fu_1194_p2;
wire   [0:0] and_ln102_973_fu_1098_p2;
wire   [4:0] select_ln117_974_fu_1200_p3;
wire   [0:0] or_ln117_918_fu_1208_p2;
wire   [4:0] select_ln117_975_fu_1214_p3;
wire   [0:0] or_ln117_919_fu_1222_p2;
wire   [0:0] and_ln102_974_fu_1104_p2;
wire   [4:0] select_ln117_976_fu_1227_p3;
wire   [0:0] or_ln117_920_fu_1235_p2;
wire   [4:0] select_ln117_977_fu_1241_p3;
wire   [0:0] or_ln117_921_fu_1249_p2;
wire   [0:0] and_ln102_975_fu_1114_p2;
wire   [4:0] select_ln117_978_fu_1255_p3;
wire   [0:0] or_ln117_922_fu_1263_p2;
wire   [4:0] select_ln117_979_fu_1269_p3;
wire   [0:0] or_ln117_923_fu_1277_p2;
wire   [0:0] and_ln102_976_fu_1120_p2;
wire   [4:0] select_ln117_980_fu_1283_p3;
wire   [0:0] or_ln117_924_fu_1291_p2;
wire   [4:0] select_ln117_981_fu_1297_p3;
wire   [0:0] or_ln117_925_fu_1305_p2;
wire   [0:0] and_ln102_977_fu_1130_p2;
wire   [4:0] select_ln117_982_fu_1311_p3;
wire   [0:0] or_ln117_926_fu_1319_p2;
wire   [4:0] select_ln117_983_fu_1325_p3;
wire   [11:0] agg_result_fu_1341_p65;
wire   [4:0] agg_result_fu_1341_p66;
wire   [11:0] agg_result_fu_1341_p67;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1341_p1;
wire   [4:0] agg_result_fu_1341_p3;
wire   [4:0] agg_result_fu_1341_p5;
wire   [4:0] agg_result_fu_1341_p7;
wire   [4:0] agg_result_fu_1341_p9;
wire   [4:0] agg_result_fu_1341_p11;
wire   [4:0] agg_result_fu_1341_p13;
wire   [4:0] agg_result_fu_1341_p15;
wire   [4:0] agg_result_fu_1341_p17;
wire   [4:0] agg_result_fu_1341_p19;
wire   [4:0] agg_result_fu_1341_p21;
wire   [4:0] agg_result_fu_1341_p23;
wire   [4:0] agg_result_fu_1341_p25;
wire   [4:0] agg_result_fu_1341_p27;
wire   [4:0] agg_result_fu_1341_p29;
wire   [4:0] agg_result_fu_1341_p31;
wire  signed [4:0] agg_result_fu_1341_p33;
wire  signed [4:0] agg_result_fu_1341_p35;
wire  signed [4:0] agg_result_fu_1341_p37;
wire  signed [4:0] agg_result_fu_1341_p39;
wire  signed [4:0] agg_result_fu_1341_p41;
wire  signed [4:0] agg_result_fu_1341_p43;
wire  signed [4:0] agg_result_fu_1341_p45;
wire  signed [4:0] agg_result_fu_1341_p47;
wire  signed [4:0] agg_result_fu_1341_p49;
wire  signed [4:0] agg_result_fu_1341_p51;
wire  signed [4:0] agg_result_fu_1341_p53;
wire  signed [4:0] agg_result_fu_1341_p55;
wire  signed [4:0] agg_result_fu_1341_p57;
wire  signed [4:0] agg_result_fu_1341_p59;
wire  signed [4:0] agg_result_fu_1341_p61;
wire  signed [4:0] agg_result_fu_1341_p63;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_65_5_12_1_1_x26 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 12 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 12 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 12 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 12 ),
    .CASE31( 5'h1F ),
    .din31_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_65_5_12_1_1_x26_U1360(
    .din0(12'd435),
    .din1(12'd4022),
    .din2(12'd312),
    .din3(12'd3963),
    .din4(12'd289),
    .din5(12'd3944),
    .din6(12'd3889),
    .din7(12'd3572),
    .din8(12'd3820),
    .din9(12'd1666),
    .din10(12'd3788),
    .din11(12'd788),
    .din12(12'd234),
    .din13(12'd13),
    .din14(12'd4036),
    .din15(12'd39),
    .din16(12'd272),
    .din17(12'd94),
    .din18(12'd4040),
    .din19(12'd150),
    .din20(12'd3551),
    .din21(12'd242),
    .din22(12'd524),
    .din23(12'd11),
    .din24(12'd110),
    .din25(12'd3690),
    .din26(12'd3709),
    .din27(12'd1486),
    .din28(12'd37),
    .din29(12'd4059),
    .din30(12'd4018),
    .din31(12'd146),
    .def(agg_result_fu_1341_p65),
    .sel(agg_result_fu_1341_p66),
    .dout(agg_result_fu_1341_p67)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_1000_reg_1517 <= icmp_ln86_1000_fu_490_p2;
        icmp_ln86_1009_reg_1523 <= icmp_ln86_1009_fu_554_p2;
        icmp_ln86_1010_reg_1528 <= icmp_ln86_1010_fu_560_p2;
        icmp_ln86_1011_reg_1533 <= icmp_ln86_1011_fu_566_p2;
        icmp_ln86_1012_reg_1538 <= icmp_ln86_1012_fu_572_p2;
        icmp_ln86_1013_reg_1543 <= icmp_ln86_1013_fu_578_p2;
        icmp_ln86_1014_reg_1548 <= icmp_ln86_1014_fu_584_p2;
        icmp_ln86_1015_reg_1553 <= icmp_ln86_1015_fu_590_p2;
        icmp_ln86_1016_reg_1558 <= icmp_ln86_1016_fu_596_p2;
        icmp_ln86_989_reg_1486 <= icmp_ln86_989_fu_424_p2;
        icmp_ln86_992_reg_1492 <= icmp_ln86_992_fu_442_p2;
        icmp_ln86_993_reg_1498 <= icmp_ln86_993_fu_448_p2;
        icmp_ln86_998_reg_1505 <= icmp_ln86_998_fu_478_p2;
        icmp_ln86_999_reg_1511 <= icmp_ln86_999_fu_484_p2;
        icmp_ln86_reg_1477 <= icmp_ln86_fu_412_p2;
        select_ln117_969_reg_1563 <= select_ln117_969_fu_976_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1341_p65 = 'bx;

assign agg_result_fu_1341_p66 = ((or_ln117_926_fu_1319_p2[0:0] == 1'b1) ? select_ln117_983_fu_1325_p3 : 5'd31);

assign and_ln102_949_fu_989_p2 = (xor_ln104_fu_984_p2 & icmp_ln86_989_reg_1486);

assign and_ln102_950_fu_620_p2 = (icmp_ln86_990_fu_430_p2 & and_ln102_fu_602_p2);

assign and_ln102_951_fu_638_p2 = (icmp_ln86_991_fu_436_p2 & and_ln104_fu_614_p2);

assign and_ln102_952_fu_1005_p2 = (icmp_ln86_992_reg_1492 & and_ln102_949_fu_989_p2);

assign and_ln102_953_fu_1021_p2 = (icmp_ln86_993_reg_1498 & and_ln104_192_fu_999_p2);

assign and_ln102_954_fu_656_p2 = (icmp_ln86_994_fu_454_p2 & and_ln102_950_fu_620_p2);

assign and_ln102_955_fu_668_p2 = (icmp_ln86_995_fu_460_p2 & and_ln104_193_fu_632_p2);

assign and_ln102_956_fu_680_p2 = (icmp_ln86_996_fu_466_p2 & and_ln102_951_fu_638_p2);

assign and_ln102_957_fu_692_p2 = (icmp_ln86_997_fu_472_p2 & and_ln104_194_fu_650_p2);

assign and_ln102_958_fu_1037_p2 = (icmp_ln86_993_reg_1498 & and_ln102_952_fu_1005_p2);

assign and_ln102_959_fu_1042_p2 = (icmp_ln86_998_reg_1505 & and_ln104_195_fu_1015_p2);

assign and_ln102_960_fu_1052_p2 = (icmp_ln86_999_reg_1511 & and_ln102_953_fu_1021_p2);

assign and_ln102_961_fu_1062_p2 = (icmp_ln86_1000_reg_1517 & and_ln104_196_fu_1031_p2);

assign and_ln102_962_fu_704_p2 = (icmp_ln86_1001_fu_496_p2 & and_ln102_954_fu_656_p2);

assign and_ln102_963_fu_716_p2 = (and_ln102_978_fu_710_p2 & and_ln102_950_fu_620_p2);

assign and_ln102_964_fu_722_p2 = (icmp_ln86_1003_fu_508_p2 & and_ln102_955_fu_668_p2);

assign and_ln102_965_fu_734_p2 = (and_ln104_193_fu_632_p2 & and_ln102_979_fu_728_p2);

assign and_ln102_966_fu_740_p2 = (icmp_ln86_1391_fu_530_p2 & and_ln102_956_fu_680_p2);

assign and_ln102_967_fu_752_p2 = (and_ln102_980_fu_746_p2 & and_ln102_951_fu_638_p2);

assign and_ln102_968_fu_758_p2 = (icmp_ln86_1007_fu_542_p2 & and_ln102_957_fu_692_p2);

assign and_ln102_969_fu_770_p2 = (and_ln104_194_fu_650_p2 & and_ln102_981_fu_764_p2);

assign and_ln102_970_fu_1072_p2 = (icmp_ln86_1009_reg_1523 & and_ln102_958_fu_1037_p2);

assign and_ln102_971_fu_1082_p2 = (and_ln102_982_fu_1077_p2 & and_ln102_952_fu_1005_p2);

assign and_ln102_972_fu_1088_p2 = (icmp_ln86_1011_reg_1533 & and_ln102_959_fu_1042_p2);

assign and_ln102_973_fu_1098_p2 = (and_ln104_195_fu_1015_p2 & and_ln102_983_fu_1093_p2);

assign and_ln102_974_fu_1104_p2 = (icmp_ln86_1013_reg_1543 & and_ln102_960_fu_1052_p2);

assign and_ln102_975_fu_1114_p2 = (and_ln102_984_fu_1109_p2 & and_ln102_953_fu_1021_p2);

assign and_ln102_976_fu_1120_p2 = (icmp_ln86_1015_reg_1553 & and_ln102_961_fu_1062_p2);

assign and_ln102_977_fu_1130_p2 = (and_ln104_196_fu_1031_p2 & and_ln102_985_fu_1125_p2);

assign and_ln102_978_fu_710_p2 = (xor_ln104_480_fu_662_p2 & icmp_ln86_1002_fu_502_p2);

assign and_ln102_979_fu_728_p2 = (xor_ln104_481_fu_674_p2 & icmp_ln86_1004_fu_514_p2);

assign and_ln102_980_fu_746_p2 = (xor_ln104_482_fu_686_p2 & icmp_ln86_1006_fu_536_p2);

assign and_ln102_981_fu_764_p2 = (xor_ln104_483_fu_698_p2 & icmp_ln86_1008_fu_548_p2);

assign and_ln102_982_fu_1077_p2 = (xor_ln104_479_fu_1026_p2 & icmp_ln86_1010_reg_1528);

assign and_ln102_983_fu_1093_p2 = (xor_ln104_484_fu_1047_p2 & icmp_ln86_1012_reg_1538);

assign and_ln102_984_fu_1109_p2 = (xor_ln104_485_fu_1057_p2 & icmp_ln86_1014_reg_1548);

assign and_ln102_985_fu_1125_p2 = (xor_ln104_486_fu_1067_p2 & icmp_ln86_1016_reg_1558);

assign and_ln102_fu_602_p2 = (icmp_ln86_fu_412_p2 & icmp_ln86_988_fu_418_p2);

assign and_ln104_192_fu_999_p2 = (xor_ln104_fu_984_p2 & xor_ln104_475_fu_994_p2);

assign and_ln104_193_fu_632_p2 = (xor_ln104_476_fu_626_p2 & and_ln102_fu_602_p2);

assign and_ln104_194_fu_650_p2 = (xor_ln104_477_fu_644_p2 & and_ln104_fu_614_p2);

assign and_ln104_195_fu_1015_p2 = (xor_ln104_478_fu_1010_p2 & and_ln102_949_fu_989_p2);

assign and_ln104_196_fu_1031_p2 = (xor_ln104_479_fu_1026_p2 & and_ln104_192_fu_999_p2);

assign and_ln104_fu_614_p2 = (xor_ln104_474_fu_608_p2 & icmp_ln86_fu_412_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1341_p67;

assign icmp_ln86_1000_fu_490_p2 = (($signed(x_1_val) < $signed(18'd80350)) ? 1'b1 : 1'b0);

assign icmp_ln86_1001_fu_496_p2 = (($signed(x_34_val) < $signed(18'd214)) ? 1'b1 : 1'b0);

assign icmp_ln86_1002_fu_502_p2 = (($signed(x_32_val) < $signed(18'd885)) ? 1'b1 : 1'b0);

assign icmp_ln86_1003_fu_508_p2 = (($signed(x_19_val) < $signed(18'd1211)) ? 1'b1 : 1'b0);

assign icmp_ln86_1004_fu_514_p2 = (($signed(x_23_val) < $signed(18'd43)) ? 1'b1 : 1'b0);

assign icmp_ln86_1006_fu_536_p2 = (($signed(x_19_val) < $signed(18'd251626)) ? 1'b1 : 1'b0);

assign icmp_ln86_1007_fu_542_p2 = (($signed(x_44_val) < $signed(18'd34)) ? 1'b1 : 1'b0);

assign icmp_ln86_1008_fu_548_p2 = (($signed(x_34_val) < $signed(18'd479)) ? 1'b1 : 1'b0);

assign icmp_ln86_1009_fu_554_p2 = (($signed(x_2_val) < $signed(18'd262136)) ? 1'b1 : 1'b0);

assign icmp_ln86_1010_fu_560_p2 = (($signed(x_9_val) < $signed(18'd1118)) ? 1'b1 : 1'b0);

assign icmp_ln86_1011_fu_566_p2 = (($signed(x_40_val) < $signed(18'd1003)) ? 1'b1 : 1'b0);

assign icmp_ln86_1012_fu_572_p2 = (($signed(x_31_val) < $signed(18'd763)) ? 1'b1 : 1'b0);

assign icmp_ln86_1013_fu_578_p2 = (($signed(x_50_val) < $signed(18'd85155)) ? 1'b1 : 1'b0);

assign icmp_ln86_1014_fu_584_p2 = (($signed(x_10_val) < $signed(18'd757)) ? 1'b1 : 1'b0);

assign icmp_ln86_1015_fu_590_p2 = (($signed(x_1_val) < $signed(18'd216273)) ? 1'b1 : 1'b0);

assign icmp_ln86_1016_fu_596_p2 = (($signed(x_10_val) < $signed(18'd594)) ? 1'b1 : 1'b0);

assign icmp_ln86_1391_fu_530_p2 = (($signed(tmp_fu_520_p4) < $signed(17'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_988_fu_418_p2 = (($signed(x_39_val) < $signed(18'd1219)) ? 1'b1 : 1'b0);

assign icmp_ln86_989_fu_424_p2 = (($signed(x_48_val) < $signed(18'd84188)) ? 1'b1 : 1'b0);

assign icmp_ln86_990_fu_430_p2 = (($signed(x_22_val) < $signed(18'd84)) ? 1'b1 : 1'b0);

assign icmp_ln86_991_fu_436_p2 = (($signed(x_52_val) < $signed(18'd29185)) ? 1'b1 : 1'b0);

assign icmp_ln86_992_fu_442_p2 = (($signed(x_19_val) < $signed(18'd3962)) ? 1'b1 : 1'b0);

assign icmp_ln86_993_fu_448_p2 = (($signed(x_15_val) < $signed(18'd7)) ? 1'b1 : 1'b0);

assign icmp_ln86_994_fu_454_p2 = (($signed(x_34_val) < $signed(18'd472)) ? 1'b1 : 1'b0);

assign icmp_ln86_995_fu_460_p2 = (($signed(x_32_val) < $signed(18'd870)) ? 1'b1 : 1'b0);

assign icmp_ln86_996_fu_466_p2 = (($signed(x_38_val) < $signed(18'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_997_fu_472_p2 = (($signed(x_7_val) < $signed(18'd4515)) ? 1'b1 : 1'b0);

assign icmp_ln86_998_fu_478_p2 = (($signed(x_17_val) < $signed(18'd26)) ? 1'b1 : 1'b0);

assign icmp_ln86_999_fu_484_p2 = (($signed(x_17_val) < $signed(18'd28)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_412_p2 = (($signed(x_49_val) < $signed(18'd76961)) ? 1'b1 : 1'b0);

assign or_ln117_902_fu_812_p2 = (and_ln102_964_fu_722_p2 | and_ln102_950_fu_620_p2);

assign or_ln117_903_fu_826_p2 = (and_ln102_955_fu_668_p2 | and_ln102_950_fu_620_p2);

assign or_ln117_904_fu_840_p2 = (or_ln117_903_fu_826_p2 | and_ln102_965_fu_734_p2);

assign or_ln117_905_fu_866_p2 = (and_ln102_fu_602_p2 | and_ln102_966_fu_740_p2);

assign or_ln117_906_fu_880_p2 = (and_ln102_fu_602_p2 | and_ln102_956_fu_680_p2);

assign or_ln117_907_fu_894_p2 = (or_ln117_906_fu_880_p2 | and_ln102_967_fu_752_p2);

assign or_ln117_908_fu_908_p2 = (and_ln102_fu_602_p2 | and_ln102_951_fu_638_p2);

assign or_ln117_909_fu_922_p2 = (or_ln117_908_fu_908_p2 | and_ln102_968_fu_758_p2);

assign or_ln117_910_fu_936_p2 = (or_ln117_908_fu_908_p2 | and_ln102_957_fu_692_p2);

assign or_ln117_911_fu_950_p2 = (or_ln117_910_fu_936_p2 | and_ln102_969_fu_770_p2);

assign or_ln117_912_fu_1136_p2 = (icmp_ln86_reg_1477 | and_ln102_970_fu_1072_p2);

assign or_ln117_913_fu_1141_p2 = (icmp_ln86_reg_1477 | and_ln102_958_fu_1037_p2);

assign or_ln117_914_fu_1153_p2 = (or_ln117_913_fu_1141_p2 | and_ln102_971_fu_1082_p2);

assign or_ln117_915_fu_1167_p2 = (icmp_ln86_reg_1477 | and_ln102_952_fu_1005_p2);

assign or_ln117_916_fu_1180_p2 = (or_ln117_915_fu_1167_p2 | and_ln102_972_fu_1088_p2);

assign or_ln117_917_fu_1194_p2 = (or_ln117_915_fu_1167_p2 | and_ln102_959_fu_1042_p2);

assign or_ln117_918_fu_1208_p2 = (or_ln117_917_fu_1194_p2 | and_ln102_973_fu_1098_p2);

assign or_ln117_919_fu_1222_p2 = (icmp_ln86_reg_1477 | and_ln102_949_fu_989_p2);

assign or_ln117_920_fu_1235_p2 = (or_ln117_919_fu_1222_p2 | and_ln102_974_fu_1104_p2);

assign or_ln117_921_fu_1249_p2 = (or_ln117_919_fu_1222_p2 | and_ln102_960_fu_1052_p2);

assign or_ln117_922_fu_1263_p2 = (or_ln117_921_fu_1249_p2 | and_ln102_975_fu_1114_p2);

assign or_ln117_923_fu_1277_p2 = (or_ln117_919_fu_1222_p2 | and_ln102_953_fu_1021_p2);

assign or_ln117_924_fu_1291_p2 = (or_ln117_923_fu_1277_p2 | and_ln102_976_fu_1120_p2);

assign or_ln117_925_fu_1305_p2 = (or_ln117_923_fu_1277_p2 | and_ln102_961_fu_1062_p2);

assign or_ln117_926_fu_1319_p2 = (or_ln117_925_fu_1305_p2 | and_ln102_977_fu_1130_p2);

assign or_ln117_fu_786_p2 = (and_ln102_963_fu_716_p2 | and_ln102_954_fu_656_p2);

assign select_ln117_956_fu_800_p3 = ((or_ln117_fu_786_p2[0:0] == 1'b1) ? select_ln117_fu_792_p3 : 2'd3);

assign select_ln117_957_fu_818_p3 = ((and_ln102_950_fu_620_p2[0:0] == 1'b1) ? zext_ln117_111_fu_808_p1 : 3'd4);

assign select_ln117_958_fu_832_p3 = ((or_ln117_902_fu_812_p2[0:0] == 1'b1) ? select_ln117_957_fu_818_p3 : 3'd5);

assign select_ln117_959_fu_846_p3 = ((or_ln117_903_fu_826_p2[0:0] == 1'b1) ? select_ln117_958_fu_832_p3 : 3'd6);

assign select_ln117_960_fu_854_p3 = ((or_ln117_904_fu_840_p2[0:0] == 1'b1) ? select_ln117_959_fu_846_p3 : 3'd7);

assign select_ln117_961_fu_872_p3 = ((and_ln102_fu_602_p2[0:0] == 1'b1) ? zext_ln117_112_fu_862_p1 : 4'd8);

assign select_ln117_962_fu_886_p3 = ((or_ln117_905_fu_866_p2[0:0] == 1'b1) ? select_ln117_961_fu_872_p3 : 4'd9);

assign select_ln117_963_fu_900_p3 = ((or_ln117_906_fu_880_p2[0:0] == 1'b1) ? select_ln117_962_fu_886_p3 : 4'd10);

assign select_ln117_964_fu_914_p3 = ((or_ln117_907_fu_894_p2[0:0] == 1'b1) ? select_ln117_963_fu_900_p3 : 4'd11);

assign select_ln117_965_fu_928_p3 = ((or_ln117_908_fu_908_p2[0:0] == 1'b1) ? select_ln117_964_fu_914_p3 : 4'd12);

assign select_ln117_966_fu_942_p3 = ((or_ln117_909_fu_922_p2[0:0] == 1'b1) ? select_ln117_965_fu_928_p3 : 4'd13);

assign select_ln117_967_fu_956_p3 = ((or_ln117_910_fu_936_p2[0:0] == 1'b1) ? select_ln117_966_fu_942_p3 : 4'd14);

assign select_ln117_968_fu_964_p3 = ((or_ln117_911_fu_950_p2[0:0] == 1'b1) ? select_ln117_967_fu_956_p3 : 4'd15);

assign select_ln117_969_fu_976_p3 = ((icmp_ln86_fu_412_p2[0:0] == 1'b1) ? zext_ln117_113_fu_972_p1 : 5'd16);

assign select_ln117_970_fu_1146_p3 = ((or_ln117_912_fu_1136_p2[0:0] == 1'b1) ? select_ln117_969_reg_1563 : 5'd17);

assign select_ln117_971_fu_1159_p3 = ((or_ln117_913_fu_1141_p2[0:0] == 1'b1) ? select_ln117_970_fu_1146_p3 : 5'd18);

assign select_ln117_972_fu_1172_p3 = ((or_ln117_914_fu_1153_p2[0:0] == 1'b1) ? select_ln117_971_fu_1159_p3 : 5'd19);

assign select_ln117_973_fu_1186_p3 = ((or_ln117_915_fu_1167_p2[0:0] == 1'b1) ? select_ln117_972_fu_1172_p3 : 5'd20);

assign select_ln117_974_fu_1200_p3 = ((or_ln117_916_fu_1180_p2[0:0] == 1'b1) ? select_ln117_973_fu_1186_p3 : 5'd21);

assign select_ln117_975_fu_1214_p3 = ((or_ln117_917_fu_1194_p2[0:0] == 1'b1) ? select_ln117_974_fu_1200_p3 : 5'd22);

assign select_ln117_976_fu_1227_p3 = ((or_ln117_918_fu_1208_p2[0:0] == 1'b1) ? select_ln117_975_fu_1214_p3 : 5'd23);

assign select_ln117_977_fu_1241_p3 = ((or_ln117_919_fu_1222_p2[0:0] == 1'b1) ? select_ln117_976_fu_1227_p3 : 5'd24);

assign select_ln117_978_fu_1255_p3 = ((or_ln117_920_fu_1235_p2[0:0] == 1'b1) ? select_ln117_977_fu_1241_p3 : 5'd25);

assign select_ln117_979_fu_1269_p3 = ((or_ln117_921_fu_1249_p2[0:0] == 1'b1) ? select_ln117_978_fu_1255_p3 : 5'd26);

assign select_ln117_980_fu_1283_p3 = ((or_ln117_922_fu_1263_p2[0:0] == 1'b1) ? select_ln117_979_fu_1269_p3 : 5'd27);

assign select_ln117_981_fu_1297_p3 = ((or_ln117_923_fu_1277_p2[0:0] == 1'b1) ? select_ln117_980_fu_1283_p3 : 5'd28);

assign select_ln117_982_fu_1311_p3 = ((or_ln117_924_fu_1291_p2[0:0] == 1'b1) ? select_ln117_981_fu_1297_p3 : 5'd29);

assign select_ln117_983_fu_1325_p3 = ((or_ln117_925_fu_1305_p2[0:0] == 1'b1) ? select_ln117_982_fu_1311_p3 : 5'd30);

assign select_ln117_fu_792_p3 = ((and_ln102_954_fu_656_p2[0:0] == 1'b1) ? zext_ln117_fu_782_p1 : 2'd2);

assign tmp_fu_520_p4 = {{x_37_val[17:1]}};

assign xor_ln104_474_fu_608_p2 = (icmp_ln86_988_fu_418_p2 ^ 1'd1);

assign xor_ln104_475_fu_994_p2 = (icmp_ln86_989_reg_1486 ^ 1'd1);

assign xor_ln104_476_fu_626_p2 = (icmp_ln86_990_fu_430_p2 ^ 1'd1);

assign xor_ln104_477_fu_644_p2 = (icmp_ln86_991_fu_436_p2 ^ 1'd1);

assign xor_ln104_478_fu_1010_p2 = (icmp_ln86_992_reg_1492 ^ 1'd1);

assign xor_ln104_479_fu_1026_p2 = (icmp_ln86_993_reg_1498 ^ 1'd1);

assign xor_ln104_480_fu_662_p2 = (icmp_ln86_994_fu_454_p2 ^ 1'd1);

assign xor_ln104_481_fu_674_p2 = (icmp_ln86_995_fu_460_p2 ^ 1'd1);

assign xor_ln104_482_fu_686_p2 = (icmp_ln86_996_fu_466_p2 ^ 1'd1);

assign xor_ln104_483_fu_698_p2 = (icmp_ln86_997_fu_472_p2 ^ 1'd1);

assign xor_ln104_484_fu_1047_p2 = (icmp_ln86_998_reg_1505 ^ 1'd1);

assign xor_ln104_485_fu_1057_p2 = (icmp_ln86_999_reg_1511 ^ 1'd1);

assign xor_ln104_486_fu_1067_p2 = (icmp_ln86_1000_reg_1517 ^ 1'd1);

assign xor_ln104_fu_984_p2 = (icmp_ln86_reg_1477 ^ 1'd1);

assign xor_ln117_fu_776_p2 = (1'd1 ^ and_ln102_962_fu_704_p2);

assign zext_ln117_111_fu_808_p1 = select_ln117_956_fu_800_p3;

assign zext_ln117_112_fu_862_p1 = select_ln117_960_fu_854_p3;

assign zext_ln117_113_fu_972_p1 = select_ln117_968_fu_964_p3;

assign zext_ln117_fu_782_p1 = xor_ln117_fu_776_p2;

endmodule //my_prj_decision_function_38
