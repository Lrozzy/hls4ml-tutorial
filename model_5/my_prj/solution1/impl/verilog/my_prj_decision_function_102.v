// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_102 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_5_val,
        x_7_val,
        x_12_val,
        x_13_val,
        x_14_val,
        x_15_val,
        x_16_val,
        x_18_val,
        x_23_val,
        x_25_val,
        x_27_val,
        x_29_val,
        x_30_val,
        x_33_val,
        x_36_val,
        x_37_val,
        x_39_val,
        x_44_val,
        x_45_val,
        x_47_val,
        x_48_val,
        x_49_val,
        x_50_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_5_val;
input  [17:0] x_7_val;
input  [17:0] x_12_val;
input  [17:0] x_13_val;
input  [17:0] x_14_val;
input  [17:0] x_15_val;
input  [17:0] x_16_val;
input  [17:0] x_18_val;
input  [17:0] x_23_val;
input  [17:0] x_25_val;
input  [17:0] x_27_val;
input  [17:0] x_29_val;
input  [17:0] x_30_val;
input  [17:0] x_33_val;
input  [17:0] x_36_val;
input  [17:0] x_37_val;
input  [17:0] x_39_val;
input  [17:0] x_44_val;
input  [17:0] x_45_val;
input  [17:0] x_47_val;
input  [17:0] x_48_val;
input  [17:0] x_49_val;
input  [17:0] x_50_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_424_p2;
reg   [0:0] icmp_ln86_reg_1490;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_1946_fu_436_p2;
reg   [0:0] icmp_ln86_1946_reg_1499;
wire   [0:0] icmp_ln86_1949_fu_454_p2;
reg   [0:0] icmp_ln86_1949_reg_1505;
wire   [0:0] icmp_ln86_1950_fu_460_p2;
reg   [0:0] icmp_ln86_1950_reg_1511;
wire   [0:0] icmp_ln86_1955_fu_490_p2;
reg   [0:0] icmp_ln86_1955_reg_1517;
wire   [0:0] icmp_ln86_1956_fu_496_p2;
reg   [0:0] icmp_ln86_1956_reg_1523;
wire   [0:0] icmp_ln86_1957_fu_502_p2;
reg   [0:0] icmp_ln86_1957_reg_1529;
wire   [0:0] icmp_ln86_1958_fu_508_p2;
reg   [0:0] icmp_ln86_1958_reg_1535;
wire   [0:0] icmp_ln86_1967_fu_562_p2;
reg   [0:0] icmp_ln86_1967_reg_1541;
wire   [0:0] icmp_ln86_1968_fu_568_p2;
reg   [0:0] icmp_ln86_1968_reg_1546;
wire   [0:0] icmp_ln86_1969_fu_574_p2;
reg   [0:0] icmp_ln86_1969_reg_1551;
wire   [0:0] icmp_ln86_1970_fu_580_p2;
reg   [0:0] icmp_ln86_1970_reg_1556;
wire   [0:0] icmp_ln86_1971_fu_586_p2;
reg   [0:0] icmp_ln86_1971_reg_1561;
wire   [0:0] icmp_ln86_1972_fu_592_p2;
reg   [0:0] icmp_ln86_1972_reg_1566;
wire   [0:0] icmp_ln86_1973_fu_598_p2;
reg   [0:0] icmp_ln86_1973_reg_1571;
wire   [0:0] icmp_ln86_1974_fu_604_p2;
reg   [0:0] icmp_ln86_1974_reg_1576;
wire   [4:0] select_ln117_1904_fu_984_p3;
reg   [4:0] select_ln117_1904_reg_1581;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln86_1945_fu_430_p2;
wire   [0:0] xor_ln104_931_fu_616_p2;
wire   [0:0] icmp_ln86_1947_fu_442_p2;
wire   [0:0] and_ln102_fu_610_p2;
wire   [0:0] xor_ln104_933_fu_634_p2;
wire   [0:0] icmp_ln86_1948_fu_448_p2;
wire   [0:0] and_ln104_fu_622_p2;
wire   [0:0] xor_ln104_934_fu_652_p2;
wire   [0:0] icmp_ln86_1951_fu_466_p2;
wire   [0:0] and_ln102_2198_fu_628_p2;
wire   [0:0] icmp_ln86_1952_fu_472_p2;
wire   [0:0] and_ln104_369_fu_640_p2;
wire   [0:0] icmp_ln86_1953_fu_478_p2;
wire   [0:0] and_ln102_2199_fu_646_p2;
wire   [0:0] icmp_ln86_1954_fu_484_p2;
wire   [0:0] and_ln104_370_fu_658_p2;
wire   [0:0] icmp_ln86_1959_fu_514_p2;
wire   [0:0] and_ln102_2202_fu_664_p2;
wire   [0:0] icmp_ln86_1960_fu_520_p2;
wire   [0:0] xor_ln104_937_fu_670_p2;
wire   [0:0] and_ln102_2211_fu_718_p2;
wire   [0:0] icmp_ln86_1961_fu_526_p2;
wire   [0:0] and_ln102_2203_fu_676_p2;
wire   [0:0] icmp_ln86_1962_fu_532_p2;
wire   [0:0] xor_ln104_938_fu_682_p2;
wire   [0:0] and_ln102_2214_fu_736_p2;
wire   [0:0] icmp_ln86_1963_fu_538_p2;
wire   [0:0] and_ln102_2204_fu_688_p2;
wire   [0:0] icmp_ln86_1964_fu_544_p2;
wire   [0:0] xor_ln104_939_fu_694_p2;
wire   [0:0] and_ln102_2217_fu_754_p2;
wire   [0:0] icmp_ln86_1965_fu_550_p2;
wire   [0:0] and_ln102_2205_fu_700_p2;
wire   [0:0] icmp_ln86_1966_fu_556_p2;
wire   [0:0] xor_ln104_940_fu_706_p2;
wire   [0:0] and_ln102_2220_fu_772_p2;
wire   [0:0] and_ln102_2210_fu_712_p2;
wire   [0:0] xor_ln117_fu_784_p2;
wire   [0:0] and_ln102_2212_fu_724_p2;
wire   [1:0] zext_ln117_fu_790_p1;
wire   [0:0] or_ln117_fu_794_p2;
wire   [1:0] select_ln117_fu_800_p3;
wire   [1:0] select_ln117_1891_fu_808_p3;
wire   [0:0] and_ln102_2213_fu_730_p2;
wire   [2:0] zext_ln117_211_fu_816_p1;
wire   [0:0] or_ln117_1773_fu_820_p2;
wire   [2:0] select_ln117_1892_fu_826_p3;
wire   [0:0] or_ln117_1774_fu_834_p2;
wire   [0:0] and_ln102_2215_fu_742_p2;
wire   [2:0] select_ln117_1893_fu_840_p3;
wire   [0:0] or_ln117_1775_fu_848_p2;
wire   [2:0] select_ln117_1894_fu_854_p3;
wire   [2:0] select_ln117_1895_fu_862_p3;
wire   [0:0] and_ln102_2216_fu_748_p2;
wire   [3:0] zext_ln117_212_fu_870_p1;
wire   [0:0] or_ln117_1776_fu_874_p2;
wire   [3:0] select_ln117_1896_fu_880_p3;
wire   [0:0] or_ln117_1777_fu_888_p2;
wire   [0:0] and_ln102_2218_fu_760_p2;
wire   [3:0] select_ln117_1897_fu_894_p3;
wire   [0:0] or_ln117_1778_fu_902_p2;
wire   [3:0] select_ln117_1898_fu_908_p3;
wire   [0:0] or_ln117_1779_fu_916_p2;
wire   [0:0] and_ln102_2219_fu_766_p2;
wire   [3:0] select_ln117_1899_fu_922_p3;
wire   [0:0] or_ln117_1780_fu_930_p2;
wire   [3:0] select_ln117_1900_fu_936_p3;
wire   [0:0] or_ln117_1781_fu_944_p2;
wire   [0:0] and_ln102_2221_fu_778_p2;
wire   [3:0] select_ln117_1901_fu_950_p3;
wire   [0:0] or_ln117_1782_fu_958_p2;
wire   [3:0] select_ln117_1902_fu_964_p3;
wire   [3:0] select_ln117_1903_fu_972_p3;
wire   [4:0] zext_ln117_213_fu_980_p1;
wire   [0:0] xor_ln104_fu_992_p2;
wire   [0:0] xor_ln104_932_fu_1002_p2;
wire   [0:0] and_ln102_2197_fu_997_p2;
wire   [0:0] xor_ln104_935_fu_1018_p2;
wire   [0:0] and_ln104_368_fu_1007_p2;
wire   [0:0] xor_ln104_936_fu_1034_p2;
wire   [0:0] and_ln102_2200_fu_1013_p2;
wire   [0:0] and_ln104_371_fu_1023_p2;
wire   [0:0] and_ln102_2201_fu_1029_p2;
wire   [0:0] and_ln104_372_fu_1039_p2;
wire   [0:0] and_ln102_2206_fu_1045_p2;
wire   [0:0] xor_ln104_941_fu_1050_p2;
wire   [0:0] and_ln102_2223_fu_1090_p2;
wire   [0:0] and_ln102_2207_fu_1055_p2;
wire   [0:0] xor_ln104_942_fu_1060_p2;
wire   [0:0] and_ln102_2226_fu_1106_p2;
wire   [0:0] and_ln102_2208_fu_1065_p2;
wire   [0:0] xor_ln104_943_fu_1070_p2;
wire   [0:0] and_ln102_2229_fu_1122_p2;
wire   [0:0] and_ln102_2209_fu_1075_p2;
wire   [0:0] xor_ln104_944_fu_1080_p2;
wire   [0:0] and_ln102_2232_fu_1138_p2;
wire   [0:0] and_ln102_2222_fu_1085_p2;
wire   [0:0] or_ln117_1783_fu_1149_p2;
wire   [0:0] or_ln117_1784_fu_1154_p2;
wire   [0:0] and_ln102_2224_fu_1095_p2;
wire   [4:0] select_ln117_1905_fu_1159_p3;
wire   [0:0] or_ln117_1785_fu_1166_p2;
wire   [4:0] select_ln117_1906_fu_1172_p3;
wire   [0:0] or_ln117_1786_fu_1180_p2;
wire   [0:0] and_ln102_2225_fu_1101_p2;
wire   [4:0] select_ln117_1907_fu_1185_p3;
wire   [0:0] or_ln117_1787_fu_1193_p2;
wire   [4:0] select_ln117_1908_fu_1199_p3;
wire   [0:0] or_ln117_1788_fu_1207_p2;
wire   [0:0] and_ln102_2227_fu_1111_p2;
wire   [4:0] select_ln117_1909_fu_1213_p3;
wire   [0:0] or_ln117_1789_fu_1221_p2;
wire   [4:0] select_ln117_1910_fu_1227_p3;
wire   [0:0] or_ln117_1790_fu_1235_p2;
wire   [0:0] and_ln102_2228_fu_1117_p2;
wire   [4:0] select_ln117_1911_fu_1240_p3;
wire   [0:0] or_ln117_1791_fu_1248_p2;
wire   [4:0] select_ln117_1912_fu_1254_p3;
wire   [0:0] or_ln117_1792_fu_1262_p2;
wire   [0:0] and_ln102_2230_fu_1127_p2;
wire   [4:0] select_ln117_1913_fu_1268_p3;
wire   [0:0] or_ln117_1793_fu_1276_p2;
wire   [4:0] select_ln117_1914_fu_1282_p3;
wire   [0:0] or_ln117_1794_fu_1290_p2;
wire   [0:0] and_ln102_2231_fu_1133_p2;
wire   [4:0] select_ln117_1915_fu_1296_p3;
wire   [0:0] or_ln117_1795_fu_1304_p2;
wire   [4:0] select_ln117_1916_fu_1310_p3;
wire   [0:0] or_ln117_1796_fu_1318_p2;
wire   [0:0] and_ln102_2233_fu_1143_p2;
wire   [4:0] select_ln117_1917_fu_1324_p3;
wire   [0:0] or_ln117_1797_fu_1332_p2;
wire   [4:0] select_ln117_1918_fu_1338_p3;
wire   [11:0] agg_result_fu_1354_p65;
wire   [4:0] agg_result_fu_1354_p66;
wire   [11:0] agg_result_fu_1354_p67;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1354_p1;
wire   [4:0] agg_result_fu_1354_p3;
wire   [4:0] agg_result_fu_1354_p5;
wire   [4:0] agg_result_fu_1354_p7;
wire   [4:0] agg_result_fu_1354_p9;
wire   [4:0] agg_result_fu_1354_p11;
wire   [4:0] agg_result_fu_1354_p13;
wire   [4:0] agg_result_fu_1354_p15;
wire   [4:0] agg_result_fu_1354_p17;
wire   [4:0] agg_result_fu_1354_p19;
wire   [4:0] agg_result_fu_1354_p21;
wire   [4:0] agg_result_fu_1354_p23;
wire   [4:0] agg_result_fu_1354_p25;
wire   [4:0] agg_result_fu_1354_p27;
wire   [4:0] agg_result_fu_1354_p29;
wire   [4:0] agg_result_fu_1354_p31;
wire  signed [4:0] agg_result_fu_1354_p33;
wire  signed [4:0] agg_result_fu_1354_p35;
wire  signed [4:0] agg_result_fu_1354_p37;
wire  signed [4:0] agg_result_fu_1354_p39;
wire  signed [4:0] agg_result_fu_1354_p41;
wire  signed [4:0] agg_result_fu_1354_p43;
wire  signed [4:0] agg_result_fu_1354_p45;
wire  signed [4:0] agg_result_fu_1354_p47;
wire  signed [4:0] agg_result_fu_1354_p49;
wire  signed [4:0] agg_result_fu_1354_p51;
wire  signed [4:0] agg_result_fu_1354_p53;
wire  signed [4:0] agg_result_fu_1354_p55;
wire  signed [4:0] agg_result_fu_1354_p57;
wire  signed [4:0] agg_result_fu_1354_p59;
wire  signed [4:0] agg_result_fu_1354_p61;
wire  signed [4:0] agg_result_fu_1354_p63;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_65_5_12_1_1_x37 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 12 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 12 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 12 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 12 ),
    .CASE31( 5'h1F ),
    .din31_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_65_5_12_1_1_x37_U2488(
    .din0(12'd4088),
    .din1(12'd81),
    .din2(12'd4082),
    .din3(12'd1270),
    .din4(12'd439),
    .din5(12'd3959),
    .din6(12'd3966),
    .din7(12'd94),
    .din8(12'd93),
    .din9(12'd3932),
    .din10(12'd4020),
    .din11(12'd141),
    .din12(12'd63),
    .din13(12'd3738),
    .din14(12'd3561),
    .din15(12'd16),
    .din16(12'd563),
    .din17(12'd3714),
    .din18(12'd4016),
    .din19(12'd909),
    .din20(12'd3741),
    .din21(12'd2898),
    .din22(12'd3986),
    .din23(12'd3400),
    .din24(12'd3782),
    .din25(12'd4075),
    .din26(12'd4084),
    .din27(12'd116),
    .din28(12'd255),
    .din29(12'd3887),
    .din30(12'd3397),
    .din31(12'd3938),
    .def(agg_result_fu_1354_p65),
    .sel(agg_result_fu_1354_p66),
    .dout(agg_result_fu_1354_p67)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_1946_reg_1499 <= icmp_ln86_1946_fu_436_p2;
        icmp_ln86_1949_reg_1505 <= icmp_ln86_1949_fu_454_p2;
        icmp_ln86_1950_reg_1511 <= icmp_ln86_1950_fu_460_p2;
        icmp_ln86_1955_reg_1517 <= icmp_ln86_1955_fu_490_p2;
        icmp_ln86_1956_reg_1523 <= icmp_ln86_1956_fu_496_p2;
        icmp_ln86_1957_reg_1529 <= icmp_ln86_1957_fu_502_p2;
        icmp_ln86_1958_reg_1535 <= icmp_ln86_1958_fu_508_p2;
        icmp_ln86_1967_reg_1541 <= icmp_ln86_1967_fu_562_p2;
        icmp_ln86_1968_reg_1546 <= icmp_ln86_1968_fu_568_p2;
        icmp_ln86_1969_reg_1551 <= icmp_ln86_1969_fu_574_p2;
        icmp_ln86_1970_reg_1556 <= icmp_ln86_1970_fu_580_p2;
        icmp_ln86_1971_reg_1561 <= icmp_ln86_1971_fu_586_p2;
        icmp_ln86_1972_reg_1566 <= icmp_ln86_1972_fu_592_p2;
        icmp_ln86_1973_reg_1571 <= icmp_ln86_1973_fu_598_p2;
        icmp_ln86_1974_reg_1576 <= icmp_ln86_1974_fu_604_p2;
        icmp_ln86_reg_1490 <= icmp_ln86_fu_424_p2;
        select_ln117_1904_reg_1581 <= select_ln117_1904_fu_984_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1354_p65 = 'bx;

assign agg_result_fu_1354_p66 = ((or_ln117_1797_fu_1332_p2[0:0] == 1'b1) ? select_ln117_1918_fu_1338_p3 : 5'd31);

assign and_ln102_2197_fu_997_p2 = (xor_ln104_fu_992_p2 & icmp_ln86_1946_reg_1499);

assign and_ln102_2198_fu_628_p2 = (icmp_ln86_1947_fu_442_p2 & and_ln102_fu_610_p2);

assign and_ln102_2199_fu_646_p2 = (icmp_ln86_1948_fu_448_p2 & and_ln104_fu_622_p2);

assign and_ln102_2200_fu_1013_p2 = (icmp_ln86_1949_reg_1505 & and_ln102_2197_fu_997_p2);

assign and_ln102_2201_fu_1029_p2 = (icmp_ln86_1950_reg_1511 & and_ln104_368_fu_1007_p2);

assign and_ln102_2202_fu_664_p2 = (icmp_ln86_1951_fu_466_p2 & and_ln102_2198_fu_628_p2);

assign and_ln102_2203_fu_676_p2 = (icmp_ln86_1952_fu_472_p2 & and_ln104_369_fu_640_p2);

assign and_ln102_2204_fu_688_p2 = (icmp_ln86_1953_fu_478_p2 & and_ln102_2199_fu_646_p2);

assign and_ln102_2205_fu_700_p2 = (icmp_ln86_1954_fu_484_p2 & and_ln104_370_fu_658_p2);

assign and_ln102_2206_fu_1045_p2 = (icmp_ln86_1955_reg_1517 & and_ln102_2200_fu_1013_p2);

assign and_ln102_2207_fu_1055_p2 = (icmp_ln86_1956_reg_1523 & and_ln104_371_fu_1023_p2);

assign and_ln102_2208_fu_1065_p2 = (icmp_ln86_1957_reg_1529 & and_ln102_2201_fu_1029_p2);

assign and_ln102_2209_fu_1075_p2 = (icmp_ln86_1958_reg_1535 & and_ln104_372_fu_1039_p2);

assign and_ln102_2210_fu_712_p2 = (icmp_ln86_1959_fu_514_p2 & and_ln102_2202_fu_664_p2);

assign and_ln102_2211_fu_718_p2 = (xor_ln104_937_fu_670_p2 & icmp_ln86_1960_fu_520_p2);

assign and_ln102_2212_fu_724_p2 = (and_ln102_2211_fu_718_p2 & and_ln102_2198_fu_628_p2);

assign and_ln102_2213_fu_730_p2 = (icmp_ln86_1961_fu_526_p2 & and_ln102_2203_fu_676_p2);

assign and_ln102_2214_fu_736_p2 = (xor_ln104_938_fu_682_p2 & icmp_ln86_1962_fu_532_p2);

assign and_ln102_2215_fu_742_p2 = (and_ln104_369_fu_640_p2 & and_ln102_2214_fu_736_p2);

assign and_ln102_2216_fu_748_p2 = (icmp_ln86_1963_fu_538_p2 & and_ln102_2204_fu_688_p2);

assign and_ln102_2217_fu_754_p2 = (xor_ln104_939_fu_694_p2 & icmp_ln86_1964_fu_544_p2);

assign and_ln102_2218_fu_760_p2 = (and_ln102_2217_fu_754_p2 & and_ln102_2199_fu_646_p2);

assign and_ln102_2219_fu_766_p2 = (icmp_ln86_1965_fu_550_p2 & and_ln102_2205_fu_700_p2);

assign and_ln102_2220_fu_772_p2 = (xor_ln104_940_fu_706_p2 & icmp_ln86_1966_fu_556_p2);

assign and_ln102_2221_fu_778_p2 = (and_ln104_370_fu_658_p2 & and_ln102_2220_fu_772_p2);

assign and_ln102_2222_fu_1085_p2 = (icmp_ln86_1967_reg_1541 & and_ln102_2206_fu_1045_p2);

assign and_ln102_2223_fu_1090_p2 = (xor_ln104_941_fu_1050_p2 & icmp_ln86_1968_reg_1546);

assign and_ln102_2224_fu_1095_p2 = (and_ln102_2223_fu_1090_p2 & and_ln102_2200_fu_1013_p2);

assign and_ln102_2225_fu_1101_p2 = (icmp_ln86_1969_reg_1551 & and_ln102_2207_fu_1055_p2);

assign and_ln102_2226_fu_1106_p2 = (xor_ln104_942_fu_1060_p2 & icmp_ln86_1970_reg_1556);

assign and_ln102_2227_fu_1111_p2 = (and_ln104_371_fu_1023_p2 & and_ln102_2226_fu_1106_p2);

assign and_ln102_2228_fu_1117_p2 = (icmp_ln86_1971_reg_1561 & and_ln102_2208_fu_1065_p2);

assign and_ln102_2229_fu_1122_p2 = (xor_ln104_943_fu_1070_p2 & icmp_ln86_1972_reg_1566);

assign and_ln102_2230_fu_1127_p2 = (and_ln102_2229_fu_1122_p2 & and_ln102_2201_fu_1029_p2);

assign and_ln102_2231_fu_1133_p2 = (icmp_ln86_1973_reg_1571 & and_ln102_2209_fu_1075_p2);

assign and_ln102_2232_fu_1138_p2 = (xor_ln104_944_fu_1080_p2 & icmp_ln86_1974_reg_1576);

assign and_ln102_2233_fu_1143_p2 = (and_ln104_372_fu_1039_p2 & and_ln102_2232_fu_1138_p2);

assign and_ln102_fu_610_p2 = (icmp_ln86_fu_424_p2 & icmp_ln86_1945_fu_430_p2);

assign and_ln104_368_fu_1007_p2 = (xor_ln104_fu_992_p2 & xor_ln104_932_fu_1002_p2);

assign and_ln104_369_fu_640_p2 = (xor_ln104_933_fu_634_p2 & and_ln102_fu_610_p2);

assign and_ln104_370_fu_658_p2 = (xor_ln104_934_fu_652_p2 & and_ln104_fu_622_p2);

assign and_ln104_371_fu_1023_p2 = (xor_ln104_935_fu_1018_p2 & and_ln102_2197_fu_997_p2);

assign and_ln104_372_fu_1039_p2 = (xor_ln104_936_fu_1034_p2 & and_ln104_368_fu_1007_p2);

assign and_ln104_fu_622_p2 = (xor_ln104_931_fu_616_p2 & icmp_ln86_fu_424_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1354_p67;

assign icmp_ln86_1945_fu_430_p2 = (($signed(x_7_val) < $signed(18'd6833)) ? 1'b1 : 1'b0);

assign icmp_ln86_1946_fu_436_p2 = (($signed(x_48_val) < $signed(18'd88358)) ? 1'b1 : 1'b0);

assign icmp_ln86_1947_fu_442_p2 = (($signed(x_14_val) < $signed(18'd35)) ? 1'b1 : 1'b0);

assign icmp_ln86_1948_fu_448_p2 = (($signed(x_16_val) < $signed(18'd105)) ? 1'b1 : 1'b0);

assign icmp_ln86_1949_fu_454_p2 = (($signed(x_7_val) < $signed(18'd6920)) ? 1'b1 : 1'b0);

assign icmp_ln86_1950_fu_460_p2 = (($signed(x_33_val) < $signed(18'd897)) ? 1'b1 : 1'b0);

assign icmp_ln86_1951_fu_466_p2 = (($signed(x_13_val) < $signed(18'd493)) ? 1'b1 : 1'b0);

assign icmp_ln86_1952_fu_472_p2 = (($signed(x_47_val) < $signed(18'd65428)) ? 1'b1 : 1'b0);

assign icmp_ln86_1953_fu_478_p2 = (($signed(x_49_val) < $signed(18'd17533)) ? 1'b1 : 1'b0);

assign icmp_ln86_1954_fu_484_p2 = (($signed(x_1_val) < $signed(18'd236826)) ? 1'b1 : 1'b0);

assign icmp_ln86_1955_fu_490_p2 = (($signed(x_29_val) < $signed(18'd6297)) ? 1'b1 : 1'b0);

assign icmp_ln86_1956_fu_496_p2 = (($signed(x_7_val) < $signed(18'd7348)) ? 1'b1 : 1'b0);

assign icmp_ln86_1957_fu_502_p2 = (($signed(x_12_val) < $signed(18'd258667)) ? 1'b1 : 1'b0);

assign icmp_ln86_1958_fu_508_p2 = (($signed(x_23_val) < $signed(18'd11)) ? 1'b1 : 1'b0);

assign icmp_ln86_1959_fu_514_p2 = (($signed(x_7_val) < $signed(18'd6172)) ? 1'b1 : 1'b0);

assign icmp_ln86_1960_fu_520_p2 = (($signed(x_5_val) < $signed(18'd29611)) ? 1'b1 : 1'b0);

assign icmp_ln86_1961_fu_526_p2 = (($signed(x_25_val) < $signed(18'd280)) ? 1'b1 : 1'b0);

assign icmp_ln86_1962_fu_532_p2 = (($signed(x_15_val) < $signed(18'd7)) ? 1'b1 : 1'b0);

assign icmp_ln86_1963_fu_538_p2 = (($signed(x_37_val) < $signed(18'd3)) ? 1'b1 : 1'b0);

assign icmp_ln86_1964_fu_544_p2 = (($signed(x_50_val) < $signed(18'd83383)) ? 1'b1 : 1'b0);

assign icmp_ln86_1965_fu_550_p2 = (($signed(x_33_val) < $signed(18'd509)) ? 1'b1 : 1'b0);

assign icmp_ln86_1966_fu_556_p2 = (($signed(x_44_val) < $signed(18'd15)) ? 1'b1 : 1'b0);

assign icmp_ln86_1967_fu_562_p2 = (($signed(x_27_val) < $signed(18'd11338)) ? 1'b1 : 1'b0);

assign icmp_ln86_1968_fu_568_p2 = (($signed(x_18_val) < $signed(18'd1052)) ? 1'b1 : 1'b0);

assign icmp_ln86_1969_fu_574_p2 = (($signed(x_36_val) < $signed(18'd7)) ? 1'b1 : 1'b0);

assign icmp_ln86_1970_fu_580_p2 = (($signed(x_48_val) < $signed(18'd88275)) ? 1'b1 : 1'b0);

assign icmp_ln86_1971_fu_586_p2 = (($signed(x_39_val) < $signed(18'd1171)) ? 1'b1 : 1'b0);

assign icmp_ln86_1972_fu_592_p2 = (($signed(x_44_val) < $signed(18'd34)) ? 1'b1 : 1'b0);

assign icmp_ln86_1973_fu_598_p2 = (($signed(x_45_val) < $signed(18'd189)) ? 1'b1 : 1'b0);

assign icmp_ln86_1974_fu_604_p2 = (($signed(x_30_val) < $signed(18'd313)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_424_p2 = (($signed(x_48_val) < $signed(18'd87452)) ? 1'b1 : 1'b0);

assign or_ln117_1773_fu_820_p2 = (and_ln102_2213_fu_730_p2 | and_ln102_2198_fu_628_p2);

assign or_ln117_1774_fu_834_p2 = (and_ln102_2203_fu_676_p2 | and_ln102_2198_fu_628_p2);

assign or_ln117_1775_fu_848_p2 = (or_ln117_1774_fu_834_p2 | and_ln102_2215_fu_742_p2);

assign or_ln117_1776_fu_874_p2 = (and_ln102_fu_610_p2 | and_ln102_2216_fu_748_p2);

assign or_ln117_1777_fu_888_p2 = (and_ln102_fu_610_p2 | and_ln102_2204_fu_688_p2);

assign or_ln117_1778_fu_902_p2 = (or_ln117_1777_fu_888_p2 | and_ln102_2218_fu_760_p2);

assign or_ln117_1779_fu_916_p2 = (and_ln102_fu_610_p2 | and_ln102_2199_fu_646_p2);

assign or_ln117_1780_fu_930_p2 = (or_ln117_1779_fu_916_p2 | and_ln102_2219_fu_766_p2);

assign or_ln117_1781_fu_944_p2 = (or_ln117_1779_fu_916_p2 | and_ln102_2205_fu_700_p2);

assign or_ln117_1782_fu_958_p2 = (or_ln117_1781_fu_944_p2 | and_ln102_2221_fu_778_p2);

assign or_ln117_1783_fu_1149_p2 = (icmp_ln86_reg_1490 | and_ln102_2222_fu_1085_p2);

assign or_ln117_1784_fu_1154_p2 = (icmp_ln86_reg_1490 | and_ln102_2206_fu_1045_p2);

assign or_ln117_1785_fu_1166_p2 = (or_ln117_1784_fu_1154_p2 | and_ln102_2224_fu_1095_p2);

assign or_ln117_1786_fu_1180_p2 = (icmp_ln86_reg_1490 | and_ln102_2200_fu_1013_p2);

assign or_ln117_1787_fu_1193_p2 = (or_ln117_1786_fu_1180_p2 | and_ln102_2225_fu_1101_p2);

assign or_ln117_1788_fu_1207_p2 = (or_ln117_1786_fu_1180_p2 | and_ln102_2207_fu_1055_p2);

assign or_ln117_1789_fu_1221_p2 = (or_ln117_1788_fu_1207_p2 | and_ln102_2227_fu_1111_p2);

assign or_ln117_1790_fu_1235_p2 = (icmp_ln86_reg_1490 | and_ln102_2197_fu_997_p2);

assign or_ln117_1791_fu_1248_p2 = (or_ln117_1790_fu_1235_p2 | and_ln102_2228_fu_1117_p2);

assign or_ln117_1792_fu_1262_p2 = (or_ln117_1790_fu_1235_p2 | and_ln102_2208_fu_1065_p2);

assign or_ln117_1793_fu_1276_p2 = (or_ln117_1792_fu_1262_p2 | and_ln102_2230_fu_1127_p2);

assign or_ln117_1794_fu_1290_p2 = (or_ln117_1790_fu_1235_p2 | and_ln102_2201_fu_1029_p2);

assign or_ln117_1795_fu_1304_p2 = (or_ln117_1794_fu_1290_p2 | and_ln102_2231_fu_1133_p2);

assign or_ln117_1796_fu_1318_p2 = (or_ln117_1794_fu_1290_p2 | and_ln102_2209_fu_1075_p2);

assign or_ln117_1797_fu_1332_p2 = (or_ln117_1796_fu_1318_p2 | and_ln102_2233_fu_1143_p2);

assign or_ln117_fu_794_p2 = (and_ln102_2212_fu_724_p2 | and_ln102_2202_fu_664_p2);

assign select_ln117_1891_fu_808_p3 = ((or_ln117_fu_794_p2[0:0] == 1'b1) ? select_ln117_fu_800_p3 : 2'd3);

assign select_ln117_1892_fu_826_p3 = ((and_ln102_2198_fu_628_p2[0:0] == 1'b1) ? zext_ln117_211_fu_816_p1 : 3'd4);

assign select_ln117_1893_fu_840_p3 = ((or_ln117_1773_fu_820_p2[0:0] == 1'b1) ? select_ln117_1892_fu_826_p3 : 3'd5);

assign select_ln117_1894_fu_854_p3 = ((or_ln117_1774_fu_834_p2[0:0] == 1'b1) ? select_ln117_1893_fu_840_p3 : 3'd6);

assign select_ln117_1895_fu_862_p3 = ((or_ln117_1775_fu_848_p2[0:0] == 1'b1) ? select_ln117_1894_fu_854_p3 : 3'd7);

assign select_ln117_1896_fu_880_p3 = ((and_ln102_fu_610_p2[0:0] == 1'b1) ? zext_ln117_212_fu_870_p1 : 4'd8);

assign select_ln117_1897_fu_894_p3 = ((or_ln117_1776_fu_874_p2[0:0] == 1'b1) ? select_ln117_1896_fu_880_p3 : 4'd9);

assign select_ln117_1898_fu_908_p3 = ((or_ln117_1777_fu_888_p2[0:0] == 1'b1) ? select_ln117_1897_fu_894_p3 : 4'd10);

assign select_ln117_1899_fu_922_p3 = ((or_ln117_1778_fu_902_p2[0:0] == 1'b1) ? select_ln117_1898_fu_908_p3 : 4'd11);

assign select_ln117_1900_fu_936_p3 = ((or_ln117_1779_fu_916_p2[0:0] == 1'b1) ? select_ln117_1899_fu_922_p3 : 4'd12);

assign select_ln117_1901_fu_950_p3 = ((or_ln117_1780_fu_930_p2[0:0] == 1'b1) ? select_ln117_1900_fu_936_p3 : 4'd13);

assign select_ln117_1902_fu_964_p3 = ((or_ln117_1781_fu_944_p2[0:0] == 1'b1) ? select_ln117_1901_fu_950_p3 : 4'd14);

assign select_ln117_1903_fu_972_p3 = ((or_ln117_1782_fu_958_p2[0:0] == 1'b1) ? select_ln117_1902_fu_964_p3 : 4'd15);

assign select_ln117_1904_fu_984_p3 = ((icmp_ln86_fu_424_p2[0:0] == 1'b1) ? zext_ln117_213_fu_980_p1 : 5'd16);

assign select_ln117_1905_fu_1159_p3 = ((or_ln117_1783_fu_1149_p2[0:0] == 1'b1) ? select_ln117_1904_reg_1581 : 5'd17);

assign select_ln117_1906_fu_1172_p3 = ((or_ln117_1784_fu_1154_p2[0:0] == 1'b1) ? select_ln117_1905_fu_1159_p3 : 5'd18);

assign select_ln117_1907_fu_1185_p3 = ((or_ln117_1785_fu_1166_p2[0:0] == 1'b1) ? select_ln117_1906_fu_1172_p3 : 5'd19);

assign select_ln117_1908_fu_1199_p3 = ((or_ln117_1786_fu_1180_p2[0:0] == 1'b1) ? select_ln117_1907_fu_1185_p3 : 5'd20);

assign select_ln117_1909_fu_1213_p3 = ((or_ln117_1787_fu_1193_p2[0:0] == 1'b1) ? select_ln117_1908_fu_1199_p3 : 5'd21);

assign select_ln117_1910_fu_1227_p3 = ((or_ln117_1788_fu_1207_p2[0:0] == 1'b1) ? select_ln117_1909_fu_1213_p3 : 5'd22);

assign select_ln117_1911_fu_1240_p3 = ((or_ln117_1789_fu_1221_p2[0:0] == 1'b1) ? select_ln117_1910_fu_1227_p3 : 5'd23);

assign select_ln117_1912_fu_1254_p3 = ((or_ln117_1790_fu_1235_p2[0:0] == 1'b1) ? select_ln117_1911_fu_1240_p3 : 5'd24);

assign select_ln117_1913_fu_1268_p3 = ((or_ln117_1791_fu_1248_p2[0:0] == 1'b1) ? select_ln117_1912_fu_1254_p3 : 5'd25);

assign select_ln117_1914_fu_1282_p3 = ((or_ln117_1792_fu_1262_p2[0:0] == 1'b1) ? select_ln117_1913_fu_1268_p3 : 5'd26);

assign select_ln117_1915_fu_1296_p3 = ((or_ln117_1793_fu_1276_p2[0:0] == 1'b1) ? select_ln117_1914_fu_1282_p3 : 5'd27);

assign select_ln117_1916_fu_1310_p3 = ((or_ln117_1794_fu_1290_p2[0:0] == 1'b1) ? select_ln117_1915_fu_1296_p3 : 5'd28);

assign select_ln117_1917_fu_1324_p3 = ((or_ln117_1795_fu_1304_p2[0:0] == 1'b1) ? select_ln117_1916_fu_1310_p3 : 5'd29);

assign select_ln117_1918_fu_1338_p3 = ((or_ln117_1796_fu_1318_p2[0:0] == 1'b1) ? select_ln117_1917_fu_1324_p3 : 5'd30);

assign select_ln117_fu_800_p3 = ((and_ln102_2202_fu_664_p2[0:0] == 1'b1) ? zext_ln117_fu_790_p1 : 2'd2);

assign xor_ln104_931_fu_616_p2 = (icmp_ln86_1945_fu_430_p2 ^ 1'd1);

assign xor_ln104_932_fu_1002_p2 = (icmp_ln86_1946_reg_1499 ^ 1'd1);

assign xor_ln104_933_fu_634_p2 = (icmp_ln86_1947_fu_442_p2 ^ 1'd1);

assign xor_ln104_934_fu_652_p2 = (icmp_ln86_1948_fu_448_p2 ^ 1'd1);

assign xor_ln104_935_fu_1018_p2 = (icmp_ln86_1949_reg_1505 ^ 1'd1);

assign xor_ln104_936_fu_1034_p2 = (icmp_ln86_1950_reg_1511 ^ 1'd1);

assign xor_ln104_937_fu_670_p2 = (icmp_ln86_1951_fu_466_p2 ^ 1'd1);

assign xor_ln104_938_fu_682_p2 = (icmp_ln86_1952_fu_472_p2 ^ 1'd1);

assign xor_ln104_939_fu_694_p2 = (icmp_ln86_1953_fu_478_p2 ^ 1'd1);

assign xor_ln104_940_fu_706_p2 = (icmp_ln86_1954_fu_484_p2 ^ 1'd1);

assign xor_ln104_941_fu_1050_p2 = (icmp_ln86_1955_reg_1517 ^ 1'd1);

assign xor_ln104_942_fu_1060_p2 = (icmp_ln86_1956_reg_1523 ^ 1'd1);

assign xor_ln104_943_fu_1070_p2 = (icmp_ln86_1957_reg_1529 ^ 1'd1);

assign xor_ln104_944_fu_1080_p2 = (icmp_ln86_1958_reg_1535 ^ 1'd1);

assign xor_ln104_fu_992_p2 = (icmp_ln86_reg_1490 ^ 1'd1);

assign xor_ln117_fu_784_p2 = (1'd1 ^ and_ln102_2210_fu_712_p2);

assign zext_ln117_211_fu_816_p1 = select_ln117_1891_fu_808_p3;

assign zext_ln117_212_fu_870_p1 = select_ln117_1895_fu_862_p3;

assign zext_ln117_213_fu_980_p1 = select_ln117_1903_fu_972_p3;

assign zext_ln117_fu_790_p1 = xor_ln117_fu_784_p2;

endmodule //my_prj_decision_function_102
