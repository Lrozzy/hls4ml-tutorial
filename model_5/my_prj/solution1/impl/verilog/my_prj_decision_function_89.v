// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_89 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_4_val,
        x_7_val,
        x_11_val,
        x_14_val,
        x_15_val,
        x_16_val,
        x_17_val,
        x_19_val,
        x_26_val,
        x_29_val,
        x_32_val,
        x_33_val,
        x_36_val,
        x_47_val,
        x_49_val,
        x_50_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_4_val;
input  [17:0] x_7_val;
input  [17:0] x_11_val;
input  [17:0] x_14_val;
input  [17:0] x_15_val;
input  [17:0] x_16_val;
input  [17:0] x_17_val;
input  [17:0] x_19_val;
input  [17:0] x_26_val;
input  [17:0] x_29_val;
input  [17:0] x_32_val;
input  [17:0] x_33_val;
input  [17:0] x_36_val;
input  [17:0] x_47_val;
input  [17:0] x_49_val;
input  [17:0] x_50_val;
input  [17:0] x_52_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_376_p2;
reg   [0:0] icmp_ln86_reg_1442;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_272_fu_388_p2;
reg   [0:0] icmp_ln86_272_reg_1451;
wire   [0:0] icmp_ln86_275_fu_406_p2;
reg   [0:0] icmp_ln86_275_reg_1457;
wire   [0:0] icmp_ln86_276_fu_412_p2;
reg   [0:0] icmp_ln86_276_reg_1463;
wire   [0:0] icmp_ln86_281_fu_442_p2;
reg   [0:0] icmp_ln86_281_reg_1469;
wire   [0:0] icmp_ln86_282_fu_448_p2;
reg   [0:0] icmp_ln86_282_reg_1475;
wire   [0:0] icmp_ln86_283_fu_454_p2;
reg   [0:0] icmp_ln86_283_reg_1481;
wire   [0:0] icmp_ln86_284_fu_460_p2;
reg   [0:0] icmp_ln86_284_reg_1487;
wire   [0:0] icmp_ln86_293_fu_514_p2;
reg   [0:0] icmp_ln86_293_reg_1493;
wire   [0:0] icmp_ln86_294_fu_520_p2;
reg   [0:0] icmp_ln86_294_reg_1498;
wire   [0:0] icmp_ln86_295_fu_526_p2;
reg   [0:0] icmp_ln86_295_reg_1503;
wire   [0:0] icmp_ln86_296_fu_532_p2;
reg   [0:0] icmp_ln86_296_reg_1508;
wire   [0:0] icmp_ln86_297_fu_538_p2;
reg   [0:0] icmp_ln86_297_reg_1513;
wire   [0:0] icmp_ln86_298_fu_544_p2;
reg   [0:0] icmp_ln86_298_reg_1518;
wire   [0:0] icmp_ln86_299_fu_550_p2;
reg   [0:0] icmp_ln86_299_reg_1523;
wire   [0:0] icmp_ln86_300_fu_556_p2;
reg   [0:0] icmp_ln86_300_reg_1528;
wire   [4:0] select_ln117_276_fu_936_p3;
reg   [4:0] select_ln117_276_reg_1533;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln86_271_fu_382_p2;
wire   [0:0] xor_ln104_128_fu_568_p2;
wire   [0:0] icmp_ln86_273_fu_394_p2;
wire   [0:0] and_ln102_fu_562_p2;
wire   [0:0] xor_ln104_130_fu_586_p2;
wire   [0:0] icmp_ln86_274_fu_400_p2;
wire   [0:0] and_ln104_fu_574_p2;
wire   [0:0] xor_ln104_131_fu_604_p2;
wire   [0:0] icmp_ln86_277_fu_418_p2;
wire   [0:0] and_ln102_333_fu_580_p2;
wire   [0:0] icmp_ln86_278_fu_424_p2;
wire   [0:0] and_ln104_50_fu_592_p2;
wire   [0:0] icmp_ln86_279_fu_430_p2;
wire   [0:0] and_ln102_334_fu_598_p2;
wire   [0:0] icmp_ln86_280_fu_436_p2;
wire   [0:0] and_ln104_51_fu_610_p2;
wire   [0:0] icmp_ln86_285_fu_466_p2;
wire   [0:0] and_ln102_337_fu_616_p2;
wire   [0:0] icmp_ln86_286_fu_472_p2;
wire   [0:0] xor_ln104_134_fu_622_p2;
wire   [0:0] and_ln102_346_fu_670_p2;
wire   [0:0] icmp_ln86_287_fu_478_p2;
wire   [0:0] and_ln102_338_fu_628_p2;
wire   [0:0] icmp_ln86_288_fu_484_p2;
wire   [0:0] xor_ln104_135_fu_634_p2;
wire   [0:0] and_ln102_349_fu_688_p2;
wire   [0:0] icmp_ln86_289_fu_490_p2;
wire   [0:0] and_ln102_339_fu_640_p2;
wire   [0:0] icmp_ln86_290_fu_496_p2;
wire   [0:0] xor_ln104_136_fu_646_p2;
wire   [0:0] and_ln102_352_fu_706_p2;
wire   [0:0] icmp_ln86_291_fu_502_p2;
wire   [0:0] and_ln102_340_fu_652_p2;
wire   [0:0] icmp_ln86_292_fu_508_p2;
wire   [0:0] xor_ln104_137_fu_658_p2;
wire   [0:0] and_ln102_355_fu_724_p2;
wire   [0:0] and_ln102_345_fu_664_p2;
wire   [0:0] xor_ln117_fu_736_p2;
wire   [0:0] and_ln102_347_fu_676_p2;
wire   [1:0] zext_ln117_fu_742_p1;
wire   [0:0] or_ln117_fu_746_p2;
wire   [1:0] select_ln117_fu_752_p3;
wire   [1:0] select_ln117_263_fu_760_p3;
wire   [0:0] and_ln102_348_fu_682_p2;
wire   [2:0] zext_ln117_31_fu_768_p1;
wire   [0:0] or_ln117_241_fu_772_p2;
wire   [2:0] select_ln117_264_fu_778_p3;
wire   [0:0] or_ln117_242_fu_786_p2;
wire   [0:0] and_ln102_350_fu_694_p2;
wire   [2:0] select_ln117_265_fu_792_p3;
wire   [0:0] or_ln117_243_fu_800_p2;
wire   [2:0] select_ln117_266_fu_806_p3;
wire   [2:0] select_ln117_267_fu_814_p3;
wire   [0:0] and_ln102_351_fu_700_p2;
wire   [3:0] zext_ln117_32_fu_822_p1;
wire   [0:0] or_ln117_244_fu_826_p2;
wire   [3:0] select_ln117_268_fu_832_p3;
wire   [0:0] or_ln117_245_fu_840_p2;
wire   [0:0] and_ln102_353_fu_712_p2;
wire   [3:0] select_ln117_269_fu_846_p3;
wire   [0:0] or_ln117_246_fu_854_p2;
wire   [3:0] select_ln117_270_fu_860_p3;
wire   [0:0] or_ln117_247_fu_868_p2;
wire   [0:0] and_ln102_354_fu_718_p2;
wire   [3:0] select_ln117_271_fu_874_p3;
wire   [0:0] or_ln117_248_fu_882_p2;
wire   [3:0] select_ln117_272_fu_888_p3;
wire   [0:0] or_ln117_249_fu_896_p2;
wire   [0:0] and_ln102_356_fu_730_p2;
wire   [3:0] select_ln117_273_fu_902_p3;
wire   [0:0] or_ln117_250_fu_910_p2;
wire   [3:0] select_ln117_274_fu_916_p3;
wire   [3:0] select_ln117_275_fu_924_p3;
wire   [4:0] zext_ln117_33_fu_932_p1;
wire   [0:0] xor_ln104_fu_944_p2;
wire   [0:0] xor_ln104_129_fu_954_p2;
wire   [0:0] and_ln102_332_fu_949_p2;
wire   [0:0] xor_ln104_132_fu_970_p2;
wire   [0:0] and_ln104_49_fu_959_p2;
wire   [0:0] xor_ln104_133_fu_986_p2;
wire   [0:0] and_ln102_335_fu_965_p2;
wire   [0:0] and_ln104_52_fu_975_p2;
wire   [0:0] and_ln102_336_fu_981_p2;
wire   [0:0] and_ln104_53_fu_991_p2;
wire   [0:0] and_ln102_341_fu_997_p2;
wire   [0:0] xor_ln104_138_fu_1002_p2;
wire   [0:0] and_ln102_358_fu_1042_p2;
wire   [0:0] and_ln102_342_fu_1007_p2;
wire   [0:0] xor_ln104_139_fu_1012_p2;
wire   [0:0] and_ln102_361_fu_1058_p2;
wire   [0:0] and_ln102_343_fu_1017_p2;
wire   [0:0] xor_ln104_140_fu_1022_p2;
wire   [0:0] and_ln102_364_fu_1074_p2;
wire   [0:0] and_ln102_344_fu_1027_p2;
wire   [0:0] xor_ln104_141_fu_1032_p2;
wire   [0:0] and_ln102_367_fu_1090_p2;
wire   [0:0] and_ln102_357_fu_1037_p2;
wire   [0:0] or_ln117_251_fu_1101_p2;
wire   [0:0] or_ln117_252_fu_1106_p2;
wire   [0:0] and_ln102_359_fu_1047_p2;
wire   [4:0] select_ln117_277_fu_1111_p3;
wire   [0:0] or_ln117_253_fu_1118_p2;
wire   [4:0] select_ln117_278_fu_1124_p3;
wire   [0:0] or_ln117_254_fu_1132_p2;
wire   [0:0] and_ln102_360_fu_1053_p2;
wire   [4:0] select_ln117_279_fu_1137_p3;
wire   [0:0] or_ln117_255_fu_1145_p2;
wire   [4:0] select_ln117_280_fu_1151_p3;
wire   [0:0] or_ln117_256_fu_1159_p2;
wire   [0:0] and_ln102_362_fu_1063_p2;
wire   [4:0] select_ln117_281_fu_1165_p3;
wire   [0:0] or_ln117_257_fu_1173_p2;
wire   [4:0] select_ln117_282_fu_1179_p3;
wire   [0:0] or_ln117_258_fu_1187_p2;
wire   [0:0] and_ln102_363_fu_1069_p2;
wire   [4:0] select_ln117_283_fu_1192_p3;
wire   [0:0] or_ln117_259_fu_1200_p2;
wire   [4:0] select_ln117_284_fu_1206_p3;
wire   [0:0] or_ln117_260_fu_1214_p2;
wire   [0:0] and_ln102_365_fu_1079_p2;
wire   [4:0] select_ln117_285_fu_1220_p3;
wire   [0:0] or_ln117_261_fu_1228_p2;
wire   [4:0] select_ln117_286_fu_1234_p3;
wire   [0:0] or_ln117_262_fu_1242_p2;
wire   [0:0] and_ln102_366_fu_1085_p2;
wire   [4:0] select_ln117_287_fu_1248_p3;
wire   [0:0] or_ln117_263_fu_1256_p2;
wire   [4:0] select_ln117_288_fu_1262_p3;
wire   [0:0] or_ln117_264_fu_1270_p2;
wire   [0:0] and_ln102_368_fu_1095_p2;
wire   [4:0] select_ln117_289_fu_1276_p3;
wire   [0:0] or_ln117_265_fu_1284_p2;
wire   [4:0] select_ln117_290_fu_1290_p3;
wire   [11:0] agg_result_fu_1306_p65;
wire   [4:0] agg_result_fu_1306_p66;
wire   [11:0] agg_result_fu_1306_p67;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1306_p1;
wire   [4:0] agg_result_fu_1306_p3;
wire   [4:0] agg_result_fu_1306_p5;
wire   [4:0] agg_result_fu_1306_p7;
wire   [4:0] agg_result_fu_1306_p9;
wire   [4:0] agg_result_fu_1306_p11;
wire   [4:0] agg_result_fu_1306_p13;
wire   [4:0] agg_result_fu_1306_p15;
wire   [4:0] agg_result_fu_1306_p17;
wire   [4:0] agg_result_fu_1306_p19;
wire   [4:0] agg_result_fu_1306_p21;
wire   [4:0] agg_result_fu_1306_p23;
wire   [4:0] agg_result_fu_1306_p25;
wire   [4:0] agg_result_fu_1306_p27;
wire   [4:0] agg_result_fu_1306_p29;
wire   [4:0] agg_result_fu_1306_p31;
wire  signed [4:0] agg_result_fu_1306_p33;
wire  signed [4:0] agg_result_fu_1306_p35;
wire  signed [4:0] agg_result_fu_1306_p37;
wire  signed [4:0] agg_result_fu_1306_p39;
wire  signed [4:0] agg_result_fu_1306_p41;
wire  signed [4:0] agg_result_fu_1306_p43;
wire  signed [4:0] agg_result_fu_1306_p45;
wire  signed [4:0] agg_result_fu_1306_p47;
wire  signed [4:0] agg_result_fu_1306_p49;
wire  signed [4:0] agg_result_fu_1306_p51;
wire  signed [4:0] agg_result_fu_1306_p53;
wire  signed [4:0] agg_result_fu_1306_p55;
wire  signed [4:0] agg_result_fu_1306_p57;
wire  signed [4:0] agg_result_fu_1306_p59;
wire  signed [4:0] agg_result_fu_1306_p61;
wire  signed [4:0] agg_result_fu_1306_p63;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_65_5_12_1_1_x6 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 12 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 12 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 12 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 12 ),
    .CASE31( 5'h1F ),
    .din31_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_65_5_12_1_1_x6_U341(
    .din0(12'd1661),
    .din1(12'd101),
    .din2(12'd3576),
    .din3(12'd3718),
    .din4(12'd114),
    .din5(12'd3949),
    .din6(12'd3893),
    .din7(12'd107),
    .din8(12'd294),
    .din9(12'd485),
    .din10(12'd376),
    .din11(12'd104),
    .din12(12'd352),
    .din13(12'd3556),
    .din14(12'd64),
    .din15(12'd3680),
    .din16(12'd715),
    .din17(12'd3608),
    .din18(12'd4031),
    .din19(12'd3705),
    .din20(12'd76),
    .din21(12'd1632),
    .din22(12'd3739),
    .din23(12'd4054),
    .din24(12'd4060),
    .din25(12'd3618),
    .din26(12'd248),
    .din27(12'd3589),
    .din28(12'd3845),
    .din29(12'd346),
    .din30(12'd3659),
    .din31(12'd206),
    .def(agg_result_fu_1306_p65),
    .sel(agg_result_fu_1306_p66),
    .dout(agg_result_fu_1306_p67)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_272_reg_1451 <= icmp_ln86_272_fu_388_p2;
        icmp_ln86_275_reg_1457 <= icmp_ln86_275_fu_406_p2;
        icmp_ln86_276_reg_1463 <= icmp_ln86_276_fu_412_p2;
        icmp_ln86_281_reg_1469 <= icmp_ln86_281_fu_442_p2;
        icmp_ln86_282_reg_1475 <= icmp_ln86_282_fu_448_p2;
        icmp_ln86_283_reg_1481 <= icmp_ln86_283_fu_454_p2;
        icmp_ln86_284_reg_1487 <= icmp_ln86_284_fu_460_p2;
        icmp_ln86_293_reg_1493 <= icmp_ln86_293_fu_514_p2;
        icmp_ln86_294_reg_1498 <= icmp_ln86_294_fu_520_p2;
        icmp_ln86_295_reg_1503 <= icmp_ln86_295_fu_526_p2;
        icmp_ln86_296_reg_1508 <= icmp_ln86_296_fu_532_p2;
        icmp_ln86_297_reg_1513 <= icmp_ln86_297_fu_538_p2;
        icmp_ln86_298_reg_1518 <= icmp_ln86_298_fu_544_p2;
        icmp_ln86_299_reg_1523 <= icmp_ln86_299_fu_550_p2;
        icmp_ln86_300_reg_1528 <= icmp_ln86_300_fu_556_p2;
        icmp_ln86_reg_1442 <= icmp_ln86_fu_376_p2;
        select_ln117_276_reg_1533 <= select_ln117_276_fu_936_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1306_p65 = 'bx;

assign agg_result_fu_1306_p66 = ((or_ln117_265_fu_1284_p2[0:0] == 1'b1) ? select_ln117_290_fu_1290_p3 : 5'd31);

assign and_ln102_332_fu_949_p2 = (xor_ln104_fu_944_p2 & icmp_ln86_272_reg_1451);

assign and_ln102_333_fu_580_p2 = (icmp_ln86_273_fu_394_p2 & and_ln102_fu_562_p2);

assign and_ln102_334_fu_598_p2 = (icmp_ln86_274_fu_400_p2 & and_ln104_fu_574_p2);

assign and_ln102_335_fu_965_p2 = (icmp_ln86_275_reg_1457 & and_ln102_332_fu_949_p2);

assign and_ln102_336_fu_981_p2 = (icmp_ln86_276_reg_1463 & and_ln104_49_fu_959_p2);

assign and_ln102_337_fu_616_p2 = (icmp_ln86_277_fu_418_p2 & and_ln102_333_fu_580_p2);

assign and_ln102_338_fu_628_p2 = (icmp_ln86_278_fu_424_p2 & and_ln104_50_fu_592_p2);

assign and_ln102_339_fu_640_p2 = (icmp_ln86_279_fu_430_p2 & and_ln102_334_fu_598_p2);

assign and_ln102_340_fu_652_p2 = (icmp_ln86_280_fu_436_p2 & and_ln104_51_fu_610_p2);

assign and_ln102_341_fu_997_p2 = (icmp_ln86_281_reg_1469 & and_ln102_335_fu_965_p2);

assign and_ln102_342_fu_1007_p2 = (icmp_ln86_282_reg_1475 & and_ln104_52_fu_975_p2);

assign and_ln102_343_fu_1017_p2 = (icmp_ln86_283_reg_1481 & and_ln102_336_fu_981_p2);

assign and_ln102_344_fu_1027_p2 = (icmp_ln86_284_reg_1487 & and_ln104_53_fu_991_p2);

assign and_ln102_345_fu_664_p2 = (icmp_ln86_285_fu_466_p2 & and_ln102_337_fu_616_p2);

assign and_ln102_346_fu_670_p2 = (xor_ln104_134_fu_622_p2 & icmp_ln86_286_fu_472_p2);

assign and_ln102_347_fu_676_p2 = (and_ln102_346_fu_670_p2 & and_ln102_333_fu_580_p2);

assign and_ln102_348_fu_682_p2 = (icmp_ln86_287_fu_478_p2 & and_ln102_338_fu_628_p2);

assign and_ln102_349_fu_688_p2 = (xor_ln104_135_fu_634_p2 & icmp_ln86_288_fu_484_p2);

assign and_ln102_350_fu_694_p2 = (and_ln104_50_fu_592_p2 & and_ln102_349_fu_688_p2);

assign and_ln102_351_fu_700_p2 = (icmp_ln86_289_fu_490_p2 & and_ln102_339_fu_640_p2);

assign and_ln102_352_fu_706_p2 = (xor_ln104_136_fu_646_p2 & icmp_ln86_290_fu_496_p2);

assign and_ln102_353_fu_712_p2 = (and_ln102_352_fu_706_p2 & and_ln102_334_fu_598_p2);

assign and_ln102_354_fu_718_p2 = (icmp_ln86_291_fu_502_p2 & and_ln102_340_fu_652_p2);

assign and_ln102_355_fu_724_p2 = (xor_ln104_137_fu_658_p2 & icmp_ln86_292_fu_508_p2);

assign and_ln102_356_fu_730_p2 = (and_ln104_51_fu_610_p2 & and_ln102_355_fu_724_p2);

assign and_ln102_357_fu_1037_p2 = (icmp_ln86_293_reg_1493 & and_ln102_341_fu_997_p2);

assign and_ln102_358_fu_1042_p2 = (xor_ln104_138_fu_1002_p2 & icmp_ln86_294_reg_1498);

assign and_ln102_359_fu_1047_p2 = (and_ln102_358_fu_1042_p2 & and_ln102_335_fu_965_p2);

assign and_ln102_360_fu_1053_p2 = (icmp_ln86_295_reg_1503 & and_ln102_342_fu_1007_p2);

assign and_ln102_361_fu_1058_p2 = (xor_ln104_139_fu_1012_p2 & icmp_ln86_296_reg_1508);

assign and_ln102_362_fu_1063_p2 = (and_ln104_52_fu_975_p2 & and_ln102_361_fu_1058_p2);

assign and_ln102_363_fu_1069_p2 = (icmp_ln86_297_reg_1513 & and_ln102_343_fu_1017_p2);

assign and_ln102_364_fu_1074_p2 = (xor_ln104_140_fu_1022_p2 & icmp_ln86_298_reg_1518);

assign and_ln102_365_fu_1079_p2 = (and_ln102_364_fu_1074_p2 & and_ln102_336_fu_981_p2);

assign and_ln102_366_fu_1085_p2 = (icmp_ln86_299_reg_1523 & and_ln102_344_fu_1027_p2);

assign and_ln102_367_fu_1090_p2 = (xor_ln104_141_fu_1032_p2 & icmp_ln86_300_reg_1528);

assign and_ln102_368_fu_1095_p2 = (and_ln104_53_fu_991_p2 & and_ln102_367_fu_1090_p2);

assign and_ln102_fu_562_p2 = (icmp_ln86_fu_376_p2 & icmp_ln86_271_fu_382_p2);

assign and_ln104_49_fu_959_p2 = (xor_ln104_fu_944_p2 & xor_ln104_129_fu_954_p2);

assign and_ln104_50_fu_592_p2 = (xor_ln104_130_fu_586_p2 & and_ln102_fu_562_p2);

assign and_ln104_51_fu_610_p2 = (xor_ln104_131_fu_604_p2 & and_ln104_fu_574_p2);

assign and_ln104_52_fu_975_p2 = (xor_ln104_132_fu_970_p2 & and_ln102_332_fu_949_p2);

assign and_ln104_53_fu_991_p2 = (xor_ln104_133_fu_986_p2 & and_ln104_49_fu_959_p2);

assign and_ln104_fu_574_p2 = (xor_ln104_128_fu_568_p2 & icmp_ln86_fu_376_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1306_p67;

assign icmp_ln86_271_fu_382_p2 = (($signed(x_29_val) < $signed(18'd7550)) ? 1'b1 : 1'b0);

assign icmp_ln86_272_fu_388_p2 = (($signed(x_36_val) < $signed(18'd11)) ? 1'b1 : 1'b0);

assign icmp_ln86_273_fu_394_p2 = (($signed(x_1_val) < $signed(18'd188941)) ? 1'b1 : 1'b0);

assign icmp_ln86_274_fu_400_p2 = (($signed(x_7_val) < $signed(18'd8739)) ? 1'b1 : 1'b0);

assign icmp_ln86_275_fu_406_p2 = (($signed(x_49_val) < $signed(18'd85080)) ? 1'b1 : 1'b0);

assign icmp_ln86_276_fu_412_p2 = (($signed(x_1_val) < $signed(18'd5339)) ? 1'b1 : 1'b0);

assign icmp_ln86_277_fu_418_p2 = (($signed(x_19_val) < $signed(18'd1015)) ? 1'b1 : 1'b0);

assign icmp_ln86_278_fu_424_p2 = (($signed(x_49_val) < $signed(18'd78111)) ? 1'b1 : 1'b0);

assign icmp_ln86_279_fu_430_p2 = (($signed(x_17_val) < $signed(18'd6)) ? 1'b1 : 1'b0);

assign icmp_ln86_280_fu_436_p2 = (($signed(x_52_val) < $signed(18'd46593)) ? 1'b1 : 1'b0);

assign icmp_ln86_281_fu_442_p2 = (($signed(x_1_val) < $signed(18'd249044)) ? 1'b1 : 1'b0);

assign icmp_ln86_282_fu_448_p2 = (($signed(x_52_val) < $signed(18'd52737)) ? 1'b1 : 1'b0);

assign icmp_ln86_283_fu_454_p2 = (($signed(x_15_val) < $signed(18'd13)) ? 1'b1 : 1'b0);

assign icmp_ln86_284_fu_460_p2 = (($signed(x_33_val) < $signed(18'd359)) ? 1'b1 : 1'b0);

assign icmp_ln86_285_fu_466_p2 = (($signed(x_32_val) < $signed(18'd592)) ? 1'b1 : 1'b0);

assign icmp_ln86_286_fu_472_p2 = (($signed(x_1_val) < $signed(18'd152760)) ? 1'b1 : 1'b0);

assign icmp_ln86_287_fu_478_p2 = (($signed(x_1_val) < $signed(18'd40716)) ? 1'b1 : 1'b0);

assign icmp_ln86_288_fu_484_p2 = (($signed(x_1_val) < $signed(18'd76181)) ? 1'b1 : 1'b0);

assign icmp_ln86_289_fu_490_p2 = (($signed(x_50_val) < $signed(18'd91352)) ? 1'b1 : 1'b0);

assign icmp_ln86_290_fu_496_p2 = (($signed(x_11_val) < $signed(18'd696)) ? 1'b1 : 1'b0);

assign icmp_ln86_291_fu_502_p2 = (($signed(x_1_val) < $signed(18'd93166)) ? 1'b1 : 1'b0);

assign icmp_ln86_292_fu_508_p2 = (($signed(x_47_val) < $signed(18'd96431)) ? 1'b1 : 1'b0);

assign icmp_ln86_293_fu_514_p2 = (($signed(x_16_val) < $signed(18'd41)) ? 1'b1 : 1'b0);

assign icmp_ln86_294_fu_520_p2 = (($signed(x_49_val) < $signed(18'd55021)) ? 1'b1 : 1'b0);

assign icmp_ln86_295_fu_526_p2 = (($signed(x_14_val) < $signed(18'd60)) ? 1'b1 : 1'b0);

assign icmp_ln86_296_fu_532_p2 = (($signed(x_4_val) < $signed(18'd79047)) ? 1'b1 : 1'b0);

assign icmp_ln86_297_fu_538_p2 = (($signed(x_52_val) < $signed(18'd53761)) ? 1'b1 : 1'b0);

assign icmp_ln86_298_fu_544_p2 = (($signed(x_33_val) < $signed(18'd41)) ? 1'b1 : 1'b0);

assign icmp_ln86_299_fu_550_p2 = (($signed(x_29_val) < $signed(18'd45948)) ? 1'b1 : 1'b0);

assign icmp_ln86_300_fu_556_p2 = (($signed(x_26_val) < $signed(18'd253130)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_376_p2 = (($signed(x_15_val) < $signed(18'd10)) ? 1'b1 : 1'b0);

assign or_ln117_241_fu_772_p2 = (and_ln102_348_fu_682_p2 | and_ln102_333_fu_580_p2);

assign or_ln117_242_fu_786_p2 = (and_ln102_338_fu_628_p2 | and_ln102_333_fu_580_p2);

assign or_ln117_243_fu_800_p2 = (or_ln117_242_fu_786_p2 | and_ln102_350_fu_694_p2);

assign or_ln117_244_fu_826_p2 = (and_ln102_fu_562_p2 | and_ln102_351_fu_700_p2);

assign or_ln117_245_fu_840_p2 = (and_ln102_fu_562_p2 | and_ln102_339_fu_640_p2);

assign or_ln117_246_fu_854_p2 = (or_ln117_245_fu_840_p2 | and_ln102_353_fu_712_p2);

assign or_ln117_247_fu_868_p2 = (and_ln102_fu_562_p2 | and_ln102_334_fu_598_p2);

assign or_ln117_248_fu_882_p2 = (or_ln117_247_fu_868_p2 | and_ln102_354_fu_718_p2);

assign or_ln117_249_fu_896_p2 = (or_ln117_247_fu_868_p2 | and_ln102_340_fu_652_p2);

assign or_ln117_250_fu_910_p2 = (or_ln117_249_fu_896_p2 | and_ln102_356_fu_730_p2);

assign or_ln117_251_fu_1101_p2 = (icmp_ln86_reg_1442 | and_ln102_357_fu_1037_p2);

assign or_ln117_252_fu_1106_p2 = (icmp_ln86_reg_1442 | and_ln102_341_fu_997_p2);

assign or_ln117_253_fu_1118_p2 = (or_ln117_252_fu_1106_p2 | and_ln102_359_fu_1047_p2);

assign or_ln117_254_fu_1132_p2 = (icmp_ln86_reg_1442 | and_ln102_335_fu_965_p2);

assign or_ln117_255_fu_1145_p2 = (or_ln117_254_fu_1132_p2 | and_ln102_360_fu_1053_p2);

assign or_ln117_256_fu_1159_p2 = (or_ln117_254_fu_1132_p2 | and_ln102_342_fu_1007_p2);

assign or_ln117_257_fu_1173_p2 = (or_ln117_256_fu_1159_p2 | and_ln102_362_fu_1063_p2);

assign or_ln117_258_fu_1187_p2 = (icmp_ln86_reg_1442 | and_ln102_332_fu_949_p2);

assign or_ln117_259_fu_1200_p2 = (or_ln117_258_fu_1187_p2 | and_ln102_363_fu_1069_p2);

assign or_ln117_260_fu_1214_p2 = (or_ln117_258_fu_1187_p2 | and_ln102_343_fu_1017_p2);

assign or_ln117_261_fu_1228_p2 = (or_ln117_260_fu_1214_p2 | and_ln102_365_fu_1079_p2);

assign or_ln117_262_fu_1242_p2 = (or_ln117_258_fu_1187_p2 | and_ln102_336_fu_981_p2);

assign or_ln117_263_fu_1256_p2 = (or_ln117_262_fu_1242_p2 | and_ln102_366_fu_1085_p2);

assign or_ln117_264_fu_1270_p2 = (or_ln117_262_fu_1242_p2 | and_ln102_344_fu_1027_p2);

assign or_ln117_265_fu_1284_p2 = (or_ln117_264_fu_1270_p2 | and_ln102_368_fu_1095_p2);

assign or_ln117_fu_746_p2 = (and_ln102_347_fu_676_p2 | and_ln102_337_fu_616_p2);

assign select_ln117_263_fu_760_p3 = ((or_ln117_fu_746_p2[0:0] == 1'b1) ? select_ln117_fu_752_p3 : 2'd3);

assign select_ln117_264_fu_778_p3 = ((and_ln102_333_fu_580_p2[0:0] == 1'b1) ? zext_ln117_31_fu_768_p1 : 3'd4);

assign select_ln117_265_fu_792_p3 = ((or_ln117_241_fu_772_p2[0:0] == 1'b1) ? select_ln117_264_fu_778_p3 : 3'd5);

assign select_ln117_266_fu_806_p3 = ((or_ln117_242_fu_786_p2[0:0] == 1'b1) ? select_ln117_265_fu_792_p3 : 3'd6);

assign select_ln117_267_fu_814_p3 = ((or_ln117_243_fu_800_p2[0:0] == 1'b1) ? select_ln117_266_fu_806_p3 : 3'd7);

assign select_ln117_268_fu_832_p3 = ((and_ln102_fu_562_p2[0:0] == 1'b1) ? zext_ln117_32_fu_822_p1 : 4'd8);

assign select_ln117_269_fu_846_p3 = ((or_ln117_244_fu_826_p2[0:0] == 1'b1) ? select_ln117_268_fu_832_p3 : 4'd9);

assign select_ln117_270_fu_860_p3 = ((or_ln117_245_fu_840_p2[0:0] == 1'b1) ? select_ln117_269_fu_846_p3 : 4'd10);

assign select_ln117_271_fu_874_p3 = ((or_ln117_246_fu_854_p2[0:0] == 1'b1) ? select_ln117_270_fu_860_p3 : 4'd11);

assign select_ln117_272_fu_888_p3 = ((or_ln117_247_fu_868_p2[0:0] == 1'b1) ? select_ln117_271_fu_874_p3 : 4'd12);

assign select_ln117_273_fu_902_p3 = ((or_ln117_248_fu_882_p2[0:0] == 1'b1) ? select_ln117_272_fu_888_p3 : 4'd13);

assign select_ln117_274_fu_916_p3 = ((or_ln117_249_fu_896_p2[0:0] == 1'b1) ? select_ln117_273_fu_902_p3 : 4'd14);

assign select_ln117_275_fu_924_p3 = ((or_ln117_250_fu_910_p2[0:0] == 1'b1) ? select_ln117_274_fu_916_p3 : 4'd15);

assign select_ln117_276_fu_936_p3 = ((icmp_ln86_fu_376_p2[0:0] == 1'b1) ? zext_ln117_33_fu_932_p1 : 5'd16);

assign select_ln117_277_fu_1111_p3 = ((or_ln117_251_fu_1101_p2[0:0] == 1'b1) ? select_ln117_276_reg_1533 : 5'd17);

assign select_ln117_278_fu_1124_p3 = ((or_ln117_252_fu_1106_p2[0:0] == 1'b1) ? select_ln117_277_fu_1111_p3 : 5'd18);

assign select_ln117_279_fu_1137_p3 = ((or_ln117_253_fu_1118_p2[0:0] == 1'b1) ? select_ln117_278_fu_1124_p3 : 5'd19);

assign select_ln117_280_fu_1151_p3 = ((or_ln117_254_fu_1132_p2[0:0] == 1'b1) ? select_ln117_279_fu_1137_p3 : 5'd20);

assign select_ln117_281_fu_1165_p3 = ((or_ln117_255_fu_1145_p2[0:0] == 1'b1) ? select_ln117_280_fu_1151_p3 : 5'd21);

assign select_ln117_282_fu_1179_p3 = ((or_ln117_256_fu_1159_p2[0:0] == 1'b1) ? select_ln117_281_fu_1165_p3 : 5'd22);

assign select_ln117_283_fu_1192_p3 = ((or_ln117_257_fu_1173_p2[0:0] == 1'b1) ? select_ln117_282_fu_1179_p3 : 5'd23);

assign select_ln117_284_fu_1206_p3 = ((or_ln117_258_fu_1187_p2[0:0] == 1'b1) ? select_ln117_283_fu_1192_p3 : 5'd24);

assign select_ln117_285_fu_1220_p3 = ((or_ln117_259_fu_1200_p2[0:0] == 1'b1) ? select_ln117_284_fu_1206_p3 : 5'd25);

assign select_ln117_286_fu_1234_p3 = ((or_ln117_260_fu_1214_p2[0:0] == 1'b1) ? select_ln117_285_fu_1220_p3 : 5'd26);

assign select_ln117_287_fu_1248_p3 = ((or_ln117_261_fu_1228_p2[0:0] == 1'b1) ? select_ln117_286_fu_1234_p3 : 5'd27);

assign select_ln117_288_fu_1262_p3 = ((or_ln117_262_fu_1242_p2[0:0] == 1'b1) ? select_ln117_287_fu_1248_p3 : 5'd28);

assign select_ln117_289_fu_1276_p3 = ((or_ln117_263_fu_1256_p2[0:0] == 1'b1) ? select_ln117_288_fu_1262_p3 : 5'd29);

assign select_ln117_290_fu_1290_p3 = ((or_ln117_264_fu_1270_p2[0:0] == 1'b1) ? select_ln117_289_fu_1276_p3 : 5'd30);

assign select_ln117_fu_752_p3 = ((and_ln102_337_fu_616_p2[0:0] == 1'b1) ? zext_ln117_fu_742_p1 : 2'd2);

assign xor_ln104_128_fu_568_p2 = (icmp_ln86_271_fu_382_p2 ^ 1'd1);

assign xor_ln104_129_fu_954_p2 = (icmp_ln86_272_reg_1451 ^ 1'd1);

assign xor_ln104_130_fu_586_p2 = (icmp_ln86_273_fu_394_p2 ^ 1'd1);

assign xor_ln104_131_fu_604_p2 = (icmp_ln86_274_fu_400_p2 ^ 1'd1);

assign xor_ln104_132_fu_970_p2 = (icmp_ln86_275_reg_1457 ^ 1'd1);

assign xor_ln104_133_fu_986_p2 = (icmp_ln86_276_reg_1463 ^ 1'd1);

assign xor_ln104_134_fu_622_p2 = (icmp_ln86_277_fu_418_p2 ^ 1'd1);

assign xor_ln104_135_fu_634_p2 = (icmp_ln86_278_fu_424_p2 ^ 1'd1);

assign xor_ln104_136_fu_646_p2 = (icmp_ln86_279_fu_430_p2 ^ 1'd1);

assign xor_ln104_137_fu_658_p2 = (icmp_ln86_280_fu_436_p2 ^ 1'd1);

assign xor_ln104_138_fu_1002_p2 = (icmp_ln86_281_reg_1469 ^ 1'd1);

assign xor_ln104_139_fu_1012_p2 = (icmp_ln86_282_reg_1475 ^ 1'd1);

assign xor_ln104_140_fu_1022_p2 = (icmp_ln86_283_reg_1481 ^ 1'd1);

assign xor_ln104_141_fu_1032_p2 = (icmp_ln86_284_reg_1487 ^ 1'd1);

assign xor_ln104_fu_944_p2 = (icmp_ln86_reg_1442 ^ 1'd1);

assign xor_ln117_fu_736_p2 = (1'd1 ^ and_ln102_345_fu_664_p2);

assign zext_ln117_31_fu_768_p1 = select_ln117_263_fu_760_p3;

assign zext_ln117_32_fu_822_p1 = select_ln117_267_fu_814_p3;

assign zext_ln117_33_fu_932_p1 = select_ln117_275_fu_924_p3;

assign zext_ln117_fu_742_p1 = xor_ln117_fu_736_p2;

endmodule //my_prj_decision_function_89
