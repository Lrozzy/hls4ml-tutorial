// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_15 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_3_val,
        x_5_val,
        x_8_val,
        x_10_val,
        x_12_val,
        x_14_val,
        x_16_val,
        x_17_val,
        x_19_val,
        x_21_val,
        x_25_val,
        x_27_val,
        x_34_val,
        x_40_val,
        x_46_val,
        x_47_val,
        x_51_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_3_val;
input  [17:0] x_5_val;
input  [17:0] x_8_val;
input  [17:0] x_10_val;
input  [17:0] x_12_val;
input  [17:0] x_14_val;
input  [17:0] x_16_val;
input  [17:0] x_17_val;
input  [17:0] x_19_val;
input  [17:0] x_21_val;
input  [17:0] x_25_val;
input  [17:0] x_27_val;
input  [17:0] x_34_val;
input  [17:0] x_40_val;
input  [17:0] x_46_val;
input  [17:0] x_47_val;
input  [17:0] x_51_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_404_fu_450_p2;
reg   [0:0] icmp_ln86_404_reg_1302;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_406_fu_462_p2;
reg   [0:0] icmp_ln86_406_reg_1308;
wire   [0:0] icmp_ln86_413_fu_504_p2;
reg   [0:0] icmp_ln86_413_reg_1314;
wire   [0:0] icmp_ln86_414_fu_510_p2;
reg   [0:0] icmp_ln86_414_reg_1319;
wire   [0:0] icmp_ln86_415_fu_516_p2;
reg   [0:0] icmp_ln86_415_reg_1324;
wire   [0:0] icmp_ln86_416_fu_522_p2;
reg   [0:0] icmp_ln86_416_reg_1329;
wire   [0:0] icmp_ln86_417_fu_528_p2;
reg   [0:0] icmp_ln86_417_reg_1334;
wire   [0:0] and_ln104_77_fu_618_p2;
reg   [0:0] and_ln104_77_reg_1339;
wire   [0:0] and_ln104_78_fu_636_p2;
reg   [0:0] and_ln104_78_reg_1345;
wire   [0:0] and_ln104_79_fu_708_p2;
reg   [0:0] and_ln104_79_reg_1352;
wire   [0:0] or_ln117_377_fu_980_p2;
reg   [0:0] or_ln117_377_reg_1358;
wire   [4:0] select_ln117_398_fu_994_p3;
reg   [4:0] select_ln117_398_reg_1364;
wire   [0:0] or_ln117_381_fu_1002_p2;
reg   [0:0] or_ln117_381_reg_1369;
wire    ap_block_pp0_stage0;
wire   [15:0] tmp_26_fu_358_p4;
wire   [12:0] tmp_27_fu_386_p4;
wire   [0:0] icmp_ln86_fu_368_p2;
wire   [0:0] icmp_ln86_393_fu_374_p2;
wire   [0:0] xor_ln104_189_fu_546_p2;
wire   [0:0] icmp_ln86_394_fu_380_p2;
wire   [0:0] xor_ln104_fu_534_p2;
wire   [0:0] xor_ln104_190_fu_564_p2;
wire   [0:0] icmp_ln86_1402_fu_396_p2;
wire   [0:0] and_ln102_fu_540_p2;
wire   [0:0] icmp_ln86_396_fu_402_p2;
wire   [0:0] and_ln104_fu_552_p2;
wire   [0:0] xor_ln104_192_fu_594_p2;
wire   [0:0] icmp_ln86_397_fu_408_p2;
wire   [0:0] and_ln102_379_fu_558_p2;
wire   [0:0] xor_ln104_193_fu_612_p2;
wire   [0:0] icmp_ln86_398_fu_414_p2;
wire   [0:0] and_ln104_75_fu_570_p2;
wire   [0:0] xor_ln104_194_fu_630_p2;
wire   [0:0] icmp_ln86_399_fu_420_p2;
wire   [0:0] and_ln102_380_fu_576_p2;
wire   [0:0] icmp_ln86_400_fu_426_p2;
wire   [0:0] xor_ln104_191_fu_582_p2;
wire   [0:0] and_ln102_403_fu_648_p2;
wire   [0:0] icmp_ln86_401_fu_432_p2;
wire   [0:0] and_ln102_381_fu_588_p2;
wire   [0:0] icmp_ln86_402_fu_438_p2;
wire   [0:0] and_ln104_76_fu_600_p2;
wire   [0:0] icmp_ln86_403_fu_444_p2;
wire   [0:0] and_ln102_382_fu_606_p2;
wire   [0:0] icmp_ln86_405_fu_456_p2;
wire   [0:0] and_ln102_383_fu_624_p2;
wire   [0:0] xor_ln104_199_fu_702_p2;
wire   [0:0] icmp_ln86_407_fu_468_p2;
wire   [0:0] and_ln102_386_fu_660_p2;
wire   [0:0] icmp_ln86_408_fu_474_p2;
wire   [0:0] xor_ln104_195_fu_666_p2;
wire   [0:0] and_ln102_404_fu_720_p2;
wire   [0:0] icmp_ln86_409_fu_480_p2;
wire   [0:0] and_ln102_387_fu_672_p2;
wire   [0:0] icmp_ln86_410_fu_486_p2;
wire   [0:0] xor_ln104_196_fu_678_p2;
wire   [0:0] and_ln102_405_fu_738_p2;
wire   [0:0] icmp_ln86_411_fu_492_p2;
wire   [0:0] and_ln102_388_fu_684_p2;
wire   [0:0] icmp_ln86_412_fu_498_p2;
wire   [0:0] xor_ln104_197_fu_690_p2;
wire   [0:0] and_ln102_406_fu_756_p2;
wire   [0:0] and_ln102_384_fu_642_p2;
wire   [0:0] xor_ln117_fu_768_p2;
wire   [0:0] and_ln102_385_fu_654_p2;
wire   [1:0] zext_ln117_fu_774_p1;
wire   [0:0] or_ln117_fu_778_p2;
wire   [1:0] select_ln117_fu_784_p3;
wire   [1:0] select_ln117_384_fu_792_p3;
wire   [0:0] and_ln102_390_fu_696_p2;
wire   [2:0] zext_ln117_42_fu_800_p1;
wire   [0:0] or_ln117_365_fu_804_p2;
wire   [0:0] and_ln102_392_fu_714_p2;
wire   [2:0] select_ln117_385_fu_810_p3;
wire   [0:0] or_ln117_366_fu_818_p2;
wire   [2:0] select_ln117_386_fu_824_p3;
wire   [0:0] or_ln117_367_fu_832_p2;
wire   [0:0] and_ln102_393_fu_726_p2;
wire   [2:0] select_ln117_387_fu_838_p3;
wire   [2:0] select_ln117_388_fu_852_p3;
wire   [0:0] or_ln117_368_fu_846_p2;
wire   [3:0] zext_ln117_43_fu_860_p1;
wire   [0:0] or_ln117_369_fu_864_p2;
wire   [0:0] and_ln102_394_fu_732_p2;
wire   [3:0] select_ln117_389_fu_870_p3;
wire   [0:0] or_ln117_370_fu_878_p2;
wire   [3:0] select_ln117_390_fu_884_p3;
wire   [0:0] or_ln117_371_fu_892_p2;
wire   [0:0] and_ln102_395_fu_744_p2;
wire   [3:0] select_ln117_391_fu_898_p3;
wire   [0:0] or_ln117_372_fu_906_p2;
wire   [3:0] select_ln117_392_fu_912_p3;
wire   [0:0] or_ln117_373_fu_920_p2;
wire   [0:0] and_ln102_396_fu_750_p2;
wire   [3:0] select_ln117_393_fu_926_p3;
wire   [0:0] or_ln117_374_fu_934_p2;
wire   [3:0] select_ln117_394_fu_940_p3;
wire   [0:0] or_ln117_375_fu_948_p2;
wire   [0:0] and_ln102_397_fu_762_p2;
wire   [3:0] select_ln117_395_fu_954_p3;
wire   [3:0] select_ln117_396_fu_968_p3;
wire   [0:0] or_ln117_376_fu_962_p2;
wire   [4:0] zext_ln117_44_fu_976_p1;
wire   [4:0] select_ln117_397_fu_986_p3;
wire   [0:0] and_ln102_389_fu_1008_p2;
wire   [0:0] xor_ln104_198_fu_1012_p2;
wire   [0:0] and_ln102_407_fu_1031_p2;
wire   [0:0] and_ln102_391_fu_1017_p2;
wire   [0:0] xor_ln104_200_fu_1021_p2;
wire   [0:0] and_ln102_408_fu_1050_p2;
wire   [0:0] and_ln102_398_fu_1026_p2;
wire   [0:0] or_ln117_378_fu_1060_p2;
wire   [0:0] or_ln117_379_fu_1065_p2;
wire   [0:0] and_ln102_399_fu_1036_p2;
wire   [4:0] select_ln117_399_fu_1070_p3;
wire   [0:0] or_ln117_380_fu_1077_p2;
wire   [4:0] select_ln117_400_fu_1083_p3;
wire   [0:0] and_ln102_400_fu_1041_p2;
wire   [4:0] select_ln117_401_fu_1091_p3;
wire   [0:0] or_ln117_382_fu_1099_p2;
wire   [4:0] select_ln117_402_fu_1104_p3;
wire   [0:0] or_ln117_383_fu_1111_p2;
wire   [0:0] and_ln102_401_fu_1045_p2;
wire   [4:0] select_ln117_403_fu_1115_p3;
wire   [0:0] or_ln117_384_fu_1123_p2;
wire   [4:0] select_ln117_404_fu_1129_p3;
wire   [0:0] or_ln117_385_fu_1137_p2;
wire   [0:0] and_ln102_402_fu_1055_p2;
wire   [4:0] select_ln117_405_fu_1143_p3;
wire   [0:0] or_ln117_386_fu_1151_p2;
wire   [4:0] select_ln117_406_fu_1157_p3;
wire   [11:0] tmp_fu_1178_p55;
wire   [4:0] tmp_fu_1178_p56;
wire   [0:0] or_ln117_387_fu_1165_p2;
wire   [11:0] tmp_fu_1178_p57;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] tmp_fu_1178_p1;
wire   [4:0] tmp_fu_1178_p3;
wire   [4:0] tmp_fu_1178_p5;
wire   [4:0] tmp_fu_1178_p7;
wire   [4:0] tmp_fu_1178_p9;
wire   [4:0] tmp_fu_1178_p11;
wire   [4:0] tmp_fu_1178_p13;
wire   [4:0] tmp_fu_1178_p15;
wire   [4:0] tmp_fu_1178_p17;
wire   [4:0] tmp_fu_1178_p19;
wire   [4:0] tmp_fu_1178_p21;
wire   [4:0] tmp_fu_1178_p23;
wire   [4:0] tmp_fu_1178_p25;
wire   [4:0] tmp_fu_1178_p27;
wire   [4:0] tmp_fu_1178_p29;
wire   [4:0] tmp_fu_1178_p31;
wire  signed [4:0] tmp_fu_1178_p33;
wire  signed [4:0] tmp_fu_1178_p35;
wire  signed [4:0] tmp_fu_1178_p37;
wire  signed [4:0] tmp_fu_1178_p39;
wire  signed [4:0] tmp_fu_1178_p41;
wire  signed [4:0] tmp_fu_1178_p43;
wire  signed [4:0] tmp_fu_1178_p45;
wire  signed [4:0] tmp_fu_1178_p47;
wire  signed [4:0] tmp_fu_1178_p49;
wire  signed [4:0] tmp_fu_1178_p51;
wire  signed [4:0] tmp_fu_1178_p53;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_55_5_12_1_1_x0 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_55_5_12_1_1_x0_U1802(
    .din0(12'd176),
    .din1(12'd1369),
    .din2(12'd229),
    .din3(12'd3747),
    .din4(12'd430),
    .din5(12'd4029),
    .din6(12'd3524),
    .din7(12'd1876),
    .din8(12'd383),
    .din9(12'd3715),
    .din10(12'd335),
    .din11(12'd3442),
    .din12(12'd293),
    .din13(12'd4085),
    .din14(12'd32),
    .din15(12'd4087),
    .din16(12'd219),
    .din17(12'd3906),
    .din18(12'd88),
    .din19(12'd32),
    .din20(12'd664),
    .din21(12'd3598),
    .din22(12'd2133),
    .din23(12'd45),
    .din24(12'd3967),
    .din25(12'd228),
    .din26(12'd3393),
    .def(tmp_fu_1178_p55),
    .sel(tmp_fu_1178_p56),
    .dout(tmp_fu_1178_p57)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln104_77_reg_1339 <= and_ln104_77_fu_618_p2;
        and_ln104_78_reg_1345 <= and_ln104_78_fu_636_p2;
        and_ln104_79_reg_1352 <= and_ln104_79_fu_708_p2;
        icmp_ln86_404_reg_1302 <= icmp_ln86_404_fu_450_p2;
        icmp_ln86_406_reg_1308 <= icmp_ln86_406_fu_462_p2;
        icmp_ln86_413_reg_1314 <= icmp_ln86_413_fu_504_p2;
        icmp_ln86_414_reg_1319 <= icmp_ln86_414_fu_510_p2;
        icmp_ln86_415_reg_1324 <= icmp_ln86_415_fu_516_p2;
        icmp_ln86_416_reg_1329 <= icmp_ln86_416_fu_522_p2;
        icmp_ln86_417_reg_1334 <= icmp_ln86_417_fu_528_p2;
        or_ln117_377_reg_1358 <= or_ln117_377_fu_980_p2;
        or_ln117_381_reg_1369 <= or_ln117_381_fu_1002_p2;
        select_ln117_398_reg_1364 <= select_ln117_398_fu_994_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln102_379_fu_558_p2 = (xor_ln104_fu_534_p2 & icmp_ln86_394_fu_380_p2);

assign and_ln102_380_fu_576_p2 = (icmp_ln86_1402_fu_396_p2 & and_ln102_fu_540_p2);

assign and_ln102_381_fu_588_p2 = (icmp_ln86_396_fu_402_p2 & and_ln104_fu_552_p2);

assign and_ln102_382_fu_606_p2 = (icmp_ln86_397_fu_408_p2 & and_ln102_379_fu_558_p2);

assign and_ln102_383_fu_624_p2 = (icmp_ln86_398_fu_414_p2 & and_ln104_75_fu_570_p2);

assign and_ln102_384_fu_642_p2 = (icmp_ln86_399_fu_420_p2 & and_ln102_380_fu_576_p2);

assign and_ln102_385_fu_654_p2 = (and_ln102_fu_540_p2 & and_ln102_403_fu_648_p2);

assign and_ln102_386_fu_660_p2 = (icmp_ln86_401_fu_432_p2 & and_ln102_381_fu_588_p2);

assign and_ln102_387_fu_672_p2 = (icmp_ln86_402_fu_438_p2 & and_ln104_76_fu_600_p2);

assign and_ln102_388_fu_684_p2 = (icmp_ln86_403_fu_444_p2 & and_ln102_382_fu_606_p2);

assign and_ln102_389_fu_1008_p2 = (icmp_ln86_404_reg_1302 & and_ln104_77_reg_1339);

assign and_ln102_390_fu_696_p2 = (icmp_ln86_405_fu_456_p2 & and_ln102_383_fu_624_p2);

assign and_ln102_391_fu_1017_p2 = (icmp_ln86_406_reg_1308 & and_ln104_78_reg_1345);

assign and_ln102_392_fu_714_p2 = (icmp_ln86_407_fu_468_p2 & and_ln102_386_fu_660_p2);

assign and_ln102_393_fu_726_p2 = (and_ln102_404_fu_720_p2 & and_ln102_381_fu_588_p2);

assign and_ln102_394_fu_732_p2 = (icmp_ln86_409_fu_480_p2 & and_ln102_387_fu_672_p2);

assign and_ln102_395_fu_744_p2 = (and_ln104_76_fu_600_p2 & and_ln102_405_fu_738_p2);

assign and_ln102_396_fu_750_p2 = (icmp_ln86_411_fu_492_p2 & and_ln102_388_fu_684_p2);

assign and_ln102_397_fu_762_p2 = (and_ln102_406_fu_756_p2 & and_ln102_382_fu_606_p2);

assign and_ln102_398_fu_1026_p2 = (icmp_ln86_413_reg_1314 & and_ln102_389_fu_1008_p2);

assign and_ln102_399_fu_1036_p2 = (and_ln104_77_reg_1339 & and_ln102_407_fu_1031_p2);

assign and_ln102_400_fu_1041_p2 = (icmp_ln86_415_reg_1324 & and_ln104_79_reg_1352);

assign and_ln102_401_fu_1045_p2 = (icmp_ln86_416_reg_1329 & and_ln102_391_fu_1017_p2);

assign and_ln102_402_fu_1055_p2 = (and_ln104_78_reg_1345 & and_ln102_408_fu_1050_p2);

assign and_ln102_403_fu_648_p2 = (xor_ln104_191_fu_582_p2 & icmp_ln86_400_fu_426_p2);

assign and_ln102_404_fu_720_p2 = (xor_ln104_195_fu_666_p2 & icmp_ln86_408_fu_474_p2);

assign and_ln102_405_fu_738_p2 = (xor_ln104_196_fu_678_p2 & icmp_ln86_410_fu_486_p2);

assign and_ln102_406_fu_756_p2 = (xor_ln104_197_fu_690_p2 & icmp_ln86_412_fu_498_p2);

assign and_ln102_407_fu_1031_p2 = (xor_ln104_198_fu_1012_p2 & icmp_ln86_414_reg_1319);

assign and_ln102_408_fu_1050_p2 = (xor_ln104_200_fu_1021_p2 & icmp_ln86_417_reg_1334);

assign and_ln102_fu_540_p2 = (icmp_ln86_fu_368_p2 & icmp_ln86_393_fu_374_p2);

assign and_ln104_75_fu_570_p2 = (xor_ln104_fu_534_p2 & xor_ln104_190_fu_564_p2);

assign and_ln104_76_fu_600_p2 = (xor_ln104_192_fu_594_p2 & and_ln104_fu_552_p2);

assign and_ln104_77_fu_618_p2 = (xor_ln104_193_fu_612_p2 & and_ln102_379_fu_558_p2);

assign and_ln104_78_fu_636_p2 = (xor_ln104_194_fu_630_p2 & and_ln104_75_fu_570_p2);

assign and_ln104_79_fu_708_p2 = (xor_ln104_199_fu_702_p2 & and_ln102_383_fu_624_p2);

assign and_ln104_fu_552_p2 = (xor_ln104_189_fu_546_p2 & icmp_ln86_fu_368_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((or_ln117_387_fu_1165_p2[0:0] == 1'b1) ? tmp_fu_1178_p57 : 12'd0);

assign icmp_ln86_1402_fu_396_p2 = (($signed(tmp_27_fu_386_p4) < $signed(13'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_393_fu_374_p2 = (($signed(x_1_val) < $signed(18'd157915)) ? 1'b1 : 1'b0);

assign icmp_ln86_394_fu_380_p2 = (($signed(x_34_val) < $signed(18'd493)) ? 1'b1 : 1'b0);

assign icmp_ln86_396_fu_402_p2 = (($signed(x_21_val) < $signed(18'd47)) ? 1'b1 : 1'b0);

assign icmp_ln86_397_fu_408_p2 = (($signed(x_27_val) < $signed(18'd64589)) ? 1'b1 : 1'b0);

assign icmp_ln86_398_fu_414_p2 = (($signed(x_47_val) < $signed(18'd46829)) ? 1'b1 : 1'b0);

assign icmp_ln86_399_fu_420_p2 = (($signed(x_8_val) < $signed(18'd286)) ? 1'b1 : 1'b0);

assign icmp_ln86_400_fu_426_p2 = (($signed(x_12_val) < $signed(18'd259256)) ? 1'b1 : 1'b0);

assign icmp_ln86_401_fu_432_p2 = (($signed(x_17_val) < $signed(18'd3)) ? 1'b1 : 1'b0);

assign icmp_ln86_402_fu_438_p2 = (($signed(x_10_val) < $signed(18'd910)) ? 1'b1 : 1'b0);

assign icmp_ln86_403_fu_444_p2 = (($signed(x_5_val) < $signed(18'd59214)) ? 1'b1 : 1'b0);

assign icmp_ln86_404_fu_450_p2 = (($signed(x_3_val) < $signed(18'd249864)) ? 1'b1 : 1'b0);

assign icmp_ln86_405_fu_456_p2 = (($signed(x_47_val) < $signed(18'd40041)) ? 1'b1 : 1'b0);

assign icmp_ln86_406_fu_462_p2 = (($signed(x_19_val) < $signed(18'd3515)) ? 1'b1 : 1'b0);

assign icmp_ln86_407_fu_468_p2 = (($signed(x_46_val) < $signed(18'd14)) ? 1'b1 : 1'b0);

assign icmp_ln86_408_fu_474_p2 = (($signed(x_10_val) < $signed(18'd819)) ? 1'b1 : 1'b0);

assign icmp_ln86_409_fu_480_p2 = (($signed(x_1_val) < $signed(18'd1677)) ? 1'b1 : 1'b0);

assign icmp_ln86_410_fu_486_p2 = (($signed(x_12_val) < $signed(18'd259016)) ? 1'b1 : 1'b0);

assign icmp_ln86_411_fu_492_p2 = (($signed(x_16_val) < $signed(18'd117)) ? 1'b1 : 1'b0);

assign icmp_ln86_412_fu_498_p2 = (($signed(x_40_val) < $signed(18'd1143)) ? 1'b1 : 1'b0);

assign icmp_ln86_413_fu_504_p2 = (($signed(x_19_val) < $signed(18'd2078)) ? 1'b1 : 1'b0);

assign icmp_ln86_414_fu_510_p2 = (($signed(x_25_val) < $signed(18'd194)) ? 1'b1 : 1'b0);

assign icmp_ln86_415_fu_516_p2 = (($signed(x_14_val) < $signed(18'd24)) ? 1'b1 : 1'b0);

assign icmp_ln86_416_fu_522_p2 = (($signed(x_21_val) < $signed(18'd322)) ? 1'b1 : 1'b0);

assign icmp_ln86_417_fu_528_p2 = (($signed(x_51_val) < $signed(18'd965)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_368_p2 = (($signed(tmp_26_fu_358_p4) < $signed(16'd1)) ? 1'b1 : 1'b0);

assign or_ln117_365_fu_804_p2 = (and_ln102_fu_540_p2 | and_ln102_390_fu_696_p2);

assign or_ln117_366_fu_818_p2 = (or_ln117_365_fu_804_p2 | and_ln102_392_fu_714_p2);

assign or_ln117_367_fu_832_p2 = (or_ln117_365_fu_804_p2 | and_ln102_386_fu_660_p2);

assign or_ln117_368_fu_846_p2 = (or_ln117_367_fu_832_p2 | and_ln102_393_fu_726_p2);

assign or_ln117_369_fu_864_p2 = (or_ln117_365_fu_804_p2 | and_ln102_381_fu_588_p2);

assign or_ln117_370_fu_878_p2 = (or_ln117_369_fu_864_p2 | and_ln102_394_fu_732_p2);

assign or_ln117_371_fu_892_p2 = (or_ln117_369_fu_864_p2 | and_ln102_387_fu_672_p2);

assign or_ln117_372_fu_906_p2 = (or_ln117_371_fu_892_p2 | and_ln102_395_fu_744_p2);

assign or_ln117_373_fu_920_p2 = (icmp_ln86_fu_368_p2 | and_ln102_390_fu_696_p2);

assign or_ln117_374_fu_934_p2 = (or_ln117_373_fu_920_p2 | and_ln102_396_fu_750_p2);

assign or_ln117_375_fu_948_p2 = (or_ln117_373_fu_920_p2 | and_ln102_388_fu_684_p2);

assign or_ln117_376_fu_962_p2 = (or_ln117_375_fu_948_p2 | and_ln102_397_fu_762_p2);

assign or_ln117_377_fu_980_p2 = (or_ln117_373_fu_920_p2 | and_ln102_382_fu_606_p2);

assign or_ln117_378_fu_1060_p2 = (or_ln117_377_reg_1358 | and_ln102_398_fu_1026_p2);

assign or_ln117_379_fu_1065_p2 = (or_ln117_377_reg_1358 | and_ln102_389_fu_1008_p2);

assign or_ln117_380_fu_1077_p2 = (or_ln117_379_fu_1065_p2 | and_ln102_399_fu_1036_p2);

assign or_ln117_381_fu_1002_p2 = (or_ln117_373_fu_920_p2 | and_ln102_379_fu_558_p2);

assign or_ln117_382_fu_1099_p2 = (or_ln117_381_reg_1369 | and_ln102_400_fu_1041_p2);

assign or_ln117_383_fu_1111_p2 = (or_ln117_381_reg_1369 | and_ln104_79_reg_1352);

assign or_ln117_384_fu_1123_p2 = (or_ln117_383_fu_1111_p2 | and_ln102_401_fu_1045_p2);

assign or_ln117_385_fu_1137_p2 = (or_ln117_383_fu_1111_p2 | and_ln102_391_fu_1017_p2);

assign or_ln117_386_fu_1151_p2 = (or_ln117_385_fu_1137_p2 | and_ln102_402_fu_1055_p2);

assign or_ln117_387_fu_1165_p2 = (or_ln117_383_fu_1111_p2 | and_ln104_78_reg_1345);

assign or_ln117_fu_778_p2 = (and_ln102_385_fu_654_p2 | and_ln102_380_fu_576_p2);

assign select_ln117_384_fu_792_p3 = ((or_ln117_fu_778_p2[0:0] == 1'b1) ? select_ln117_fu_784_p3 : 2'd3);

assign select_ln117_385_fu_810_p3 = ((and_ln102_fu_540_p2[0:0] == 1'b1) ? zext_ln117_42_fu_800_p1 : 3'd4);

assign select_ln117_386_fu_824_p3 = ((or_ln117_365_fu_804_p2[0:0] == 1'b1) ? select_ln117_385_fu_810_p3 : 3'd5);

assign select_ln117_387_fu_838_p3 = ((or_ln117_366_fu_818_p2[0:0] == 1'b1) ? select_ln117_386_fu_824_p3 : 3'd6);

assign select_ln117_388_fu_852_p3 = ((or_ln117_367_fu_832_p2[0:0] == 1'b1) ? select_ln117_387_fu_838_p3 : 3'd7);

assign select_ln117_389_fu_870_p3 = ((or_ln117_368_fu_846_p2[0:0] == 1'b1) ? zext_ln117_43_fu_860_p1 : 4'd8);

assign select_ln117_390_fu_884_p3 = ((or_ln117_369_fu_864_p2[0:0] == 1'b1) ? select_ln117_389_fu_870_p3 : 4'd9);

assign select_ln117_391_fu_898_p3 = ((or_ln117_370_fu_878_p2[0:0] == 1'b1) ? select_ln117_390_fu_884_p3 : 4'd10);

assign select_ln117_392_fu_912_p3 = ((or_ln117_371_fu_892_p2[0:0] == 1'b1) ? select_ln117_391_fu_898_p3 : 4'd11);

assign select_ln117_393_fu_926_p3 = ((or_ln117_372_fu_906_p2[0:0] == 1'b1) ? select_ln117_392_fu_912_p3 : 4'd12);

assign select_ln117_394_fu_940_p3 = ((or_ln117_373_fu_920_p2[0:0] == 1'b1) ? select_ln117_393_fu_926_p3 : 4'd13);

assign select_ln117_395_fu_954_p3 = ((or_ln117_374_fu_934_p2[0:0] == 1'b1) ? select_ln117_394_fu_940_p3 : 4'd14);

assign select_ln117_396_fu_968_p3 = ((or_ln117_375_fu_948_p2[0:0] == 1'b1) ? select_ln117_395_fu_954_p3 : 4'd15);

assign select_ln117_397_fu_986_p3 = ((or_ln117_376_fu_962_p2[0:0] == 1'b1) ? zext_ln117_44_fu_976_p1 : 5'd16);

assign select_ln117_398_fu_994_p3 = ((or_ln117_377_fu_980_p2[0:0] == 1'b1) ? select_ln117_397_fu_986_p3 : 5'd17);

assign select_ln117_399_fu_1070_p3 = ((or_ln117_378_fu_1060_p2[0:0] == 1'b1) ? select_ln117_398_reg_1364 : 5'd18);

assign select_ln117_400_fu_1083_p3 = ((or_ln117_379_fu_1065_p2[0:0] == 1'b1) ? select_ln117_399_fu_1070_p3 : 5'd19);

assign select_ln117_401_fu_1091_p3 = ((or_ln117_380_fu_1077_p2[0:0] == 1'b1) ? select_ln117_400_fu_1083_p3 : 5'd20);

assign select_ln117_402_fu_1104_p3 = ((or_ln117_381_reg_1369[0:0] == 1'b1) ? select_ln117_401_fu_1091_p3 : 5'd21);

assign select_ln117_403_fu_1115_p3 = ((or_ln117_382_fu_1099_p2[0:0] == 1'b1) ? select_ln117_402_fu_1104_p3 : 5'd22);

assign select_ln117_404_fu_1129_p3 = ((or_ln117_383_fu_1111_p2[0:0] == 1'b1) ? select_ln117_403_fu_1115_p3 : 5'd23);

assign select_ln117_405_fu_1143_p3 = ((or_ln117_384_fu_1123_p2[0:0] == 1'b1) ? select_ln117_404_fu_1129_p3 : 5'd24);

assign select_ln117_406_fu_1157_p3 = ((or_ln117_385_fu_1137_p2[0:0] == 1'b1) ? select_ln117_405_fu_1143_p3 : 5'd25);

assign select_ln117_fu_784_p3 = ((and_ln102_380_fu_576_p2[0:0] == 1'b1) ? zext_ln117_fu_774_p1 : 2'd2);

assign tmp_26_fu_358_p4 = {{x_17_val[17:2]}};

assign tmp_27_fu_386_p4 = {{x_16_val[17:5]}};

assign tmp_fu_1178_p55 = 'bx;

assign tmp_fu_1178_p56 = ((or_ln117_386_fu_1151_p2[0:0] == 1'b1) ? select_ln117_406_fu_1157_p3 : 5'd26);

assign xor_ln104_189_fu_546_p2 = (icmp_ln86_393_fu_374_p2 ^ 1'd1);

assign xor_ln104_190_fu_564_p2 = (icmp_ln86_394_fu_380_p2 ^ 1'd1);

assign xor_ln104_191_fu_582_p2 = (icmp_ln86_1402_fu_396_p2 ^ 1'd1);

assign xor_ln104_192_fu_594_p2 = (icmp_ln86_396_fu_402_p2 ^ 1'd1);

assign xor_ln104_193_fu_612_p2 = (icmp_ln86_397_fu_408_p2 ^ 1'd1);

assign xor_ln104_194_fu_630_p2 = (icmp_ln86_398_fu_414_p2 ^ 1'd1);

assign xor_ln104_195_fu_666_p2 = (icmp_ln86_401_fu_432_p2 ^ 1'd1);

assign xor_ln104_196_fu_678_p2 = (icmp_ln86_402_fu_438_p2 ^ 1'd1);

assign xor_ln104_197_fu_690_p2 = (icmp_ln86_403_fu_444_p2 ^ 1'd1);

assign xor_ln104_198_fu_1012_p2 = (icmp_ln86_404_reg_1302 ^ 1'd1);

assign xor_ln104_199_fu_702_p2 = (icmp_ln86_405_fu_456_p2 ^ 1'd1);

assign xor_ln104_200_fu_1021_p2 = (icmp_ln86_406_reg_1308 ^ 1'd1);

assign xor_ln104_fu_534_p2 = (icmp_ln86_fu_368_p2 ^ 1'd1);

assign xor_ln117_fu_768_p2 = (1'd1 ^ and_ln102_384_fu_642_p2);

assign zext_ln117_42_fu_800_p1 = select_ln117_384_fu_792_p3;

assign zext_ln117_43_fu_860_p1 = select_ln117_388_fu_852_p3;

assign zext_ln117_44_fu_976_p1 = select_ln117_396_fu_968_p3;

assign zext_ln117_fu_774_p1 = xor_ln117_fu_768_p2;

endmodule //my_prj_decision_function_15
