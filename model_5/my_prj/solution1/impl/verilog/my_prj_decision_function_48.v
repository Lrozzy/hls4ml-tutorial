// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_48 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_3_val,
        x_6_val,
        x_10_val,
        x_17_val,
        x_18_val,
        x_22_val,
        x_25_val,
        x_30_val,
        x_34_val,
        x_39_val,
        x_40_val,
        x_43_val,
        x_49_val,
        x_51_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_3_val;
input  [17:0] x_6_val;
input  [17:0] x_10_val;
input  [17:0] x_17_val;
input  [17:0] x_18_val;
input  [17:0] x_22_val;
input  [17:0] x_25_val;
input  [17:0] x_30_val;
input  [17:0] x_34_val;
input  [17:0] x_39_val;
input  [17:0] x_40_val;
input  [17:0] x_43_val;
input  [17:0] x_49_val;
input  [17:0] x_51_val;
input  [17:0] x_52_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_1284_fu_410_p2;
reg   [0:0] icmp_ln86_1284_reg_1255;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_1285_fu_416_p2;
reg   [0:0] icmp_ln86_1285_reg_1261;
wire   [0:0] icmp_ln86_1293_fu_464_p2;
reg   [0:0] icmp_ln86_1293_reg_1267;
wire   [0:0] icmp_ln86_1294_fu_470_p2;
reg   [0:0] icmp_ln86_1294_reg_1272;
wire   [0:0] icmp_ln86_1295_fu_476_p2;
reg   [0:0] icmp_ln86_1295_reg_1277;
wire   [0:0] icmp_ln86_1296_fu_482_p2;
reg   [0:0] icmp_ln86_1296_reg_1282;
wire   [0:0] icmp_ln86_1297_fu_488_p2;
reg   [0:0] icmp_ln86_1297_reg_1287;
wire   [0:0] and_ln104_248_fu_572_p2;
reg   [0:0] and_ln104_248_reg_1292;
wire   [0:0] and_ln102_1229_fu_578_p2;
reg   [0:0] and_ln102_1229_reg_1298;
wire   [0:0] and_ln102_1237_fu_650_p2;
reg   [0:0] and_ln102_1237_reg_1305;
wire   [0:0] or_ln117_1167_fu_934_p2;
reg   [0:0] or_ln117_1167_reg_1311;
wire   [4:0] select_ln117_1247_fu_948_p3;
reg   [4:0] select_ln117_1247_reg_1317;
wire   [0:0] or_ln117_1171_fu_956_p2;
reg   [0:0] or_ln117_1171_reg_1322;
wire    ap_block_pp0_stage0;
wire   [0:0] tmp_19_fu_336_p3;
wire   [0:0] icmp_ln86_1273_fu_344_p2;
wire   [0:0] xor_ln104_609_fu_500_p2;
wire   [0:0] icmp_ln86_1274_fu_350_p2;
wire   [0:0] xor_ln104_fu_494_p2;
wire   [0:0] xor_ln104_610_fu_518_p2;
wire   [0:0] icmp_ln86_1275_fu_356_p2;
wire   [0:0] icmp_ln86_1276_fu_362_p2;
wire   [0:0] and_ln104_fu_506_p2;
wire   [0:0] xor_ln104_612_fu_548_p2;
wire   [0:0] icmp_ln86_1277_fu_368_p2;
wire   [0:0] and_ln102_fu_512_p2;
wire   [0:0] xor_ln104_613_fu_566_p2;
wire   [0:0] icmp_ln86_1278_fu_374_p2;
wire   [0:0] and_ln104_246_fu_524_p2;
wire   [0:0] xor_ln104_614_fu_584_p2;
wire   [0:0] icmp_ln86_1279_fu_380_p2;
wire   [0:0] and_ln102_1226_fu_530_p2;
wire   [0:0] icmp_ln86_1280_fu_386_p2;
wire   [0:0] xor_ln104_611_fu_536_p2;
wire   [0:0] and_ln102_1249_fu_602_p2;
wire   [0:0] icmp_ln86_1281_fu_392_p2;
wire   [0:0] and_ln102_1227_fu_542_p2;
wire   [0:0] icmp_ln86_1282_fu_398_p2;
wire   [0:0] and_ln104_247_fu_554_p2;
wire   [0:0] icmp_ln86_1283_fu_404_p2;
wire   [0:0] and_ln102_1228_fu_560_p2;
wire   [0:0] icmp_ln86_1286_fu_422_p2;
wire   [0:0] and_ln104_249_fu_590_p2;
wire   [0:0] xor_ln104_620_fu_656_p2;
wire   [0:0] icmp_ln86_1287_fu_428_p2;
wire   [0:0] and_ln102_1232_fu_614_p2;
wire   [0:0] icmp_ln86_1288_fu_434_p2;
wire   [0:0] xor_ln104_615_fu_620_p2;
wire   [0:0] and_ln102_1250_fu_674_p2;
wire   [0:0] icmp_ln86_1289_fu_440_p2;
wire   [0:0] and_ln102_1233_fu_626_p2;
wire   [0:0] icmp_ln86_1290_fu_446_p2;
wire   [0:0] xor_ln104_616_fu_632_p2;
wire   [0:0] and_ln102_1251_fu_692_p2;
wire   [0:0] icmp_ln86_1291_fu_452_p2;
wire   [0:0] and_ln102_1234_fu_638_p2;
wire   [0:0] icmp_ln86_1292_fu_458_p2;
wire   [0:0] xor_ln104_617_fu_644_p2;
wire   [0:0] and_ln102_1252_fu_710_p2;
wire   [0:0] and_ln102_1230_fu_596_p2;
wire   [0:0] xor_ln117_fu_722_p2;
wire   [0:0] and_ln102_1231_fu_608_p2;
wire   [1:0] zext_ln117_fu_728_p1;
wire   [0:0] or_ln117_fu_732_p2;
wire   [1:0] select_ln117_fu_738_p3;
wire   [1:0] select_ln117_1233_fu_746_p3;
wire   [0:0] and_ln104_250_fu_662_p2;
wire   [2:0] zext_ln117_141_fu_754_p1;
wire   [0:0] or_ln117_1155_fu_758_p2;
wire   [0:0] and_ln102_1238_fu_668_p2;
wire   [2:0] select_ln117_1234_fu_764_p3;
wire   [0:0] or_ln117_1156_fu_772_p2;
wire   [2:0] select_ln117_1235_fu_778_p3;
wire   [0:0] or_ln117_1157_fu_786_p2;
wire   [0:0] and_ln102_1239_fu_680_p2;
wire   [2:0] select_ln117_1236_fu_792_p3;
wire   [2:0] select_ln117_1237_fu_806_p3;
wire   [0:0] or_ln117_1158_fu_800_p2;
wire   [3:0] zext_ln117_142_fu_814_p1;
wire   [0:0] or_ln117_1159_fu_818_p2;
wire   [0:0] and_ln102_1240_fu_686_p2;
wire   [3:0] select_ln117_1238_fu_824_p3;
wire   [0:0] or_ln117_1160_fu_832_p2;
wire   [3:0] select_ln117_1239_fu_838_p3;
wire   [0:0] or_ln117_1161_fu_846_p2;
wire   [0:0] and_ln102_1241_fu_698_p2;
wire   [3:0] select_ln117_1240_fu_852_p3;
wire   [0:0] or_ln117_1162_fu_860_p2;
wire   [3:0] select_ln117_1241_fu_866_p3;
wire   [0:0] or_ln117_1163_fu_874_p2;
wire   [0:0] and_ln102_1242_fu_704_p2;
wire   [3:0] select_ln117_1242_fu_880_p3;
wire   [0:0] or_ln117_1164_fu_888_p2;
wire   [3:0] select_ln117_1243_fu_894_p3;
wire   [0:0] or_ln117_1165_fu_902_p2;
wire   [0:0] and_ln102_1243_fu_716_p2;
wire   [3:0] select_ln117_1244_fu_908_p3;
wire   [3:0] select_ln117_1245_fu_922_p3;
wire   [0:0] or_ln117_1166_fu_916_p2;
wire   [4:0] zext_ln117_143_fu_930_p1;
wire   [4:0] select_ln117_1246_fu_940_p3;
wire   [0:0] and_ln102_1235_fu_962_p2;
wire   [0:0] xor_ln104_618_fu_966_p2;
wire   [0:0] and_ln102_1253_fu_985_p2;
wire   [0:0] and_ln102_1236_fu_971_p2;
wire   [0:0] xor_ln104_619_fu_975_p2;
wire   [0:0] and_ln102_1254_fu_1000_p2;
wire   [0:0] and_ln102_1244_fu_980_p2;
wire   [0:0] or_ln117_1168_fu_1014_p2;
wire   [0:0] or_ln117_1169_fu_1019_p2;
wire   [0:0] and_ln102_1245_fu_990_p2;
wire   [4:0] select_ln117_1248_fu_1024_p3;
wire   [0:0] or_ln117_1170_fu_1031_p2;
wire   [4:0] select_ln117_1249_fu_1037_p3;
wire   [0:0] and_ln102_1246_fu_995_p2;
wire   [4:0] select_ln117_1250_fu_1045_p3;
wire   [0:0] or_ln117_1172_fu_1053_p2;
wire   [4:0] select_ln117_1251_fu_1058_p3;
wire   [0:0] or_ln117_1173_fu_1065_p2;
wire   [0:0] and_ln102_1247_fu_1005_p2;
wire   [4:0] select_ln117_1252_fu_1070_p3;
wire   [0:0] or_ln117_1174_fu_1078_p2;
wire   [4:0] select_ln117_1253_fu_1084_p3;
wire   [0:0] or_ln117_1175_fu_1092_p2;
wire   [0:0] and_ln102_1248_fu_1010_p2;
wire   [4:0] select_ln117_1254_fu_1096_p3;
wire   [0:0] or_ln117_1176_fu_1104_p2;
wire   [4:0] select_ln117_1255_fu_1110_p3;
wire   [11:0] tmp_fu_1131_p55;
wire   [4:0] tmp_fu_1131_p56;
wire   [0:0] or_ln117_1177_fu_1118_p2;
wire   [11:0] tmp_fu_1131_p57;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] tmp_fu_1131_p1;
wire   [4:0] tmp_fu_1131_p3;
wire   [4:0] tmp_fu_1131_p5;
wire   [4:0] tmp_fu_1131_p7;
wire   [4:0] tmp_fu_1131_p9;
wire   [4:0] tmp_fu_1131_p11;
wire   [4:0] tmp_fu_1131_p13;
wire   [4:0] tmp_fu_1131_p15;
wire   [4:0] tmp_fu_1131_p17;
wire   [4:0] tmp_fu_1131_p19;
wire   [4:0] tmp_fu_1131_p21;
wire   [4:0] tmp_fu_1131_p23;
wire   [4:0] tmp_fu_1131_p25;
wire   [4:0] tmp_fu_1131_p27;
wire   [4:0] tmp_fu_1131_p29;
wire   [4:0] tmp_fu_1131_p31;
wire  signed [4:0] tmp_fu_1131_p33;
wire  signed [4:0] tmp_fu_1131_p35;
wire  signed [4:0] tmp_fu_1131_p37;
wire  signed [4:0] tmp_fu_1131_p39;
wire  signed [4:0] tmp_fu_1131_p41;
wire  signed [4:0] tmp_fu_1131_p43;
wire  signed [4:0] tmp_fu_1131_p45;
wire  signed [4:0] tmp_fu_1131_p47;
wire  signed [4:0] tmp_fu_1131_p49;
wire  signed [4:0] tmp_fu_1131_p51;
wire  signed [4:0] tmp_fu_1131_p53;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_55_5_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_55_5_12_1_1_U1157(
    .din0(12'd1777),
    .din1(12'd339),
    .din2(12'd3795),
    .din3(12'd469),
    .din4(12'd1125),
    .din5(12'd4093),
    .din6(12'd1705),
    .din7(12'd3913),
    .din8(12'd3472),
    .din9(12'd3372),
    .din10(12'd75),
    .din11(12'd3722),
    .din12(12'd2365),
    .din13(12'd4084),
    .din14(12'd76),
    .din15(12'd3962),
    .din16(12'd4079),
    .din17(12'd687),
    .din18(12'd304),
    .din19(12'd3984),
    .din20(12'd242),
    .din21(12'd85),
    .din22(12'd4035),
    .din23(12'd3501),
    .din24(12'd195),
    .din25(12'd3058),
    .din26(12'd3826),
    .def(tmp_fu_1131_p55),
    .sel(tmp_fu_1131_p56),
    .dout(tmp_fu_1131_p57)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln102_1229_reg_1298 <= and_ln102_1229_fu_578_p2;
        and_ln102_1237_reg_1305 <= and_ln102_1237_fu_650_p2;
        and_ln104_248_reg_1292 <= and_ln104_248_fu_572_p2;
        icmp_ln86_1284_reg_1255 <= icmp_ln86_1284_fu_410_p2;
        icmp_ln86_1285_reg_1261 <= icmp_ln86_1285_fu_416_p2;
        icmp_ln86_1293_reg_1267 <= icmp_ln86_1293_fu_464_p2;
        icmp_ln86_1294_reg_1272 <= icmp_ln86_1294_fu_470_p2;
        icmp_ln86_1295_reg_1277 <= icmp_ln86_1295_fu_476_p2;
        icmp_ln86_1296_reg_1282 <= icmp_ln86_1296_fu_482_p2;
        icmp_ln86_1297_reg_1287 <= icmp_ln86_1297_fu_488_p2;
        or_ln117_1167_reg_1311 <= or_ln117_1167_fu_934_p2;
        or_ln117_1171_reg_1322 <= or_ln117_1171_fu_956_p2;
        select_ln117_1247_reg_1317 <= select_ln117_1247_fu_948_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln102_1226_fu_530_p2 = (icmp_ln86_1275_fu_356_p2 & icmp_ln86_1273_fu_344_p2);

assign and_ln102_1227_fu_542_p2 = (icmp_ln86_1276_fu_362_p2 & and_ln104_fu_506_p2);

assign and_ln102_1228_fu_560_p2 = (icmp_ln86_1277_fu_368_p2 & and_ln102_fu_512_p2);

assign and_ln102_1229_fu_578_p2 = (icmp_ln86_1278_fu_374_p2 & and_ln104_246_fu_524_p2);

assign and_ln102_1230_fu_596_p2 = (icmp_ln86_1279_fu_380_p2 & and_ln102_1226_fu_530_p2);

assign and_ln102_1231_fu_608_p2 = (icmp_ln86_1273_fu_344_p2 & and_ln102_1249_fu_602_p2);

assign and_ln102_1232_fu_614_p2 = (icmp_ln86_1281_fu_392_p2 & and_ln102_1227_fu_542_p2);

assign and_ln102_1233_fu_626_p2 = (icmp_ln86_1282_fu_398_p2 & and_ln104_247_fu_554_p2);

assign and_ln102_1234_fu_638_p2 = (icmp_ln86_1283_fu_404_p2 & and_ln102_1228_fu_560_p2);

assign and_ln102_1235_fu_962_p2 = (icmp_ln86_1284_reg_1255 & and_ln104_248_reg_1292);

assign and_ln102_1236_fu_971_p2 = (icmp_ln86_1285_reg_1261 & and_ln102_1229_reg_1298);

assign and_ln102_1237_fu_650_p2 = (icmp_ln86_1286_fu_422_p2 & and_ln104_249_fu_590_p2);

assign and_ln102_1238_fu_668_p2 = (icmp_ln86_1287_fu_428_p2 & and_ln102_1232_fu_614_p2);

assign and_ln102_1239_fu_680_p2 = (and_ln102_1250_fu_674_p2 & and_ln102_1227_fu_542_p2);

assign and_ln102_1240_fu_686_p2 = (icmp_ln86_1289_fu_440_p2 & and_ln102_1233_fu_626_p2);

assign and_ln102_1241_fu_698_p2 = (and_ln104_247_fu_554_p2 & and_ln102_1251_fu_692_p2);

assign and_ln102_1242_fu_704_p2 = (icmp_ln86_1291_fu_452_p2 & and_ln102_1234_fu_638_p2);

assign and_ln102_1243_fu_716_p2 = (and_ln102_1252_fu_710_p2 & and_ln102_1228_fu_560_p2);

assign and_ln102_1244_fu_980_p2 = (icmp_ln86_1293_reg_1267 & and_ln102_1235_fu_962_p2);

assign and_ln102_1245_fu_990_p2 = (and_ln104_248_reg_1292 & and_ln102_1253_fu_985_p2);

assign and_ln102_1246_fu_995_p2 = (icmp_ln86_1295_reg_1277 & and_ln102_1236_fu_971_p2);

assign and_ln102_1247_fu_1005_p2 = (and_ln102_1254_fu_1000_p2 & and_ln102_1229_reg_1298);

assign and_ln102_1248_fu_1010_p2 = (icmp_ln86_1297_reg_1287 & and_ln102_1237_reg_1305);

assign and_ln102_1249_fu_602_p2 = (xor_ln104_611_fu_536_p2 & icmp_ln86_1280_fu_386_p2);

assign and_ln102_1250_fu_674_p2 = (xor_ln104_615_fu_620_p2 & icmp_ln86_1288_fu_434_p2);

assign and_ln102_1251_fu_692_p2 = (xor_ln104_616_fu_632_p2 & icmp_ln86_1290_fu_446_p2);

assign and_ln102_1252_fu_710_p2 = (xor_ln104_617_fu_644_p2 & icmp_ln86_1292_fu_458_p2);

assign and_ln102_1253_fu_985_p2 = (xor_ln104_618_fu_966_p2 & icmp_ln86_1294_reg_1272);

assign and_ln102_1254_fu_1000_p2 = (xor_ln104_619_fu_975_p2 & icmp_ln86_1296_reg_1282);

assign and_ln102_fu_512_p2 = (xor_ln104_fu_494_p2 & icmp_ln86_1274_fu_350_p2);

assign and_ln104_246_fu_524_p2 = (xor_ln104_fu_494_p2 & xor_ln104_610_fu_518_p2);

assign and_ln104_247_fu_554_p2 = (xor_ln104_612_fu_548_p2 & and_ln104_fu_506_p2);

assign and_ln104_248_fu_572_p2 = (xor_ln104_613_fu_566_p2 & and_ln102_fu_512_p2);

assign and_ln104_249_fu_590_p2 = (xor_ln104_614_fu_584_p2 & and_ln104_246_fu_524_p2);

assign and_ln104_250_fu_662_p2 = (xor_ln104_620_fu_656_p2 & and_ln104_249_fu_590_p2);

assign and_ln104_fu_506_p2 = (xor_ln104_609_fu_500_p2 & tmp_19_fu_336_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((or_ln117_1177_fu_1118_p2[0:0] == 1'b1) ? tmp_fu_1131_p57 : 12'd0);

assign icmp_ln86_1273_fu_344_p2 = (($signed(x_51_val) < $signed(18'd262011)) ? 1'b1 : 1'b0);

assign icmp_ln86_1274_fu_350_p2 = (($signed(x_25_val) < $signed(18'd364)) ? 1'b1 : 1'b0);

assign icmp_ln86_1275_fu_356_p2 = (($signed(x_22_val) < $signed(18'd72)) ? 1'b1 : 1'b0);

assign icmp_ln86_1276_fu_362_p2 = (($signed(x_30_val) < $signed(18'd2992)) ? 1'b1 : 1'b0);

assign icmp_ln86_1277_fu_368_p2 = (($signed(x_52_val) < $signed(18'd124417)) ? 1'b1 : 1'b0);

assign icmp_ln86_1278_fu_374_p2 = (($signed(x_39_val) < $signed(18'd2532)) ? 1'b1 : 1'b0);

assign icmp_ln86_1279_fu_380_p2 = (($signed(x_3_val) < $signed(18'd102307)) ? 1'b1 : 1'b0);

assign icmp_ln86_1280_fu_386_p2 = (($signed(x_22_val) < $signed(18'd93)) ? 1'b1 : 1'b0);

assign icmp_ln86_1281_fu_392_p2 = (($signed(x_10_val) < $signed(18'd719)) ? 1'b1 : 1'b0);

assign icmp_ln86_1282_fu_398_p2 = (($signed(x_1_val) < $signed(18'd232893)) ? 1'b1 : 1'b0);

assign icmp_ln86_1283_fu_404_p2 = (($signed(x_6_val) < $signed(18'd38357)) ? 1'b1 : 1'b0);

assign icmp_ln86_1284_fu_410_p2 = (($signed(x_22_val) < $signed(18'd134)) ? 1'b1 : 1'b0);

assign icmp_ln86_1285_fu_416_p2 = (($signed(x_49_val) < $signed(18'd21023)) ? 1'b1 : 1'b0);

assign icmp_ln86_1286_fu_422_p2 = (($signed(x_43_val) < $signed(18'd111)) ? 1'b1 : 1'b0);

assign icmp_ln86_1287_fu_428_p2 = (($signed(x_10_val) < $signed(18'd717)) ? 1'b1 : 1'b0);

assign icmp_ln86_1288_fu_434_p2 = (($signed(x_22_val) < $signed(18'd89)) ? 1'b1 : 1'b0);

assign icmp_ln86_1289_fu_440_p2 = (($signed(x_1_val) < $signed(18'd117338)) ? 1'b1 : 1'b0);

assign icmp_ln86_1290_fu_446_p2 = (($signed(x_17_val) < $signed(18'd17)) ? 1'b1 : 1'b0);

assign icmp_ln86_1291_fu_452_p2 = (($signed(x_52_val) < $signed(18'd89601)) ? 1'b1 : 1'b0);

assign icmp_ln86_1292_fu_458_p2 = (($signed(x_52_val) < $signed(18'd103937)) ? 1'b1 : 1'b0);

assign icmp_ln86_1293_fu_464_p2 = (($signed(x_40_val) < $signed(18'd862)) ? 1'b1 : 1'b0);

assign icmp_ln86_1294_fu_470_p2 = (($signed(x_34_val) < $signed(18'd499)) ? 1'b1 : 1'b0);

assign icmp_ln86_1295_fu_476_p2 = (($signed(x_52_val) < $signed(18'd46593)) ? 1'b1 : 1'b0);

assign icmp_ln86_1296_fu_482_p2 = (($signed(x_1_val) < $signed(18'd43850)) ? 1'b1 : 1'b0);

assign icmp_ln86_1297_fu_488_p2 = (($signed(x_18_val) < $signed(18'd5038)) ? 1'b1 : 1'b0);

assign or_ln117_1155_fu_758_p2 = (icmp_ln86_1273_fu_344_p2 | and_ln104_250_fu_662_p2);

assign or_ln117_1156_fu_772_p2 = (or_ln117_1155_fu_758_p2 | and_ln102_1238_fu_668_p2);

assign or_ln117_1157_fu_786_p2 = (or_ln117_1155_fu_758_p2 | and_ln102_1232_fu_614_p2);

assign or_ln117_1158_fu_800_p2 = (or_ln117_1157_fu_786_p2 | and_ln102_1239_fu_680_p2);

assign or_ln117_1159_fu_818_p2 = (or_ln117_1155_fu_758_p2 | and_ln102_1227_fu_542_p2);

assign or_ln117_1160_fu_832_p2 = (or_ln117_1159_fu_818_p2 | and_ln102_1240_fu_686_p2);

assign or_ln117_1161_fu_846_p2 = (or_ln117_1159_fu_818_p2 | and_ln102_1233_fu_626_p2);

assign or_ln117_1162_fu_860_p2 = (or_ln117_1161_fu_846_p2 | and_ln102_1241_fu_698_p2);

assign or_ln117_1163_fu_874_p2 = (or_ln117_1155_fu_758_p2 | and_ln104_fu_506_p2);

assign or_ln117_1164_fu_888_p2 = (or_ln117_1163_fu_874_p2 | and_ln102_1242_fu_704_p2);

assign or_ln117_1165_fu_902_p2 = (or_ln117_1163_fu_874_p2 | and_ln102_1234_fu_638_p2);

assign or_ln117_1166_fu_916_p2 = (or_ln117_1165_fu_902_p2 | and_ln102_1243_fu_716_p2);

assign or_ln117_1167_fu_934_p2 = (or_ln117_1163_fu_874_p2 | and_ln102_1228_fu_560_p2);

assign or_ln117_1168_fu_1014_p2 = (or_ln117_1167_reg_1311 | and_ln102_1244_fu_980_p2);

assign or_ln117_1169_fu_1019_p2 = (or_ln117_1167_reg_1311 | and_ln102_1235_fu_962_p2);

assign or_ln117_1170_fu_1031_p2 = (or_ln117_1169_fu_1019_p2 | and_ln102_1245_fu_990_p2);

assign or_ln117_1171_fu_956_p2 = (or_ln117_1163_fu_874_p2 | and_ln102_fu_512_p2);

assign or_ln117_1172_fu_1053_p2 = (or_ln117_1171_reg_1322 | and_ln102_1246_fu_995_p2);

assign or_ln117_1173_fu_1065_p2 = (or_ln117_1171_reg_1322 | and_ln102_1236_fu_971_p2);

assign or_ln117_1174_fu_1078_p2 = (or_ln117_1173_fu_1065_p2 | and_ln102_1247_fu_1005_p2);

assign or_ln117_1175_fu_1092_p2 = (or_ln117_1171_reg_1322 | and_ln102_1229_reg_1298);

assign or_ln117_1176_fu_1104_p2 = (or_ln117_1175_fu_1092_p2 | and_ln102_1248_fu_1010_p2);

assign or_ln117_1177_fu_1118_p2 = (or_ln117_1175_fu_1092_p2 | and_ln102_1237_reg_1305);

assign or_ln117_fu_732_p2 = (and_ln102_1231_fu_608_p2 | and_ln102_1226_fu_530_p2);

assign select_ln117_1233_fu_746_p3 = ((or_ln117_fu_732_p2[0:0] == 1'b1) ? select_ln117_fu_738_p3 : 2'd3);

assign select_ln117_1234_fu_764_p3 = ((icmp_ln86_1273_fu_344_p2[0:0] == 1'b1) ? zext_ln117_141_fu_754_p1 : 3'd4);

assign select_ln117_1235_fu_778_p3 = ((or_ln117_1155_fu_758_p2[0:0] == 1'b1) ? select_ln117_1234_fu_764_p3 : 3'd5);

assign select_ln117_1236_fu_792_p3 = ((or_ln117_1156_fu_772_p2[0:0] == 1'b1) ? select_ln117_1235_fu_778_p3 : 3'd6);

assign select_ln117_1237_fu_806_p3 = ((or_ln117_1157_fu_786_p2[0:0] == 1'b1) ? select_ln117_1236_fu_792_p3 : 3'd7);

assign select_ln117_1238_fu_824_p3 = ((or_ln117_1158_fu_800_p2[0:0] == 1'b1) ? zext_ln117_142_fu_814_p1 : 4'd8);

assign select_ln117_1239_fu_838_p3 = ((or_ln117_1159_fu_818_p2[0:0] == 1'b1) ? select_ln117_1238_fu_824_p3 : 4'd9);

assign select_ln117_1240_fu_852_p3 = ((or_ln117_1160_fu_832_p2[0:0] == 1'b1) ? select_ln117_1239_fu_838_p3 : 4'd10);

assign select_ln117_1241_fu_866_p3 = ((or_ln117_1161_fu_846_p2[0:0] == 1'b1) ? select_ln117_1240_fu_852_p3 : 4'd11);

assign select_ln117_1242_fu_880_p3 = ((or_ln117_1162_fu_860_p2[0:0] == 1'b1) ? select_ln117_1241_fu_866_p3 : 4'd12);

assign select_ln117_1243_fu_894_p3 = ((or_ln117_1163_fu_874_p2[0:0] == 1'b1) ? select_ln117_1242_fu_880_p3 : 4'd13);

assign select_ln117_1244_fu_908_p3 = ((or_ln117_1164_fu_888_p2[0:0] == 1'b1) ? select_ln117_1243_fu_894_p3 : 4'd14);

assign select_ln117_1245_fu_922_p3 = ((or_ln117_1165_fu_902_p2[0:0] == 1'b1) ? select_ln117_1244_fu_908_p3 : 4'd15);

assign select_ln117_1246_fu_940_p3 = ((or_ln117_1166_fu_916_p2[0:0] == 1'b1) ? zext_ln117_143_fu_930_p1 : 5'd16);

assign select_ln117_1247_fu_948_p3 = ((or_ln117_1167_fu_934_p2[0:0] == 1'b1) ? select_ln117_1246_fu_940_p3 : 5'd17);

assign select_ln117_1248_fu_1024_p3 = ((or_ln117_1168_fu_1014_p2[0:0] == 1'b1) ? select_ln117_1247_reg_1317 : 5'd18);

assign select_ln117_1249_fu_1037_p3 = ((or_ln117_1169_fu_1019_p2[0:0] == 1'b1) ? select_ln117_1248_fu_1024_p3 : 5'd19);

assign select_ln117_1250_fu_1045_p3 = ((or_ln117_1170_fu_1031_p2[0:0] == 1'b1) ? select_ln117_1249_fu_1037_p3 : 5'd20);

assign select_ln117_1251_fu_1058_p3 = ((or_ln117_1171_reg_1322[0:0] == 1'b1) ? select_ln117_1250_fu_1045_p3 : 5'd21);

assign select_ln117_1252_fu_1070_p3 = ((or_ln117_1172_fu_1053_p2[0:0] == 1'b1) ? select_ln117_1251_fu_1058_p3 : 5'd22);

assign select_ln117_1253_fu_1084_p3 = ((or_ln117_1173_fu_1065_p2[0:0] == 1'b1) ? select_ln117_1252_fu_1070_p3 : 5'd23);

assign select_ln117_1254_fu_1096_p3 = ((or_ln117_1174_fu_1078_p2[0:0] == 1'b1) ? select_ln117_1253_fu_1084_p3 : 5'd24);

assign select_ln117_1255_fu_1110_p3 = ((or_ln117_1175_fu_1092_p2[0:0] == 1'b1) ? select_ln117_1254_fu_1096_p3 : 5'd25);

assign select_ln117_fu_738_p3 = ((and_ln102_1226_fu_530_p2[0:0] == 1'b1) ? zext_ln117_fu_728_p1 : 2'd2);

assign tmp_19_fu_336_p3 = x_51_val[32'd17];

assign tmp_fu_1131_p55 = 'bx;

assign tmp_fu_1131_p56 = ((or_ln117_1176_fu_1104_p2[0:0] == 1'b1) ? select_ln117_1255_fu_1110_p3 : 5'd26);

assign xor_ln104_609_fu_500_p2 = (icmp_ln86_1273_fu_344_p2 ^ 1'd1);

assign xor_ln104_610_fu_518_p2 = (icmp_ln86_1274_fu_350_p2 ^ 1'd1);

assign xor_ln104_611_fu_536_p2 = (icmp_ln86_1275_fu_356_p2 ^ 1'd1);

assign xor_ln104_612_fu_548_p2 = (icmp_ln86_1276_fu_362_p2 ^ 1'd1);

assign xor_ln104_613_fu_566_p2 = (icmp_ln86_1277_fu_368_p2 ^ 1'd1);

assign xor_ln104_614_fu_584_p2 = (icmp_ln86_1278_fu_374_p2 ^ 1'd1);

assign xor_ln104_615_fu_620_p2 = (icmp_ln86_1281_fu_392_p2 ^ 1'd1);

assign xor_ln104_616_fu_632_p2 = (icmp_ln86_1282_fu_398_p2 ^ 1'd1);

assign xor_ln104_617_fu_644_p2 = (icmp_ln86_1283_fu_404_p2 ^ 1'd1);

assign xor_ln104_618_fu_966_p2 = (icmp_ln86_1284_reg_1255 ^ 1'd1);

assign xor_ln104_619_fu_975_p2 = (icmp_ln86_1285_reg_1261 ^ 1'd1);

assign xor_ln104_620_fu_656_p2 = (icmp_ln86_1286_fu_422_p2 ^ 1'd1);

assign xor_ln104_fu_494_p2 = (tmp_19_fu_336_p3 ^ 1'd1);

assign xor_ln117_fu_722_p2 = (1'd1 ^ and_ln102_1230_fu_596_p2);

assign zext_ln117_141_fu_754_p1 = select_ln117_1233_fu_746_p3;

assign zext_ln117_142_fu_814_p1 = select_ln117_1237_fu_806_p3;

assign zext_ln117_143_fu_930_p1 = select_ln117_1245_fu_922_p3;

assign zext_ln117_fu_728_p1 = xor_ln117_fu_722_p2;

endmodule //my_prj_decision_function_48
