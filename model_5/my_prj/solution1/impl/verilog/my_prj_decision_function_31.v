// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_31 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_2_val,
        x_6_val,
        x_7_val,
        x_8_val,
        x_12_val,
        x_13_val,
        x_16_val,
        x_17_val,
        x_23_val,
        x_31_val,
        x_38_val,
        x_39_val,
        x_40_val,
        x_42_val,
        x_43_val,
        x_45_val,
        x_46_val,
        x_47_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_2_val;
input  [17:0] x_6_val;
input  [17:0] x_7_val;
input  [17:0] x_8_val;
input  [17:0] x_12_val;
input  [17:0] x_13_val;
input  [17:0] x_16_val;
input  [17:0] x_17_val;
input  [17:0] x_23_val;
input  [17:0] x_31_val;
input  [17:0] x_38_val;
input  [17:0] x_39_val;
input  [17:0] x_40_val;
input  [17:0] x_42_val;
input  [17:0] x_43_val;
input  [17:0] x_45_val;
input  [17:0] x_46_val;
input  [17:0] x_47_val;
input  [17:0] x_52_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_396_p2;
reg   [0:0] icmp_ln86_reg_1472;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_818_fu_408_p2;
reg   [0:0] icmp_ln86_818_reg_1481;
wire   [0:0] icmp_ln86_821_fu_426_p2;
reg   [0:0] icmp_ln86_821_reg_1487;
wire   [0:0] icmp_ln86_822_fu_432_p2;
reg   [0:0] icmp_ln86_822_reg_1493;
wire   [0:0] icmp_ln86_827_fu_472_p2;
reg   [0:0] icmp_ln86_827_reg_1499;
wire   [0:0] icmp_ln86_828_fu_478_p2;
reg   [0:0] icmp_ln86_828_reg_1505;
wire   [0:0] icmp_ln86_829_fu_484_p2;
reg   [0:0] icmp_ln86_829_reg_1511;
wire   [0:0] icmp_ln86_830_fu_490_p2;
reg   [0:0] icmp_ln86_830_reg_1517;
wire   [0:0] icmp_ln86_839_fu_544_p2;
reg   [0:0] icmp_ln86_839_reg_1523;
wire   [0:0] icmp_ln86_840_fu_550_p2;
reg   [0:0] icmp_ln86_840_reg_1528;
wire   [0:0] icmp_ln86_841_fu_556_p2;
reg   [0:0] icmp_ln86_841_reg_1533;
wire   [0:0] icmp_ln86_842_fu_562_p2;
reg   [0:0] icmp_ln86_842_reg_1538;
wire   [0:0] icmp_ln86_843_fu_568_p2;
reg   [0:0] icmp_ln86_843_reg_1543;
wire   [0:0] icmp_ln86_844_fu_574_p2;
reg   [0:0] icmp_ln86_844_reg_1548;
wire   [0:0] icmp_ln86_845_fu_580_p2;
reg   [0:0] icmp_ln86_845_reg_1553;
wire   [0:0] icmp_ln86_846_fu_586_p2;
reg   [0:0] icmp_ln86_846_reg_1558;
wire   [4:0] select_ln117_805_fu_966_p3;
reg   [4:0] select_ln117_805_reg_1563;
wire    ap_block_pp0_stage0;
wire   [16:0] tmp_fu_444_p4;
wire   [0:0] icmp_ln86_817_fu_402_p2;
wire   [0:0] xor_ln104_392_fu_598_p2;
wire   [0:0] icmp_ln86_819_fu_414_p2;
wire   [0:0] and_ln102_fu_592_p2;
wire   [0:0] xor_ln104_394_fu_616_p2;
wire   [0:0] icmp_ln86_820_fu_420_p2;
wire   [0:0] and_ln104_fu_604_p2;
wire   [0:0] xor_ln104_395_fu_634_p2;
wire   [0:0] icmp_ln86_823_fu_438_p2;
wire   [0:0] and_ln102_786_fu_610_p2;
wire   [0:0] icmp_ln86_1394_fu_454_p2;
wire   [0:0] and_ln104_162_fu_622_p2;
wire   [0:0] icmp_ln86_825_fu_460_p2;
wire   [0:0] and_ln102_787_fu_628_p2;
wire   [0:0] icmp_ln86_826_fu_466_p2;
wire   [0:0] and_ln104_163_fu_640_p2;
wire   [0:0] icmp_ln86_831_fu_496_p2;
wire   [0:0] and_ln102_790_fu_646_p2;
wire   [0:0] icmp_ln86_832_fu_502_p2;
wire   [0:0] xor_ln104_398_fu_652_p2;
wire   [0:0] and_ln102_814_fu_700_p2;
wire   [0:0] icmp_ln86_833_fu_508_p2;
wire   [0:0] and_ln102_791_fu_658_p2;
wire   [0:0] icmp_ln86_834_fu_514_p2;
wire   [0:0] xor_ln104_399_fu_664_p2;
wire   [0:0] and_ln102_815_fu_718_p2;
wire   [0:0] icmp_ln86_835_fu_520_p2;
wire   [0:0] and_ln102_792_fu_670_p2;
wire   [0:0] icmp_ln86_836_fu_526_p2;
wire   [0:0] xor_ln104_400_fu_676_p2;
wire   [0:0] and_ln102_816_fu_736_p2;
wire   [0:0] icmp_ln86_837_fu_532_p2;
wire   [0:0] and_ln102_793_fu_682_p2;
wire   [0:0] icmp_ln86_838_fu_538_p2;
wire   [0:0] xor_ln104_401_fu_688_p2;
wire   [0:0] and_ln102_817_fu_754_p2;
wire   [0:0] and_ln102_798_fu_694_p2;
wire   [0:0] xor_ln117_fu_766_p2;
wire   [0:0] and_ln102_799_fu_706_p2;
wire   [1:0] zext_ln117_fu_772_p1;
wire   [0:0] or_ln117_fu_776_p2;
wire   [1:0] select_ln117_fu_782_p3;
wire   [1:0] select_ln117_792_fu_790_p3;
wire   [0:0] and_ln102_800_fu_712_p2;
wire   [2:0] zext_ln117_90_fu_798_p1;
wire   [0:0] or_ln117_752_fu_802_p2;
wire   [2:0] select_ln117_793_fu_808_p3;
wire   [0:0] or_ln117_753_fu_816_p2;
wire   [0:0] and_ln102_801_fu_724_p2;
wire   [2:0] select_ln117_794_fu_822_p3;
wire   [0:0] or_ln117_754_fu_830_p2;
wire   [2:0] select_ln117_795_fu_836_p3;
wire   [2:0] select_ln117_796_fu_844_p3;
wire   [0:0] and_ln102_802_fu_730_p2;
wire   [3:0] zext_ln117_91_fu_852_p1;
wire   [0:0] or_ln117_755_fu_856_p2;
wire   [3:0] select_ln117_797_fu_862_p3;
wire   [0:0] or_ln117_756_fu_870_p2;
wire   [0:0] and_ln102_803_fu_742_p2;
wire   [3:0] select_ln117_798_fu_876_p3;
wire   [0:0] or_ln117_757_fu_884_p2;
wire   [3:0] select_ln117_799_fu_890_p3;
wire   [0:0] or_ln117_758_fu_898_p2;
wire   [0:0] and_ln102_804_fu_748_p2;
wire   [3:0] select_ln117_800_fu_904_p3;
wire   [0:0] or_ln117_759_fu_912_p2;
wire   [3:0] select_ln117_801_fu_918_p3;
wire   [0:0] or_ln117_760_fu_926_p2;
wire   [0:0] and_ln102_805_fu_760_p2;
wire   [3:0] select_ln117_802_fu_932_p3;
wire   [0:0] or_ln117_761_fu_940_p2;
wire   [3:0] select_ln117_803_fu_946_p3;
wire   [3:0] select_ln117_804_fu_954_p3;
wire   [4:0] zext_ln117_92_fu_962_p1;
wire   [0:0] xor_ln104_fu_974_p2;
wire   [0:0] xor_ln104_393_fu_984_p2;
wire   [0:0] and_ln102_785_fu_979_p2;
wire   [0:0] xor_ln104_396_fu_1000_p2;
wire   [0:0] and_ln104_161_fu_989_p2;
wire   [0:0] xor_ln104_397_fu_1016_p2;
wire   [0:0] and_ln102_788_fu_995_p2;
wire   [0:0] and_ln104_164_fu_1005_p2;
wire   [0:0] and_ln102_789_fu_1011_p2;
wire   [0:0] and_ln104_165_fu_1021_p2;
wire   [0:0] and_ln102_794_fu_1027_p2;
wire   [0:0] xor_ln104_402_fu_1032_p2;
wire   [0:0] and_ln102_818_fu_1072_p2;
wire   [0:0] and_ln102_795_fu_1037_p2;
wire   [0:0] xor_ln104_403_fu_1042_p2;
wire   [0:0] and_ln102_819_fu_1088_p2;
wire   [0:0] and_ln102_796_fu_1047_p2;
wire   [0:0] xor_ln104_404_fu_1052_p2;
wire   [0:0] and_ln102_820_fu_1104_p2;
wire   [0:0] and_ln102_797_fu_1057_p2;
wire   [0:0] xor_ln104_405_fu_1062_p2;
wire   [0:0] and_ln102_821_fu_1120_p2;
wire   [0:0] and_ln102_806_fu_1067_p2;
wire   [0:0] or_ln117_762_fu_1131_p2;
wire   [0:0] or_ln117_763_fu_1136_p2;
wire   [0:0] and_ln102_807_fu_1077_p2;
wire   [4:0] select_ln117_806_fu_1141_p3;
wire   [0:0] or_ln117_764_fu_1148_p2;
wire   [4:0] select_ln117_807_fu_1154_p3;
wire   [0:0] or_ln117_765_fu_1162_p2;
wire   [0:0] and_ln102_808_fu_1083_p2;
wire   [4:0] select_ln117_808_fu_1167_p3;
wire   [0:0] or_ln117_766_fu_1175_p2;
wire   [4:0] select_ln117_809_fu_1181_p3;
wire   [0:0] or_ln117_767_fu_1189_p2;
wire   [0:0] and_ln102_809_fu_1093_p2;
wire   [4:0] select_ln117_810_fu_1195_p3;
wire   [0:0] or_ln117_768_fu_1203_p2;
wire   [4:0] select_ln117_811_fu_1209_p3;
wire   [0:0] or_ln117_769_fu_1217_p2;
wire   [0:0] and_ln102_810_fu_1099_p2;
wire   [4:0] select_ln117_812_fu_1222_p3;
wire   [0:0] or_ln117_770_fu_1230_p2;
wire   [4:0] select_ln117_813_fu_1236_p3;
wire   [0:0] or_ln117_771_fu_1244_p2;
wire   [0:0] and_ln102_811_fu_1109_p2;
wire   [4:0] select_ln117_814_fu_1250_p3;
wire   [0:0] or_ln117_772_fu_1258_p2;
wire   [4:0] select_ln117_815_fu_1264_p3;
wire   [0:0] or_ln117_773_fu_1272_p2;
wire   [0:0] and_ln102_812_fu_1115_p2;
wire   [4:0] select_ln117_816_fu_1278_p3;
wire   [0:0] or_ln117_774_fu_1286_p2;
wire   [4:0] select_ln117_817_fu_1292_p3;
wire   [0:0] or_ln117_775_fu_1300_p2;
wire   [0:0] and_ln102_813_fu_1125_p2;
wire   [4:0] select_ln117_818_fu_1306_p3;
wire   [0:0] or_ln117_776_fu_1314_p2;
wire   [4:0] select_ln117_819_fu_1320_p3;
wire   [11:0] agg_result_fu_1336_p65;
wire   [4:0] agg_result_fu_1336_p66;
wire   [11:0] agg_result_fu_1336_p67;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1336_p1;
wire   [4:0] agg_result_fu_1336_p3;
wire   [4:0] agg_result_fu_1336_p5;
wire   [4:0] agg_result_fu_1336_p7;
wire   [4:0] agg_result_fu_1336_p9;
wire   [4:0] agg_result_fu_1336_p11;
wire   [4:0] agg_result_fu_1336_p13;
wire   [4:0] agg_result_fu_1336_p15;
wire   [4:0] agg_result_fu_1336_p17;
wire   [4:0] agg_result_fu_1336_p19;
wire   [4:0] agg_result_fu_1336_p21;
wire   [4:0] agg_result_fu_1336_p23;
wire   [4:0] agg_result_fu_1336_p25;
wire   [4:0] agg_result_fu_1336_p27;
wire   [4:0] agg_result_fu_1336_p29;
wire   [4:0] agg_result_fu_1336_p31;
wire  signed [4:0] agg_result_fu_1336_p33;
wire  signed [4:0] agg_result_fu_1336_p35;
wire  signed [4:0] agg_result_fu_1336_p37;
wire  signed [4:0] agg_result_fu_1336_p39;
wire  signed [4:0] agg_result_fu_1336_p41;
wire  signed [4:0] agg_result_fu_1336_p43;
wire  signed [4:0] agg_result_fu_1336_p45;
wire  signed [4:0] agg_result_fu_1336_p47;
wire  signed [4:0] agg_result_fu_1336_p49;
wire  signed [4:0] agg_result_fu_1336_p51;
wire  signed [4:0] agg_result_fu_1336_p53;
wire  signed [4:0] agg_result_fu_1336_p55;
wire  signed [4:0] agg_result_fu_1336_p57;
wire  signed [4:0] agg_result_fu_1336_p59;
wire  signed [4:0] agg_result_fu_1336_p61;
wire  signed [4:0] agg_result_fu_1336_p63;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_65_5_12_1_1_x27 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 12 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 12 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 12 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 12 ),
    .CASE31( 5'h1F ),
    .din31_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_65_5_12_1_1_x27_U1476(
    .din0(12'd4088),
    .din1(12'd3910),
    .din2(12'd238),
    .din3(12'd49),
    .din4(12'd51),
    .din5(12'd806),
    .din6(12'd3925),
    .din7(12'd4059),
    .din8(12'd3297),
    .din9(12'd3829),
    .din10(12'd3765),
    .din11(12'd3999),
    .din12(12'd424),
    .din13(12'd79),
    .din14(12'd3898),
    .din15(12'd4087),
    .din16(12'd2),
    .din17(12'd90),
    .din18(12'd1273),
    .din19(12'd352),
    .din20(12'd3937),
    .din21(12'd4059),
    .din22(12'd4011),
    .din23(12'd13),
    .din24(12'd111),
    .din25(12'd3724),
    .din26(12'd3153),
    .din27(12'd3860),
    .din28(12'd4093),
    .din29(12'd575),
    .din30(12'd169),
    .din31(12'd3089),
    .def(agg_result_fu_1336_p65),
    .sel(agg_result_fu_1336_p66),
    .dout(agg_result_fu_1336_p67)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_818_reg_1481 <= icmp_ln86_818_fu_408_p2;
        icmp_ln86_821_reg_1487 <= icmp_ln86_821_fu_426_p2;
        icmp_ln86_822_reg_1493 <= icmp_ln86_822_fu_432_p2;
        icmp_ln86_827_reg_1499 <= icmp_ln86_827_fu_472_p2;
        icmp_ln86_828_reg_1505 <= icmp_ln86_828_fu_478_p2;
        icmp_ln86_829_reg_1511 <= icmp_ln86_829_fu_484_p2;
        icmp_ln86_830_reg_1517 <= icmp_ln86_830_fu_490_p2;
        icmp_ln86_839_reg_1523 <= icmp_ln86_839_fu_544_p2;
        icmp_ln86_840_reg_1528 <= icmp_ln86_840_fu_550_p2;
        icmp_ln86_841_reg_1533 <= icmp_ln86_841_fu_556_p2;
        icmp_ln86_842_reg_1538 <= icmp_ln86_842_fu_562_p2;
        icmp_ln86_843_reg_1543 <= icmp_ln86_843_fu_568_p2;
        icmp_ln86_844_reg_1548 <= icmp_ln86_844_fu_574_p2;
        icmp_ln86_845_reg_1553 <= icmp_ln86_845_fu_580_p2;
        icmp_ln86_846_reg_1558 <= icmp_ln86_846_fu_586_p2;
        icmp_ln86_reg_1472 <= icmp_ln86_fu_396_p2;
        select_ln117_805_reg_1563 <= select_ln117_805_fu_966_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1336_p65 = 'bx;

assign agg_result_fu_1336_p66 = ((or_ln117_776_fu_1314_p2[0:0] == 1'b1) ? select_ln117_819_fu_1320_p3 : 5'd31);

assign and_ln102_785_fu_979_p2 = (xor_ln104_fu_974_p2 & icmp_ln86_818_reg_1481);

assign and_ln102_786_fu_610_p2 = (icmp_ln86_819_fu_414_p2 & and_ln102_fu_592_p2);

assign and_ln102_787_fu_628_p2 = (icmp_ln86_820_fu_420_p2 & and_ln104_fu_604_p2);

assign and_ln102_788_fu_995_p2 = (icmp_ln86_821_reg_1487 & and_ln102_785_fu_979_p2);

assign and_ln102_789_fu_1011_p2 = (icmp_ln86_822_reg_1493 & and_ln104_161_fu_989_p2);

assign and_ln102_790_fu_646_p2 = (icmp_ln86_823_fu_438_p2 & and_ln102_786_fu_610_p2);

assign and_ln102_791_fu_658_p2 = (icmp_ln86_1394_fu_454_p2 & and_ln104_162_fu_622_p2);

assign and_ln102_792_fu_670_p2 = (icmp_ln86_825_fu_460_p2 & and_ln102_787_fu_628_p2);

assign and_ln102_793_fu_682_p2 = (icmp_ln86_826_fu_466_p2 & and_ln104_163_fu_640_p2);

assign and_ln102_794_fu_1027_p2 = (icmp_ln86_827_reg_1499 & and_ln102_788_fu_995_p2);

assign and_ln102_795_fu_1037_p2 = (icmp_ln86_828_reg_1505 & and_ln104_164_fu_1005_p2);

assign and_ln102_796_fu_1047_p2 = (icmp_ln86_829_reg_1511 & and_ln102_789_fu_1011_p2);

assign and_ln102_797_fu_1057_p2 = (icmp_ln86_830_reg_1517 & and_ln104_165_fu_1021_p2);

assign and_ln102_798_fu_694_p2 = (icmp_ln86_831_fu_496_p2 & and_ln102_790_fu_646_p2);

assign and_ln102_799_fu_706_p2 = (and_ln102_814_fu_700_p2 & and_ln102_786_fu_610_p2);

assign and_ln102_800_fu_712_p2 = (icmp_ln86_833_fu_508_p2 & and_ln102_791_fu_658_p2);

assign and_ln102_801_fu_724_p2 = (and_ln104_162_fu_622_p2 & and_ln102_815_fu_718_p2);

assign and_ln102_802_fu_730_p2 = (icmp_ln86_835_fu_520_p2 & and_ln102_792_fu_670_p2);

assign and_ln102_803_fu_742_p2 = (and_ln102_816_fu_736_p2 & and_ln102_787_fu_628_p2);

assign and_ln102_804_fu_748_p2 = (icmp_ln86_837_fu_532_p2 & and_ln102_793_fu_682_p2);

assign and_ln102_805_fu_760_p2 = (and_ln104_163_fu_640_p2 & and_ln102_817_fu_754_p2);

assign and_ln102_806_fu_1067_p2 = (icmp_ln86_839_reg_1523 & and_ln102_794_fu_1027_p2);

assign and_ln102_807_fu_1077_p2 = (and_ln102_818_fu_1072_p2 & and_ln102_788_fu_995_p2);

assign and_ln102_808_fu_1083_p2 = (icmp_ln86_841_reg_1533 & and_ln102_795_fu_1037_p2);

assign and_ln102_809_fu_1093_p2 = (and_ln104_164_fu_1005_p2 & and_ln102_819_fu_1088_p2);

assign and_ln102_810_fu_1099_p2 = (icmp_ln86_843_reg_1543 & and_ln102_796_fu_1047_p2);

assign and_ln102_811_fu_1109_p2 = (and_ln102_820_fu_1104_p2 & and_ln102_789_fu_1011_p2);

assign and_ln102_812_fu_1115_p2 = (icmp_ln86_845_reg_1553 & and_ln102_797_fu_1057_p2);

assign and_ln102_813_fu_1125_p2 = (and_ln104_165_fu_1021_p2 & and_ln102_821_fu_1120_p2);

assign and_ln102_814_fu_700_p2 = (xor_ln104_398_fu_652_p2 & icmp_ln86_832_fu_502_p2);

assign and_ln102_815_fu_718_p2 = (xor_ln104_399_fu_664_p2 & icmp_ln86_834_fu_514_p2);

assign and_ln102_816_fu_736_p2 = (xor_ln104_400_fu_676_p2 & icmp_ln86_836_fu_526_p2);

assign and_ln102_817_fu_754_p2 = (xor_ln104_401_fu_688_p2 & icmp_ln86_838_fu_538_p2);

assign and_ln102_818_fu_1072_p2 = (xor_ln104_402_fu_1032_p2 & icmp_ln86_840_reg_1528);

assign and_ln102_819_fu_1088_p2 = (xor_ln104_403_fu_1042_p2 & icmp_ln86_842_reg_1538);

assign and_ln102_820_fu_1104_p2 = (xor_ln104_404_fu_1052_p2 & icmp_ln86_844_reg_1548);

assign and_ln102_821_fu_1120_p2 = (xor_ln104_405_fu_1062_p2 & icmp_ln86_846_reg_1558);

assign and_ln102_fu_592_p2 = (icmp_ln86_fu_396_p2 & icmp_ln86_817_fu_402_p2);

assign and_ln104_161_fu_989_p2 = (xor_ln104_fu_974_p2 & xor_ln104_393_fu_984_p2);

assign and_ln104_162_fu_622_p2 = (xor_ln104_394_fu_616_p2 & and_ln102_fu_592_p2);

assign and_ln104_163_fu_640_p2 = (xor_ln104_395_fu_634_p2 & and_ln104_fu_604_p2);

assign and_ln104_164_fu_1005_p2 = (xor_ln104_396_fu_1000_p2 & and_ln102_785_fu_979_p2);

assign and_ln104_165_fu_1021_p2 = (xor_ln104_397_fu_1016_p2 & and_ln104_161_fu_989_p2);

assign and_ln104_fu_604_p2 = (xor_ln104_392_fu_598_p2 & icmp_ln86_fu_396_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1336_p67;

assign icmp_ln86_1394_fu_454_p2 = (($signed(tmp_fu_444_p4) < $signed(17'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_817_fu_402_p2 = (($signed(x_6_val) < $signed(18'd13227)) ? 1'b1 : 1'b0);

assign icmp_ln86_818_fu_408_p2 = (($signed(x_39_val) < $signed(18'd2316)) ? 1'b1 : 1'b0);

assign icmp_ln86_819_fu_414_p2 = (($signed(x_39_val) < $signed(18'd1811)) ? 1'b1 : 1'b0);

assign icmp_ln86_820_fu_420_p2 = (($signed(x_16_val) < $signed(18'd97)) ? 1'b1 : 1'b0);

assign icmp_ln86_821_fu_426_p2 = (($signed(x_8_val) < $signed(18'd1391)) ? 1'b1 : 1'b0);

assign icmp_ln86_822_fu_432_p2 = (($signed(x_17_val) < $signed(18'd29)) ? 1'b1 : 1'b0);

assign icmp_ln86_823_fu_438_p2 = (($signed(x_23_val) < $signed(18'd14)) ? 1'b1 : 1'b0);

assign icmp_ln86_825_fu_460_p2 = (($signed(x_47_val) < $signed(18'd47119)) ? 1'b1 : 1'b0);

assign icmp_ln86_826_fu_466_p2 = (($signed(x_7_val) < $signed(18'd3413)) ? 1'b1 : 1'b0);

assign icmp_ln86_827_fu_472_p2 = (($signed(x_38_val) < $signed(18'd11)) ? 1'b1 : 1'b0);

assign icmp_ln86_828_fu_478_p2 = (($signed(x_52_val) < $signed(18'd58881)) ? 1'b1 : 1'b0);

assign icmp_ln86_829_fu_484_p2 = (($signed(x_45_val) < $signed(18'd418)) ? 1'b1 : 1'b0);

assign icmp_ln86_830_fu_490_p2 = (($signed(x_46_val) < $signed(18'd184)) ? 1'b1 : 1'b0);

assign icmp_ln86_831_fu_496_p2 = (($signed(x_45_val) < $signed(18'd384)) ? 1'b1 : 1'b0);

assign icmp_ln86_832_fu_502_p2 = (($signed(x_43_val) < $signed(18'd50)) ? 1'b1 : 1'b0);

assign icmp_ln86_833_fu_508_p2 = (($signed(x_2_val) < $signed(18'd674)) ? 1'b1 : 1'b0);

assign icmp_ln86_834_fu_514_p2 = (($signed(x_40_val) < $signed(18'd1996)) ? 1'b1 : 1'b0);

assign icmp_ln86_835_fu_520_p2 = (($signed(x_13_val) < $signed(18'd430)) ? 1'b1 : 1'b0);

assign icmp_ln86_836_fu_526_p2 = (($signed(x_17_val) < $signed(18'd10)) ? 1'b1 : 1'b0);

assign icmp_ln86_837_fu_532_p2 = (($signed(x_8_val) < $signed(18'd1743)) ? 1'b1 : 1'b0);

assign icmp_ln86_838_fu_538_p2 = (($signed(x_52_val) < $signed(18'd47617)) ? 1'b1 : 1'b0);

assign icmp_ln86_839_fu_544_p2 = (($signed(x_1_val) < $signed(18'd556)) ? 1'b1 : 1'b0);

assign icmp_ln86_840_fu_550_p2 = (($signed(x_12_val) < $signed(18'd258872)) ? 1'b1 : 1'b0);

assign icmp_ln86_841_fu_556_p2 = (($signed(x_47_val) < $signed(18'd54068)) ? 1'b1 : 1'b0);

assign icmp_ln86_842_fu_562_p2 = (($signed(x_45_val) < $signed(18'd238)) ? 1'b1 : 1'b0);

assign icmp_ln86_843_fu_568_p2 = (($signed(x_17_val) < $signed(18'd27)) ? 1'b1 : 1'b0);

assign icmp_ln86_844_fu_574_p2 = (($signed(x_42_val) < $signed(18'd298)) ? 1'b1 : 1'b0);

assign icmp_ln86_845_fu_580_p2 = (($signed(x_1_val) < $signed(18'd177310)) ? 1'b1 : 1'b0);

assign icmp_ln86_846_fu_586_p2 = (($signed(x_13_val) < $signed(18'd495)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_396_p2 = (($signed(x_13_val) < $signed(18'd462)) ? 1'b1 : 1'b0);

assign or_ln117_752_fu_802_p2 = (and_ln102_800_fu_712_p2 | and_ln102_786_fu_610_p2);

assign or_ln117_753_fu_816_p2 = (and_ln102_791_fu_658_p2 | and_ln102_786_fu_610_p2);

assign or_ln117_754_fu_830_p2 = (or_ln117_753_fu_816_p2 | and_ln102_801_fu_724_p2);

assign or_ln117_755_fu_856_p2 = (and_ln102_fu_592_p2 | and_ln102_802_fu_730_p2);

assign or_ln117_756_fu_870_p2 = (and_ln102_fu_592_p2 | and_ln102_792_fu_670_p2);

assign or_ln117_757_fu_884_p2 = (or_ln117_756_fu_870_p2 | and_ln102_803_fu_742_p2);

assign or_ln117_758_fu_898_p2 = (and_ln102_fu_592_p2 | and_ln102_787_fu_628_p2);

assign or_ln117_759_fu_912_p2 = (or_ln117_758_fu_898_p2 | and_ln102_804_fu_748_p2);

assign or_ln117_760_fu_926_p2 = (or_ln117_758_fu_898_p2 | and_ln102_793_fu_682_p2);

assign or_ln117_761_fu_940_p2 = (or_ln117_760_fu_926_p2 | and_ln102_805_fu_760_p2);

assign or_ln117_762_fu_1131_p2 = (icmp_ln86_reg_1472 | and_ln102_806_fu_1067_p2);

assign or_ln117_763_fu_1136_p2 = (icmp_ln86_reg_1472 | and_ln102_794_fu_1027_p2);

assign or_ln117_764_fu_1148_p2 = (or_ln117_763_fu_1136_p2 | and_ln102_807_fu_1077_p2);

assign or_ln117_765_fu_1162_p2 = (icmp_ln86_reg_1472 | and_ln102_788_fu_995_p2);

assign or_ln117_766_fu_1175_p2 = (or_ln117_765_fu_1162_p2 | and_ln102_808_fu_1083_p2);

assign or_ln117_767_fu_1189_p2 = (or_ln117_765_fu_1162_p2 | and_ln102_795_fu_1037_p2);

assign or_ln117_768_fu_1203_p2 = (or_ln117_767_fu_1189_p2 | and_ln102_809_fu_1093_p2);

assign or_ln117_769_fu_1217_p2 = (icmp_ln86_reg_1472 | and_ln102_785_fu_979_p2);

assign or_ln117_770_fu_1230_p2 = (or_ln117_769_fu_1217_p2 | and_ln102_810_fu_1099_p2);

assign or_ln117_771_fu_1244_p2 = (or_ln117_769_fu_1217_p2 | and_ln102_796_fu_1047_p2);

assign or_ln117_772_fu_1258_p2 = (or_ln117_771_fu_1244_p2 | and_ln102_811_fu_1109_p2);

assign or_ln117_773_fu_1272_p2 = (or_ln117_769_fu_1217_p2 | and_ln102_789_fu_1011_p2);

assign or_ln117_774_fu_1286_p2 = (or_ln117_773_fu_1272_p2 | and_ln102_812_fu_1115_p2);

assign or_ln117_775_fu_1300_p2 = (or_ln117_773_fu_1272_p2 | and_ln102_797_fu_1057_p2);

assign or_ln117_776_fu_1314_p2 = (or_ln117_775_fu_1300_p2 | and_ln102_813_fu_1125_p2);

assign or_ln117_fu_776_p2 = (and_ln102_799_fu_706_p2 | and_ln102_790_fu_646_p2);

assign select_ln117_792_fu_790_p3 = ((or_ln117_fu_776_p2[0:0] == 1'b1) ? select_ln117_fu_782_p3 : 2'd3);

assign select_ln117_793_fu_808_p3 = ((and_ln102_786_fu_610_p2[0:0] == 1'b1) ? zext_ln117_90_fu_798_p1 : 3'd4);

assign select_ln117_794_fu_822_p3 = ((or_ln117_752_fu_802_p2[0:0] == 1'b1) ? select_ln117_793_fu_808_p3 : 3'd5);

assign select_ln117_795_fu_836_p3 = ((or_ln117_753_fu_816_p2[0:0] == 1'b1) ? select_ln117_794_fu_822_p3 : 3'd6);

assign select_ln117_796_fu_844_p3 = ((or_ln117_754_fu_830_p2[0:0] == 1'b1) ? select_ln117_795_fu_836_p3 : 3'd7);

assign select_ln117_797_fu_862_p3 = ((and_ln102_fu_592_p2[0:0] == 1'b1) ? zext_ln117_91_fu_852_p1 : 4'd8);

assign select_ln117_798_fu_876_p3 = ((or_ln117_755_fu_856_p2[0:0] == 1'b1) ? select_ln117_797_fu_862_p3 : 4'd9);

assign select_ln117_799_fu_890_p3 = ((or_ln117_756_fu_870_p2[0:0] == 1'b1) ? select_ln117_798_fu_876_p3 : 4'd10);

assign select_ln117_800_fu_904_p3 = ((or_ln117_757_fu_884_p2[0:0] == 1'b1) ? select_ln117_799_fu_890_p3 : 4'd11);

assign select_ln117_801_fu_918_p3 = ((or_ln117_758_fu_898_p2[0:0] == 1'b1) ? select_ln117_800_fu_904_p3 : 4'd12);

assign select_ln117_802_fu_932_p3 = ((or_ln117_759_fu_912_p2[0:0] == 1'b1) ? select_ln117_801_fu_918_p3 : 4'd13);

assign select_ln117_803_fu_946_p3 = ((or_ln117_760_fu_926_p2[0:0] == 1'b1) ? select_ln117_802_fu_932_p3 : 4'd14);

assign select_ln117_804_fu_954_p3 = ((or_ln117_761_fu_940_p2[0:0] == 1'b1) ? select_ln117_803_fu_946_p3 : 4'd15);

assign select_ln117_805_fu_966_p3 = ((icmp_ln86_fu_396_p2[0:0] == 1'b1) ? zext_ln117_92_fu_962_p1 : 5'd16);

assign select_ln117_806_fu_1141_p3 = ((or_ln117_762_fu_1131_p2[0:0] == 1'b1) ? select_ln117_805_reg_1563 : 5'd17);

assign select_ln117_807_fu_1154_p3 = ((or_ln117_763_fu_1136_p2[0:0] == 1'b1) ? select_ln117_806_fu_1141_p3 : 5'd18);

assign select_ln117_808_fu_1167_p3 = ((or_ln117_764_fu_1148_p2[0:0] == 1'b1) ? select_ln117_807_fu_1154_p3 : 5'd19);

assign select_ln117_809_fu_1181_p3 = ((or_ln117_765_fu_1162_p2[0:0] == 1'b1) ? select_ln117_808_fu_1167_p3 : 5'd20);

assign select_ln117_810_fu_1195_p3 = ((or_ln117_766_fu_1175_p2[0:0] == 1'b1) ? select_ln117_809_fu_1181_p3 : 5'd21);

assign select_ln117_811_fu_1209_p3 = ((or_ln117_767_fu_1189_p2[0:0] == 1'b1) ? select_ln117_810_fu_1195_p3 : 5'd22);

assign select_ln117_812_fu_1222_p3 = ((or_ln117_768_fu_1203_p2[0:0] == 1'b1) ? select_ln117_811_fu_1209_p3 : 5'd23);

assign select_ln117_813_fu_1236_p3 = ((or_ln117_769_fu_1217_p2[0:0] == 1'b1) ? select_ln117_812_fu_1222_p3 : 5'd24);

assign select_ln117_814_fu_1250_p3 = ((or_ln117_770_fu_1230_p2[0:0] == 1'b1) ? select_ln117_813_fu_1236_p3 : 5'd25);

assign select_ln117_815_fu_1264_p3 = ((or_ln117_771_fu_1244_p2[0:0] == 1'b1) ? select_ln117_814_fu_1250_p3 : 5'd26);

assign select_ln117_816_fu_1278_p3 = ((or_ln117_772_fu_1258_p2[0:0] == 1'b1) ? select_ln117_815_fu_1264_p3 : 5'd27);

assign select_ln117_817_fu_1292_p3 = ((or_ln117_773_fu_1272_p2[0:0] == 1'b1) ? select_ln117_816_fu_1278_p3 : 5'd28);

assign select_ln117_818_fu_1306_p3 = ((or_ln117_774_fu_1286_p2[0:0] == 1'b1) ? select_ln117_817_fu_1292_p3 : 5'd29);

assign select_ln117_819_fu_1320_p3 = ((or_ln117_775_fu_1300_p2[0:0] == 1'b1) ? select_ln117_818_fu_1306_p3 : 5'd30);

assign select_ln117_fu_782_p3 = ((and_ln102_790_fu_646_p2[0:0] == 1'b1) ? zext_ln117_fu_772_p1 : 2'd2);

assign tmp_fu_444_p4 = {{x_31_val[17:1]}};

assign xor_ln104_392_fu_598_p2 = (icmp_ln86_817_fu_402_p2 ^ 1'd1);

assign xor_ln104_393_fu_984_p2 = (icmp_ln86_818_reg_1481 ^ 1'd1);

assign xor_ln104_394_fu_616_p2 = (icmp_ln86_819_fu_414_p2 ^ 1'd1);

assign xor_ln104_395_fu_634_p2 = (icmp_ln86_820_fu_420_p2 ^ 1'd1);

assign xor_ln104_396_fu_1000_p2 = (icmp_ln86_821_reg_1487 ^ 1'd1);

assign xor_ln104_397_fu_1016_p2 = (icmp_ln86_822_reg_1493 ^ 1'd1);

assign xor_ln104_398_fu_652_p2 = (icmp_ln86_823_fu_438_p2 ^ 1'd1);

assign xor_ln104_399_fu_664_p2 = (icmp_ln86_1394_fu_454_p2 ^ 1'd1);

assign xor_ln104_400_fu_676_p2 = (icmp_ln86_825_fu_460_p2 ^ 1'd1);

assign xor_ln104_401_fu_688_p2 = (icmp_ln86_826_fu_466_p2 ^ 1'd1);

assign xor_ln104_402_fu_1032_p2 = (icmp_ln86_827_reg_1499 ^ 1'd1);

assign xor_ln104_403_fu_1042_p2 = (icmp_ln86_828_reg_1505 ^ 1'd1);

assign xor_ln104_404_fu_1052_p2 = (icmp_ln86_829_reg_1511 ^ 1'd1);

assign xor_ln104_405_fu_1062_p2 = (icmp_ln86_830_reg_1517 ^ 1'd1);

assign xor_ln104_fu_974_p2 = (icmp_ln86_reg_1472 ^ 1'd1);

assign xor_ln117_fu_766_p2 = (1'd1 ^ and_ln102_798_fu_694_p2);

assign zext_ln117_90_fu_798_p1 = select_ln117_792_fu_790_p3;

assign zext_ln117_91_fu_852_p1 = select_ln117_796_fu_844_p3;

assign zext_ln117_92_fu_962_p1 = select_ln117_804_fu_954_p3;

assign zext_ln117_fu_772_p1 = xor_ln117_fu_766_p2;

endmodule //my_prj_decision_function_31
