// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_28 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_2_val,
        x_3_val,
        x_6_val,
        x_9_val,
        x_13_val,
        x_14_val,
        x_15_val,
        x_17_val,
        x_21_val,
        x_24_val,
        x_29_val,
        x_31_val,
        x_35_val,
        x_36_val,
        x_37_val,
        x_38_val,
        x_40_val,
        x_47_val,
        x_48_val,
        x_49_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_2_val;
input  [17:0] x_3_val;
input  [17:0] x_6_val;
input  [17:0] x_9_val;
input  [17:0] x_13_val;
input  [17:0] x_14_val;
input  [17:0] x_15_val;
input  [17:0] x_17_val;
input  [17:0] x_21_val;
input  [17:0] x_24_val;
input  [17:0] x_29_val;
input  [17:0] x_31_val;
input  [17:0] x_35_val;
input  [17:0] x_36_val;
input  [17:0] x_37_val;
input  [17:0] x_38_val;
input  [17:0] x_40_val;
input  [17:0] x_47_val;
input  [17:0] x_48_val;
input  [17:0] x_49_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_750_fu_412_p2;
reg   [0:0] icmp_ln86_750_reg_1237;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_755_fu_442_p2;
reg   [0:0] icmp_ln86_755_reg_1243;
wire   [0:0] icmp_ln86_756_fu_448_p2;
reg   [0:0] icmp_ln86_756_reg_1249;
wire   [0:0] icmp_ln86_763_fu_490_p2;
reg   [0:0] icmp_ln86_763_reg_1255;
wire   [0:0] icmp_ln86_764_fu_496_p2;
reg   [0:0] icmp_ln86_764_reg_1260;
wire   [0:0] icmp_ln86_765_fu_502_p2;
reg   [0:0] icmp_ln86_765_reg_1265;
wire   [0:0] icmp_ln86_766_fu_508_p2;
reg   [0:0] icmp_ln86_766_reg_1270;
wire   [0:0] icmp_ln86_767_fu_514_p2;
reg   [0:0] icmp_ln86_767_reg_1275;
wire   [0:0] and_ln104_146_fu_556_p2;
reg   [0:0] and_ln104_146_reg_1280;
wire   [0:0] and_ln102_724_fu_640_p2;
reg   [0:0] and_ln102_724_reg_1287;
wire   [0:0] or_ln117_695_fu_898_p2;
reg   [0:0] or_ln117_695_reg_1293;
wire   [3:0] select_ln117_735_fu_912_p3;
reg   [3:0] select_ln117_735_reg_1299;
wire    ap_block_pp0_stage0;
wire   [14:0] tmp_23_fu_378_p4;
wire   [0:0] icmp_ln86_fu_366_p2;
wire   [0:0] icmp_ln86_745_fu_372_p2;
wire   [0:0] xor_ln104_358_fu_532_p2;
wire   [0:0] icmp_ln86_1395_fu_388_p2;
wire   [0:0] xor_ln104_fu_520_p2;
wire   [0:0] xor_ln104_359_fu_550_p2;
wire   [0:0] icmp_ln86_747_fu_394_p2;
wire   [0:0] and_ln102_fu_526_p2;
wire   [0:0] xor_ln104_360_fu_568_p2;
wire   [0:0] icmp_ln86_748_fu_400_p2;
wire   [0:0] and_ln104_fu_538_p2;
wire   [0:0] icmp_ln86_749_fu_406_p2;
wire   [0:0] and_ln102_716_fu_544_p2;
wire   [0:0] xor_ln104_361_fu_592_p2;
wire   [0:0] icmp_ln86_751_fu_418_p2;
wire   [0:0] and_ln102_717_fu_562_p2;
wire   [0:0] icmp_ln86_752_fu_424_p2;
wire   [0:0] and_ln104_147_fu_574_p2;
wire   [0:0] icmp_ln86_753_fu_430_p2;
wire   [0:0] and_ln102_719_fu_586_p2;
wire   [0:0] icmp_ln86_754_fu_436_p2;
wire   [0:0] and_ln104_148_fu_598_p2;
wire   [0:0] xor_ln104_366_fu_646_p2;
wire   [0:0] icmp_ln86_757_fu_454_p2;
wire   [0:0] and_ln102_721_fu_604_p2;
wire   [0:0] icmp_ln86_758_fu_460_p2;
wire   [0:0] xor_ln104_363_fu_610_p2;
wire   [0:0] and_ln102_738_fu_664_p2;
wire   [0:0] icmp_ln86_759_fu_466_p2;
wire   [0:0] and_ln102_722_fu_616_p2;
wire   [0:0] icmp_ln86_760_fu_472_p2;
wire   [0:0] xor_ln104_364_fu_622_p2;
wire   [0:0] and_ln102_739_fu_682_p2;
wire   [0:0] icmp_ln86_761_fu_478_p2;
wire   [0:0] and_ln102_723_fu_628_p2;
wire   [0:0] icmp_ln86_762_fu_484_p2;
wire   [0:0] xor_ln104_365_fu_634_p2;
wire   [0:0] and_ln102_740_fu_700_p2;
wire   [0:0] and_ln102_718_fu_580_p2;
wire   [0:0] xor_ln117_fu_712_p2;
wire   [0:0] and_ln104_150_fu_652_p2;
wire   [1:0] zext_ln117_fu_718_p1;
wire   [0:0] or_ln117_fu_722_p2;
wire   [0:0] and_ln102_727_fu_658_p2;
wire   [1:0] select_ln117_fu_728_p3;
wire   [1:0] select_ln117_723_fu_742_p3;
wire   [0:0] or_ln117_684_fu_736_p2;
wire   [2:0] zext_ln117_81_fu_750_p1;
wire   [0:0] or_ln117_685_fu_754_p2;
wire   [0:0] and_ln102_728_fu_670_p2;
wire   [2:0] select_ln117_724_fu_760_p3;
wire   [0:0] or_ln117_686_fu_768_p2;
wire   [2:0] select_ln117_725_fu_774_p3;
wire   [0:0] or_ln117_687_fu_782_p2;
wire   [0:0] and_ln102_729_fu_676_p2;
wire   [2:0] select_ln117_726_fu_788_p3;
wire   [2:0] select_ln117_727_fu_802_p3;
wire   [0:0] or_ln117_688_fu_796_p2;
wire   [3:0] zext_ln117_82_fu_810_p1;
wire   [0:0] or_ln117_689_fu_814_p2;
wire   [0:0] and_ln102_730_fu_688_p2;
wire   [3:0] select_ln117_728_fu_820_p3;
wire   [0:0] or_ln117_690_fu_828_p2;
wire   [3:0] select_ln117_729_fu_834_p3;
wire   [0:0] or_ln117_691_fu_842_p2;
wire   [0:0] and_ln102_731_fu_694_p2;
wire   [3:0] select_ln117_730_fu_848_p3;
wire   [0:0] or_ln117_692_fu_856_p2;
wire   [3:0] select_ln117_731_fu_862_p3;
wire   [0:0] or_ln117_693_fu_870_p2;
wire   [0:0] and_ln102_732_fu_706_p2;
wire   [3:0] select_ln117_732_fu_876_p3;
wire   [0:0] or_ln117_694_fu_884_p2;
wire   [3:0] select_ln117_733_fu_890_p3;
wire   [3:0] select_ln117_734_fu_904_p3;
wire   [0:0] xor_ln104_362_fu_924_p2;
wire   [0:0] and_ln102_720_fu_920_p2;
wire   [0:0] and_ln104_149_fu_929_p2;
wire   [0:0] and_ln102_725_fu_934_p2;
wire   [0:0] xor_ln104_367_fu_939_p2;
wire   [0:0] and_ln102_741_fu_963_p2;
wire   [0:0] and_ln102_726_fu_944_p2;
wire   [0:0] xor_ln104_368_fu_949_p2;
wire   [0:0] and_ln102_742_fu_979_p2;
wire   [0:0] and_ln102_733_fu_954_p2;
wire   [0:0] or_ln117_696_fu_990_p2;
wire   [4:0] zext_ln117_83_fu_995_p1;
wire   [0:0] or_ln117_697_fu_998_p2;
wire   [0:0] and_ln102_734_fu_958_p2;
wire   [4:0] select_ln117_736_fu_1002_p3;
wire   [0:0] or_ln117_698_fu_1010_p2;
wire   [4:0] select_ln117_737_fu_1016_p3;
wire   [0:0] or_ln117_699_fu_1024_p2;
wire   [0:0] and_ln102_735_fu_968_p2;
wire   [4:0] select_ln117_738_fu_1030_p3;
wire   [0:0] or_ln117_700_fu_1038_p2;
wire   [4:0] select_ln117_739_fu_1044_p3;
wire   [0:0] or_ln117_701_fu_1052_p2;
wire   [0:0] and_ln102_736_fu_974_p2;
wire   [4:0] select_ln117_740_fu_1058_p3;
wire   [0:0] or_ln117_702_fu_1066_p2;
wire   [4:0] select_ln117_741_fu_1072_p3;
wire   [0:0] or_ln117_703_fu_1080_p2;
wire   [0:0] and_ln102_737_fu_984_p2;
wire   [4:0] select_ln117_742_fu_1086_p3;
wire   [0:0] or_ln117_704_fu_1094_p2;
wire   [4:0] select_ln117_743_fu_1100_p3;
wire   [11:0] tmp_fu_1121_p51;
wire   [4:0] tmp_fu_1121_p52;
wire   [0:0] or_ln117_705_fu_1108_p2;
wire   [11:0] tmp_fu_1121_p53;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] tmp_fu_1121_p1;
wire   [4:0] tmp_fu_1121_p3;
wire   [4:0] tmp_fu_1121_p5;
wire   [4:0] tmp_fu_1121_p7;
wire   [4:0] tmp_fu_1121_p9;
wire   [4:0] tmp_fu_1121_p11;
wire   [4:0] tmp_fu_1121_p13;
wire   [4:0] tmp_fu_1121_p15;
wire   [4:0] tmp_fu_1121_p17;
wire   [4:0] tmp_fu_1121_p19;
wire   [4:0] tmp_fu_1121_p21;
wire   [4:0] tmp_fu_1121_p23;
wire   [4:0] tmp_fu_1121_p25;
wire   [4:0] tmp_fu_1121_p27;
wire   [4:0] tmp_fu_1121_p29;
wire   [4:0] tmp_fu_1121_p31;
wire  signed [4:0] tmp_fu_1121_p33;
wire  signed [4:0] tmp_fu_1121_p35;
wire  signed [4:0] tmp_fu_1121_p37;
wire  signed [4:0] tmp_fu_1121_p39;
wire  signed [4:0] tmp_fu_1121_p41;
wire  signed [4:0] tmp_fu_1121_p43;
wire  signed [4:0] tmp_fu_1121_p45;
wire  signed [4:0] tmp_fu_1121_p47;
wire  signed [4:0] tmp_fu_1121_p49;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_51_5_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_51_5_12_1_1_U1540(
    .din0(12'd1508),
    .din1(12'd363),
    .din2(12'd731),
    .din3(12'd4014),
    .din4(12'd3753),
    .din5(12'd527),
    .din6(12'd30),
    .din7(12'd4094),
    .din8(12'd230),
    .din9(12'd279),
    .din10(12'd3893),
    .din11(12'd301),
    .din12(12'd58),
    .din13(12'd343),
    .din14(12'd1111),
    .din15(12'd252),
    .din16(12'd3616),
    .din17(12'd3936),
    .din18(12'd811),
    .din19(12'd4043),
    .din20(12'd2802),
    .din21(12'd4073),
    .din22(12'd3703),
    .din23(12'd451),
    .din24(12'd3963),
    .def(tmp_fu_1121_p51),
    .sel(tmp_fu_1121_p52),
    .dout(tmp_fu_1121_p53)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln102_724_reg_1287 <= and_ln102_724_fu_640_p2;
        and_ln104_146_reg_1280 <= and_ln104_146_fu_556_p2;
        icmp_ln86_750_reg_1237 <= icmp_ln86_750_fu_412_p2;
        icmp_ln86_755_reg_1243 <= icmp_ln86_755_fu_442_p2;
        icmp_ln86_756_reg_1249 <= icmp_ln86_756_fu_448_p2;
        icmp_ln86_763_reg_1255 <= icmp_ln86_763_fu_490_p2;
        icmp_ln86_764_reg_1260 <= icmp_ln86_764_fu_496_p2;
        icmp_ln86_765_reg_1265 <= icmp_ln86_765_fu_502_p2;
        icmp_ln86_766_reg_1270 <= icmp_ln86_766_fu_508_p2;
        icmp_ln86_767_reg_1275 <= icmp_ln86_767_fu_514_p2;
        or_ln117_695_reg_1293 <= or_ln117_695_fu_898_p2;
        select_ln117_735_reg_1299 <= select_ln117_735_fu_912_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln102_716_fu_544_p2 = (xor_ln104_fu_520_p2 & icmp_ln86_1395_fu_388_p2);

assign and_ln102_717_fu_562_p2 = (icmp_ln86_747_fu_394_p2 & and_ln102_fu_526_p2);

assign and_ln102_718_fu_580_p2 = (icmp_ln86_748_fu_400_p2 & and_ln104_fu_538_p2);

assign and_ln102_719_fu_586_p2 = (icmp_ln86_749_fu_406_p2 & and_ln102_716_fu_544_p2);

assign and_ln102_720_fu_920_p2 = (icmp_ln86_750_reg_1237 & and_ln104_146_reg_1280);

assign and_ln102_721_fu_604_p2 = (icmp_ln86_751_fu_418_p2 & and_ln102_717_fu_562_p2);

assign and_ln102_722_fu_616_p2 = (icmp_ln86_752_fu_424_p2 & and_ln104_147_fu_574_p2);

assign and_ln102_723_fu_628_p2 = (icmp_ln86_753_fu_430_p2 & and_ln102_719_fu_586_p2);

assign and_ln102_724_fu_640_p2 = (icmp_ln86_754_fu_436_p2 & and_ln104_148_fu_598_p2);

assign and_ln102_725_fu_934_p2 = (icmp_ln86_755_reg_1243 & and_ln102_720_fu_920_p2);

assign and_ln102_726_fu_944_p2 = (icmp_ln86_756_reg_1249 & and_ln104_149_fu_929_p2);

assign and_ln102_727_fu_658_p2 = (icmp_ln86_757_fu_454_p2 & and_ln102_721_fu_604_p2);

assign and_ln102_728_fu_670_p2 = (and_ln102_738_fu_664_p2 & and_ln102_717_fu_562_p2);

assign and_ln102_729_fu_676_p2 = (icmp_ln86_759_fu_466_p2 & and_ln102_722_fu_616_p2);

assign and_ln102_730_fu_688_p2 = (and_ln104_147_fu_574_p2 & and_ln102_739_fu_682_p2);

assign and_ln102_731_fu_694_p2 = (icmp_ln86_761_fu_478_p2 & and_ln102_723_fu_628_p2);

assign and_ln102_732_fu_706_p2 = (and_ln102_740_fu_700_p2 & and_ln102_719_fu_586_p2);

assign and_ln102_733_fu_954_p2 = (icmp_ln86_763_reg_1255 & and_ln102_724_reg_1287);

assign and_ln102_734_fu_958_p2 = (icmp_ln86_764_reg_1260 & and_ln102_725_fu_934_p2);

assign and_ln102_735_fu_968_p2 = (and_ln102_741_fu_963_p2 & and_ln102_720_fu_920_p2);

assign and_ln102_736_fu_974_p2 = (icmp_ln86_766_reg_1270 & and_ln102_726_fu_944_p2);

assign and_ln102_737_fu_984_p2 = (and_ln104_149_fu_929_p2 & and_ln102_742_fu_979_p2);

assign and_ln102_738_fu_664_p2 = (xor_ln104_363_fu_610_p2 & icmp_ln86_758_fu_460_p2);

assign and_ln102_739_fu_682_p2 = (xor_ln104_364_fu_622_p2 & icmp_ln86_760_fu_472_p2);

assign and_ln102_740_fu_700_p2 = (xor_ln104_365_fu_634_p2 & icmp_ln86_762_fu_484_p2);

assign and_ln102_741_fu_963_p2 = (xor_ln104_367_fu_939_p2 & icmp_ln86_765_reg_1265);

assign and_ln102_742_fu_979_p2 = (xor_ln104_368_fu_949_p2 & icmp_ln86_767_reg_1275);

assign and_ln102_fu_526_p2 = (icmp_ln86_fu_366_p2 & icmp_ln86_745_fu_372_p2);

assign and_ln104_146_fu_556_p2 = (xor_ln104_fu_520_p2 & xor_ln104_359_fu_550_p2);

assign and_ln104_147_fu_574_p2 = (xor_ln104_360_fu_568_p2 & and_ln102_fu_526_p2);

assign and_ln104_148_fu_598_p2 = (xor_ln104_361_fu_592_p2 & and_ln102_716_fu_544_p2);

assign and_ln104_149_fu_929_p2 = (xor_ln104_362_fu_924_p2 & and_ln104_146_reg_1280);

assign and_ln104_150_fu_652_p2 = (xor_ln104_366_fu_646_p2 & and_ln104_148_fu_598_p2);

assign and_ln104_fu_538_p2 = (xor_ln104_358_fu_532_p2 & icmp_ln86_fu_366_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((or_ln117_705_fu_1108_p2[0:0] == 1'b1) ? tmp_fu_1121_p53 : 12'd0);

assign icmp_ln86_1395_fu_388_p2 = (($signed(tmp_23_fu_378_p4) < $signed(15'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_745_fu_372_p2 = (($signed(x_31_val) < $signed(18'd2504)) ? 1'b1 : 1'b0);

assign icmp_ln86_747_fu_394_p2 = (($signed(x_40_val) < $signed(18'd242)) ? 1'b1 : 1'b0);

assign icmp_ln86_748_fu_400_p2 = (($signed(x_24_val) < $signed(18'd435)) ? 1'b1 : 1'b0);

assign icmp_ln86_749_fu_406_p2 = (($signed(x_29_val) < $signed(18'd10832)) ? 1'b1 : 1'b0);

assign icmp_ln86_750_fu_412_p2 = (($signed(x_35_val) < $signed(18'd35)) ? 1'b1 : 1'b0);

assign icmp_ln86_751_fu_418_p2 = (($signed(x_49_val) < $signed(18'd91892)) ? 1'b1 : 1'b0);

assign icmp_ln86_752_fu_424_p2 = (($signed(x_48_val) < $signed(18'd95021)) ? 1'b1 : 1'b0);

assign icmp_ln86_753_fu_430_p2 = (($signed(x_9_val) < $signed(18'd1092)) ? 1'b1 : 1'b0);

assign icmp_ln86_754_fu_436_p2 = (($signed(x_48_val) < $signed(18'd221404)) ? 1'b1 : 1'b0);

assign icmp_ln86_755_fu_442_p2 = (($signed(x_49_val) < $signed(18'd14270)) ? 1'b1 : 1'b0);

assign icmp_ln86_756_fu_448_p2 = (($signed(x_1_val) < $signed(18'd75236)) ? 1'b1 : 1'b0);

assign icmp_ln86_757_fu_454_p2 = (($signed(x_3_val) < $signed(18'd92283)) ? 1'b1 : 1'b0);

assign icmp_ln86_758_fu_460_p2 = (($signed(x_47_val) < $signed(18'd96263)) ? 1'b1 : 1'b0);

assign icmp_ln86_759_fu_466_p2 = (($signed(x_37_val) < $signed(18'd85)) ? 1'b1 : 1'b0);

assign icmp_ln86_760_fu_472_p2 = (($signed(x_13_val) < $signed(18'd392)) ? 1'b1 : 1'b0);

assign icmp_ln86_761_fu_478_p2 = (($signed(x_15_val) < $signed(18'd9)) ? 1'b1 : 1'b0);

assign icmp_ln86_762_fu_484_p2 = (($signed(x_21_val) < $signed(18'd259)) ? 1'b1 : 1'b0);

assign icmp_ln86_763_fu_490_p2 = (($signed(x_2_val) < $signed(18'd260834)) ? 1'b1 : 1'b0);

assign icmp_ln86_764_fu_496_p2 = (($signed(x_6_val) < $signed(18'd11496)) ? 1'b1 : 1'b0);

assign icmp_ln86_765_fu_502_p2 = (($signed(x_17_val) < $signed(18'd12)) ? 1'b1 : 1'b0);

assign icmp_ln86_766_fu_508_p2 = (($signed(x_14_val) < $signed(18'd84)) ? 1'b1 : 1'b0);

assign icmp_ln86_767_fu_514_p2 = (($signed(x_1_val) < $signed(18'd181017)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_366_p2 = (($signed(x_36_val) < $signed(18'd9)) ? 1'b1 : 1'b0);

assign or_ln117_684_fu_736_p2 = (or_ln117_fu_722_p2 | and_ln102_727_fu_658_p2);

assign or_ln117_685_fu_754_p2 = (or_ln117_fu_722_p2 | and_ln102_721_fu_604_p2);

assign or_ln117_686_fu_768_p2 = (or_ln117_685_fu_754_p2 | and_ln102_728_fu_670_p2);

assign or_ln117_687_fu_782_p2 = (or_ln117_fu_722_p2 | and_ln102_717_fu_562_p2);

assign or_ln117_688_fu_796_p2 = (or_ln117_687_fu_782_p2 | and_ln102_729_fu_676_p2);

assign or_ln117_689_fu_814_p2 = (or_ln117_687_fu_782_p2 | and_ln102_722_fu_616_p2);

assign or_ln117_690_fu_828_p2 = (or_ln117_689_fu_814_p2 | and_ln102_730_fu_688_p2);

assign or_ln117_691_fu_842_p2 = (icmp_ln86_fu_366_p2 | and_ln104_150_fu_652_p2);

assign or_ln117_692_fu_856_p2 = (or_ln117_691_fu_842_p2 | and_ln102_731_fu_694_p2);

assign or_ln117_693_fu_870_p2 = (or_ln117_691_fu_842_p2 | and_ln102_723_fu_628_p2);

assign or_ln117_694_fu_884_p2 = (or_ln117_693_fu_870_p2 | and_ln102_732_fu_706_p2);

assign or_ln117_695_fu_898_p2 = (or_ln117_691_fu_842_p2 | and_ln102_719_fu_586_p2);

assign or_ln117_696_fu_990_p2 = (or_ln117_695_reg_1293 | and_ln102_733_fu_954_p2);

assign or_ln117_697_fu_998_p2 = (or_ln117_695_reg_1293 | and_ln102_724_reg_1287);

assign or_ln117_698_fu_1010_p2 = (or_ln117_697_fu_998_p2 | and_ln102_734_fu_958_p2);

assign or_ln117_699_fu_1024_p2 = (or_ln117_697_fu_998_p2 | and_ln102_725_fu_934_p2);

assign or_ln117_700_fu_1038_p2 = (or_ln117_699_fu_1024_p2 | and_ln102_735_fu_968_p2);

assign or_ln117_701_fu_1052_p2 = (or_ln117_697_fu_998_p2 | and_ln102_720_fu_920_p2);

assign or_ln117_702_fu_1066_p2 = (or_ln117_701_fu_1052_p2 | and_ln102_736_fu_974_p2);

assign or_ln117_703_fu_1080_p2 = (or_ln117_701_fu_1052_p2 | and_ln102_726_fu_944_p2);

assign or_ln117_704_fu_1094_p2 = (or_ln117_703_fu_1080_p2 | and_ln102_737_fu_984_p2);

assign or_ln117_705_fu_1108_p2 = (or_ln117_697_fu_998_p2 | and_ln104_146_reg_1280);

assign or_ln117_fu_722_p2 = (and_ln104_fu_538_p2 | and_ln104_150_fu_652_p2);

assign select_ln117_723_fu_742_p3 = ((or_ln117_fu_722_p2[0:0] == 1'b1) ? select_ln117_fu_728_p3 : 2'd3);

assign select_ln117_724_fu_760_p3 = ((or_ln117_684_fu_736_p2[0:0] == 1'b1) ? zext_ln117_81_fu_750_p1 : 3'd4);

assign select_ln117_725_fu_774_p3 = ((or_ln117_685_fu_754_p2[0:0] == 1'b1) ? select_ln117_724_fu_760_p3 : 3'd5);

assign select_ln117_726_fu_788_p3 = ((or_ln117_686_fu_768_p2[0:0] == 1'b1) ? select_ln117_725_fu_774_p3 : 3'd6);

assign select_ln117_727_fu_802_p3 = ((or_ln117_687_fu_782_p2[0:0] == 1'b1) ? select_ln117_726_fu_788_p3 : 3'd7);

assign select_ln117_728_fu_820_p3 = ((or_ln117_688_fu_796_p2[0:0] == 1'b1) ? zext_ln117_82_fu_810_p1 : 4'd8);

assign select_ln117_729_fu_834_p3 = ((or_ln117_689_fu_814_p2[0:0] == 1'b1) ? select_ln117_728_fu_820_p3 : 4'd9);

assign select_ln117_730_fu_848_p3 = ((or_ln117_690_fu_828_p2[0:0] == 1'b1) ? select_ln117_729_fu_834_p3 : 4'd10);

assign select_ln117_731_fu_862_p3 = ((or_ln117_691_fu_842_p2[0:0] == 1'b1) ? select_ln117_730_fu_848_p3 : 4'd11);

assign select_ln117_732_fu_876_p3 = ((or_ln117_692_fu_856_p2[0:0] == 1'b1) ? select_ln117_731_fu_862_p3 : 4'd12);

assign select_ln117_733_fu_890_p3 = ((or_ln117_693_fu_870_p2[0:0] == 1'b1) ? select_ln117_732_fu_876_p3 : 4'd13);

assign select_ln117_734_fu_904_p3 = ((or_ln117_694_fu_884_p2[0:0] == 1'b1) ? select_ln117_733_fu_890_p3 : 4'd14);

assign select_ln117_735_fu_912_p3 = ((or_ln117_695_fu_898_p2[0:0] == 1'b1) ? select_ln117_734_fu_904_p3 : 4'd15);

assign select_ln117_736_fu_1002_p3 = ((or_ln117_696_fu_990_p2[0:0] == 1'b1) ? zext_ln117_83_fu_995_p1 : 5'd16);

assign select_ln117_737_fu_1016_p3 = ((or_ln117_697_fu_998_p2[0:0] == 1'b1) ? select_ln117_736_fu_1002_p3 : 5'd17);

assign select_ln117_738_fu_1030_p3 = ((or_ln117_698_fu_1010_p2[0:0] == 1'b1) ? select_ln117_737_fu_1016_p3 : 5'd18);

assign select_ln117_739_fu_1044_p3 = ((or_ln117_699_fu_1024_p2[0:0] == 1'b1) ? select_ln117_738_fu_1030_p3 : 5'd19);

assign select_ln117_740_fu_1058_p3 = ((or_ln117_700_fu_1038_p2[0:0] == 1'b1) ? select_ln117_739_fu_1044_p3 : 5'd20);

assign select_ln117_741_fu_1072_p3 = ((or_ln117_701_fu_1052_p2[0:0] == 1'b1) ? select_ln117_740_fu_1058_p3 : 5'd21);

assign select_ln117_742_fu_1086_p3 = ((or_ln117_702_fu_1066_p2[0:0] == 1'b1) ? select_ln117_741_fu_1072_p3 : 5'd22);

assign select_ln117_743_fu_1100_p3 = ((or_ln117_703_fu_1080_p2[0:0] == 1'b1) ? select_ln117_742_fu_1086_p3 : 5'd23);

assign select_ln117_fu_728_p3 = ((and_ln104_fu_538_p2[0:0] == 1'b1) ? zext_ln117_fu_718_p1 : 2'd2);

assign tmp_23_fu_378_p4 = {{x_38_val[17:3]}};

assign tmp_fu_1121_p51 = 'bx;

assign tmp_fu_1121_p52 = ((or_ln117_704_fu_1094_p2[0:0] == 1'b1) ? select_ln117_743_fu_1100_p3 : 5'd24);

assign xor_ln104_358_fu_532_p2 = (icmp_ln86_745_fu_372_p2 ^ 1'd1);

assign xor_ln104_359_fu_550_p2 = (icmp_ln86_1395_fu_388_p2 ^ 1'd1);

assign xor_ln104_360_fu_568_p2 = (icmp_ln86_747_fu_394_p2 ^ 1'd1);

assign xor_ln104_361_fu_592_p2 = (icmp_ln86_749_fu_406_p2 ^ 1'd1);

assign xor_ln104_362_fu_924_p2 = (icmp_ln86_750_reg_1237 ^ 1'd1);

assign xor_ln104_363_fu_610_p2 = (icmp_ln86_751_fu_418_p2 ^ 1'd1);

assign xor_ln104_364_fu_622_p2 = (icmp_ln86_752_fu_424_p2 ^ 1'd1);

assign xor_ln104_365_fu_634_p2 = (icmp_ln86_753_fu_430_p2 ^ 1'd1);

assign xor_ln104_366_fu_646_p2 = (icmp_ln86_754_fu_436_p2 ^ 1'd1);

assign xor_ln104_367_fu_939_p2 = (icmp_ln86_755_reg_1243 ^ 1'd1);

assign xor_ln104_368_fu_949_p2 = (icmp_ln86_756_reg_1249 ^ 1'd1);

assign xor_ln104_fu_520_p2 = (icmp_ln86_fu_366_p2 ^ 1'd1);

assign xor_ln117_fu_712_p2 = (1'd1 ^ and_ln102_718_fu_580_p2);

assign zext_ln117_81_fu_750_p1 = select_ln117_723_fu_742_p3;

assign zext_ln117_82_fu_810_p1 = select_ln117_727_fu_802_p3;

assign zext_ln117_83_fu_995_p1 = select_ln117_735_reg_1299;

assign zext_ln117_fu_718_p1 = xor_ln117_fu_712_p2;

endmodule //my_prj_decision_function_28
