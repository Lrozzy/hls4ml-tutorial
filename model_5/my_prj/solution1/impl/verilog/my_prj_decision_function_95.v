// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_95 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_4_val,
        x_5_val,
        x_6_val,
        x_10_val,
        x_11_val,
        x_26_val,
        x_29_val,
        x_46_val,
        x_47_val,
        x_49_val,
        x_50_val,
        x_51_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_4_val;
input  [17:0] x_5_val;
input  [17:0] x_6_val;
input  [17:0] x_10_val;
input  [17:0] x_11_val;
input  [17:0] x_26_val;
input  [17:0] x_29_val;
input  [17:0] x_46_val;
input  [17:0] x_47_val;
input  [17:0] x_49_val;
input  [17:0] x_50_val;
input  [17:0] x_51_val;
input  [17:0] x_52_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_122_fu_322_p2;
reg   [0:0] icmp_ln86_122_reg_873;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_127_fu_352_p2;
reg   [0:0] icmp_ln86_127_reg_879;
wire   [0:0] icmp_ln86_128_fu_358_p2;
reg   [0:0] icmp_ln86_128_reg_884;
wire   [0:0] and_ln104_25_fu_454_p2;
reg   [0:0] and_ln104_25_reg_889;
wire   [0:0] or_ln117_119_fu_704_p2;
reg   [0:0] or_ln117_119_reg_895;
wire   [3:0] select_ln117_122_fu_718_p3;
reg   [3:0] select_ln117_122_reg_901;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln86_fu_262_p2;
wire   [0:0] icmp_ln86_113_fu_268_p2;
wire   [0:0] xor_ln104_54_fu_376_p2;
wire   [0:0] icmp_ln86_114_fu_274_p2;
wire   [0:0] xor_ln104_fu_364_p2;
wire   [0:0] xor_ln104_55_fu_394_p2;
wire   [0:0] icmp_ln86_115_fu_280_p2;
wire   [0:0] and_ln102_fu_370_p2;
wire   [0:0] icmp_ln86_116_fu_286_p2;
wire   [0:0] and_ln104_fu_382_p2;
wire   [0:0] xor_ln104_56_fu_412_p2;
wire   [0:0] icmp_ln86_117_fu_292_p2;
wire   [0:0] and_ln102_139_fu_388_p2;
wire   [0:0] xor_ln104_57_fu_430_p2;
wire   [0:0] icmp_ln86_118_fu_298_p2;
wire   [0:0] and_ln104_22_fu_400_p2;
wire   [0:0] xor_ln104_58_fu_448_p2;
wire   [0:0] icmp_ln86_119_fu_304_p2;
wire   [0:0] and_ln102_143_fu_460_p2;
wire   [0:0] icmp_ln86_120_fu_310_p2;
wire   [0:0] and_ln102_141_fu_424_p2;
wire   [0:0] icmp_ln86_121_fu_316_p2;
wire   [0:0] and_ln102_142_fu_442_p2;
wire   [0:0] icmp_ln86_123_fu_328_p2;
wire   [0:0] and_ln102_145_fu_472_p2;
wire   [0:0] icmp_ln86_124_fu_334_p2;
wire   [0:0] xor_ln104_59_fu_478_p2;
wire   [0:0] and_ln102_149_fu_502_p2;
wire   [0:0] icmp_ln86_125_fu_340_p2;
wire   [0:0] and_ln102_146_fu_484_p2;
wire   [0:0] icmp_ln86_126_fu_346_p2;
wire   [0:0] xor_ln104_60_fu_490_p2;
wire   [0:0] and_ln102_152_fu_520_p2;
wire   [0:0] and_ln102_140_fu_406_p2;
wire   [0:0] xor_ln117_fu_532_p2;
wire   [0:0] and_ln104_23_fu_418_p2;
wire   [1:0] zext_ln117_fu_538_p1;
wire   [0:0] or_ln117_fu_542_p2;
wire   [0:0] and_ln104_24_fu_436_p2;
wire   [1:0] select_ln117_fu_548_p3;
wire   [1:0] select_ln117_111_fu_562_p3;
wire   [0:0] or_ln117_109_fu_556_p2;
wire   [0:0] and_ln102_144_fu_466_p2;
wire   [2:0] zext_ln117_13_fu_570_p1;
wire   [0:0] or_ln117_110_fu_574_p2;
wire   [2:0] select_ln117_112_fu_580_p3;
wire   [0:0] or_ln117_111_fu_588_p2;
wire   [0:0] and_ln102_148_fu_496_p2;
wire   [2:0] select_ln117_113_fu_594_p3;
wire   [0:0] or_ln117_112_fu_602_p2;
wire   [2:0] select_ln117_114_fu_608_p3;
wire   [2:0] select_ln117_115_fu_622_p3;
wire   [0:0] or_ln117_113_fu_616_p2;
wire   [0:0] and_ln102_150_fu_508_p2;
wire   [3:0] zext_ln117_14_fu_630_p1;
wire   [0:0] or_ln117_114_fu_634_p2;
wire   [3:0] select_ln117_116_fu_640_p3;
wire   [0:0] or_ln117_115_fu_648_p2;
wire   [0:0] and_ln102_151_fu_514_p2;
wire   [3:0] select_ln117_117_fu_654_p3;
wire   [0:0] or_ln117_116_fu_662_p2;
wire   [3:0] select_ln117_118_fu_668_p3;
wire   [0:0] or_ln117_117_fu_676_p2;
wire   [0:0] and_ln102_153_fu_526_p2;
wire   [3:0] select_ln117_119_fu_682_p3;
wire   [0:0] or_ln117_118_fu_690_p2;
wire   [3:0] select_ln117_120_fu_696_p3;
wire   [3:0] select_ln117_121_fu_710_p3;
wire   [0:0] and_ln102_147_fu_726_p2;
wire   [0:0] xor_ln104_61_fu_730_p2;
wire   [0:0] and_ln102_155_fu_740_p2;
wire   [0:0] and_ln102_154_fu_735_p2;
wire   [0:0] or_ln117_120_fu_750_p2;
wire   [3:0] select_ln117_123_fu_760_p3;
wire   [0:0] or_ln117_121_fu_755_p2;
wire   [0:0] and_ln102_156_fu_745_p2;
wire   [4:0] zext_ln117_15_fu_767_p1;
wire   [0:0] or_ln117_122_fu_771_p2;
wire   [4:0] select_ln117_124_fu_777_p3;
wire   [11:0] agg_result_fu_793_p37;
wire   [4:0] agg_result_fu_793_p38;
wire   [11:0] agg_result_fu_793_p39;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_793_p1;
wire   [4:0] agg_result_fu_793_p3;
wire   [4:0] agg_result_fu_793_p5;
wire   [4:0] agg_result_fu_793_p7;
wire   [4:0] agg_result_fu_793_p9;
wire   [4:0] agg_result_fu_793_p11;
wire   [4:0] agg_result_fu_793_p13;
wire   [4:0] agg_result_fu_793_p15;
wire   [4:0] agg_result_fu_793_p17;
wire   [4:0] agg_result_fu_793_p19;
wire   [4:0] agg_result_fu_793_p21;
wire   [4:0] agg_result_fu_793_p23;
wire   [4:0] agg_result_fu_793_p25;
wire   [4:0] agg_result_fu_793_p27;
wire   [4:0] agg_result_fu_793_p29;
wire   [4:0] agg_result_fu_793_p31;
wire  signed [4:0] agg_result_fu_793_p33;
wire  signed [4:0] agg_result_fu_793_p35;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_37_5_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_37_5_12_1_1_U2633(
    .din0(12'd3683),
    .din1(12'd1100),
    .din2(12'd3556),
    .din3(12'd3629),
    .din4(12'd3786),
    .din5(12'd623),
    .din6(12'd12),
    .din7(12'd1801),
    .din8(12'd247),
    .din9(12'd3762),
    .din10(12'd4092),
    .din11(12'd76),
    .din12(12'd3871),
    .din13(12'd4085),
    .din14(12'd137),
    .din15(12'd3360),
    .din16(12'd3217),
    .din17(12'd4095),
    .def(agg_result_fu_793_p37),
    .sel(agg_result_fu_793_p38),
    .dout(agg_result_fu_793_p39)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln104_25_reg_889 <= and_ln104_25_fu_454_p2;
        icmp_ln86_122_reg_873 <= icmp_ln86_122_fu_322_p2;
        icmp_ln86_127_reg_879 <= icmp_ln86_127_fu_352_p2;
        icmp_ln86_128_reg_884 <= icmp_ln86_128_fu_358_p2;
        or_ln117_119_reg_895 <= or_ln117_119_fu_704_p2;
        select_ln117_122_reg_901 <= select_ln117_122_fu_718_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_793_p37 = 'bx;

assign agg_result_fu_793_p38 = ((or_ln117_122_fu_771_p2[0:0] == 1'b1) ? select_ln117_124_fu_777_p3 : 5'd17);

assign and_ln102_139_fu_388_p2 = (xor_ln104_fu_364_p2 & icmp_ln86_114_fu_274_p2);

assign and_ln102_140_fu_406_p2 = (icmp_ln86_115_fu_280_p2 & and_ln102_fu_370_p2);

assign and_ln102_141_fu_424_p2 = (icmp_ln86_117_fu_292_p2 & and_ln102_139_fu_388_p2);

assign and_ln102_142_fu_442_p2 = (icmp_ln86_118_fu_298_p2 & and_ln104_22_fu_400_p2);

assign and_ln102_143_fu_460_p2 = (icmp_ln86_119_fu_304_p2 & and_ln104_fu_382_p2);

assign and_ln102_144_fu_466_p2 = (icmp_ln86_116_fu_286_p2 & and_ln102_143_fu_460_p2);

assign and_ln102_145_fu_472_p2 = (icmp_ln86_120_fu_310_p2 & and_ln102_141_fu_424_p2);

assign and_ln102_146_fu_484_p2 = (icmp_ln86_121_fu_316_p2 & and_ln102_142_fu_442_p2);

assign and_ln102_147_fu_726_p2 = (icmp_ln86_122_reg_873 & and_ln104_25_reg_889);

assign and_ln102_148_fu_496_p2 = (icmp_ln86_123_fu_328_p2 & and_ln102_145_fu_472_p2);

assign and_ln102_149_fu_502_p2 = (xor_ln104_59_fu_478_p2 & icmp_ln86_124_fu_334_p2);

assign and_ln102_150_fu_508_p2 = (and_ln102_149_fu_502_p2 & and_ln102_141_fu_424_p2);

assign and_ln102_151_fu_514_p2 = (icmp_ln86_125_fu_340_p2 & and_ln102_146_fu_484_p2);

assign and_ln102_152_fu_520_p2 = (xor_ln104_60_fu_490_p2 & icmp_ln86_126_fu_346_p2);

assign and_ln102_153_fu_526_p2 = (and_ln102_152_fu_520_p2 & and_ln102_142_fu_442_p2);

assign and_ln102_154_fu_735_p2 = (icmp_ln86_127_reg_879 & and_ln102_147_fu_726_p2);

assign and_ln102_155_fu_740_p2 = (xor_ln104_61_fu_730_p2 & icmp_ln86_128_reg_884);

assign and_ln102_156_fu_745_p2 = (and_ln104_25_reg_889 & and_ln102_155_fu_740_p2);

assign and_ln102_fu_370_p2 = (icmp_ln86_fu_262_p2 & icmp_ln86_113_fu_268_p2);

assign and_ln104_22_fu_400_p2 = (xor_ln104_fu_364_p2 & xor_ln104_55_fu_394_p2);

assign and_ln104_23_fu_418_p2 = (xor_ln104_56_fu_412_p2 & and_ln104_fu_382_p2);

assign and_ln104_24_fu_436_p2 = (xor_ln104_57_fu_430_p2 & and_ln102_139_fu_388_p2);

assign and_ln104_25_fu_454_p2 = (xor_ln104_58_fu_448_p2 & and_ln104_22_fu_400_p2);

assign and_ln104_fu_382_p2 = (xor_ln104_54_fu_376_p2 & icmp_ln86_fu_262_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_793_p39;

assign icmp_ln86_113_fu_268_p2 = (($signed(x_47_val) < $signed(18'd13070)) ? 1'b1 : 1'b0);

assign icmp_ln86_114_fu_274_p2 = (($signed(x_6_val) < $signed(18'd4181)) ? 1'b1 : 1'b0);

assign icmp_ln86_115_fu_280_p2 = (($signed(x_4_val) < $signed(18'd6187)) ? 1'b1 : 1'b0);

assign icmp_ln86_116_fu_286_p2 = (($signed(x_11_val) < $signed(18'd440)) ? 1'b1 : 1'b0);

assign icmp_ln86_117_fu_292_p2 = (($signed(x_50_val) < $signed(18'd89183)) ? 1'b1 : 1'b0);

assign icmp_ln86_118_fu_298_p2 = (($signed(x_49_val) < $signed(18'd171206)) ? 1'b1 : 1'b0);

assign icmp_ln86_119_fu_304_p2 = (($signed(x_52_val) < $signed(18'd23041)) ? 1'b1 : 1'b0);

assign icmp_ln86_120_fu_310_p2 = (($signed(x_10_val) < $signed(18'd738)) ? 1'b1 : 1'b0);

assign icmp_ln86_121_fu_316_p2 = (($signed(x_49_val) < $signed(18'd157925)) ? 1'b1 : 1'b0);

assign icmp_ln86_122_fu_322_p2 = (($signed(x_29_val) < $signed(18'd30735)) ? 1'b1 : 1'b0);

assign icmp_ln86_123_fu_328_p2 = (($signed(x_10_val) < $signed(18'd626)) ? 1'b1 : 1'b0);

assign icmp_ln86_124_fu_334_p2 = (($signed(x_1_val) < $signed(18'd233055)) ? 1'b1 : 1'b0);

assign icmp_ln86_125_fu_340_p2 = (($signed(x_51_val) < $signed(18'd131131)) ? 1'b1 : 1'b0);

assign icmp_ln86_126_fu_346_p2 = (($signed(x_46_val) < $signed(18'd117)) ? 1'b1 : 1'b0);

assign icmp_ln86_127_fu_352_p2 = (($signed(x_26_val) < $signed(18'd180637)) ? 1'b1 : 1'b0);

assign icmp_ln86_128_fu_358_p2 = (($signed(x_50_val) < $signed(18'd175512)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_262_p2 = (($signed(x_5_val) < $signed(18'd5147)) ? 1'b1 : 1'b0);

assign or_ln117_109_fu_556_p2 = (or_ln117_fu_542_p2 | and_ln104_24_fu_436_p2);

assign or_ln117_110_fu_574_p2 = (or_ln117_109_fu_556_p2 | and_ln102_144_fu_466_p2);

assign or_ln117_111_fu_588_p2 = (icmp_ln86_fu_262_p2 | and_ln104_24_fu_436_p2);

assign or_ln117_112_fu_602_p2 = (or_ln117_111_fu_588_p2 | and_ln102_148_fu_496_p2);

assign or_ln117_113_fu_616_p2 = (or_ln117_111_fu_588_p2 | and_ln102_145_fu_472_p2);

assign or_ln117_114_fu_634_p2 = (or_ln117_113_fu_616_p2 | and_ln102_150_fu_508_p2);

assign or_ln117_115_fu_648_p2 = (icmp_ln86_fu_262_p2 | and_ln102_139_fu_388_p2);

assign or_ln117_116_fu_662_p2 = (or_ln117_115_fu_648_p2 | and_ln102_151_fu_514_p2);

assign or_ln117_117_fu_676_p2 = (or_ln117_115_fu_648_p2 | and_ln102_146_fu_484_p2);

assign or_ln117_118_fu_690_p2 = (or_ln117_117_fu_676_p2 | and_ln102_153_fu_526_p2);

assign or_ln117_119_fu_704_p2 = (or_ln117_115_fu_648_p2 | and_ln102_142_fu_442_p2);

assign or_ln117_120_fu_750_p2 = (or_ln117_119_reg_895 | and_ln102_154_fu_735_p2);

assign or_ln117_121_fu_755_p2 = (or_ln117_119_reg_895 | and_ln102_147_fu_726_p2);

assign or_ln117_122_fu_771_p2 = (or_ln117_121_fu_755_p2 | and_ln102_156_fu_745_p2);

assign or_ln117_fu_542_p2 = (and_ln104_23_fu_418_p2 | and_ln102_fu_370_p2);

assign select_ln117_111_fu_562_p3 = ((or_ln117_fu_542_p2[0:0] == 1'b1) ? select_ln117_fu_548_p3 : 2'd3);

assign select_ln117_112_fu_580_p3 = ((or_ln117_109_fu_556_p2[0:0] == 1'b1) ? zext_ln117_13_fu_570_p1 : 3'd4);

assign select_ln117_113_fu_594_p3 = ((or_ln117_110_fu_574_p2[0:0] == 1'b1) ? select_ln117_112_fu_580_p3 : 3'd5);

assign select_ln117_114_fu_608_p3 = ((or_ln117_111_fu_588_p2[0:0] == 1'b1) ? select_ln117_113_fu_594_p3 : 3'd6);

assign select_ln117_115_fu_622_p3 = ((or_ln117_112_fu_602_p2[0:0] == 1'b1) ? select_ln117_114_fu_608_p3 : 3'd7);

assign select_ln117_116_fu_640_p3 = ((or_ln117_113_fu_616_p2[0:0] == 1'b1) ? zext_ln117_14_fu_630_p1 : 4'd8);

assign select_ln117_117_fu_654_p3 = ((or_ln117_114_fu_634_p2[0:0] == 1'b1) ? select_ln117_116_fu_640_p3 : 4'd9);

assign select_ln117_118_fu_668_p3 = ((or_ln117_115_fu_648_p2[0:0] == 1'b1) ? select_ln117_117_fu_654_p3 : 4'd10);

assign select_ln117_119_fu_682_p3 = ((or_ln117_116_fu_662_p2[0:0] == 1'b1) ? select_ln117_118_fu_668_p3 : 4'd11);

assign select_ln117_120_fu_696_p3 = ((or_ln117_117_fu_676_p2[0:0] == 1'b1) ? select_ln117_119_fu_682_p3 : 4'd12);

assign select_ln117_121_fu_710_p3 = ((or_ln117_118_fu_690_p2[0:0] == 1'b1) ? select_ln117_120_fu_696_p3 : 4'd13);

assign select_ln117_122_fu_718_p3 = ((or_ln117_119_fu_704_p2[0:0] == 1'b1) ? select_ln117_121_fu_710_p3 : 4'd14);

assign select_ln117_123_fu_760_p3 = ((or_ln117_120_fu_750_p2[0:0] == 1'b1) ? select_ln117_122_reg_901 : 4'd15);

assign select_ln117_124_fu_777_p3 = ((or_ln117_121_fu_755_p2[0:0] == 1'b1) ? zext_ln117_15_fu_767_p1 : 5'd16);

assign select_ln117_fu_548_p3 = ((and_ln102_fu_370_p2[0:0] == 1'b1) ? zext_ln117_fu_538_p1 : 2'd2);

assign xor_ln104_54_fu_376_p2 = (icmp_ln86_113_fu_268_p2 ^ 1'd1);

assign xor_ln104_55_fu_394_p2 = (icmp_ln86_114_fu_274_p2 ^ 1'd1);

assign xor_ln104_56_fu_412_p2 = (icmp_ln86_116_fu_286_p2 ^ 1'd1);

assign xor_ln104_57_fu_430_p2 = (icmp_ln86_117_fu_292_p2 ^ 1'd1);

assign xor_ln104_58_fu_448_p2 = (icmp_ln86_118_fu_298_p2 ^ 1'd1);

assign xor_ln104_59_fu_478_p2 = (icmp_ln86_120_fu_310_p2 ^ 1'd1);

assign xor_ln104_60_fu_490_p2 = (icmp_ln86_121_fu_316_p2 ^ 1'd1);

assign xor_ln104_61_fu_730_p2 = (icmp_ln86_122_reg_873 ^ 1'd1);

assign xor_ln104_fu_364_p2 = (icmp_ln86_fu_262_p2 ^ 1'd1);

assign xor_ln117_fu_532_p2 = (1'd1 ^ and_ln102_140_fu_406_p2);

assign zext_ln117_13_fu_570_p1 = select_ln117_111_fu_562_p3;

assign zext_ln117_14_fu_630_p1 = select_ln117_115_fu_622_p3;

assign zext_ln117_15_fu_767_p1 = select_ln117_123_fu_760_p3;

assign zext_ln117_fu_538_p1 = xor_ln117_fu_532_p2;

endmodule //my_prj_decision_function_95
