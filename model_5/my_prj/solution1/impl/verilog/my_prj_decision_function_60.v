// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_60 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_2_val,
        x_3_val,
        x_10_val,
        x_12_val,
        x_14_val,
        x_15_val,
        x_17_val,
        x_34_val,
        x_35_val,
        x_36_val,
        x_39_val,
        x_40_val,
        x_44_val,
        x_47_val,
        x_49_val,
        x_50_val,
        x_51_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_2_val;
input  [17:0] x_3_val;
input  [17:0] x_10_val;
input  [17:0] x_12_val;
input  [17:0] x_14_val;
input  [17:0] x_15_val;
input  [17:0] x_17_val;
input  [17:0] x_34_val;
input  [17:0] x_35_val;
input  [17:0] x_36_val;
input  [17:0] x_39_val;
input  [17:0] x_40_val;
input  [17:0] x_44_val;
input  [17:0] x_47_val;
input  [17:0] x_49_val;
input  [17:0] x_50_val;
input  [17:0] x_51_val;
input  [17:0] x_52_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_394_p2;
reg   [0:0] icmp_ln86_reg_1483;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_1119_fu_406_p2;
reg   [0:0] icmp_ln86_1119_reg_1488;
wire   [0:0] icmp_ln86_1122_fu_424_p2;
reg   [0:0] icmp_ln86_1122_reg_1494;
wire   [0:0] icmp_ln86_1123_fu_430_p2;
reg   [0:0] icmp_ln86_1123_reg_1500;
wire   [0:0] icmp_ln86_1128_fu_460_p2;
reg   [0:0] icmp_ln86_1128_reg_1506;
wire   [0:0] icmp_ln86_1129_fu_466_p2;
reg   [0:0] icmp_ln86_1129_reg_1512;
wire   [0:0] icmp_ln86_1130_fu_472_p2;
reg   [0:0] icmp_ln86_1130_reg_1518;
wire   [0:0] icmp_ln86_1131_fu_478_p2;
reg   [0:0] icmp_ln86_1131_reg_1524;
wire   [0:0] icmp_ln86_1140_fu_542_p2;
reg   [0:0] icmp_ln86_1140_reg_1530;
wire   [0:0] icmp_ln86_1141_fu_548_p2;
reg   [0:0] icmp_ln86_1141_reg_1535;
wire   [0:0] icmp_ln86_1142_fu_554_p2;
reg   [0:0] icmp_ln86_1142_reg_1540;
wire   [0:0] icmp_ln86_1143_fu_560_p2;
reg   [0:0] icmp_ln86_1143_reg_1545;
wire   [0:0] icmp_ln86_1144_fu_566_p2;
reg   [0:0] icmp_ln86_1144_reg_1550;
wire   [0:0] icmp_ln86_1145_fu_572_p2;
reg   [0:0] icmp_ln86_1145_reg_1555;
wire   [0:0] icmp_ln86_1146_fu_578_p2;
reg   [0:0] icmp_ln86_1146_reg_1560;
wire   [0:0] icmp_ln86_1147_fu_584_p2;
reg   [0:0] icmp_ln86_1147_reg_1565;
wire   [0:0] or_ln117_999_fu_946_p2;
reg   [0:0] or_ln117_999_reg_1570;
wire   [4:0] select_ln117_1096_fu_964_p3;
reg   [4:0] select_ln117_1096_reg_1579;
wire    ap_block_pp0_stage0;
wire   [12:0] tmp_15_fu_508_p4;
wire   [0:0] icmp_ln86_1118_fu_400_p2;
wire   [0:0] xor_ln104_530_fu_590_p2;
wire   [0:0] icmp_ln86_1120_fu_412_p2;
wire   [0:0] xor_ln104_532_fu_608_p2;
wire   [0:0] icmp_ln86_1121_fu_418_p2;
wire   [0:0] and_ln104_fu_596_p2;
wire   [0:0] xor_ln104_533_fu_626_p2;
wire   [0:0] icmp_ln86_1124_fu_436_p2;
wire   [0:0] and_ln102_1369_fu_602_p2;
wire   [0:0] icmp_ln86_1125_fu_442_p2;
wire   [0:0] and_ln104_204_fu_614_p2;
wire   [0:0] icmp_ln86_1126_fu_448_p2;
wire   [0:0] and_ln102_1370_fu_620_p2;
wire   [0:0] icmp_ln86_1127_fu_454_p2;
wire   [0:0] and_ln104_205_fu_632_p2;
wire   [0:0] icmp_ln86_1132_fu_484_p2;
wire   [0:0] and_ln102_1373_fu_638_p2;
wire   [0:0] icmp_ln86_1133_fu_490_p2;
wire   [0:0] xor_ln104_536_fu_644_p2;
wire   [0:0] and_ln102_1382_fu_692_p2;
wire   [0:0] icmp_ln86_1134_fu_496_p2;
wire   [0:0] and_ln102_1374_fu_650_p2;
wire   [0:0] icmp_ln86_1135_fu_502_p2;
wire   [0:0] xor_ln104_537_fu_656_p2;
wire   [0:0] and_ln102_1385_fu_710_p2;
wire   [0:0] icmp_ln86_1136_fu_518_p2;
wire   [0:0] and_ln102_1375_fu_662_p2;
wire   [0:0] icmp_ln86_1137_fu_524_p2;
wire   [0:0] xor_ln104_538_fu_668_p2;
wire   [0:0] and_ln102_1388_fu_728_p2;
wire   [0:0] icmp_ln86_1138_fu_530_p2;
wire   [0:0] and_ln102_1376_fu_674_p2;
wire   [0:0] icmp_ln86_1139_fu_536_p2;
wire   [0:0] xor_ln104_539_fu_680_p2;
wire   [0:0] and_ln102_1391_fu_746_p2;
wire   [0:0] and_ln102_1381_fu_686_p2;
wire   [0:0] xor_ln117_fu_758_p2;
wire   [0:0] and_ln102_1383_fu_698_p2;
wire   [1:0] zext_ln117_fu_764_p1;
wire   [0:0] or_ln117_fu_768_p2;
wire   [1:0] select_ln117_fu_774_p3;
wire   [1:0] select_ln117_1083_fu_782_p3;
wire   [0:0] and_ln102_1384_fu_704_p2;
wire   [2:0] zext_ln117_118_fu_790_p1;
wire   [0:0] or_ln117_989_fu_794_p2;
wire   [2:0] select_ln117_1084_fu_800_p3;
wire   [0:0] or_ln117_990_fu_808_p2;
wire   [0:0] and_ln102_1386_fu_716_p2;
wire   [2:0] select_ln117_1085_fu_814_p3;
wire   [0:0] or_ln117_991_fu_822_p2;
wire   [2:0] select_ln117_1086_fu_828_p3;
wire   [2:0] select_ln117_1087_fu_836_p3;
wire   [0:0] and_ln102_1387_fu_722_p2;
wire   [3:0] zext_ln117_119_fu_844_p1;
wire   [0:0] or_ln117_992_fu_848_p2;
wire   [3:0] select_ln117_1088_fu_854_p3;
wire   [0:0] or_ln117_993_fu_862_p2;
wire   [0:0] and_ln102_1389_fu_734_p2;
wire   [3:0] select_ln117_1089_fu_868_p3;
wire   [0:0] or_ln117_994_fu_876_p2;
wire   [3:0] select_ln117_1090_fu_882_p3;
wire   [0:0] or_ln117_995_fu_890_p2;
wire   [0:0] and_ln102_1390_fu_740_p2;
wire   [3:0] select_ln117_1091_fu_896_p3;
wire   [0:0] or_ln117_996_fu_904_p2;
wire   [3:0] select_ln117_1092_fu_910_p3;
wire   [0:0] or_ln117_997_fu_918_p2;
wire   [0:0] and_ln102_1392_fu_752_p2;
wire   [3:0] select_ln117_1093_fu_924_p3;
wire   [0:0] or_ln117_998_fu_932_p2;
wire   [3:0] select_ln117_1094_fu_938_p3;
wire   [3:0] select_ln117_1095_fu_952_p3;
wire   [4:0] zext_ln117_120_fu_960_p1;
wire   [0:0] xor_ln104_fu_972_p2;
wire   [0:0] xor_ln104_531_fu_982_p2;
wire   [0:0] and_ln102_fu_977_p2;
wire   [0:0] xor_ln104_534_fu_998_p2;
wire   [0:0] and_ln104_203_fu_987_p2;
wire   [0:0] xor_ln104_535_fu_1014_p2;
wire   [0:0] and_ln102_1371_fu_993_p2;
wire   [0:0] and_ln104_206_fu_1003_p2;
wire   [0:0] and_ln102_1372_fu_1009_p2;
wire   [0:0] and_ln104_207_fu_1019_p2;
wire   [0:0] and_ln102_1377_fu_1025_p2;
wire   [0:0] xor_ln104_540_fu_1030_p2;
wire   [0:0] and_ln102_1394_fu_1070_p2;
wire   [0:0] and_ln102_1378_fu_1035_p2;
wire   [0:0] xor_ln104_541_fu_1040_p2;
wire   [0:0] and_ln102_1397_fu_1086_p2;
wire   [0:0] and_ln102_1379_fu_1045_p2;
wire   [0:0] xor_ln104_542_fu_1050_p2;
wire   [0:0] and_ln102_1400_fu_1102_p2;
wire   [0:0] and_ln102_1380_fu_1055_p2;
wire   [0:0] xor_ln104_543_fu_1060_p2;
wire   [0:0] and_ln102_1403_fu_1118_p2;
wire   [0:0] and_ln102_1393_fu_1065_p2;
wire   [0:0] or_ln117_1000_fu_1129_p2;
wire   [0:0] or_ln117_1001_fu_1134_p2;
wire   [0:0] and_ln102_1395_fu_1075_p2;
wire   [4:0] select_ln117_1097_fu_1139_p3;
wire   [0:0] or_ln117_1002_fu_1146_p2;
wire   [4:0] select_ln117_1098_fu_1152_p3;
wire   [0:0] or_ln117_1003_fu_1160_p2;
wire   [0:0] and_ln102_1396_fu_1081_p2;
wire   [4:0] select_ln117_1099_fu_1165_p3;
wire   [0:0] or_ln117_1004_fu_1173_p2;
wire   [4:0] select_ln117_1100_fu_1179_p3;
wire   [0:0] or_ln117_1005_fu_1187_p2;
wire   [0:0] and_ln102_1398_fu_1091_p2;
wire   [4:0] select_ln117_1101_fu_1193_p3;
wire   [0:0] or_ln117_1006_fu_1201_p2;
wire   [4:0] select_ln117_1102_fu_1207_p3;
wire   [0:0] or_ln117_1007_fu_1215_p2;
wire   [0:0] and_ln102_1399_fu_1097_p2;
wire   [4:0] select_ln117_1103_fu_1220_p3;
wire   [0:0] or_ln117_1008_fu_1228_p2;
wire   [4:0] select_ln117_1104_fu_1234_p3;
wire   [0:0] or_ln117_1009_fu_1242_p2;
wire   [0:0] and_ln102_1401_fu_1107_p2;
wire   [4:0] select_ln117_1105_fu_1248_p3;
wire   [0:0] or_ln117_1010_fu_1256_p2;
wire   [4:0] select_ln117_1106_fu_1262_p3;
wire   [0:0] or_ln117_1011_fu_1270_p2;
wire   [0:0] and_ln102_1402_fu_1113_p2;
wire   [4:0] select_ln117_1107_fu_1276_p3;
wire   [0:0] or_ln117_1012_fu_1284_p2;
wire   [4:0] select_ln117_1108_fu_1290_p3;
wire   [0:0] or_ln117_1013_fu_1298_p2;
wire   [0:0] and_ln102_1404_fu_1123_p2;
wire   [4:0] select_ln117_1109_fu_1304_p3;
wire   [0:0] or_ln117_1014_fu_1312_p2;
wire   [4:0] select_ln117_1110_fu_1318_p3;
wire   [11:0] tmp_fu_1339_p65;
wire   [4:0] tmp_fu_1339_p66;
wire   [0:0] or_ln117_1015_fu_1326_p2;
wire   [11:0] tmp_fu_1339_p67;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] tmp_fu_1339_p1;
wire   [4:0] tmp_fu_1339_p3;
wire   [4:0] tmp_fu_1339_p5;
wire   [4:0] tmp_fu_1339_p7;
wire   [4:0] tmp_fu_1339_p9;
wire   [4:0] tmp_fu_1339_p11;
wire   [4:0] tmp_fu_1339_p13;
wire   [4:0] tmp_fu_1339_p15;
wire   [4:0] tmp_fu_1339_p17;
wire   [4:0] tmp_fu_1339_p19;
wire   [4:0] tmp_fu_1339_p21;
wire   [4:0] tmp_fu_1339_p23;
wire   [4:0] tmp_fu_1339_p25;
wire   [4:0] tmp_fu_1339_p27;
wire   [4:0] tmp_fu_1339_p29;
wire   [4:0] tmp_fu_1339_p31;
wire  signed [4:0] tmp_fu_1339_p33;
wire  signed [4:0] tmp_fu_1339_p35;
wire  signed [4:0] tmp_fu_1339_p37;
wire  signed [4:0] tmp_fu_1339_p39;
wire  signed [4:0] tmp_fu_1339_p41;
wire  signed [4:0] tmp_fu_1339_p43;
wire  signed [4:0] tmp_fu_1339_p45;
wire  signed [4:0] tmp_fu_1339_p47;
wire  signed [4:0] tmp_fu_1339_p49;
wire  signed [4:0] tmp_fu_1339_p51;
wire  signed [4:0] tmp_fu_1339_p53;
wire  signed [4:0] tmp_fu_1339_p55;
wire  signed [4:0] tmp_fu_1339_p57;
wire  signed [4:0] tmp_fu_1339_p59;
wire  signed [4:0] tmp_fu_1339_p61;
wire  signed [4:0] tmp_fu_1339_p63;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_65_5_12_1_1_x18 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 12 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 12 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 12 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 12 ),
    .CASE31( 5'h1F ),
    .din31_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_65_5_12_1_1_x18_U906(
    .din0(12'd4085),
    .din1(12'd3639),
    .din2(12'd4045),
    .din3(12'd119),
    .din4(12'd4000),
    .din5(12'd3611),
    .din6(12'd201),
    .din7(12'd3997),
    .din8(12'd414),
    .din9(12'd4023),
    .din10(12'd3817),
    .din11(12'd4024),
    .din12(12'd46),
    .din13(12'd237),
    .din14(12'd4051),
    .din15(12'd52),
    .din16(12'd3948),
    .din17(12'd238),
    .din18(12'd3842),
    .din19(12'd267),
    .din20(12'd4095),
    .din21(12'd245),
    .din22(12'd2892),
    .din23(12'd3839),
    .din24(12'd4063),
    .din25(12'd3921),
    .din26(12'd187),
    .din27(12'd3762),
    .din28(12'd329),
    .din29(12'd3770),
    .din30(12'd3651),
    .din31(12'd3137),
    .def(tmp_fu_1339_p65),
    .sel(tmp_fu_1339_p66),
    .dout(tmp_fu_1339_p67)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_1119_reg_1488 <= icmp_ln86_1119_fu_406_p2;
        icmp_ln86_1122_reg_1494 <= icmp_ln86_1122_fu_424_p2;
        icmp_ln86_1123_reg_1500 <= icmp_ln86_1123_fu_430_p2;
        icmp_ln86_1128_reg_1506 <= icmp_ln86_1128_fu_460_p2;
        icmp_ln86_1129_reg_1512 <= icmp_ln86_1129_fu_466_p2;
        icmp_ln86_1130_reg_1518 <= icmp_ln86_1130_fu_472_p2;
        icmp_ln86_1131_reg_1524 <= icmp_ln86_1131_fu_478_p2;
        icmp_ln86_1140_reg_1530 <= icmp_ln86_1140_fu_542_p2;
        icmp_ln86_1141_reg_1535 <= icmp_ln86_1141_fu_548_p2;
        icmp_ln86_1142_reg_1540 <= icmp_ln86_1142_fu_554_p2;
        icmp_ln86_1143_reg_1545 <= icmp_ln86_1143_fu_560_p2;
        icmp_ln86_1144_reg_1550 <= icmp_ln86_1144_fu_566_p2;
        icmp_ln86_1145_reg_1555 <= icmp_ln86_1145_fu_572_p2;
        icmp_ln86_1146_reg_1560 <= icmp_ln86_1146_fu_578_p2;
        icmp_ln86_1147_reg_1565 <= icmp_ln86_1147_fu_584_p2;
        icmp_ln86_reg_1483 <= icmp_ln86_fu_394_p2;
        or_ln117_999_reg_1570 <= or_ln117_999_fu_946_p2;
        select_ln117_1096_reg_1579 <= select_ln117_1096_fu_964_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln102_1369_fu_602_p2 = (icmp_ln86_1120_fu_412_p2 & icmp_ln86_1118_fu_400_p2);

assign and_ln102_1370_fu_620_p2 = (icmp_ln86_1121_fu_418_p2 & and_ln104_fu_596_p2);

assign and_ln102_1371_fu_993_p2 = (icmp_ln86_1122_reg_1494 & and_ln102_fu_977_p2);

assign and_ln102_1372_fu_1009_p2 = (icmp_ln86_1123_reg_1500 & and_ln104_203_fu_987_p2);

assign and_ln102_1373_fu_638_p2 = (icmp_ln86_1124_fu_436_p2 & and_ln102_1369_fu_602_p2);

assign and_ln102_1374_fu_650_p2 = (icmp_ln86_1125_fu_442_p2 & and_ln104_204_fu_614_p2);

assign and_ln102_1375_fu_662_p2 = (icmp_ln86_1126_fu_448_p2 & and_ln102_1370_fu_620_p2);

assign and_ln102_1376_fu_674_p2 = (icmp_ln86_1127_fu_454_p2 & and_ln104_205_fu_632_p2);

assign and_ln102_1377_fu_1025_p2 = (icmp_ln86_1128_reg_1506 & and_ln102_1371_fu_993_p2);

assign and_ln102_1378_fu_1035_p2 = (icmp_ln86_1129_reg_1512 & and_ln104_206_fu_1003_p2);

assign and_ln102_1379_fu_1045_p2 = (icmp_ln86_1130_reg_1518 & and_ln102_1372_fu_1009_p2);

assign and_ln102_1380_fu_1055_p2 = (icmp_ln86_1131_reg_1524 & and_ln104_207_fu_1019_p2);

assign and_ln102_1381_fu_686_p2 = (icmp_ln86_1132_fu_484_p2 & and_ln102_1373_fu_638_p2);

assign and_ln102_1382_fu_692_p2 = (xor_ln104_536_fu_644_p2 & icmp_ln86_1133_fu_490_p2);

assign and_ln102_1383_fu_698_p2 = (and_ln102_1382_fu_692_p2 & and_ln102_1369_fu_602_p2);

assign and_ln102_1384_fu_704_p2 = (icmp_ln86_1134_fu_496_p2 & and_ln102_1374_fu_650_p2);

assign and_ln102_1385_fu_710_p2 = (xor_ln104_537_fu_656_p2 & icmp_ln86_1135_fu_502_p2);

assign and_ln102_1386_fu_716_p2 = (and_ln104_204_fu_614_p2 & and_ln102_1385_fu_710_p2);

assign and_ln102_1387_fu_722_p2 = (icmp_ln86_1136_fu_518_p2 & and_ln102_1375_fu_662_p2);

assign and_ln102_1388_fu_728_p2 = (xor_ln104_538_fu_668_p2 & icmp_ln86_1137_fu_524_p2);

assign and_ln102_1389_fu_734_p2 = (and_ln102_1388_fu_728_p2 & and_ln102_1370_fu_620_p2);

assign and_ln102_1390_fu_740_p2 = (icmp_ln86_1138_fu_530_p2 & and_ln102_1376_fu_674_p2);

assign and_ln102_1391_fu_746_p2 = (xor_ln104_539_fu_680_p2 & icmp_ln86_1139_fu_536_p2);

assign and_ln102_1392_fu_752_p2 = (and_ln104_205_fu_632_p2 & and_ln102_1391_fu_746_p2);

assign and_ln102_1393_fu_1065_p2 = (icmp_ln86_1140_reg_1530 & and_ln102_1377_fu_1025_p2);

assign and_ln102_1394_fu_1070_p2 = (xor_ln104_540_fu_1030_p2 & icmp_ln86_1141_reg_1535);

assign and_ln102_1395_fu_1075_p2 = (and_ln102_1394_fu_1070_p2 & and_ln102_1371_fu_993_p2);

assign and_ln102_1396_fu_1081_p2 = (icmp_ln86_1142_reg_1540 & and_ln102_1378_fu_1035_p2);

assign and_ln102_1397_fu_1086_p2 = (xor_ln104_541_fu_1040_p2 & icmp_ln86_1143_reg_1545);

assign and_ln102_1398_fu_1091_p2 = (and_ln104_206_fu_1003_p2 & and_ln102_1397_fu_1086_p2);

assign and_ln102_1399_fu_1097_p2 = (icmp_ln86_1144_reg_1550 & and_ln102_1379_fu_1045_p2);

assign and_ln102_1400_fu_1102_p2 = (xor_ln104_542_fu_1050_p2 & icmp_ln86_1145_reg_1555);

assign and_ln102_1401_fu_1107_p2 = (and_ln102_1400_fu_1102_p2 & and_ln102_1372_fu_1009_p2);

assign and_ln102_1402_fu_1113_p2 = (icmp_ln86_1146_reg_1560 & and_ln102_1380_fu_1055_p2);

assign and_ln102_1403_fu_1118_p2 = (xor_ln104_543_fu_1060_p2 & icmp_ln86_1147_reg_1565);

assign and_ln102_1404_fu_1123_p2 = (and_ln104_207_fu_1019_p2 & and_ln102_1403_fu_1118_p2);

assign and_ln102_fu_977_p2 = (xor_ln104_fu_972_p2 & icmp_ln86_1119_reg_1488);

assign and_ln104_203_fu_987_p2 = (xor_ln104_fu_972_p2 & xor_ln104_531_fu_982_p2);

assign and_ln104_204_fu_614_p2 = (xor_ln104_532_fu_608_p2 & icmp_ln86_1118_fu_400_p2);

assign and_ln104_205_fu_632_p2 = (xor_ln104_533_fu_626_p2 & and_ln104_fu_596_p2);

assign and_ln104_206_fu_1003_p2 = (xor_ln104_534_fu_998_p2 & and_ln102_fu_977_p2);

assign and_ln104_207_fu_1019_p2 = (xor_ln104_535_fu_1014_p2 & and_ln104_203_fu_987_p2);

assign and_ln104_fu_596_p2 = (xor_ln104_530_fu_590_p2 & icmp_ln86_fu_394_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((or_ln117_1015_fu_1326_p2[0:0] == 1'b1) ? tmp_fu_1339_p67 : 12'd0);

assign icmp_ln86_1118_fu_400_p2 = (($signed(x_2_val) < $signed(18'd261445)) ? 1'b1 : 1'b0);

assign icmp_ln86_1119_fu_406_p2 = (($signed(x_1_val) < $signed(18'd248934)) ? 1'b1 : 1'b0);

assign icmp_ln86_1120_fu_412_p2 = (($signed(x_1_val) < $signed(18'd205657)) ? 1'b1 : 1'b0);

assign icmp_ln86_1121_fu_418_p2 = (($signed(x_15_val) < $signed(18'd3)) ? 1'b1 : 1'b0);

assign icmp_ln86_1122_fu_424_p2 = (($signed(x_51_val) < $signed(18'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_1123_fu_430_p2 = (($signed(x_2_val) < $signed(18'd1577)) ? 1'b1 : 1'b0);

assign icmp_ln86_1124_fu_436_p2 = (($signed(x_1_val) < $signed(18'd239192)) ? 1'b1 : 1'b0);

assign icmp_ln86_1125_fu_442_p2 = (($signed(x_50_val) < $signed(18'd168189)) ? 1'b1 : 1'b0);

assign icmp_ln86_1126_fu_448_p2 = (($signed(x_1_val) < $signed(18'd213383)) ? 1'b1 : 1'b0);

assign icmp_ln86_1127_fu_454_p2 = (($signed(x_47_val) < $signed(18'd89413)) ? 1'b1 : 1'b0);

assign icmp_ln86_1128_fu_460_p2 = (($signed(x_1_val) < $signed(18'd179557)) ? 1'b1 : 1'b0);

assign icmp_ln86_1129_fu_466_p2 = (($signed(x_36_val) < $signed(18'd34)) ? 1'b1 : 1'b0);

assign icmp_ln86_1130_fu_472_p2 = (($signed(x_39_val) < $signed(18'd1725)) ? 1'b1 : 1'b0);

assign icmp_ln86_1131_fu_478_p2 = (($signed(x_10_val) < $signed(18'd701)) ? 1'b1 : 1'b0);

assign icmp_ln86_1132_fu_484_p2 = (($signed(x_52_val) < $signed(18'd52737)) ? 1'b1 : 1'b0);

assign icmp_ln86_1133_fu_490_p2 = (($signed(x_34_val) < $signed(18'd468)) ? 1'b1 : 1'b0);

assign icmp_ln86_1134_fu_496_p2 = (($signed(x_49_val) < $signed(18'd154424)) ? 1'b1 : 1'b0);

assign icmp_ln86_1135_fu_502_p2 = (($signed(x_3_val) < $signed(18'd182400)) ? 1'b1 : 1'b0);

assign icmp_ln86_1136_fu_518_p2 = (($signed(tmp_15_fu_508_p4) < $signed(13'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_1137_fu_524_p2 = (($signed(x_52_val) < $signed(18'd46593)) ? 1'b1 : 1'b0);

assign icmp_ln86_1138_fu_530_p2 = (($signed(x_3_val) < $signed(18'd89347)) ? 1'b1 : 1'b0);

assign icmp_ln86_1139_fu_536_p2 = (($signed(x_14_val) < $signed(18'd63)) ? 1'b1 : 1'b0);

assign icmp_ln86_1140_fu_542_p2 = (($signed(x_50_val) < $signed(18'd95803)) ? 1'b1 : 1'b0);

assign icmp_ln86_1141_fu_548_p2 = (($signed(x_17_val) < $signed(18'd52)) ? 1'b1 : 1'b0);

assign icmp_ln86_1142_fu_554_p2 = (($signed(x_35_val) < $signed(18'd93)) ? 1'b1 : 1'b0);

assign icmp_ln86_1143_fu_560_p2 = (($signed(x_36_val) < $signed(18'd35)) ? 1'b1 : 1'b0);

assign icmp_ln86_1144_fu_566_p2 = (($signed(x_12_val) < $signed(18'd259093)) ? 1'b1 : 1'b0);

assign icmp_ln86_1145_fu_572_p2 = (($signed(x_44_val) < $signed(18'd19)) ? 1'b1 : 1'b0);

assign icmp_ln86_1146_fu_578_p2 = (($signed(x_40_val) < $signed(18'd620)) ? 1'b1 : 1'b0);

assign icmp_ln86_1147_fu_584_p2 = (($signed(x_52_val) < $signed(18'd88577)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_394_p2 = (($signed(x_2_val) < $signed(18'd793)) ? 1'b1 : 1'b0);

assign or_ln117_1000_fu_1129_p2 = (or_ln117_999_reg_1570 | and_ln102_1393_fu_1065_p2);

assign or_ln117_1001_fu_1134_p2 = (or_ln117_999_reg_1570 | and_ln102_1377_fu_1025_p2);

assign or_ln117_1002_fu_1146_p2 = (or_ln117_1001_fu_1134_p2 | and_ln102_1395_fu_1075_p2);

assign or_ln117_1003_fu_1160_p2 = (or_ln117_999_reg_1570 | and_ln102_1371_fu_993_p2);

assign or_ln117_1004_fu_1173_p2 = (or_ln117_1003_fu_1160_p2 | and_ln102_1396_fu_1081_p2);

assign or_ln117_1005_fu_1187_p2 = (or_ln117_1003_fu_1160_p2 | and_ln102_1378_fu_1035_p2);

assign or_ln117_1006_fu_1201_p2 = (or_ln117_1005_fu_1187_p2 | and_ln102_1398_fu_1091_p2);

assign or_ln117_1007_fu_1215_p2 = (or_ln117_999_reg_1570 | and_ln102_fu_977_p2);

assign or_ln117_1008_fu_1228_p2 = (or_ln117_1007_fu_1215_p2 | and_ln102_1399_fu_1097_p2);

assign or_ln117_1009_fu_1242_p2 = (or_ln117_1007_fu_1215_p2 | and_ln102_1379_fu_1045_p2);

assign or_ln117_1010_fu_1256_p2 = (or_ln117_1009_fu_1242_p2 | and_ln102_1401_fu_1107_p2);

assign or_ln117_1011_fu_1270_p2 = (or_ln117_1007_fu_1215_p2 | and_ln102_1372_fu_1009_p2);

assign or_ln117_1012_fu_1284_p2 = (or_ln117_1011_fu_1270_p2 | and_ln102_1402_fu_1113_p2);

assign or_ln117_1013_fu_1298_p2 = (or_ln117_1011_fu_1270_p2 | and_ln102_1380_fu_1055_p2);

assign or_ln117_1014_fu_1312_p2 = (or_ln117_1013_fu_1298_p2 | and_ln102_1404_fu_1123_p2);

assign or_ln117_1015_fu_1326_p2 = (xor_ln104_fu_972_p2 | or_ln117_999_reg_1570);

assign or_ln117_989_fu_794_p2 = (and_ln102_1384_fu_704_p2 | and_ln102_1369_fu_602_p2);

assign or_ln117_990_fu_808_p2 = (and_ln102_1374_fu_650_p2 | and_ln102_1369_fu_602_p2);

assign or_ln117_991_fu_822_p2 = (or_ln117_990_fu_808_p2 | and_ln102_1386_fu_716_p2);

assign or_ln117_992_fu_848_p2 = (icmp_ln86_1118_fu_400_p2 | and_ln102_1387_fu_722_p2);

assign or_ln117_993_fu_862_p2 = (icmp_ln86_1118_fu_400_p2 | and_ln102_1375_fu_662_p2);

assign or_ln117_994_fu_876_p2 = (or_ln117_993_fu_862_p2 | and_ln102_1389_fu_734_p2);

assign or_ln117_995_fu_890_p2 = (icmp_ln86_1118_fu_400_p2 | and_ln102_1370_fu_620_p2);

assign or_ln117_996_fu_904_p2 = (or_ln117_995_fu_890_p2 | and_ln102_1390_fu_740_p2);

assign or_ln117_997_fu_918_p2 = (or_ln117_995_fu_890_p2 | and_ln102_1376_fu_674_p2);

assign or_ln117_998_fu_932_p2 = (or_ln117_997_fu_918_p2 | and_ln102_1392_fu_752_p2);

assign or_ln117_999_fu_946_p2 = (icmp_ln86_1118_fu_400_p2 | and_ln104_fu_596_p2);

assign or_ln117_fu_768_p2 = (and_ln102_1383_fu_698_p2 | and_ln102_1373_fu_638_p2);

assign select_ln117_1083_fu_782_p3 = ((or_ln117_fu_768_p2[0:0] == 1'b1) ? select_ln117_fu_774_p3 : 2'd3);

assign select_ln117_1084_fu_800_p3 = ((and_ln102_1369_fu_602_p2[0:0] == 1'b1) ? zext_ln117_118_fu_790_p1 : 3'd4);

assign select_ln117_1085_fu_814_p3 = ((or_ln117_989_fu_794_p2[0:0] == 1'b1) ? select_ln117_1084_fu_800_p3 : 3'd5);

assign select_ln117_1086_fu_828_p3 = ((or_ln117_990_fu_808_p2[0:0] == 1'b1) ? select_ln117_1085_fu_814_p3 : 3'd6);

assign select_ln117_1087_fu_836_p3 = ((or_ln117_991_fu_822_p2[0:0] == 1'b1) ? select_ln117_1086_fu_828_p3 : 3'd7);

assign select_ln117_1088_fu_854_p3 = ((icmp_ln86_1118_fu_400_p2[0:0] == 1'b1) ? zext_ln117_119_fu_844_p1 : 4'd8);

assign select_ln117_1089_fu_868_p3 = ((or_ln117_992_fu_848_p2[0:0] == 1'b1) ? select_ln117_1088_fu_854_p3 : 4'd9);

assign select_ln117_1090_fu_882_p3 = ((or_ln117_993_fu_862_p2[0:0] == 1'b1) ? select_ln117_1089_fu_868_p3 : 4'd10);

assign select_ln117_1091_fu_896_p3 = ((or_ln117_994_fu_876_p2[0:0] == 1'b1) ? select_ln117_1090_fu_882_p3 : 4'd11);

assign select_ln117_1092_fu_910_p3 = ((or_ln117_995_fu_890_p2[0:0] == 1'b1) ? select_ln117_1091_fu_896_p3 : 4'd12);

assign select_ln117_1093_fu_924_p3 = ((or_ln117_996_fu_904_p2[0:0] == 1'b1) ? select_ln117_1092_fu_910_p3 : 4'd13);

assign select_ln117_1094_fu_938_p3 = ((or_ln117_997_fu_918_p2[0:0] == 1'b1) ? select_ln117_1093_fu_924_p3 : 4'd14);

assign select_ln117_1095_fu_952_p3 = ((or_ln117_998_fu_932_p2[0:0] == 1'b1) ? select_ln117_1094_fu_938_p3 : 4'd15);

assign select_ln117_1096_fu_964_p3 = ((or_ln117_999_fu_946_p2[0:0] == 1'b1) ? zext_ln117_120_fu_960_p1 : 5'd16);

assign select_ln117_1097_fu_1139_p3 = ((or_ln117_1000_fu_1129_p2[0:0] == 1'b1) ? select_ln117_1096_reg_1579 : 5'd17);

assign select_ln117_1098_fu_1152_p3 = ((or_ln117_1001_fu_1134_p2[0:0] == 1'b1) ? select_ln117_1097_fu_1139_p3 : 5'd18);

assign select_ln117_1099_fu_1165_p3 = ((or_ln117_1002_fu_1146_p2[0:0] == 1'b1) ? select_ln117_1098_fu_1152_p3 : 5'd19);

assign select_ln117_1100_fu_1179_p3 = ((or_ln117_1003_fu_1160_p2[0:0] == 1'b1) ? select_ln117_1099_fu_1165_p3 : 5'd20);

assign select_ln117_1101_fu_1193_p3 = ((or_ln117_1004_fu_1173_p2[0:0] == 1'b1) ? select_ln117_1100_fu_1179_p3 : 5'd21);

assign select_ln117_1102_fu_1207_p3 = ((or_ln117_1005_fu_1187_p2[0:0] == 1'b1) ? select_ln117_1101_fu_1193_p3 : 5'd22);

assign select_ln117_1103_fu_1220_p3 = ((or_ln117_1006_fu_1201_p2[0:0] == 1'b1) ? select_ln117_1102_fu_1207_p3 : 5'd23);

assign select_ln117_1104_fu_1234_p3 = ((or_ln117_1007_fu_1215_p2[0:0] == 1'b1) ? select_ln117_1103_fu_1220_p3 : 5'd24);

assign select_ln117_1105_fu_1248_p3 = ((or_ln117_1008_fu_1228_p2[0:0] == 1'b1) ? select_ln117_1104_fu_1234_p3 : 5'd25);

assign select_ln117_1106_fu_1262_p3 = ((or_ln117_1009_fu_1242_p2[0:0] == 1'b1) ? select_ln117_1105_fu_1248_p3 : 5'd26);

assign select_ln117_1107_fu_1276_p3 = ((or_ln117_1010_fu_1256_p2[0:0] == 1'b1) ? select_ln117_1106_fu_1262_p3 : 5'd27);

assign select_ln117_1108_fu_1290_p3 = ((or_ln117_1011_fu_1270_p2[0:0] == 1'b1) ? select_ln117_1107_fu_1276_p3 : 5'd28);

assign select_ln117_1109_fu_1304_p3 = ((or_ln117_1012_fu_1284_p2[0:0] == 1'b1) ? select_ln117_1108_fu_1290_p3 : 5'd29);

assign select_ln117_1110_fu_1318_p3 = ((or_ln117_1013_fu_1298_p2[0:0] == 1'b1) ? select_ln117_1109_fu_1304_p3 : 5'd30);

assign select_ln117_fu_774_p3 = ((and_ln102_1373_fu_638_p2[0:0] == 1'b1) ? zext_ln117_fu_764_p1 : 2'd2);

assign tmp_15_fu_508_p4 = {{x_44_val[17:5]}};

assign tmp_fu_1339_p65 = 'bx;

assign tmp_fu_1339_p66 = ((or_ln117_1014_fu_1312_p2[0:0] == 1'b1) ? select_ln117_1110_fu_1318_p3 : 5'd31);

assign xor_ln104_530_fu_590_p2 = (icmp_ln86_1118_fu_400_p2 ^ 1'd1);

assign xor_ln104_531_fu_982_p2 = (icmp_ln86_1119_reg_1488 ^ 1'd1);

assign xor_ln104_532_fu_608_p2 = (icmp_ln86_1120_fu_412_p2 ^ 1'd1);

assign xor_ln104_533_fu_626_p2 = (icmp_ln86_1121_fu_418_p2 ^ 1'd1);

assign xor_ln104_534_fu_998_p2 = (icmp_ln86_1122_reg_1494 ^ 1'd1);

assign xor_ln104_535_fu_1014_p2 = (icmp_ln86_1123_reg_1500 ^ 1'd1);

assign xor_ln104_536_fu_644_p2 = (icmp_ln86_1124_fu_436_p2 ^ 1'd1);

assign xor_ln104_537_fu_656_p2 = (icmp_ln86_1125_fu_442_p2 ^ 1'd1);

assign xor_ln104_538_fu_668_p2 = (icmp_ln86_1126_fu_448_p2 ^ 1'd1);

assign xor_ln104_539_fu_680_p2 = (icmp_ln86_1127_fu_454_p2 ^ 1'd1);

assign xor_ln104_540_fu_1030_p2 = (icmp_ln86_1128_reg_1506 ^ 1'd1);

assign xor_ln104_541_fu_1040_p2 = (icmp_ln86_1129_reg_1512 ^ 1'd1);

assign xor_ln104_542_fu_1050_p2 = (icmp_ln86_1130_reg_1518 ^ 1'd1);

assign xor_ln104_543_fu_1060_p2 = (icmp_ln86_1131_reg_1524 ^ 1'd1);

assign xor_ln104_fu_972_p2 = (icmp_ln86_reg_1483 ^ 1'd1);

assign xor_ln117_fu_758_p2 = (1'd1 ^ and_ln102_1381_fu_686_p2);

assign zext_ln117_118_fu_790_p1 = select_ln117_1083_fu_782_p3;

assign zext_ln117_119_fu_844_p1 = select_ln117_1087_fu_836_p3;

assign zext_ln117_120_fu_960_p1 = select_ln117_1095_fu_952_p3;

assign zext_ln117_fu_764_p1 = xor_ln117_fu_758_p2;

endmodule //my_prj_decision_function_60
