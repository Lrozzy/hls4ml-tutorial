// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_98 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_4_val,
        x_6_val,
        x_8_val,
        x_10_val,
        x_13_val,
        x_14_val,
        x_15_val,
        x_18_val,
        x_19_val,
        x_25_val,
        x_28_val,
        x_31_val,
        x_33_val,
        x_37_val,
        x_38_val,
        x_39_val,
        x_43_val,
        x_46_val,
        x_49_val,
        x_51_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_4_val;
input  [17:0] x_6_val;
input  [17:0] x_8_val;
input  [17:0] x_10_val;
input  [17:0] x_13_val;
input  [17:0] x_14_val;
input  [17:0] x_15_val;
input  [17:0] x_18_val;
input  [17:0] x_19_val;
input  [17:0] x_25_val;
input  [17:0] x_28_val;
input  [17:0] x_31_val;
input  [17:0] x_33_val;
input  [17:0] x_37_val;
input  [17:0] x_38_val;
input  [17:0] x_39_val;
input  [17:0] x_43_val;
input  [17:0] x_46_val;
input  [17:0] x_49_val;
input  [17:0] x_51_val;
output  [12:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_394_p2;
reg   [0:0] icmp_ln86_reg_1401;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_32_fu_406_p2;
reg   [0:0] icmp_ln86_32_reg_1409;
wire   [0:0] icmp_ln86_35_fu_424_p2;
reg   [0:0] icmp_ln86_35_reg_1415;
wire   [0:0] icmp_ln86_36_fu_430_p2;
reg   [0:0] icmp_ln86_36_reg_1421;
wire   [0:0] icmp_ln86_40_fu_454_p2;
reg   [0:0] icmp_ln86_40_reg_1427;
wire   [0:0] icmp_ln86_41_fu_470_p2;
reg   [0:0] icmp_ln86_41_reg_1433;
wire   [0:0] icmp_ln86_42_fu_476_p2;
reg   [0:0] icmp_ln86_42_reg_1439;
wire   [0:0] icmp_ln86_43_fu_482_p2;
reg   [0:0] icmp_ln86_43_reg_1445;
wire   [0:0] icmp_ln86_50_fu_524_p2;
reg   [0:0] icmp_ln86_50_reg_1451;
wire   [0:0] icmp_ln86_51_fu_530_p2;
reg   [0:0] icmp_ln86_51_reg_1456;
wire   [0:0] icmp_ln86_52_fu_546_p2;
reg   [0:0] icmp_ln86_52_reg_1461;
wire   [0:0] icmp_ln86_53_fu_552_p2;
reg   [0:0] icmp_ln86_53_reg_1466;
wire   [0:0] icmp_ln86_54_fu_558_p2;
reg   [0:0] icmp_ln86_54_reg_1471;
wire   [0:0] icmp_ln86_55_fu_564_p2;
reg   [0:0] icmp_ln86_55_reg_1476;
wire   [0:0] icmp_ln86_56_fu_570_p2;
reg   [0:0] icmp_ln86_56_reg_1481;
wire   [0:0] icmp_ln86_57_fu_576_p2;
reg   [0:0] icmp_ln86_57_reg_1486;
wire   [0:0] xor_ln104_fu_582_p2;
reg   [0:0] xor_ln104_reg_1491;
wire   [3:0] select_ln117_40_fu_910_p3;
reg   [3:0] select_ln117_40_reg_1497;
wire    ap_block_pp0_stage0;
wire   [14:0] tmp_fu_460_p4;
wire   [15:0] tmp_1_fu_536_p4;
wire   [0:0] icmp_ln86_31_fu_400_p2;
wire   [0:0] xor_ln104_15_fu_594_p2;
wire   [0:0] icmp_ln86_33_fu_412_p2;
wire   [0:0] and_ln102_fu_588_p2;
wire   [0:0] xor_ln104_17_fu_612_p2;
wire   [0:0] icmp_ln86_34_fu_418_p2;
wire   [0:0] and_ln104_fu_600_p2;
wire   [0:0] xor_ln104_18_fu_630_p2;
wire   [0:0] icmp_ln86_37_fu_436_p2;
wire   [0:0] and_ln102_39_fu_606_p2;
wire   [0:0] icmp_ln86_38_fu_442_p2;
wire   [0:0] and_ln104_7_fu_618_p2;
wire   [0:0] icmp_ln86_39_fu_448_p2;
wire   [0:0] and_ln102_40_fu_624_p2;
wire   [0:0] icmp_ln86_44_fu_488_p2;
wire   [0:0] and_ln102_43_fu_642_p2;
wire   [0:0] icmp_ln86_45_fu_494_p2;
wire   [0:0] xor_ln104_21_fu_648_p2;
wire   [0:0] and_ln102_51_fu_684_p2;
wire   [0:0] icmp_ln86_46_fu_500_p2;
wire   [0:0] and_ln102_44_fu_654_p2;
wire   [0:0] icmp_ln86_47_fu_506_p2;
wire   [0:0] xor_ln104_22_fu_660_p2;
wire   [0:0] and_ln102_54_fu_702_p2;
wire   [0:0] icmp_ln86_48_fu_512_p2;
wire   [0:0] and_ln102_45_fu_666_p2;
wire   [0:0] icmp_ln86_49_fu_518_p2;
wire   [0:0] xor_ln104_23_fu_672_p2;
wire   [0:0] and_ln102_57_fu_720_p2;
wire   [0:0] and_ln104_8_fu_636_p2;
wire   [0:0] and_ln102_50_fu_678_p2;
wire   [0:0] or_ln117_26_fu_738_p2;
wire   [0:0] or_ln117_27_fu_744_p2;
wire   [0:0] or_ln117_fu_732_p2;
wire   [1:0] zext_ln117_fu_750_p1;
wire   [0:0] or_ln117_28_fu_754_p2;
wire   [0:0] and_ln102_52_fu_690_p2;
wire   [1:0] select_ln117_fu_760_p3;
wire   [1:0] select_ln117_30_fu_774_p3;
wire   [0:0] or_ln117_29_fu_768_p2;
wire   [2:0] zext_ln117_4_fu_782_p1;
wire   [0:0] or_ln117_30_fu_786_p2;
wire   [0:0] and_ln102_53_fu_696_p2;
wire   [2:0] select_ln117_31_fu_792_p3;
wire   [0:0] or_ln117_31_fu_800_p2;
wire   [2:0] select_ln117_32_fu_806_p3;
wire   [0:0] or_ln117_32_fu_814_p2;
wire   [0:0] and_ln102_55_fu_708_p2;
wire   [2:0] select_ln117_33_fu_820_p3;
wire   [2:0] select_ln117_34_fu_834_p3;
wire   [0:0] or_ln117_33_fu_828_p2;
wire   [3:0] zext_ln117_5_fu_842_p1;
wire   [0:0] or_ln117_34_fu_846_p2;
wire   [0:0] and_ln102_56_fu_714_p2;
wire   [3:0] select_ln117_35_fu_852_p3;
wire   [0:0] or_ln117_35_fu_860_p2;
wire   [3:0] select_ln117_36_fu_866_p3;
wire   [0:0] or_ln117_36_fu_874_p2;
wire   [0:0] and_ln102_58_fu_726_p2;
wire   [3:0] select_ln117_37_fu_880_p3;
wire   [0:0] or_ln117_37_fu_888_p2;
wire   [3:0] select_ln117_38_fu_894_p3;
wire   [3:0] select_ln117_39_fu_902_p3;
wire   [0:0] xor_ln104_16_fu_922_p2;
wire   [0:0] and_ln102_38_fu_918_p2;
wire   [0:0] xor_ln104_19_fu_937_p2;
wire   [0:0] and_ln104_6_fu_927_p2;
wire   [0:0] xor_ln104_20_fu_953_p2;
wire   [0:0] and_ln102_41_fu_932_p2;
wire   [0:0] and_ln104_9_fu_942_p2;
wire   [0:0] and_ln102_42_fu_948_p2;
wire   [0:0] and_ln104_10_fu_958_p2;
wire   [0:0] and_ln102_46_fu_964_p2;
wire   [0:0] xor_ln104_24_fu_969_p2;
wire   [0:0] and_ln102_60_fu_1009_p2;
wire   [0:0] and_ln102_47_fu_974_p2;
wire   [0:0] xor_ln104_25_fu_979_p2;
wire   [0:0] and_ln102_63_fu_1025_p2;
wire   [0:0] and_ln102_48_fu_984_p2;
wire   [0:0] xor_ln104_26_fu_989_p2;
wire   [0:0] and_ln102_66_fu_1041_p2;
wire   [0:0] and_ln102_49_fu_994_p2;
wire   [0:0] xor_ln104_27_fu_999_p2;
wire   [0:0] and_ln102_69_fu_1057_p2;
wire   [0:0] and_ln102_59_fu_1004_p2;
wire   [0:0] or_ln117_38_fu_1068_p2;
wire   [0:0] or_ln117_39_fu_1073_p2;
wire   [0:0] and_ln102_61_fu_1014_p2;
wire   [3:0] select_ln117_41_fu_1078_p3;
wire   [3:0] select_ln117_42_fu_1091_p3;
wire   [0:0] or_ln117_40_fu_1085_p2;
wire   [4:0] zext_ln117_6_fu_1099_p1;
wire   [0:0] or_ln117_41_fu_1103_p2;
wire   [0:0] and_ln102_62_fu_1020_p2;
wire   [4:0] select_ln117_43_fu_1108_p3;
wire   [0:0] or_ln117_42_fu_1116_p2;
wire   [4:0] select_ln117_44_fu_1122_p3;
wire   [0:0] or_ln117_43_fu_1130_p2;
wire   [0:0] and_ln102_64_fu_1030_p2;
wire   [4:0] select_ln117_45_fu_1136_p3;
wire   [0:0] or_ln117_44_fu_1144_p2;
wire   [4:0] select_ln117_46_fu_1150_p3;
wire   [0:0] or_ln117_45_fu_1158_p2;
wire   [0:0] and_ln102_65_fu_1036_p2;
wire   [4:0] select_ln117_47_fu_1163_p3;
wire   [0:0] or_ln117_46_fu_1171_p2;
wire   [4:0] select_ln117_48_fu_1177_p3;
wire   [0:0] or_ln117_47_fu_1185_p2;
wire   [0:0] and_ln102_67_fu_1046_p2;
wire   [4:0] select_ln117_49_fu_1191_p3;
wire   [0:0] or_ln117_48_fu_1199_p2;
wire   [4:0] select_ln117_50_fu_1205_p3;
wire   [0:0] or_ln117_49_fu_1213_p2;
wire   [0:0] and_ln102_68_fu_1052_p2;
wire   [4:0] select_ln117_51_fu_1219_p3;
wire   [0:0] or_ln117_50_fu_1227_p2;
wire   [4:0] select_ln117_52_fu_1233_p3;
wire   [0:0] or_ln117_51_fu_1241_p2;
wire   [0:0] and_ln102_70_fu_1062_p2;
wire   [4:0] select_ln117_53_fu_1247_p3;
wire   [0:0] or_ln117_52_fu_1255_p2;
wire   [4:0] select_ln117_54_fu_1261_p3;
wire   [12:0] agg_result_fu_1277_p59;
wire   [4:0] agg_result_fu_1277_p60;
wire   [12:0] agg_result_fu_1277_p61;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1277_p1;
wire   [4:0] agg_result_fu_1277_p3;
wire   [4:0] agg_result_fu_1277_p5;
wire   [4:0] agg_result_fu_1277_p7;
wire   [4:0] agg_result_fu_1277_p9;
wire   [4:0] agg_result_fu_1277_p11;
wire   [4:0] agg_result_fu_1277_p13;
wire   [4:0] agg_result_fu_1277_p15;
wire   [4:0] agg_result_fu_1277_p17;
wire   [4:0] agg_result_fu_1277_p19;
wire   [4:0] agg_result_fu_1277_p21;
wire   [4:0] agg_result_fu_1277_p23;
wire   [4:0] agg_result_fu_1277_p25;
wire   [4:0] agg_result_fu_1277_p27;
wire   [4:0] agg_result_fu_1277_p29;
wire   [4:0] agg_result_fu_1277_p31;
wire  signed [4:0] agg_result_fu_1277_p33;
wire  signed [4:0] agg_result_fu_1277_p35;
wire  signed [4:0] agg_result_fu_1277_p37;
wire  signed [4:0] agg_result_fu_1277_p39;
wire  signed [4:0] agg_result_fu_1277_p41;
wire  signed [4:0] agg_result_fu_1277_p43;
wire  signed [4:0] agg_result_fu_1277_p45;
wire  signed [4:0] agg_result_fu_1277_p47;
wire  signed [4:0] agg_result_fu_1277_p49;
wire  signed [4:0] agg_result_fu_1277_p51;
wire  signed [4:0] agg_result_fu_1277_p53;
wire  signed [4:0] agg_result_fu_1277_p55;
wire  signed [4:0] agg_result_fu_1277_p57;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_59_5_13_1_1_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 13 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 13 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 13 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 13 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 13 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 13 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 13 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 13 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 13 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 13 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 13 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 13 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 13 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 13 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 13 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 13 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 13 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 13 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 13 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 13 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 13 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 13 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 13 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 13 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 13 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 13 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 13 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 13 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 13 ),
    .def_WIDTH( 13 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 13 ))
sparsemux_59_5_13_1_1_x_U2566(
    .din0(13'd7875),
    .din1(13'd7592),
    .din2(13'd108),
    .din3(13'd7128),
    .din4(13'd8115),
    .din5(13'd218),
    .din6(13'd7829),
    .din7(13'd1188),
    .din8(13'd339),
    .din9(13'd2647),
    .din10(13'd710),
    .din11(13'd7844),
    .din12(13'd1221),
    .din13(13'd8190),
    .din14(13'd8088),
    .din15(13'd1517),
    .din16(13'd8017),
    .din17(13'd7151),
    .din18(13'd211),
    .din19(13'd7905),
    .din20(13'd8103),
    .din21(13'd7737),
    .din22(13'd245),
    .din23(13'd43),
    .din24(13'd7396),
    .din25(13'd7932),
    .din26(13'd7098),
    .din27(13'd8168),
    .din28(13'd81),
    .def(agg_result_fu_1277_p59),
    .sel(agg_result_fu_1277_p60),
    .dout(agg_result_fu_1277_p61)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_32_reg_1409 <= icmp_ln86_32_fu_406_p2;
        icmp_ln86_35_reg_1415 <= icmp_ln86_35_fu_424_p2;
        icmp_ln86_36_reg_1421 <= icmp_ln86_36_fu_430_p2;
        icmp_ln86_40_reg_1427 <= icmp_ln86_40_fu_454_p2;
        icmp_ln86_41_reg_1433 <= icmp_ln86_41_fu_470_p2;
        icmp_ln86_42_reg_1439 <= icmp_ln86_42_fu_476_p2;
        icmp_ln86_43_reg_1445 <= icmp_ln86_43_fu_482_p2;
        icmp_ln86_50_reg_1451 <= icmp_ln86_50_fu_524_p2;
        icmp_ln86_51_reg_1456 <= icmp_ln86_51_fu_530_p2;
        icmp_ln86_52_reg_1461 <= icmp_ln86_52_fu_546_p2;
        icmp_ln86_53_reg_1466 <= icmp_ln86_53_fu_552_p2;
        icmp_ln86_54_reg_1471 <= icmp_ln86_54_fu_558_p2;
        icmp_ln86_55_reg_1476 <= icmp_ln86_55_fu_564_p2;
        icmp_ln86_56_reg_1481 <= icmp_ln86_56_fu_570_p2;
        icmp_ln86_57_reg_1486 <= icmp_ln86_57_fu_576_p2;
        icmp_ln86_reg_1401 <= icmp_ln86_fu_394_p2;
        select_ln117_40_reg_1497 <= select_ln117_40_fu_910_p3;
        xor_ln104_reg_1491 <= xor_ln104_fu_582_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1277_p59 = 'bx;

assign agg_result_fu_1277_p60 = ((or_ln117_52_fu_1255_p2[0:0] == 1'b1) ? select_ln117_54_fu_1261_p3 : 5'd28);

assign and_ln102_38_fu_918_p2 = (xor_ln104_reg_1491 & icmp_ln86_32_reg_1409);

assign and_ln102_39_fu_606_p2 = (icmp_ln86_33_fu_412_p2 & and_ln102_fu_588_p2);

assign and_ln102_40_fu_624_p2 = (icmp_ln86_34_fu_418_p2 & and_ln104_fu_600_p2);

assign and_ln102_41_fu_932_p2 = (icmp_ln86_35_reg_1415 & and_ln102_38_fu_918_p2);

assign and_ln102_42_fu_948_p2 = (icmp_ln86_36_reg_1421 & and_ln104_6_fu_927_p2);

assign and_ln102_43_fu_642_p2 = (icmp_ln86_37_fu_436_p2 & and_ln102_39_fu_606_p2);

assign and_ln102_44_fu_654_p2 = (icmp_ln86_38_fu_442_p2 & and_ln104_7_fu_618_p2);

assign and_ln102_45_fu_666_p2 = (icmp_ln86_39_fu_448_p2 & and_ln102_40_fu_624_p2);

assign and_ln102_46_fu_964_p2 = (icmp_ln86_40_reg_1427 & and_ln102_41_fu_932_p2);

assign and_ln102_47_fu_974_p2 = (icmp_ln86_41_reg_1433 & and_ln104_9_fu_942_p2);

assign and_ln102_48_fu_984_p2 = (icmp_ln86_42_reg_1439 & and_ln102_42_fu_948_p2);

assign and_ln102_49_fu_994_p2 = (icmp_ln86_43_reg_1445 & and_ln104_10_fu_958_p2);

assign and_ln102_50_fu_678_p2 = (icmp_ln86_44_fu_488_p2 & and_ln102_43_fu_642_p2);

assign and_ln102_51_fu_684_p2 = (xor_ln104_21_fu_648_p2 & icmp_ln86_45_fu_494_p2);

assign and_ln102_52_fu_690_p2 = (and_ln102_51_fu_684_p2 & and_ln102_39_fu_606_p2);

assign and_ln102_53_fu_696_p2 = (icmp_ln86_46_fu_500_p2 & and_ln102_44_fu_654_p2);

assign and_ln102_54_fu_702_p2 = (xor_ln104_22_fu_660_p2 & icmp_ln86_47_fu_506_p2);

assign and_ln102_55_fu_708_p2 = (and_ln104_7_fu_618_p2 & and_ln102_54_fu_702_p2);

assign and_ln102_56_fu_714_p2 = (icmp_ln86_48_fu_512_p2 & and_ln102_45_fu_666_p2);

assign and_ln102_57_fu_720_p2 = (xor_ln104_23_fu_672_p2 & icmp_ln86_49_fu_518_p2);

assign and_ln102_58_fu_726_p2 = (and_ln102_57_fu_720_p2 & and_ln102_40_fu_624_p2);

assign and_ln102_59_fu_1004_p2 = (icmp_ln86_50_reg_1451 & and_ln102_46_fu_964_p2);

assign and_ln102_60_fu_1009_p2 = (xor_ln104_24_fu_969_p2 & icmp_ln86_51_reg_1456);

assign and_ln102_61_fu_1014_p2 = (and_ln102_60_fu_1009_p2 & and_ln102_41_fu_932_p2);

assign and_ln102_62_fu_1020_p2 = (icmp_ln86_52_reg_1461 & and_ln102_47_fu_974_p2);

assign and_ln102_63_fu_1025_p2 = (xor_ln104_25_fu_979_p2 & icmp_ln86_53_reg_1466);

assign and_ln102_64_fu_1030_p2 = (and_ln104_9_fu_942_p2 & and_ln102_63_fu_1025_p2);

assign and_ln102_65_fu_1036_p2 = (icmp_ln86_54_reg_1471 & and_ln102_48_fu_984_p2);

assign and_ln102_66_fu_1041_p2 = (xor_ln104_26_fu_989_p2 & icmp_ln86_55_reg_1476);

assign and_ln102_67_fu_1046_p2 = (and_ln102_66_fu_1041_p2 & and_ln102_42_fu_948_p2);

assign and_ln102_68_fu_1052_p2 = (icmp_ln86_56_reg_1481 & and_ln102_49_fu_994_p2);

assign and_ln102_69_fu_1057_p2 = (xor_ln104_27_fu_999_p2 & icmp_ln86_57_reg_1486);

assign and_ln102_70_fu_1062_p2 = (and_ln104_10_fu_958_p2 & and_ln102_69_fu_1057_p2);

assign and_ln102_fu_588_p2 = (icmp_ln86_fu_394_p2 & icmp_ln86_31_fu_400_p2);

assign and_ln104_10_fu_958_p2 = (xor_ln104_20_fu_953_p2 & and_ln104_6_fu_927_p2);

assign and_ln104_6_fu_927_p2 = (xor_ln104_reg_1491 & xor_ln104_16_fu_922_p2);

assign and_ln104_7_fu_618_p2 = (xor_ln104_17_fu_612_p2 & and_ln102_fu_588_p2);

assign and_ln104_8_fu_636_p2 = (xor_ln104_18_fu_630_p2 & and_ln104_fu_600_p2);

assign and_ln104_9_fu_942_p2 = (xor_ln104_19_fu_937_p2 & and_ln102_38_fu_918_p2);

assign and_ln104_fu_600_p2 = (xor_ln104_15_fu_594_p2 & icmp_ln86_fu_394_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1277_p61;

assign icmp_ln86_31_fu_400_p2 = (($signed(x_49_val) < $signed(18'd144725)) ? 1'b1 : 1'b0);

assign icmp_ln86_32_fu_406_p2 = (($signed(x_46_val) < $signed(18'd265)) ? 1'b1 : 1'b0);

assign icmp_ln86_33_fu_412_p2 = (($signed(x_1_val) < $signed(18'd2636)) ? 1'b1 : 1'b0);

assign icmp_ln86_34_fu_418_p2 = (($signed(x_18_val) < $signed(18'd1298)) ? 1'b1 : 1'b0);

assign icmp_ln86_35_fu_424_p2 = (($signed(x_46_val) < $signed(18'd259)) ? 1'b1 : 1'b0);

assign icmp_ln86_36_fu_430_p2 = (($signed(x_49_val) < $signed(18'd10912)) ? 1'b1 : 1'b0);

assign icmp_ln86_37_fu_436_p2 = (($signed(x_43_val) < $signed(18'd127)) ? 1'b1 : 1'b0);

assign icmp_ln86_38_fu_442_p2 = (($signed(x_39_val) < $signed(18'd1423)) ? 1'b1 : 1'b0);

assign icmp_ln86_39_fu_448_p2 = (($signed(x_51_val) < $signed(18'd149841)) ? 1'b1 : 1'b0);

assign icmp_ln86_40_fu_454_p2 = (($signed(x_6_val) < $signed(18'd74187)) ? 1'b1 : 1'b0);

assign icmp_ln86_41_fu_470_p2 = (($signed(tmp_fu_460_p4) < $signed(15'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_42_fu_476_p2 = (($signed(x_46_val) < $signed(18'd272)) ? 1'b1 : 1'b0);

assign icmp_ln86_43_fu_482_p2 = (($signed(x_28_val) < $signed(18'd394)) ? 1'b1 : 1'b0);

assign icmp_ln86_44_fu_488_p2 = (($signed(x_19_val) < $signed(18'd453)) ? 1'b1 : 1'b0);

assign icmp_ln86_45_fu_494_p2 = (($signed(x_4_val) < $signed(18'd6358)) ? 1'b1 : 1'b0);

assign icmp_ln86_46_fu_500_p2 = (($signed(x_8_val) < $signed(18'd2991)) ? 1'b1 : 1'b0);

assign icmp_ln86_47_fu_506_p2 = (($signed(x_25_val) < $signed(18'd219)) ? 1'b1 : 1'b0);

assign icmp_ln86_48_fu_512_p2 = (($signed(x_15_val) < $signed(18'd41)) ? 1'b1 : 1'b0);

assign icmp_ln86_49_fu_518_p2 = (($signed(x_13_val) < $signed(18'd497)) ? 1'b1 : 1'b0);

assign icmp_ln86_50_fu_524_p2 = (($signed(x_31_val) < $signed(18'd3405)) ? 1'b1 : 1'b0);

assign icmp_ln86_51_fu_530_p2 = (($signed(x_38_val) < $signed(18'd46)) ? 1'b1 : 1'b0);

assign icmp_ln86_52_fu_546_p2 = (($signed(tmp_1_fu_536_p4) < $signed(16'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_53_fu_552_p2 = (($signed(x_49_val) < $signed(18'd10710)) ? 1'b1 : 1'b0);

assign icmp_ln86_54_fu_558_p2 = (($signed(x_49_val) < $signed(18'd4733)) ? 1'b1 : 1'b0);

assign icmp_ln86_55_fu_564_p2 = (($signed(x_33_val) < $signed(18'd848)) ? 1'b1 : 1'b0);

assign icmp_ln86_56_fu_570_p2 = (($signed(x_10_val) < $signed(18'd913)) ? 1'b1 : 1'b0);

assign icmp_ln86_57_fu_576_p2 = (($signed(x_37_val) < $signed(18'd22)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_394_p2 = (($signed(x_1_val) < $signed(18'd17334)) ? 1'b1 : 1'b0);

assign or_ln117_26_fu_738_p2 = (xor_ln104_fu_582_p2 | icmp_ln86_31_fu_400_p2);

assign or_ln117_27_fu_744_p2 = (or_ln117_26_fu_738_p2 | icmp_ln86_34_fu_418_p2);

assign or_ln117_28_fu_754_p2 = (and_ln104_8_fu_636_p2 | and_ln102_43_fu_642_p2);

assign or_ln117_29_fu_768_p2 = (or_ln117_28_fu_754_p2 | and_ln102_52_fu_690_p2);

assign or_ln117_30_fu_786_p2 = (and_ln104_8_fu_636_p2 | and_ln102_39_fu_606_p2);

assign or_ln117_31_fu_800_p2 = (or_ln117_30_fu_786_p2 | and_ln102_53_fu_696_p2);

assign or_ln117_32_fu_814_p2 = (or_ln117_30_fu_786_p2 | and_ln102_44_fu_654_p2);

assign or_ln117_33_fu_828_p2 = (or_ln117_32_fu_814_p2 | and_ln102_55_fu_708_p2);

assign or_ln117_34_fu_846_p2 = (and_ln104_8_fu_636_p2 | and_ln102_fu_588_p2);

assign or_ln117_35_fu_860_p2 = (or_ln117_34_fu_846_p2 | and_ln102_56_fu_714_p2);

assign or_ln117_36_fu_874_p2 = (or_ln117_34_fu_846_p2 | and_ln102_45_fu_666_p2);

assign or_ln117_37_fu_888_p2 = (or_ln117_36_fu_874_p2 | and_ln102_58_fu_726_p2);

assign or_ln117_38_fu_1068_p2 = (icmp_ln86_reg_1401 | and_ln102_59_fu_1004_p2);

assign or_ln117_39_fu_1073_p2 = (icmp_ln86_reg_1401 | and_ln102_46_fu_964_p2);

assign or_ln117_40_fu_1085_p2 = (or_ln117_39_fu_1073_p2 | and_ln102_61_fu_1014_p2);

assign or_ln117_41_fu_1103_p2 = (icmp_ln86_reg_1401 | and_ln102_41_fu_932_p2);

assign or_ln117_42_fu_1116_p2 = (or_ln117_41_fu_1103_p2 | and_ln102_62_fu_1020_p2);

assign or_ln117_43_fu_1130_p2 = (or_ln117_41_fu_1103_p2 | and_ln102_47_fu_974_p2);

assign or_ln117_44_fu_1144_p2 = (or_ln117_43_fu_1130_p2 | and_ln102_64_fu_1030_p2);

assign or_ln117_45_fu_1158_p2 = (icmp_ln86_reg_1401 | and_ln102_38_fu_918_p2);

assign or_ln117_46_fu_1171_p2 = (or_ln117_45_fu_1158_p2 | and_ln102_65_fu_1036_p2);

assign or_ln117_47_fu_1185_p2 = (or_ln117_45_fu_1158_p2 | and_ln102_48_fu_984_p2);

assign or_ln117_48_fu_1199_p2 = (or_ln117_47_fu_1185_p2 | and_ln102_67_fu_1046_p2);

assign or_ln117_49_fu_1213_p2 = (or_ln117_45_fu_1158_p2 | and_ln102_42_fu_948_p2);

assign or_ln117_50_fu_1227_p2 = (or_ln117_49_fu_1213_p2 | and_ln102_68_fu_1052_p2);

assign or_ln117_51_fu_1241_p2 = (or_ln117_49_fu_1213_p2 | and_ln102_49_fu_994_p2);

assign or_ln117_52_fu_1255_p2 = (or_ln117_51_fu_1241_p2 | and_ln102_70_fu_1062_p2);

assign or_ln117_fu_732_p2 = (and_ln104_8_fu_636_p2 | and_ln102_50_fu_678_p2);

assign select_ln117_30_fu_774_p3 = ((or_ln117_28_fu_754_p2[0:0] == 1'b1) ? select_ln117_fu_760_p3 : 2'd3);

assign select_ln117_31_fu_792_p3 = ((or_ln117_29_fu_768_p2[0:0] == 1'b1) ? zext_ln117_4_fu_782_p1 : 3'd4);

assign select_ln117_32_fu_806_p3 = ((or_ln117_30_fu_786_p2[0:0] == 1'b1) ? select_ln117_31_fu_792_p3 : 3'd5);

assign select_ln117_33_fu_820_p3 = ((or_ln117_31_fu_800_p2[0:0] == 1'b1) ? select_ln117_32_fu_806_p3 : 3'd6);

assign select_ln117_34_fu_834_p3 = ((or_ln117_32_fu_814_p2[0:0] == 1'b1) ? select_ln117_33_fu_820_p3 : 3'd7);

assign select_ln117_35_fu_852_p3 = ((or_ln117_33_fu_828_p2[0:0] == 1'b1) ? zext_ln117_5_fu_842_p1 : 4'd8);

assign select_ln117_36_fu_866_p3 = ((or_ln117_34_fu_846_p2[0:0] == 1'b1) ? select_ln117_35_fu_852_p3 : 4'd9);

assign select_ln117_37_fu_880_p3 = ((or_ln117_35_fu_860_p2[0:0] == 1'b1) ? select_ln117_36_fu_866_p3 : 4'd10);

assign select_ln117_38_fu_894_p3 = ((or_ln117_36_fu_874_p2[0:0] == 1'b1) ? select_ln117_37_fu_880_p3 : 4'd11);

assign select_ln117_39_fu_902_p3 = ((or_ln117_37_fu_888_p2[0:0] == 1'b1) ? select_ln117_38_fu_894_p3 : 4'd12);

assign select_ln117_40_fu_910_p3 = ((icmp_ln86_fu_394_p2[0:0] == 1'b1) ? select_ln117_39_fu_902_p3 : 4'd13);

assign select_ln117_41_fu_1078_p3 = ((or_ln117_38_fu_1068_p2[0:0] == 1'b1) ? select_ln117_40_reg_1497 : 4'd14);

assign select_ln117_42_fu_1091_p3 = ((or_ln117_39_fu_1073_p2[0:0] == 1'b1) ? select_ln117_41_fu_1078_p3 : 4'd15);

assign select_ln117_43_fu_1108_p3 = ((or_ln117_40_fu_1085_p2[0:0] == 1'b1) ? zext_ln117_6_fu_1099_p1 : 5'd16);

assign select_ln117_44_fu_1122_p3 = ((or_ln117_41_fu_1103_p2[0:0] == 1'b1) ? select_ln117_43_fu_1108_p3 : 5'd17);

assign select_ln117_45_fu_1136_p3 = ((or_ln117_42_fu_1116_p2[0:0] == 1'b1) ? select_ln117_44_fu_1122_p3 : 5'd18);

assign select_ln117_46_fu_1150_p3 = ((or_ln117_43_fu_1130_p2[0:0] == 1'b1) ? select_ln117_45_fu_1136_p3 : 5'd19);

assign select_ln117_47_fu_1163_p3 = ((or_ln117_44_fu_1144_p2[0:0] == 1'b1) ? select_ln117_46_fu_1150_p3 : 5'd20);

assign select_ln117_48_fu_1177_p3 = ((or_ln117_45_fu_1158_p2[0:0] == 1'b1) ? select_ln117_47_fu_1163_p3 : 5'd21);

assign select_ln117_49_fu_1191_p3 = ((or_ln117_46_fu_1171_p2[0:0] == 1'b1) ? select_ln117_48_fu_1177_p3 : 5'd22);

assign select_ln117_50_fu_1205_p3 = ((or_ln117_47_fu_1185_p2[0:0] == 1'b1) ? select_ln117_49_fu_1191_p3 : 5'd23);

assign select_ln117_51_fu_1219_p3 = ((or_ln117_48_fu_1199_p2[0:0] == 1'b1) ? select_ln117_50_fu_1205_p3 : 5'd24);

assign select_ln117_52_fu_1233_p3 = ((or_ln117_49_fu_1213_p2[0:0] == 1'b1) ? select_ln117_51_fu_1219_p3 : 5'd25);

assign select_ln117_53_fu_1247_p3 = ((or_ln117_50_fu_1227_p2[0:0] == 1'b1) ? select_ln117_52_fu_1233_p3 : 5'd26);

assign select_ln117_54_fu_1261_p3 = ((or_ln117_51_fu_1241_p2[0:0] == 1'b1) ? select_ln117_53_fu_1247_p3 : 5'd27);

assign select_ln117_fu_760_p3 = ((or_ln117_fu_732_p2[0:0] == 1'b1) ? zext_ln117_fu_750_p1 : 2'd2);

assign tmp_1_fu_536_p4 = {{x_14_val[17:2]}};

assign tmp_fu_460_p4 = {{x_14_val[17:3]}};

assign xor_ln104_15_fu_594_p2 = (icmp_ln86_31_fu_400_p2 ^ 1'd1);

assign xor_ln104_16_fu_922_p2 = (icmp_ln86_32_reg_1409 ^ 1'd1);

assign xor_ln104_17_fu_612_p2 = (icmp_ln86_33_fu_412_p2 ^ 1'd1);

assign xor_ln104_18_fu_630_p2 = (icmp_ln86_34_fu_418_p2 ^ 1'd1);

assign xor_ln104_19_fu_937_p2 = (icmp_ln86_35_reg_1415 ^ 1'd1);

assign xor_ln104_20_fu_953_p2 = (icmp_ln86_36_reg_1421 ^ 1'd1);

assign xor_ln104_21_fu_648_p2 = (icmp_ln86_37_fu_436_p2 ^ 1'd1);

assign xor_ln104_22_fu_660_p2 = (icmp_ln86_38_fu_442_p2 ^ 1'd1);

assign xor_ln104_23_fu_672_p2 = (icmp_ln86_39_fu_448_p2 ^ 1'd1);

assign xor_ln104_24_fu_969_p2 = (icmp_ln86_40_reg_1427 ^ 1'd1);

assign xor_ln104_25_fu_979_p2 = (icmp_ln86_41_reg_1433 ^ 1'd1);

assign xor_ln104_26_fu_989_p2 = (icmp_ln86_42_reg_1439 ^ 1'd1);

assign xor_ln104_27_fu_999_p2 = (icmp_ln86_43_reg_1445 ^ 1'd1);

assign xor_ln104_fu_582_p2 = (icmp_ln86_fu_394_p2 ^ 1'd1);

assign zext_ln117_4_fu_782_p1 = select_ln117_30_fu_774_p3;

assign zext_ln117_5_fu_842_p1 = select_ln117_34_fu_834_p3;

assign zext_ln117_6_fu_1099_p1 = select_ln117_42_fu_1091_p3;

assign zext_ln117_fu_750_p1 = or_ln117_27_fu_744_p2;

endmodule //my_prj_decision_function_98
