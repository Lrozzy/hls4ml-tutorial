// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_99 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_3_val,
        x_8_val,
        x_9_val,
        x_16_val,
        x_17_val,
        x_18_val,
        x_21_val,
        x_23_val,
        x_25_val,
        x_26_val,
        x_28_val,
        x_30_val,
        x_32_val,
        x_37_val,
        x_38_val,
        x_39_val,
        x_40_val,
        x_42_val,
        x_45_val,
        x_46_val,
        x_48_val,
        x_49_val,
        x_50_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_3_val;
input  [17:0] x_8_val;
input  [17:0] x_9_val;
input  [17:0] x_16_val;
input  [17:0] x_17_val;
input  [17:0] x_18_val;
input  [17:0] x_21_val;
input  [17:0] x_23_val;
input  [17:0] x_25_val;
input  [17:0] x_26_val;
input  [17:0] x_28_val;
input  [17:0] x_30_val;
input  [17:0] x_32_val;
input  [17:0] x_37_val;
input  [17:0] x_38_val;
input  [17:0] x_39_val;
input  [17:0] x_40_val;
input  [17:0] x_42_val;
input  [17:0] x_45_val;
input  [17:0] x_46_val;
input  [17:0] x_48_val;
input  [17:0] x_49_val;
input  [17:0] x_50_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_418_p2;
reg   [0:0] icmp_ln86_reg_1494;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_2_fu_430_p2;
reg   [0:0] icmp_ln86_2_reg_1503;
wire   [0:0] icmp_ln86_5_fu_448_p2;
reg   [0:0] icmp_ln86_5_reg_1509;
wire   [0:0] icmp_ln86_6_fu_454_p2;
reg   [0:0] icmp_ln86_6_reg_1515;
wire   [0:0] icmp_ln86_11_fu_484_p2;
reg   [0:0] icmp_ln86_11_reg_1521;
wire   [0:0] icmp_ln86_12_fu_500_p2;
reg   [0:0] icmp_ln86_12_reg_1527;
wire   [0:0] icmp_ln86_13_fu_506_p2;
reg   [0:0] icmp_ln86_13_reg_1533;
wire   [0:0] icmp_ln86_14_fu_512_p2;
reg   [0:0] icmp_ln86_14_reg_1539;
wire   [0:0] icmp_ln86_23_fu_566_p2;
reg   [0:0] icmp_ln86_23_reg_1545;
wire   [0:0] icmp_ln86_24_fu_572_p2;
reg   [0:0] icmp_ln86_24_reg_1550;
wire   [0:0] icmp_ln86_25_fu_578_p2;
reg   [0:0] icmp_ln86_25_reg_1555;
wire   [0:0] icmp_ln86_26_fu_584_p2;
reg   [0:0] icmp_ln86_26_reg_1560;
wire   [0:0] icmp_ln86_27_fu_590_p2;
reg   [0:0] icmp_ln86_27_reg_1565;
wire   [0:0] icmp_ln86_28_fu_596_p2;
reg   [0:0] icmp_ln86_28_reg_1570;
wire   [0:0] icmp_ln86_29_fu_602_p2;
reg   [0:0] icmp_ln86_29_reg_1575;
wire   [0:0] icmp_ln86_30_fu_608_p2;
reg   [0:0] icmp_ln86_30_reg_1580;
wire   [4:0] select_ln117_14_fu_988_p3;
reg   [4:0] select_ln117_14_reg_1585;
wire    ap_block_pp0_stage0;
wire   [16:0] tmp_fu_490_p4;
wire   [0:0] icmp_ln86_1_fu_424_p2;
wire   [0:0] xor_ln104_1_fu_620_p2;
wire   [0:0] icmp_ln86_3_fu_436_p2;
wire   [0:0] and_ln102_fu_614_p2;
wire   [0:0] xor_ln104_3_fu_638_p2;
wire   [0:0] icmp_ln86_4_fu_442_p2;
wire   [0:0] and_ln104_fu_626_p2;
wire   [0:0] xor_ln104_4_fu_656_p2;
wire   [0:0] icmp_ln86_7_fu_460_p2;
wire   [0:0] and_ln102_2_fu_632_p2;
wire   [0:0] icmp_ln86_8_fu_466_p2;
wire   [0:0] and_ln104_2_fu_644_p2;
wire   [0:0] icmp_ln86_9_fu_472_p2;
wire   [0:0] and_ln102_3_fu_650_p2;
wire   [0:0] icmp_ln86_10_fu_478_p2;
wire   [0:0] and_ln104_3_fu_662_p2;
wire   [0:0] icmp_ln86_15_fu_518_p2;
wire   [0:0] and_ln102_6_fu_668_p2;
wire   [0:0] icmp_ln86_16_fu_524_p2;
wire   [0:0] xor_ln104_7_fu_674_p2;
wire   [0:0] and_ln102_15_fu_722_p2;
wire   [0:0] icmp_ln86_17_fu_530_p2;
wire   [0:0] and_ln102_7_fu_680_p2;
wire   [0:0] icmp_ln86_18_fu_536_p2;
wire   [0:0] xor_ln104_8_fu_686_p2;
wire   [0:0] and_ln102_18_fu_740_p2;
wire   [0:0] icmp_ln86_19_fu_542_p2;
wire   [0:0] and_ln102_8_fu_692_p2;
wire   [0:0] icmp_ln86_20_fu_548_p2;
wire   [0:0] xor_ln104_9_fu_698_p2;
wire   [0:0] and_ln102_21_fu_758_p2;
wire   [0:0] icmp_ln86_21_fu_554_p2;
wire   [0:0] and_ln102_9_fu_704_p2;
wire   [0:0] icmp_ln86_22_fu_560_p2;
wire   [0:0] xor_ln104_10_fu_710_p2;
wire   [0:0] and_ln102_24_fu_776_p2;
wire   [0:0] and_ln102_14_fu_716_p2;
wire   [0:0] xor_ln117_fu_788_p2;
wire   [0:0] and_ln102_16_fu_728_p2;
wire   [1:0] zext_ln117_fu_794_p1;
wire   [0:0] or_ln117_fu_798_p2;
wire   [1:0] select_ln117_fu_804_p3;
wire   [1:0] select_ln117_1_fu_812_p3;
wire   [0:0] and_ln102_17_fu_734_p2;
wire   [2:0] zext_ln117_1_fu_820_p1;
wire   [0:0] or_ln117_1_fu_824_p2;
wire   [2:0] select_ln117_2_fu_830_p3;
wire   [0:0] or_ln117_2_fu_838_p2;
wire   [0:0] and_ln102_19_fu_746_p2;
wire   [2:0] select_ln117_3_fu_844_p3;
wire   [0:0] or_ln117_3_fu_852_p2;
wire   [2:0] select_ln117_4_fu_858_p3;
wire   [2:0] select_ln117_5_fu_866_p3;
wire   [0:0] and_ln102_20_fu_752_p2;
wire   [3:0] zext_ln117_2_fu_874_p1;
wire   [0:0] or_ln117_4_fu_878_p2;
wire   [3:0] select_ln117_6_fu_884_p3;
wire   [0:0] or_ln117_5_fu_892_p2;
wire   [0:0] and_ln102_22_fu_764_p2;
wire   [3:0] select_ln117_7_fu_898_p3;
wire   [0:0] or_ln117_6_fu_906_p2;
wire   [3:0] select_ln117_8_fu_912_p3;
wire   [0:0] or_ln117_7_fu_920_p2;
wire   [0:0] and_ln102_23_fu_770_p2;
wire   [3:0] select_ln117_9_fu_926_p3;
wire   [0:0] or_ln117_8_fu_934_p2;
wire   [3:0] select_ln117_10_fu_940_p3;
wire   [0:0] or_ln117_9_fu_948_p2;
wire   [0:0] and_ln102_25_fu_782_p2;
wire   [3:0] select_ln117_11_fu_954_p3;
wire   [0:0] or_ln117_10_fu_962_p2;
wire   [3:0] select_ln117_12_fu_968_p3;
wire   [3:0] select_ln117_13_fu_976_p3;
wire   [4:0] zext_ln117_3_fu_984_p1;
wire   [0:0] xor_ln104_fu_996_p2;
wire   [0:0] xor_ln104_2_fu_1006_p2;
wire   [0:0] and_ln102_1_fu_1001_p2;
wire   [0:0] xor_ln104_5_fu_1022_p2;
wire   [0:0] and_ln104_1_fu_1011_p2;
wire   [0:0] xor_ln104_6_fu_1038_p2;
wire   [0:0] and_ln102_4_fu_1017_p2;
wire   [0:0] and_ln104_4_fu_1027_p2;
wire   [0:0] and_ln102_5_fu_1033_p2;
wire   [0:0] and_ln104_5_fu_1043_p2;
wire   [0:0] and_ln102_10_fu_1049_p2;
wire   [0:0] xor_ln104_11_fu_1054_p2;
wire   [0:0] and_ln102_27_fu_1094_p2;
wire   [0:0] and_ln102_11_fu_1059_p2;
wire   [0:0] xor_ln104_12_fu_1064_p2;
wire   [0:0] and_ln102_30_fu_1110_p2;
wire   [0:0] and_ln102_12_fu_1069_p2;
wire   [0:0] xor_ln104_13_fu_1074_p2;
wire   [0:0] and_ln102_33_fu_1126_p2;
wire   [0:0] and_ln102_13_fu_1079_p2;
wire   [0:0] xor_ln104_14_fu_1084_p2;
wire   [0:0] and_ln102_36_fu_1142_p2;
wire   [0:0] and_ln102_26_fu_1089_p2;
wire   [0:0] or_ln117_11_fu_1153_p2;
wire   [0:0] or_ln117_12_fu_1158_p2;
wire   [0:0] and_ln102_28_fu_1099_p2;
wire   [4:0] select_ln117_15_fu_1163_p3;
wire   [0:0] or_ln117_13_fu_1170_p2;
wire   [4:0] select_ln117_16_fu_1176_p3;
wire   [0:0] or_ln117_14_fu_1184_p2;
wire   [0:0] and_ln102_29_fu_1105_p2;
wire   [4:0] select_ln117_17_fu_1189_p3;
wire   [0:0] or_ln117_15_fu_1197_p2;
wire   [4:0] select_ln117_18_fu_1203_p3;
wire   [0:0] or_ln117_16_fu_1211_p2;
wire   [0:0] and_ln102_31_fu_1115_p2;
wire   [4:0] select_ln117_19_fu_1217_p3;
wire   [0:0] or_ln117_17_fu_1225_p2;
wire   [4:0] select_ln117_20_fu_1231_p3;
wire   [0:0] or_ln117_18_fu_1239_p2;
wire   [0:0] and_ln102_32_fu_1121_p2;
wire   [4:0] select_ln117_21_fu_1244_p3;
wire   [0:0] or_ln117_19_fu_1252_p2;
wire   [4:0] select_ln117_22_fu_1258_p3;
wire   [0:0] or_ln117_20_fu_1266_p2;
wire   [0:0] and_ln102_34_fu_1131_p2;
wire   [4:0] select_ln117_23_fu_1272_p3;
wire   [0:0] or_ln117_21_fu_1280_p2;
wire   [4:0] select_ln117_24_fu_1286_p3;
wire   [0:0] or_ln117_22_fu_1294_p2;
wire   [0:0] and_ln102_35_fu_1137_p2;
wire   [4:0] select_ln117_25_fu_1300_p3;
wire   [0:0] or_ln117_23_fu_1308_p2;
wire   [4:0] select_ln117_26_fu_1314_p3;
wire   [0:0] or_ln117_24_fu_1322_p2;
wire   [0:0] and_ln102_37_fu_1147_p2;
wire   [4:0] select_ln117_27_fu_1328_p3;
wire   [0:0] or_ln117_25_fu_1336_p2;
wire   [4:0] select_ln117_28_fu_1342_p3;
wire   [11:0] agg_result_fu_1358_p65;
wire   [4:0] agg_result_fu_1358_p66;
wire   [11:0] agg_result_fu_1358_p67;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1358_p1;
wire   [4:0] agg_result_fu_1358_p3;
wire   [4:0] agg_result_fu_1358_p5;
wire   [4:0] agg_result_fu_1358_p7;
wire   [4:0] agg_result_fu_1358_p9;
wire   [4:0] agg_result_fu_1358_p11;
wire   [4:0] agg_result_fu_1358_p13;
wire   [4:0] agg_result_fu_1358_p15;
wire   [4:0] agg_result_fu_1358_p17;
wire   [4:0] agg_result_fu_1358_p19;
wire   [4:0] agg_result_fu_1358_p21;
wire   [4:0] agg_result_fu_1358_p23;
wire   [4:0] agg_result_fu_1358_p25;
wire   [4:0] agg_result_fu_1358_p27;
wire   [4:0] agg_result_fu_1358_p29;
wire   [4:0] agg_result_fu_1358_p31;
wire  signed [4:0] agg_result_fu_1358_p33;
wire  signed [4:0] agg_result_fu_1358_p35;
wire  signed [4:0] agg_result_fu_1358_p37;
wire  signed [4:0] agg_result_fu_1358_p39;
wire  signed [4:0] agg_result_fu_1358_p41;
wire  signed [4:0] agg_result_fu_1358_p43;
wire  signed [4:0] agg_result_fu_1358_p45;
wire  signed [4:0] agg_result_fu_1358_p47;
wire  signed [4:0] agg_result_fu_1358_p49;
wire  signed [4:0] agg_result_fu_1358_p51;
wire  signed [4:0] agg_result_fu_1358_p53;
wire  signed [4:0] agg_result_fu_1358_p55;
wire  signed [4:0] agg_result_fu_1358_p57;
wire  signed [4:0] agg_result_fu_1358_p59;
wire  signed [4:0] agg_result_fu_1358_p61;
wire  signed [4:0] agg_result_fu_1358_p63;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_65_5_12_1_1_x38 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 12 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 12 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 12 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 12 ),
    .CASE31( 5'h1F ),
    .din31_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_65_5_12_1_1_x38_U2541(
    .din0(12'd3951),
    .din1(12'd393),
    .din2(12'd26),
    .din3(12'd3858),
    .din4(12'd1205),
    .din5(12'd4043),
    .din6(12'd4019),
    .din7(12'd166),
    .din8(12'd3881),
    .din9(12'd127),
    .din10(12'd3854),
    .din11(12'd997),
    .din12(12'd3849),
    .din13(12'd1028),
    .din14(12'd640),
    .din15(12'd4093),
    .din16(12'd162),
    .din17(12'd3743),
    .din18(12'd38),
    .din19(12'd160),
    .din20(12'd3598),
    .din21(12'd4027),
    .din22(12'd3745),
    .din23(12'd945),
    .din24(12'd3966),
    .din25(12'd156),
    .din26(12'd4059),
    .din27(12'd244),
    .din28(12'd490),
    .din29(12'd1625),
    .din30(12'd13),
    .din31(12'd4060),
    .def(agg_result_fu_1358_p65),
    .sel(agg_result_fu_1358_p66),
    .dout(agg_result_fu_1358_p67)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_11_reg_1521 <= icmp_ln86_11_fu_484_p2;
        icmp_ln86_12_reg_1527 <= icmp_ln86_12_fu_500_p2;
        icmp_ln86_13_reg_1533 <= icmp_ln86_13_fu_506_p2;
        icmp_ln86_14_reg_1539 <= icmp_ln86_14_fu_512_p2;
        icmp_ln86_23_reg_1545 <= icmp_ln86_23_fu_566_p2;
        icmp_ln86_24_reg_1550 <= icmp_ln86_24_fu_572_p2;
        icmp_ln86_25_reg_1555 <= icmp_ln86_25_fu_578_p2;
        icmp_ln86_26_reg_1560 <= icmp_ln86_26_fu_584_p2;
        icmp_ln86_27_reg_1565 <= icmp_ln86_27_fu_590_p2;
        icmp_ln86_28_reg_1570 <= icmp_ln86_28_fu_596_p2;
        icmp_ln86_29_reg_1575 <= icmp_ln86_29_fu_602_p2;
        icmp_ln86_2_reg_1503 <= icmp_ln86_2_fu_430_p2;
        icmp_ln86_30_reg_1580 <= icmp_ln86_30_fu_608_p2;
        icmp_ln86_5_reg_1509 <= icmp_ln86_5_fu_448_p2;
        icmp_ln86_6_reg_1515 <= icmp_ln86_6_fu_454_p2;
        icmp_ln86_reg_1494 <= icmp_ln86_fu_418_p2;
        select_ln117_14_reg_1585 <= select_ln117_14_fu_988_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1358_p65 = 'bx;

assign agg_result_fu_1358_p66 = ((or_ln117_25_fu_1336_p2[0:0] == 1'b1) ? select_ln117_28_fu_1342_p3 : 5'd31);

assign and_ln102_10_fu_1049_p2 = (icmp_ln86_11_reg_1521 & and_ln102_4_fu_1017_p2);

assign and_ln102_11_fu_1059_p2 = (icmp_ln86_12_reg_1527 & and_ln104_4_fu_1027_p2);

assign and_ln102_12_fu_1069_p2 = (icmp_ln86_13_reg_1533 & and_ln102_5_fu_1033_p2);

assign and_ln102_13_fu_1079_p2 = (icmp_ln86_14_reg_1539 & and_ln104_5_fu_1043_p2);

assign and_ln102_14_fu_716_p2 = (icmp_ln86_15_fu_518_p2 & and_ln102_6_fu_668_p2);

assign and_ln102_15_fu_722_p2 = (xor_ln104_7_fu_674_p2 & icmp_ln86_16_fu_524_p2);

assign and_ln102_16_fu_728_p2 = (and_ln102_2_fu_632_p2 & and_ln102_15_fu_722_p2);

assign and_ln102_17_fu_734_p2 = (icmp_ln86_17_fu_530_p2 & and_ln102_7_fu_680_p2);

assign and_ln102_18_fu_740_p2 = (xor_ln104_8_fu_686_p2 & icmp_ln86_18_fu_536_p2);

assign and_ln102_19_fu_746_p2 = (and_ln104_2_fu_644_p2 & and_ln102_18_fu_740_p2);

assign and_ln102_1_fu_1001_p2 = (xor_ln104_fu_996_p2 & icmp_ln86_2_reg_1503);

assign and_ln102_20_fu_752_p2 = (icmp_ln86_19_fu_542_p2 & and_ln102_8_fu_692_p2);

assign and_ln102_21_fu_758_p2 = (xor_ln104_9_fu_698_p2 & icmp_ln86_20_fu_548_p2);

assign and_ln102_22_fu_764_p2 = (and_ln102_3_fu_650_p2 & and_ln102_21_fu_758_p2);

assign and_ln102_23_fu_770_p2 = (icmp_ln86_21_fu_554_p2 & and_ln102_9_fu_704_p2);

assign and_ln102_24_fu_776_p2 = (xor_ln104_10_fu_710_p2 & icmp_ln86_22_fu_560_p2);

assign and_ln102_25_fu_782_p2 = (and_ln104_3_fu_662_p2 & and_ln102_24_fu_776_p2);

assign and_ln102_26_fu_1089_p2 = (icmp_ln86_23_reg_1545 & and_ln102_10_fu_1049_p2);

assign and_ln102_27_fu_1094_p2 = (xor_ln104_11_fu_1054_p2 & icmp_ln86_24_reg_1550);

assign and_ln102_28_fu_1099_p2 = (and_ln102_4_fu_1017_p2 & and_ln102_27_fu_1094_p2);

assign and_ln102_29_fu_1105_p2 = (icmp_ln86_25_reg_1555 & and_ln102_11_fu_1059_p2);

assign and_ln102_2_fu_632_p2 = (icmp_ln86_3_fu_436_p2 & and_ln102_fu_614_p2);

assign and_ln102_30_fu_1110_p2 = (xor_ln104_12_fu_1064_p2 & icmp_ln86_26_reg_1560);

assign and_ln102_31_fu_1115_p2 = (and_ln104_4_fu_1027_p2 & and_ln102_30_fu_1110_p2);

assign and_ln102_32_fu_1121_p2 = (icmp_ln86_27_reg_1565 & and_ln102_12_fu_1069_p2);

assign and_ln102_33_fu_1126_p2 = (xor_ln104_13_fu_1074_p2 & icmp_ln86_28_reg_1570);

assign and_ln102_34_fu_1131_p2 = (and_ln102_5_fu_1033_p2 & and_ln102_33_fu_1126_p2);

assign and_ln102_35_fu_1137_p2 = (icmp_ln86_29_reg_1575 & and_ln102_13_fu_1079_p2);

assign and_ln102_36_fu_1142_p2 = (xor_ln104_14_fu_1084_p2 & icmp_ln86_30_reg_1580);

assign and_ln102_37_fu_1147_p2 = (and_ln104_5_fu_1043_p2 & and_ln102_36_fu_1142_p2);

assign and_ln102_3_fu_650_p2 = (icmp_ln86_4_fu_442_p2 & and_ln104_fu_626_p2);

assign and_ln102_4_fu_1017_p2 = (icmp_ln86_5_reg_1509 & and_ln102_1_fu_1001_p2);

assign and_ln102_5_fu_1033_p2 = (icmp_ln86_6_reg_1515 & and_ln104_1_fu_1011_p2);

assign and_ln102_6_fu_668_p2 = (icmp_ln86_7_fu_460_p2 & and_ln102_2_fu_632_p2);

assign and_ln102_7_fu_680_p2 = (icmp_ln86_8_fu_466_p2 & and_ln104_2_fu_644_p2);

assign and_ln102_8_fu_692_p2 = (icmp_ln86_9_fu_472_p2 & and_ln102_3_fu_650_p2);

assign and_ln102_9_fu_704_p2 = (icmp_ln86_10_fu_478_p2 & and_ln104_3_fu_662_p2);

assign and_ln102_fu_614_p2 = (icmp_ln86_fu_418_p2 & icmp_ln86_1_fu_424_p2);

assign and_ln104_1_fu_1011_p2 = (xor_ln104_fu_996_p2 & xor_ln104_2_fu_1006_p2);

assign and_ln104_2_fu_644_p2 = (xor_ln104_3_fu_638_p2 & and_ln102_fu_614_p2);

assign and_ln104_3_fu_662_p2 = (xor_ln104_4_fu_656_p2 & and_ln104_fu_626_p2);

assign and_ln104_4_fu_1027_p2 = (xor_ln104_5_fu_1022_p2 & and_ln102_1_fu_1001_p2);

assign and_ln104_5_fu_1043_p2 = (xor_ln104_6_fu_1038_p2 & and_ln104_1_fu_1011_p2);

assign and_ln104_fu_626_p2 = (xor_ln104_1_fu_620_p2 & icmp_ln86_fu_418_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1358_p67;

assign icmp_ln86_10_fu_478_p2 = (($signed(x_21_val) < $signed(18'd208)) ? 1'b1 : 1'b0);

assign icmp_ln86_11_fu_484_p2 = (($signed(x_9_val) < $signed(18'd320)) ? 1'b1 : 1'b0);

assign icmp_ln86_12_fu_500_p2 = (($signed(tmp_fu_490_p4) < $signed(17'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_13_fu_506_p2 = (($signed(x_21_val) < $signed(18'd322)) ? 1'b1 : 1'b0);

assign icmp_ln86_14_fu_512_p2 = (($signed(x_50_val) < $signed(18'd24958)) ? 1'b1 : 1'b0);

assign icmp_ln86_15_fu_518_p2 = (($signed(x_8_val) < $signed(18'd2288)) ? 1'b1 : 1'b0);

assign icmp_ln86_16_fu_524_p2 = (($signed(x_23_val) < $signed(18'd28)) ? 1'b1 : 1'b0);

assign icmp_ln86_17_fu_530_p2 = (($signed(x_32_val) < $signed(18'd671)) ? 1'b1 : 1'b0);

assign icmp_ln86_18_fu_536_p2 = (($signed(x_3_val) < $signed(18'd41444)) ? 1'b1 : 1'b0);

assign icmp_ln86_19_fu_542_p2 = (($signed(x_40_val) < $signed(18'd3029)) ? 1'b1 : 1'b0);

assign icmp_ln86_1_fu_424_p2 = (($signed(x_30_val) < $signed(18'd17)) ? 1'b1 : 1'b0);

assign icmp_ln86_20_fu_548_p2 = (($signed(x_16_val) < $signed(18'd80)) ? 1'b1 : 1'b0);

assign icmp_ln86_21_fu_554_p2 = (($signed(x_37_val) < $signed(18'd13)) ? 1'b1 : 1'b0);

assign icmp_ln86_22_fu_560_p2 = (($signed(x_26_val) < $signed(18'd3925)) ? 1'b1 : 1'b0);

assign icmp_ln86_23_fu_566_p2 = (($signed(x_16_val) < $signed(18'd31)) ? 1'b1 : 1'b0);

assign icmp_ln86_24_fu_572_p2 = (($signed(x_48_val) < $signed(18'd16056)) ? 1'b1 : 1'b0);

assign icmp_ln86_25_fu_578_p2 = (($signed(x_18_val) < $signed(18'd4731)) ? 1'b1 : 1'b0);

assign icmp_ln86_26_fu_584_p2 = (($signed(x_45_val) < $signed(18'd298)) ? 1'b1 : 1'b0);

assign icmp_ln86_27_fu_590_p2 = (($signed(x_40_val) < $signed(18'd2407)) ? 1'b1 : 1'b0);

assign icmp_ln86_28_fu_596_p2 = (($signed(x_32_val) < $signed(18'd804)) ? 1'b1 : 1'b0);

assign icmp_ln86_29_fu_602_p2 = (($signed(x_50_val) < $signed(18'd24588)) ? 1'b1 : 1'b0);

assign icmp_ln86_2_fu_430_p2 = (($signed(x_28_val) < $signed(18'd4865)) ? 1'b1 : 1'b0);

assign icmp_ln86_30_fu_608_p2 = (($signed(x_46_val) < $signed(18'd231)) ? 1'b1 : 1'b0);

assign icmp_ln86_3_fu_436_p2 = (($signed(x_30_val) < $signed(18'd13)) ? 1'b1 : 1'b0);

assign icmp_ln86_4_fu_442_p2 = (($signed(x_42_val) < $signed(18'd299)) ? 1'b1 : 1'b0);

assign icmp_ln86_5_fu_448_p2 = (($signed(x_39_val) < $signed(18'd2380)) ? 1'b1 : 1'b0);

assign icmp_ln86_6_fu_454_p2 = (($signed(x_38_val) < $signed(18'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_7_fu_460_p2 = (($signed(x_25_val) < $signed(18'd237)) ? 1'b1 : 1'b0);

assign icmp_ln86_8_fu_466_p2 = (($signed(x_17_val) < $signed(18'd17)) ? 1'b1 : 1'b0);

assign icmp_ln86_9_fu_472_p2 = (($signed(x_32_val) < $signed(18'd882)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_418_p2 = (($signed(x_49_val) < $signed(18'd13655)) ? 1'b1 : 1'b0);

assign or_ln117_10_fu_962_p2 = (or_ln117_9_fu_948_p2 | and_ln102_25_fu_782_p2);

assign or_ln117_11_fu_1153_p2 = (icmp_ln86_reg_1494 | and_ln102_26_fu_1089_p2);

assign or_ln117_12_fu_1158_p2 = (icmp_ln86_reg_1494 | and_ln102_10_fu_1049_p2);

assign or_ln117_13_fu_1170_p2 = (or_ln117_12_fu_1158_p2 | and_ln102_28_fu_1099_p2);

assign or_ln117_14_fu_1184_p2 = (icmp_ln86_reg_1494 | and_ln102_4_fu_1017_p2);

assign or_ln117_15_fu_1197_p2 = (or_ln117_14_fu_1184_p2 | and_ln102_29_fu_1105_p2);

assign or_ln117_16_fu_1211_p2 = (or_ln117_14_fu_1184_p2 | and_ln102_11_fu_1059_p2);

assign or_ln117_17_fu_1225_p2 = (or_ln117_16_fu_1211_p2 | and_ln102_31_fu_1115_p2);

assign or_ln117_18_fu_1239_p2 = (icmp_ln86_reg_1494 | and_ln102_1_fu_1001_p2);

assign or_ln117_19_fu_1252_p2 = (or_ln117_18_fu_1239_p2 | and_ln102_32_fu_1121_p2);

assign or_ln117_1_fu_824_p2 = (and_ln102_2_fu_632_p2 | and_ln102_17_fu_734_p2);

assign or_ln117_20_fu_1266_p2 = (or_ln117_18_fu_1239_p2 | and_ln102_12_fu_1069_p2);

assign or_ln117_21_fu_1280_p2 = (or_ln117_20_fu_1266_p2 | and_ln102_34_fu_1131_p2);

assign or_ln117_22_fu_1294_p2 = (or_ln117_18_fu_1239_p2 | and_ln102_5_fu_1033_p2);

assign or_ln117_23_fu_1308_p2 = (or_ln117_22_fu_1294_p2 | and_ln102_35_fu_1137_p2);

assign or_ln117_24_fu_1322_p2 = (or_ln117_22_fu_1294_p2 | and_ln102_13_fu_1079_p2);

assign or_ln117_25_fu_1336_p2 = (or_ln117_24_fu_1322_p2 | and_ln102_37_fu_1147_p2);

assign or_ln117_2_fu_838_p2 = (and_ln102_7_fu_680_p2 | and_ln102_2_fu_632_p2);

assign or_ln117_3_fu_852_p2 = (or_ln117_2_fu_838_p2 | and_ln102_19_fu_746_p2);

assign or_ln117_4_fu_878_p2 = (and_ln102_fu_614_p2 | and_ln102_20_fu_752_p2);

assign or_ln117_5_fu_892_p2 = (and_ln102_fu_614_p2 | and_ln102_8_fu_692_p2);

assign or_ln117_6_fu_906_p2 = (or_ln117_5_fu_892_p2 | and_ln102_22_fu_764_p2);

assign or_ln117_7_fu_920_p2 = (and_ln102_fu_614_p2 | and_ln102_3_fu_650_p2);

assign or_ln117_8_fu_934_p2 = (or_ln117_7_fu_920_p2 | and_ln102_23_fu_770_p2);

assign or_ln117_9_fu_948_p2 = (or_ln117_7_fu_920_p2 | and_ln102_9_fu_704_p2);

assign or_ln117_fu_798_p2 = (and_ln102_6_fu_668_p2 | and_ln102_16_fu_728_p2);

assign select_ln117_10_fu_940_p3 = ((or_ln117_7_fu_920_p2[0:0] == 1'b1) ? select_ln117_9_fu_926_p3 : 4'd12);

assign select_ln117_11_fu_954_p3 = ((or_ln117_8_fu_934_p2[0:0] == 1'b1) ? select_ln117_10_fu_940_p3 : 4'd13);

assign select_ln117_12_fu_968_p3 = ((or_ln117_9_fu_948_p2[0:0] == 1'b1) ? select_ln117_11_fu_954_p3 : 4'd14);

assign select_ln117_13_fu_976_p3 = ((or_ln117_10_fu_962_p2[0:0] == 1'b1) ? select_ln117_12_fu_968_p3 : 4'd15);

assign select_ln117_14_fu_988_p3 = ((icmp_ln86_fu_418_p2[0:0] == 1'b1) ? zext_ln117_3_fu_984_p1 : 5'd16);

assign select_ln117_15_fu_1163_p3 = ((or_ln117_11_fu_1153_p2[0:0] == 1'b1) ? select_ln117_14_reg_1585 : 5'd17);

assign select_ln117_16_fu_1176_p3 = ((or_ln117_12_fu_1158_p2[0:0] == 1'b1) ? select_ln117_15_fu_1163_p3 : 5'd18);

assign select_ln117_17_fu_1189_p3 = ((or_ln117_13_fu_1170_p2[0:0] == 1'b1) ? select_ln117_16_fu_1176_p3 : 5'd19);

assign select_ln117_18_fu_1203_p3 = ((or_ln117_14_fu_1184_p2[0:0] == 1'b1) ? select_ln117_17_fu_1189_p3 : 5'd20);

assign select_ln117_19_fu_1217_p3 = ((or_ln117_15_fu_1197_p2[0:0] == 1'b1) ? select_ln117_18_fu_1203_p3 : 5'd21);

assign select_ln117_1_fu_812_p3 = ((or_ln117_fu_798_p2[0:0] == 1'b1) ? select_ln117_fu_804_p3 : 2'd3);

assign select_ln117_20_fu_1231_p3 = ((or_ln117_16_fu_1211_p2[0:0] == 1'b1) ? select_ln117_19_fu_1217_p3 : 5'd22);

assign select_ln117_21_fu_1244_p3 = ((or_ln117_17_fu_1225_p2[0:0] == 1'b1) ? select_ln117_20_fu_1231_p3 : 5'd23);

assign select_ln117_22_fu_1258_p3 = ((or_ln117_18_fu_1239_p2[0:0] == 1'b1) ? select_ln117_21_fu_1244_p3 : 5'd24);

assign select_ln117_23_fu_1272_p3 = ((or_ln117_19_fu_1252_p2[0:0] == 1'b1) ? select_ln117_22_fu_1258_p3 : 5'd25);

assign select_ln117_24_fu_1286_p3 = ((or_ln117_20_fu_1266_p2[0:0] == 1'b1) ? select_ln117_23_fu_1272_p3 : 5'd26);

assign select_ln117_25_fu_1300_p3 = ((or_ln117_21_fu_1280_p2[0:0] == 1'b1) ? select_ln117_24_fu_1286_p3 : 5'd27);

assign select_ln117_26_fu_1314_p3 = ((or_ln117_22_fu_1294_p2[0:0] == 1'b1) ? select_ln117_25_fu_1300_p3 : 5'd28);

assign select_ln117_27_fu_1328_p3 = ((or_ln117_23_fu_1308_p2[0:0] == 1'b1) ? select_ln117_26_fu_1314_p3 : 5'd29);

assign select_ln117_28_fu_1342_p3 = ((or_ln117_24_fu_1322_p2[0:0] == 1'b1) ? select_ln117_27_fu_1328_p3 : 5'd30);

assign select_ln117_2_fu_830_p3 = ((and_ln102_2_fu_632_p2[0:0] == 1'b1) ? zext_ln117_1_fu_820_p1 : 3'd4);

assign select_ln117_3_fu_844_p3 = ((or_ln117_1_fu_824_p2[0:0] == 1'b1) ? select_ln117_2_fu_830_p3 : 3'd5);

assign select_ln117_4_fu_858_p3 = ((or_ln117_2_fu_838_p2[0:0] == 1'b1) ? select_ln117_3_fu_844_p3 : 3'd6);

assign select_ln117_5_fu_866_p3 = ((or_ln117_3_fu_852_p2[0:0] == 1'b1) ? select_ln117_4_fu_858_p3 : 3'd7);

assign select_ln117_6_fu_884_p3 = ((and_ln102_fu_614_p2[0:0] == 1'b1) ? zext_ln117_2_fu_874_p1 : 4'd8);

assign select_ln117_7_fu_898_p3 = ((or_ln117_4_fu_878_p2[0:0] == 1'b1) ? select_ln117_6_fu_884_p3 : 4'd9);

assign select_ln117_8_fu_912_p3 = ((or_ln117_5_fu_892_p2[0:0] == 1'b1) ? select_ln117_7_fu_898_p3 : 4'd10);

assign select_ln117_9_fu_926_p3 = ((or_ln117_6_fu_906_p2[0:0] == 1'b1) ? select_ln117_8_fu_912_p3 : 4'd11);

assign select_ln117_fu_804_p3 = ((and_ln102_6_fu_668_p2[0:0] == 1'b1) ? zext_ln117_fu_794_p1 : 2'd2);

assign tmp_fu_490_p4 = {{x_38_val[17:1]}};

assign xor_ln104_10_fu_710_p2 = (icmp_ln86_10_fu_478_p2 ^ 1'd1);

assign xor_ln104_11_fu_1054_p2 = (icmp_ln86_11_reg_1521 ^ 1'd1);

assign xor_ln104_12_fu_1064_p2 = (icmp_ln86_12_reg_1527 ^ 1'd1);

assign xor_ln104_13_fu_1074_p2 = (icmp_ln86_13_reg_1533 ^ 1'd1);

assign xor_ln104_14_fu_1084_p2 = (icmp_ln86_14_reg_1539 ^ 1'd1);

assign xor_ln104_1_fu_620_p2 = (icmp_ln86_1_fu_424_p2 ^ 1'd1);

assign xor_ln104_2_fu_1006_p2 = (icmp_ln86_2_reg_1503 ^ 1'd1);

assign xor_ln104_3_fu_638_p2 = (icmp_ln86_3_fu_436_p2 ^ 1'd1);

assign xor_ln104_4_fu_656_p2 = (icmp_ln86_4_fu_442_p2 ^ 1'd1);

assign xor_ln104_5_fu_1022_p2 = (icmp_ln86_5_reg_1509 ^ 1'd1);

assign xor_ln104_6_fu_1038_p2 = (icmp_ln86_6_reg_1515 ^ 1'd1);

assign xor_ln104_7_fu_674_p2 = (icmp_ln86_7_fu_460_p2 ^ 1'd1);

assign xor_ln104_8_fu_686_p2 = (icmp_ln86_8_fu_466_p2 ^ 1'd1);

assign xor_ln104_9_fu_698_p2 = (icmp_ln86_9_fu_472_p2 ^ 1'd1);

assign xor_ln104_fu_996_p2 = (icmp_ln86_reg_1494 ^ 1'd1);

assign xor_ln117_fu_788_p2 = (1'd1 ^ and_ln102_14_fu_716_p2);

assign zext_ln117_1_fu_820_p1 = select_ln117_1_fu_812_p3;

assign zext_ln117_2_fu_874_p1 = select_ln117_5_fu_866_p3;

assign zext_ln117_3_fu_984_p1 = select_ln117_13_fu_976_p3;

assign zext_ln117_fu_794_p1 = xor_ln117_fu_788_p2;

endmodule //my_prj_decision_function_99
