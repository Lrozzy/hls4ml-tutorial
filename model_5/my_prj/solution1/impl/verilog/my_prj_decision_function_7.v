// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_7 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_3_val,
        x_6_val,
        x_7_val,
        x_10_val,
        x_11_val,
        x_13_val,
        x_15_val,
        x_17_val,
        x_21_val,
        x_23_val,
        x_28_val,
        x_30_val,
        x_34_val,
        x_40_val,
        x_46_val,
        x_47_val,
        x_50_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_3_val;
input  [17:0] x_6_val;
input  [17:0] x_7_val;
input  [17:0] x_10_val;
input  [17:0] x_11_val;
input  [17:0] x_13_val;
input  [17:0] x_15_val;
input  [17:0] x_17_val;
input  [17:0] x_21_val;
input  [17:0] x_23_val;
input  [17:0] x_28_val;
input  [17:0] x_30_val;
input  [17:0] x_34_val;
input  [17:0] x_40_val;
input  [17:0] x_46_val;
input  [17:0] x_47_val;
input  [17:0] x_50_val;
input  [17:0] x_52_val;
output  [12:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_187_fu_424_p2;
reg   [0:0] icmp_ln86_187_reg_1311;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_188_fu_430_p2;
reg   [0:0] icmp_ln86_188_reg_1317;
wire   [0:0] icmp_ln86_189_fu_436_p2;
reg   [0:0] icmp_ln86_189_reg_1323;
wire   [0:0] icmp_ln86_197_fu_484_p2;
reg   [0:0] icmp_ln86_197_reg_1329;
wire   [0:0] icmp_ln86_198_fu_490_p2;
reg   [0:0] icmp_ln86_198_reg_1334;
wire   [0:0] icmp_ln86_199_fu_496_p2;
reg   [0:0] icmp_ln86_199_reg_1339;
wire   [0:0] icmp_ln86_860_fu_512_p2;
reg   [0:0] icmp_ln86_860_reg_1344;
wire   [0:0] icmp_ln86_201_fu_518_p2;
reg   [0:0] icmp_ln86_201_reg_1349;
wire   [0:0] icmp_ln86_202_fu_524_p2;
reg   [0:0] icmp_ln86_202_reg_1354;
wire   [0:0] and_ln104_36_fu_602_p2;
reg   [0:0] and_ln104_36_reg_1359;
wire   [0:0] and_ln102_171_fu_608_p2;
reg   [0:0] and_ln102_171_reg_1365;
wire   [0:0] and_ln102_172_fu_626_p2;
reg   [0:0] and_ln102_172_reg_1372;
wire   [0:0] or_ln117_178_fu_938_p2;
reg   [0:0] or_ln117_178_reg_1379;
wire   [3:0] select_ln117_185_fu_952_p3;
reg   [3:0] select_ln117_185_reg_1385;
wire   [0:0] or_ln117_182_fu_960_p2;
reg   [0:0] or_ln117_182_reg_1390;
wire    ap_block_pp0_stage0;
wire   [13:0] tmp_11_fu_502_p4;
wire   [0:0] icmp_ln86_fu_364_p2;
wire   [0:0] icmp_ln86_178_fu_370_p2;
wire   [0:0] xor_ln104_85_fu_542_p2;
wire   [0:0] icmp_ln86_179_fu_376_p2;
wire   [0:0] xor_ln104_fu_530_p2;
wire   [0:0] xor_ln104_86_fu_560_p2;
wire   [0:0] icmp_ln86_180_fu_382_p2;
wire   [0:0] and_ln102_fu_536_p2;
wire   [0:0] xor_ln104_87_fu_578_p2;
wire   [0:0] icmp_ln86_181_fu_388_p2;
wire   [0:0] and_ln104_fu_548_p2;
wire   [0:0] xor_ln104_88_fu_596_p2;
wire   [0:0] icmp_ln86_182_fu_394_p2;
wire   [0:0] and_ln102_168_fu_554_p2;
wire   [0:0] xor_ln104_89_fu_614_p2;
wire   [0:0] icmp_ln86_183_fu_400_p2;
wire   [0:0] and_ln104_34_fu_566_p2;
wire   [0:0] xor_ln104_90_fu_632_p2;
wire   [0:0] icmp_ln86_184_fu_406_p2;
wire   [0:0] and_ln102_169_fu_572_p2;
wire   [0:0] icmp_ln86_185_fu_412_p2;
wire   [0:0] and_ln104_35_fu_584_p2;
wire   [0:0] icmp_ln86_186_fu_418_p2;
wire   [0:0] and_ln102_170_fu_590_p2;
wire   [0:0] icmp_ln86_190_fu_442_p2;
wire   [0:0] and_ln104_38_fu_638_p2;
wire   [0:0] icmp_ln86_191_fu_448_p2;
wire   [0:0] and_ln102_173_fu_644_p2;
wire   [0:0] icmp_ln86_192_fu_454_p2;
wire   [0:0] xor_ln104_91_fu_650_p2;
wire   [0:0] and_ln102_192_fu_692_p2;
wire   [0:0] icmp_ln86_193_fu_460_p2;
wire   [0:0] and_ln102_174_fu_656_p2;
wire   [0:0] icmp_ln86_194_fu_466_p2;
wire   [0:0] xor_ln104_92_fu_662_p2;
wire   [0:0] and_ln102_193_fu_710_p2;
wire   [0:0] icmp_ln86_195_fu_472_p2;
wire   [0:0] and_ln102_175_fu_668_p2;
wire   [0:0] icmp_ln86_196_fu_478_p2;
wire   [0:0] xor_ln104_93_fu_674_p2;
wire   [0:0] and_ln102_194_fu_728_p2;
wire   [0:0] and_ln104_37_fu_620_p2;
wire   [0:0] and_ln102_179_fu_680_p2;
wire   [0:0] or_ln117_191_fu_746_p2;
wire   [0:0] or_ln117_192_fu_752_p2;
wire   [0:0] or_ln117_fu_740_p2;
wire   [1:0] zext_ln117_fu_758_p1;
wire   [0:0] or_ln117_166_fu_762_p2;
wire   [0:0] and_ln102_180_fu_686_p2;
wire   [1:0] select_ln117_fu_768_p3;
wire   [1:0] select_ln117_173_fu_782_p3;
wire   [0:0] or_ln117_167_fu_776_p2;
wire   [2:0] zext_ln117_18_fu_790_p1;
wire   [0:0] or_ln117_168_fu_794_p2;
wire   [0:0] and_ln102_181_fu_698_p2;
wire   [2:0] select_ln117_174_fu_800_p3;
wire   [0:0] or_ln117_169_fu_808_p2;
wire   [2:0] select_ln117_175_fu_814_p3;
wire   [0:0] or_ln117_170_fu_822_p2;
wire   [0:0] and_ln102_182_fu_704_p2;
wire   [2:0] select_ln117_176_fu_828_p3;
wire   [2:0] select_ln117_177_fu_842_p3;
wire   [0:0] or_ln117_171_fu_836_p2;
wire   [3:0] zext_ln117_19_fu_850_p1;
wire   [0:0] or_ln117_172_fu_854_p2;
wire   [0:0] and_ln102_183_fu_716_p2;
wire   [3:0] select_ln117_178_fu_860_p3;
wire   [0:0] or_ln117_173_fu_868_p2;
wire   [3:0] select_ln117_179_fu_874_p3;
wire   [0:0] or_ln117_174_fu_882_p2;
wire   [0:0] and_ln102_184_fu_722_p2;
wire   [3:0] select_ln117_180_fu_888_p3;
wire   [0:0] or_ln117_175_fu_896_p2;
wire   [3:0] select_ln117_181_fu_902_p3;
wire   [0:0] or_ln117_176_fu_910_p2;
wire   [0:0] and_ln102_185_fu_734_p2;
wire   [3:0] select_ln117_182_fu_916_p3;
wire   [0:0] or_ln117_177_fu_924_p2;
wire   [3:0] select_ln117_183_fu_930_p3;
wire   [3:0] select_ln117_184_fu_944_p3;
wire   [0:0] and_ln102_176_fu_966_p2;
wire   [0:0] xor_ln104_94_fu_970_p2;
wire   [0:0] and_ln102_195_fu_998_p2;
wire   [0:0] and_ln102_177_fu_975_p2;
wire   [0:0] xor_ln104_95_fu_979_p2;
wire   [0:0] and_ln102_196_fu_1013_p2;
wire   [0:0] and_ln102_178_fu_984_p2;
wire   [0:0] xor_ln104_96_fu_988_p2;
wire   [0:0] and_ln102_197_fu_1028_p2;
wire   [0:0] and_ln102_186_fu_993_p2;
wire   [0:0] or_ln117_179_fu_1038_p2;
wire   [4:0] zext_ln117_20_fu_1043_p1;
wire   [0:0] or_ln117_180_fu_1046_p2;
wire   [0:0] and_ln102_187_fu_1003_p2;
wire   [4:0] select_ln117_186_fu_1051_p3;
wire   [0:0] or_ln117_181_fu_1059_p2;
wire   [4:0] select_ln117_187_fu_1065_p3;
wire   [0:0] and_ln102_188_fu_1008_p2;
wire   [4:0] select_ln117_188_fu_1073_p3;
wire   [0:0] or_ln117_183_fu_1081_p2;
wire   [4:0] select_ln117_189_fu_1086_p3;
wire   [0:0] or_ln117_184_fu_1093_p2;
wire   [0:0] and_ln102_189_fu_1018_p2;
wire   [4:0] select_ln117_190_fu_1098_p3;
wire   [0:0] or_ln117_185_fu_1106_p2;
wire   [4:0] select_ln117_191_fu_1112_p3;
wire   [0:0] or_ln117_186_fu_1120_p2;
wire   [0:0] and_ln102_190_fu_1023_p2;
wire   [4:0] select_ln117_192_fu_1124_p3;
wire   [0:0] or_ln117_187_fu_1132_p2;
wire   [4:0] select_ln117_193_fu_1138_p3;
wire   [0:0] or_ln117_188_fu_1146_p2;
wire   [0:0] and_ln102_191_fu_1033_p2;
wire   [4:0] select_ln117_194_fu_1152_p3;
wire   [0:0] or_ln117_189_fu_1160_p2;
wire   [4:0] select_ln117_195_fu_1166_p3;
wire   [12:0] tmp_fu_1187_p55;
wire   [4:0] tmp_fu_1187_p56;
wire   [0:0] or_ln117_190_fu_1174_p2;
wire   [12:0] tmp_fu_1187_p57;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] tmp_fu_1187_p1;
wire   [4:0] tmp_fu_1187_p3;
wire   [4:0] tmp_fu_1187_p5;
wire   [4:0] tmp_fu_1187_p7;
wire   [4:0] tmp_fu_1187_p9;
wire   [4:0] tmp_fu_1187_p11;
wire   [4:0] tmp_fu_1187_p13;
wire   [4:0] tmp_fu_1187_p15;
wire   [4:0] tmp_fu_1187_p17;
wire   [4:0] tmp_fu_1187_p19;
wire   [4:0] tmp_fu_1187_p21;
wire   [4:0] tmp_fu_1187_p23;
wire   [4:0] tmp_fu_1187_p25;
wire   [4:0] tmp_fu_1187_p27;
wire   [4:0] tmp_fu_1187_p29;
wire   [4:0] tmp_fu_1187_p31;
wire  signed [4:0] tmp_fu_1187_p33;
wire  signed [4:0] tmp_fu_1187_p35;
wire  signed [4:0] tmp_fu_1187_p37;
wire  signed [4:0] tmp_fu_1187_p39;
wire  signed [4:0] tmp_fu_1187_p41;
wire  signed [4:0] tmp_fu_1187_p43;
wire  signed [4:0] tmp_fu_1187_p45;
wire  signed [4:0] tmp_fu_1187_p47;
wire  signed [4:0] tmp_fu_1187_p49;
wire  signed [4:0] tmp_fu_1187_p51;
wire  signed [4:0] tmp_fu_1187_p53;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_55_5_13_1_1_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 13 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 13 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 13 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 13 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 13 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 13 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 13 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 13 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 13 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 13 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 13 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 13 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 13 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 13 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 13 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 13 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 13 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 13 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 13 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 13 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 13 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 13 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 13 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 13 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 13 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 13 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 13 ),
    .def_WIDTH( 13 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 13 ))
sparsemux_55_5_13_1_1_x_U1955(
    .din0(13'd240),
    .din1(13'd8082),
    .din2(13'd7716),
    .din3(13'd8191),
    .din4(13'd8049),
    .din5(13'd377),
    .din6(13'd25),
    .din7(13'd7880),
    .din8(13'd693),
    .din9(13'd167),
    .din10(13'd8014),
    .din11(13'd194),
    .din12(13'd7730),
    .din13(13'd2538),
    .din14(13'd517),
    .din15(13'd130),
    .din16(13'd7662),
    .din17(13'd350),
    .din18(13'd49),
    .din19(13'd7792),
    .din20(13'd249),
    .din21(13'd7979),
    .din22(13'd7673),
    .din23(13'd946),
    .din24(13'd8000),
    .din25(13'd1973),
    .din26(13'd124),
    .def(tmp_fu_1187_p55),
    .sel(tmp_fu_1187_p56),
    .dout(tmp_fu_1187_p57)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln102_171_reg_1365 <= and_ln102_171_fu_608_p2;
        and_ln102_172_reg_1372 <= and_ln102_172_fu_626_p2;
        and_ln104_36_reg_1359 <= and_ln104_36_fu_602_p2;
        icmp_ln86_187_reg_1311 <= icmp_ln86_187_fu_424_p2;
        icmp_ln86_188_reg_1317 <= icmp_ln86_188_fu_430_p2;
        icmp_ln86_189_reg_1323 <= icmp_ln86_189_fu_436_p2;
        icmp_ln86_197_reg_1329 <= icmp_ln86_197_fu_484_p2;
        icmp_ln86_198_reg_1334 <= icmp_ln86_198_fu_490_p2;
        icmp_ln86_199_reg_1339 <= icmp_ln86_199_fu_496_p2;
        icmp_ln86_201_reg_1349 <= icmp_ln86_201_fu_518_p2;
        icmp_ln86_202_reg_1354 <= icmp_ln86_202_fu_524_p2;
        icmp_ln86_860_reg_1344 <= icmp_ln86_860_fu_512_p2;
        or_ln117_178_reg_1379 <= or_ln117_178_fu_938_p2;
        or_ln117_182_reg_1390 <= or_ln117_182_fu_960_p2;
        select_ln117_185_reg_1385 <= select_ln117_185_fu_952_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln102_168_fu_554_p2 = (xor_ln104_fu_530_p2 & icmp_ln86_179_fu_376_p2);

assign and_ln102_169_fu_572_p2 = (icmp_ln86_180_fu_382_p2 & and_ln102_fu_536_p2);

assign and_ln102_170_fu_590_p2 = (icmp_ln86_181_fu_388_p2 & and_ln104_fu_548_p2);

assign and_ln102_171_fu_608_p2 = (icmp_ln86_182_fu_394_p2 & and_ln102_168_fu_554_p2);

assign and_ln102_172_fu_626_p2 = (icmp_ln86_183_fu_400_p2 & and_ln104_34_fu_566_p2);

assign and_ln102_173_fu_644_p2 = (icmp_ln86_184_fu_406_p2 & and_ln102_169_fu_572_p2);

assign and_ln102_174_fu_656_p2 = (icmp_ln86_185_fu_412_p2 & and_ln104_35_fu_584_p2);

assign and_ln102_175_fu_668_p2 = (icmp_ln86_186_fu_418_p2 & and_ln102_170_fu_590_p2);

assign and_ln102_176_fu_966_p2 = (icmp_ln86_187_reg_1311 & and_ln104_36_reg_1359);

assign and_ln102_177_fu_975_p2 = (icmp_ln86_188_reg_1317 & and_ln102_171_reg_1365);

assign and_ln102_178_fu_984_p2 = (icmp_ln86_189_reg_1323 & and_ln102_172_reg_1372);

assign and_ln102_179_fu_680_p2 = (icmp_ln86_190_fu_442_p2 & and_ln104_38_fu_638_p2);

assign and_ln102_180_fu_686_p2 = (icmp_ln86_191_fu_448_p2 & and_ln102_173_fu_644_p2);

assign and_ln102_181_fu_698_p2 = (and_ln102_192_fu_692_p2 & and_ln102_169_fu_572_p2);

assign and_ln102_182_fu_704_p2 = (icmp_ln86_193_fu_460_p2 & and_ln102_174_fu_656_p2);

assign and_ln102_183_fu_716_p2 = (and_ln104_35_fu_584_p2 & and_ln102_193_fu_710_p2);

assign and_ln102_184_fu_722_p2 = (icmp_ln86_195_fu_472_p2 & and_ln102_175_fu_668_p2);

assign and_ln102_185_fu_734_p2 = (and_ln102_194_fu_728_p2 & and_ln102_170_fu_590_p2);

assign and_ln102_186_fu_993_p2 = (icmp_ln86_197_reg_1329 & and_ln102_176_fu_966_p2);

assign and_ln102_187_fu_1003_p2 = (and_ln104_36_reg_1359 & and_ln102_195_fu_998_p2);

assign and_ln102_188_fu_1008_p2 = (icmp_ln86_199_reg_1339 & and_ln102_177_fu_975_p2);

assign and_ln102_189_fu_1018_p2 = (and_ln102_196_fu_1013_p2 & and_ln102_171_reg_1365);

assign and_ln102_190_fu_1023_p2 = (icmp_ln86_201_reg_1349 & and_ln102_178_fu_984_p2);

assign and_ln102_191_fu_1033_p2 = (and_ln102_197_fu_1028_p2 & and_ln102_172_reg_1372);

assign and_ln102_192_fu_692_p2 = (xor_ln104_91_fu_650_p2 & icmp_ln86_192_fu_454_p2);

assign and_ln102_193_fu_710_p2 = (xor_ln104_92_fu_662_p2 & icmp_ln86_194_fu_466_p2);

assign and_ln102_194_fu_728_p2 = (xor_ln104_93_fu_674_p2 & icmp_ln86_196_fu_478_p2);

assign and_ln102_195_fu_998_p2 = (xor_ln104_94_fu_970_p2 & icmp_ln86_198_reg_1334);

assign and_ln102_196_fu_1013_p2 = (xor_ln104_95_fu_979_p2 & icmp_ln86_860_reg_1344);

assign and_ln102_197_fu_1028_p2 = (xor_ln104_96_fu_988_p2 & icmp_ln86_202_reg_1354);

assign and_ln102_fu_536_p2 = (icmp_ln86_fu_364_p2 & icmp_ln86_178_fu_370_p2);

assign and_ln104_34_fu_566_p2 = (xor_ln104_fu_530_p2 & xor_ln104_86_fu_560_p2);

assign and_ln104_35_fu_584_p2 = (xor_ln104_87_fu_578_p2 & and_ln102_fu_536_p2);

assign and_ln104_36_fu_602_p2 = (xor_ln104_88_fu_596_p2 & and_ln104_fu_548_p2);

assign and_ln104_37_fu_620_p2 = (xor_ln104_89_fu_614_p2 & and_ln102_168_fu_554_p2);

assign and_ln104_38_fu_638_p2 = (xor_ln104_90_fu_632_p2 & and_ln104_34_fu_566_p2);

assign and_ln104_fu_548_p2 = (xor_ln104_85_fu_542_p2 & icmp_ln86_fu_364_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((or_ln117_190_fu_1174_p2[0:0] == 1'b1) ? tmp_fu_1187_p57 : 13'd0);

assign icmp_ln86_178_fu_370_p2 = (($signed(x_6_val) < $signed(18'd25437)) ? 1'b1 : 1'b0);

assign icmp_ln86_179_fu_376_p2 = (($signed(x_1_val) < $signed(18'd101140)) ? 1'b1 : 1'b0);

assign icmp_ln86_180_fu_382_p2 = (($signed(x_52_val) < $signed(18'd73217)) ? 1'b1 : 1'b0);

assign icmp_ln86_181_fu_388_p2 = (($signed(x_6_val) < $signed(18'd25609)) ? 1'b1 : 1'b0);

assign icmp_ln86_182_fu_394_p2 = (($signed(x_23_val) < $signed(18'd97)) ? 1'b1 : 1'b0);

assign icmp_ln86_183_fu_400_p2 = (($signed(x_11_val) < $signed(18'd623)) ? 1'b1 : 1'b0);

assign icmp_ln86_184_fu_406_p2 = (($signed(x_50_val) < $signed(18'd87833)) ? 1'b1 : 1'b0);

assign icmp_ln86_185_fu_412_p2 = (($signed(x_15_val) < $signed(18'd6)) ? 1'b1 : 1'b0);

assign icmp_ln86_186_fu_418_p2 = (($signed(x_21_val) < $signed(18'd257)) ? 1'b1 : 1'b0);

assign icmp_ln86_187_fu_424_p2 = (($signed(x_50_val) < $signed(18'd72258)) ? 1'b1 : 1'b0);

assign icmp_ln86_188_fu_430_p2 = (($signed(x_13_val) < $signed(18'd478)) ? 1'b1 : 1'b0);

assign icmp_ln86_189_fu_436_p2 = (($signed(x_10_val) < $signed(18'd752)) ? 1'b1 : 1'b0);

assign icmp_ln86_190_fu_442_p2 = (($signed(x_10_val) < $signed(18'd706)) ? 1'b1 : 1'b0);

assign icmp_ln86_191_fu_448_p2 = (($signed(x_47_val) < $signed(18'd87183)) ? 1'b1 : 1'b0);

assign icmp_ln86_192_fu_454_p2 = (($signed(x_7_val) < $signed(18'd6244)) ? 1'b1 : 1'b0);

assign icmp_ln86_193_fu_460_p2 = (($signed(x_46_val) < $signed(18'd303)) ? 1'b1 : 1'b0);

assign icmp_ln86_194_fu_466_p2 = (($signed(x_30_val) < $signed(18'd1238)) ? 1'b1 : 1'b0);

assign icmp_ln86_195_fu_472_p2 = (($signed(x_28_val) < $signed(18'd19307)) ? 1'b1 : 1'b0);

assign icmp_ln86_196_fu_478_p2 = (($signed(x_13_val) < $signed(18'd471)) ? 1'b1 : 1'b0);

assign icmp_ln86_197_fu_484_p2 = (($signed(x_10_val) < $signed(18'd689)) ? 1'b1 : 1'b0);

assign icmp_ln86_198_fu_490_p2 = (($signed(x_3_val) < $signed(18'd81945)) ? 1'b1 : 1'b0);

assign icmp_ln86_199_fu_496_p2 = (($signed(x_34_val) < $signed(18'd467)) ? 1'b1 : 1'b0);

assign icmp_ln86_201_fu_518_p2 = (($signed(x_6_val) < $signed(18'd31907)) ? 1'b1 : 1'b0);

assign icmp_ln86_202_fu_524_p2 = (($signed(x_40_val) < $signed(18'd1405)) ? 1'b1 : 1'b0);

assign icmp_ln86_860_fu_512_p2 = (($signed(tmp_11_fu_502_p4) < $signed(14'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_364_p2 = (($signed(x_52_val) < $signed(18'd96769)) ? 1'b1 : 1'b0);

assign or_ln117_166_fu_762_p2 = (and_ln104_38_fu_638_p2 | and_ln104_37_fu_620_p2);

assign or_ln117_167_fu_776_p2 = (or_ln117_166_fu_762_p2 | and_ln102_180_fu_686_p2);

assign or_ln117_168_fu_794_p2 = (or_ln117_166_fu_762_p2 | and_ln102_173_fu_644_p2);

assign or_ln117_169_fu_808_p2 = (or_ln117_168_fu_794_p2 | and_ln102_181_fu_698_p2);

assign or_ln117_170_fu_822_p2 = (or_ln117_166_fu_762_p2 | and_ln102_169_fu_572_p2);

assign or_ln117_171_fu_836_p2 = (or_ln117_170_fu_822_p2 | and_ln102_182_fu_704_p2);

assign or_ln117_172_fu_854_p2 = (or_ln117_170_fu_822_p2 | and_ln102_174_fu_656_p2);

assign or_ln117_173_fu_868_p2 = (or_ln117_172_fu_854_p2 | and_ln102_183_fu_716_p2);

assign or_ln117_174_fu_882_p2 = (or_ln117_166_fu_762_p2 | and_ln102_fu_536_p2);

assign or_ln117_175_fu_896_p2 = (or_ln117_174_fu_882_p2 | and_ln102_184_fu_722_p2);

assign or_ln117_176_fu_910_p2 = (or_ln117_174_fu_882_p2 | and_ln102_175_fu_668_p2);

assign or_ln117_177_fu_924_p2 = (or_ln117_176_fu_910_p2 | and_ln102_185_fu_734_p2);

assign or_ln117_178_fu_938_p2 = (or_ln117_174_fu_882_p2 | and_ln102_170_fu_590_p2);

assign or_ln117_179_fu_1038_p2 = (or_ln117_178_reg_1379 | and_ln102_186_fu_993_p2);

assign or_ln117_180_fu_1046_p2 = (or_ln117_178_reg_1379 | and_ln102_176_fu_966_p2);

assign or_ln117_181_fu_1059_p2 = (or_ln117_180_fu_1046_p2 | and_ln102_187_fu_1003_p2);

assign or_ln117_182_fu_960_p2 = (or_ln117_166_fu_762_p2 | icmp_ln86_fu_364_p2);

assign or_ln117_183_fu_1081_p2 = (or_ln117_182_reg_1390 | and_ln102_188_fu_1008_p2);

assign or_ln117_184_fu_1093_p2 = (or_ln117_182_reg_1390 | and_ln102_177_fu_975_p2);

assign or_ln117_185_fu_1106_p2 = (or_ln117_184_fu_1093_p2 | and_ln102_189_fu_1018_p2);

assign or_ln117_186_fu_1120_p2 = (or_ln117_182_reg_1390 | and_ln102_171_reg_1365);

assign or_ln117_187_fu_1132_p2 = (or_ln117_186_fu_1120_p2 | and_ln102_190_fu_1023_p2);

assign or_ln117_188_fu_1146_p2 = (or_ln117_186_fu_1120_p2 | and_ln102_178_fu_984_p2);

assign or_ln117_189_fu_1160_p2 = (or_ln117_188_fu_1146_p2 | and_ln102_191_fu_1033_p2);

assign or_ln117_190_fu_1174_p2 = (or_ln117_186_fu_1120_p2 | and_ln102_172_reg_1372);

assign or_ln117_191_fu_746_p2 = (xor_ln104_86_fu_560_p2 | icmp_ln86_fu_364_p2);

assign or_ln117_192_fu_752_p2 = (or_ln117_191_fu_746_p2 | icmp_ln86_182_fu_394_p2);

assign or_ln117_fu_740_p2 = (and_ln104_37_fu_620_p2 | and_ln102_179_fu_680_p2);

assign select_ln117_173_fu_782_p3 = ((or_ln117_166_fu_762_p2[0:0] == 1'b1) ? select_ln117_fu_768_p3 : 2'd3);

assign select_ln117_174_fu_800_p3 = ((or_ln117_167_fu_776_p2[0:0] == 1'b1) ? zext_ln117_18_fu_790_p1 : 3'd4);

assign select_ln117_175_fu_814_p3 = ((or_ln117_168_fu_794_p2[0:0] == 1'b1) ? select_ln117_174_fu_800_p3 : 3'd5);

assign select_ln117_176_fu_828_p3 = ((or_ln117_169_fu_808_p2[0:0] == 1'b1) ? select_ln117_175_fu_814_p3 : 3'd6);

assign select_ln117_177_fu_842_p3 = ((or_ln117_170_fu_822_p2[0:0] == 1'b1) ? select_ln117_176_fu_828_p3 : 3'd7);

assign select_ln117_178_fu_860_p3 = ((or_ln117_171_fu_836_p2[0:0] == 1'b1) ? zext_ln117_19_fu_850_p1 : 4'd8);

assign select_ln117_179_fu_874_p3 = ((or_ln117_172_fu_854_p2[0:0] == 1'b1) ? select_ln117_178_fu_860_p3 : 4'd9);

assign select_ln117_180_fu_888_p3 = ((or_ln117_173_fu_868_p2[0:0] == 1'b1) ? select_ln117_179_fu_874_p3 : 4'd10);

assign select_ln117_181_fu_902_p3 = ((or_ln117_174_fu_882_p2[0:0] == 1'b1) ? select_ln117_180_fu_888_p3 : 4'd11);

assign select_ln117_182_fu_916_p3 = ((or_ln117_175_fu_896_p2[0:0] == 1'b1) ? select_ln117_181_fu_902_p3 : 4'd12);

assign select_ln117_183_fu_930_p3 = ((or_ln117_176_fu_910_p2[0:0] == 1'b1) ? select_ln117_182_fu_916_p3 : 4'd13);

assign select_ln117_184_fu_944_p3 = ((or_ln117_177_fu_924_p2[0:0] == 1'b1) ? select_ln117_183_fu_930_p3 : 4'd14);

assign select_ln117_185_fu_952_p3 = ((or_ln117_178_fu_938_p2[0:0] == 1'b1) ? select_ln117_184_fu_944_p3 : 4'd15);

assign select_ln117_186_fu_1051_p3 = ((or_ln117_179_fu_1038_p2[0:0] == 1'b1) ? zext_ln117_20_fu_1043_p1 : 5'd16);

assign select_ln117_187_fu_1065_p3 = ((or_ln117_180_fu_1046_p2[0:0] == 1'b1) ? select_ln117_186_fu_1051_p3 : 5'd17);

assign select_ln117_188_fu_1073_p3 = ((or_ln117_181_fu_1059_p2[0:0] == 1'b1) ? select_ln117_187_fu_1065_p3 : 5'd18);

assign select_ln117_189_fu_1086_p3 = ((or_ln117_182_reg_1390[0:0] == 1'b1) ? select_ln117_188_fu_1073_p3 : 5'd19);

assign select_ln117_190_fu_1098_p3 = ((or_ln117_183_fu_1081_p2[0:0] == 1'b1) ? select_ln117_189_fu_1086_p3 : 5'd20);

assign select_ln117_191_fu_1112_p3 = ((or_ln117_184_fu_1093_p2[0:0] == 1'b1) ? select_ln117_190_fu_1098_p3 : 5'd21);

assign select_ln117_192_fu_1124_p3 = ((or_ln117_185_fu_1106_p2[0:0] == 1'b1) ? select_ln117_191_fu_1112_p3 : 5'd22);

assign select_ln117_193_fu_1138_p3 = ((or_ln117_186_fu_1120_p2[0:0] == 1'b1) ? select_ln117_192_fu_1124_p3 : 5'd23);

assign select_ln117_194_fu_1152_p3 = ((or_ln117_187_fu_1132_p2[0:0] == 1'b1) ? select_ln117_193_fu_1138_p3 : 5'd24);

assign select_ln117_195_fu_1166_p3 = ((or_ln117_188_fu_1146_p2[0:0] == 1'b1) ? select_ln117_194_fu_1152_p3 : 5'd25);

assign select_ln117_fu_768_p3 = ((or_ln117_fu_740_p2[0:0] == 1'b1) ? zext_ln117_fu_758_p1 : 2'd2);

assign tmp_11_fu_502_p4 = {{x_17_val[17:4]}};

assign tmp_fu_1187_p55 = 'bx;

assign tmp_fu_1187_p56 = ((or_ln117_189_fu_1160_p2[0:0] == 1'b1) ? select_ln117_195_fu_1166_p3 : 5'd26);

assign xor_ln104_85_fu_542_p2 = (icmp_ln86_178_fu_370_p2 ^ 1'd1);

assign xor_ln104_86_fu_560_p2 = (icmp_ln86_179_fu_376_p2 ^ 1'd1);

assign xor_ln104_87_fu_578_p2 = (icmp_ln86_180_fu_382_p2 ^ 1'd1);

assign xor_ln104_88_fu_596_p2 = (icmp_ln86_181_fu_388_p2 ^ 1'd1);

assign xor_ln104_89_fu_614_p2 = (icmp_ln86_182_fu_394_p2 ^ 1'd1);

assign xor_ln104_90_fu_632_p2 = (icmp_ln86_183_fu_400_p2 ^ 1'd1);

assign xor_ln104_91_fu_650_p2 = (icmp_ln86_184_fu_406_p2 ^ 1'd1);

assign xor_ln104_92_fu_662_p2 = (icmp_ln86_185_fu_412_p2 ^ 1'd1);

assign xor_ln104_93_fu_674_p2 = (icmp_ln86_186_fu_418_p2 ^ 1'd1);

assign xor_ln104_94_fu_970_p2 = (icmp_ln86_187_reg_1311 ^ 1'd1);

assign xor_ln104_95_fu_979_p2 = (icmp_ln86_188_reg_1317 ^ 1'd1);

assign xor_ln104_96_fu_988_p2 = (icmp_ln86_189_reg_1323 ^ 1'd1);

assign xor_ln104_fu_530_p2 = (icmp_ln86_fu_364_p2 ^ 1'd1);

assign zext_ln117_18_fu_790_p1 = select_ln117_173_fu_782_p3;

assign zext_ln117_19_fu_850_p1 = select_ln117_177_fu_842_p3;

assign zext_ln117_20_fu_1043_p1 = select_ln117_185_reg_1385;

assign zext_ln117_fu_758_p1 = or_ln117_192_fu_752_p2;

endmodule //my_prj_decision_function_7
