// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_97 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_2_val,
        x_4_val,
        x_12_val,
        x_13_val,
        x_15_val,
        x_16_val,
        x_17_val,
        x_18_val,
        x_19_val,
        x_22_val,
        x_27_val,
        x_28_val,
        x_29_val,
        x_31_val,
        x_32_val,
        x_38_val,
        x_39_val,
        x_44_val,
        x_46_val,
        x_49_val,
        x_51_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_2_val;
input  [17:0] x_4_val;
input  [17:0] x_12_val;
input  [17:0] x_13_val;
input  [17:0] x_15_val;
input  [17:0] x_16_val;
input  [17:0] x_17_val;
input  [17:0] x_18_val;
input  [17:0] x_19_val;
input  [17:0] x_22_val;
input  [17:0] x_27_val;
input  [17:0] x_28_val;
input  [17:0] x_29_val;
input  [17:0] x_31_val;
input  [17:0] x_32_val;
input  [17:0] x_38_val;
input  [17:0] x_39_val;
input  [17:0] x_44_val;
input  [17:0] x_46_val;
input  [17:0] x_49_val;
input  [17:0] x_51_val;
input  [17:0] x_52_val;
output  [12:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_416_p2;
reg   [0:0] icmp_ln86_reg_1496;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_59_fu_428_p2;
reg   [0:0] icmp_ln86_59_reg_1501;
wire   [0:0] icmp_ln86_62_fu_446_p2;
reg   [0:0] icmp_ln86_62_reg_1507;
wire   [0:0] icmp_ln86_63_fu_452_p2;
reg   [0:0] icmp_ln86_63_reg_1513;
wire   [0:0] icmp_ln86_68_fu_482_p2;
reg   [0:0] icmp_ln86_68_reg_1519;
reg   [0:0] tmp_2_reg_1525;
wire   [0:0] icmp_ln86_69_fu_496_p2;
reg   [0:0] icmp_ln86_69_reg_1532;
wire   [0:0] icmp_ln86_78_fu_550_p2;
reg   [0:0] icmp_ln86_78_reg_1538;
wire   [0:0] icmp_ln86_79_fu_556_p2;
reg   [0:0] icmp_ln86_79_reg_1543;
wire   [0:0] icmp_ln86_80_fu_562_p2;
reg   [0:0] icmp_ln86_80_reg_1548;
wire   [0:0] icmp_ln86_81_fu_578_p2;
reg   [0:0] icmp_ln86_81_reg_1553;
wire   [0:0] icmp_ln86_82_fu_584_p2;
reg   [0:0] icmp_ln86_82_reg_1558;
wire   [0:0] icmp_ln86_83_fu_590_p2;
reg   [0:0] icmp_ln86_83_reg_1563;
wire   [0:0] icmp_ln86_84_fu_596_p2;
reg   [0:0] icmp_ln86_84_reg_1568;
wire   [0:0] icmp_ln86_85_fu_602_p2;
reg   [0:0] icmp_ln86_85_reg_1573;
wire   [0:0] or_ln117_63_fu_964_p2;
reg   [0:0] or_ln117_63_reg_1578;
wire   [4:0] select_ln117_69_fu_982_p3;
reg   [4:0] select_ln117_69_reg_1587;
wire    ap_block_pp0_stage0;
wire   [15:0] tmp_3_fu_568_p4;
wire   [0:0] icmp_ln86_58_fu_422_p2;
wire   [0:0] xor_ln104_28_fu_608_p2;
wire   [0:0] icmp_ln86_60_fu_434_p2;
wire   [0:0] xor_ln104_30_fu_626_p2;
wire   [0:0] icmp_ln86_61_fu_440_p2;
wire   [0:0] and_ln104_fu_614_p2;
wire   [0:0] xor_ln104_31_fu_644_p2;
wire   [0:0] icmp_ln86_64_fu_458_p2;
wire   [0:0] and_ln102_71_fu_620_p2;
wire   [0:0] icmp_ln86_65_fu_464_p2;
wire   [0:0] and_ln104_12_fu_632_p2;
wire   [0:0] icmp_ln86_66_fu_470_p2;
wire   [0:0] and_ln102_72_fu_638_p2;
wire   [0:0] icmp_ln86_67_fu_476_p2;
wire   [0:0] and_ln104_13_fu_650_p2;
wire   [0:0] icmp_ln86_70_fu_502_p2;
wire   [0:0] and_ln102_75_fu_656_p2;
wire   [0:0] icmp_ln86_71_fu_508_p2;
wire   [0:0] xor_ln104_34_fu_662_p2;
wire   [0:0] and_ln102_84_fu_710_p2;
wire   [0:0] icmp_ln86_72_fu_514_p2;
wire   [0:0] and_ln102_76_fu_668_p2;
wire   [0:0] icmp_ln86_73_fu_520_p2;
wire   [0:0] xor_ln104_35_fu_674_p2;
wire   [0:0] and_ln102_87_fu_728_p2;
wire   [0:0] icmp_ln86_74_fu_526_p2;
wire   [0:0] and_ln102_77_fu_680_p2;
wire   [0:0] icmp_ln86_75_fu_532_p2;
wire   [0:0] xor_ln104_36_fu_686_p2;
wire   [0:0] and_ln102_90_fu_746_p2;
wire   [0:0] icmp_ln86_76_fu_538_p2;
wire   [0:0] and_ln102_78_fu_692_p2;
wire   [0:0] icmp_ln86_77_fu_544_p2;
wire   [0:0] xor_ln104_37_fu_698_p2;
wire   [0:0] and_ln102_93_fu_764_p2;
wire   [0:0] and_ln102_83_fu_704_p2;
wire   [0:0] xor_ln117_fu_776_p2;
wire   [0:0] and_ln102_85_fu_716_p2;
wire   [1:0] zext_ln117_fu_782_p1;
wire   [0:0] or_ln117_fu_786_p2;
wire   [1:0] select_ln117_fu_792_p3;
wire   [1:0] select_ln117_56_fu_800_p3;
wire   [0:0] and_ln102_86_fu_722_p2;
wire   [2:0] zext_ln117_7_fu_808_p1;
wire   [0:0] or_ln117_53_fu_812_p2;
wire   [2:0] select_ln117_57_fu_818_p3;
wire   [0:0] or_ln117_54_fu_826_p2;
wire   [0:0] and_ln102_88_fu_734_p2;
wire   [2:0] select_ln117_58_fu_832_p3;
wire   [0:0] or_ln117_55_fu_840_p2;
wire   [2:0] select_ln117_59_fu_846_p3;
wire   [2:0] select_ln117_60_fu_854_p3;
wire   [0:0] and_ln102_89_fu_740_p2;
wire   [3:0] zext_ln117_8_fu_862_p1;
wire   [0:0] or_ln117_56_fu_866_p2;
wire   [3:0] select_ln117_61_fu_872_p3;
wire   [0:0] or_ln117_57_fu_880_p2;
wire   [0:0] and_ln102_91_fu_752_p2;
wire   [3:0] select_ln117_62_fu_886_p3;
wire   [0:0] or_ln117_58_fu_894_p2;
wire   [3:0] select_ln117_63_fu_900_p3;
wire   [0:0] or_ln117_59_fu_908_p2;
wire   [0:0] and_ln102_92_fu_758_p2;
wire   [3:0] select_ln117_64_fu_914_p3;
wire   [0:0] or_ln117_60_fu_922_p2;
wire   [3:0] select_ln117_65_fu_928_p3;
wire   [0:0] or_ln117_61_fu_936_p2;
wire   [0:0] and_ln102_94_fu_770_p2;
wire   [3:0] select_ln117_66_fu_942_p3;
wire   [0:0] or_ln117_62_fu_950_p2;
wire   [3:0] select_ln117_67_fu_956_p3;
wire   [3:0] select_ln117_68_fu_970_p3;
wire   [4:0] zext_ln117_9_fu_978_p1;
wire   [0:0] xor_ln104_fu_990_p2;
wire   [0:0] xor_ln104_29_fu_1000_p2;
wire   [0:0] and_ln102_fu_995_p2;
wire   [0:0] xor_ln104_32_fu_1016_p2;
wire   [0:0] and_ln104_11_fu_1005_p2;
wire   [0:0] xor_ln104_33_fu_1032_p2;
wire   [0:0] and_ln102_73_fu_1011_p2;
wire   [0:0] and_ln104_14_fu_1021_p2;
wire   [0:0] and_ln102_74_fu_1027_p2;
wire   [0:0] and_ln104_15_fu_1037_p2;
wire   [0:0] and_ln102_79_fu_1043_p2;
wire   [0:0] xor_ln104_38_fu_1048_p2;
wire   [0:0] and_ln102_96_fu_1083_p2;
wire   [0:0] and_ln102_80_fu_1053_p2;
wire   [0:0] xor_ln104_39_fu_1058_p2;
wire   [0:0] and_ln102_99_fu_1099_p2;
wire   [0:0] and_ln102_81_fu_1063_p2;
wire   [0:0] and_ln102_102_fu_1115_p2;
wire   [0:0] and_ln102_82_fu_1068_p2;
wire   [0:0] xor_ln104_40_fu_1073_p2;
wire   [0:0] and_ln102_105_fu_1131_p2;
wire   [0:0] and_ln102_95_fu_1078_p2;
wire   [0:0] or_ln117_64_fu_1142_p2;
wire   [0:0] or_ln117_65_fu_1147_p2;
wire   [0:0] and_ln102_97_fu_1088_p2;
wire   [4:0] select_ln117_70_fu_1152_p3;
wire   [0:0] or_ln117_66_fu_1159_p2;
wire   [4:0] select_ln117_71_fu_1165_p3;
wire   [0:0] or_ln117_67_fu_1173_p2;
wire   [0:0] and_ln102_98_fu_1094_p2;
wire   [4:0] select_ln117_72_fu_1178_p3;
wire   [0:0] or_ln117_68_fu_1186_p2;
wire   [4:0] select_ln117_73_fu_1192_p3;
wire   [0:0] or_ln117_69_fu_1200_p2;
wire   [0:0] and_ln102_100_fu_1104_p2;
wire   [4:0] select_ln117_74_fu_1206_p3;
wire   [0:0] or_ln117_70_fu_1214_p2;
wire   [4:0] select_ln117_75_fu_1220_p3;
wire   [0:0] or_ln117_71_fu_1228_p2;
wire   [0:0] and_ln102_101_fu_1110_p2;
wire   [4:0] select_ln117_76_fu_1233_p3;
wire   [0:0] or_ln117_72_fu_1241_p2;
wire   [4:0] select_ln117_77_fu_1247_p3;
wire   [0:0] or_ln117_73_fu_1255_p2;
wire   [0:0] and_ln102_103_fu_1120_p2;
wire   [4:0] select_ln117_78_fu_1261_p3;
wire   [0:0] or_ln117_74_fu_1269_p2;
wire   [4:0] select_ln117_79_fu_1275_p3;
wire   [0:0] or_ln117_75_fu_1283_p2;
wire   [0:0] and_ln102_104_fu_1126_p2;
wire   [4:0] select_ln117_80_fu_1289_p3;
wire   [0:0] or_ln117_76_fu_1297_p2;
wire   [4:0] select_ln117_81_fu_1303_p3;
wire   [0:0] or_ln117_77_fu_1311_p2;
wire   [0:0] and_ln102_106_fu_1136_p2;
wire   [4:0] select_ln117_82_fu_1317_p3;
wire   [0:0] or_ln117_78_fu_1325_p2;
wire   [4:0] select_ln117_83_fu_1331_p3;
wire   [12:0] tmp_fu_1352_p65;
wire   [4:0] tmp_fu_1352_p66;
wire   [0:0] or_ln117_79_fu_1339_p2;
wire   [12:0] tmp_fu_1352_p67;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] tmp_fu_1352_p1;
wire   [4:0] tmp_fu_1352_p3;
wire   [4:0] tmp_fu_1352_p5;
wire   [4:0] tmp_fu_1352_p7;
wire   [4:0] tmp_fu_1352_p9;
wire   [4:0] tmp_fu_1352_p11;
wire   [4:0] tmp_fu_1352_p13;
wire   [4:0] tmp_fu_1352_p15;
wire   [4:0] tmp_fu_1352_p17;
wire   [4:0] tmp_fu_1352_p19;
wire   [4:0] tmp_fu_1352_p21;
wire   [4:0] tmp_fu_1352_p23;
wire   [4:0] tmp_fu_1352_p25;
wire   [4:0] tmp_fu_1352_p27;
wire   [4:0] tmp_fu_1352_p29;
wire   [4:0] tmp_fu_1352_p31;
wire  signed [4:0] tmp_fu_1352_p33;
wire  signed [4:0] tmp_fu_1352_p35;
wire  signed [4:0] tmp_fu_1352_p37;
wire  signed [4:0] tmp_fu_1352_p39;
wire  signed [4:0] tmp_fu_1352_p41;
wire  signed [4:0] tmp_fu_1352_p43;
wire  signed [4:0] tmp_fu_1352_p45;
wire  signed [4:0] tmp_fu_1352_p47;
wire  signed [4:0] tmp_fu_1352_p49;
wire  signed [4:0] tmp_fu_1352_p51;
wire  signed [4:0] tmp_fu_1352_p53;
wire  signed [4:0] tmp_fu_1352_p55;
wire  signed [4:0] tmp_fu_1352_p57;
wire  signed [4:0] tmp_fu_1352_p59;
wire  signed [4:0] tmp_fu_1352_p61;
wire  signed [4:0] tmp_fu_1352_p63;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_65_5_13_1_1_x12 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 13 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 13 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 13 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 13 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 13 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 13 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 13 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 13 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 13 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 13 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 13 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 13 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 13 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 13 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 13 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 13 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 13 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 13 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 13 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 13 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 13 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 13 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 13 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 13 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 13 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 13 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 13 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 13 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 13 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 13 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 13 ),
    .CASE31( 5'h1F ),
    .din31_WIDTH( 13 ),
    .def_WIDTH( 13 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 13 ))
sparsemux_65_5_13_1_1_x12_U2589(
    .din0(13'd8191),
    .din1(13'd7810),
    .din2(13'd7993),
    .din3(13'd832),
    .din4(13'd7968),
    .din5(13'd126),
    .din6(13'd7919),
    .din7(13'd8187),
    .din8(13'd330),
    .din9(13'd7497),
    .din10(13'd6120),
    .din11(13'd7961),
    .din12(13'd8037),
    .din13(13'd609),
    .din14(13'd7545),
    .din15(13'd27),
    .din16(13'd6515),
    .din17(13'd8113),
    .din18(13'd401),
    .din19(13'd8028),
    .din20(13'd7646),
    .din21(13'd168),
    .din22(13'd7352),
    .din23(13'd111),
    .din24(13'd848),
    .din25(13'd8023),
    .din26(13'd155),
    .din27(13'd8138),
    .din28(13'd7330),
    .din29(13'd7964),
    .din30(13'd727),
    .din31(13'd8160),
    .def(tmp_fu_1352_p65),
    .sel(tmp_fu_1352_p66),
    .dout(tmp_fu_1352_p67)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_59_reg_1501 <= icmp_ln86_59_fu_428_p2;
        icmp_ln86_62_reg_1507 <= icmp_ln86_62_fu_446_p2;
        icmp_ln86_63_reg_1513 <= icmp_ln86_63_fu_452_p2;
        icmp_ln86_68_reg_1519 <= icmp_ln86_68_fu_482_p2;
        icmp_ln86_69_reg_1532 <= icmp_ln86_69_fu_496_p2;
        icmp_ln86_78_reg_1538 <= icmp_ln86_78_fu_550_p2;
        icmp_ln86_79_reg_1543 <= icmp_ln86_79_fu_556_p2;
        icmp_ln86_80_reg_1548 <= icmp_ln86_80_fu_562_p2;
        icmp_ln86_81_reg_1553 <= icmp_ln86_81_fu_578_p2;
        icmp_ln86_82_reg_1558 <= icmp_ln86_82_fu_584_p2;
        icmp_ln86_83_reg_1563 <= icmp_ln86_83_fu_590_p2;
        icmp_ln86_84_reg_1568 <= icmp_ln86_84_fu_596_p2;
        icmp_ln86_85_reg_1573 <= icmp_ln86_85_fu_602_p2;
        icmp_ln86_reg_1496 <= icmp_ln86_fu_416_p2;
        or_ln117_63_reg_1578 <= or_ln117_63_fu_964_p2;
        select_ln117_69_reg_1587 <= select_ln117_69_fu_982_p3;
        tmp_2_reg_1525 <= x_51_val[32'd17];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln102_100_fu_1104_p2 = (and_ln104_14_fu_1021_p2 & and_ln102_99_fu_1099_p2);

assign and_ln102_101_fu_1110_p2 = (icmp_ln86_82_reg_1558 & and_ln102_81_fu_1063_p2);

assign and_ln102_102_fu_1115_p2 = (xor_ln104_39_fu_1058_p2 & icmp_ln86_83_reg_1563);

assign and_ln102_103_fu_1120_p2 = (and_ln102_74_fu_1027_p2 & and_ln102_102_fu_1115_p2);

assign and_ln102_104_fu_1126_p2 = (icmp_ln86_84_reg_1568 & and_ln102_82_fu_1068_p2);

assign and_ln102_105_fu_1131_p2 = (xor_ln104_40_fu_1073_p2 & icmp_ln86_85_reg_1573);

assign and_ln102_106_fu_1136_p2 = (and_ln104_15_fu_1037_p2 & and_ln102_105_fu_1131_p2);

assign and_ln102_71_fu_620_p2 = (icmp_ln86_60_fu_434_p2 & icmp_ln86_58_fu_422_p2);

assign and_ln102_72_fu_638_p2 = (icmp_ln86_61_fu_440_p2 & and_ln104_fu_614_p2);

assign and_ln102_73_fu_1011_p2 = (icmp_ln86_62_reg_1507 & and_ln102_fu_995_p2);

assign and_ln102_74_fu_1027_p2 = (icmp_ln86_63_reg_1513 & and_ln104_11_fu_1005_p2);

assign and_ln102_75_fu_656_p2 = (icmp_ln86_64_fu_458_p2 & and_ln102_71_fu_620_p2);

assign and_ln102_76_fu_668_p2 = (icmp_ln86_65_fu_464_p2 & and_ln104_12_fu_632_p2);

assign and_ln102_77_fu_680_p2 = (icmp_ln86_66_fu_470_p2 & and_ln102_72_fu_638_p2);

assign and_ln102_78_fu_692_p2 = (icmp_ln86_67_fu_476_p2 & and_ln104_13_fu_650_p2);

assign and_ln102_79_fu_1043_p2 = (icmp_ln86_68_reg_1519 & and_ln102_73_fu_1011_p2);

assign and_ln102_80_fu_1053_p2 = (tmp_2_reg_1525 & and_ln104_14_fu_1021_p2);

assign and_ln102_81_fu_1063_p2 = (tmp_2_reg_1525 & and_ln102_74_fu_1027_p2);

assign and_ln102_82_fu_1068_p2 = (icmp_ln86_69_reg_1532 & and_ln104_15_fu_1037_p2);

assign and_ln102_83_fu_704_p2 = (icmp_ln86_70_fu_502_p2 & and_ln102_75_fu_656_p2);

assign and_ln102_84_fu_710_p2 = (xor_ln104_34_fu_662_p2 & icmp_ln86_71_fu_508_p2);

assign and_ln102_85_fu_716_p2 = (and_ln102_84_fu_710_p2 & and_ln102_71_fu_620_p2);

assign and_ln102_86_fu_722_p2 = (icmp_ln86_72_fu_514_p2 & and_ln102_76_fu_668_p2);

assign and_ln102_87_fu_728_p2 = (xor_ln104_35_fu_674_p2 & icmp_ln86_73_fu_520_p2);

assign and_ln102_88_fu_734_p2 = (and_ln104_12_fu_632_p2 & and_ln102_87_fu_728_p2);

assign and_ln102_89_fu_740_p2 = (icmp_ln86_74_fu_526_p2 & and_ln102_77_fu_680_p2);

assign and_ln102_90_fu_746_p2 = (xor_ln104_36_fu_686_p2 & icmp_ln86_75_fu_532_p2);

assign and_ln102_91_fu_752_p2 = (and_ln102_90_fu_746_p2 & and_ln102_72_fu_638_p2);

assign and_ln102_92_fu_758_p2 = (icmp_ln86_76_fu_538_p2 & and_ln102_78_fu_692_p2);

assign and_ln102_93_fu_764_p2 = (xor_ln104_37_fu_698_p2 & icmp_ln86_77_fu_544_p2);

assign and_ln102_94_fu_770_p2 = (and_ln104_13_fu_650_p2 & and_ln102_93_fu_764_p2);

assign and_ln102_95_fu_1078_p2 = (icmp_ln86_78_reg_1538 & and_ln102_79_fu_1043_p2);

assign and_ln102_96_fu_1083_p2 = (xor_ln104_38_fu_1048_p2 & icmp_ln86_79_reg_1543);

assign and_ln102_97_fu_1088_p2 = (and_ln102_96_fu_1083_p2 & and_ln102_73_fu_1011_p2);

assign and_ln102_98_fu_1094_p2 = (icmp_ln86_80_reg_1548 & and_ln102_80_fu_1053_p2);

assign and_ln102_99_fu_1099_p2 = (xor_ln104_39_fu_1058_p2 & icmp_ln86_81_reg_1553);

assign and_ln102_fu_995_p2 = (xor_ln104_fu_990_p2 & icmp_ln86_59_reg_1501);

assign and_ln104_11_fu_1005_p2 = (xor_ln104_fu_990_p2 & xor_ln104_29_fu_1000_p2);

assign and_ln104_12_fu_632_p2 = (xor_ln104_30_fu_626_p2 & icmp_ln86_58_fu_422_p2);

assign and_ln104_13_fu_650_p2 = (xor_ln104_31_fu_644_p2 & and_ln104_fu_614_p2);

assign and_ln104_14_fu_1021_p2 = (xor_ln104_32_fu_1016_p2 & and_ln102_fu_995_p2);

assign and_ln104_15_fu_1037_p2 = (xor_ln104_33_fu_1032_p2 & and_ln104_11_fu_1005_p2);

assign and_ln104_fu_614_p2 = (xor_ln104_28_fu_608_p2 & icmp_ln86_fu_416_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((or_ln117_79_fu_1339_p2[0:0] == 1'b1) ? tmp_fu_1352_p67 : 13'd0);

assign icmp_ln86_58_fu_422_p2 = (($signed(x_49_val) < $signed(18'd80494)) ? 1'b1 : 1'b0);

assign icmp_ln86_59_fu_428_p2 = (($signed(x_49_val) < $signed(18'd82921)) ? 1'b1 : 1'b0);

assign icmp_ln86_60_fu_434_p2 = (($signed(x_27_val) < $signed(18'd23669)) ? 1'b1 : 1'b0);

assign icmp_ln86_61_fu_440_p2 = (($signed(x_29_val) < $signed(18'd6361)) ? 1'b1 : 1'b0);

assign icmp_ln86_62_fu_446_p2 = (($signed(x_4_val) < $signed(18'd34063)) ? 1'b1 : 1'b0);

assign icmp_ln86_63_fu_452_p2 = (($signed(x_13_val) < $signed(18'd460)) ? 1'b1 : 1'b0);

assign icmp_ln86_64_fu_458_p2 = (($signed(x_27_val) < $signed(18'd23547)) ? 1'b1 : 1'b0);

assign icmp_ln86_65_fu_464_p2 = (($signed(x_19_val) < $signed(18'd1991)) ? 1'b1 : 1'b0);

assign icmp_ln86_66_fu_470_p2 = (($signed(x_15_val) < $signed(18'd7)) ? 1'b1 : 1'b0);

assign icmp_ln86_67_fu_476_p2 = (($signed(x_18_val) < $signed(18'd1167)) ? 1'b1 : 1'b0);

assign icmp_ln86_68_fu_482_p2 = (($signed(x_12_val) < $signed(18'd260351)) ? 1'b1 : 1'b0);

assign icmp_ln86_69_fu_496_p2 = (($signed(x_22_val) < $signed(18'd60)) ? 1'b1 : 1'b0);

assign icmp_ln86_70_fu_502_p2 = (($signed(x_52_val) < $signed(18'd88577)) ? 1'b1 : 1'b0);

assign icmp_ln86_71_fu_508_p2 = (($signed(x_4_val) < $signed(18'd55528)) ? 1'b1 : 1'b0);

assign icmp_ln86_72_fu_514_p2 = (($signed(x_46_val) < $signed(18'd136)) ? 1'b1 : 1'b0);

assign icmp_ln86_73_fu_520_p2 = (($signed(x_19_val) < $signed(18'd3006)) ? 1'b1 : 1'b0);

assign icmp_ln86_74_fu_526_p2 = (($signed(x_2_val) < $signed(18'd88)) ? 1'b1 : 1'b0);

assign icmp_ln86_75_fu_532_p2 = (($signed(x_16_val) < $signed(18'd66)) ? 1'b1 : 1'b0);

assign icmp_ln86_76_fu_538_p2 = (($signed(x_28_val) < $signed(18'd9194)) ? 1'b1 : 1'b0);

assign icmp_ln86_77_fu_544_p2 = (($signed(x_39_val) < $signed(18'd1309)) ? 1'b1 : 1'b0);

assign icmp_ln86_78_fu_550_p2 = (($signed(x_32_val) < $signed(18'd827)) ? 1'b1 : 1'b0);

assign icmp_ln86_79_fu_556_p2 = (($signed(x_2_val) < $signed(18'd129)) ? 1'b1 : 1'b0);

assign icmp_ln86_80_fu_562_p2 = (($signed(x_17_val) < $signed(18'd9)) ? 1'b1 : 1'b0);

assign icmp_ln86_81_fu_578_p2 = (($signed(tmp_3_fu_568_p4) < $signed(16'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_82_fu_584_p2 = (($signed(x_22_val) < $signed(18'd27)) ? 1'b1 : 1'b0);

assign icmp_ln86_83_fu_590_p2 = (($signed(x_38_val) < $signed(18'd5)) ? 1'b1 : 1'b0);

assign icmp_ln86_84_fu_596_p2 = (($signed(x_2_val) < $signed(18'd261229)) ? 1'b1 : 1'b0);

assign icmp_ln86_85_fu_602_p2 = (($signed(x_31_val) < $signed(18'd196)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_416_p2 = (($signed(x_49_val) < $signed(18'd80516)) ? 1'b1 : 1'b0);

assign or_ln117_53_fu_812_p2 = (and_ln102_86_fu_722_p2 | and_ln102_71_fu_620_p2);

assign or_ln117_54_fu_826_p2 = (and_ln102_76_fu_668_p2 | and_ln102_71_fu_620_p2);

assign or_ln117_55_fu_840_p2 = (or_ln117_54_fu_826_p2 | and_ln102_88_fu_734_p2);

assign or_ln117_56_fu_866_p2 = (icmp_ln86_58_fu_422_p2 | and_ln102_89_fu_740_p2);

assign or_ln117_57_fu_880_p2 = (icmp_ln86_58_fu_422_p2 | and_ln102_77_fu_680_p2);

assign or_ln117_58_fu_894_p2 = (or_ln117_57_fu_880_p2 | and_ln102_91_fu_752_p2);

assign or_ln117_59_fu_908_p2 = (icmp_ln86_58_fu_422_p2 | and_ln102_72_fu_638_p2);

assign or_ln117_60_fu_922_p2 = (or_ln117_59_fu_908_p2 | and_ln102_92_fu_758_p2);

assign or_ln117_61_fu_936_p2 = (or_ln117_59_fu_908_p2 | and_ln102_78_fu_692_p2);

assign or_ln117_62_fu_950_p2 = (or_ln117_61_fu_936_p2 | and_ln102_94_fu_770_p2);

assign or_ln117_63_fu_964_p2 = (icmp_ln86_58_fu_422_p2 | and_ln104_fu_614_p2);

assign or_ln117_64_fu_1142_p2 = (or_ln117_63_reg_1578 | and_ln102_95_fu_1078_p2);

assign or_ln117_65_fu_1147_p2 = (or_ln117_63_reg_1578 | and_ln102_79_fu_1043_p2);

assign or_ln117_66_fu_1159_p2 = (or_ln117_65_fu_1147_p2 | and_ln102_97_fu_1088_p2);

assign or_ln117_67_fu_1173_p2 = (or_ln117_63_reg_1578 | and_ln102_73_fu_1011_p2);

assign or_ln117_68_fu_1186_p2 = (or_ln117_67_fu_1173_p2 | and_ln102_98_fu_1094_p2);

assign or_ln117_69_fu_1200_p2 = (or_ln117_67_fu_1173_p2 | and_ln102_80_fu_1053_p2);

assign or_ln117_70_fu_1214_p2 = (or_ln117_69_fu_1200_p2 | and_ln102_100_fu_1104_p2);

assign or_ln117_71_fu_1228_p2 = (or_ln117_63_reg_1578 | and_ln102_fu_995_p2);

assign or_ln117_72_fu_1241_p2 = (or_ln117_71_fu_1228_p2 | and_ln102_101_fu_1110_p2);

assign or_ln117_73_fu_1255_p2 = (or_ln117_71_fu_1228_p2 | and_ln102_81_fu_1063_p2);

assign or_ln117_74_fu_1269_p2 = (or_ln117_73_fu_1255_p2 | and_ln102_103_fu_1120_p2);

assign or_ln117_75_fu_1283_p2 = (or_ln117_71_fu_1228_p2 | and_ln102_74_fu_1027_p2);

assign or_ln117_76_fu_1297_p2 = (or_ln117_75_fu_1283_p2 | and_ln102_104_fu_1126_p2);

assign or_ln117_77_fu_1311_p2 = (or_ln117_75_fu_1283_p2 | and_ln102_82_fu_1068_p2);

assign or_ln117_78_fu_1325_p2 = (or_ln117_77_fu_1311_p2 | and_ln102_106_fu_1136_p2);

assign or_ln117_79_fu_1339_p2 = (xor_ln104_fu_990_p2 | or_ln117_63_reg_1578);

assign or_ln117_fu_786_p2 = (and_ln102_85_fu_716_p2 | and_ln102_75_fu_656_p2);

assign select_ln117_56_fu_800_p3 = ((or_ln117_fu_786_p2[0:0] == 1'b1) ? select_ln117_fu_792_p3 : 2'd3);

assign select_ln117_57_fu_818_p3 = ((and_ln102_71_fu_620_p2[0:0] == 1'b1) ? zext_ln117_7_fu_808_p1 : 3'd4);

assign select_ln117_58_fu_832_p3 = ((or_ln117_53_fu_812_p2[0:0] == 1'b1) ? select_ln117_57_fu_818_p3 : 3'd5);

assign select_ln117_59_fu_846_p3 = ((or_ln117_54_fu_826_p2[0:0] == 1'b1) ? select_ln117_58_fu_832_p3 : 3'd6);

assign select_ln117_60_fu_854_p3 = ((or_ln117_55_fu_840_p2[0:0] == 1'b1) ? select_ln117_59_fu_846_p3 : 3'd7);

assign select_ln117_61_fu_872_p3 = ((icmp_ln86_58_fu_422_p2[0:0] == 1'b1) ? zext_ln117_8_fu_862_p1 : 4'd8);

assign select_ln117_62_fu_886_p3 = ((or_ln117_56_fu_866_p2[0:0] == 1'b1) ? select_ln117_61_fu_872_p3 : 4'd9);

assign select_ln117_63_fu_900_p3 = ((or_ln117_57_fu_880_p2[0:0] == 1'b1) ? select_ln117_62_fu_886_p3 : 4'd10);

assign select_ln117_64_fu_914_p3 = ((or_ln117_58_fu_894_p2[0:0] == 1'b1) ? select_ln117_63_fu_900_p3 : 4'd11);

assign select_ln117_65_fu_928_p3 = ((or_ln117_59_fu_908_p2[0:0] == 1'b1) ? select_ln117_64_fu_914_p3 : 4'd12);

assign select_ln117_66_fu_942_p3 = ((or_ln117_60_fu_922_p2[0:0] == 1'b1) ? select_ln117_65_fu_928_p3 : 4'd13);

assign select_ln117_67_fu_956_p3 = ((or_ln117_61_fu_936_p2[0:0] == 1'b1) ? select_ln117_66_fu_942_p3 : 4'd14);

assign select_ln117_68_fu_970_p3 = ((or_ln117_62_fu_950_p2[0:0] == 1'b1) ? select_ln117_67_fu_956_p3 : 4'd15);

assign select_ln117_69_fu_982_p3 = ((or_ln117_63_fu_964_p2[0:0] == 1'b1) ? zext_ln117_9_fu_978_p1 : 5'd16);

assign select_ln117_70_fu_1152_p3 = ((or_ln117_64_fu_1142_p2[0:0] == 1'b1) ? select_ln117_69_reg_1587 : 5'd17);

assign select_ln117_71_fu_1165_p3 = ((or_ln117_65_fu_1147_p2[0:0] == 1'b1) ? select_ln117_70_fu_1152_p3 : 5'd18);

assign select_ln117_72_fu_1178_p3 = ((or_ln117_66_fu_1159_p2[0:0] == 1'b1) ? select_ln117_71_fu_1165_p3 : 5'd19);

assign select_ln117_73_fu_1192_p3 = ((or_ln117_67_fu_1173_p2[0:0] == 1'b1) ? select_ln117_72_fu_1178_p3 : 5'd20);

assign select_ln117_74_fu_1206_p3 = ((or_ln117_68_fu_1186_p2[0:0] == 1'b1) ? select_ln117_73_fu_1192_p3 : 5'd21);

assign select_ln117_75_fu_1220_p3 = ((or_ln117_69_fu_1200_p2[0:0] == 1'b1) ? select_ln117_74_fu_1206_p3 : 5'd22);

assign select_ln117_76_fu_1233_p3 = ((or_ln117_70_fu_1214_p2[0:0] == 1'b1) ? select_ln117_75_fu_1220_p3 : 5'd23);

assign select_ln117_77_fu_1247_p3 = ((or_ln117_71_fu_1228_p2[0:0] == 1'b1) ? select_ln117_76_fu_1233_p3 : 5'd24);

assign select_ln117_78_fu_1261_p3 = ((or_ln117_72_fu_1241_p2[0:0] == 1'b1) ? select_ln117_77_fu_1247_p3 : 5'd25);

assign select_ln117_79_fu_1275_p3 = ((or_ln117_73_fu_1255_p2[0:0] == 1'b1) ? select_ln117_78_fu_1261_p3 : 5'd26);

assign select_ln117_80_fu_1289_p3 = ((or_ln117_74_fu_1269_p2[0:0] == 1'b1) ? select_ln117_79_fu_1275_p3 : 5'd27);

assign select_ln117_81_fu_1303_p3 = ((or_ln117_75_fu_1283_p2[0:0] == 1'b1) ? select_ln117_80_fu_1289_p3 : 5'd28);

assign select_ln117_82_fu_1317_p3 = ((or_ln117_76_fu_1297_p2[0:0] == 1'b1) ? select_ln117_81_fu_1303_p3 : 5'd29);

assign select_ln117_83_fu_1331_p3 = ((or_ln117_77_fu_1311_p2[0:0] == 1'b1) ? select_ln117_82_fu_1317_p3 : 5'd30);

assign select_ln117_fu_792_p3 = ((and_ln102_75_fu_656_p2[0:0] == 1'b1) ? zext_ln117_fu_782_p1 : 2'd2);

assign tmp_3_fu_568_p4 = {{x_44_val[17:2]}};

assign tmp_fu_1352_p65 = 'bx;

assign tmp_fu_1352_p66 = ((or_ln117_78_fu_1325_p2[0:0] == 1'b1) ? select_ln117_83_fu_1331_p3 : 5'd31);

assign xor_ln104_28_fu_608_p2 = (icmp_ln86_58_fu_422_p2 ^ 1'd1);

assign xor_ln104_29_fu_1000_p2 = (icmp_ln86_59_reg_1501 ^ 1'd1);

assign xor_ln104_30_fu_626_p2 = (icmp_ln86_60_fu_434_p2 ^ 1'd1);

assign xor_ln104_31_fu_644_p2 = (icmp_ln86_61_fu_440_p2 ^ 1'd1);

assign xor_ln104_32_fu_1016_p2 = (icmp_ln86_62_reg_1507 ^ 1'd1);

assign xor_ln104_33_fu_1032_p2 = (icmp_ln86_63_reg_1513 ^ 1'd1);

assign xor_ln104_34_fu_662_p2 = (icmp_ln86_64_fu_458_p2 ^ 1'd1);

assign xor_ln104_35_fu_674_p2 = (icmp_ln86_65_fu_464_p2 ^ 1'd1);

assign xor_ln104_36_fu_686_p2 = (icmp_ln86_66_fu_470_p2 ^ 1'd1);

assign xor_ln104_37_fu_698_p2 = (icmp_ln86_67_fu_476_p2 ^ 1'd1);

assign xor_ln104_38_fu_1048_p2 = (icmp_ln86_68_reg_1519 ^ 1'd1);

assign xor_ln104_39_fu_1058_p2 = (tmp_2_reg_1525 ^ 1'd1);

assign xor_ln104_40_fu_1073_p2 = (icmp_ln86_69_reg_1532 ^ 1'd1);

assign xor_ln104_fu_990_p2 = (icmp_ln86_reg_1496 ^ 1'd1);

assign xor_ln117_fu_776_p2 = (1'd1 ^ and_ln102_83_fu_704_p2);

assign zext_ln117_7_fu_808_p1 = select_ln117_56_fu_800_p3;

assign zext_ln117_8_fu_862_p1 = select_ln117_60_fu_854_p3;

assign zext_ln117_9_fu_978_p1 = select_ln117_68_fu_970_p3;

assign zext_ln117_fu_782_p1 = xor_ln117_fu_776_p2;

endmodule //my_prj_decision_function_97
