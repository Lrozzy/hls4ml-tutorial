// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_110 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_3_val,
        x_4_val,
        x_6_val,
        x_11_val,
        x_12_val,
        x_13_val,
        x_14_val,
        x_16_val,
        x_19_val,
        x_23_val,
        x_27_val,
        x_33_val,
        x_34_val,
        x_37_val,
        x_48_val,
        x_49_val,
        x_50_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_3_val;
input  [17:0] x_4_val;
input  [17:0] x_6_val;
input  [17:0] x_11_val;
input  [17:0] x_12_val;
input  [17:0] x_13_val;
input  [17:0] x_14_val;
input  [17:0] x_16_val;
input  [17:0] x_19_val;
input  [17:0] x_23_val;
input  [17:0] x_27_val;
input  [17:0] x_33_val;
input  [17:0] x_34_val;
input  [17:0] x_37_val;
input  [17:0] x_48_val;
input  [17:0] x_49_val;
input  [17:0] x_50_val;
input  [17:0] x_52_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_390_p2;
reg   [0:0] icmp_ln86_reg_1449;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_1755_fu_402_p2;
reg   [0:0] icmp_ln86_1755_reg_1459;
wire   [0:0] icmp_ln86_1758_fu_420_p2;
reg   [0:0] icmp_ln86_1758_reg_1465;
wire   [0:0] icmp_ln86_1759_fu_426_p2;
reg   [0:0] icmp_ln86_1759_reg_1470;
wire   [0:0] icmp_ln86_1762_fu_444_p2;
reg   [0:0] icmp_ln86_1762_reg_1476;
wire   [0:0] icmp_ln86_1763_fu_450_p2;
reg   [0:0] icmp_ln86_1763_reg_1481;
wire   [0:0] icmp_ln86_1764_fu_456_p2;
reg   [0:0] icmp_ln86_1764_reg_1487;
wire   [0:0] icmp_ln86_1765_fu_462_p2;
reg   [0:0] icmp_ln86_1765_reg_1493;
wire   [0:0] icmp_ln86_1766_fu_468_p2;
reg   [0:0] icmp_ln86_1766_reg_1499;
wire   [0:0] icmp_ln86_1774_fu_516_p2;
reg   [0:0] icmp_ln86_1774_reg_1505;
wire   [0:0] icmp_ln86_1775_fu_522_p2;
reg   [0:0] icmp_ln86_1775_reg_1510;
wire   [0:0] icmp_ln86_1776_fu_528_p2;
reg   [0:0] icmp_ln86_1776_reg_1515;
wire   [0:0] icmp_ln86_1777_fu_534_p2;
reg   [0:0] icmp_ln86_1777_reg_1520;
wire   [0:0] icmp_ln86_1778_fu_540_p2;
reg   [0:0] icmp_ln86_1778_reg_1525;
wire   [0:0] icmp_ln86_1779_fu_546_p2;
reg   [0:0] icmp_ln86_1779_reg_1530;
wire   [0:0] icmp_ln86_1780_fu_552_p2;
reg   [0:0] icmp_ln86_1780_reg_1535;
wire   [0:0] icmp_ln86_1781_fu_568_p2;
reg   [0:0] icmp_ln86_1781_reg_1540;
wire   [0:0] icmp_ln86_1782_fu_574_p2;
reg   [0:0] icmp_ln86_1782_reg_1545;
wire   [0:0] and_ln104_334_fu_628_p2;
reg   [0:0] and_ln104_334_reg_1550;
wire   [0:0] xor_ln104_842_fu_634_p2;
reg   [0:0] xor_ln104_842_reg_1555;
wire   [0:0] or_ln117_1600_fu_896_p2;
reg   [0:0] or_ln117_1600_reg_1560;
wire   [3:0] select_ln117_1714_fu_910_p3;
reg   [3:0] select_ln117_1714_reg_1565;
wire    ap_block_pp0_stage0;
wire   [13:0] tmp_fu_558_p4;
wire   [0:0] icmp_ln86_1754_fu_396_p2;
wire   [0:0] xor_ln104_838_fu_586_p2;
wire   [0:0] icmp_ln86_1756_fu_408_p2;
wire   [0:0] and_ln102_fu_580_p2;
wire   [0:0] xor_ln104_840_fu_604_p2;
wire   [0:0] icmp_ln86_1757_fu_414_p2;
wire   [0:0] and_ln104_fu_592_p2;
wire   [0:0] xor_ln104_841_fu_622_p2;
wire   [0:0] and_ln102_1962_fu_598_p2;
wire   [0:0] icmp_ln86_1760_fu_432_p2;
wire   [0:0] and_ln104_333_fu_610_p2;
wire   [0:0] icmp_ln86_1761_fu_438_p2;
wire   [0:0] and_ln102_1963_fu_616_p2;
wire   [0:0] icmp_ln86_1767_fu_474_p2;
wire   [0:0] and_ln102_1966_fu_640_p2;
wire   [0:0] icmp_ln86_1768_fu_480_p2;
wire   [0:0] and_ln102_1975_fu_682_p2;
wire   [0:0] icmp_ln86_1769_fu_486_p2;
wire   [0:0] and_ln102_1967_fu_646_p2;
wire   [0:0] icmp_ln86_1770_fu_492_p2;
wire   [0:0] xor_ln104_844_fu_652_p2;
wire   [0:0] and_ln102_1978_fu_700_p2;
wire   [0:0] icmp_ln86_1771_fu_498_p2;
wire   [0:0] and_ln102_1968_fu_658_p2;
wire   [0:0] icmp_ln86_1772_fu_504_p2;
wire   [0:0] xor_ln104_845_fu_664_p2;
wire   [0:0] and_ln102_1981_fu_718_p2;
wire   [0:0] icmp_ln86_1773_fu_510_p2;
wire   [0:0] and_ln102_1969_fu_670_p2;
wire   [0:0] and_ln102_1974_fu_676_p2;
wire   [0:0] xor_ln117_fu_736_p2;
wire   [0:0] and_ln102_1976_fu_688_p2;
wire   [1:0] zext_ln117_fu_742_p1;
wire   [0:0] or_ln117_fu_746_p2;
wire   [1:0] select_ln117_fu_752_p3;
wire   [1:0] select_ln117_1703_fu_760_p3;
wire   [0:0] and_ln102_1977_fu_694_p2;
wire   [2:0] zext_ln117_189_fu_768_p1;
wire   [0:0] or_ln117_1592_fu_772_p2;
wire   [2:0] select_ln117_1704_fu_778_p3;
wire   [0:0] or_ln117_1593_fu_786_p2;
wire   [0:0] and_ln102_1979_fu_706_p2;
wire   [2:0] select_ln117_1705_fu_792_p3;
wire   [0:0] or_ln117_1594_fu_800_p2;
wire   [2:0] select_ln117_1706_fu_806_p3;
wire   [2:0] select_ln117_1707_fu_814_p3;
wire   [0:0] and_ln102_1980_fu_712_p2;
wire   [3:0] zext_ln117_190_fu_822_p1;
wire   [0:0] or_ln117_1595_fu_826_p2;
wire   [3:0] select_ln117_1708_fu_832_p3;
wire   [0:0] or_ln117_1596_fu_840_p2;
wire   [0:0] and_ln102_1982_fu_724_p2;
wire   [3:0] select_ln117_1709_fu_846_p3;
wire   [0:0] or_ln117_1597_fu_854_p2;
wire   [3:0] select_ln117_1710_fu_860_p3;
wire   [0:0] or_ln117_1598_fu_868_p2;
wire   [0:0] and_ln102_1983_fu_730_p2;
wire   [3:0] select_ln117_1711_fu_874_p3;
wire   [0:0] or_ln117_1599_fu_882_p2;
wire   [3:0] select_ln117_1712_fu_888_p3;
wire   [3:0] select_ln117_1713_fu_902_p3;
wire   [0:0] xor_ln104_fu_918_p2;
wire   [0:0] xor_ln104_839_fu_928_p2;
wire   [0:0] and_ln102_1961_fu_923_p2;
wire   [0:0] and_ln104_332_fu_933_p2;
wire   [0:0] xor_ln104_843_fu_954_p2;
wire   [0:0] and_ln102_1964_fu_939_p2;
wire   [0:0] and_ln104_335_fu_944_p2;
wire   [0:0] and_ln102_1965_fu_949_p2;
wire   [0:0] and_ln104_336_fu_959_p2;
wire   [0:0] xor_ln104_846_fu_965_p2;
wire   [0:0] and_ln102_1984_fu_1010_p2;
wire   [0:0] and_ln102_1970_fu_970_p2;
wire   [0:0] xor_ln104_847_fu_975_p2;
wire   [0:0] and_ln102_1987_fu_1025_p2;
wire   [0:0] and_ln102_1971_fu_980_p2;
wire   [0:0] xor_ln104_848_fu_985_p2;
wire   [0:0] and_ln102_1990_fu_1041_p2;
wire   [0:0] and_ln102_1972_fu_990_p2;
wire   [0:0] xor_ln104_849_fu_995_p2;
wire   [0:0] and_ln102_1993_fu_1057_p2;
wire   [0:0] and_ln102_1973_fu_1000_p2;
wire   [0:0] xor_ln104_850_fu_1005_p2;
wire   [0:0] and_ln102_1996_fu_1073_p2;
wire   [0:0] and_ln102_1985_fu_1015_p2;
wire   [0:0] or_ln117_1601_fu_1084_p2;
wire   [3:0] select_ln117_1715_fu_1089_p3;
wire   [0:0] and_ln102_1986_fu_1020_p2;
wire   [4:0] zext_ln117_191_fu_1096_p1;
wire   [0:0] or_ln117_1602_fu_1100_p2;
wire   [4:0] select_ln117_1716_fu_1105_p3;
wire   [0:0] or_ln117_1603_fu_1112_p2;
wire   [0:0] and_ln102_1988_fu_1030_p2;
wire   [4:0] select_ln117_1717_fu_1117_p3;
wire   [0:0] or_ln117_1604_fu_1125_p2;
wire   [4:0] select_ln117_1718_fu_1131_p3;
wire   [0:0] or_ln117_1605_fu_1139_p2;
wire   [0:0] and_ln102_1989_fu_1036_p2;
wire   [4:0] select_ln117_1719_fu_1144_p3;
wire   [0:0] or_ln117_1606_fu_1152_p2;
wire   [4:0] select_ln117_1720_fu_1158_p3;
wire   [0:0] or_ln117_1607_fu_1166_p2;
wire   [0:0] and_ln102_1991_fu_1046_p2;
wire   [4:0] select_ln117_1721_fu_1172_p3;
wire   [0:0] or_ln117_1608_fu_1180_p2;
wire   [4:0] select_ln117_1722_fu_1186_p3;
wire   [0:0] or_ln117_1609_fu_1194_p2;
wire   [0:0] and_ln102_1992_fu_1052_p2;
wire   [4:0] select_ln117_1723_fu_1199_p3;
wire   [0:0] or_ln117_1610_fu_1207_p2;
wire   [4:0] select_ln117_1724_fu_1213_p3;
wire   [0:0] or_ln117_1611_fu_1221_p2;
wire   [0:0] and_ln102_1994_fu_1062_p2;
wire   [4:0] select_ln117_1725_fu_1227_p3;
wire   [0:0] or_ln117_1612_fu_1235_p2;
wire   [4:0] select_ln117_1726_fu_1241_p3;
wire   [0:0] or_ln117_1613_fu_1249_p2;
wire   [0:0] and_ln102_1995_fu_1068_p2;
wire   [4:0] select_ln117_1727_fu_1255_p3;
wire   [0:0] or_ln117_1614_fu_1263_p2;
wire   [4:0] select_ln117_1728_fu_1269_p3;
wire   [0:0] or_ln117_1615_fu_1277_p2;
wire   [0:0] and_ln102_1997_fu_1078_p2;
wire   [4:0] select_ln117_1729_fu_1283_p3;
wire   [0:0] or_ln117_1616_fu_1291_p2;
wire   [4:0] select_ln117_1730_fu_1297_p3;
wire   [11:0] agg_result_fu_1313_p65;
wire   [4:0] agg_result_fu_1313_p66;
wire   [11:0] agg_result_fu_1313_p67;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1313_p1;
wire   [4:0] agg_result_fu_1313_p3;
wire   [4:0] agg_result_fu_1313_p5;
wire   [4:0] agg_result_fu_1313_p7;
wire   [4:0] agg_result_fu_1313_p9;
wire   [4:0] agg_result_fu_1313_p11;
wire   [4:0] agg_result_fu_1313_p13;
wire   [4:0] agg_result_fu_1313_p15;
wire   [4:0] agg_result_fu_1313_p17;
wire   [4:0] agg_result_fu_1313_p19;
wire   [4:0] agg_result_fu_1313_p21;
wire   [4:0] agg_result_fu_1313_p23;
wire   [4:0] agg_result_fu_1313_p25;
wire   [4:0] agg_result_fu_1313_p27;
wire   [4:0] agg_result_fu_1313_p29;
wire   [4:0] agg_result_fu_1313_p31;
wire  signed [4:0] agg_result_fu_1313_p33;
wire  signed [4:0] agg_result_fu_1313_p35;
wire  signed [4:0] agg_result_fu_1313_p37;
wire  signed [4:0] agg_result_fu_1313_p39;
wire  signed [4:0] agg_result_fu_1313_p41;
wire  signed [4:0] agg_result_fu_1313_p43;
wire  signed [4:0] agg_result_fu_1313_p45;
wire  signed [4:0] agg_result_fu_1313_p47;
wire  signed [4:0] agg_result_fu_1313_p49;
wire  signed [4:0] agg_result_fu_1313_p51;
wire  signed [4:0] agg_result_fu_1313_p53;
wire  signed [4:0] agg_result_fu_1313_p55;
wire  signed [4:0] agg_result_fu_1313_p57;
wire  signed [4:0] agg_result_fu_1313_p59;
wire  signed [4:0] agg_result_fu_1313_p61;
wire  signed [4:0] agg_result_fu_1313_p63;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_65_5_12_1_1_x35 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 12 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 12 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 12 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 12 ),
    .CASE31( 5'h1F ),
    .din31_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_65_5_12_1_1_x35_U2322(
    .din0(12'd18),
    .din1(12'd127),
    .din2(12'd239),
    .din3(12'd3519),
    .din4(12'd1156),
    .din5(12'd3888),
    .din6(12'd461),
    .din7(12'd3767),
    .din8(12'd3556),
    .din9(12'd4022),
    .din10(12'd41),
    .din11(12'd1185),
    .din12(12'd4002),
    .din13(12'd1890),
    .din14(12'd274),
    .din15(12'd3770),
    .din16(12'd287),
    .din17(12'd4056),
    .din18(12'd554),
    .din19(12'd3930),
    .din20(12'd3926),
    .din21(12'd321),
    .din22(12'd3936),
    .din23(12'd160),
    .din24(12'd3805),
    .din25(12'd4027),
    .din26(12'd38),
    .din27(12'd4088),
    .din28(12'd194),
    .din29(12'd56),
    .din30(12'd2400),
    .din31(12'd3994),
    .def(agg_result_fu_1313_p65),
    .sel(agg_result_fu_1313_p66),
    .dout(agg_result_fu_1313_p67)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln104_334_reg_1550 <= and_ln104_334_fu_628_p2;
        icmp_ln86_1755_reg_1459 <= icmp_ln86_1755_fu_402_p2;
        icmp_ln86_1758_reg_1465 <= icmp_ln86_1758_fu_420_p2;
        icmp_ln86_1759_reg_1470 <= icmp_ln86_1759_fu_426_p2;
        icmp_ln86_1762_reg_1476 <= icmp_ln86_1762_fu_444_p2;
        icmp_ln86_1763_reg_1481 <= icmp_ln86_1763_fu_450_p2;
        icmp_ln86_1764_reg_1487 <= icmp_ln86_1764_fu_456_p2;
        icmp_ln86_1765_reg_1493 <= icmp_ln86_1765_fu_462_p2;
        icmp_ln86_1766_reg_1499 <= icmp_ln86_1766_fu_468_p2;
        icmp_ln86_1774_reg_1505 <= icmp_ln86_1774_fu_516_p2;
        icmp_ln86_1775_reg_1510 <= icmp_ln86_1775_fu_522_p2;
        icmp_ln86_1776_reg_1515 <= icmp_ln86_1776_fu_528_p2;
        icmp_ln86_1777_reg_1520 <= icmp_ln86_1777_fu_534_p2;
        icmp_ln86_1778_reg_1525 <= icmp_ln86_1778_fu_540_p2;
        icmp_ln86_1779_reg_1530 <= icmp_ln86_1779_fu_546_p2;
        icmp_ln86_1780_reg_1535 <= icmp_ln86_1780_fu_552_p2;
        icmp_ln86_1781_reg_1540 <= icmp_ln86_1781_fu_568_p2;
        icmp_ln86_1782_reg_1545 <= icmp_ln86_1782_fu_574_p2;
        icmp_ln86_reg_1449 <= icmp_ln86_fu_390_p2;
        or_ln117_1600_reg_1560 <= or_ln117_1600_fu_896_p2;
        select_ln117_1714_reg_1565 <= select_ln117_1714_fu_910_p3;
        xor_ln104_842_reg_1555 <= xor_ln104_842_fu_634_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1313_p65 = 'bx;

assign agg_result_fu_1313_p66 = ((or_ln117_1616_fu_1291_p2[0:0] == 1'b1) ? select_ln117_1730_fu_1297_p3 : 5'd31);

assign and_ln102_1961_fu_923_p2 = (xor_ln104_fu_918_p2 & icmp_ln86_1755_reg_1459);

assign and_ln102_1962_fu_598_p2 = (icmp_ln86_1756_fu_408_p2 & and_ln102_fu_580_p2);

assign and_ln102_1963_fu_616_p2 = (icmp_ln86_1757_fu_414_p2 & and_ln104_fu_592_p2);

assign and_ln102_1964_fu_939_p2 = (icmp_ln86_1758_reg_1465 & and_ln102_1961_fu_923_p2);

assign and_ln102_1965_fu_949_p2 = (icmp_ln86_1759_reg_1470 & and_ln104_332_fu_933_p2);

assign and_ln102_1966_fu_640_p2 = (icmp_ln86_1758_fu_420_p2 & and_ln102_1962_fu_598_p2);

assign and_ln102_1967_fu_646_p2 = (icmp_ln86_1760_fu_432_p2 & and_ln104_333_fu_610_p2);

assign and_ln102_1968_fu_658_p2 = (icmp_ln86_1761_fu_438_p2 & and_ln102_1963_fu_616_p2);

assign and_ln102_1969_fu_670_p2 = (icmp_ln86_1762_fu_444_p2 & and_ln104_334_fu_628_p2);

assign and_ln102_1970_fu_970_p2 = (icmp_ln86_1763_reg_1481 & and_ln102_1964_fu_939_p2);

assign and_ln102_1971_fu_980_p2 = (icmp_ln86_1764_reg_1487 & and_ln104_335_fu_944_p2);

assign and_ln102_1972_fu_990_p2 = (icmp_ln86_1765_reg_1493 & and_ln102_1965_fu_949_p2);

assign and_ln102_1973_fu_1000_p2 = (icmp_ln86_1766_reg_1499 & and_ln104_336_fu_959_p2);

assign and_ln102_1974_fu_676_p2 = (icmp_ln86_1767_fu_474_p2 & and_ln102_1966_fu_640_p2);

assign and_ln102_1975_fu_682_p2 = (xor_ln104_842_fu_634_p2 & icmp_ln86_1768_fu_480_p2);

assign and_ln102_1976_fu_688_p2 = (and_ln102_1975_fu_682_p2 & and_ln102_1962_fu_598_p2);

assign and_ln102_1977_fu_694_p2 = (icmp_ln86_1769_fu_486_p2 & and_ln102_1967_fu_646_p2);

assign and_ln102_1978_fu_700_p2 = (xor_ln104_844_fu_652_p2 & icmp_ln86_1770_fu_492_p2);

assign and_ln102_1979_fu_706_p2 = (and_ln104_333_fu_610_p2 & and_ln102_1978_fu_700_p2);

assign and_ln102_1980_fu_712_p2 = (icmp_ln86_1771_fu_498_p2 & and_ln102_1968_fu_658_p2);

assign and_ln102_1981_fu_718_p2 = (xor_ln104_845_fu_664_p2 & icmp_ln86_1772_fu_504_p2);

assign and_ln102_1982_fu_724_p2 = (and_ln102_1981_fu_718_p2 & and_ln102_1963_fu_616_p2);

assign and_ln102_1983_fu_730_p2 = (icmp_ln86_1773_fu_510_p2 & and_ln102_1969_fu_670_p2);

assign and_ln102_1984_fu_1010_p2 = (xor_ln104_846_fu_965_p2 & icmp_ln86_1774_reg_1505);

assign and_ln102_1985_fu_1015_p2 = (and_ln104_334_reg_1550 & and_ln102_1984_fu_1010_p2);

assign and_ln102_1986_fu_1020_p2 = (icmp_ln86_1775_reg_1510 & and_ln102_1970_fu_970_p2);

assign and_ln102_1987_fu_1025_p2 = (xor_ln104_847_fu_975_p2 & icmp_ln86_1776_reg_1515);

assign and_ln102_1988_fu_1030_p2 = (and_ln102_1987_fu_1025_p2 & and_ln102_1964_fu_939_p2);

assign and_ln102_1989_fu_1036_p2 = (icmp_ln86_1777_reg_1520 & and_ln102_1971_fu_980_p2);

assign and_ln102_1990_fu_1041_p2 = (xor_ln104_848_fu_985_p2 & icmp_ln86_1778_reg_1525);

assign and_ln102_1991_fu_1046_p2 = (and_ln104_335_fu_944_p2 & and_ln102_1990_fu_1041_p2);

assign and_ln102_1992_fu_1052_p2 = (icmp_ln86_1779_reg_1530 & and_ln102_1972_fu_990_p2);

assign and_ln102_1993_fu_1057_p2 = (xor_ln104_849_fu_995_p2 & icmp_ln86_1780_reg_1535);

assign and_ln102_1994_fu_1062_p2 = (and_ln102_1993_fu_1057_p2 & and_ln102_1965_fu_949_p2);

assign and_ln102_1995_fu_1068_p2 = (icmp_ln86_1781_reg_1540 & and_ln102_1973_fu_1000_p2);

assign and_ln102_1996_fu_1073_p2 = (xor_ln104_850_fu_1005_p2 & icmp_ln86_1782_reg_1545);

assign and_ln102_1997_fu_1078_p2 = (and_ln104_336_fu_959_p2 & and_ln102_1996_fu_1073_p2);

assign and_ln102_fu_580_p2 = (icmp_ln86_fu_390_p2 & icmp_ln86_1754_fu_396_p2);

assign and_ln104_332_fu_933_p2 = (xor_ln104_fu_918_p2 & xor_ln104_839_fu_928_p2);

assign and_ln104_333_fu_610_p2 = (xor_ln104_840_fu_604_p2 & and_ln102_fu_580_p2);

assign and_ln104_334_fu_628_p2 = (xor_ln104_841_fu_622_p2 & and_ln104_fu_592_p2);

assign and_ln104_335_fu_944_p2 = (xor_ln104_842_reg_1555 & and_ln102_1961_fu_923_p2);

assign and_ln104_336_fu_959_p2 = (xor_ln104_843_fu_954_p2 & and_ln104_332_fu_933_p2);

assign and_ln104_fu_592_p2 = (xor_ln104_838_fu_586_p2 & icmp_ln86_fu_390_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1313_p67;

assign icmp_ln86_1754_fu_396_p2 = (($signed(x_16_val) < $signed(18'd101)) ? 1'b1 : 1'b0);

assign icmp_ln86_1755_fu_402_p2 = (($signed(x_50_val) < $signed(18'd43425)) ? 1'b1 : 1'b0);

assign icmp_ln86_1756_fu_408_p2 = (($signed(x_16_val) < $signed(18'd99)) ? 1'b1 : 1'b0);

assign icmp_ln86_1757_fu_414_p2 = (($signed(x_13_val) < $signed(18'd467)) ? 1'b1 : 1'b0);

assign icmp_ln86_1758_fu_420_p2 = (($signed(x_52_val) < $signed(18'd46593)) ? 1'b1 : 1'b0);

assign icmp_ln86_1759_fu_426_p2 = (($signed(x_19_val) < $signed(18'd15702)) ? 1'b1 : 1'b0);

assign icmp_ln86_1760_fu_432_p2 = (($signed(x_49_val) < $signed(18'd9547)) ? 1'b1 : 1'b0);

assign icmp_ln86_1761_fu_438_p2 = (($signed(x_11_val) < $signed(18'd1017)) ? 1'b1 : 1'b0);

assign icmp_ln86_1762_fu_444_p2 = (($signed(x_48_val) < $signed(18'd6273)) ? 1'b1 : 1'b0);

assign icmp_ln86_1763_fu_450_p2 = (($signed(x_6_val) < $signed(18'd13458)) ? 1'b1 : 1'b0);

assign icmp_ln86_1764_fu_456_p2 = (($signed(x_11_val) < $signed(18'd904)) ? 1'b1 : 1'b0);

assign icmp_ln86_1765_fu_462_p2 = (($signed(x_52_val) < $signed(18'd39425)) ? 1'b1 : 1'b0);

assign icmp_ln86_1766_fu_468_p2 = (($signed(x_34_val) < $signed(18'd486)) ? 1'b1 : 1'b0);

assign icmp_ln86_1767_fu_474_p2 = (($signed(x_50_val) < $signed(18'd31459)) ? 1'b1 : 1'b0);

assign icmp_ln86_1768_fu_480_p2 = (($signed(x_3_val) < $signed(18'd37080)) ? 1'b1 : 1'b0);

assign icmp_ln86_1769_fu_486_p2 = (($signed(x_27_val) < $signed(18'd2190)) ? 1'b1 : 1'b0);

assign icmp_ln86_1770_fu_492_p2 = (($signed(x_12_val) < $signed(18'd259741)) ? 1'b1 : 1'b0);

assign icmp_ln86_1771_fu_498_p2 = (($signed(x_49_val) < $signed(18'd5103)) ? 1'b1 : 1'b0);

assign icmp_ln86_1772_fu_504_p2 = (($signed(x_52_val) < $signed(18'd30209)) ? 1'b1 : 1'b0);

assign icmp_ln86_1773_fu_510_p2 = (($signed(x_37_val) < $signed(18'd5)) ? 1'b1 : 1'b0);

assign icmp_ln86_1774_fu_516_p2 = (($signed(x_49_val) < $signed(18'd10614)) ? 1'b1 : 1'b0);

assign icmp_ln86_1775_fu_522_p2 = (($signed(x_1_val) < $signed(18'd50967)) ? 1'b1 : 1'b0);

assign icmp_ln86_1776_fu_528_p2 = (($signed(x_4_val) < $signed(18'd25902)) ? 1'b1 : 1'b0);

assign icmp_ln86_1777_fu_534_p2 = (($signed(x_16_val) < $signed(18'd115)) ? 1'b1 : 1'b0);

assign icmp_ln86_1778_fu_540_p2 = (($signed(x_49_val) < $signed(18'd17946)) ? 1'b1 : 1'b0);

assign icmp_ln86_1779_fu_546_p2 = (($signed(x_33_val) < $signed(18'd456)) ? 1'b1 : 1'b0);

assign icmp_ln86_1780_fu_552_p2 = (($signed(x_6_val) < $signed(18'd15041)) ? 1'b1 : 1'b0);

assign icmp_ln86_1781_fu_568_p2 = (($signed(tmp_fu_558_p4) < $signed(14'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_1782_fu_574_p2 = (($signed(x_23_val) < $signed(18'd34)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_390_p2 = (($signed(x_6_val) < $signed(18'd8602)) ? 1'b1 : 1'b0);

assign or_ln117_1592_fu_772_p2 = (and_ln102_1977_fu_694_p2 | and_ln102_1962_fu_598_p2);

assign or_ln117_1593_fu_786_p2 = (and_ln102_1967_fu_646_p2 | and_ln102_1962_fu_598_p2);

assign or_ln117_1594_fu_800_p2 = (or_ln117_1593_fu_786_p2 | and_ln102_1979_fu_706_p2);

assign or_ln117_1595_fu_826_p2 = (and_ln102_fu_580_p2 | and_ln102_1980_fu_712_p2);

assign or_ln117_1596_fu_840_p2 = (and_ln102_fu_580_p2 | and_ln102_1968_fu_658_p2);

assign or_ln117_1597_fu_854_p2 = (or_ln117_1596_fu_840_p2 | and_ln102_1982_fu_724_p2);

assign or_ln117_1598_fu_868_p2 = (and_ln102_fu_580_p2 | and_ln102_1963_fu_616_p2);

assign or_ln117_1599_fu_882_p2 = (or_ln117_1598_fu_868_p2 | and_ln102_1983_fu_730_p2);

assign or_ln117_1600_fu_896_p2 = (or_ln117_1598_fu_868_p2 | and_ln102_1969_fu_670_p2);

assign or_ln117_1601_fu_1084_p2 = (or_ln117_1600_reg_1560 | and_ln102_1985_fu_1015_p2);

assign or_ln117_1602_fu_1100_p2 = (icmp_ln86_reg_1449 | and_ln102_1986_fu_1020_p2);

assign or_ln117_1603_fu_1112_p2 = (icmp_ln86_reg_1449 | and_ln102_1970_fu_970_p2);

assign or_ln117_1604_fu_1125_p2 = (or_ln117_1603_fu_1112_p2 | and_ln102_1988_fu_1030_p2);

assign or_ln117_1605_fu_1139_p2 = (icmp_ln86_reg_1449 | and_ln102_1964_fu_939_p2);

assign or_ln117_1606_fu_1152_p2 = (or_ln117_1605_fu_1139_p2 | and_ln102_1989_fu_1036_p2);

assign or_ln117_1607_fu_1166_p2 = (or_ln117_1605_fu_1139_p2 | and_ln102_1971_fu_980_p2);

assign or_ln117_1608_fu_1180_p2 = (or_ln117_1607_fu_1166_p2 | and_ln102_1991_fu_1046_p2);

assign or_ln117_1609_fu_1194_p2 = (icmp_ln86_reg_1449 | and_ln102_1961_fu_923_p2);

assign or_ln117_1610_fu_1207_p2 = (or_ln117_1609_fu_1194_p2 | and_ln102_1992_fu_1052_p2);

assign or_ln117_1611_fu_1221_p2 = (or_ln117_1609_fu_1194_p2 | and_ln102_1972_fu_990_p2);

assign or_ln117_1612_fu_1235_p2 = (or_ln117_1611_fu_1221_p2 | and_ln102_1994_fu_1062_p2);

assign or_ln117_1613_fu_1249_p2 = (or_ln117_1609_fu_1194_p2 | and_ln102_1965_fu_949_p2);

assign or_ln117_1614_fu_1263_p2 = (or_ln117_1613_fu_1249_p2 | and_ln102_1995_fu_1068_p2);

assign or_ln117_1615_fu_1277_p2 = (or_ln117_1613_fu_1249_p2 | and_ln102_1973_fu_1000_p2);

assign or_ln117_1616_fu_1291_p2 = (or_ln117_1615_fu_1277_p2 | and_ln102_1997_fu_1078_p2);

assign or_ln117_fu_746_p2 = (and_ln102_1976_fu_688_p2 | and_ln102_1966_fu_640_p2);

assign select_ln117_1703_fu_760_p3 = ((or_ln117_fu_746_p2[0:0] == 1'b1) ? select_ln117_fu_752_p3 : 2'd3);

assign select_ln117_1704_fu_778_p3 = ((and_ln102_1962_fu_598_p2[0:0] == 1'b1) ? zext_ln117_189_fu_768_p1 : 3'd4);

assign select_ln117_1705_fu_792_p3 = ((or_ln117_1592_fu_772_p2[0:0] == 1'b1) ? select_ln117_1704_fu_778_p3 : 3'd5);

assign select_ln117_1706_fu_806_p3 = ((or_ln117_1593_fu_786_p2[0:0] == 1'b1) ? select_ln117_1705_fu_792_p3 : 3'd6);

assign select_ln117_1707_fu_814_p3 = ((or_ln117_1594_fu_800_p2[0:0] == 1'b1) ? select_ln117_1706_fu_806_p3 : 3'd7);

assign select_ln117_1708_fu_832_p3 = ((and_ln102_fu_580_p2[0:0] == 1'b1) ? zext_ln117_190_fu_822_p1 : 4'd8);

assign select_ln117_1709_fu_846_p3 = ((or_ln117_1595_fu_826_p2[0:0] == 1'b1) ? select_ln117_1708_fu_832_p3 : 4'd9);

assign select_ln117_1710_fu_860_p3 = ((or_ln117_1596_fu_840_p2[0:0] == 1'b1) ? select_ln117_1709_fu_846_p3 : 4'd10);

assign select_ln117_1711_fu_874_p3 = ((or_ln117_1597_fu_854_p2[0:0] == 1'b1) ? select_ln117_1710_fu_860_p3 : 4'd11);

assign select_ln117_1712_fu_888_p3 = ((or_ln117_1598_fu_868_p2[0:0] == 1'b1) ? select_ln117_1711_fu_874_p3 : 4'd12);

assign select_ln117_1713_fu_902_p3 = ((or_ln117_1599_fu_882_p2[0:0] == 1'b1) ? select_ln117_1712_fu_888_p3 : 4'd13);

assign select_ln117_1714_fu_910_p3 = ((or_ln117_1600_fu_896_p2[0:0] == 1'b1) ? select_ln117_1713_fu_902_p3 : 4'd14);

assign select_ln117_1715_fu_1089_p3 = ((or_ln117_1601_fu_1084_p2[0:0] == 1'b1) ? select_ln117_1714_reg_1565 : 4'd15);

assign select_ln117_1716_fu_1105_p3 = ((icmp_ln86_reg_1449[0:0] == 1'b1) ? zext_ln117_191_fu_1096_p1 : 5'd16);

assign select_ln117_1717_fu_1117_p3 = ((or_ln117_1602_fu_1100_p2[0:0] == 1'b1) ? select_ln117_1716_fu_1105_p3 : 5'd17);

assign select_ln117_1718_fu_1131_p3 = ((or_ln117_1603_fu_1112_p2[0:0] == 1'b1) ? select_ln117_1717_fu_1117_p3 : 5'd18);

assign select_ln117_1719_fu_1144_p3 = ((or_ln117_1604_fu_1125_p2[0:0] == 1'b1) ? select_ln117_1718_fu_1131_p3 : 5'd19);

assign select_ln117_1720_fu_1158_p3 = ((or_ln117_1605_fu_1139_p2[0:0] == 1'b1) ? select_ln117_1719_fu_1144_p3 : 5'd20);

assign select_ln117_1721_fu_1172_p3 = ((or_ln117_1606_fu_1152_p2[0:0] == 1'b1) ? select_ln117_1720_fu_1158_p3 : 5'd21);

assign select_ln117_1722_fu_1186_p3 = ((or_ln117_1607_fu_1166_p2[0:0] == 1'b1) ? select_ln117_1721_fu_1172_p3 : 5'd22);

assign select_ln117_1723_fu_1199_p3 = ((or_ln117_1608_fu_1180_p2[0:0] == 1'b1) ? select_ln117_1722_fu_1186_p3 : 5'd23);

assign select_ln117_1724_fu_1213_p3 = ((or_ln117_1609_fu_1194_p2[0:0] == 1'b1) ? select_ln117_1723_fu_1199_p3 : 5'd24);

assign select_ln117_1725_fu_1227_p3 = ((or_ln117_1610_fu_1207_p2[0:0] == 1'b1) ? select_ln117_1724_fu_1213_p3 : 5'd25);

assign select_ln117_1726_fu_1241_p3 = ((or_ln117_1611_fu_1221_p2[0:0] == 1'b1) ? select_ln117_1725_fu_1227_p3 : 5'd26);

assign select_ln117_1727_fu_1255_p3 = ((or_ln117_1612_fu_1235_p2[0:0] == 1'b1) ? select_ln117_1726_fu_1241_p3 : 5'd27);

assign select_ln117_1728_fu_1269_p3 = ((or_ln117_1613_fu_1249_p2[0:0] == 1'b1) ? select_ln117_1727_fu_1255_p3 : 5'd28);

assign select_ln117_1729_fu_1283_p3 = ((or_ln117_1614_fu_1263_p2[0:0] == 1'b1) ? select_ln117_1728_fu_1269_p3 : 5'd29);

assign select_ln117_1730_fu_1297_p3 = ((or_ln117_1615_fu_1277_p2[0:0] == 1'b1) ? select_ln117_1729_fu_1283_p3 : 5'd30);

assign select_ln117_fu_752_p3 = ((and_ln102_1966_fu_640_p2[0:0] == 1'b1) ? zext_ln117_fu_742_p1 : 2'd2);

assign tmp_fu_558_p4 = {{x_14_val[17:4]}};

assign xor_ln104_838_fu_586_p2 = (icmp_ln86_1754_fu_396_p2 ^ 1'd1);

assign xor_ln104_839_fu_928_p2 = (icmp_ln86_1755_reg_1459 ^ 1'd1);

assign xor_ln104_840_fu_604_p2 = (icmp_ln86_1756_fu_408_p2 ^ 1'd1);

assign xor_ln104_841_fu_622_p2 = (icmp_ln86_1757_fu_414_p2 ^ 1'd1);

assign xor_ln104_842_fu_634_p2 = (icmp_ln86_1758_fu_420_p2 ^ 1'd1);

assign xor_ln104_843_fu_954_p2 = (icmp_ln86_1759_reg_1470 ^ 1'd1);

assign xor_ln104_844_fu_652_p2 = (icmp_ln86_1760_fu_432_p2 ^ 1'd1);

assign xor_ln104_845_fu_664_p2 = (icmp_ln86_1761_fu_438_p2 ^ 1'd1);

assign xor_ln104_846_fu_965_p2 = (icmp_ln86_1762_reg_1476 ^ 1'd1);

assign xor_ln104_847_fu_975_p2 = (icmp_ln86_1763_reg_1481 ^ 1'd1);

assign xor_ln104_848_fu_985_p2 = (icmp_ln86_1764_reg_1487 ^ 1'd1);

assign xor_ln104_849_fu_995_p2 = (icmp_ln86_1765_reg_1493 ^ 1'd1);

assign xor_ln104_850_fu_1005_p2 = (icmp_ln86_1766_reg_1499 ^ 1'd1);

assign xor_ln104_fu_918_p2 = (icmp_ln86_reg_1449 ^ 1'd1);

assign xor_ln117_fu_736_p2 = (1'd1 ^ and_ln102_1974_fu_676_p2);

assign zext_ln117_189_fu_768_p1 = select_ln117_1703_fu_760_p3;

assign zext_ln117_190_fu_822_p1 = select_ln117_1707_fu_814_p3;

assign zext_ln117_191_fu_1096_p1 = select_ln117_1715_fu_1089_p3;

assign zext_ln117_fu_742_p1 = xor_ln117_fu_736_p2;

endmodule //my_prj_decision_function_110
