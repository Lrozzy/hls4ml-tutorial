// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_36 (
        ap_ready,
        x_1_val,
        x_2_val,
        x_6_val,
        x_8_val,
        x_10_val,
        x_12_val,
        x_22_val,
        x_32_val,
        x_44_val,
        x_50_val,
        x_51_val,
        x_52_val,
        ap_return,
        ap_rst
);


output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_2_val;
input  [17:0] x_6_val;
input  [17:0] x_8_val;
input  [17:0] x_10_val;
input  [17:0] x_12_val;
input  [17:0] x_22_val;
input  [17:0] x_32_val;
input  [17:0] x_44_val;
input  [17:0] x_50_val;
input  [17:0] x_51_val;
input  [17:0] x_52_val;
output  [11:0] ap_return;
input   ap_rst;

wire   [0:0] icmp_ln86_fu_208_p2;
wire   [0:0] icmp_ln86_947_fu_214_p2;
wire   [0:0] xor_ln104_fu_282_p2;
wire   [0:0] xor_ln104_454_fu_294_p2;
wire   [0:0] icmp_ln86_948_fu_220_p2;
wire   [0:0] xor_ln104_455_fu_312_p2;
wire   [0:0] icmp_ln86_949_fu_226_p2;
wire   [0:0] and_ln104_fu_300_p2;
wire   [0:0] xor_ln104_456_fu_330_p2;
wire   [0:0] icmp_ln86_950_fu_232_p2;
wire   [0:0] and_ln102_910_fu_306_p2;
wire   [0:0] icmp_ln86_951_fu_238_p2;
wire   [0:0] and_ln104_185_fu_318_p2;
wire   [0:0] tmp_fu_244_p3;
wire   [0:0] and_ln104_186_fu_336_p2;
wire   [0:0] icmp_ln86_953_fu_252_p2;
wire   [0:0] and_ln102_912_fu_342_p2;
wire   [0:0] icmp_ln86_954_fu_258_p2;
wire   [0:0] xor_ln104_457_fu_348_p2;
wire   [0:0] and_ln102_920_fu_384_p2;
wire   [0:0] icmp_ln86_955_fu_264_p2;
wire   [0:0] and_ln102_913_fu_354_p2;
wire   [0:0] icmp_ln86_956_fu_270_p2;
wire   [0:0] xor_ln104_458_fu_360_p2;
wire   [0:0] and_ln102_921_fu_402_p2;
wire   [0:0] icmp_ln86_957_fu_276_p2;
wire   [0:0] xor_ln104_459_fu_372_p2;
wire   [0:0] and_ln102_922_fu_414_p2;
wire   [0:0] and_ln102_fu_288_p2;
wire   [0:0] and_ln102_911_fu_324_p2;
wire   [0:0] or_ln117_877_fu_432_p2;
wire   [0:0] or_ln117_fu_426_p2;
wire   [0:0] and_ln102_914_fu_366_p2;
wire   [1:0] zext_ln117_fu_438_p1;
wire   [0:0] or_ln117_867_fu_442_p2;
wire   [0:0] and_ln102_915_fu_378_p2;
wire   [1:0] select_ln117_fu_448_p3;
wire   [1:0] select_ln117_917_fu_462_p3;
wire   [0:0] or_ln117_868_fu_456_p2;
wire   [2:0] zext_ln117_105_fu_470_p1;
wire   [0:0] or_ln117_869_fu_474_p2;
wire   [0:0] and_ln102_916_fu_390_p2;
wire   [2:0] select_ln117_918_fu_480_p3;
wire   [0:0] or_ln117_870_fu_488_p2;
wire   [2:0] select_ln117_919_fu_494_p3;
wire   [0:0] or_ln117_871_fu_502_p2;
wire   [0:0] and_ln102_917_fu_396_p2;
wire   [2:0] select_ln117_920_fu_508_p3;
wire   [2:0] select_ln117_921_fu_522_p3;
wire   [0:0] or_ln117_872_fu_516_p2;
wire   [3:0] zext_ln117_106_fu_530_p1;
wire   [0:0] or_ln117_873_fu_534_p2;
wire   [0:0] and_ln102_918_fu_408_p2;
wire   [3:0] select_ln117_922_fu_540_p3;
wire   [0:0] or_ln117_874_fu_548_p2;
wire   [3:0] select_ln117_923_fu_554_p3;
wire   [3:0] select_ln117_924_fu_568_p3;
wire   [0:0] or_ln117_875_fu_562_p2;
wire   [0:0] and_ln102_919_fu_420_p2;
wire   [4:0] zext_ln117_107_fu_576_p1;
wire   [0:0] or_ln117_876_fu_580_p2;
wire   [4:0] select_ln117_925_fu_586_p3;
wire   [11:0] agg_result_fu_602_p27;
wire   [4:0] agg_result_fu_602_p28;
wire   [11:0] agg_result_fu_602_p29;
wire   [4:0] agg_result_fu_602_p1;
wire   [4:0] agg_result_fu_602_p3;
wire   [4:0] agg_result_fu_602_p5;
wire   [4:0] agg_result_fu_602_p7;
wire   [4:0] agg_result_fu_602_p9;
wire   [4:0] agg_result_fu_602_p11;
wire   [4:0] agg_result_fu_602_p13;
wire   [4:0] agg_result_fu_602_p15;
wire   [4:0] agg_result_fu_602_p17;
wire   [4:0] agg_result_fu_602_p19;
wire   [4:0] agg_result_fu_602_p21;
wire  signed [4:0] agg_result_fu_602_p23;
wire  signed [4:0] agg_result_fu_602_p25;
wire    ap_ce_reg;

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_27_5_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'h13 ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'h14 ),
    .din12_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_27_5_12_1_1_U1405(
    .din0(12'd413),
    .din1(12'd177),
    .din2(12'd2),
    .din3(12'd3955),
    .din4(12'd4077),
    .din5(12'd4088),
    .din6(12'd74),
    .din7(12'd1585),
    .din8(12'd4078),
    .din9(12'd83),
    .din10(12'd3881),
    .din11(12'd3877),
    .din12(12'd3538),
    .def(agg_result_fu_602_p27),
    .sel(agg_result_fu_602_p28),
    .dout(agg_result_fu_602_p29)
);

assign and_ln102_910_fu_306_p2 = (icmp_ln86_fu_208_p2 & icmp_ln86_948_fu_220_p2);

assign and_ln102_911_fu_324_p2 = (icmp_ln86_949_fu_226_p2 & and_ln104_fu_300_p2);

assign and_ln102_912_fu_342_p2 = (icmp_ln86_950_fu_232_p2 & and_ln102_910_fu_306_p2);

assign and_ln102_913_fu_354_p2 = (icmp_ln86_951_fu_238_p2 & and_ln104_185_fu_318_p2);

assign and_ln102_914_fu_366_p2 = (tmp_fu_244_p3 & and_ln104_186_fu_336_p2);

assign and_ln102_915_fu_378_p2 = (icmp_ln86_953_fu_252_p2 & and_ln102_912_fu_342_p2);

assign and_ln102_916_fu_390_p2 = (and_ln102_920_fu_384_p2 & and_ln102_910_fu_306_p2);

assign and_ln102_917_fu_396_p2 = (icmp_ln86_955_fu_264_p2 & and_ln102_913_fu_354_p2);

assign and_ln102_918_fu_408_p2 = (and_ln104_185_fu_318_p2 & and_ln102_921_fu_402_p2);

assign and_ln102_919_fu_420_p2 = (and_ln104_186_fu_336_p2 & and_ln102_922_fu_414_p2);

assign and_ln102_920_fu_384_p2 = (xor_ln104_457_fu_348_p2 & icmp_ln86_954_fu_258_p2);

assign and_ln102_921_fu_402_p2 = (xor_ln104_458_fu_360_p2 & icmp_ln86_956_fu_270_p2);

assign and_ln102_922_fu_414_p2 = (xor_ln104_459_fu_372_p2 & icmp_ln86_957_fu_276_p2);

assign and_ln102_fu_288_p2 = (xor_ln104_fu_282_p2 & icmp_ln86_947_fu_214_p2);

assign and_ln104_185_fu_318_p2 = (xor_ln104_455_fu_312_p2 & icmp_ln86_fu_208_p2);

assign and_ln104_186_fu_336_p2 = (xor_ln104_456_fu_330_p2 & and_ln104_fu_300_p2);

assign and_ln104_fu_300_p2 = (xor_ln104_fu_282_p2 & xor_ln104_454_fu_294_p2);

assign ap_ready = 1'b1;

assign icmp_ln86_948_fu_220_p2 = (($signed(x_6_val) < $signed(18'd20777)) ? 1'b1 : 1'b0);

assign icmp_ln86_950_fu_232_p2 = (($signed(x_12_val) < $signed(18'd260035)) ? 1'b1 : 1'b0);

assign icmp_ln86_951_fu_238_p2 = (($signed(x_32_val) < $signed(18'd745)) ? 1'b1 : 1'b0);

assign icmp_ln86_953_fu_252_p2 = (($signed(x_44_val) < $signed(18'd11)) ? 1'b1 : 1'b0);

assign icmp_ln86_954_fu_258_p2 = (($signed(x_50_val) < $signed(18'd36847)) ? 1'b1 : 1'b0);

assign icmp_ln86_955_fu_264_p2 = (($signed(x_22_val) < $signed(18'd60)) ? 1'b1 : 1'b0);

assign icmp_ln86_956_fu_270_p2 = (($signed(x_52_val) < $signed(18'd109057)) ? 1'b1 : 1'b0);

assign or_ln117_867_fu_442_p2 = (or_ln117_fu_426_p2 | and_ln102_914_fu_366_p2);

assign or_ln117_868_fu_456_p2 = (or_ln117_867_fu_442_p2 | and_ln102_915_fu_378_p2);

assign or_ln117_869_fu_474_p2 = (or_ln117_867_fu_442_p2 | and_ln102_912_fu_342_p2);

assign or_ln117_870_fu_488_p2 = (or_ln117_869_fu_474_p2 | and_ln102_916_fu_390_p2);

assign or_ln117_871_fu_502_p2 = (or_ln117_867_fu_442_p2 | and_ln102_910_fu_306_p2);

assign or_ln117_872_fu_516_p2 = (or_ln117_871_fu_502_p2 | and_ln102_917_fu_396_p2);

assign or_ln117_873_fu_534_p2 = (or_ln117_871_fu_502_p2 | and_ln102_913_fu_354_p2);

assign or_ln117_874_fu_548_p2 = (or_ln117_873_fu_534_p2 | and_ln102_918_fu_408_p2);

assign or_ln117_875_fu_562_p2 = (or_ln117_867_fu_442_p2 | icmp_ln86_fu_208_p2);

assign or_ln117_876_fu_580_p2 = (or_ln117_875_fu_562_p2 | and_ln102_919_fu_420_p2);

assign or_ln117_877_fu_432_p2 = (xor_ln104_454_fu_294_p2 | icmp_ln86_fu_208_p2);

assign or_ln117_fu_426_p2 = (and_ln102_fu_288_p2 | and_ln102_911_fu_324_p2);

assign select_ln117_917_fu_462_p3 = ((or_ln117_867_fu_442_p2[0:0] == 1'b1) ? select_ln117_fu_448_p3 : 2'd3);

assign select_ln117_918_fu_480_p3 = ((or_ln117_868_fu_456_p2[0:0] == 1'b1) ? zext_ln117_105_fu_470_p1 : 3'd4);

assign select_ln117_919_fu_494_p3 = ((or_ln117_869_fu_474_p2[0:0] == 1'b1) ? select_ln117_918_fu_480_p3 : 3'd5);

assign select_ln117_920_fu_508_p3 = ((or_ln117_870_fu_488_p2[0:0] == 1'b1) ? select_ln117_919_fu_494_p3 : 3'd6);

assign select_ln117_921_fu_522_p3 = ((or_ln117_871_fu_502_p2[0:0] == 1'b1) ? select_ln117_920_fu_508_p3 : 3'd7);

assign select_ln117_922_fu_540_p3 = ((or_ln117_872_fu_516_p2[0:0] == 1'b1) ? zext_ln117_106_fu_530_p1 : 4'd8);

assign select_ln117_923_fu_554_p3 = ((or_ln117_873_fu_534_p2[0:0] == 1'b1) ? select_ln117_922_fu_540_p3 : 4'd9);

assign select_ln117_924_fu_568_p3 = ((or_ln117_874_fu_548_p2[0:0] == 1'b1) ? select_ln117_923_fu_554_p3 : 4'd10);

assign select_ln117_925_fu_586_p3 = ((or_ln117_875_fu_562_p2[0:0] == 1'b1) ? zext_ln117_107_fu_576_p1 : 5'd19);

assign select_ln117_fu_448_p3 = ((or_ln117_fu_426_p2[0:0] == 1'b1) ? zext_ln117_fu_438_p1 : 2'd2);

assign tmp_fu_244_p3 = x_51_val[32'd17];

assign xor_ln104_454_fu_294_p2 = (icmp_ln86_947_fu_214_p2 ^ 1'd1);

assign xor_ln104_455_fu_312_p2 = (icmp_ln86_948_fu_220_p2 ^ 1'd1);

assign xor_ln104_456_fu_330_p2 = (icmp_ln86_949_fu_226_p2 ^ 1'd1);

assign xor_ln104_457_fu_348_p2 = (icmp_ln86_950_fu_232_p2 ^ 1'd1);

assign xor_ln104_458_fu_360_p2 = (icmp_ln86_951_fu_238_p2 ^ 1'd1);

assign xor_ln104_459_fu_372_p2 = (tmp_fu_244_p3 ^ 1'd1);

assign xor_ln104_fu_282_p2 = (icmp_ln86_fu_208_p2 ^ 1'd1);

assign zext_ln117_105_fu_470_p1 = select_ln117_917_fu_462_p3;

assign zext_ln117_106_fu_530_p1 = select_ln117_921_fu_522_p3;

assign zext_ln117_107_fu_576_p1 = select_ln117_924_fu_568_p3;

assign zext_ln117_fu_438_p1 = or_ln117_877_fu_432_p2;

assign agg_result_fu_602_p27 = 'bx;

assign agg_result_fu_602_p28 = ((or_ln117_876_fu_580_p2[0:0] == 1'b1) ? select_ln117_925_fu_586_p3 : 5'd20);

assign ap_return = agg_result_fu_602_p29;

assign icmp_ln86_947_fu_214_p2 = (($signed(x_8_val) < $signed(18'd362)) ? 1'b1 : 1'b0);

assign icmp_ln86_949_fu_226_p2 = (($signed(x_2_val) < $signed(18'd261163)) ? 1'b1 : 1'b0);

assign icmp_ln86_957_fu_276_p2 = (($signed(x_10_val) < $signed(18'd633)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_208_p2 = (($signed(x_1_val) < $signed(18'd184174)) ? 1'b1 : 1'b0);

endmodule //my_prj_decision_function_36
