// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_13 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_3_val,
        x_5_val,
        x_8_val,
        x_9_val,
        x_10_val,
        x_11_val,
        x_18_val,
        x_19_val,
        x_23_val,
        x_25_val,
        x_34_val,
        x_39_val,
        x_40_val,
        x_42_val,
        x_44_val,
        x_47_val,
        x_50_val,
        x_51_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_3_val;
input  [17:0] x_5_val;
input  [17:0] x_8_val;
input  [17:0] x_9_val;
input  [17:0] x_10_val;
input  [17:0] x_11_val;
input  [17:0] x_18_val;
input  [17:0] x_19_val;
input  [17:0] x_23_val;
input  [17:0] x_25_val;
input  [17:0] x_34_val;
input  [17:0] x_39_val;
input  [17:0] x_40_val;
input  [17:0] x_42_val;
input  [17:0] x_44_val;
input  [17:0] x_47_val;
input  [17:0] x_50_val;
input  [17:0] x_51_val;
input  [17:0] x_52_val;
output  [12:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_348_fu_426_p2;
reg   [0:0] icmp_ln86_348_reg_1297;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_349_fu_432_p2;
reg   [0:0] icmp_ln86_349_reg_1303;
wire   [0:0] icmp_ln86_351_fu_444_p2;
reg   [0:0] icmp_ln86_351_reg_1309;
wire   [0:0] icmp_ln86_358_fu_486_p2;
reg   [0:0] icmp_ln86_358_reg_1315;
wire   [0:0] icmp_ln86_359_fu_492_p2;
reg   [0:0] icmp_ln86_359_reg_1320;
wire   [0:0] icmp_ln86_360_fu_498_p2;
reg   [0:0] icmp_ln86_360_reg_1325;
wire   [0:0] icmp_ln86_361_fu_504_p2;
reg   [0:0] icmp_ln86_361_reg_1330;
wire   [0:0] icmp_ln86_362_fu_510_p2;
reg   [0:0] icmp_ln86_362_reg_1335;
wire   [0:0] icmp_ln86_363_fu_516_p2;
reg   [0:0] icmp_ln86_363_reg_1340;
wire   [0:0] and_ln104_67_fu_594_p2;
reg   [0:0] and_ln104_67_reg_1345;
wire   [0:0] and_ln104_68_fu_612_p2;
reg   [0:0] and_ln104_68_reg_1351;
wire   [0:0] and_ln104_69_fu_630_p2;
reg   [0:0] and_ln104_69_reg_1358;
wire   [0:0] or_ln117_327_fu_924_p2;
reg   [0:0] or_ln117_327_reg_1365;
wire   [3:0] select_ln117_343_fu_938_p3;
reg   [3:0] select_ln117_343_reg_1371;
wire   [0:0] or_ln117_331_fu_946_p2;
reg   [0:0] or_ln117_331_reg_1376;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln86_fu_366_p2;
wire   [0:0] icmp_ln86_339_fu_372_p2;
wire   [0:0] xor_ln104_163_fu_534_p2;
wire   [0:0] icmp_ln86_340_fu_378_p2;
wire   [0:0] xor_ln104_fu_522_p2;
wire   [0:0] xor_ln104_164_fu_552_p2;
wire   [0:0] icmp_ln86_341_fu_384_p2;
wire   [0:0] and_ln102_fu_528_p2;
wire   [0:0] xor_ln104_165_fu_570_p2;
wire   [0:0] icmp_ln86_342_fu_390_p2;
wire   [0:0] and_ln104_fu_540_p2;
wire   [0:0] xor_ln104_166_fu_588_p2;
wire   [0:0] icmp_ln86_343_fu_396_p2;
wire   [0:0] and_ln102_326_fu_546_p2;
wire   [0:0] xor_ln104_167_fu_606_p2;
wire   [0:0] icmp_ln86_344_fu_402_p2;
wire   [0:0] and_ln104_65_fu_558_p2;
wire   [0:0] xor_ln104_168_fu_624_p2;
wire   [0:0] icmp_ln86_345_fu_408_p2;
wire   [0:0] and_ln102_327_fu_564_p2;
wire   [0:0] icmp_ln86_346_fu_414_p2;
wire   [0:0] and_ln104_66_fu_576_p2;
wire   [0:0] icmp_ln86_347_fu_420_p2;
wire   [0:0] and_ln102_328_fu_582_p2;
wire   [0:0] icmp_ln86_350_fu_438_p2;
wire   [0:0] and_ln102_330_fu_618_p2;
wire   [0:0] icmp_ln86_352_fu_450_p2;
wire   [0:0] and_ln102_331_fu_636_p2;
wire   [0:0] icmp_ln86_353_fu_456_p2;
wire   [0:0] xor_ln104_169_fu_642_p2;
wire   [0:0] and_ln102_350_fu_684_p2;
wire   [0:0] icmp_ln86_354_fu_462_p2;
wire   [0:0] and_ln102_332_fu_648_p2;
wire   [0:0] icmp_ln86_355_fu_468_p2;
wire   [0:0] xor_ln104_170_fu_654_p2;
wire   [0:0] and_ln102_351_fu_702_p2;
wire   [0:0] icmp_ln86_356_fu_474_p2;
wire   [0:0] and_ln102_333_fu_660_p2;
wire   [0:0] icmp_ln86_357_fu_480_p2;
wire   [0:0] xor_ln104_171_fu_666_p2;
wire   [0:0] and_ln102_352_fu_720_p2;
wire   [0:0] and_ln102_329_fu_600_p2;
wire   [0:0] and_ln102_336_fu_672_p2;
wire   [0:0] xor_ln117_fu_738_p2;
wire   [0:0] or_ln117_fu_732_p2;
wire   [1:0] zext_ln117_fu_744_p1;
wire   [0:0] or_ln117_315_fu_748_p2;
wire   [0:0] and_ln102_338_fu_678_p2;
wire   [1:0] select_ln117_fu_754_p3;
wire   [1:0] select_ln117_331_fu_768_p3;
wire   [0:0] or_ln117_316_fu_762_p2;
wire   [2:0] zext_ln117_36_fu_776_p1;
wire   [0:0] or_ln117_317_fu_780_p2;
wire   [0:0] and_ln102_339_fu_690_p2;
wire   [2:0] select_ln117_332_fu_786_p3;
wire   [0:0] or_ln117_318_fu_794_p2;
wire   [2:0] select_ln117_333_fu_800_p3;
wire   [0:0] or_ln117_319_fu_808_p2;
wire   [0:0] and_ln102_340_fu_696_p2;
wire   [2:0] select_ln117_334_fu_814_p3;
wire   [2:0] select_ln117_335_fu_828_p3;
wire   [0:0] or_ln117_320_fu_822_p2;
wire   [3:0] zext_ln117_37_fu_836_p1;
wire   [0:0] or_ln117_321_fu_840_p2;
wire   [0:0] and_ln102_341_fu_708_p2;
wire   [3:0] select_ln117_336_fu_846_p3;
wire   [0:0] or_ln117_322_fu_854_p2;
wire   [3:0] select_ln117_337_fu_860_p3;
wire   [0:0] or_ln117_323_fu_868_p2;
wire   [0:0] and_ln102_342_fu_714_p2;
wire   [3:0] select_ln117_338_fu_874_p3;
wire   [0:0] or_ln117_324_fu_882_p2;
wire   [3:0] select_ln117_339_fu_888_p3;
wire   [0:0] or_ln117_325_fu_896_p2;
wire   [0:0] and_ln102_343_fu_726_p2;
wire   [3:0] select_ln117_340_fu_902_p3;
wire   [0:0] or_ln117_326_fu_910_p2;
wire   [3:0] select_ln117_341_fu_916_p3;
wire   [3:0] select_ln117_342_fu_930_p3;
wire   [0:0] and_ln102_334_fu_952_p2;
wire   [0:0] xor_ln104_172_fu_956_p2;
wire   [0:0] and_ln102_353_fu_984_p2;
wire   [0:0] and_ln102_335_fu_961_p2;
wire   [0:0] xor_ln104_173_fu_965_p2;
wire   [0:0] and_ln102_354_fu_999_p2;
wire   [0:0] and_ln102_337_fu_970_p2;
wire   [0:0] xor_ln104_174_fu_974_p2;
wire   [0:0] and_ln102_355_fu_1014_p2;
wire   [0:0] and_ln102_344_fu_979_p2;
wire   [0:0] or_ln117_328_fu_1024_p2;
wire   [4:0] zext_ln117_38_fu_1029_p1;
wire   [0:0] or_ln117_329_fu_1032_p2;
wire   [0:0] and_ln102_345_fu_989_p2;
wire   [4:0] select_ln117_344_fu_1037_p3;
wire   [0:0] or_ln117_330_fu_1045_p2;
wire   [4:0] select_ln117_345_fu_1051_p3;
wire   [0:0] and_ln102_346_fu_994_p2;
wire   [4:0] select_ln117_346_fu_1059_p3;
wire   [0:0] or_ln117_332_fu_1067_p2;
wire   [4:0] select_ln117_347_fu_1072_p3;
wire   [0:0] or_ln117_333_fu_1079_p2;
wire   [0:0] and_ln102_347_fu_1004_p2;
wire   [4:0] select_ln117_348_fu_1084_p3;
wire   [0:0] or_ln117_334_fu_1092_p2;
wire   [4:0] select_ln117_349_fu_1098_p3;
wire   [0:0] or_ln117_335_fu_1106_p2;
wire   [0:0] and_ln102_348_fu_1009_p2;
wire   [4:0] select_ln117_350_fu_1110_p3;
wire   [0:0] or_ln117_336_fu_1118_p2;
wire   [4:0] select_ln117_351_fu_1124_p3;
wire   [0:0] or_ln117_337_fu_1132_p2;
wire   [0:0] and_ln102_349_fu_1019_p2;
wire   [4:0] select_ln117_352_fu_1138_p3;
wire   [0:0] or_ln117_338_fu_1146_p2;
wire   [4:0] select_ln117_353_fu_1152_p3;
wire   [12:0] tmp_fu_1173_p55;
wire   [4:0] tmp_fu_1173_p56;
wire   [0:0] or_ln117_339_fu_1160_p2;
wire   [12:0] tmp_fu_1173_p57;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] tmp_fu_1173_p1;
wire   [4:0] tmp_fu_1173_p3;
wire   [4:0] tmp_fu_1173_p5;
wire   [4:0] tmp_fu_1173_p7;
wire   [4:0] tmp_fu_1173_p9;
wire   [4:0] tmp_fu_1173_p11;
wire   [4:0] tmp_fu_1173_p13;
wire   [4:0] tmp_fu_1173_p15;
wire   [4:0] tmp_fu_1173_p17;
wire   [4:0] tmp_fu_1173_p19;
wire   [4:0] tmp_fu_1173_p21;
wire   [4:0] tmp_fu_1173_p23;
wire   [4:0] tmp_fu_1173_p25;
wire   [4:0] tmp_fu_1173_p27;
wire   [4:0] tmp_fu_1173_p29;
wire   [4:0] tmp_fu_1173_p31;
wire  signed [4:0] tmp_fu_1173_p33;
wire  signed [4:0] tmp_fu_1173_p35;
wire  signed [4:0] tmp_fu_1173_p37;
wire  signed [4:0] tmp_fu_1173_p39;
wire  signed [4:0] tmp_fu_1173_p41;
wire  signed [4:0] tmp_fu_1173_p43;
wire  signed [4:0] tmp_fu_1173_p45;
wire  signed [4:0] tmp_fu_1173_p47;
wire  signed [4:0] tmp_fu_1173_p49;
wire  signed [4:0] tmp_fu_1173_p51;
wire  signed [4:0] tmp_fu_1173_p53;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_55_5_13_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 13 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 13 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 13 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 13 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 13 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 13 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 13 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 13 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 13 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 13 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 13 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 13 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 13 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 13 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 13 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 13 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 13 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 13 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 13 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 13 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 13 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 13 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 13 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 13 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 13 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 13 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 13 ),
    .def_WIDTH( 13 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 13 ))
sparsemux_55_5_13_1_1_U1849(
    .din0(13'd735),
    .din1(13'd45),
    .din2(13'd915),
    .din3(13'd190),
    .din4(13'd7953),
    .din5(13'd91),
    .din6(13'd399),
    .din7(13'd18),
    .din8(13'd8173),
    .din9(13'd29),
    .din10(13'd8039),
    .din11(13'd8128),
    .din12(13'd742),
    .din13(13'd469),
    .din14(13'd7593),
    .din15(13'd2474),
    .din16(13'd102),
    .din17(13'd7784),
    .din18(13'd840),
    .din19(13'd162),
    .din20(13'd6657),
    .din21(13'd360),
    .din22(13'd7710),
    .din23(13'd305),
    .din24(13'd7866),
    .din25(13'd739),
    .din26(13'd8119),
    .def(tmp_fu_1173_p55),
    .sel(tmp_fu_1173_p56),
    .dout(tmp_fu_1173_p57)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln104_67_reg_1345 <= and_ln104_67_fu_594_p2;
        and_ln104_68_reg_1351 <= and_ln104_68_fu_612_p2;
        and_ln104_69_reg_1358 <= and_ln104_69_fu_630_p2;
        icmp_ln86_348_reg_1297 <= icmp_ln86_348_fu_426_p2;
        icmp_ln86_349_reg_1303 <= icmp_ln86_349_fu_432_p2;
        icmp_ln86_351_reg_1309 <= icmp_ln86_351_fu_444_p2;
        icmp_ln86_358_reg_1315 <= icmp_ln86_358_fu_486_p2;
        icmp_ln86_359_reg_1320 <= icmp_ln86_359_fu_492_p2;
        icmp_ln86_360_reg_1325 <= icmp_ln86_360_fu_498_p2;
        icmp_ln86_361_reg_1330 <= icmp_ln86_361_fu_504_p2;
        icmp_ln86_362_reg_1335 <= icmp_ln86_362_fu_510_p2;
        icmp_ln86_363_reg_1340 <= icmp_ln86_363_fu_516_p2;
        or_ln117_327_reg_1365 <= or_ln117_327_fu_924_p2;
        or_ln117_331_reg_1376 <= or_ln117_331_fu_946_p2;
        select_ln117_343_reg_1371 <= select_ln117_343_fu_938_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln102_326_fu_546_p2 = (xor_ln104_fu_522_p2 & icmp_ln86_340_fu_378_p2);

assign and_ln102_327_fu_564_p2 = (icmp_ln86_341_fu_384_p2 & and_ln102_fu_528_p2);

assign and_ln102_328_fu_582_p2 = (icmp_ln86_342_fu_390_p2 & and_ln104_fu_540_p2);

assign and_ln102_329_fu_600_p2 = (icmp_ln86_343_fu_396_p2 & and_ln102_326_fu_546_p2);

assign and_ln102_330_fu_618_p2 = (icmp_ln86_344_fu_402_p2 & and_ln104_65_fu_558_p2);

assign and_ln102_331_fu_636_p2 = (icmp_ln86_345_fu_408_p2 & and_ln102_327_fu_564_p2);

assign and_ln102_332_fu_648_p2 = (icmp_ln86_346_fu_414_p2 & and_ln104_66_fu_576_p2);

assign and_ln102_333_fu_660_p2 = (icmp_ln86_347_fu_420_p2 & and_ln102_328_fu_582_p2);

assign and_ln102_334_fu_952_p2 = (icmp_ln86_348_reg_1297 & and_ln104_67_reg_1345);

assign and_ln102_335_fu_961_p2 = (icmp_ln86_349_reg_1303 & and_ln104_68_reg_1351);

assign and_ln102_336_fu_672_p2 = (icmp_ln86_350_fu_438_p2 & and_ln102_330_fu_618_p2);

assign and_ln102_337_fu_970_p2 = (icmp_ln86_351_reg_1309 & and_ln104_69_reg_1358);

assign and_ln102_338_fu_678_p2 = (icmp_ln86_352_fu_450_p2 & and_ln102_331_fu_636_p2);

assign and_ln102_339_fu_690_p2 = (and_ln102_350_fu_684_p2 & and_ln102_327_fu_564_p2);

assign and_ln102_340_fu_696_p2 = (icmp_ln86_354_fu_462_p2 & and_ln102_332_fu_648_p2);

assign and_ln102_341_fu_708_p2 = (and_ln104_66_fu_576_p2 & and_ln102_351_fu_702_p2);

assign and_ln102_342_fu_714_p2 = (icmp_ln86_356_fu_474_p2 & and_ln102_333_fu_660_p2);

assign and_ln102_343_fu_726_p2 = (and_ln102_352_fu_720_p2 & and_ln102_328_fu_582_p2);

assign and_ln102_344_fu_979_p2 = (icmp_ln86_358_reg_1315 & and_ln102_334_fu_952_p2);

assign and_ln102_345_fu_989_p2 = (and_ln104_67_reg_1345 & and_ln102_353_fu_984_p2);

assign and_ln102_346_fu_994_p2 = (icmp_ln86_360_reg_1325 & and_ln102_335_fu_961_p2);

assign and_ln102_347_fu_1004_p2 = (and_ln104_68_reg_1351 & and_ln102_354_fu_999_p2);

assign and_ln102_348_fu_1009_p2 = (icmp_ln86_362_reg_1335 & and_ln102_337_fu_970_p2);

assign and_ln102_349_fu_1019_p2 = (and_ln104_69_reg_1358 & and_ln102_355_fu_1014_p2);

assign and_ln102_350_fu_684_p2 = (xor_ln104_169_fu_642_p2 & icmp_ln86_353_fu_456_p2);

assign and_ln102_351_fu_702_p2 = (xor_ln104_170_fu_654_p2 & icmp_ln86_355_fu_468_p2);

assign and_ln102_352_fu_720_p2 = (xor_ln104_171_fu_666_p2 & icmp_ln86_357_fu_480_p2);

assign and_ln102_353_fu_984_p2 = (xor_ln104_172_fu_956_p2 & icmp_ln86_359_reg_1320);

assign and_ln102_354_fu_999_p2 = (xor_ln104_173_fu_965_p2 & icmp_ln86_361_reg_1330);

assign and_ln102_355_fu_1014_p2 = (xor_ln104_174_fu_974_p2 & icmp_ln86_363_reg_1340);

assign and_ln102_fu_528_p2 = (icmp_ln86_fu_366_p2 & icmp_ln86_339_fu_372_p2);

assign and_ln104_65_fu_558_p2 = (xor_ln104_fu_522_p2 & xor_ln104_164_fu_552_p2);

assign and_ln104_66_fu_576_p2 = (xor_ln104_165_fu_570_p2 & and_ln102_fu_528_p2);

assign and_ln104_67_fu_594_p2 = (xor_ln104_166_fu_588_p2 & and_ln104_fu_540_p2);

assign and_ln104_68_fu_612_p2 = (xor_ln104_167_fu_606_p2 & and_ln102_326_fu_546_p2);

assign and_ln104_69_fu_630_p2 = (xor_ln104_168_fu_624_p2 & and_ln104_65_fu_558_p2);

assign and_ln104_fu_540_p2 = (xor_ln104_163_fu_534_p2 & icmp_ln86_fu_366_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((or_ln117_339_fu_1160_p2[0:0] == 1'b1) ? tmp_fu_1173_p57 : 13'd0);

assign icmp_ln86_339_fu_372_p2 = (($signed(x_1_val) < $signed(18'd200189)) ? 1'b1 : 1'b0);

assign icmp_ln86_340_fu_378_p2 = (($signed(x_42_val) < $signed(18'd214)) ? 1'b1 : 1'b0);

assign icmp_ln86_341_fu_384_p2 = (($signed(x_52_val) < $signed(18'd20993)) ? 1'b1 : 1'b0);

assign icmp_ln86_342_fu_390_p2 = (($signed(x_19_val) < $signed(18'd6291)) ? 1'b1 : 1'b0);

assign icmp_ln86_343_fu_396_p2 = (($signed(x_47_val) < $signed(18'd77635)) ? 1'b1 : 1'b0);

assign icmp_ln86_344_fu_402_p2 = (($signed(x_23_val) < $signed(18'd34)) ? 1'b1 : 1'b0);

assign icmp_ln86_345_fu_408_p2 = (($signed(x_50_val) < $signed(18'd13459)) ? 1'b1 : 1'b0);

assign icmp_ln86_346_fu_414_p2 = (($signed(x_25_val) < $signed(18'd367)) ? 1'b1 : 1'b0);

assign icmp_ln86_347_fu_420_p2 = (($signed(x_18_val) < $signed(18'd1666)) ? 1'b1 : 1'b0);

assign icmp_ln86_348_fu_426_p2 = (($signed(x_19_val) < $signed(18'd12204)) ? 1'b1 : 1'b0);

assign icmp_ln86_349_fu_432_p2 = (($signed(x_3_val) < $signed(18'd87242)) ? 1'b1 : 1'b0);

assign icmp_ln86_350_fu_438_p2 = (($signed(x_11_val) < $signed(18'd711)) ? 1'b1 : 1'b0);

assign icmp_ln86_351_fu_444_p2 = (($signed(x_5_val) < $signed(18'd38832)) ? 1'b1 : 1'b0);

assign icmp_ln86_352_fu_450_p2 = (($signed(x_8_val) < $signed(18'd196)) ? 1'b1 : 1'b0);

assign icmp_ln86_353_fu_456_p2 = (($signed(x_10_val) < $signed(18'd838)) ? 1'b1 : 1'b0);

assign icmp_ln86_354_fu_462_p2 = (($signed(x_3_val) < $signed(18'd83492)) ? 1'b1 : 1'b0);

assign icmp_ln86_355_fu_468_p2 = (($signed(x_50_val) < $signed(18'd21770)) ? 1'b1 : 1'b0);

assign icmp_ln86_356_fu_474_p2 = (($signed(x_18_val) < $signed(18'd1188)) ? 1'b1 : 1'b0);

assign icmp_ln86_357_fu_480_p2 = (($signed(x_3_val) < $signed(18'd87045)) ? 1'b1 : 1'b0);

assign icmp_ln86_358_fu_486_p2 = (($signed(x_39_val) < $signed(18'd2101)) ? 1'b1 : 1'b0);

assign icmp_ln86_359_fu_492_p2 = (($signed(x_40_val) < $signed(18'd1751)) ? 1'b1 : 1'b0);

assign icmp_ln86_360_fu_498_p2 = (($signed(x_51_val) < $signed(18'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_361_fu_504_p2 = (($signed(x_5_val) < $signed(18'd22967)) ? 1'b1 : 1'b0);

assign icmp_ln86_362_fu_510_p2 = (($signed(x_9_val) < $signed(18'd803)) ? 1'b1 : 1'b0);

assign icmp_ln86_363_fu_516_p2 = (($signed(x_44_val) < $signed(18'd54)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_366_p2 = (($signed(x_34_val) < $signed(18'd493)) ? 1'b1 : 1'b0);

assign or_ln117_315_fu_748_p2 = (and_ln102_330_fu_618_p2 | and_ln102_329_fu_600_p2);

assign or_ln117_316_fu_762_p2 = (or_ln117_315_fu_748_p2 | and_ln102_338_fu_678_p2);

assign or_ln117_317_fu_780_p2 = (or_ln117_315_fu_748_p2 | and_ln102_331_fu_636_p2);

assign or_ln117_318_fu_794_p2 = (or_ln117_317_fu_780_p2 | and_ln102_339_fu_690_p2);

assign or_ln117_319_fu_808_p2 = (or_ln117_315_fu_748_p2 | and_ln102_327_fu_564_p2);

assign or_ln117_320_fu_822_p2 = (or_ln117_319_fu_808_p2 | and_ln102_340_fu_696_p2);

assign or_ln117_321_fu_840_p2 = (or_ln117_319_fu_808_p2 | and_ln102_332_fu_648_p2);

assign or_ln117_322_fu_854_p2 = (or_ln117_321_fu_840_p2 | and_ln102_341_fu_708_p2);

assign or_ln117_323_fu_868_p2 = (or_ln117_315_fu_748_p2 | and_ln102_fu_528_p2);

assign or_ln117_324_fu_882_p2 = (or_ln117_323_fu_868_p2 | and_ln102_342_fu_714_p2);

assign or_ln117_325_fu_896_p2 = (or_ln117_323_fu_868_p2 | and_ln102_333_fu_660_p2);

assign or_ln117_326_fu_910_p2 = (or_ln117_325_fu_896_p2 | and_ln102_343_fu_726_p2);

assign or_ln117_327_fu_924_p2 = (or_ln117_323_fu_868_p2 | and_ln102_328_fu_582_p2);

assign or_ln117_328_fu_1024_p2 = (or_ln117_327_reg_1365 | and_ln102_344_fu_979_p2);

assign or_ln117_329_fu_1032_p2 = (or_ln117_327_reg_1365 | and_ln102_334_fu_952_p2);

assign or_ln117_330_fu_1045_p2 = (or_ln117_329_fu_1032_p2 | and_ln102_345_fu_989_p2);

assign or_ln117_331_fu_946_p2 = (or_ln117_315_fu_748_p2 | icmp_ln86_fu_366_p2);

assign or_ln117_332_fu_1067_p2 = (or_ln117_331_reg_1376 | and_ln102_346_fu_994_p2);

assign or_ln117_333_fu_1079_p2 = (or_ln117_331_reg_1376 | and_ln102_335_fu_961_p2);

assign or_ln117_334_fu_1092_p2 = (or_ln117_333_fu_1079_p2 | and_ln102_347_fu_1004_p2);

assign or_ln117_335_fu_1106_p2 = (or_ln117_331_reg_1376 | and_ln104_68_reg_1351);

assign or_ln117_336_fu_1118_p2 = (or_ln117_335_fu_1106_p2 | and_ln102_348_fu_1009_p2);

assign or_ln117_337_fu_1132_p2 = (or_ln117_335_fu_1106_p2 | and_ln102_337_fu_970_p2);

assign or_ln117_338_fu_1146_p2 = (or_ln117_337_fu_1132_p2 | and_ln102_349_fu_1019_p2);

assign or_ln117_339_fu_1160_p2 = (or_ln117_335_fu_1106_p2 | and_ln104_69_reg_1358);

assign or_ln117_fu_732_p2 = (and_ln102_336_fu_672_p2 | and_ln102_329_fu_600_p2);

assign select_ln117_331_fu_768_p3 = ((or_ln117_315_fu_748_p2[0:0] == 1'b1) ? select_ln117_fu_754_p3 : 2'd3);

assign select_ln117_332_fu_786_p3 = ((or_ln117_316_fu_762_p2[0:0] == 1'b1) ? zext_ln117_36_fu_776_p1 : 3'd4);

assign select_ln117_333_fu_800_p3 = ((or_ln117_317_fu_780_p2[0:0] == 1'b1) ? select_ln117_332_fu_786_p3 : 3'd5);

assign select_ln117_334_fu_814_p3 = ((or_ln117_318_fu_794_p2[0:0] == 1'b1) ? select_ln117_333_fu_800_p3 : 3'd6);

assign select_ln117_335_fu_828_p3 = ((or_ln117_319_fu_808_p2[0:0] == 1'b1) ? select_ln117_334_fu_814_p3 : 3'd7);

assign select_ln117_336_fu_846_p3 = ((or_ln117_320_fu_822_p2[0:0] == 1'b1) ? zext_ln117_37_fu_836_p1 : 4'd8);

assign select_ln117_337_fu_860_p3 = ((or_ln117_321_fu_840_p2[0:0] == 1'b1) ? select_ln117_336_fu_846_p3 : 4'd9);

assign select_ln117_338_fu_874_p3 = ((or_ln117_322_fu_854_p2[0:0] == 1'b1) ? select_ln117_337_fu_860_p3 : 4'd10);

assign select_ln117_339_fu_888_p3 = ((or_ln117_323_fu_868_p2[0:0] == 1'b1) ? select_ln117_338_fu_874_p3 : 4'd11);

assign select_ln117_340_fu_902_p3 = ((or_ln117_324_fu_882_p2[0:0] == 1'b1) ? select_ln117_339_fu_888_p3 : 4'd12);

assign select_ln117_341_fu_916_p3 = ((or_ln117_325_fu_896_p2[0:0] == 1'b1) ? select_ln117_340_fu_902_p3 : 4'd13);

assign select_ln117_342_fu_930_p3 = ((or_ln117_326_fu_910_p2[0:0] == 1'b1) ? select_ln117_341_fu_916_p3 : 4'd14);

assign select_ln117_343_fu_938_p3 = ((or_ln117_327_fu_924_p2[0:0] == 1'b1) ? select_ln117_342_fu_930_p3 : 4'd15);

assign select_ln117_344_fu_1037_p3 = ((or_ln117_328_fu_1024_p2[0:0] == 1'b1) ? zext_ln117_38_fu_1029_p1 : 5'd16);

assign select_ln117_345_fu_1051_p3 = ((or_ln117_329_fu_1032_p2[0:0] == 1'b1) ? select_ln117_344_fu_1037_p3 : 5'd17);

assign select_ln117_346_fu_1059_p3 = ((or_ln117_330_fu_1045_p2[0:0] == 1'b1) ? select_ln117_345_fu_1051_p3 : 5'd18);

assign select_ln117_347_fu_1072_p3 = ((or_ln117_331_reg_1376[0:0] == 1'b1) ? select_ln117_346_fu_1059_p3 : 5'd19);

assign select_ln117_348_fu_1084_p3 = ((or_ln117_332_fu_1067_p2[0:0] == 1'b1) ? select_ln117_347_fu_1072_p3 : 5'd20);

assign select_ln117_349_fu_1098_p3 = ((or_ln117_333_fu_1079_p2[0:0] == 1'b1) ? select_ln117_348_fu_1084_p3 : 5'd21);

assign select_ln117_350_fu_1110_p3 = ((or_ln117_334_fu_1092_p2[0:0] == 1'b1) ? select_ln117_349_fu_1098_p3 : 5'd22);

assign select_ln117_351_fu_1124_p3 = ((or_ln117_335_fu_1106_p2[0:0] == 1'b1) ? select_ln117_350_fu_1110_p3 : 5'd23);

assign select_ln117_352_fu_1138_p3 = ((or_ln117_336_fu_1118_p2[0:0] == 1'b1) ? select_ln117_351_fu_1124_p3 : 5'd24);

assign select_ln117_353_fu_1152_p3 = ((or_ln117_337_fu_1132_p2[0:0] == 1'b1) ? select_ln117_352_fu_1138_p3 : 5'd25);

assign select_ln117_fu_754_p3 = ((or_ln117_fu_732_p2[0:0] == 1'b1) ? zext_ln117_fu_744_p1 : 2'd2);

assign tmp_fu_1173_p55 = 'bx;

assign tmp_fu_1173_p56 = ((or_ln117_338_fu_1146_p2[0:0] == 1'b1) ? select_ln117_353_fu_1152_p3 : 5'd26);

assign xor_ln104_163_fu_534_p2 = (icmp_ln86_339_fu_372_p2 ^ 1'd1);

assign xor_ln104_164_fu_552_p2 = (icmp_ln86_340_fu_378_p2 ^ 1'd1);

assign xor_ln104_165_fu_570_p2 = (icmp_ln86_341_fu_384_p2 ^ 1'd1);

assign xor_ln104_166_fu_588_p2 = (icmp_ln86_342_fu_390_p2 ^ 1'd1);

assign xor_ln104_167_fu_606_p2 = (icmp_ln86_343_fu_396_p2 ^ 1'd1);

assign xor_ln104_168_fu_624_p2 = (icmp_ln86_344_fu_402_p2 ^ 1'd1);

assign xor_ln104_169_fu_642_p2 = (icmp_ln86_345_fu_408_p2 ^ 1'd1);

assign xor_ln104_170_fu_654_p2 = (icmp_ln86_346_fu_414_p2 ^ 1'd1);

assign xor_ln104_171_fu_666_p2 = (icmp_ln86_347_fu_420_p2 ^ 1'd1);

assign xor_ln104_172_fu_956_p2 = (icmp_ln86_348_reg_1297 ^ 1'd1);

assign xor_ln104_173_fu_965_p2 = (icmp_ln86_349_reg_1303 ^ 1'd1);

assign xor_ln104_174_fu_974_p2 = (icmp_ln86_351_reg_1309 ^ 1'd1);

assign xor_ln104_fu_522_p2 = (icmp_ln86_fu_366_p2 ^ 1'd1);

assign xor_ln117_fu_738_p2 = (1'd1 ^ and_ln102_329_fu_600_p2);

assign zext_ln117_36_fu_776_p1 = select_ln117_331_fu_768_p3;

assign zext_ln117_37_fu_836_p1 = select_ln117_335_fu_828_p3;

assign zext_ln117_38_fu_1029_p1 = select_ln117_343_reg_1371;

assign zext_ln117_fu_744_p1 = xor_ln117_fu_738_p2;

endmodule //my_prj_decision_function_13
