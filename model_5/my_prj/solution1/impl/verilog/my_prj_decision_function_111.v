// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_111 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_2_val,
        x_3_val,
        x_7_val,
        x_8_val,
        x_11_val,
        x_13_val,
        x_15_val,
        x_17_val,
        x_19_val,
        x_25_val,
        x_30_val,
        x_34_val,
        x_36_val,
        x_37_val,
        x_47_val,
        x_49_val,
        x_50_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_2_val;
input  [17:0] x_3_val;
input  [17:0] x_7_val;
input  [17:0] x_8_val;
input  [17:0] x_11_val;
input  [17:0] x_13_val;
input  [17:0] x_15_val;
input  [17:0] x_17_val;
input  [17:0] x_19_val;
input  [17:0] x_25_val;
input  [17:0] x_30_val;
input  [17:0] x_34_val;
input  [17:0] x_36_val;
input  [17:0] x_37_val;
input  [17:0] x_47_val;
input  [17:0] x_49_val;
input  [17:0] x_50_val;
input  [17:0] x_52_val;
output  [12:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_380_p2;
reg   [0:0] icmp_ln86_reg_1429;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_1728_fu_392_p2;
reg   [0:0] icmp_ln86_1728_reg_1434;
wire   [0:0] icmp_ln86_1730_fu_404_p2;
reg   [0:0] icmp_ln86_1730_reg_1440;
wire   [0:0] icmp_ln86_1731_fu_410_p2;
reg   [0:0] icmp_ln86_1731_reg_1445;
wire   [0:0] icmp_ln86_1735_fu_434_p2;
reg   [0:0] icmp_ln86_1735_reg_1451;
wire   [0:0] icmp_ln86_1736_fu_440_p2;
reg   [0:0] icmp_ln86_1736_reg_1457;
wire   [0:0] icmp_ln86_1737_fu_446_p2;
reg   [0:0] icmp_ln86_1737_reg_1463;
wire   [0:0] icmp_ln86_1738_fu_452_p2;
reg   [0:0] icmp_ln86_1738_reg_1469;
wire   [0:0] icmp_ln86_1739_fu_458_p2;
reg   [0:0] icmp_ln86_1739_reg_1475;
wire   [0:0] icmp_ln86_1747_fu_506_p2;
reg   [0:0] icmp_ln86_1747_reg_1480;
wire   [0:0] icmp_ln86_1748_fu_512_p2;
reg   [0:0] icmp_ln86_1748_reg_1485;
wire   [0:0] icmp_ln86_1749_fu_518_p2;
reg   [0:0] icmp_ln86_1749_reg_1490;
wire   [0:0] icmp_ln86_1750_fu_524_p2;
reg   [0:0] icmp_ln86_1750_reg_1495;
wire   [0:0] icmp_ln86_1751_fu_530_p2;
reg   [0:0] icmp_ln86_1751_reg_1500;
wire   [0:0] icmp_ln86_1752_fu_536_p2;
reg   [0:0] icmp_ln86_1752_reg_1505;
wire   [0:0] icmp_ln86_1753_fu_542_p2;
reg   [0:0] icmp_ln86_1753_reg_1510;
wire   [0:0] xor_ln104_829_fu_578_p2;
reg   [0:0] xor_ln104_829_reg_1515;
wire   [0:0] or_ln117_1575_fu_898_p2;
reg   [0:0] or_ln117_1575_reg_1520;
wire   [4:0] select_ln117_1687_fu_916_p3;
reg   [4:0] select_ln117_1687_reg_1529;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln86_1727_fu_386_p2;
wire   [0:0] xor_ln104_826_fu_548_p2;
wire   [0:0] icmp_ln86_1729_fu_398_p2;
wire   [0:0] xor_ln104_828_fu_560_p2;
wire   [0:0] and_ln104_fu_554_p2;
wire   [0:0] icmp_ln86_1732_fu_416_p2;
wire   [0:0] and_ln104_328_fu_566_p2;
wire   [0:0] icmp_ln86_1733_fu_422_p2;
wire   [0:0] and_ln102_1926_fu_572_p2;
wire   [0:0] icmp_ln86_1734_fu_428_p2;
wire   [0:0] and_ln104_329_fu_584_p2;
wire   [0:0] and_ln102_1929_fu_590_p2;
wire   [0:0] icmp_ln86_1740_fu_464_p2;
wire   [0:0] xor_ln104_831_fu_596_p2;
wire   [0:0] and_ln102_1938_fu_638_p2;
wire   [0:0] icmp_ln86_1741_fu_470_p2;
wire   [0:0] and_ln102_1930_fu_602_p2;
wire   [0:0] icmp_ln86_1742_fu_476_p2;
wire   [0:0] and_ln102_1941_fu_656_p2;
wire   [0:0] icmp_ln86_1743_fu_482_p2;
wire   [0:0] and_ln102_1931_fu_608_p2;
wire   [0:0] icmp_ln86_1744_fu_488_p2;
wire   [0:0] xor_ln104_832_fu_614_p2;
wire   [0:0] and_ln102_1944_fu_674_p2;
wire   [0:0] icmp_ln86_1745_fu_494_p2;
wire   [0:0] and_ln102_1932_fu_620_p2;
wire   [0:0] icmp_ln86_1746_fu_500_p2;
wire   [0:0] xor_ln104_833_fu_626_p2;
wire   [0:0] and_ln102_1947_fu_692_p2;
wire   [0:0] and_ln102_1937_fu_632_p2;
wire   [0:0] xor_ln117_fu_704_p2;
wire   [0:0] and_ln102_1939_fu_644_p2;
wire   [1:0] zext_ln117_fu_710_p1;
wire   [0:0] or_ln117_fu_714_p2;
wire   [1:0] select_ln117_fu_720_p3;
wire   [1:0] select_ln117_1674_fu_728_p3;
wire   [0:0] and_ln102_1940_fu_650_p2;
wire   [2:0] zext_ln117_186_fu_736_p1;
wire   [0:0] or_ln117_1564_fu_740_p2;
wire   [2:0] select_ln117_1675_fu_746_p3;
wire   [0:0] or_ln117_1565_fu_754_p2;
wire   [0:0] and_ln102_1942_fu_662_p2;
wire   [2:0] select_ln117_1676_fu_760_p3;
wire   [0:0] or_ln117_1566_fu_768_p2;
wire   [2:0] select_ln117_1677_fu_774_p3;
wire   [2:0] select_ln117_1678_fu_788_p3;
wire   [0:0] or_ln117_1567_fu_782_p2;
wire   [0:0] and_ln102_1943_fu_668_p2;
wire   [3:0] zext_ln117_187_fu_796_p1;
wire   [0:0] or_ln117_1568_fu_800_p2;
wire   [3:0] select_ln117_1679_fu_806_p3;
wire   [0:0] or_ln117_1569_fu_814_p2;
wire   [0:0] and_ln102_1945_fu_680_p2;
wire   [3:0] select_ln117_1680_fu_820_p3;
wire   [0:0] or_ln117_1570_fu_828_p2;
wire   [3:0] select_ln117_1681_fu_834_p3;
wire   [0:0] or_ln117_1571_fu_842_p2;
wire   [0:0] and_ln102_1946_fu_686_p2;
wire   [3:0] select_ln117_1682_fu_848_p3;
wire   [0:0] or_ln117_1572_fu_856_p2;
wire   [3:0] select_ln117_1683_fu_862_p3;
wire   [0:0] or_ln117_1573_fu_870_p2;
wire   [0:0] and_ln102_1948_fu_698_p2;
wire   [3:0] select_ln117_1684_fu_876_p3;
wire   [0:0] or_ln117_1574_fu_884_p2;
wire   [3:0] select_ln117_1685_fu_890_p3;
wire   [3:0] select_ln117_1686_fu_904_p3;
wire   [4:0] zext_ln117_188_fu_912_p1;
wire   [0:0] xor_ln104_fu_924_p2;
wire   [0:0] xor_ln104_827_fu_934_p2;
wire   [0:0] and_ln102_fu_929_p2;
wire   [0:0] and_ln104_327_fu_939_p2;
wire   [0:0] xor_ln104_830_fu_960_p2;
wire   [0:0] and_ln102_1927_fu_945_p2;
wire   [0:0] and_ln104_330_fu_950_p2;
wire   [0:0] and_ln102_1928_fu_955_p2;
wire   [0:0] and_ln104_331_fu_965_p2;
wire   [0:0] and_ln102_1933_fu_971_p2;
wire   [0:0] xor_ln104_834_fu_976_p2;
wire   [0:0] and_ln102_1950_fu_1016_p2;
wire   [0:0] and_ln102_1934_fu_981_p2;
wire   [0:0] xor_ln104_835_fu_986_p2;
wire   [0:0] and_ln102_1953_fu_1032_p2;
wire   [0:0] and_ln102_1935_fu_991_p2;
wire   [0:0] xor_ln104_836_fu_996_p2;
wire   [0:0] and_ln102_1956_fu_1048_p2;
wire   [0:0] and_ln102_1936_fu_1001_p2;
wire   [0:0] xor_ln104_837_fu_1006_p2;
wire   [0:0] and_ln102_1959_fu_1064_p2;
wire   [0:0] and_ln102_1949_fu_1011_p2;
wire   [0:0] or_ln117_1576_fu_1075_p2;
wire   [0:0] or_ln117_1577_fu_1080_p2;
wire   [0:0] and_ln102_1951_fu_1021_p2;
wire   [4:0] select_ln117_1688_fu_1085_p3;
wire   [0:0] or_ln117_1578_fu_1092_p2;
wire   [4:0] select_ln117_1689_fu_1098_p3;
wire   [0:0] or_ln117_1579_fu_1106_p2;
wire   [0:0] and_ln102_1952_fu_1027_p2;
wire   [4:0] select_ln117_1690_fu_1111_p3;
wire   [0:0] or_ln117_1580_fu_1119_p2;
wire   [4:0] select_ln117_1691_fu_1125_p3;
wire   [0:0] or_ln117_1581_fu_1133_p2;
wire   [0:0] and_ln102_1954_fu_1037_p2;
wire   [4:0] select_ln117_1692_fu_1139_p3;
wire   [0:0] or_ln117_1582_fu_1147_p2;
wire   [4:0] select_ln117_1693_fu_1153_p3;
wire   [0:0] or_ln117_1583_fu_1161_p2;
wire   [0:0] and_ln102_1955_fu_1043_p2;
wire   [4:0] select_ln117_1694_fu_1166_p3;
wire   [0:0] or_ln117_1584_fu_1174_p2;
wire   [4:0] select_ln117_1695_fu_1180_p3;
wire   [0:0] or_ln117_1585_fu_1188_p2;
wire   [0:0] and_ln102_1957_fu_1053_p2;
wire   [4:0] select_ln117_1696_fu_1194_p3;
wire   [0:0] or_ln117_1586_fu_1202_p2;
wire   [4:0] select_ln117_1697_fu_1208_p3;
wire   [0:0] or_ln117_1587_fu_1216_p2;
wire   [0:0] and_ln102_1958_fu_1059_p2;
wire   [4:0] select_ln117_1698_fu_1222_p3;
wire   [0:0] or_ln117_1588_fu_1230_p2;
wire   [4:0] select_ln117_1699_fu_1236_p3;
wire   [0:0] or_ln117_1589_fu_1244_p2;
wire   [0:0] and_ln102_1960_fu_1069_p2;
wire   [4:0] select_ln117_1700_fu_1250_p3;
wire   [0:0] or_ln117_1590_fu_1258_p2;
wire   [4:0] select_ln117_1701_fu_1264_p3;
wire   [12:0] tmp_fu_1285_p65;
wire   [4:0] tmp_fu_1285_p66;
wire   [0:0] or_ln117_1591_fu_1272_p2;
wire   [12:0] tmp_fu_1285_p67;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] tmp_fu_1285_p1;
wire   [4:0] tmp_fu_1285_p3;
wire   [4:0] tmp_fu_1285_p5;
wire   [4:0] tmp_fu_1285_p7;
wire   [4:0] tmp_fu_1285_p9;
wire   [4:0] tmp_fu_1285_p11;
wire   [4:0] tmp_fu_1285_p13;
wire   [4:0] tmp_fu_1285_p15;
wire   [4:0] tmp_fu_1285_p17;
wire   [4:0] tmp_fu_1285_p19;
wire   [4:0] tmp_fu_1285_p21;
wire   [4:0] tmp_fu_1285_p23;
wire   [4:0] tmp_fu_1285_p25;
wire   [4:0] tmp_fu_1285_p27;
wire   [4:0] tmp_fu_1285_p29;
wire   [4:0] tmp_fu_1285_p31;
wire  signed [4:0] tmp_fu_1285_p33;
wire  signed [4:0] tmp_fu_1285_p35;
wire  signed [4:0] tmp_fu_1285_p37;
wire  signed [4:0] tmp_fu_1285_p39;
wire  signed [4:0] tmp_fu_1285_p41;
wire  signed [4:0] tmp_fu_1285_p43;
wire  signed [4:0] tmp_fu_1285_p45;
wire  signed [4:0] tmp_fu_1285_p47;
wire  signed [4:0] tmp_fu_1285_p49;
wire  signed [4:0] tmp_fu_1285_p51;
wire  signed [4:0] tmp_fu_1285_p53;
wire  signed [4:0] tmp_fu_1285_p55;
wire  signed [4:0] tmp_fu_1285_p57;
wire  signed [4:0] tmp_fu_1285_p59;
wire  signed [4:0] tmp_fu_1285_p61;
wire  signed [4:0] tmp_fu_1285_p63;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_65_5_13_1_1_x3 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 13 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 13 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 13 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 13 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 13 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 13 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 13 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 13 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 13 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 13 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 13 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 13 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 13 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 13 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 13 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 13 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 13 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 13 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 13 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 13 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 13 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 13 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 13 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 13 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 13 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 13 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 13 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 13 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 13 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 13 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 13 ),
    .CASE31( 5'h1F ),
    .din31_WIDTH( 13 ),
    .def_WIDTH( 13 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 13 ))
sparsemux_65_5_13_1_1_x3_U197(
    .din0(13'd514),
    .din1(13'd7932),
    .din2(13'd1641),
    .din3(13'd814),
    .din4(13'd7735),
    .din5(13'd572),
    .din6(13'd903),
    .din7(13'd217),
    .din8(13'd266),
    .din9(13'd7740),
    .din10(13'd3042),
    .din11(13'd323),
    .din12(13'd8115),
    .din13(13'd7894),
    .din14(13'd79),
    .din15(13'd8171),
    .din16(13'd87),
    .din17(13'd7710),
    .din18(13'd1469),
    .din19(13'd8002),
    .din20(13'd210),
    .din21(13'd8063),
    .din22(13'd426),
    .din23(13'd176),
    .din24(13'd7802),
    .din25(13'd746),
    .din26(13'd409),
    .din27(13'd790),
    .din28(13'd1091),
    .din29(13'd1931),
    .din30(13'd1736),
    .din31(13'd8184),
    .def(tmp_fu_1285_p65),
    .sel(tmp_fu_1285_p66),
    .dout(tmp_fu_1285_p67)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_1728_reg_1434 <= icmp_ln86_1728_fu_392_p2;
        icmp_ln86_1730_reg_1440 <= icmp_ln86_1730_fu_404_p2;
        icmp_ln86_1731_reg_1445 <= icmp_ln86_1731_fu_410_p2;
        icmp_ln86_1735_reg_1451 <= icmp_ln86_1735_fu_434_p2;
        icmp_ln86_1736_reg_1457 <= icmp_ln86_1736_fu_440_p2;
        icmp_ln86_1737_reg_1463 <= icmp_ln86_1737_fu_446_p2;
        icmp_ln86_1738_reg_1469 <= icmp_ln86_1738_fu_452_p2;
        icmp_ln86_1739_reg_1475 <= icmp_ln86_1739_fu_458_p2;
        icmp_ln86_1747_reg_1480 <= icmp_ln86_1747_fu_506_p2;
        icmp_ln86_1748_reg_1485 <= icmp_ln86_1748_fu_512_p2;
        icmp_ln86_1749_reg_1490 <= icmp_ln86_1749_fu_518_p2;
        icmp_ln86_1750_reg_1495 <= icmp_ln86_1750_fu_524_p2;
        icmp_ln86_1751_reg_1500 <= icmp_ln86_1751_fu_530_p2;
        icmp_ln86_1752_reg_1505 <= icmp_ln86_1752_fu_536_p2;
        icmp_ln86_1753_reg_1510 <= icmp_ln86_1753_fu_542_p2;
        icmp_ln86_reg_1429 <= icmp_ln86_fu_380_p2;
        or_ln117_1575_reg_1520 <= or_ln117_1575_fu_898_p2;
        select_ln117_1687_reg_1529 <= select_ln117_1687_fu_916_p3;
        xor_ln104_829_reg_1515 <= xor_ln104_829_fu_578_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln102_1926_fu_572_p2 = (icmp_ln86_1730_fu_404_p2 & and_ln104_fu_554_p2);

assign and_ln102_1927_fu_945_p2 = (icmp_ln86_1730_reg_1440 & and_ln102_fu_929_p2);

assign and_ln102_1928_fu_955_p2 = (icmp_ln86_1731_reg_1445 & and_ln104_327_fu_939_p2);

assign and_ln102_1929_fu_590_p2 = (icmp_ln86_1732_fu_416_p2 & icmp_ln86_1729_fu_398_p2);

assign and_ln102_1930_fu_602_p2 = (icmp_ln86_1730_fu_404_p2 & and_ln104_328_fu_566_p2);

assign and_ln102_1931_fu_608_p2 = (icmp_ln86_1733_fu_422_p2 & and_ln102_1926_fu_572_p2);

assign and_ln102_1932_fu_620_p2 = (icmp_ln86_1734_fu_428_p2 & and_ln104_329_fu_584_p2);

assign and_ln102_1933_fu_971_p2 = (icmp_ln86_1735_reg_1451 & and_ln102_1927_fu_945_p2);

assign and_ln102_1934_fu_981_p2 = (icmp_ln86_1736_reg_1457 & and_ln104_330_fu_950_p2);

assign and_ln102_1935_fu_991_p2 = (icmp_ln86_1737_reg_1463 & and_ln102_1928_fu_955_p2);

assign and_ln102_1936_fu_1001_p2 = (icmp_ln86_1738_reg_1469 & and_ln104_331_fu_965_p2);

assign and_ln102_1937_fu_632_p2 = (icmp_ln86_1739_fu_458_p2 & and_ln102_1929_fu_590_p2);

assign and_ln102_1938_fu_638_p2 = (xor_ln104_831_fu_596_p2 & icmp_ln86_1740_fu_464_p2);

assign and_ln102_1939_fu_644_p2 = (icmp_ln86_1729_fu_398_p2 & and_ln102_1938_fu_638_p2);

assign and_ln102_1940_fu_650_p2 = (icmp_ln86_1741_fu_470_p2 & and_ln102_1930_fu_602_p2);

assign and_ln102_1941_fu_656_p2 = (xor_ln104_829_fu_578_p2 & icmp_ln86_1742_fu_476_p2);

assign and_ln102_1942_fu_662_p2 = (and_ln104_328_fu_566_p2 & and_ln102_1941_fu_656_p2);

assign and_ln102_1943_fu_668_p2 = (icmp_ln86_1743_fu_482_p2 & and_ln102_1931_fu_608_p2);

assign and_ln102_1944_fu_674_p2 = (xor_ln104_832_fu_614_p2 & icmp_ln86_1744_fu_488_p2);

assign and_ln102_1945_fu_680_p2 = (and_ln102_1944_fu_674_p2 & and_ln102_1926_fu_572_p2);

assign and_ln102_1946_fu_686_p2 = (icmp_ln86_1745_fu_494_p2 & and_ln102_1932_fu_620_p2);

assign and_ln102_1947_fu_692_p2 = (xor_ln104_833_fu_626_p2 & icmp_ln86_1746_fu_500_p2);

assign and_ln102_1948_fu_698_p2 = (and_ln104_329_fu_584_p2 & and_ln102_1947_fu_692_p2);

assign and_ln102_1949_fu_1011_p2 = (icmp_ln86_1739_reg_1475 & and_ln102_1933_fu_971_p2);

assign and_ln102_1950_fu_1016_p2 = (xor_ln104_834_fu_976_p2 & icmp_ln86_1747_reg_1480);

assign and_ln102_1951_fu_1021_p2 = (and_ln102_1950_fu_1016_p2 & and_ln102_1927_fu_945_p2);

assign and_ln102_1952_fu_1027_p2 = (icmp_ln86_1748_reg_1485 & and_ln102_1934_fu_981_p2);

assign and_ln102_1953_fu_1032_p2 = (xor_ln104_835_fu_986_p2 & icmp_ln86_1749_reg_1490);

assign and_ln102_1954_fu_1037_p2 = (and_ln104_330_fu_950_p2 & and_ln102_1953_fu_1032_p2);

assign and_ln102_1955_fu_1043_p2 = (icmp_ln86_1750_reg_1495 & and_ln102_1935_fu_991_p2);

assign and_ln102_1956_fu_1048_p2 = (xor_ln104_836_fu_996_p2 & icmp_ln86_1751_reg_1500);

assign and_ln102_1957_fu_1053_p2 = (and_ln102_1956_fu_1048_p2 & and_ln102_1928_fu_955_p2);

assign and_ln102_1958_fu_1059_p2 = (icmp_ln86_1752_reg_1505 & and_ln102_1936_fu_1001_p2);

assign and_ln102_1959_fu_1064_p2 = (xor_ln104_837_fu_1006_p2 & icmp_ln86_1753_reg_1510);

assign and_ln102_1960_fu_1069_p2 = (and_ln104_331_fu_965_p2 & and_ln102_1959_fu_1064_p2);

assign and_ln102_fu_929_p2 = (xor_ln104_fu_924_p2 & icmp_ln86_1728_reg_1434);

assign and_ln104_327_fu_939_p2 = (xor_ln104_fu_924_p2 & xor_ln104_827_fu_934_p2);

assign and_ln104_328_fu_566_p2 = (xor_ln104_828_fu_560_p2 & icmp_ln86_1727_fu_386_p2);

assign and_ln104_329_fu_584_p2 = (xor_ln104_829_fu_578_p2 & and_ln104_fu_554_p2);

assign and_ln104_330_fu_950_p2 = (xor_ln104_829_reg_1515 & and_ln102_fu_929_p2);

assign and_ln104_331_fu_965_p2 = (xor_ln104_830_fu_960_p2 & and_ln104_327_fu_939_p2);

assign and_ln104_fu_554_p2 = (xor_ln104_826_fu_548_p2 & icmp_ln86_fu_380_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((or_ln117_1591_fu_1272_p2[0:0] == 1'b1) ? tmp_fu_1285_p67 : 13'd0);

assign icmp_ln86_1727_fu_386_p2 = (($signed(x_2_val) < $signed(18'd260983)) ? 1'b1 : 1'b0);

assign icmp_ln86_1728_fu_392_p2 = (($signed(x_2_val) < $signed(18'd1579)) ? 1'b1 : 1'b0);

assign icmp_ln86_1729_fu_398_p2 = (($signed(x_2_val) < $signed(18'd260489)) ? 1'b1 : 1'b0);

assign icmp_ln86_1730_fu_404_p2 = (($signed(x_17_val) < $signed(18'd5)) ? 1'b1 : 1'b0);

assign icmp_ln86_1731_fu_410_p2 = (($signed(x_3_val) < $signed(18'd106317)) ? 1'b1 : 1'b0);

assign icmp_ln86_1732_fu_416_p2 = (($signed(x_47_val) < $signed(18'd95325)) ? 1'b1 : 1'b0);

assign icmp_ln86_1733_fu_422_p2 = (($signed(x_15_val) < $signed(18'd22)) ? 1'b1 : 1'b0);

assign icmp_ln86_1734_fu_428_p2 = (($signed(x_11_val) < $signed(18'd485)) ? 1'b1 : 1'b0);

assign icmp_ln86_1735_fu_434_p2 = (($signed(x_7_val) < $signed(18'd9599)) ? 1'b1 : 1'b0);

assign icmp_ln86_1736_fu_440_p2 = (($signed(x_52_val) < $signed(18'd45569)) ? 1'b1 : 1'b0);

assign icmp_ln86_1737_fu_446_p2 = (($signed(x_25_val) < $signed(18'd85)) ? 1'b1 : 1'b0);

assign icmp_ln86_1738_fu_452_p2 = (($signed(x_8_val) < $signed(18'd8003)) ? 1'b1 : 1'b0);

assign icmp_ln86_1739_fu_458_p2 = (($signed(x_36_val) < $signed(18'd6)) ? 1'b1 : 1'b0);

assign icmp_ln86_1740_fu_464_p2 = (($signed(x_13_val) < $signed(18'd477)) ? 1'b1 : 1'b0);

assign icmp_ln86_1741_fu_470_p2 = (($signed(x_7_val) < $signed(18'd9293)) ? 1'b1 : 1'b0);

assign icmp_ln86_1742_fu_476_p2 = (($signed(x_19_val) < $signed(18'd452)) ? 1'b1 : 1'b0);

assign icmp_ln86_1743_fu_482_p2 = (($signed(x_3_val) < $signed(18'd68176)) ? 1'b1 : 1'b0);

assign icmp_ln86_1744_fu_488_p2 = (($signed(x_1_val) < $signed(18'd258648)) ? 1'b1 : 1'b0);

assign icmp_ln86_1745_fu_494_p2 = (($signed(x_50_val) < $signed(18'd165336)) ? 1'b1 : 1'b0);

assign icmp_ln86_1746_fu_500_p2 = (($signed(x_13_val) < $signed(18'd442)) ? 1'b1 : 1'b0);

assign icmp_ln86_1747_fu_506_p2 = (($signed(x_37_val) < $signed(18'd46)) ? 1'b1 : 1'b0);

assign icmp_ln86_1748_fu_512_p2 = (($signed(x_49_val) < $signed(18'd76259)) ? 1'b1 : 1'b0);

assign icmp_ln86_1749_fu_518_p2 = (($signed(x_34_val) < $signed(18'd477)) ? 1'b1 : 1'b0);

assign icmp_ln86_1750_fu_524_p2 = (($signed(x_30_val) < $signed(18'd912)) ? 1'b1 : 1'b0);

assign icmp_ln86_1751_fu_530_p2 = (($signed(x_52_val) < $signed(18'd50689)) ? 1'b1 : 1'b0);

assign icmp_ln86_1752_fu_536_p2 = (($signed(x_2_val) < $signed(18'd1705)) ? 1'b1 : 1'b0);

assign icmp_ln86_1753_fu_542_p2 = (($signed(x_47_val) < $signed(18'd122394)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_380_p2 = (($signed(x_2_val) < $signed(18'd1121)) ? 1'b1 : 1'b0);

assign or_ln117_1564_fu_740_p2 = (icmp_ln86_1729_fu_398_p2 | and_ln102_1940_fu_650_p2);

assign or_ln117_1565_fu_754_p2 = (icmp_ln86_1729_fu_398_p2 | and_ln102_1930_fu_602_p2);

assign or_ln117_1566_fu_768_p2 = (or_ln117_1565_fu_754_p2 | and_ln102_1942_fu_662_p2);

assign or_ln117_1567_fu_782_p2 = (icmp_ln86_1729_fu_398_p2 | and_ln104_328_fu_566_p2);

assign or_ln117_1568_fu_800_p2 = (or_ln117_1567_fu_782_p2 | and_ln102_1943_fu_668_p2);

assign or_ln117_1569_fu_814_p2 = (or_ln117_1567_fu_782_p2 | and_ln102_1931_fu_608_p2);

assign or_ln117_1570_fu_828_p2 = (or_ln117_1569_fu_814_p2 | and_ln102_1945_fu_680_p2);

assign or_ln117_1571_fu_842_p2 = (or_ln117_1567_fu_782_p2 | and_ln102_1926_fu_572_p2);

assign or_ln117_1572_fu_856_p2 = (or_ln117_1571_fu_842_p2 | and_ln102_1946_fu_686_p2);

assign or_ln117_1573_fu_870_p2 = (or_ln117_1571_fu_842_p2 | and_ln102_1932_fu_620_p2);

assign or_ln117_1574_fu_884_p2 = (or_ln117_1573_fu_870_p2 | and_ln102_1948_fu_698_p2);

assign or_ln117_1575_fu_898_p2 = (or_ln117_1567_fu_782_p2 | and_ln104_fu_554_p2);

assign or_ln117_1576_fu_1075_p2 = (or_ln117_1575_reg_1520 | and_ln102_1949_fu_1011_p2);

assign or_ln117_1577_fu_1080_p2 = (or_ln117_1575_reg_1520 | and_ln102_1933_fu_971_p2);

assign or_ln117_1578_fu_1092_p2 = (or_ln117_1577_fu_1080_p2 | and_ln102_1951_fu_1021_p2);

assign or_ln117_1579_fu_1106_p2 = (or_ln117_1575_reg_1520 | and_ln102_1927_fu_945_p2);

assign or_ln117_1580_fu_1119_p2 = (or_ln117_1579_fu_1106_p2 | and_ln102_1952_fu_1027_p2);

assign or_ln117_1581_fu_1133_p2 = (or_ln117_1579_fu_1106_p2 | and_ln102_1934_fu_981_p2);

assign or_ln117_1582_fu_1147_p2 = (or_ln117_1581_fu_1133_p2 | and_ln102_1954_fu_1037_p2);

assign or_ln117_1583_fu_1161_p2 = (or_ln117_1575_reg_1520 | and_ln102_fu_929_p2);

assign or_ln117_1584_fu_1174_p2 = (or_ln117_1583_fu_1161_p2 | and_ln102_1955_fu_1043_p2);

assign or_ln117_1585_fu_1188_p2 = (or_ln117_1583_fu_1161_p2 | and_ln102_1935_fu_991_p2);

assign or_ln117_1586_fu_1202_p2 = (or_ln117_1585_fu_1188_p2 | and_ln102_1957_fu_1053_p2);

assign or_ln117_1587_fu_1216_p2 = (or_ln117_1583_fu_1161_p2 | and_ln102_1928_fu_955_p2);

assign or_ln117_1588_fu_1230_p2 = (or_ln117_1587_fu_1216_p2 | and_ln102_1958_fu_1059_p2);

assign or_ln117_1589_fu_1244_p2 = (or_ln117_1587_fu_1216_p2 | and_ln102_1936_fu_1001_p2);

assign or_ln117_1590_fu_1258_p2 = (or_ln117_1589_fu_1244_p2 | and_ln102_1960_fu_1069_p2);

assign or_ln117_1591_fu_1272_p2 = (xor_ln104_fu_924_p2 | or_ln117_1575_reg_1520);

assign or_ln117_fu_714_p2 = (and_ln102_1939_fu_644_p2 | and_ln102_1929_fu_590_p2);

assign select_ln117_1674_fu_728_p3 = ((or_ln117_fu_714_p2[0:0] == 1'b1) ? select_ln117_fu_720_p3 : 2'd3);

assign select_ln117_1675_fu_746_p3 = ((icmp_ln86_1729_fu_398_p2[0:0] == 1'b1) ? zext_ln117_186_fu_736_p1 : 3'd4);

assign select_ln117_1676_fu_760_p3 = ((or_ln117_1564_fu_740_p2[0:0] == 1'b1) ? select_ln117_1675_fu_746_p3 : 3'd5);

assign select_ln117_1677_fu_774_p3 = ((or_ln117_1565_fu_754_p2[0:0] == 1'b1) ? select_ln117_1676_fu_760_p3 : 3'd6);

assign select_ln117_1678_fu_788_p3 = ((or_ln117_1566_fu_768_p2[0:0] == 1'b1) ? select_ln117_1677_fu_774_p3 : 3'd7);

assign select_ln117_1679_fu_806_p3 = ((or_ln117_1567_fu_782_p2[0:0] == 1'b1) ? zext_ln117_187_fu_796_p1 : 4'd8);

assign select_ln117_1680_fu_820_p3 = ((or_ln117_1568_fu_800_p2[0:0] == 1'b1) ? select_ln117_1679_fu_806_p3 : 4'd9);

assign select_ln117_1681_fu_834_p3 = ((or_ln117_1569_fu_814_p2[0:0] == 1'b1) ? select_ln117_1680_fu_820_p3 : 4'd10);

assign select_ln117_1682_fu_848_p3 = ((or_ln117_1570_fu_828_p2[0:0] == 1'b1) ? select_ln117_1681_fu_834_p3 : 4'd11);

assign select_ln117_1683_fu_862_p3 = ((or_ln117_1571_fu_842_p2[0:0] == 1'b1) ? select_ln117_1682_fu_848_p3 : 4'd12);

assign select_ln117_1684_fu_876_p3 = ((or_ln117_1572_fu_856_p2[0:0] == 1'b1) ? select_ln117_1683_fu_862_p3 : 4'd13);

assign select_ln117_1685_fu_890_p3 = ((or_ln117_1573_fu_870_p2[0:0] == 1'b1) ? select_ln117_1684_fu_876_p3 : 4'd14);

assign select_ln117_1686_fu_904_p3 = ((or_ln117_1574_fu_884_p2[0:0] == 1'b1) ? select_ln117_1685_fu_890_p3 : 4'd15);

assign select_ln117_1687_fu_916_p3 = ((or_ln117_1575_fu_898_p2[0:0] == 1'b1) ? zext_ln117_188_fu_912_p1 : 5'd16);

assign select_ln117_1688_fu_1085_p3 = ((or_ln117_1576_fu_1075_p2[0:0] == 1'b1) ? select_ln117_1687_reg_1529 : 5'd17);

assign select_ln117_1689_fu_1098_p3 = ((or_ln117_1577_fu_1080_p2[0:0] == 1'b1) ? select_ln117_1688_fu_1085_p3 : 5'd18);

assign select_ln117_1690_fu_1111_p3 = ((or_ln117_1578_fu_1092_p2[0:0] == 1'b1) ? select_ln117_1689_fu_1098_p3 : 5'd19);

assign select_ln117_1691_fu_1125_p3 = ((or_ln117_1579_fu_1106_p2[0:0] == 1'b1) ? select_ln117_1690_fu_1111_p3 : 5'd20);

assign select_ln117_1692_fu_1139_p3 = ((or_ln117_1580_fu_1119_p2[0:0] == 1'b1) ? select_ln117_1691_fu_1125_p3 : 5'd21);

assign select_ln117_1693_fu_1153_p3 = ((or_ln117_1581_fu_1133_p2[0:0] == 1'b1) ? select_ln117_1692_fu_1139_p3 : 5'd22);

assign select_ln117_1694_fu_1166_p3 = ((or_ln117_1582_fu_1147_p2[0:0] == 1'b1) ? select_ln117_1693_fu_1153_p3 : 5'd23);

assign select_ln117_1695_fu_1180_p3 = ((or_ln117_1583_fu_1161_p2[0:0] == 1'b1) ? select_ln117_1694_fu_1166_p3 : 5'd24);

assign select_ln117_1696_fu_1194_p3 = ((or_ln117_1584_fu_1174_p2[0:0] == 1'b1) ? select_ln117_1695_fu_1180_p3 : 5'd25);

assign select_ln117_1697_fu_1208_p3 = ((or_ln117_1585_fu_1188_p2[0:0] == 1'b1) ? select_ln117_1696_fu_1194_p3 : 5'd26);

assign select_ln117_1698_fu_1222_p3 = ((or_ln117_1586_fu_1202_p2[0:0] == 1'b1) ? select_ln117_1697_fu_1208_p3 : 5'd27);

assign select_ln117_1699_fu_1236_p3 = ((or_ln117_1587_fu_1216_p2[0:0] == 1'b1) ? select_ln117_1698_fu_1222_p3 : 5'd28);

assign select_ln117_1700_fu_1250_p3 = ((or_ln117_1588_fu_1230_p2[0:0] == 1'b1) ? select_ln117_1699_fu_1236_p3 : 5'd29);

assign select_ln117_1701_fu_1264_p3 = ((or_ln117_1589_fu_1244_p2[0:0] == 1'b1) ? select_ln117_1700_fu_1250_p3 : 5'd30);

assign select_ln117_fu_720_p3 = ((and_ln102_1929_fu_590_p2[0:0] == 1'b1) ? zext_ln117_fu_710_p1 : 2'd2);

assign tmp_fu_1285_p65 = 'bx;

assign tmp_fu_1285_p66 = ((or_ln117_1590_fu_1258_p2[0:0] == 1'b1) ? select_ln117_1701_fu_1264_p3 : 5'd31);

assign xor_ln104_826_fu_548_p2 = (icmp_ln86_1727_fu_386_p2 ^ 1'd1);

assign xor_ln104_827_fu_934_p2 = (icmp_ln86_1728_reg_1434 ^ 1'd1);

assign xor_ln104_828_fu_560_p2 = (icmp_ln86_1729_fu_398_p2 ^ 1'd1);

assign xor_ln104_829_fu_578_p2 = (icmp_ln86_1730_fu_404_p2 ^ 1'd1);

assign xor_ln104_830_fu_960_p2 = (icmp_ln86_1731_reg_1445 ^ 1'd1);

assign xor_ln104_831_fu_596_p2 = (icmp_ln86_1732_fu_416_p2 ^ 1'd1);

assign xor_ln104_832_fu_614_p2 = (icmp_ln86_1733_fu_422_p2 ^ 1'd1);

assign xor_ln104_833_fu_626_p2 = (icmp_ln86_1734_fu_428_p2 ^ 1'd1);

assign xor_ln104_834_fu_976_p2 = (icmp_ln86_1735_reg_1451 ^ 1'd1);

assign xor_ln104_835_fu_986_p2 = (icmp_ln86_1736_reg_1457 ^ 1'd1);

assign xor_ln104_836_fu_996_p2 = (icmp_ln86_1737_reg_1463 ^ 1'd1);

assign xor_ln104_837_fu_1006_p2 = (icmp_ln86_1738_reg_1469 ^ 1'd1);

assign xor_ln104_fu_924_p2 = (icmp_ln86_reg_1429 ^ 1'd1);

assign xor_ln117_fu_704_p2 = (1'd1 ^ and_ln102_1937_fu_632_p2);

assign zext_ln117_186_fu_736_p1 = select_ln117_1674_fu_728_p3;

assign zext_ln117_187_fu_796_p1 = select_ln117_1678_fu_788_p3;

assign zext_ln117_188_fu_912_p1 = select_ln117_1686_fu_904_p3;

assign zext_ln117_fu_710_p1 = xor_ln117_fu_704_p2;

endmodule //my_prj_decision_function_111
