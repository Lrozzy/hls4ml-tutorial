// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_84 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_2_val,
        x_3_val,
        x_8_val,
        x_9_val,
        x_13_val,
        x_14_val,
        x_16_val,
        x_19_val,
        x_23_val,
        x_29_val,
        x_30_val,
        x_33_val,
        x_34_val,
        x_46_val,
        x_47_val,
        x_48_val,
        x_49_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_2_val;
input  [17:0] x_3_val;
input  [17:0] x_8_val;
input  [17:0] x_9_val;
input  [17:0] x_13_val;
input  [17:0] x_14_val;
input  [17:0] x_16_val;
input  [17:0] x_19_val;
input  [17:0] x_23_val;
input  [17:0] x_29_val;
input  [17:0] x_30_val;
input  [17:0] x_33_val;
input  [17:0] x_34_val;
input  [17:0] x_46_val;
input  [17:0] x_47_val;
input  [17:0] x_48_val;
input  [17:0] x_49_val;
input  [17:0] x_52_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_384_p2;
reg   [0:0] icmp_ln86_reg_1450;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_421_fu_396_p2;
reg   [0:0] icmp_ln86_421_reg_1459;
wire   [0:0] icmp_ln86_424_fu_414_p2;
reg   [0:0] icmp_ln86_424_reg_1465;
wire   [0:0] icmp_ln86_425_fu_420_p2;
reg   [0:0] icmp_ln86_425_reg_1471;
wire   [0:0] icmp_ln86_430_fu_450_p2;
reg   [0:0] icmp_ln86_430_reg_1477;
wire   [0:0] icmp_ln86_431_fu_456_p2;
reg   [0:0] icmp_ln86_431_reg_1483;
wire   [0:0] icmp_ln86_432_fu_462_p2;
reg   [0:0] icmp_ln86_432_reg_1489;
wire   [0:0] icmp_ln86_433_fu_468_p2;
reg   [0:0] icmp_ln86_433_reg_1495;
wire   [0:0] icmp_ln86_442_fu_522_p2;
reg   [0:0] icmp_ln86_442_reg_1501;
wire   [0:0] icmp_ln86_443_fu_528_p2;
reg   [0:0] icmp_ln86_443_reg_1506;
wire   [0:0] icmp_ln86_444_fu_534_p2;
reg   [0:0] icmp_ln86_444_reg_1511;
wire   [0:0] icmp_ln86_445_fu_540_p2;
reg   [0:0] icmp_ln86_445_reg_1516;
wire   [0:0] icmp_ln86_446_fu_546_p2;
reg   [0:0] icmp_ln86_446_reg_1521;
wire   [0:0] icmp_ln86_447_fu_552_p2;
reg   [0:0] icmp_ln86_447_reg_1526;
wire   [0:0] icmp_ln86_448_fu_558_p2;
reg   [0:0] icmp_ln86_448_reg_1531;
wire   [0:0] icmp_ln86_449_fu_564_p2;
reg   [0:0] icmp_ln86_449_reg_1536;
wire   [4:0] select_ln117_421_fu_944_p3;
reg   [4:0] select_ln117_421_reg_1541;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln86_420_fu_390_p2;
wire   [0:0] xor_ln104_198_fu_576_p2;
wire   [0:0] icmp_ln86_422_fu_402_p2;
wire   [0:0] and_ln102_fu_570_p2;
wire   [0:0] xor_ln104_200_fu_594_p2;
wire   [0:0] icmp_ln86_423_fu_408_p2;
wire   [0:0] and_ln104_fu_582_p2;
wire   [0:0] xor_ln104_201_fu_612_p2;
wire   [0:0] icmp_ln86_426_fu_426_p2;
wire   [0:0] and_ln102_517_fu_588_p2;
wire   [0:0] icmp_ln86_427_fu_432_p2;
wire   [0:0] and_ln104_75_fu_600_p2;
wire   [0:0] icmp_ln86_428_fu_438_p2;
wire   [0:0] and_ln102_518_fu_606_p2;
wire   [0:0] icmp_ln86_429_fu_444_p2;
wire   [0:0] and_ln104_76_fu_618_p2;
wire   [0:0] icmp_ln86_434_fu_474_p2;
wire   [0:0] and_ln102_521_fu_624_p2;
wire   [0:0] icmp_ln86_435_fu_480_p2;
wire   [0:0] xor_ln104_204_fu_630_p2;
wire   [0:0] and_ln102_530_fu_678_p2;
wire   [0:0] icmp_ln86_436_fu_486_p2;
wire   [0:0] and_ln102_522_fu_636_p2;
wire   [0:0] icmp_ln86_437_fu_492_p2;
wire   [0:0] xor_ln104_205_fu_642_p2;
wire   [0:0] and_ln102_533_fu_696_p2;
wire   [0:0] icmp_ln86_438_fu_498_p2;
wire   [0:0] and_ln102_523_fu_648_p2;
wire   [0:0] icmp_ln86_439_fu_504_p2;
wire   [0:0] xor_ln104_206_fu_654_p2;
wire   [0:0] and_ln102_536_fu_714_p2;
wire   [0:0] icmp_ln86_440_fu_510_p2;
wire   [0:0] and_ln102_524_fu_660_p2;
wire   [0:0] icmp_ln86_441_fu_516_p2;
wire   [0:0] xor_ln104_207_fu_666_p2;
wire   [0:0] and_ln102_539_fu_732_p2;
wire   [0:0] and_ln102_529_fu_672_p2;
wire   [0:0] xor_ln117_fu_744_p2;
wire   [0:0] and_ln102_531_fu_684_p2;
wire   [1:0] zext_ln117_fu_750_p1;
wire   [0:0] or_ln117_fu_754_p2;
wire   [1:0] select_ln117_fu_760_p3;
wire   [1:0] select_ln117_408_fu_768_p3;
wire   [0:0] and_ln102_532_fu_690_p2;
wire   [2:0] zext_ln117_46_fu_776_p1;
wire   [0:0] or_ln117_368_fu_780_p2;
wire   [2:0] select_ln117_409_fu_786_p3;
wire   [0:0] or_ln117_369_fu_794_p2;
wire   [0:0] and_ln102_534_fu_702_p2;
wire   [2:0] select_ln117_410_fu_800_p3;
wire   [0:0] or_ln117_370_fu_808_p2;
wire   [2:0] select_ln117_411_fu_814_p3;
wire   [2:0] select_ln117_412_fu_822_p3;
wire   [0:0] and_ln102_535_fu_708_p2;
wire   [3:0] zext_ln117_47_fu_830_p1;
wire   [0:0] or_ln117_371_fu_834_p2;
wire   [3:0] select_ln117_413_fu_840_p3;
wire   [0:0] or_ln117_372_fu_848_p2;
wire   [0:0] and_ln102_537_fu_720_p2;
wire   [3:0] select_ln117_414_fu_854_p3;
wire   [0:0] or_ln117_373_fu_862_p2;
wire   [3:0] select_ln117_415_fu_868_p3;
wire   [0:0] or_ln117_374_fu_876_p2;
wire   [0:0] and_ln102_538_fu_726_p2;
wire   [3:0] select_ln117_416_fu_882_p3;
wire   [0:0] or_ln117_375_fu_890_p2;
wire   [3:0] select_ln117_417_fu_896_p3;
wire   [0:0] or_ln117_376_fu_904_p2;
wire   [0:0] and_ln102_540_fu_738_p2;
wire   [3:0] select_ln117_418_fu_910_p3;
wire   [0:0] or_ln117_377_fu_918_p2;
wire   [3:0] select_ln117_419_fu_924_p3;
wire   [3:0] select_ln117_420_fu_932_p3;
wire   [4:0] zext_ln117_48_fu_940_p1;
wire   [0:0] xor_ln104_fu_952_p2;
wire   [0:0] xor_ln104_199_fu_962_p2;
wire   [0:0] and_ln102_516_fu_957_p2;
wire   [0:0] xor_ln104_202_fu_978_p2;
wire   [0:0] and_ln104_74_fu_967_p2;
wire   [0:0] xor_ln104_203_fu_994_p2;
wire   [0:0] and_ln102_519_fu_973_p2;
wire   [0:0] and_ln104_77_fu_983_p2;
wire   [0:0] and_ln102_520_fu_989_p2;
wire   [0:0] and_ln104_78_fu_999_p2;
wire   [0:0] and_ln102_525_fu_1005_p2;
wire   [0:0] xor_ln104_208_fu_1010_p2;
wire   [0:0] and_ln102_542_fu_1050_p2;
wire   [0:0] and_ln102_526_fu_1015_p2;
wire   [0:0] xor_ln104_209_fu_1020_p2;
wire   [0:0] and_ln102_545_fu_1066_p2;
wire   [0:0] and_ln102_527_fu_1025_p2;
wire   [0:0] xor_ln104_210_fu_1030_p2;
wire   [0:0] and_ln102_548_fu_1082_p2;
wire   [0:0] and_ln102_528_fu_1035_p2;
wire   [0:0] xor_ln104_211_fu_1040_p2;
wire   [0:0] and_ln102_551_fu_1098_p2;
wire   [0:0] and_ln102_541_fu_1045_p2;
wire   [0:0] or_ln117_378_fu_1109_p2;
wire   [0:0] or_ln117_379_fu_1114_p2;
wire   [0:0] and_ln102_543_fu_1055_p2;
wire   [4:0] select_ln117_422_fu_1119_p3;
wire   [0:0] or_ln117_380_fu_1126_p2;
wire   [4:0] select_ln117_423_fu_1132_p3;
wire   [0:0] or_ln117_381_fu_1140_p2;
wire   [0:0] and_ln102_544_fu_1061_p2;
wire   [4:0] select_ln117_424_fu_1145_p3;
wire   [0:0] or_ln117_382_fu_1153_p2;
wire   [4:0] select_ln117_425_fu_1159_p3;
wire   [0:0] or_ln117_383_fu_1167_p2;
wire   [0:0] and_ln102_546_fu_1071_p2;
wire   [4:0] select_ln117_426_fu_1173_p3;
wire   [0:0] or_ln117_384_fu_1181_p2;
wire   [4:0] select_ln117_427_fu_1187_p3;
wire   [0:0] or_ln117_385_fu_1195_p2;
wire   [0:0] and_ln102_547_fu_1077_p2;
wire   [4:0] select_ln117_428_fu_1200_p3;
wire   [0:0] or_ln117_386_fu_1208_p2;
wire   [4:0] select_ln117_429_fu_1214_p3;
wire   [0:0] or_ln117_387_fu_1222_p2;
wire   [0:0] and_ln102_549_fu_1087_p2;
wire   [4:0] select_ln117_430_fu_1228_p3;
wire   [0:0] or_ln117_388_fu_1236_p2;
wire   [4:0] select_ln117_431_fu_1242_p3;
wire   [0:0] or_ln117_389_fu_1250_p2;
wire   [0:0] and_ln102_550_fu_1093_p2;
wire   [4:0] select_ln117_432_fu_1256_p3;
wire   [0:0] or_ln117_390_fu_1264_p2;
wire   [4:0] select_ln117_433_fu_1270_p3;
wire   [0:0] or_ln117_391_fu_1278_p2;
wire   [0:0] and_ln102_552_fu_1103_p2;
wire   [4:0] select_ln117_434_fu_1284_p3;
wire   [0:0] or_ln117_392_fu_1292_p2;
wire   [4:0] select_ln117_435_fu_1298_p3;
wire   [11:0] agg_result_fu_1314_p65;
wire   [4:0] agg_result_fu_1314_p66;
wire   [11:0] agg_result_fu_1314_p67;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1314_p1;
wire   [4:0] agg_result_fu_1314_p3;
wire   [4:0] agg_result_fu_1314_p5;
wire   [4:0] agg_result_fu_1314_p7;
wire   [4:0] agg_result_fu_1314_p9;
wire   [4:0] agg_result_fu_1314_p11;
wire   [4:0] agg_result_fu_1314_p13;
wire   [4:0] agg_result_fu_1314_p15;
wire   [4:0] agg_result_fu_1314_p17;
wire   [4:0] agg_result_fu_1314_p19;
wire   [4:0] agg_result_fu_1314_p21;
wire   [4:0] agg_result_fu_1314_p23;
wire   [4:0] agg_result_fu_1314_p25;
wire   [4:0] agg_result_fu_1314_p27;
wire   [4:0] agg_result_fu_1314_p29;
wire   [4:0] agg_result_fu_1314_p31;
wire  signed [4:0] agg_result_fu_1314_p33;
wire  signed [4:0] agg_result_fu_1314_p35;
wire  signed [4:0] agg_result_fu_1314_p37;
wire  signed [4:0] agg_result_fu_1314_p39;
wire  signed [4:0] agg_result_fu_1314_p41;
wire  signed [4:0] agg_result_fu_1314_p43;
wire  signed [4:0] agg_result_fu_1314_p45;
wire  signed [4:0] agg_result_fu_1314_p47;
wire  signed [4:0] agg_result_fu_1314_p49;
wire  signed [4:0] agg_result_fu_1314_p51;
wire  signed [4:0] agg_result_fu_1314_p53;
wire  signed [4:0] agg_result_fu_1314_p55;
wire  signed [4:0] agg_result_fu_1314_p57;
wire  signed [4:0] agg_result_fu_1314_p59;
wire  signed [4:0] agg_result_fu_1314_p61;
wire  signed [4:0] agg_result_fu_1314_p63;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_65_5_12_1_1_x8 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 12 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 12 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 12 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 12 ),
    .CASE31( 5'h1F ),
    .din31_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_65_5_12_1_1_x8_U429(
    .din0(12'd3621),
    .din1(12'd401),
    .din2(12'd54),
    .din3(12'd3985),
    .din4(12'd32),
    .din5(12'd3620),
    .din6(12'd3922),
    .din7(12'd3713),
    .din8(12'd3975),
    .din9(12'd116),
    .din10(12'd241),
    .din11(12'd4094),
    .din12(12'd4027),
    .din13(12'd280),
    .din14(12'd3971),
    .din15(12'd3697),
    .din16(12'd3748),
    .din17(12'd1788),
    .din18(12'd3824),
    .din19(12'd539),
    .din20(12'd589),
    .din21(12'd3683),
    .din22(12'd3601),
    .din23(12'd4024),
    .din24(12'd3591),
    .din25(12'd486),
    .din26(12'd514),
    .din27(12'd3591),
    .din28(12'd3871),
    .din29(12'd581),
    .din30(12'd4095),
    .din31(12'd3703),
    .def(agg_result_fu_1314_p65),
    .sel(agg_result_fu_1314_p66),
    .dout(agg_result_fu_1314_p67)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_421_reg_1459 <= icmp_ln86_421_fu_396_p2;
        icmp_ln86_424_reg_1465 <= icmp_ln86_424_fu_414_p2;
        icmp_ln86_425_reg_1471 <= icmp_ln86_425_fu_420_p2;
        icmp_ln86_430_reg_1477 <= icmp_ln86_430_fu_450_p2;
        icmp_ln86_431_reg_1483 <= icmp_ln86_431_fu_456_p2;
        icmp_ln86_432_reg_1489 <= icmp_ln86_432_fu_462_p2;
        icmp_ln86_433_reg_1495 <= icmp_ln86_433_fu_468_p2;
        icmp_ln86_442_reg_1501 <= icmp_ln86_442_fu_522_p2;
        icmp_ln86_443_reg_1506 <= icmp_ln86_443_fu_528_p2;
        icmp_ln86_444_reg_1511 <= icmp_ln86_444_fu_534_p2;
        icmp_ln86_445_reg_1516 <= icmp_ln86_445_fu_540_p2;
        icmp_ln86_446_reg_1521 <= icmp_ln86_446_fu_546_p2;
        icmp_ln86_447_reg_1526 <= icmp_ln86_447_fu_552_p2;
        icmp_ln86_448_reg_1531 <= icmp_ln86_448_fu_558_p2;
        icmp_ln86_449_reg_1536 <= icmp_ln86_449_fu_564_p2;
        icmp_ln86_reg_1450 <= icmp_ln86_fu_384_p2;
        select_ln117_421_reg_1541 <= select_ln117_421_fu_944_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1314_p65 = 'bx;

assign agg_result_fu_1314_p66 = ((or_ln117_392_fu_1292_p2[0:0] == 1'b1) ? select_ln117_435_fu_1298_p3 : 5'd31);

assign and_ln102_516_fu_957_p2 = (xor_ln104_fu_952_p2 & icmp_ln86_421_reg_1459);

assign and_ln102_517_fu_588_p2 = (icmp_ln86_422_fu_402_p2 & and_ln102_fu_570_p2);

assign and_ln102_518_fu_606_p2 = (icmp_ln86_423_fu_408_p2 & and_ln104_fu_582_p2);

assign and_ln102_519_fu_973_p2 = (icmp_ln86_424_reg_1465 & and_ln102_516_fu_957_p2);

assign and_ln102_520_fu_989_p2 = (icmp_ln86_425_reg_1471 & and_ln104_74_fu_967_p2);

assign and_ln102_521_fu_624_p2 = (icmp_ln86_426_fu_426_p2 & and_ln102_517_fu_588_p2);

assign and_ln102_522_fu_636_p2 = (icmp_ln86_427_fu_432_p2 & and_ln104_75_fu_600_p2);

assign and_ln102_523_fu_648_p2 = (icmp_ln86_428_fu_438_p2 & and_ln102_518_fu_606_p2);

assign and_ln102_524_fu_660_p2 = (icmp_ln86_429_fu_444_p2 & and_ln104_76_fu_618_p2);

assign and_ln102_525_fu_1005_p2 = (icmp_ln86_430_reg_1477 & and_ln102_519_fu_973_p2);

assign and_ln102_526_fu_1015_p2 = (icmp_ln86_431_reg_1483 & and_ln104_77_fu_983_p2);

assign and_ln102_527_fu_1025_p2 = (icmp_ln86_432_reg_1489 & and_ln102_520_fu_989_p2);

assign and_ln102_528_fu_1035_p2 = (icmp_ln86_433_reg_1495 & and_ln104_78_fu_999_p2);

assign and_ln102_529_fu_672_p2 = (icmp_ln86_434_fu_474_p2 & and_ln102_521_fu_624_p2);

assign and_ln102_530_fu_678_p2 = (xor_ln104_204_fu_630_p2 & icmp_ln86_435_fu_480_p2);

assign and_ln102_531_fu_684_p2 = (and_ln102_530_fu_678_p2 & and_ln102_517_fu_588_p2);

assign and_ln102_532_fu_690_p2 = (icmp_ln86_436_fu_486_p2 & and_ln102_522_fu_636_p2);

assign and_ln102_533_fu_696_p2 = (xor_ln104_205_fu_642_p2 & icmp_ln86_437_fu_492_p2);

assign and_ln102_534_fu_702_p2 = (and_ln104_75_fu_600_p2 & and_ln102_533_fu_696_p2);

assign and_ln102_535_fu_708_p2 = (icmp_ln86_438_fu_498_p2 & and_ln102_523_fu_648_p2);

assign and_ln102_536_fu_714_p2 = (xor_ln104_206_fu_654_p2 & icmp_ln86_439_fu_504_p2);

assign and_ln102_537_fu_720_p2 = (and_ln102_536_fu_714_p2 & and_ln102_518_fu_606_p2);

assign and_ln102_538_fu_726_p2 = (icmp_ln86_440_fu_510_p2 & and_ln102_524_fu_660_p2);

assign and_ln102_539_fu_732_p2 = (xor_ln104_207_fu_666_p2 & icmp_ln86_441_fu_516_p2);

assign and_ln102_540_fu_738_p2 = (and_ln104_76_fu_618_p2 & and_ln102_539_fu_732_p2);

assign and_ln102_541_fu_1045_p2 = (icmp_ln86_442_reg_1501 & and_ln102_525_fu_1005_p2);

assign and_ln102_542_fu_1050_p2 = (xor_ln104_208_fu_1010_p2 & icmp_ln86_443_reg_1506);

assign and_ln102_543_fu_1055_p2 = (and_ln102_542_fu_1050_p2 & and_ln102_519_fu_973_p2);

assign and_ln102_544_fu_1061_p2 = (icmp_ln86_444_reg_1511 & and_ln102_526_fu_1015_p2);

assign and_ln102_545_fu_1066_p2 = (xor_ln104_209_fu_1020_p2 & icmp_ln86_445_reg_1516);

assign and_ln102_546_fu_1071_p2 = (and_ln104_77_fu_983_p2 & and_ln102_545_fu_1066_p2);

assign and_ln102_547_fu_1077_p2 = (icmp_ln86_446_reg_1521 & and_ln102_527_fu_1025_p2);

assign and_ln102_548_fu_1082_p2 = (xor_ln104_210_fu_1030_p2 & icmp_ln86_447_reg_1526);

assign and_ln102_549_fu_1087_p2 = (and_ln102_548_fu_1082_p2 & and_ln102_520_fu_989_p2);

assign and_ln102_550_fu_1093_p2 = (icmp_ln86_448_reg_1531 & and_ln102_528_fu_1035_p2);

assign and_ln102_551_fu_1098_p2 = (xor_ln104_211_fu_1040_p2 & icmp_ln86_449_reg_1536);

assign and_ln102_552_fu_1103_p2 = (and_ln104_78_fu_999_p2 & and_ln102_551_fu_1098_p2);

assign and_ln102_fu_570_p2 = (icmp_ln86_fu_384_p2 & icmp_ln86_420_fu_390_p2);

assign and_ln104_74_fu_967_p2 = (xor_ln104_fu_952_p2 & xor_ln104_199_fu_962_p2);

assign and_ln104_75_fu_600_p2 = (xor_ln104_200_fu_594_p2 & and_ln102_fu_570_p2);

assign and_ln104_76_fu_618_p2 = (xor_ln104_201_fu_612_p2 & and_ln104_fu_582_p2);

assign and_ln104_77_fu_983_p2 = (xor_ln104_202_fu_978_p2 & and_ln102_516_fu_957_p2);

assign and_ln104_78_fu_999_p2 = (xor_ln104_203_fu_994_p2 & and_ln104_74_fu_967_p2);

assign and_ln104_fu_582_p2 = (xor_ln104_198_fu_576_p2 & icmp_ln86_fu_384_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1314_p67;

assign icmp_ln86_420_fu_390_p2 = (($signed(x_1_val) < $signed(18'd233409)) ? 1'b1 : 1'b0);

assign icmp_ln86_421_fu_396_p2 = (($signed(x_1_val) < $signed(18'd4497)) ? 1'b1 : 1'b0);

assign icmp_ln86_422_fu_402_p2 = (($signed(x_9_val) < $signed(18'd910)) ? 1'b1 : 1'b0);

assign icmp_ln86_423_fu_408_p2 = (($signed(x_1_val) < $signed(18'd45145)) ? 1'b1 : 1'b0);

assign icmp_ln86_424_fu_414_p2 = (($signed(x_29_val) < $signed(18'd7808)) ? 1'b1 : 1'b0);

assign icmp_ln86_425_fu_420_p2 = (($signed(x_33_val) < $signed(18'd197)) ? 1'b1 : 1'b0);

assign icmp_ln86_426_fu_426_p2 = (($signed(x_1_val) < $signed(18'd101029)) ? 1'b1 : 1'b0);

assign icmp_ln86_427_fu_432_p2 = (($signed(x_1_val) < $signed(18'd189632)) ? 1'b1 : 1'b0);

assign icmp_ln86_428_fu_438_p2 = (($signed(x_29_val) < $signed(18'd5947)) ? 1'b1 : 1'b0);

assign icmp_ln86_429_fu_444_p2 = (($signed(x_13_val) < $signed(18'd455)) ? 1'b1 : 1'b0);

assign icmp_ln86_430_fu_450_p2 = (($signed(x_3_val) < $signed(18'd83851)) ? 1'b1 : 1'b0);

assign icmp_ln86_431_fu_456_p2 = (($signed(x_34_val) < $signed(18'd351)) ? 1'b1 : 1'b0);

assign icmp_ln86_432_fu_462_p2 = (($signed(x_14_val) < $signed(18'd88)) ? 1'b1 : 1'b0);

assign icmp_ln86_433_fu_468_p2 = (($signed(x_34_val) < $signed(18'd469)) ? 1'b1 : 1'b0);

assign icmp_ln86_434_fu_474_p2 = (($signed(x_8_val) < $signed(18'd3103)) ? 1'b1 : 1'b0);

assign icmp_ln86_435_fu_480_p2 = (($signed(x_52_val) < $signed(18'd32257)) ? 1'b1 : 1'b0);

assign icmp_ln86_436_fu_486_p2 = (($signed(x_2_val) < $signed(18'd260848)) ? 1'b1 : 1'b0);

assign icmp_ln86_437_fu_492_p2 = (($signed(x_16_val) < $signed(18'd107)) ? 1'b1 : 1'b0);

assign icmp_ln86_438_fu_498_p2 = (($signed(x_19_val) < $signed(18'd3013)) ? 1'b1 : 1'b0);

assign icmp_ln86_439_fu_504_p2 = (($signed(x_29_val) < $signed(18'd6699)) ? 1'b1 : 1'b0);

assign icmp_ln86_440_fu_510_p2 = (($signed(x_49_val) < $signed(18'd80032)) ? 1'b1 : 1'b0);

assign icmp_ln86_441_fu_516_p2 = (($signed(x_47_val) < $signed(18'd86219)) ? 1'b1 : 1'b0);

assign icmp_ln86_442_fu_522_p2 = (($signed(x_47_val) < $signed(18'd81950)) ? 1'b1 : 1'b0);

assign icmp_ln86_443_fu_528_p2 = (($signed(x_48_val) < $signed(18'd93077)) ? 1'b1 : 1'b0);

assign icmp_ln86_444_fu_534_p2 = (($signed(x_46_val) < $signed(18'd74)) ? 1'b1 : 1'b0);

assign icmp_ln86_445_fu_540_p2 = (($signed(x_33_val) < $signed(18'd974)) ? 1'b1 : 1'b0);

assign icmp_ln86_446_fu_546_p2 = (($signed(x_14_val) < $signed(18'd62)) ? 1'b1 : 1'b0);

assign icmp_ln86_447_fu_552_p2 = (($signed(x_23_val) < $signed(18'd47)) ? 1'b1 : 1'b0);

assign icmp_ln86_448_fu_558_p2 = (($signed(x_30_val) < $signed(18'd5071)) ? 1'b1 : 1'b0);

assign icmp_ln86_449_fu_564_p2 = (($signed(x_49_val) < $signed(18'd87365)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_384_p2 = (($signed(x_29_val) < $signed(18'd7302)) ? 1'b1 : 1'b0);

assign or_ln117_368_fu_780_p2 = (and_ln102_532_fu_690_p2 | and_ln102_517_fu_588_p2);

assign or_ln117_369_fu_794_p2 = (and_ln102_522_fu_636_p2 | and_ln102_517_fu_588_p2);

assign or_ln117_370_fu_808_p2 = (or_ln117_369_fu_794_p2 | and_ln102_534_fu_702_p2);

assign or_ln117_371_fu_834_p2 = (and_ln102_fu_570_p2 | and_ln102_535_fu_708_p2);

assign or_ln117_372_fu_848_p2 = (and_ln102_fu_570_p2 | and_ln102_523_fu_648_p2);

assign or_ln117_373_fu_862_p2 = (or_ln117_372_fu_848_p2 | and_ln102_537_fu_720_p2);

assign or_ln117_374_fu_876_p2 = (and_ln102_fu_570_p2 | and_ln102_518_fu_606_p2);

assign or_ln117_375_fu_890_p2 = (or_ln117_374_fu_876_p2 | and_ln102_538_fu_726_p2);

assign or_ln117_376_fu_904_p2 = (or_ln117_374_fu_876_p2 | and_ln102_524_fu_660_p2);

assign or_ln117_377_fu_918_p2 = (or_ln117_376_fu_904_p2 | and_ln102_540_fu_738_p2);

assign or_ln117_378_fu_1109_p2 = (icmp_ln86_reg_1450 | and_ln102_541_fu_1045_p2);

assign or_ln117_379_fu_1114_p2 = (icmp_ln86_reg_1450 | and_ln102_525_fu_1005_p2);

assign or_ln117_380_fu_1126_p2 = (or_ln117_379_fu_1114_p2 | and_ln102_543_fu_1055_p2);

assign or_ln117_381_fu_1140_p2 = (icmp_ln86_reg_1450 | and_ln102_519_fu_973_p2);

assign or_ln117_382_fu_1153_p2 = (or_ln117_381_fu_1140_p2 | and_ln102_544_fu_1061_p2);

assign or_ln117_383_fu_1167_p2 = (or_ln117_381_fu_1140_p2 | and_ln102_526_fu_1015_p2);

assign or_ln117_384_fu_1181_p2 = (or_ln117_383_fu_1167_p2 | and_ln102_546_fu_1071_p2);

assign or_ln117_385_fu_1195_p2 = (icmp_ln86_reg_1450 | and_ln102_516_fu_957_p2);

assign or_ln117_386_fu_1208_p2 = (or_ln117_385_fu_1195_p2 | and_ln102_547_fu_1077_p2);

assign or_ln117_387_fu_1222_p2 = (or_ln117_385_fu_1195_p2 | and_ln102_527_fu_1025_p2);

assign or_ln117_388_fu_1236_p2 = (or_ln117_387_fu_1222_p2 | and_ln102_549_fu_1087_p2);

assign or_ln117_389_fu_1250_p2 = (or_ln117_385_fu_1195_p2 | and_ln102_520_fu_989_p2);

assign or_ln117_390_fu_1264_p2 = (or_ln117_389_fu_1250_p2 | and_ln102_550_fu_1093_p2);

assign or_ln117_391_fu_1278_p2 = (or_ln117_389_fu_1250_p2 | and_ln102_528_fu_1035_p2);

assign or_ln117_392_fu_1292_p2 = (or_ln117_391_fu_1278_p2 | and_ln102_552_fu_1103_p2);

assign or_ln117_fu_754_p2 = (and_ln102_531_fu_684_p2 | and_ln102_521_fu_624_p2);

assign select_ln117_408_fu_768_p3 = ((or_ln117_fu_754_p2[0:0] == 1'b1) ? select_ln117_fu_760_p3 : 2'd3);

assign select_ln117_409_fu_786_p3 = ((and_ln102_517_fu_588_p2[0:0] == 1'b1) ? zext_ln117_46_fu_776_p1 : 3'd4);

assign select_ln117_410_fu_800_p3 = ((or_ln117_368_fu_780_p2[0:0] == 1'b1) ? select_ln117_409_fu_786_p3 : 3'd5);

assign select_ln117_411_fu_814_p3 = ((or_ln117_369_fu_794_p2[0:0] == 1'b1) ? select_ln117_410_fu_800_p3 : 3'd6);

assign select_ln117_412_fu_822_p3 = ((or_ln117_370_fu_808_p2[0:0] == 1'b1) ? select_ln117_411_fu_814_p3 : 3'd7);

assign select_ln117_413_fu_840_p3 = ((and_ln102_fu_570_p2[0:0] == 1'b1) ? zext_ln117_47_fu_830_p1 : 4'd8);

assign select_ln117_414_fu_854_p3 = ((or_ln117_371_fu_834_p2[0:0] == 1'b1) ? select_ln117_413_fu_840_p3 : 4'd9);

assign select_ln117_415_fu_868_p3 = ((or_ln117_372_fu_848_p2[0:0] == 1'b1) ? select_ln117_414_fu_854_p3 : 4'd10);

assign select_ln117_416_fu_882_p3 = ((or_ln117_373_fu_862_p2[0:0] == 1'b1) ? select_ln117_415_fu_868_p3 : 4'd11);

assign select_ln117_417_fu_896_p3 = ((or_ln117_374_fu_876_p2[0:0] == 1'b1) ? select_ln117_416_fu_882_p3 : 4'd12);

assign select_ln117_418_fu_910_p3 = ((or_ln117_375_fu_890_p2[0:0] == 1'b1) ? select_ln117_417_fu_896_p3 : 4'd13);

assign select_ln117_419_fu_924_p3 = ((or_ln117_376_fu_904_p2[0:0] == 1'b1) ? select_ln117_418_fu_910_p3 : 4'd14);

assign select_ln117_420_fu_932_p3 = ((or_ln117_377_fu_918_p2[0:0] == 1'b1) ? select_ln117_419_fu_924_p3 : 4'd15);

assign select_ln117_421_fu_944_p3 = ((icmp_ln86_fu_384_p2[0:0] == 1'b1) ? zext_ln117_48_fu_940_p1 : 5'd16);

assign select_ln117_422_fu_1119_p3 = ((or_ln117_378_fu_1109_p2[0:0] == 1'b1) ? select_ln117_421_reg_1541 : 5'd17);

assign select_ln117_423_fu_1132_p3 = ((or_ln117_379_fu_1114_p2[0:0] == 1'b1) ? select_ln117_422_fu_1119_p3 : 5'd18);

assign select_ln117_424_fu_1145_p3 = ((or_ln117_380_fu_1126_p2[0:0] == 1'b1) ? select_ln117_423_fu_1132_p3 : 5'd19);

assign select_ln117_425_fu_1159_p3 = ((or_ln117_381_fu_1140_p2[0:0] == 1'b1) ? select_ln117_424_fu_1145_p3 : 5'd20);

assign select_ln117_426_fu_1173_p3 = ((or_ln117_382_fu_1153_p2[0:0] == 1'b1) ? select_ln117_425_fu_1159_p3 : 5'd21);

assign select_ln117_427_fu_1187_p3 = ((or_ln117_383_fu_1167_p2[0:0] == 1'b1) ? select_ln117_426_fu_1173_p3 : 5'd22);

assign select_ln117_428_fu_1200_p3 = ((or_ln117_384_fu_1181_p2[0:0] == 1'b1) ? select_ln117_427_fu_1187_p3 : 5'd23);

assign select_ln117_429_fu_1214_p3 = ((or_ln117_385_fu_1195_p2[0:0] == 1'b1) ? select_ln117_428_fu_1200_p3 : 5'd24);

assign select_ln117_430_fu_1228_p3 = ((or_ln117_386_fu_1208_p2[0:0] == 1'b1) ? select_ln117_429_fu_1214_p3 : 5'd25);

assign select_ln117_431_fu_1242_p3 = ((or_ln117_387_fu_1222_p2[0:0] == 1'b1) ? select_ln117_430_fu_1228_p3 : 5'd26);

assign select_ln117_432_fu_1256_p3 = ((or_ln117_388_fu_1236_p2[0:0] == 1'b1) ? select_ln117_431_fu_1242_p3 : 5'd27);

assign select_ln117_433_fu_1270_p3 = ((or_ln117_389_fu_1250_p2[0:0] == 1'b1) ? select_ln117_432_fu_1256_p3 : 5'd28);

assign select_ln117_434_fu_1284_p3 = ((or_ln117_390_fu_1264_p2[0:0] == 1'b1) ? select_ln117_433_fu_1270_p3 : 5'd29);

assign select_ln117_435_fu_1298_p3 = ((or_ln117_391_fu_1278_p2[0:0] == 1'b1) ? select_ln117_434_fu_1284_p3 : 5'd30);

assign select_ln117_fu_760_p3 = ((and_ln102_521_fu_624_p2[0:0] == 1'b1) ? zext_ln117_fu_750_p1 : 2'd2);

assign xor_ln104_198_fu_576_p2 = (icmp_ln86_420_fu_390_p2 ^ 1'd1);

assign xor_ln104_199_fu_962_p2 = (icmp_ln86_421_reg_1459 ^ 1'd1);

assign xor_ln104_200_fu_594_p2 = (icmp_ln86_422_fu_402_p2 ^ 1'd1);

assign xor_ln104_201_fu_612_p2 = (icmp_ln86_423_fu_408_p2 ^ 1'd1);

assign xor_ln104_202_fu_978_p2 = (icmp_ln86_424_reg_1465 ^ 1'd1);

assign xor_ln104_203_fu_994_p2 = (icmp_ln86_425_reg_1471 ^ 1'd1);

assign xor_ln104_204_fu_630_p2 = (icmp_ln86_426_fu_426_p2 ^ 1'd1);

assign xor_ln104_205_fu_642_p2 = (icmp_ln86_427_fu_432_p2 ^ 1'd1);

assign xor_ln104_206_fu_654_p2 = (icmp_ln86_428_fu_438_p2 ^ 1'd1);

assign xor_ln104_207_fu_666_p2 = (icmp_ln86_429_fu_444_p2 ^ 1'd1);

assign xor_ln104_208_fu_1010_p2 = (icmp_ln86_430_reg_1477 ^ 1'd1);

assign xor_ln104_209_fu_1020_p2 = (icmp_ln86_431_reg_1483 ^ 1'd1);

assign xor_ln104_210_fu_1030_p2 = (icmp_ln86_432_reg_1489 ^ 1'd1);

assign xor_ln104_211_fu_1040_p2 = (icmp_ln86_433_reg_1495 ^ 1'd1);

assign xor_ln104_fu_952_p2 = (icmp_ln86_reg_1450 ^ 1'd1);

assign xor_ln117_fu_744_p2 = (1'd1 ^ and_ln102_529_fu_672_p2);

assign zext_ln117_46_fu_776_p1 = select_ln117_408_fu_768_p3;

assign zext_ln117_47_fu_830_p1 = select_ln117_412_fu_822_p3;

assign zext_ln117_48_fu_940_p1 = select_ln117_420_fu_932_p3;

assign zext_ln117_fu_750_p1 = xor_ln117_fu_744_p2;

endmodule //my_prj_decision_function_84
