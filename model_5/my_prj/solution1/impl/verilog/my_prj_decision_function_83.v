// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_83 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_3_val,
        x_4_val,
        x_7_val,
        x_9_val,
        x_10_val,
        x_13_val,
        x_17_val,
        x_25_val,
        x_27_val,
        x_29_val,
        x_31_val,
        x_32_val,
        x_33_val,
        x_34_val,
        x_47_val,
        x_49_val,
        x_50_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_3_val;
input  [17:0] x_4_val;
input  [17:0] x_7_val;
input  [17:0] x_9_val;
input  [17:0] x_10_val;
input  [17:0] x_13_val;
input  [17:0] x_17_val;
input  [17:0] x_25_val;
input  [17:0] x_27_val;
input  [17:0] x_29_val;
input  [17:0] x_31_val;
input  [17:0] x_32_val;
input  [17:0] x_33_val;
input  [17:0] x_34_val;
input  [17:0] x_47_val;
input  [17:0] x_49_val;
input  [17:0] x_50_val;
input  [17:0] x_52_val;
output  [10:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_455_fu_404_p2;
reg   [0:0] icmp_ln86_455_reg_1354;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_459_fu_428_p2;
reg   [0:0] icmp_ln86_459_reg_1360;
wire   [0:0] icmp_ln86_460_fu_434_p2;
reg   [0:0] icmp_ln86_460_reg_1365;
wire   [0:0] icmp_ln86_461_fu_440_p2;
reg   [0:0] icmp_ln86_461_reg_1371;
wire   [0:0] icmp_ln86_462_fu_446_p2;
reg   [0:0] icmp_ln86_462_reg_1377;
wire   [0:0] icmp_ln86_470_fu_494_p2;
reg   [0:0] icmp_ln86_470_reg_1383;
wire   [0:0] icmp_ln86_471_fu_500_p2;
reg   [0:0] icmp_ln86_471_reg_1388;
wire   [0:0] icmp_ln86_472_fu_506_p2;
reg   [0:0] icmp_ln86_472_reg_1393;
wire   [0:0] icmp_ln86_473_fu_512_p2;
reg   [0:0] icmp_ln86_473_reg_1398;
wire   [0:0] icmp_ln86_474_fu_518_p2;
reg   [0:0] icmp_ln86_474_reg_1403;
wire   [0:0] icmp_ln86_475_fu_524_p2;
reg   [0:0] icmp_ln86_475_reg_1408;
wire   [0:0] icmp_ln86_476_fu_530_p2;
reg   [0:0] icmp_ln86_476_reg_1413;
wire   [0:0] and_ln104_79_fu_572_p2;
reg   [0:0] and_ln104_79_reg_1418;
wire   [0:0] and_ln104_81_fu_608_p2;
reg   [0:0] and_ln104_81_reg_1424;
wire   [0:0] and_ln104_82_fu_626_p2;
reg   [0:0] and_ln104_82_reg_1429;
wire   [0:0] or_ln117_405_fu_926_p2;
reg   [0:0] or_ln117_405_reg_1435;
wire   [3:0] select_ln117_449_fu_940_p3;
reg   [3:0] select_ln117_449_reg_1440;
wire   [0:0] or_ln117_407_fu_948_p2;
reg   [0:0] or_ln117_407_reg_1445;
wire   [0:0] or_ln117_411_fu_954_p2;
reg   [0:0] or_ln117_411_reg_1452;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln86_fu_368_p2;
wire   [0:0] icmp_ln86_450_fu_374_p2;
wire   [0:0] xor_ln104_212_fu_548_p2;
wire   [0:0] icmp_ln86_451_fu_380_p2;
wire   [0:0] xor_ln104_fu_536_p2;
wire   [0:0] xor_ln104_213_fu_566_p2;
wire   [0:0] icmp_ln86_452_fu_386_p2;
wire   [0:0] and_ln102_fu_542_p2;
wire   [0:0] xor_ln104_214_fu_584_p2;
wire   [0:0] icmp_ln86_453_fu_392_p2;
wire   [0:0] and_ln104_fu_554_p2;
wire   [0:0] xor_ln104_215_fu_602_p2;
wire   [0:0] icmp_ln86_454_fu_398_p2;
wire   [0:0] and_ln102_553_fu_560_p2;
wire   [0:0] xor_ln104_216_fu_620_p2;
wire   [0:0] icmp_ln86_456_fu_410_p2;
wire   [0:0] and_ln102_554_fu_578_p2;
wire   [0:0] icmp_ln86_457_fu_416_p2;
wire   [0:0] and_ln104_80_fu_590_p2;
wire   [0:0] icmp_ln86_458_fu_422_p2;
wire   [0:0] and_ln102_555_fu_596_p2;
wire   [0:0] icmp_ln86_463_fu_452_p2;
wire   [0:0] and_ln102_558_fu_632_p2;
wire   [0:0] icmp_ln86_464_fu_458_p2;
wire   [0:0] xor_ln104_218_fu_638_p2;
wire   [0:0] and_ln102_566_fu_680_p2;
wire   [0:0] icmp_ln86_465_fu_464_p2;
wire   [0:0] and_ln102_559_fu_644_p2;
wire   [0:0] icmp_ln86_466_fu_470_p2;
wire   [0:0] xor_ln104_219_fu_650_p2;
wire   [0:0] and_ln102_569_fu_698_p2;
wire   [0:0] icmp_ln86_467_fu_476_p2;
wire   [0:0] and_ln102_560_fu_656_p2;
wire   [0:0] icmp_ln86_468_fu_482_p2;
wire   [0:0] xor_ln104_220_fu_662_p2;
wire   [0:0] and_ln102_572_fu_716_p2;
wire   [0:0] icmp_ln86_469_fu_488_p2;
wire   [0:0] and_ln102_561_fu_668_p2;
wire   [0:0] and_ln102_556_fu_614_p2;
wire   [0:0] and_ln102_565_fu_674_p2;
wire   [0:0] xor_ln117_fu_740_p2;
wire   [0:0] or_ln117_fu_734_p2;
wire   [1:0] zext_ln117_fu_746_p1;
wire   [0:0] or_ln117_393_fu_750_p2;
wire   [0:0] and_ln102_567_fu_686_p2;
wire   [1:0] select_ln117_fu_756_p3;
wire   [1:0] select_ln117_437_fu_770_p3;
wire   [0:0] or_ln117_394_fu_764_p2;
wire   [2:0] zext_ln117_49_fu_778_p1;
wire   [0:0] or_ln117_395_fu_782_p2;
wire   [0:0] and_ln102_568_fu_692_p2;
wire   [2:0] select_ln117_438_fu_788_p3;
wire   [0:0] or_ln117_396_fu_796_p2;
wire   [2:0] select_ln117_439_fu_802_p3;
wire   [0:0] or_ln117_397_fu_810_p2;
wire   [0:0] and_ln102_570_fu_704_p2;
wire   [2:0] select_ln117_440_fu_816_p3;
wire   [2:0] select_ln117_441_fu_830_p3;
wire   [0:0] or_ln117_398_fu_824_p2;
wire   [3:0] zext_ln117_50_fu_838_p1;
wire   [0:0] or_ln117_399_fu_842_p2;
wire   [0:0] and_ln102_571_fu_710_p2;
wire   [3:0] select_ln117_442_fu_848_p3;
wire   [0:0] or_ln117_400_fu_856_p2;
wire   [3:0] select_ln117_443_fu_862_p3;
wire   [0:0] or_ln117_401_fu_870_p2;
wire   [0:0] and_ln102_573_fu_722_p2;
wire   [3:0] select_ln117_444_fu_876_p3;
wire   [0:0] or_ln117_402_fu_884_p2;
wire   [3:0] select_ln117_445_fu_890_p3;
wire   [0:0] or_ln117_403_fu_898_p2;
wire   [0:0] and_ln102_574_fu_728_p2;
wire   [3:0] select_ln117_446_fu_904_p3;
wire   [0:0] or_ln117_404_fu_912_p2;
wire   [3:0] select_ln117_447_fu_918_p3;
wire   [3:0] select_ln117_448_fu_932_p3;
wire   [0:0] xor_ln104_217_fu_964_p2;
wire   [0:0] and_ln102_557_fu_960_p2;
wire   [0:0] and_ln104_83_fu_969_p2;
wire   [0:0] xor_ln104_221_fu_974_p2;
wire   [0:0] and_ln102_575_fu_1008_p2;
wire   [0:0] and_ln102_562_fu_979_p2;
wire   [0:0] xor_ln104_222_fu_983_p2;
wire   [0:0] and_ln102_578_fu_1023_p2;
wire   [0:0] and_ln102_563_fu_988_p2;
wire   [0:0] xor_ln104_223_fu_993_p2;
wire   [0:0] and_ln102_581_fu_1038_p2;
wire   [0:0] and_ln102_564_fu_998_p2;
wire   [0:0] xor_ln104_224_fu_1003_p2;
wire   [0:0] and_ln102_584_fu_1054_p2;
wire   [0:0] and_ln102_576_fu_1013_p2;
wire   [0:0] or_ln117_406_fu_1065_p2;
wire   [4:0] zext_ln117_51_fu_1070_p1;
wire   [0:0] and_ln102_577_fu_1018_p2;
wire   [4:0] select_ln117_450_fu_1073_p3;
wire   [0:0] or_ln117_408_fu_1081_p2;
wire   [4:0] select_ln117_451_fu_1086_p3;
wire   [0:0] or_ln117_409_fu_1093_p2;
wire   [0:0] and_ln102_579_fu_1028_p2;
wire   [4:0] select_ln117_452_fu_1098_p3;
wire   [0:0] or_ln117_410_fu_1106_p2;
wire   [4:0] select_ln117_453_fu_1112_p3;
wire   [0:0] and_ln102_580_fu_1033_p2;
wire   [4:0] select_ln117_454_fu_1120_p3;
wire   [0:0] or_ln117_412_fu_1128_p2;
wire   [4:0] select_ln117_455_fu_1133_p3;
wire   [0:0] or_ln117_413_fu_1140_p2;
wire   [0:0] and_ln102_582_fu_1043_p2;
wire   [4:0] select_ln117_456_fu_1145_p3;
wire   [0:0] or_ln117_414_fu_1153_p2;
wire   [4:0] select_ln117_457_fu_1159_p3;
wire   [0:0] or_ln117_415_fu_1167_p2;
wire   [0:0] and_ln102_583_fu_1049_p2;
wire   [4:0] select_ln117_458_fu_1172_p3;
wire   [0:0] or_ln117_416_fu_1180_p2;
wire   [4:0] select_ln117_459_fu_1186_p3;
wire   [0:0] or_ln117_417_fu_1194_p2;
wire   [0:0] and_ln102_585_fu_1059_p2;
wire   [4:0] select_ln117_460_fu_1200_p3;
wire   [0:0] or_ln117_418_fu_1208_p2;
wire   [4:0] select_ln117_461_fu_1214_p3;
wire   [10:0] agg_result_fu_1230_p59;
wire   [4:0] agg_result_fu_1230_p60;
wire   [10:0] agg_result_fu_1230_p61;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1230_p1;
wire   [4:0] agg_result_fu_1230_p3;
wire   [4:0] agg_result_fu_1230_p5;
wire   [4:0] agg_result_fu_1230_p7;
wire   [4:0] agg_result_fu_1230_p9;
wire   [4:0] agg_result_fu_1230_p11;
wire   [4:0] agg_result_fu_1230_p13;
wire   [4:0] agg_result_fu_1230_p15;
wire   [4:0] agg_result_fu_1230_p17;
wire   [4:0] agg_result_fu_1230_p19;
wire   [4:0] agg_result_fu_1230_p21;
wire   [4:0] agg_result_fu_1230_p23;
wire   [4:0] agg_result_fu_1230_p25;
wire   [4:0] agg_result_fu_1230_p27;
wire   [4:0] agg_result_fu_1230_p29;
wire   [4:0] agg_result_fu_1230_p31;
wire  signed [4:0] agg_result_fu_1230_p33;
wire  signed [4:0] agg_result_fu_1230_p35;
wire  signed [4:0] agg_result_fu_1230_p37;
wire  signed [4:0] agg_result_fu_1230_p39;
wire  signed [4:0] agg_result_fu_1230_p41;
wire  signed [4:0] agg_result_fu_1230_p43;
wire  signed [4:0] agg_result_fu_1230_p45;
wire  signed [4:0] agg_result_fu_1230_p47;
wire  signed [4:0] agg_result_fu_1230_p49;
wire  signed [4:0] agg_result_fu_1230_p51;
wire  signed [4:0] agg_result_fu_1230_p53;
wire  signed [4:0] agg_result_fu_1230_p55;
wire  signed [4:0] agg_result_fu_1230_p57;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_59_5_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 11 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 11 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 11 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 11 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 11 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 11 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 11 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 11 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 11 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 11 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 11 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 11 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 11 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 11 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 11 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 11 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 11 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 11 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 11 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 11 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 11 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 11 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 11 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 11 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 11 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 11 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 11 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 11 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 11 ),
    .def_WIDTH( 11 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 11 ))
sparsemux_59_5_11_1_1_U450(
    .din0(11'd602),
    .din1(11'd1622),
    .din2(11'd479),
    .din3(11'd18),
    .din4(11'd1781),
    .din5(11'd1923),
    .din6(11'd1665),
    .din7(11'd367),
    .din8(11'd1578),
    .din9(11'd9),
    .din10(11'd245),
    .din11(11'd329),
    .din12(11'd1872),
    .din13(11'd276),
    .din14(11'd451),
    .din15(11'd295),
    .din16(11'd1980),
    .din17(11'd1684),
    .din18(11'd627),
    .din19(11'd249),
    .din20(11'd1555),
    .din21(11'd876),
    .din22(11'd1941),
    .din23(11'd1690),
    .din24(11'd439),
    .din25(11'd649),
    .din26(11'd1726),
    .din27(11'd120),
    .din28(11'd1584),
    .def(agg_result_fu_1230_p59),
    .sel(agg_result_fu_1230_p60),
    .dout(agg_result_fu_1230_p61)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln104_79_reg_1418 <= and_ln104_79_fu_572_p2;
        and_ln104_81_reg_1424 <= and_ln104_81_fu_608_p2;
        and_ln104_82_reg_1429 <= and_ln104_82_fu_626_p2;
        icmp_ln86_455_reg_1354 <= icmp_ln86_455_fu_404_p2;
        icmp_ln86_459_reg_1360 <= icmp_ln86_459_fu_428_p2;
        icmp_ln86_460_reg_1365 <= icmp_ln86_460_fu_434_p2;
        icmp_ln86_461_reg_1371 <= icmp_ln86_461_fu_440_p2;
        icmp_ln86_462_reg_1377 <= icmp_ln86_462_fu_446_p2;
        icmp_ln86_470_reg_1383 <= icmp_ln86_470_fu_494_p2;
        icmp_ln86_471_reg_1388 <= icmp_ln86_471_fu_500_p2;
        icmp_ln86_472_reg_1393 <= icmp_ln86_472_fu_506_p2;
        icmp_ln86_473_reg_1398 <= icmp_ln86_473_fu_512_p2;
        icmp_ln86_474_reg_1403 <= icmp_ln86_474_fu_518_p2;
        icmp_ln86_475_reg_1408 <= icmp_ln86_475_fu_524_p2;
        icmp_ln86_476_reg_1413 <= icmp_ln86_476_fu_530_p2;
        or_ln117_405_reg_1435 <= or_ln117_405_fu_926_p2;
        or_ln117_407_reg_1445 <= or_ln117_407_fu_948_p2;
        or_ln117_411_reg_1452 <= or_ln117_411_fu_954_p2;
        select_ln117_449_reg_1440 <= select_ln117_449_fu_940_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1230_p59 = 'bx;

assign agg_result_fu_1230_p60 = ((or_ln117_418_fu_1208_p2[0:0] == 1'b1) ? select_ln117_461_fu_1214_p3 : 5'd28);

assign and_ln102_553_fu_560_p2 = (xor_ln104_fu_536_p2 & icmp_ln86_451_fu_380_p2);

assign and_ln102_554_fu_578_p2 = (icmp_ln86_452_fu_386_p2 & and_ln102_fu_542_p2);

assign and_ln102_555_fu_596_p2 = (icmp_ln86_453_fu_392_p2 & and_ln104_fu_554_p2);

assign and_ln102_556_fu_614_p2 = (icmp_ln86_454_fu_398_p2 & and_ln102_553_fu_560_p2);

assign and_ln102_557_fu_960_p2 = (icmp_ln86_455_reg_1354 & and_ln104_79_reg_1418);

assign and_ln102_558_fu_632_p2 = (icmp_ln86_456_fu_410_p2 & and_ln102_554_fu_578_p2);

assign and_ln102_559_fu_644_p2 = (icmp_ln86_457_fu_416_p2 & and_ln104_80_fu_590_p2);

assign and_ln102_560_fu_656_p2 = (icmp_ln86_458_fu_422_p2 & and_ln102_555_fu_596_p2);

assign and_ln102_561_fu_668_p2 = (icmp_ln86_459_fu_428_p2 & and_ln104_81_fu_608_p2);

assign and_ln102_562_fu_979_p2 = (icmp_ln86_460_reg_1365 & and_ln104_82_reg_1429);

assign and_ln102_563_fu_988_p2 = (icmp_ln86_461_reg_1371 & and_ln102_557_fu_960_p2);

assign and_ln102_564_fu_998_p2 = (icmp_ln86_462_reg_1377 & and_ln104_83_fu_969_p2);

assign and_ln102_565_fu_674_p2 = (icmp_ln86_463_fu_452_p2 & and_ln102_558_fu_632_p2);

assign and_ln102_566_fu_680_p2 = (xor_ln104_218_fu_638_p2 & icmp_ln86_464_fu_458_p2);

assign and_ln102_567_fu_686_p2 = (and_ln102_566_fu_680_p2 & and_ln102_554_fu_578_p2);

assign and_ln102_568_fu_692_p2 = (icmp_ln86_465_fu_464_p2 & and_ln102_559_fu_644_p2);

assign and_ln102_569_fu_698_p2 = (xor_ln104_219_fu_650_p2 & icmp_ln86_466_fu_470_p2);

assign and_ln102_570_fu_704_p2 = (and_ln104_80_fu_590_p2 & and_ln102_569_fu_698_p2);

assign and_ln102_571_fu_710_p2 = (icmp_ln86_467_fu_476_p2 & and_ln102_560_fu_656_p2);

assign and_ln102_572_fu_716_p2 = (xor_ln104_220_fu_662_p2 & icmp_ln86_468_fu_482_p2);

assign and_ln102_573_fu_722_p2 = (and_ln102_572_fu_716_p2 & and_ln102_555_fu_596_p2);

assign and_ln102_574_fu_728_p2 = (icmp_ln86_469_fu_488_p2 & and_ln102_561_fu_668_p2);

assign and_ln102_575_fu_1008_p2 = (xor_ln104_221_fu_974_p2 & icmp_ln86_470_reg_1383);

assign and_ln102_576_fu_1013_p2 = (and_ln104_81_reg_1424 & and_ln102_575_fu_1008_p2);

assign and_ln102_577_fu_1018_p2 = (icmp_ln86_471_reg_1388 & and_ln102_562_fu_979_p2);

assign and_ln102_578_fu_1023_p2 = (xor_ln104_222_fu_983_p2 & icmp_ln86_472_reg_1393);

assign and_ln102_579_fu_1028_p2 = (and_ln104_82_reg_1429 & and_ln102_578_fu_1023_p2);

assign and_ln102_580_fu_1033_p2 = (icmp_ln86_473_reg_1398 & and_ln102_563_fu_988_p2);

assign and_ln102_581_fu_1038_p2 = (xor_ln104_223_fu_993_p2 & icmp_ln86_474_reg_1403);

assign and_ln102_582_fu_1043_p2 = (and_ln102_581_fu_1038_p2 & and_ln102_557_fu_960_p2);

assign and_ln102_583_fu_1049_p2 = (icmp_ln86_475_reg_1408 & and_ln102_564_fu_998_p2);

assign and_ln102_584_fu_1054_p2 = (xor_ln104_224_fu_1003_p2 & icmp_ln86_476_reg_1413);

assign and_ln102_585_fu_1059_p2 = (and_ln104_83_fu_969_p2 & and_ln102_584_fu_1054_p2);

assign and_ln102_fu_542_p2 = (icmp_ln86_fu_368_p2 & icmp_ln86_450_fu_374_p2);

assign and_ln104_79_fu_572_p2 = (xor_ln104_fu_536_p2 & xor_ln104_213_fu_566_p2);

assign and_ln104_80_fu_590_p2 = (xor_ln104_214_fu_584_p2 & and_ln102_fu_542_p2);

assign and_ln104_81_fu_608_p2 = (xor_ln104_215_fu_602_p2 & and_ln104_fu_554_p2);

assign and_ln104_82_fu_626_p2 = (xor_ln104_216_fu_620_p2 & and_ln102_553_fu_560_p2);

assign and_ln104_83_fu_969_p2 = (xor_ln104_217_fu_964_p2 & and_ln104_79_reg_1418);

assign and_ln104_fu_554_p2 = (xor_ln104_212_fu_548_p2 & icmp_ln86_fu_368_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1230_p61;

assign icmp_ln86_450_fu_374_p2 = (($signed(x_1_val) < $signed(18'd222662)) ? 1'b1 : 1'b0);

assign icmp_ln86_451_fu_380_p2 = (($signed(x_1_val) < $signed(18'd4656)) ? 1'b1 : 1'b0);

assign icmp_ln86_452_fu_386_p2 = (($signed(x_52_val) < $signed(18'd49665)) ? 1'b1 : 1'b0);

assign icmp_ln86_453_fu_392_p2 = (($signed(x_29_val) < $signed(18'd7795)) ? 1'b1 : 1'b0);

assign icmp_ln86_454_fu_398_p2 = (($signed(x_7_val) < $signed(18'd9090)) ? 1'b1 : 1'b0);

assign icmp_ln86_455_fu_404_p2 = (($signed(x_10_val) < $signed(18'd806)) ? 1'b1 : 1'b0);

assign icmp_ln86_456_fu_410_p2 = (($signed(x_1_val) < $signed(18'd152129)) ? 1'b1 : 1'b0);

assign icmp_ln86_457_fu_416_p2 = (($signed(x_17_val) < $signed(18'd27)) ? 1'b1 : 1'b0);

assign icmp_ln86_458_fu_422_p2 = (($signed(x_3_val) < $signed(18'd95481)) ? 1'b1 : 1'b0);

assign icmp_ln86_459_fu_428_p2 = (($signed(x_47_val) < $signed(18'd95269)) ? 1'b1 : 1'b0);

assign icmp_ln86_460_fu_434_p2 = (($signed(x_13_val) < $signed(18'd345)) ? 1'b1 : 1'b0);

assign icmp_ln86_461_fu_440_p2 = (($signed(x_34_val) < $signed(18'd483)) ? 1'b1 : 1'b0);

assign icmp_ln86_462_fu_446_p2 = (($signed(x_52_val) < $signed(18'd32257)) ? 1'b1 : 1'b0);

assign icmp_ln86_463_fu_452_p2 = (($signed(x_27_val) < $signed(18'd17369)) ? 1'b1 : 1'b0);

assign icmp_ln86_464_fu_458_p2 = (($signed(x_25_val) < $signed(18'd323)) ? 1'b1 : 1'b0);

assign icmp_ln86_465_fu_464_p2 = (($signed(x_10_val) < $signed(18'd808)) ? 1'b1 : 1'b0);

assign icmp_ln86_466_fu_470_p2 = (($signed(x_9_val) < $signed(18'd590)) ? 1'b1 : 1'b0);

assign icmp_ln86_467_fu_476_p2 = (($signed(x_50_val) < $signed(18'd89823)) ? 1'b1 : 1'b0);

assign icmp_ln86_468_fu_482_p2 = (($signed(x_17_val) < $signed(18'd7)) ? 1'b1 : 1'b0);

assign icmp_ln86_469_fu_488_p2 = (($signed(x_49_val) < $signed(18'd89617)) ? 1'b1 : 1'b0);

assign icmp_ln86_470_fu_494_p2 = (($signed(x_31_val) < $signed(18'd504)) ? 1'b1 : 1'b0);

assign icmp_ln86_471_fu_500_p2 = (($signed(x_17_val) < $signed(18'd26)) ? 1'b1 : 1'b0);

assign icmp_ln86_472_fu_506_p2 = (($signed(x_33_val) < $signed(18'd41)) ? 1'b1 : 1'b0);

assign icmp_ln86_473_fu_512_p2 = (($signed(x_4_val) < $signed(18'd50747)) ? 1'b1 : 1'b0);

assign icmp_ln86_474_fu_518_p2 = (($signed(x_1_val) < $signed(18'd195843)) ? 1'b1 : 1'b0);

assign icmp_ln86_475_fu_524_p2 = (($signed(x_3_val) < $signed(18'd110755)) ? 1'b1 : 1'b0);

assign icmp_ln86_476_fu_530_p2 = (($signed(x_32_val) < $signed(18'd751)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_368_p2 = (($signed(x_49_val) < $signed(18'd100226)) ? 1'b1 : 1'b0);

assign or_ln117_393_fu_750_p2 = (and_ln102_558_fu_632_p2 | and_ln102_556_fu_614_p2);

assign or_ln117_394_fu_764_p2 = (or_ln117_393_fu_750_p2 | and_ln102_567_fu_686_p2);

assign or_ln117_395_fu_782_p2 = (and_ln102_556_fu_614_p2 | and_ln102_554_fu_578_p2);

assign or_ln117_396_fu_796_p2 = (or_ln117_395_fu_782_p2 | and_ln102_568_fu_692_p2);

assign or_ln117_397_fu_810_p2 = (or_ln117_395_fu_782_p2 | and_ln102_559_fu_644_p2);

assign or_ln117_398_fu_824_p2 = (or_ln117_397_fu_810_p2 | and_ln102_570_fu_704_p2);

assign or_ln117_399_fu_842_p2 = (and_ln102_fu_542_p2 | and_ln102_556_fu_614_p2);

assign or_ln117_400_fu_856_p2 = (or_ln117_399_fu_842_p2 | and_ln102_571_fu_710_p2);

assign or_ln117_401_fu_870_p2 = (or_ln117_399_fu_842_p2 | and_ln102_560_fu_656_p2);

assign or_ln117_402_fu_884_p2 = (or_ln117_401_fu_870_p2 | and_ln102_573_fu_722_p2);

assign or_ln117_403_fu_898_p2 = (or_ln117_399_fu_842_p2 | and_ln102_555_fu_596_p2);

assign or_ln117_404_fu_912_p2 = (or_ln117_403_fu_898_p2 | and_ln102_574_fu_728_p2);

assign or_ln117_405_fu_926_p2 = (or_ln117_403_fu_898_p2 | and_ln102_561_fu_668_p2);

assign or_ln117_406_fu_1065_p2 = (or_ln117_405_reg_1435 | and_ln102_576_fu_1013_p2);

assign or_ln117_407_fu_948_p2 = (icmp_ln86_fu_368_p2 | and_ln102_556_fu_614_p2);

assign or_ln117_408_fu_1081_p2 = (or_ln117_407_reg_1445 | and_ln102_577_fu_1018_p2);

assign or_ln117_409_fu_1093_p2 = (or_ln117_407_reg_1445 | and_ln102_562_fu_979_p2);

assign or_ln117_410_fu_1106_p2 = (or_ln117_409_fu_1093_p2 | and_ln102_579_fu_1028_p2);

assign or_ln117_411_fu_954_p2 = (icmp_ln86_fu_368_p2 | and_ln102_553_fu_560_p2);

assign or_ln117_412_fu_1128_p2 = (or_ln117_411_reg_1452 | and_ln102_580_fu_1033_p2);

assign or_ln117_413_fu_1140_p2 = (or_ln117_411_reg_1452 | and_ln102_563_fu_988_p2);

assign or_ln117_414_fu_1153_p2 = (or_ln117_413_fu_1140_p2 | and_ln102_582_fu_1043_p2);

assign or_ln117_415_fu_1167_p2 = (or_ln117_411_reg_1452 | and_ln102_557_fu_960_p2);

assign or_ln117_416_fu_1180_p2 = (or_ln117_415_fu_1167_p2 | and_ln102_583_fu_1049_p2);

assign or_ln117_417_fu_1194_p2 = (or_ln117_415_fu_1167_p2 | and_ln102_564_fu_998_p2);

assign or_ln117_418_fu_1208_p2 = (or_ln117_417_fu_1194_p2 | and_ln102_585_fu_1059_p2);

assign or_ln117_fu_734_p2 = (and_ln102_565_fu_674_p2 | and_ln102_556_fu_614_p2);

assign select_ln117_437_fu_770_p3 = ((or_ln117_393_fu_750_p2[0:0] == 1'b1) ? select_ln117_fu_756_p3 : 2'd3);

assign select_ln117_438_fu_788_p3 = ((or_ln117_394_fu_764_p2[0:0] == 1'b1) ? zext_ln117_49_fu_778_p1 : 3'd4);

assign select_ln117_439_fu_802_p3 = ((or_ln117_395_fu_782_p2[0:0] == 1'b1) ? select_ln117_438_fu_788_p3 : 3'd5);

assign select_ln117_440_fu_816_p3 = ((or_ln117_396_fu_796_p2[0:0] == 1'b1) ? select_ln117_439_fu_802_p3 : 3'd6);

assign select_ln117_441_fu_830_p3 = ((or_ln117_397_fu_810_p2[0:0] == 1'b1) ? select_ln117_440_fu_816_p3 : 3'd7);

assign select_ln117_442_fu_848_p3 = ((or_ln117_398_fu_824_p2[0:0] == 1'b1) ? zext_ln117_50_fu_838_p1 : 4'd8);

assign select_ln117_443_fu_862_p3 = ((or_ln117_399_fu_842_p2[0:0] == 1'b1) ? select_ln117_442_fu_848_p3 : 4'd9);

assign select_ln117_444_fu_876_p3 = ((or_ln117_400_fu_856_p2[0:0] == 1'b1) ? select_ln117_443_fu_862_p3 : 4'd10);

assign select_ln117_445_fu_890_p3 = ((or_ln117_401_fu_870_p2[0:0] == 1'b1) ? select_ln117_444_fu_876_p3 : 4'd11);

assign select_ln117_446_fu_904_p3 = ((or_ln117_402_fu_884_p2[0:0] == 1'b1) ? select_ln117_445_fu_890_p3 : 4'd12);

assign select_ln117_447_fu_918_p3 = ((or_ln117_403_fu_898_p2[0:0] == 1'b1) ? select_ln117_446_fu_904_p3 : 4'd13);

assign select_ln117_448_fu_932_p3 = ((or_ln117_404_fu_912_p2[0:0] == 1'b1) ? select_ln117_447_fu_918_p3 : 4'd14);

assign select_ln117_449_fu_940_p3 = ((or_ln117_405_fu_926_p2[0:0] == 1'b1) ? select_ln117_448_fu_932_p3 : 4'd15);

assign select_ln117_450_fu_1073_p3 = ((or_ln117_406_fu_1065_p2[0:0] == 1'b1) ? zext_ln117_51_fu_1070_p1 : 5'd16);

assign select_ln117_451_fu_1086_p3 = ((or_ln117_407_reg_1445[0:0] == 1'b1) ? select_ln117_450_fu_1073_p3 : 5'd17);

assign select_ln117_452_fu_1098_p3 = ((or_ln117_408_fu_1081_p2[0:0] == 1'b1) ? select_ln117_451_fu_1086_p3 : 5'd18);

assign select_ln117_453_fu_1112_p3 = ((or_ln117_409_fu_1093_p2[0:0] == 1'b1) ? select_ln117_452_fu_1098_p3 : 5'd19);

assign select_ln117_454_fu_1120_p3 = ((or_ln117_410_fu_1106_p2[0:0] == 1'b1) ? select_ln117_453_fu_1112_p3 : 5'd20);

assign select_ln117_455_fu_1133_p3 = ((or_ln117_411_reg_1452[0:0] == 1'b1) ? select_ln117_454_fu_1120_p3 : 5'd21);

assign select_ln117_456_fu_1145_p3 = ((or_ln117_412_fu_1128_p2[0:0] == 1'b1) ? select_ln117_455_fu_1133_p3 : 5'd22);

assign select_ln117_457_fu_1159_p3 = ((or_ln117_413_fu_1140_p2[0:0] == 1'b1) ? select_ln117_456_fu_1145_p3 : 5'd23);

assign select_ln117_458_fu_1172_p3 = ((or_ln117_414_fu_1153_p2[0:0] == 1'b1) ? select_ln117_457_fu_1159_p3 : 5'd24);

assign select_ln117_459_fu_1186_p3 = ((or_ln117_415_fu_1167_p2[0:0] == 1'b1) ? select_ln117_458_fu_1172_p3 : 5'd25);

assign select_ln117_460_fu_1200_p3 = ((or_ln117_416_fu_1180_p2[0:0] == 1'b1) ? select_ln117_459_fu_1186_p3 : 5'd26);

assign select_ln117_461_fu_1214_p3 = ((or_ln117_417_fu_1194_p2[0:0] == 1'b1) ? select_ln117_460_fu_1200_p3 : 5'd27);

assign select_ln117_fu_756_p3 = ((or_ln117_fu_734_p2[0:0] == 1'b1) ? zext_ln117_fu_746_p1 : 2'd2);

assign xor_ln104_212_fu_548_p2 = (icmp_ln86_450_fu_374_p2 ^ 1'd1);

assign xor_ln104_213_fu_566_p2 = (icmp_ln86_451_fu_380_p2 ^ 1'd1);

assign xor_ln104_214_fu_584_p2 = (icmp_ln86_452_fu_386_p2 ^ 1'd1);

assign xor_ln104_215_fu_602_p2 = (icmp_ln86_453_fu_392_p2 ^ 1'd1);

assign xor_ln104_216_fu_620_p2 = (icmp_ln86_454_fu_398_p2 ^ 1'd1);

assign xor_ln104_217_fu_964_p2 = (icmp_ln86_455_reg_1354 ^ 1'd1);

assign xor_ln104_218_fu_638_p2 = (icmp_ln86_456_fu_410_p2 ^ 1'd1);

assign xor_ln104_219_fu_650_p2 = (icmp_ln86_457_fu_416_p2 ^ 1'd1);

assign xor_ln104_220_fu_662_p2 = (icmp_ln86_458_fu_422_p2 ^ 1'd1);

assign xor_ln104_221_fu_974_p2 = (icmp_ln86_459_reg_1360 ^ 1'd1);

assign xor_ln104_222_fu_983_p2 = (icmp_ln86_460_reg_1365 ^ 1'd1);

assign xor_ln104_223_fu_993_p2 = (icmp_ln86_461_reg_1371 ^ 1'd1);

assign xor_ln104_224_fu_1003_p2 = (icmp_ln86_462_reg_1377 ^ 1'd1);

assign xor_ln104_fu_536_p2 = (icmp_ln86_fu_368_p2 ^ 1'd1);

assign xor_ln117_fu_740_p2 = (1'd1 ^ and_ln102_556_fu_614_p2);

assign zext_ln117_49_fu_778_p1 = select_ln117_437_fu_770_p3;

assign zext_ln117_50_fu_838_p1 = select_ln117_441_fu_830_p3;

assign zext_ln117_51_fu_1070_p1 = select_ln117_449_reg_1440;

assign zext_ln117_fu_746_p1 = xor_ln117_fu_740_p2;

endmodule //my_prj_decision_function_83
