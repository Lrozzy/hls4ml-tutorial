// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_96 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_2_val,
        x_3_val,
        x_6_val,
        x_9_val,
        x_13_val,
        x_14_val,
        x_16_val,
        x_19_val,
        x_24_val,
        x_27_val,
        x_32_val,
        x_33_val,
        x_34_val,
        x_46_val,
        x_47_val,
        x_50_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_2_val;
input  [17:0] x_3_val;
input  [17:0] x_6_val;
input  [17:0] x_9_val;
input  [17:0] x_13_val;
input  [17:0] x_14_val;
input  [17:0] x_16_val;
input  [17:0] x_19_val;
input  [17:0] x_24_val;
input  [17:0] x_27_val;
input  [17:0] x_32_val;
input  [17:0] x_33_val;
input  [17:0] x_34_val;
input  [17:0] x_46_val;
input  [17:0] x_47_val;
input  [17:0] x_50_val;
input  [17:0] x_52_val;
output  [12:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_87_fu_374_p2;
reg   [0:0] icmp_ln86_87_reg_1373;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_90_fu_392_p2;
reg   [0:0] icmp_ln86_90_reg_1379;
wire   [0:0] icmp_ln86_91_fu_398_p2;
reg   [0:0] icmp_ln86_91_reg_1385;
wire   [0:0] icmp_ln86_96_fu_428_p2;
reg   [0:0] icmp_ln86_96_reg_1391;
wire   [0:0] icmp_ln86_97_fu_434_p2;
reg   [0:0] icmp_ln86_97_reg_1397;
wire   [0:0] icmp_ln86_98_fu_440_p2;
reg   [0:0] icmp_ln86_98_reg_1403;
wire   [0:0] icmp_ln86_99_fu_446_p2;
reg   [0:0] icmp_ln86_99_reg_1409;
wire   [0:0] icmp_ln86_105_fu_482_p2;
reg   [0:0] icmp_ln86_105_reg_1415;
wire   [0:0] icmp_ln86_106_fu_488_p2;
reg   [0:0] icmp_ln86_106_reg_1420;
wire   [0:0] icmp_ln86_107_fu_494_p2;
reg   [0:0] icmp_ln86_107_reg_1425;
wire   [0:0] icmp_ln86_108_fu_500_p2;
reg   [0:0] icmp_ln86_108_reg_1430;
wire   [0:0] icmp_ln86_109_fu_506_p2;
reg   [0:0] icmp_ln86_109_reg_1435;
wire   [0:0] icmp_ln86_110_fu_512_p2;
reg   [0:0] icmp_ln86_110_reg_1440;
wire   [0:0] icmp_ln86_111_fu_518_p2;
reg   [0:0] icmp_ln86_111_reg_1445;
wire   [0:0] icmp_ln86_112_fu_524_p2;
reg   [0:0] icmp_ln86_112_reg_1450;
wire   [0:0] xor_ln104_fu_530_p2;
reg   [0:0] xor_ln104_reg_1455;
wire   [0:0] or_ln117_92_fu_856_p2;
reg   [0:0] or_ln117_92_reg_1462;
wire   [3:0] select_ln117_95_fu_870_p3;
reg   [3:0] select_ln117_95_reg_1471;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln86_fu_362_p2;
wire   [0:0] icmp_ln86_86_fu_368_p2;
wire   [0:0] xor_ln104_41_fu_542_p2;
wire   [0:0] icmp_ln86_88_fu_380_p2;
wire   [0:0] and_ln102_fu_536_p2;
wire   [0:0] xor_ln104_43_fu_560_p2;
wire   [0:0] icmp_ln86_89_fu_386_p2;
wire   [0:0] and_ln104_fu_548_p2;
wire   [0:0] xor_ln104_44_fu_578_p2;
wire   [0:0] icmp_ln86_92_fu_404_p2;
wire   [0:0] and_ln102_108_fu_554_p2;
wire   [0:0] icmp_ln86_93_fu_410_p2;
wire   [0:0] and_ln104_17_fu_566_p2;
wire   [0:0] xor_ln104_48_fu_608_p2;
wire   [0:0] icmp_ln86_94_fu_416_p2;
wire   [0:0] and_ln102_109_fu_572_p2;
wire   [0:0] icmp_ln86_95_fu_422_p2;
wire   [0:0] and_ln104_18_fu_584_p2;
wire   [0:0] icmp_ln86_100_fu_452_p2;
wire   [0:0] and_ln102_112_fu_590_p2;
wire   [0:0] icmp_ln86_101_fu_458_p2;
wire   [0:0] xor_ln104_47_fu_596_p2;
wire   [0:0] and_ln102_121_fu_644_p2;
wire   [0:0] icmp_ln86_102_fu_464_p2;
wire   [0:0] and_ln102_113_fu_602_p2;
wire   [0:0] icmp_ln86_103_fu_470_p2;
wire   [0:0] and_ln102_114_fu_620_p2;
wire   [0:0] icmp_ln86_104_fu_476_p2;
wire   [0:0] xor_ln104_49_fu_626_p2;
wire   [0:0] and_ln102_125_fu_668_p2;
wire   [0:0] and_ln104_21_fu_614_p2;
wire   [0:0] and_ln102_115_fu_632_p2;
wire   [0:0] xor_ln117_fu_686_p2;
wire   [0:0] or_ln117_80_fu_692_p2;
wire   [0:0] or_ln117_81_fu_698_p2;
wire   [0:0] or_ln117_fu_680_p2;
wire   [1:0] zext_ln117_fu_704_p1;
wire   [0:0] or_ln117_82_fu_708_p2;
wire   [0:0] and_ln102_120_fu_638_p2;
wire   [1:0] select_ln117_fu_714_p3;
wire   [1:0] select_ln117_85_fu_728_p3;
wire   [0:0] or_ln117_83_fu_722_p2;
wire   [2:0] zext_ln117_10_fu_736_p1;
wire   [0:0] or_ln117_84_fu_740_p2;
wire   [0:0] and_ln102_122_fu_650_p2;
wire   [2:0] select_ln117_86_fu_746_p3;
wire   [0:0] or_ln117_85_fu_754_p2;
wire   [2:0] select_ln117_87_fu_760_p3;
wire   [0:0] or_ln117_86_fu_768_p2;
wire   [0:0] and_ln102_123_fu_656_p2;
wire   [2:0] select_ln117_88_fu_774_p3;
wire   [2:0] select_ln117_89_fu_788_p3;
wire   [0:0] or_ln117_87_fu_782_p2;
wire   [3:0] zext_ln117_11_fu_796_p1;
wire   [0:0] or_ln117_88_fu_800_p2;
wire   [0:0] and_ln102_124_fu_662_p2;
wire   [3:0] select_ln117_90_fu_806_p3;
wire   [0:0] or_ln117_89_fu_814_p2;
wire   [3:0] select_ln117_91_fu_820_p3;
wire   [0:0] or_ln117_90_fu_828_p2;
wire   [0:0] and_ln102_126_fu_674_p2;
wire   [3:0] select_ln117_92_fu_834_p3;
wire   [0:0] or_ln117_91_fu_842_p2;
wire   [3:0] select_ln117_93_fu_848_p3;
wire   [3:0] select_ln117_94_fu_862_p3;
wire   [0:0] xor_ln104_42_fu_882_p2;
wire   [0:0] and_ln102_107_fu_878_p2;
wire   [0:0] xor_ln104_45_fu_897_p2;
wire   [0:0] and_ln104_16_fu_887_p2;
wire   [0:0] xor_ln104_46_fu_913_p2;
wire   [0:0] and_ln102_110_fu_892_p2;
wire   [0:0] and_ln104_19_fu_902_p2;
wire   [0:0] and_ln102_111_fu_908_p2;
wire   [0:0] and_ln104_20_fu_918_p2;
wire   [0:0] and_ln102_116_fu_924_p2;
wire   [0:0] xor_ln104_50_fu_929_p2;
wire   [0:0] and_ln102_128_fu_969_p2;
wire   [0:0] and_ln102_117_fu_934_p2;
wire   [0:0] xor_ln104_51_fu_939_p2;
wire   [0:0] and_ln102_131_fu_985_p2;
wire   [0:0] and_ln102_118_fu_944_p2;
wire   [0:0] xor_ln104_52_fu_949_p2;
wire   [0:0] and_ln102_134_fu_1001_p2;
wire   [0:0] and_ln102_119_fu_954_p2;
wire   [0:0] xor_ln104_53_fu_959_p2;
wire   [0:0] and_ln102_137_fu_1017_p2;
wire   [0:0] and_ln102_127_fu_964_p2;
wire   [0:0] or_ln117_93_fu_1028_p2;
wire   [0:0] or_ln117_94_fu_1033_p2;
wire   [0:0] and_ln102_129_fu_974_p2;
wire   [3:0] select_ln117_96_fu_1038_p3;
wire   [3:0] select_ln117_97_fu_1051_p3;
wire   [0:0] or_ln117_95_fu_1045_p2;
wire   [4:0] zext_ln117_12_fu_1059_p1;
wire   [0:0] or_ln117_96_fu_1063_p2;
wire   [0:0] and_ln102_130_fu_980_p2;
wire   [4:0] select_ln117_98_fu_1068_p3;
wire   [0:0] or_ln117_97_fu_1076_p2;
wire   [4:0] select_ln117_99_fu_1082_p3;
wire   [0:0] or_ln117_98_fu_1090_p2;
wire   [0:0] and_ln102_132_fu_990_p2;
wire   [4:0] select_ln117_100_fu_1096_p3;
wire   [0:0] or_ln117_99_fu_1104_p2;
wire   [4:0] select_ln117_101_fu_1110_p3;
wire   [0:0] or_ln117_100_fu_1118_p2;
wire   [0:0] and_ln102_133_fu_996_p2;
wire   [4:0] select_ln117_102_fu_1123_p3;
wire   [0:0] or_ln117_101_fu_1131_p2;
wire   [4:0] select_ln117_103_fu_1137_p3;
wire   [0:0] or_ln117_102_fu_1145_p2;
wire   [0:0] and_ln102_135_fu_1006_p2;
wire   [4:0] select_ln117_104_fu_1151_p3;
wire   [0:0] or_ln117_103_fu_1159_p2;
wire   [4:0] select_ln117_105_fu_1165_p3;
wire   [0:0] or_ln117_104_fu_1173_p2;
wire   [0:0] and_ln102_136_fu_1012_p2;
wire   [4:0] select_ln117_106_fu_1179_p3;
wire   [0:0] or_ln117_105_fu_1187_p2;
wire   [4:0] select_ln117_107_fu_1193_p3;
wire   [0:0] or_ln117_106_fu_1201_p2;
wire   [0:0] and_ln102_138_fu_1022_p2;
wire   [4:0] select_ln117_108_fu_1207_p3;
wire   [0:0] or_ln117_107_fu_1215_p2;
wire   [4:0] select_ln117_109_fu_1221_p3;
wire   [12:0] tmp_fu_1241_p59;
wire   [4:0] tmp_fu_1241_p60;
wire   [0:0] or_ln117_108_fu_1229_p2;
wire   [12:0] tmp_fu_1241_p61;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] tmp_fu_1241_p1;
wire   [4:0] tmp_fu_1241_p3;
wire   [4:0] tmp_fu_1241_p5;
wire   [4:0] tmp_fu_1241_p7;
wire   [4:0] tmp_fu_1241_p9;
wire   [4:0] tmp_fu_1241_p11;
wire   [4:0] tmp_fu_1241_p13;
wire   [4:0] tmp_fu_1241_p15;
wire   [4:0] tmp_fu_1241_p17;
wire   [4:0] tmp_fu_1241_p19;
wire   [4:0] tmp_fu_1241_p21;
wire   [4:0] tmp_fu_1241_p23;
wire   [4:0] tmp_fu_1241_p25;
wire   [4:0] tmp_fu_1241_p27;
wire   [4:0] tmp_fu_1241_p29;
wire   [4:0] tmp_fu_1241_p31;
wire  signed [4:0] tmp_fu_1241_p33;
wire  signed [4:0] tmp_fu_1241_p35;
wire  signed [4:0] tmp_fu_1241_p37;
wire  signed [4:0] tmp_fu_1241_p39;
wire  signed [4:0] tmp_fu_1241_p41;
wire  signed [4:0] tmp_fu_1241_p43;
wire  signed [4:0] tmp_fu_1241_p45;
wire  signed [4:0] tmp_fu_1241_p47;
wire  signed [4:0] tmp_fu_1241_p49;
wire  signed [4:0] tmp_fu_1241_p51;
wire  signed [4:0] tmp_fu_1241_p53;
wire  signed [4:0] tmp_fu_1241_p55;
wire  signed [4:0] tmp_fu_1241_p57;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_59_5_13_1_1_x0 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 13 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 13 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 13 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 13 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 13 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 13 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 13 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 13 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 13 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 13 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 13 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 13 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 13 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 13 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 13 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 13 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 13 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 13 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 13 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 13 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 13 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 13 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 13 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 13 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 13 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 13 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 13 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 13 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 13 ),
    .def_WIDTH( 13 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 13 ))
sparsemux_59_5_13_1_1_x0_U2613(
    .din0(13'd537),
    .din1(13'd16),
    .din2(13'd2495),
    .din3(13'd8185),
    .din4(13'd123),
    .din5(13'd95),
    .din6(13'd8139),
    .din7(13'd7970),
    .din8(13'd7012),
    .din9(13'd233),
    .din10(13'd8119),
    .din11(13'd152),
    .din12(13'd7931),
    .din13(13'd184),
    .din14(13'd1415),
    .din15(13'd8133),
    .din16(13'd283),
    .din17(13'd305),
    .din18(13'd932),
    .din19(13'd319),
    .din20(13'd8018),
    .din21(13'd41),
    .din22(13'd7698),
    .din23(13'd160),
    .din24(13'd7780),
    .din25(13'd172),
    .din26(13'd7993),
    .din27(13'd20),
    .din28(13'd7929),
    .def(tmp_fu_1241_p59),
    .sel(tmp_fu_1241_p60),
    .dout(tmp_fu_1241_p61)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_105_reg_1415 <= icmp_ln86_105_fu_482_p2;
        icmp_ln86_106_reg_1420 <= icmp_ln86_106_fu_488_p2;
        icmp_ln86_107_reg_1425 <= icmp_ln86_107_fu_494_p2;
        icmp_ln86_108_reg_1430 <= icmp_ln86_108_fu_500_p2;
        icmp_ln86_109_reg_1435 <= icmp_ln86_109_fu_506_p2;
        icmp_ln86_110_reg_1440 <= icmp_ln86_110_fu_512_p2;
        icmp_ln86_111_reg_1445 <= icmp_ln86_111_fu_518_p2;
        icmp_ln86_112_reg_1450 <= icmp_ln86_112_fu_524_p2;
        icmp_ln86_87_reg_1373 <= icmp_ln86_87_fu_374_p2;
        icmp_ln86_90_reg_1379 <= icmp_ln86_90_fu_392_p2;
        icmp_ln86_91_reg_1385 <= icmp_ln86_91_fu_398_p2;
        icmp_ln86_96_reg_1391 <= icmp_ln86_96_fu_428_p2;
        icmp_ln86_97_reg_1397 <= icmp_ln86_97_fu_434_p2;
        icmp_ln86_98_reg_1403 <= icmp_ln86_98_fu_440_p2;
        icmp_ln86_99_reg_1409 <= icmp_ln86_99_fu_446_p2;
        or_ln117_92_reg_1462 <= or_ln117_92_fu_856_p2;
        select_ln117_95_reg_1471 <= select_ln117_95_fu_870_p3;
        xor_ln104_reg_1455 <= xor_ln104_fu_530_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln102_107_fu_878_p2 = (xor_ln104_reg_1455 & icmp_ln86_87_reg_1373);

assign and_ln102_108_fu_554_p2 = (icmp_ln86_88_fu_380_p2 & and_ln102_fu_536_p2);

assign and_ln102_109_fu_572_p2 = (icmp_ln86_89_fu_386_p2 & and_ln104_fu_548_p2);

assign and_ln102_110_fu_892_p2 = (icmp_ln86_90_reg_1379 & and_ln102_107_fu_878_p2);

assign and_ln102_111_fu_908_p2 = (icmp_ln86_91_reg_1385 & and_ln104_16_fu_887_p2);

assign and_ln102_112_fu_590_p2 = (icmp_ln86_92_fu_404_p2 & and_ln102_108_fu_554_p2);

assign and_ln102_113_fu_602_p2 = (icmp_ln86_93_fu_410_p2 & and_ln104_17_fu_566_p2);

assign and_ln102_114_fu_620_p2 = (icmp_ln86_94_fu_416_p2 & and_ln102_109_fu_572_p2);

assign and_ln102_115_fu_632_p2 = (icmp_ln86_95_fu_422_p2 & and_ln104_18_fu_584_p2);

assign and_ln102_116_fu_924_p2 = (icmp_ln86_96_reg_1391 & and_ln102_110_fu_892_p2);

assign and_ln102_117_fu_934_p2 = (icmp_ln86_97_reg_1397 & and_ln104_19_fu_902_p2);

assign and_ln102_118_fu_944_p2 = (icmp_ln86_98_reg_1403 & and_ln102_111_fu_908_p2);

assign and_ln102_119_fu_954_p2 = (icmp_ln86_99_reg_1409 & and_ln104_20_fu_918_p2);

assign and_ln102_120_fu_638_p2 = (icmp_ln86_100_fu_452_p2 & and_ln102_112_fu_590_p2);

assign and_ln102_121_fu_644_p2 = (xor_ln104_47_fu_596_p2 & icmp_ln86_101_fu_458_p2);

assign and_ln102_122_fu_650_p2 = (and_ln102_121_fu_644_p2 & and_ln102_108_fu_554_p2);

assign and_ln102_123_fu_656_p2 = (icmp_ln86_102_fu_464_p2 & and_ln102_113_fu_602_p2);

assign and_ln102_124_fu_662_p2 = (icmp_ln86_103_fu_470_p2 & and_ln102_114_fu_620_p2);

assign and_ln102_125_fu_668_p2 = (xor_ln104_49_fu_626_p2 & icmp_ln86_104_fu_476_p2);

assign and_ln102_126_fu_674_p2 = (and_ln102_125_fu_668_p2 & and_ln102_109_fu_572_p2);

assign and_ln102_127_fu_964_p2 = (icmp_ln86_105_reg_1415 & and_ln102_116_fu_924_p2);

assign and_ln102_128_fu_969_p2 = (xor_ln104_50_fu_929_p2 & icmp_ln86_106_reg_1420);

assign and_ln102_129_fu_974_p2 = (and_ln102_128_fu_969_p2 & and_ln102_110_fu_892_p2);

assign and_ln102_130_fu_980_p2 = (icmp_ln86_107_reg_1425 & and_ln102_117_fu_934_p2);

assign and_ln102_131_fu_985_p2 = (xor_ln104_51_fu_939_p2 & icmp_ln86_108_reg_1430);

assign and_ln102_132_fu_990_p2 = (and_ln104_19_fu_902_p2 & and_ln102_131_fu_985_p2);

assign and_ln102_133_fu_996_p2 = (icmp_ln86_109_reg_1435 & and_ln102_118_fu_944_p2);

assign and_ln102_134_fu_1001_p2 = (xor_ln104_52_fu_949_p2 & icmp_ln86_110_reg_1440);

assign and_ln102_135_fu_1006_p2 = (and_ln102_134_fu_1001_p2 & and_ln102_111_fu_908_p2);

assign and_ln102_136_fu_1012_p2 = (icmp_ln86_111_reg_1445 & and_ln102_119_fu_954_p2);

assign and_ln102_137_fu_1017_p2 = (xor_ln104_53_fu_959_p2 & icmp_ln86_112_reg_1450);

assign and_ln102_138_fu_1022_p2 = (and_ln104_20_fu_918_p2 & and_ln102_137_fu_1017_p2);

assign and_ln102_fu_536_p2 = (icmp_ln86_fu_362_p2 & icmp_ln86_86_fu_368_p2);

assign and_ln104_16_fu_887_p2 = (xor_ln104_reg_1455 & xor_ln104_42_fu_882_p2);

assign and_ln104_17_fu_566_p2 = (xor_ln104_43_fu_560_p2 & and_ln102_fu_536_p2);

assign and_ln104_18_fu_584_p2 = (xor_ln104_44_fu_578_p2 & and_ln104_fu_548_p2);

assign and_ln104_19_fu_902_p2 = (xor_ln104_45_fu_897_p2 & and_ln102_107_fu_878_p2);

assign and_ln104_20_fu_918_p2 = (xor_ln104_46_fu_913_p2 & and_ln104_16_fu_887_p2);

assign and_ln104_21_fu_614_p2 = (xor_ln104_48_fu_608_p2 & and_ln104_17_fu_566_p2);

assign and_ln104_fu_548_p2 = (xor_ln104_41_fu_542_p2 & icmp_ln86_fu_362_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((or_ln117_108_fu_1229_p2[0:0] == 1'b1) ? tmp_fu_1241_p61 : 13'd0);

assign icmp_ln86_100_fu_452_p2 = (($signed(x_32_val) < $signed(18'd928)) ? 1'b1 : 1'b0);

assign icmp_ln86_101_fu_458_p2 = (($signed(x_19_val) < $signed(18'd6741)) ? 1'b1 : 1'b0);

assign icmp_ln86_102_fu_464_p2 = (($signed(x_2_val) < $signed(18'd261848)) ? 1'b1 : 1'b0);

assign icmp_ln86_103_fu_470_p2 = (($signed(x_27_val) < $signed(18'd29316)) ? 1'b1 : 1'b0);

assign icmp_ln86_104_fu_476_p2 = (($signed(x_2_val) < $signed(18'd261840)) ? 1'b1 : 1'b0);

assign icmp_ln86_105_fu_482_p2 = (($signed(x_34_val) < $signed(18'd486)) ? 1'b1 : 1'b0);

assign icmp_ln86_106_fu_488_p2 = (($signed(x_16_val) < $signed(18'd119)) ? 1'b1 : 1'b0);

assign icmp_ln86_107_fu_494_p2 = (($signed(x_6_val) < $signed(18'd25168)) ? 1'b1 : 1'b0);

assign icmp_ln86_108_fu_500_p2 = (($signed(x_33_val) < $signed(18'd643)) ? 1'b1 : 1'b0);

assign icmp_ln86_109_fu_506_p2 = (($signed(x_52_val) < $signed(18'd66049)) ? 1'b1 : 1'b0);

assign icmp_ln86_110_fu_512_p2 = (($signed(x_14_val) < $signed(18'd58)) ? 1'b1 : 1'b0);

assign icmp_ln86_111_fu_518_p2 = (($signed(x_13_val) < $signed(18'd465)) ? 1'b1 : 1'b0);

assign icmp_ln86_112_fu_524_p2 = (($signed(x_19_val) < $signed(18'd5385)) ? 1'b1 : 1'b0);

assign icmp_ln86_86_fu_368_p2 = (($signed(x_6_val) < $signed(18'd21466)) ? 1'b1 : 1'b0);

assign icmp_ln86_87_fu_374_p2 = (($signed(x_3_val) < $signed(18'd92632)) ? 1'b1 : 1'b0);

assign icmp_ln86_88_fu_380_p2 = (($signed(x_6_val) < $signed(18'd21416)) ? 1'b1 : 1'b0);

assign icmp_ln86_89_fu_386_p2 = (($signed(x_24_val) < $signed(18'd446)) ? 1'b1 : 1'b0);

assign icmp_ln86_90_fu_392_p2 = (($signed(x_47_val) < $signed(18'd90049)) ? 1'b1 : 1'b0);

assign icmp_ln86_91_fu_398_p2 = (($signed(x_1_val) < $signed(18'd234971)) ? 1'b1 : 1'b0);

assign icmp_ln86_92_fu_404_p2 = (($signed(x_1_val) < $signed(18'd76174)) ? 1'b1 : 1'b0);

assign icmp_ln86_93_fu_410_p2 = (($signed(x_2_val) < $signed(18'd916)) ? 1'b1 : 1'b0);

assign icmp_ln86_94_fu_416_p2 = (($signed(x_50_val) < $signed(18'd101039)) ? 1'b1 : 1'b0);

assign icmp_ln86_95_fu_422_p2 = (($signed(x_46_val) < $signed(18'd276)) ? 1'b1 : 1'b0);

assign icmp_ln86_96_fu_428_p2 = (($signed(x_32_val) < $signed(18'd494)) ? 1'b1 : 1'b0);

assign icmp_ln86_97_fu_434_p2 = (($signed(x_34_val) < $signed(18'd483)) ? 1'b1 : 1'b0);

assign icmp_ln86_98_fu_440_p2 = (($signed(x_3_val) < $signed(18'd98394)) ? 1'b1 : 1'b0);

assign icmp_ln86_99_fu_446_p2 = (($signed(x_9_val) < $signed(18'd1465)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_362_p2 = (($signed(x_52_val) < $signed(18'd64001)) ? 1'b1 : 1'b0);

assign or_ln117_100_fu_1118_p2 = (or_ln117_92_reg_1462 | and_ln102_107_fu_878_p2);

assign or_ln117_101_fu_1131_p2 = (or_ln117_100_fu_1118_p2 | and_ln102_133_fu_996_p2);

assign or_ln117_102_fu_1145_p2 = (or_ln117_100_fu_1118_p2 | and_ln102_118_fu_944_p2);

assign or_ln117_103_fu_1159_p2 = (or_ln117_102_fu_1145_p2 | and_ln102_135_fu_1006_p2);

assign or_ln117_104_fu_1173_p2 = (or_ln117_100_fu_1118_p2 | and_ln102_111_fu_908_p2);

assign or_ln117_105_fu_1187_p2 = (or_ln117_104_fu_1173_p2 | and_ln102_136_fu_1012_p2);

assign or_ln117_106_fu_1201_p2 = (or_ln117_104_fu_1173_p2 | and_ln102_119_fu_954_p2);

assign or_ln117_107_fu_1215_p2 = (or_ln117_106_fu_1201_p2 | and_ln102_138_fu_1022_p2);

assign or_ln117_108_fu_1229_p2 = (xor_ln104_reg_1455 | or_ln117_92_reg_1462);

assign or_ln117_80_fu_692_p2 = (xor_ln117_fu_686_p2 | icmp_ln86_88_fu_380_p2);

assign or_ln117_81_fu_698_p2 = (or_ln117_80_fu_692_p2 | icmp_ln86_93_fu_410_p2);

assign or_ln117_82_fu_708_p2 = (and_ln104_21_fu_614_p2 | and_ln104_18_fu_584_p2);

assign or_ln117_83_fu_722_p2 = (or_ln117_82_fu_708_p2 | and_ln102_120_fu_638_p2);

assign or_ln117_84_fu_740_p2 = (or_ln117_82_fu_708_p2 | and_ln102_112_fu_590_p2);

assign or_ln117_85_fu_754_p2 = (or_ln117_84_fu_740_p2 | and_ln102_122_fu_650_p2);

assign or_ln117_86_fu_768_p2 = (or_ln117_82_fu_708_p2 | and_ln102_108_fu_554_p2);

assign or_ln117_87_fu_782_p2 = (or_ln117_86_fu_768_p2 | and_ln102_123_fu_656_p2);

assign or_ln117_88_fu_800_p2 = (or_ln117_86_fu_768_p2 | and_ln102_113_fu_602_p2);

assign or_ln117_89_fu_814_p2 = (or_ln117_88_fu_800_p2 | and_ln102_124_fu_662_p2);

assign or_ln117_90_fu_828_p2 = (or_ln117_88_fu_800_p2 | and_ln102_114_fu_620_p2);

assign or_ln117_91_fu_842_p2 = (or_ln117_90_fu_828_p2 | and_ln102_126_fu_674_p2);

assign or_ln117_92_fu_856_p2 = (or_ln117_88_fu_800_p2 | and_ln102_109_fu_572_p2);

assign or_ln117_93_fu_1028_p2 = (or_ln117_92_reg_1462 | and_ln102_127_fu_964_p2);

assign or_ln117_94_fu_1033_p2 = (or_ln117_92_reg_1462 | and_ln102_116_fu_924_p2);

assign or_ln117_95_fu_1045_p2 = (or_ln117_94_fu_1033_p2 | and_ln102_129_fu_974_p2);

assign or_ln117_96_fu_1063_p2 = (or_ln117_92_reg_1462 | and_ln102_110_fu_892_p2);

assign or_ln117_97_fu_1076_p2 = (or_ln117_96_fu_1063_p2 | and_ln102_130_fu_980_p2);

assign or_ln117_98_fu_1090_p2 = (or_ln117_96_fu_1063_p2 | and_ln102_117_fu_934_p2);

assign or_ln117_99_fu_1104_p2 = (or_ln117_98_fu_1090_p2 | and_ln102_132_fu_990_p2);

assign or_ln117_fu_680_p2 = (and_ln104_21_fu_614_p2 | and_ln102_115_fu_632_p2);

assign select_ln117_100_fu_1096_p3 = ((or_ln117_97_fu_1076_p2[0:0] == 1'b1) ? select_ln117_99_fu_1082_p3 : 5'd18);

assign select_ln117_101_fu_1110_p3 = ((or_ln117_98_fu_1090_p2[0:0] == 1'b1) ? select_ln117_100_fu_1096_p3 : 5'd19);

assign select_ln117_102_fu_1123_p3 = ((or_ln117_99_fu_1104_p2[0:0] == 1'b1) ? select_ln117_101_fu_1110_p3 : 5'd20);

assign select_ln117_103_fu_1137_p3 = ((or_ln117_100_fu_1118_p2[0:0] == 1'b1) ? select_ln117_102_fu_1123_p3 : 5'd21);

assign select_ln117_104_fu_1151_p3 = ((or_ln117_101_fu_1131_p2[0:0] == 1'b1) ? select_ln117_103_fu_1137_p3 : 5'd22);

assign select_ln117_105_fu_1165_p3 = ((or_ln117_102_fu_1145_p2[0:0] == 1'b1) ? select_ln117_104_fu_1151_p3 : 5'd23);

assign select_ln117_106_fu_1179_p3 = ((or_ln117_103_fu_1159_p2[0:0] == 1'b1) ? select_ln117_105_fu_1165_p3 : 5'd24);

assign select_ln117_107_fu_1193_p3 = ((or_ln117_104_fu_1173_p2[0:0] == 1'b1) ? select_ln117_106_fu_1179_p3 : 5'd25);

assign select_ln117_108_fu_1207_p3 = ((or_ln117_105_fu_1187_p2[0:0] == 1'b1) ? select_ln117_107_fu_1193_p3 : 5'd26);

assign select_ln117_109_fu_1221_p3 = ((or_ln117_106_fu_1201_p2[0:0] == 1'b1) ? select_ln117_108_fu_1207_p3 : 5'd27);

assign select_ln117_85_fu_728_p3 = ((or_ln117_82_fu_708_p2[0:0] == 1'b1) ? select_ln117_fu_714_p3 : 2'd3);

assign select_ln117_86_fu_746_p3 = ((or_ln117_83_fu_722_p2[0:0] == 1'b1) ? zext_ln117_10_fu_736_p1 : 3'd4);

assign select_ln117_87_fu_760_p3 = ((or_ln117_84_fu_740_p2[0:0] == 1'b1) ? select_ln117_86_fu_746_p3 : 3'd5);

assign select_ln117_88_fu_774_p3 = ((or_ln117_85_fu_754_p2[0:0] == 1'b1) ? select_ln117_87_fu_760_p3 : 3'd6);

assign select_ln117_89_fu_788_p3 = ((or_ln117_86_fu_768_p2[0:0] == 1'b1) ? select_ln117_88_fu_774_p3 : 3'd7);

assign select_ln117_90_fu_806_p3 = ((or_ln117_87_fu_782_p2[0:0] == 1'b1) ? zext_ln117_11_fu_796_p1 : 4'd8);

assign select_ln117_91_fu_820_p3 = ((or_ln117_88_fu_800_p2[0:0] == 1'b1) ? select_ln117_90_fu_806_p3 : 4'd9);

assign select_ln117_92_fu_834_p3 = ((or_ln117_89_fu_814_p2[0:0] == 1'b1) ? select_ln117_91_fu_820_p3 : 4'd10);

assign select_ln117_93_fu_848_p3 = ((or_ln117_90_fu_828_p2[0:0] == 1'b1) ? select_ln117_92_fu_834_p3 : 4'd11);

assign select_ln117_94_fu_862_p3 = ((or_ln117_91_fu_842_p2[0:0] == 1'b1) ? select_ln117_93_fu_848_p3 : 4'd12);

assign select_ln117_95_fu_870_p3 = ((or_ln117_92_fu_856_p2[0:0] == 1'b1) ? select_ln117_94_fu_862_p3 : 4'd13);

assign select_ln117_96_fu_1038_p3 = ((or_ln117_93_fu_1028_p2[0:0] == 1'b1) ? select_ln117_95_reg_1471 : 4'd14);

assign select_ln117_97_fu_1051_p3 = ((or_ln117_94_fu_1033_p2[0:0] == 1'b1) ? select_ln117_96_fu_1038_p3 : 4'd15);

assign select_ln117_98_fu_1068_p3 = ((or_ln117_95_fu_1045_p2[0:0] == 1'b1) ? zext_ln117_12_fu_1059_p1 : 5'd16);

assign select_ln117_99_fu_1082_p3 = ((or_ln117_96_fu_1063_p2[0:0] == 1'b1) ? select_ln117_98_fu_1068_p3 : 5'd17);

assign select_ln117_fu_714_p3 = ((or_ln117_fu_680_p2[0:0] == 1'b1) ? zext_ln117_fu_704_p1 : 2'd2);

assign tmp_fu_1241_p59 = 'bx;

assign tmp_fu_1241_p60 = ((or_ln117_107_fu_1215_p2[0:0] == 1'b1) ? select_ln117_109_fu_1221_p3 : 5'd28);

assign xor_ln104_41_fu_542_p2 = (icmp_ln86_86_fu_368_p2 ^ 1'd1);

assign xor_ln104_42_fu_882_p2 = (icmp_ln86_87_reg_1373 ^ 1'd1);

assign xor_ln104_43_fu_560_p2 = (icmp_ln86_88_fu_380_p2 ^ 1'd1);

assign xor_ln104_44_fu_578_p2 = (icmp_ln86_89_fu_386_p2 ^ 1'd1);

assign xor_ln104_45_fu_897_p2 = (icmp_ln86_90_reg_1379 ^ 1'd1);

assign xor_ln104_46_fu_913_p2 = (icmp_ln86_91_reg_1385 ^ 1'd1);

assign xor_ln104_47_fu_596_p2 = (icmp_ln86_92_fu_404_p2 ^ 1'd1);

assign xor_ln104_48_fu_608_p2 = (icmp_ln86_93_fu_410_p2 ^ 1'd1);

assign xor_ln104_49_fu_626_p2 = (icmp_ln86_94_fu_416_p2 ^ 1'd1);

assign xor_ln104_50_fu_929_p2 = (icmp_ln86_96_reg_1391 ^ 1'd1);

assign xor_ln104_51_fu_939_p2 = (icmp_ln86_97_reg_1397 ^ 1'd1);

assign xor_ln104_52_fu_949_p2 = (icmp_ln86_98_reg_1403 ^ 1'd1);

assign xor_ln104_53_fu_959_p2 = (icmp_ln86_99_reg_1409 ^ 1'd1);

assign xor_ln104_fu_530_p2 = (icmp_ln86_fu_362_p2 ^ 1'd1);

assign xor_ln117_fu_686_p2 = (1'd1 ^ and_ln102_fu_536_p2);

assign zext_ln117_10_fu_736_p1 = select_ln117_85_fu_728_p3;

assign zext_ln117_11_fu_796_p1 = select_ln117_89_fu_788_p3;

assign zext_ln117_12_fu_1059_p1 = select_ln117_97_fu_1051_p3;

assign zext_ln117_fu_704_p1 = or_ln117_81_fu_698_p2;

endmodule //my_prj_decision_function_96
