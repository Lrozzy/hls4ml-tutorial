-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity my_prj_decision_function_95 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_1_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_4_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_5_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_6_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_10_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_11_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_26_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_29_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_46_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_47_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_49_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_50_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_51_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_52_val : IN STD_LOGIC_VECTOR (17 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (11 downto 0) );
end;


architecture behav of my_prj_decision_function_95 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv18_141B : STD_LOGIC_VECTOR (17 downto 0) := "000001010000011011";
    constant ap_const_lv18_330E : STD_LOGIC_VECTOR (17 downto 0) := "000011001100001110";
    constant ap_const_lv18_1055 : STD_LOGIC_VECTOR (17 downto 0) := "000001000001010101";
    constant ap_const_lv18_182B : STD_LOGIC_VECTOR (17 downto 0) := "000001100000101011";
    constant ap_const_lv18_1B8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000110111000";
    constant ap_const_lv18_15C5F : STD_LOGIC_VECTOR (17 downto 0) := "010101110001011111";
    constant ap_const_lv18_29CC6 : STD_LOGIC_VECTOR (17 downto 0) := "101001110011000110";
    constant ap_const_lv18_5A01 : STD_LOGIC_VECTOR (17 downto 0) := "000101101000000001";
    constant ap_const_lv18_2E2 : STD_LOGIC_VECTOR (17 downto 0) := "000000001011100010";
    constant ap_const_lv18_268E5 : STD_LOGIC_VECTOR (17 downto 0) := "100110100011100101";
    constant ap_const_lv18_780F : STD_LOGIC_VECTOR (17 downto 0) := "000111100000001111";
    constant ap_const_lv18_272 : STD_LOGIC_VECTOR (17 downto 0) := "000000001001110010";
    constant ap_const_lv18_38E5F : STD_LOGIC_VECTOR (17 downto 0) := "111000111001011111";
    constant ap_const_lv18_2003B : STD_LOGIC_VECTOR (17 downto 0) := "100000000000111011";
    constant ap_const_lv18_75 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001110101";
    constant ap_const_lv18_2C19D : STD_LOGIC_VECTOR (17 downto 0) := "101100000110011101";
    constant ap_const_lv18_2AD98 : STD_LOGIC_VECTOR (17 downto 0) := "101010110110011000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv12_E63 : STD_LOGIC_VECTOR (11 downto 0) := "111001100011";
    constant ap_const_lv12_44C : STD_LOGIC_VECTOR (11 downto 0) := "010001001100";
    constant ap_const_lv12_DE4 : STD_LOGIC_VECTOR (11 downto 0) := "110111100100";
    constant ap_const_lv12_E2D : STD_LOGIC_VECTOR (11 downto 0) := "111000101101";
    constant ap_const_lv12_ECA : STD_LOGIC_VECTOR (11 downto 0) := "111011001010";
    constant ap_const_lv12_26F : STD_LOGIC_VECTOR (11 downto 0) := "001001101111";
    constant ap_const_lv12_C : STD_LOGIC_VECTOR (11 downto 0) := "000000001100";
    constant ap_const_lv12_709 : STD_LOGIC_VECTOR (11 downto 0) := "011100001001";
    constant ap_const_lv12_F7 : STD_LOGIC_VECTOR (11 downto 0) := "000011110111";
    constant ap_const_lv12_EB2 : STD_LOGIC_VECTOR (11 downto 0) := "111010110010";
    constant ap_const_lv12_FFC : STD_LOGIC_VECTOR (11 downto 0) := "111111111100";
    constant ap_const_lv12_4C : STD_LOGIC_VECTOR (11 downto 0) := "000001001100";
    constant ap_const_lv12_F1F : STD_LOGIC_VECTOR (11 downto 0) := "111100011111";
    constant ap_const_lv12_FF5 : STD_LOGIC_VECTOR (11 downto 0) := "111111110101";
    constant ap_const_lv12_89 : STD_LOGIC_VECTOR (11 downto 0) := "000010001001";
    constant ap_const_lv12_D20 : STD_LOGIC_VECTOR (11 downto 0) := "110100100000";
    constant ap_const_lv12_C91 : STD_LOGIC_VECTOR (11 downto 0) := "110010010001";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln86_122_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_122_reg_873 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln86_127_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_127_reg_879 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_128_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_128_reg_884 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln104_25_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln104_25_reg_889 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln117_119_fu_704_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln117_119_reg_895 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln117_122_fu_718_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln117_122_reg_901 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln86_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_113_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln104_54_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_114_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln104_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln104_55_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_115_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_116_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln104_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln104_56_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_117_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_139_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln104_57_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_118_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln104_22_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln104_58_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_119_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_143_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_120_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_141_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_121_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_142_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_123_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_145_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_124_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln104_59_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_149_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_125_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_146_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_126_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln104_60_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_152_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_140_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln117_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln104_23_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln117_fu_538_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln117_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln104_24_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln117_fu_548_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln117_111_fu_562_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln117_109_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_144_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln117_13_fu_570_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln117_110_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln117_112_fu_580_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln117_111_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_148_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln117_113_fu_594_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln117_112_fu_602_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln117_114_fu_608_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln117_115_fu_622_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln117_113_fu_616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_150_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln117_14_fu_630_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln117_114_fu_634_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln117_116_fu_640_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln117_115_fu_648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_151_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln117_117_fu_654_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln117_116_fu_662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln117_118_fu_668_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln117_117_fu_676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_153_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln117_119_fu_682_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln117_118_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln117_120_fu_696_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln117_121_fu_710_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln102_147_fu_726_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln104_61_fu_730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_155_fu_740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_154_fu_735_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln117_120_fu_750_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln117_123_fu_760_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln117_121_fu_755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_156_fu_745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln117_15_fu_767_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln117_122_fu_771_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln117_124_fu_777_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal agg_result_fu_793_p37 : STD_LOGIC_VECTOR (11 downto 0);
    signal agg_result_fu_793_p38 : STD_LOGIC_VECTOR (4 downto 0);
    signal agg_result_fu_793_p39 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal agg_result_fu_793_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal agg_result_fu_793_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal agg_result_fu_793_p5 : STD_LOGIC_VECTOR (4 downto 0);
    signal agg_result_fu_793_p7 : STD_LOGIC_VECTOR (4 downto 0);
    signal agg_result_fu_793_p9 : STD_LOGIC_VECTOR (4 downto 0);
    signal agg_result_fu_793_p11 : STD_LOGIC_VECTOR (4 downto 0);
    signal agg_result_fu_793_p13 : STD_LOGIC_VECTOR (4 downto 0);
    signal agg_result_fu_793_p15 : STD_LOGIC_VECTOR (4 downto 0);
    signal agg_result_fu_793_p17 : STD_LOGIC_VECTOR (4 downto 0);
    signal agg_result_fu_793_p19 : STD_LOGIC_VECTOR (4 downto 0);
    signal agg_result_fu_793_p21 : STD_LOGIC_VECTOR (4 downto 0);
    signal agg_result_fu_793_p23 : STD_LOGIC_VECTOR (4 downto 0);
    signal agg_result_fu_793_p25 : STD_LOGIC_VECTOR (4 downto 0);
    signal agg_result_fu_793_p27 : STD_LOGIC_VECTOR (4 downto 0);
    signal agg_result_fu_793_p29 : STD_LOGIC_VECTOR (4 downto 0);
    signal agg_result_fu_793_p31 : STD_LOGIC_VECTOR (4 downto 0);
    signal agg_result_fu_793_p33 : STD_LOGIC_VECTOR (4 downto 0);
    signal agg_result_fu_793_p35 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component my_prj_sparsemux_37_5_12_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (4 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (4 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (4 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (4 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (4 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (4 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (4 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (4 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (4 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (4 downto 0);
        din9_WIDTH : INTEGER;
        CASE10 : STD_LOGIC_VECTOR (4 downto 0);
        din10_WIDTH : INTEGER;
        CASE11 : STD_LOGIC_VECTOR (4 downto 0);
        din11_WIDTH : INTEGER;
        CASE12 : STD_LOGIC_VECTOR (4 downto 0);
        din12_WIDTH : INTEGER;
        CASE13 : STD_LOGIC_VECTOR (4 downto 0);
        din13_WIDTH : INTEGER;
        CASE14 : STD_LOGIC_VECTOR (4 downto 0);
        din14_WIDTH : INTEGER;
        CASE15 : STD_LOGIC_VECTOR (4 downto 0);
        din15_WIDTH : INTEGER;
        CASE16 : STD_LOGIC_VECTOR (4 downto 0);
        din16_WIDTH : INTEGER;
        CASE17 : STD_LOGIC_VECTOR (4 downto 0);
        din17_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        din3 : IN STD_LOGIC_VECTOR (11 downto 0);
        din4 : IN STD_LOGIC_VECTOR (11 downto 0);
        din5 : IN STD_LOGIC_VECTOR (11 downto 0);
        din6 : IN STD_LOGIC_VECTOR (11 downto 0);
        din7 : IN STD_LOGIC_VECTOR (11 downto 0);
        din8 : IN STD_LOGIC_VECTOR (11 downto 0);
        din9 : IN STD_LOGIC_VECTOR (11 downto 0);
        din10 : IN STD_LOGIC_VECTOR (11 downto 0);
        din11 : IN STD_LOGIC_VECTOR (11 downto 0);
        din12 : IN STD_LOGIC_VECTOR (11 downto 0);
        din13 : IN STD_LOGIC_VECTOR (11 downto 0);
        din14 : IN STD_LOGIC_VECTOR (11 downto 0);
        din15 : IN STD_LOGIC_VECTOR (11 downto 0);
        din16 : IN STD_LOGIC_VECTOR (11 downto 0);
        din17 : IN STD_LOGIC_VECTOR (11 downto 0);
        def : IN STD_LOGIC_VECTOR (11 downto 0);
        sel : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;



begin
    sparsemux_37_5_12_1_1_U2633 : component my_prj_sparsemux_37_5_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00000",
        din0_WIDTH => 12,
        CASE1 => "00001",
        din1_WIDTH => 12,
        CASE2 => "00010",
        din2_WIDTH => 12,
        CASE3 => "00011",
        din3_WIDTH => 12,
        CASE4 => "00100",
        din4_WIDTH => 12,
        CASE5 => "00101",
        din5_WIDTH => 12,
        CASE6 => "00110",
        din6_WIDTH => 12,
        CASE7 => "00111",
        din7_WIDTH => 12,
        CASE8 => "01000",
        din8_WIDTH => 12,
        CASE9 => "01001",
        din9_WIDTH => 12,
        CASE10 => "01010",
        din10_WIDTH => 12,
        CASE11 => "01011",
        din11_WIDTH => 12,
        CASE12 => "01100",
        din12_WIDTH => 12,
        CASE13 => "01101",
        din13_WIDTH => 12,
        CASE14 => "01110",
        din14_WIDTH => 12,
        CASE15 => "01111",
        din15_WIDTH => 12,
        CASE16 => "10000",
        din16_WIDTH => 12,
        CASE17 => "10001",
        din17_WIDTH => 12,
        def_WIDTH => 12,
        sel_WIDTH => 5,
        dout_WIDTH => 12)
    port map (
        din0 => ap_const_lv12_E63,
        din1 => ap_const_lv12_44C,
        din2 => ap_const_lv12_DE4,
        din3 => ap_const_lv12_E2D,
        din4 => ap_const_lv12_ECA,
        din5 => ap_const_lv12_26F,
        din6 => ap_const_lv12_C,
        din7 => ap_const_lv12_709,
        din8 => ap_const_lv12_F7,
        din9 => ap_const_lv12_EB2,
        din10 => ap_const_lv12_FFC,
        din11 => ap_const_lv12_4C,
        din12 => ap_const_lv12_F1F,
        din13 => ap_const_lv12_FF5,
        din14 => ap_const_lv12_89,
        din15 => ap_const_lv12_D20,
        din16 => ap_const_lv12_C91,
        din17 => ap_const_lv12_FFF,
        def => agg_result_fu_793_p37,
        sel => agg_result_fu_793_p38,
        dout => agg_result_fu_793_p39);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln104_25_reg_889 <= and_ln104_25_fu_454_p2;
                icmp_ln86_122_reg_873 <= icmp_ln86_122_fu_322_p2;
                icmp_ln86_127_reg_879 <= icmp_ln86_127_fu_352_p2;
                icmp_ln86_128_reg_884 <= icmp_ln86_128_fu_358_p2;
                or_ln117_119_reg_895 <= or_ln117_119_fu_704_p2;
                select_ln117_122_reg_901 <= select_ln117_122_fu_718_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    agg_result_fu_793_p37 <= "XXXXXXXXXXXX";
    agg_result_fu_793_p38 <= 
        select_ln117_124_fu_777_p3 when (or_ln117_122_fu_771_p2(0) = '1') else 
        ap_const_lv5_11;
    and_ln102_139_fu_388_p2 <= (xor_ln104_fu_364_p2 and icmp_ln86_114_fu_274_p2);
    and_ln102_140_fu_406_p2 <= (icmp_ln86_115_fu_280_p2 and and_ln102_fu_370_p2);
    and_ln102_141_fu_424_p2 <= (icmp_ln86_117_fu_292_p2 and and_ln102_139_fu_388_p2);
    and_ln102_142_fu_442_p2 <= (icmp_ln86_118_fu_298_p2 and and_ln104_22_fu_400_p2);
    and_ln102_143_fu_460_p2 <= (icmp_ln86_119_fu_304_p2 and and_ln104_fu_382_p2);
    and_ln102_144_fu_466_p2 <= (icmp_ln86_116_fu_286_p2 and and_ln102_143_fu_460_p2);
    and_ln102_145_fu_472_p2 <= (icmp_ln86_120_fu_310_p2 and and_ln102_141_fu_424_p2);
    and_ln102_146_fu_484_p2 <= (icmp_ln86_121_fu_316_p2 and and_ln102_142_fu_442_p2);
    and_ln102_147_fu_726_p2 <= (icmp_ln86_122_reg_873 and and_ln104_25_reg_889);
    and_ln102_148_fu_496_p2 <= (icmp_ln86_123_fu_328_p2 and and_ln102_145_fu_472_p2);
    and_ln102_149_fu_502_p2 <= (xor_ln104_59_fu_478_p2 and icmp_ln86_124_fu_334_p2);
    and_ln102_150_fu_508_p2 <= (and_ln102_149_fu_502_p2 and and_ln102_141_fu_424_p2);
    and_ln102_151_fu_514_p2 <= (icmp_ln86_125_fu_340_p2 and and_ln102_146_fu_484_p2);
    and_ln102_152_fu_520_p2 <= (xor_ln104_60_fu_490_p2 and icmp_ln86_126_fu_346_p2);
    and_ln102_153_fu_526_p2 <= (and_ln102_152_fu_520_p2 and and_ln102_142_fu_442_p2);
    and_ln102_154_fu_735_p2 <= (icmp_ln86_127_reg_879 and and_ln102_147_fu_726_p2);
    and_ln102_155_fu_740_p2 <= (xor_ln104_61_fu_730_p2 and icmp_ln86_128_reg_884);
    and_ln102_156_fu_745_p2 <= (and_ln104_25_reg_889 and and_ln102_155_fu_740_p2);
    and_ln102_fu_370_p2 <= (icmp_ln86_fu_262_p2 and icmp_ln86_113_fu_268_p2);
    and_ln104_22_fu_400_p2 <= (xor_ln104_fu_364_p2 and xor_ln104_55_fu_394_p2);
    and_ln104_23_fu_418_p2 <= (xor_ln104_56_fu_412_p2 and and_ln104_fu_382_p2);
    and_ln104_24_fu_436_p2 <= (xor_ln104_57_fu_430_p2 and and_ln102_139_fu_388_p2);
    and_ln104_25_fu_454_p2 <= (xor_ln104_58_fu_448_p2 and and_ln104_22_fu_400_p2);
    and_ln104_fu_382_p2 <= (xor_ln104_54_fu_376_p2 and icmp_ln86_fu_262_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= agg_result_fu_793_p39;
    icmp_ln86_113_fu_268_p2 <= "1" when (signed(x_47_val) < signed(ap_const_lv18_330E)) else "0";
    icmp_ln86_114_fu_274_p2 <= "1" when (signed(x_6_val) < signed(ap_const_lv18_1055)) else "0";
    icmp_ln86_115_fu_280_p2 <= "1" when (signed(x_4_val) < signed(ap_const_lv18_182B)) else "0";
    icmp_ln86_116_fu_286_p2 <= "1" when (signed(x_11_val) < signed(ap_const_lv18_1B8)) else "0";
    icmp_ln86_117_fu_292_p2 <= "1" when (signed(x_50_val) < signed(ap_const_lv18_15C5F)) else "0";
    icmp_ln86_118_fu_298_p2 <= "1" when (signed(x_49_val) < signed(ap_const_lv18_29CC6)) else "0";
    icmp_ln86_119_fu_304_p2 <= "1" when (signed(x_52_val) < signed(ap_const_lv18_5A01)) else "0";
    icmp_ln86_120_fu_310_p2 <= "1" when (signed(x_10_val) < signed(ap_const_lv18_2E2)) else "0";
    icmp_ln86_121_fu_316_p2 <= "1" when (signed(x_49_val) < signed(ap_const_lv18_268E5)) else "0";
    icmp_ln86_122_fu_322_p2 <= "1" when (signed(x_29_val) < signed(ap_const_lv18_780F)) else "0";
    icmp_ln86_123_fu_328_p2 <= "1" when (signed(x_10_val) < signed(ap_const_lv18_272)) else "0";
    icmp_ln86_124_fu_334_p2 <= "1" when (signed(x_1_val) < signed(ap_const_lv18_38E5F)) else "0";
    icmp_ln86_125_fu_340_p2 <= "1" when (signed(x_51_val) < signed(ap_const_lv18_2003B)) else "0";
    icmp_ln86_126_fu_346_p2 <= "1" when (signed(x_46_val) < signed(ap_const_lv18_75)) else "0";
    icmp_ln86_127_fu_352_p2 <= "1" when (signed(x_26_val) < signed(ap_const_lv18_2C19D)) else "0";
    icmp_ln86_128_fu_358_p2 <= "1" when (signed(x_50_val) < signed(ap_const_lv18_2AD98)) else "0";
    icmp_ln86_fu_262_p2 <= "1" when (signed(x_5_val) < signed(ap_const_lv18_141B)) else "0";
    or_ln117_109_fu_556_p2 <= (or_ln117_fu_542_p2 or and_ln104_24_fu_436_p2);
    or_ln117_110_fu_574_p2 <= (or_ln117_109_fu_556_p2 or and_ln102_144_fu_466_p2);
    or_ln117_111_fu_588_p2 <= (icmp_ln86_fu_262_p2 or and_ln104_24_fu_436_p2);
    or_ln117_112_fu_602_p2 <= (or_ln117_111_fu_588_p2 or and_ln102_148_fu_496_p2);
    or_ln117_113_fu_616_p2 <= (or_ln117_111_fu_588_p2 or and_ln102_145_fu_472_p2);
    or_ln117_114_fu_634_p2 <= (or_ln117_113_fu_616_p2 or and_ln102_150_fu_508_p2);
    or_ln117_115_fu_648_p2 <= (icmp_ln86_fu_262_p2 or and_ln102_139_fu_388_p2);
    or_ln117_116_fu_662_p2 <= (or_ln117_115_fu_648_p2 or and_ln102_151_fu_514_p2);
    or_ln117_117_fu_676_p2 <= (or_ln117_115_fu_648_p2 or and_ln102_146_fu_484_p2);
    or_ln117_118_fu_690_p2 <= (or_ln117_117_fu_676_p2 or and_ln102_153_fu_526_p2);
    or_ln117_119_fu_704_p2 <= (or_ln117_115_fu_648_p2 or and_ln102_142_fu_442_p2);
    or_ln117_120_fu_750_p2 <= (or_ln117_119_reg_895 or and_ln102_154_fu_735_p2);
    or_ln117_121_fu_755_p2 <= (or_ln117_119_reg_895 or and_ln102_147_fu_726_p2);
    or_ln117_122_fu_771_p2 <= (or_ln117_121_fu_755_p2 or and_ln102_156_fu_745_p2);
    or_ln117_fu_542_p2 <= (and_ln104_23_fu_418_p2 or and_ln102_fu_370_p2);
    select_ln117_111_fu_562_p3 <= 
        select_ln117_fu_548_p3 when (or_ln117_fu_542_p2(0) = '1') else 
        ap_const_lv2_3;
    select_ln117_112_fu_580_p3 <= 
        zext_ln117_13_fu_570_p1 when (or_ln117_109_fu_556_p2(0) = '1') else 
        ap_const_lv3_4;
    select_ln117_113_fu_594_p3 <= 
        select_ln117_112_fu_580_p3 when (or_ln117_110_fu_574_p2(0) = '1') else 
        ap_const_lv3_5;
    select_ln117_114_fu_608_p3 <= 
        select_ln117_113_fu_594_p3 when (or_ln117_111_fu_588_p2(0) = '1') else 
        ap_const_lv3_6;
    select_ln117_115_fu_622_p3 <= 
        select_ln117_114_fu_608_p3 when (or_ln117_112_fu_602_p2(0) = '1') else 
        ap_const_lv3_7;
    select_ln117_116_fu_640_p3 <= 
        zext_ln117_14_fu_630_p1 when (or_ln117_113_fu_616_p2(0) = '1') else 
        ap_const_lv4_8;
    select_ln117_117_fu_654_p3 <= 
        select_ln117_116_fu_640_p3 when (or_ln117_114_fu_634_p2(0) = '1') else 
        ap_const_lv4_9;
    select_ln117_118_fu_668_p3 <= 
        select_ln117_117_fu_654_p3 when (or_ln117_115_fu_648_p2(0) = '1') else 
        ap_const_lv4_A;
    select_ln117_119_fu_682_p3 <= 
        select_ln117_118_fu_668_p3 when (or_ln117_116_fu_662_p2(0) = '1') else 
        ap_const_lv4_B;
    select_ln117_120_fu_696_p3 <= 
        select_ln117_119_fu_682_p3 when (or_ln117_117_fu_676_p2(0) = '1') else 
        ap_const_lv4_C;
    select_ln117_121_fu_710_p3 <= 
        select_ln117_120_fu_696_p3 when (or_ln117_118_fu_690_p2(0) = '1') else 
        ap_const_lv4_D;
    select_ln117_122_fu_718_p3 <= 
        select_ln117_121_fu_710_p3 when (or_ln117_119_fu_704_p2(0) = '1') else 
        ap_const_lv4_E;
    select_ln117_123_fu_760_p3 <= 
        select_ln117_122_reg_901 when (or_ln117_120_fu_750_p2(0) = '1') else 
        ap_const_lv4_F;
    select_ln117_124_fu_777_p3 <= 
        zext_ln117_15_fu_767_p1 when (or_ln117_121_fu_755_p2(0) = '1') else 
        ap_const_lv5_10;
    select_ln117_fu_548_p3 <= 
        zext_ln117_fu_538_p1 when (and_ln102_fu_370_p2(0) = '1') else 
        ap_const_lv2_2;
    xor_ln104_54_fu_376_p2 <= (icmp_ln86_113_fu_268_p2 xor ap_const_lv1_1);
    xor_ln104_55_fu_394_p2 <= (icmp_ln86_114_fu_274_p2 xor ap_const_lv1_1);
    xor_ln104_56_fu_412_p2 <= (icmp_ln86_116_fu_286_p2 xor ap_const_lv1_1);
    xor_ln104_57_fu_430_p2 <= (icmp_ln86_117_fu_292_p2 xor ap_const_lv1_1);
    xor_ln104_58_fu_448_p2 <= (icmp_ln86_118_fu_298_p2 xor ap_const_lv1_1);
    xor_ln104_59_fu_478_p2 <= (icmp_ln86_120_fu_310_p2 xor ap_const_lv1_1);
    xor_ln104_60_fu_490_p2 <= (icmp_ln86_121_fu_316_p2 xor ap_const_lv1_1);
    xor_ln104_61_fu_730_p2 <= (icmp_ln86_122_reg_873 xor ap_const_lv1_1);
    xor_ln104_fu_364_p2 <= (icmp_ln86_fu_262_p2 xor ap_const_lv1_1);
    xor_ln117_fu_532_p2 <= (ap_const_lv1_1 xor and_ln102_140_fu_406_p2);
    zext_ln117_13_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln117_111_fu_562_p3),3));
    zext_ln117_14_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln117_115_fu_622_p3),4));
    zext_ln117_15_fu_767_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln117_123_fu_760_p3),5));
    zext_ln117_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln117_fu_532_p2),2));
end behav;
