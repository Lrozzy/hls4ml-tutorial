-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity my_prj_decision_function_34 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_1_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_3_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_6_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_7_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_9_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_10_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_11_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_18_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_19_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_44_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_47_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_48_val : IN STD_LOGIC_VECTOR (17 downto 0);
    x_49_val : IN STD_LOGIC_VECTOR (17 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (11 downto 0) );
end;


architecture behav of my_prj_decision_function_34 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv18_112E2 : STD_LOGIC_VECTOR (17 downto 0) := "010001001011100010";
    constant ap_const_lv18_C : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001100";
    constant ap_const_lv18_BC5 : STD_LOGIC_VECTOR (17 downto 0) := "000000101111000101";
    constant ap_const_lv18_15BB7 : STD_LOGIC_VECTOR (17 downto 0) := "010101101110110111";
    constant ap_const_lv18_DD : STD_LOGIC_VECTOR (17 downto 0) := "000000000011011101";
    constant ap_const_lv18_E5C : STD_LOGIC_VECTOR (17 downto 0) := "000000111001011100";
    constant ap_const_lv18_34FD7 : STD_LOGIC_VECTOR (17 downto 0) := "110100111111010111";
    constant ap_const_lv18_31CB : STD_LOGIC_VECTOR (17 downto 0) := "000011000111001011";
    constant ap_const_lv18_12B30 : STD_LOGIC_VECTOR (17 downto 0) := "010010101100110000";
    constant ap_const_lv18_3C : STD_LOGIC_VECTOR (17 downto 0) := "000000000000111100";
    constant ap_const_lv18_3597D : STD_LOGIC_VECTOR (17 downto 0) := "110101100101111101";
    constant ap_const_lv18_12E1 : STD_LOGIC_VECTOR (17 downto 0) := "000001001011100001";
    constant ap_const_lv18_1564C : STD_LOGIC_VECTOR (17 downto 0) := "010101011001001100";
    constant ap_const_lv18_1B6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000110110110";
    constant ap_const_lv18_15619 : STD_LOGIC_VECTOR (17 downto 0) := "010101011000011001";
    constant ap_const_lv18_3DC : STD_LOGIC_VECTOR (17 downto 0) := "000000001111011100";
    constant ap_const_lv18_350A9 : STD_LOGIC_VECTOR (17 downto 0) := "110101000010101001";
    constant ap_const_lv18_1439 : STD_LOGIC_VECTOR (17 downto 0) := "000001010000111001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv12_EA0 : STD_LOGIC_VECTOR (11 downto 0) := "111010100000";
    constant ap_const_lv12_2A7 : STD_LOGIC_VECTOR (11 downto 0) := "001010100111";
    constant ap_const_lv12_DF : STD_LOGIC_VECTOR (11 downto 0) := "000011011111";
    constant ap_const_lv12_DF9 : STD_LOGIC_VECTOR (11 downto 0) := "110111111001";
    constant ap_const_lv12_642 : STD_LOGIC_VECTOR (11 downto 0) := "011001000010";
    constant ap_const_lv12_212 : STD_LOGIC_VECTOR (11 downto 0) := "001000010010";
    constant ap_const_lv12_F4E : STD_LOGIC_VECTOR (11 downto 0) := "111101001110";
    constant ap_const_lv12_39 : STD_LOGIC_VECTOR (11 downto 0) := "000000111001";
    constant ap_const_lv12_FEE : STD_LOGIC_VECTOR (11 downto 0) := "111111101110";
    constant ap_const_lv12_3A : STD_LOGIC_VECTOR (11 downto 0) := "000000111010";
    constant ap_const_lv12_E19 : STD_LOGIC_VECTOR (11 downto 0) := "111000011001";
    constant ap_const_lv12_1FF : STD_LOGIC_VECTOR (11 downto 0) := "000111111111";
    constant ap_const_lv12_FBC : STD_LOGIC_VECTOR (11 downto 0) := "111110111100";
    constant ap_const_lv12_F79 : STD_LOGIC_VECTOR (11 downto 0) := "111101111001";
    constant ap_const_lv12_473 : STD_LOGIC_VECTOR (11 downto 0) := "010001110011";
    constant ap_const_lv12_322 : STD_LOGIC_VECTOR (11 downto 0) := "001100100010";
    constant ap_const_lv12_FFB : STD_LOGIC_VECTOR (11 downto 0) := "111111111011";
    constant ap_const_lv12_ED5 : STD_LOGIC_VECTOR (11 downto 0) := "111011010101";
    constant ap_const_lv12_FF7 : STD_LOGIC_VECTOR (11 downto 0) := "111111110111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln86_914_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_914_reg_909 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln86_920_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_920_reg_915 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_921_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_921_reg_920 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln104_179_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln104_179_reg_925 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln117_840_fu_724_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln117_840_reg_932 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln117_889_fu_738_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln117_889_reg_939 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln86_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_905_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_906_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln104_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln104_435_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_907_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_908_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln104_434_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_886_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_909_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_870_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln104_436_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_910_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln104_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln104_437_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_911_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_873_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_912_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln104_178_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_913_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_874_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln104_440_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_915_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_875_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_916_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln104_438_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_887_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_917_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_876_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_918_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln104_439_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_888_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_919_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln104_180_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_871_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln117_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_872_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln117_fu_550_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln117_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln117_fu_560_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln117_877_fu_568_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln102_877_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln117_99_fu_576_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln117_830_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_879_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln117_878_fu_586_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln117_831_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln117_879_fu_600_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln117_832_fu_608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_880_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln117_880_fu_614_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln117_881_fu_628_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln117_833_fu_622_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln117_100_fu_636_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln117_834_fu_640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_881_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln117_882_fu_646_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln117_835_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln117_883_fu_660_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln117_836_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_882_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln117_884_fu_674_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln117_837_fu_682_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln117_885_fu_688_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln117_838_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_883_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln117_886_fu_702_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln117_839_fu_710_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln117_887_fu_716_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln117_888_fu_730_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln102_878_fu_746_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln104_441_fu_750_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_889_fu_760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_884_fu_755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln117_841_fu_770_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln117_101_fu_775_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln117_842_fu_778_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_885_fu_765_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln117_890_fu_783_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln117_843_fu_791_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln117_891_fu_797_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_817_p39 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_817_p40 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln117_844_fu_805_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_817_p41 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal tmp_fu_817_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_817_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_817_p5 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_817_p7 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_817_p9 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_817_p11 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_817_p13 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_817_p15 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_817_p17 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_817_p19 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_817_p21 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_817_p23 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_817_p25 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_817_p27 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_817_p29 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_817_p31 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_817_p33 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_817_p35 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_817_p37 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component my_prj_sparsemux_39_5_12_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (4 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (4 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (4 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (4 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (4 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (4 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (4 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (4 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (4 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (4 downto 0);
        din9_WIDTH : INTEGER;
        CASE10 : STD_LOGIC_VECTOR (4 downto 0);
        din10_WIDTH : INTEGER;
        CASE11 : STD_LOGIC_VECTOR (4 downto 0);
        din11_WIDTH : INTEGER;
        CASE12 : STD_LOGIC_VECTOR (4 downto 0);
        din12_WIDTH : INTEGER;
        CASE13 : STD_LOGIC_VECTOR (4 downto 0);
        din13_WIDTH : INTEGER;
        CASE14 : STD_LOGIC_VECTOR (4 downto 0);
        din14_WIDTH : INTEGER;
        CASE15 : STD_LOGIC_VECTOR (4 downto 0);
        din15_WIDTH : INTEGER;
        CASE16 : STD_LOGIC_VECTOR (4 downto 0);
        din16_WIDTH : INTEGER;
        CASE17 : STD_LOGIC_VECTOR (4 downto 0);
        din17_WIDTH : INTEGER;
        CASE18 : STD_LOGIC_VECTOR (4 downto 0);
        din18_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        din3 : IN STD_LOGIC_VECTOR (11 downto 0);
        din4 : IN STD_LOGIC_VECTOR (11 downto 0);
        din5 : IN STD_LOGIC_VECTOR (11 downto 0);
        din6 : IN STD_LOGIC_VECTOR (11 downto 0);
        din7 : IN STD_LOGIC_VECTOR (11 downto 0);
        din8 : IN STD_LOGIC_VECTOR (11 downto 0);
        din9 : IN STD_LOGIC_VECTOR (11 downto 0);
        din10 : IN STD_LOGIC_VECTOR (11 downto 0);
        din11 : IN STD_LOGIC_VECTOR (11 downto 0);
        din12 : IN STD_LOGIC_VECTOR (11 downto 0);
        din13 : IN STD_LOGIC_VECTOR (11 downto 0);
        din14 : IN STD_LOGIC_VECTOR (11 downto 0);
        din15 : IN STD_LOGIC_VECTOR (11 downto 0);
        din16 : IN STD_LOGIC_VECTOR (11 downto 0);
        din17 : IN STD_LOGIC_VECTOR (11 downto 0);
        din18 : IN STD_LOGIC_VECTOR (11 downto 0);
        def : IN STD_LOGIC_VECTOR (11 downto 0);
        sel : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;



begin
    sparsemux_39_5_12_1_1_U1439 : component my_prj_sparsemux_39_5_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00000",
        din0_WIDTH => 12,
        CASE1 => "00001",
        din1_WIDTH => 12,
        CASE2 => "00010",
        din2_WIDTH => 12,
        CASE3 => "00011",
        din3_WIDTH => 12,
        CASE4 => "00100",
        din4_WIDTH => 12,
        CASE5 => "00101",
        din5_WIDTH => 12,
        CASE6 => "00110",
        din6_WIDTH => 12,
        CASE7 => "00111",
        din7_WIDTH => 12,
        CASE8 => "01000",
        din8_WIDTH => 12,
        CASE9 => "01001",
        din9_WIDTH => 12,
        CASE10 => "01010",
        din10_WIDTH => 12,
        CASE11 => "01011",
        din11_WIDTH => 12,
        CASE12 => "01100",
        din12_WIDTH => 12,
        CASE13 => "01101",
        din13_WIDTH => 12,
        CASE14 => "01110",
        din14_WIDTH => 12,
        CASE15 => "01111",
        din15_WIDTH => 12,
        CASE16 => "10000",
        din16_WIDTH => 12,
        CASE17 => "10001",
        din17_WIDTH => 12,
        CASE18 => "10010",
        din18_WIDTH => 12,
        def_WIDTH => 12,
        sel_WIDTH => 5,
        dout_WIDTH => 12)
    port map (
        din0 => ap_const_lv12_EA0,
        din1 => ap_const_lv12_2A7,
        din2 => ap_const_lv12_DF,
        din3 => ap_const_lv12_DF9,
        din4 => ap_const_lv12_642,
        din5 => ap_const_lv12_212,
        din6 => ap_const_lv12_F4E,
        din7 => ap_const_lv12_39,
        din8 => ap_const_lv12_FEE,
        din9 => ap_const_lv12_3A,
        din10 => ap_const_lv12_E19,
        din11 => ap_const_lv12_1FF,
        din12 => ap_const_lv12_FBC,
        din13 => ap_const_lv12_F79,
        din14 => ap_const_lv12_473,
        din15 => ap_const_lv12_322,
        din16 => ap_const_lv12_FFB,
        din17 => ap_const_lv12_ED5,
        din18 => ap_const_lv12_FF7,
        def => tmp_fu_817_p39,
        sel => tmp_fu_817_p40,
        dout => tmp_fu_817_p41);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln104_179_reg_925 <= and_ln104_179_fu_454_p2;
                icmp_ln86_914_reg_909 <= icmp_ln86_914_fu_322_p2;
                icmp_ln86_920_reg_915 <= icmp_ln86_920_fu_358_p2;
                icmp_ln86_921_reg_920 <= icmp_ln86_921_fu_364_p2;
                or_ln117_840_reg_932 <= or_ln117_840_fu_724_p2;
                select_ln117_889_reg_939 <= select_ln117_889_fu_738_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    and_ln102_870_fu_388_p2 <= (xor_ln104_fu_370_p2 and icmp_ln86_906_fu_274_p2);
    and_ln102_871_fu_406_p2 <= (icmp_ln86_907_fu_280_p2 and and_ln102_fu_376_p2);
    and_ln102_872_fu_418_p2 <= (icmp_ln86_fu_262_p2 and and_ln102_886_fu_412_p2);
    and_ln102_873_fu_424_p2 <= (icmp_ln86_909_fu_292_p2 and and_ln102_870_fu_388_p2);
    and_ln102_874_fu_442_p2 <= (icmp_ln86_910_fu_298_p2 and and_ln104_fu_400_p2);
    and_ln102_875_fu_460_p2 <= (icmp_ln86_911_fu_304_p2 and and_ln102_873_fu_424_p2);
    and_ln102_876_fu_472_p2 <= (icmp_ln86_912_fu_310_p2 and and_ln104_178_fu_436_p2);
    and_ln102_877_fu_484_p2 <= (icmp_ln86_913_fu_316_p2 and and_ln102_874_fu_442_p2);
    and_ln102_878_fu_746_p2 <= (icmp_ln86_914_reg_909 and and_ln104_179_reg_925);
    and_ln102_879_fu_502_p2 <= (icmp_ln86_915_fu_328_p2 and and_ln102_875_fu_460_p2);
    and_ln102_880_fu_514_p2 <= (and_ln102_887_fu_508_p2 and and_ln102_873_fu_424_p2);
    and_ln102_881_fu_520_p2 <= (icmp_ln86_917_fu_340_p2 and and_ln102_876_fu_472_p2);
    and_ln102_882_fu_532_p2 <= (and_ln104_178_fu_436_p2 and and_ln102_888_fu_526_p2);
    and_ln102_883_fu_538_p2 <= (icmp_ln86_919_fu_352_p2 and and_ln104_180_fu_496_p2);
    and_ln102_884_fu_755_p2 <= (icmp_ln86_920_reg_915 and and_ln102_878_fu_746_p2);
    and_ln102_885_fu_765_p2 <= (and_ln104_179_reg_925 and and_ln102_889_fu_760_p2);
    and_ln102_886_fu_412_p2 <= (xor_ln104_434_fu_382_p2 and icmp_ln86_908_fu_286_p2);
    and_ln102_887_fu_508_p2 <= (xor_ln104_438_fu_466_p2 and icmp_ln86_916_fu_334_p2);
    and_ln102_888_fu_526_p2 <= (xor_ln104_439_fu_478_p2 and icmp_ln86_918_fu_346_p2);
    and_ln102_889_fu_760_p2 <= (xor_ln104_441_fu_750_p2 and icmp_ln86_921_reg_920);
    and_ln102_fu_376_p2 <= (icmp_ln86_fu_262_p2 and icmp_ln86_905_fu_268_p2);
    and_ln104_178_fu_436_p2 <= (xor_ln104_436_fu_430_p2 and and_ln102_870_fu_388_p2);
    and_ln104_179_fu_454_p2 <= (xor_ln104_437_fu_448_p2 and and_ln104_fu_400_p2);
    and_ln104_180_fu_496_p2 <= (xor_ln104_440_fu_490_p2 and and_ln102_874_fu_442_p2);
    and_ln104_fu_400_p2 <= (xor_ln104_fu_370_p2 and xor_ln104_435_fu_394_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        tmp_fu_817_p41 when (or_ln117_844_fu_805_p2(0) = '1') else 
        ap_const_lv12_0;
    icmp_ln86_905_fu_268_p2 <= "1" when (signed(x_44_val) < signed(ap_const_lv18_C)) else "0";
    icmp_ln86_906_fu_274_p2 <= "1" when (signed(x_19_val) < signed(ap_const_lv18_BC5)) else "0";
    icmp_ln86_907_fu_280_p2 <= "1" when (signed(x_48_val) < signed(ap_const_lv18_15BB7)) else "0";
    icmp_ln86_908_fu_286_p2 <= "1" when (signed(x_11_val) < signed(ap_const_lv18_DD)) else "0";
    icmp_ln86_909_fu_292_p2 <= "1" when (signed(x_18_val) < signed(ap_const_lv18_E5C)) else "0";
    icmp_ln86_910_fu_298_p2 <= "1" when (signed(x_1_val) < signed(ap_const_lv18_34FD7)) else "0";
    icmp_ln86_911_fu_304_p2 <= "1" when (signed(x_49_val) < signed(ap_const_lv18_31CB)) else "0";
    icmp_ln86_912_fu_310_p2 <= "1" when (signed(x_3_val) < signed(ap_const_lv18_12B30)) else "0";
    icmp_ln86_913_fu_316_p2 <= "1" when (signed(x_9_val) < signed(ap_const_lv18_3C)) else "0";
    icmp_ln86_914_fu_322_p2 <= "1" when (signed(x_1_val) < signed(ap_const_lv18_3597D)) else "0";
    icmp_ln86_915_fu_328_p2 <= "1" when (signed(x_6_val) < signed(ap_const_lv18_12E1)) else "0";
    icmp_ln86_916_fu_334_p2 <= "1" when (signed(x_48_val) < signed(ap_const_lv18_1564C)) else "0";
    icmp_ln86_917_fu_340_p2 <= "1" when (signed(x_9_val) < signed(ap_const_lv18_1B6)) else "0";
    icmp_ln86_918_fu_346_p2 <= "1" when (signed(x_47_val) < signed(ap_const_lv18_15619)) else "0";
    icmp_ln86_919_fu_352_p2 <= "1" when (signed(x_10_val) < signed(ap_const_lv18_3DC)) else "0";
    icmp_ln86_920_fu_358_p2 <= "1" when (signed(x_1_val) < signed(ap_const_lv18_350A9)) else "0";
    icmp_ln86_921_fu_364_p2 <= "1" when (signed(x_7_val) < signed(ap_const_lv18_1439)) else "0";
    icmp_ln86_fu_262_p2 <= "1" when (signed(x_1_val) < signed(ap_const_lv18_112E2)) else "0";
    or_ln117_830_fu_580_p2 <= (icmp_ln86_fu_262_p2 or and_ln102_877_fu_484_p2);
    or_ln117_831_fu_594_p2 <= (or_ln117_830_fu_580_p2 or and_ln102_879_fu_502_p2);
    or_ln117_832_fu_608_p2 <= (or_ln117_830_fu_580_p2 or and_ln102_875_fu_460_p2);
    or_ln117_833_fu_622_p2 <= (or_ln117_832_fu_608_p2 or and_ln102_880_fu_514_p2);
    or_ln117_834_fu_640_p2 <= (or_ln117_830_fu_580_p2 or and_ln102_873_fu_424_p2);
    or_ln117_835_fu_654_p2 <= (or_ln117_834_fu_640_p2 or and_ln102_881_fu_520_p2);
    or_ln117_836_fu_668_p2 <= (or_ln117_834_fu_640_p2 or and_ln102_876_fu_472_p2);
    or_ln117_837_fu_682_p2 <= (or_ln117_836_fu_668_p2 or and_ln102_882_fu_532_p2);
    or_ln117_838_fu_696_p2 <= (or_ln117_830_fu_580_p2 or and_ln102_870_fu_388_p2);
    or_ln117_839_fu_710_p2 <= (or_ln117_838_fu_696_p2 or and_ln102_883_fu_538_p2);
    or_ln117_840_fu_724_p2 <= (or_ln117_838_fu_696_p2 or and_ln104_180_fu_496_p2);
    or_ln117_841_fu_770_p2 <= (or_ln117_840_reg_932 or and_ln102_884_fu_755_p2);
    or_ln117_842_fu_778_p2 <= (or_ln117_840_reg_932 or and_ln102_878_fu_746_p2);
    or_ln117_843_fu_791_p2 <= (or_ln117_842_fu_778_p2 or and_ln102_885_fu_765_p2);
    or_ln117_844_fu_805_p2 <= (or_ln117_840_reg_932 or and_ln104_179_reg_925);
    or_ln117_fu_554_p2 <= (and_ln102_fu_376_p2 or and_ln102_872_fu_418_p2);
    select_ln117_877_fu_568_p3 <= 
        select_ln117_fu_560_p3 when (or_ln117_fu_554_p2(0) = '1') else 
        ap_const_lv2_3;
    select_ln117_878_fu_586_p3 <= 
        zext_ln117_99_fu_576_p1 when (icmp_ln86_fu_262_p2(0) = '1') else 
        ap_const_lv3_4;
    select_ln117_879_fu_600_p3 <= 
        select_ln117_878_fu_586_p3 when (or_ln117_830_fu_580_p2(0) = '1') else 
        ap_const_lv3_5;
    select_ln117_880_fu_614_p3 <= 
        select_ln117_879_fu_600_p3 when (or_ln117_831_fu_594_p2(0) = '1') else 
        ap_const_lv3_6;
    select_ln117_881_fu_628_p3 <= 
        select_ln117_880_fu_614_p3 when (or_ln117_832_fu_608_p2(0) = '1') else 
        ap_const_lv3_7;
    select_ln117_882_fu_646_p3 <= 
        zext_ln117_100_fu_636_p1 when (or_ln117_833_fu_622_p2(0) = '1') else 
        ap_const_lv4_8;
    select_ln117_883_fu_660_p3 <= 
        select_ln117_882_fu_646_p3 when (or_ln117_834_fu_640_p2(0) = '1') else 
        ap_const_lv4_9;
    select_ln117_884_fu_674_p3 <= 
        select_ln117_883_fu_660_p3 when (or_ln117_835_fu_654_p2(0) = '1') else 
        ap_const_lv4_A;
    select_ln117_885_fu_688_p3 <= 
        select_ln117_884_fu_674_p3 when (or_ln117_836_fu_668_p2(0) = '1') else 
        ap_const_lv4_B;
    select_ln117_886_fu_702_p3 <= 
        select_ln117_885_fu_688_p3 when (or_ln117_837_fu_682_p2(0) = '1') else 
        ap_const_lv4_C;
    select_ln117_887_fu_716_p3 <= 
        select_ln117_886_fu_702_p3 when (or_ln117_838_fu_696_p2(0) = '1') else 
        ap_const_lv4_D;
    select_ln117_888_fu_730_p3 <= 
        select_ln117_887_fu_716_p3 when (or_ln117_839_fu_710_p2(0) = '1') else 
        ap_const_lv4_E;
    select_ln117_889_fu_738_p3 <= 
        select_ln117_888_fu_730_p3 when (or_ln117_840_fu_724_p2(0) = '1') else 
        ap_const_lv4_F;
    select_ln117_890_fu_783_p3 <= 
        zext_ln117_101_fu_775_p1 when (or_ln117_841_fu_770_p2(0) = '1') else 
        ap_const_lv5_10;
    select_ln117_891_fu_797_p3 <= 
        select_ln117_890_fu_783_p3 when (or_ln117_842_fu_778_p2(0) = '1') else 
        ap_const_lv5_11;
    select_ln117_fu_560_p3 <= 
        zext_ln117_fu_550_p1 when (and_ln102_fu_376_p2(0) = '1') else 
        ap_const_lv2_2;
    tmp_fu_817_p39 <= "XXXXXXXXXXXX";
    tmp_fu_817_p40 <= 
        select_ln117_891_fu_797_p3 when (or_ln117_843_fu_791_p2(0) = '1') else 
        ap_const_lv5_12;
    xor_ln104_434_fu_382_p2 <= (icmp_ln86_905_fu_268_p2 xor ap_const_lv1_1);
    xor_ln104_435_fu_394_p2 <= (icmp_ln86_906_fu_274_p2 xor ap_const_lv1_1);
    xor_ln104_436_fu_430_p2 <= (icmp_ln86_909_fu_292_p2 xor ap_const_lv1_1);
    xor_ln104_437_fu_448_p2 <= (icmp_ln86_910_fu_298_p2 xor ap_const_lv1_1);
    xor_ln104_438_fu_466_p2 <= (icmp_ln86_911_fu_304_p2 xor ap_const_lv1_1);
    xor_ln104_439_fu_478_p2 <= (icmp_ln86_912_fu_310_p2 xor ap_const_lv1_1);
    xor_ln104_440_fu_490_p2 <= (icmp_ln86_913_fu_316_p2 xor ap_const_lv1_1);
    xor_ln104_441_fu_750_p2 <= (icmp_ln86_914_reg_909 xor ap_const_lv1_1);
    xor_ln104_fu_370_p2 <= (icmp_ln86_fu_262_p2 xor ap_const_lv1_1);
    xor_ln117_fu_544_p2 <= (ap_const_lv1_1 xor and_ln102_871_fu_406_p2);
    zext_ln117_100_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln117_881_fu_628_p3),4));
    zext_ln117_101_fu_775_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln117_889_reg_939),5));
    zext_ln117_99_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln117_877_fu_568_p3),3));
    zext_ln117_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln117_fu_544_p2),2));
end behav;
