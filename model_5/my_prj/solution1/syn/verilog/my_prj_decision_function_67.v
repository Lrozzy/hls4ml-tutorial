// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_67 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_3_val,
        x_7_val,
        x_8_val,
        x_9_val,
        x_12_val,
        x_15_val,
        x_17_val,
        x_18_val,
        x_23_val,
        x_29_val,
        x_36_val,
        x_40_val,
        x_50_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_3_val;
input  [17:0] x_7_val;
input  [17:0] x_8_val;
input  [17:0] x_9_val;
input  [17:0] x_12_val;
input  [17:0] x_15_val;
input  [17:0] x_17_val;
input  [17:0] x_18_val;
input  [17:0] x_23_val;
input  [17:0] x_29_val;
input  [17:0] x_36_val;
input  [17:0] x_40_val;
input  [17:0] x_50_val;
input  [17:0] x_52_val;
output  [12:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_354_p2;
reg   [0:0] icmp_ln86_reg_1412;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_919_fu_366_p2;
reg   [0:0] icmp_ln86_919_reg_1421;
wire   [0:0] icmp_ln86_922_fu_384_p2;
reg   [0:0] icmp_ln86_922_reg_1427;
wire   [0:0] icmp_ln86_923_fu_390_p2;
reg   [0:0] icmp_ln86_923_reg_1433;
wire   [0:0] icmp_ln86_928_fu_420_p2;
reg   [0:0] icmp_ln86_928_reg_1439;
wire   [0:0] icmp_ln86_929_fu_426_p2;
reg   [0:0] icmp_ln86_929_reg_1445;
wire   [0:0] icmp_ln86_930_fu_432_p2;
reg   [0:0] icmp_ln86_930_reg_1451;
wire   [0:0] icmp_ln86_931_fu_438_p2;
reg   [0:0] icmp_ln86_931_reg_1457;
wire   [0:0] icmp_ln86_939_fu_496_p2;
reg   [0:0] icmp_ln86_939_reg_1463;
wire   [0:0] icmp_ln86_940_fu_502_p2;
reg   [0:0] icmp_ln86_940_reg_1468;
wire   [0:0] icmp_ln86_941_fu_508_p2;
reg   [0:0] icmp_ln86_941_reg_1473;
wire   [0:0] icmp_ln86_942_fu_514_p2;
reg   [0:0] icmp_ln86_942_reg_1478;
wire   [0:0] icmp_ln86_943_fu_520_p2;
reg   [0:0] icmp_ln86_943_reg_1483;
wire   [0:0] icmp_ln86_944_fu_526_p2;
reg   [0:0] icmp_ln86_944_reg_1488;
wire   [0:0] icmp_ln86_945_fu_532_p2;
reg   [0:0] icmp_ln86_945_reg_1493;
wire   [0:0] icmp_ln86_946_fu_538_p2;
reg   [0:0] icmp_ln86_946_reg_1498;
wire   [3:0] select_ln117_902_fu_906_p3;
reg   [3:0] select_ln117_902_reg_1503;
wire    ap_block_pp0_stage0;
wire   [14:0] tmp_fu_444_p4;
wire   [0:0] icmp_ln86_918_fu_360_p2;
wire   [0:0] xor_ln104_435_fu_550_p2;
wire   [0:0] icmp_ln86_920_fu_372_p2;
wire   [0:0] and_ln102_fu_544_p2;
wire   [0:0] xor_ln104_437_fu_568_p2;
wire   [0:0] icmp_ln86_921_fu_378_p2;
wire   [0:0] and_ln104_fu_556_p2;
wire   [0:0] xor_ln104_438_fu_586_p2;
wire   [0:0] icmp_ln86_924_fu_396_p2;
wire   [0:0] and_ln102_1126_fu_562_p2;
wire   [0:0] icmp_ln86_925_fu_402_p2;
wire   [0:0] and_ln104_167_fu_574_p2;
wire   [0:0] icmp_ln86_926_fu_408_p2;
wire   [0:0] and_ln102_1127_fu_580_p2;
wire   [0:0] icmp_ln86_927_fu_414_p2;
wire   [0:0] and_ln104_168_fu_592_p2;
wire   [0:0] icmp_ln86_932_fu_454_p2;
wire   [0:0] and_ln102_1130_fu_598_p2;
wire   [0:0] icmp_ln86_933_fu_460_p2;
wire   [0:0] xor_ln104_441_fu_604_p2;
wire   [0:0] and_ln102_1139_fu_652_p2;
wire   [0:0] icmp_ln86_934_fu_466_p2;
wire   [0:0] xor_ln104_442_fu_616_p2;
wire   [0:0] and_ln102_1141_fu_664_p2;
wire   [0:0] icmp_ln86_935_fu_472_p2;
wire   [0:0] and_ln102_1132_fu_622_p2;
wire   [0:0] icmp_ln86_936_fu_478_p2;
wire   [0:0] xor_ln104_443_fu_628_p2;
wire   [0:0] and_ln102_1144_fu_682_p2;
wire   [0:0] icmp_ln86_937_fu_484_p2;
wire   [0:0] and_ln102_1133_fu_634_p2;
wire   [0:0] icmp_ln86_938_fu_490_p2;
wire   [0:0] xor_ln104_444_fu_640_p2;
wire   [0:0] and_ln102_1147_fu_700_p2;
wire   [0:0] and_ln102_1131_fu_610_p2;
wire   [0:0] and_ln102_1138_fu_646_p2;
wire   [0:0] xor_ln117_fu_718_p2;
wire   [0:0] or_ln117_fu_712_p2;
wire   [1:0] zext_ln117_fu_724_p1;
wire   [0:0] or_ln117_812_fu_728_p2;
wire   [0:0] and_ln102_1140_fu_658_p2;
wire   [1:0] select_ln117_fu_734_p3;
wire   [1:0] select_ln117_890_fu_748_p3;
wire   [0:0] or_ln117_813_fu_742_p2;
wire   [2:0] zext_ln117_97_fu_756_p1;
wire   [0:0] or_ln117_814_fu_760_p2;
wire   [0:0] and_ln102_1142_fu_670_p2;
wire   [2:0] select_ln117_891_fu_766_p3;
wire   [0:0] or_ln117_815_fu_774_p2;
wire   [2:0] select_ln117_892_fu_780_p3;
wire   [0:0] and_ln102_1143_fu_676_p2;
wire   [2:0] select_ln117_893_fu_788_p3;
wire   [2:0] select_ln117_894_fu_802_p3;
wire   [0:0] or_ln117_816_fu_796_p2;
wire   [3:0] zext_ln117_98_fu_810_p1;
wire   [0:0] or_ln117_817_fu_814_p2;
wire   [0:0] and_ln102_1145_fu_688_p2;
wire   [3:0] select_ln117_895_fu_820_p3;
wire   [0:0] or_ln117_818_fu_828_p2;
wire   [3:0] select_ln117_896_fu_834_p3;
wire   [0:0] or_ln117_819_fu_842_p2;
wire   [0:0] and_ln102_1146_fu_694_p2;
wire   [3:0] select_ln117_897_fu_848_p3;
wire   [0:0] or_ln117_820_fu_856_p2;
wire   [3:0] select_ln117_898_fu_862_p3;
wire   [0:0] or_ln117_821_fu_870_p2;
wire   [0:0] and_ln102_1148_fu_706_p2;
wire   [3:0] select_ln117_899_fu_876_p3;
wire   [0:0] or_ln117_822_fu_884_p2;
wire   [3:0] select_ln117_900_fu_890_p3;
wire   [3:0] select_ln117_901_fu_898_p3;
wire   [0:0] xor_ln104_fu_914_p2;
wire   [0:0] xor_ln104_436_fu_924_p2;
wire   [0:0] and_ln102_1125_fu_919_p2;
wire   [0:0] xor_ln104_439_fu_940_p2;
wire   [0:0] and_ln104_166_fu_929_p2;
wire   [0:0] xor_ln104_440_fu_956_p2;
wire   [0:0] and_ln102_1128_fu_935_p2;
wire   [0:0] and_ln104_169_fu_945_p2;
wire   [0:0] and_ln102_1129_fu_951_p2;
wire   [0:0] and_ln104_170_fu_961_p2;
wire   [0:0] and_ln102_1134_fu_967_p2;
wire   [0:0] xor_ln104_445_fu_972_p2;
wire   [0:0] and_ln102_1150_fu_1012_p2;
wire   [0:0] and_ln102_1135_fu_977_p2;
wire   [0:0] xor_ln104_446_fu_982_p2;
wire   [0:0] and_ln102_1153_fu_1028_p2;
wire   [0:0] and_ln102_1136_fu_987_p2;
wire   [0:0] xor_ln104_447_fu_992_p2;
wire   [0:0] and_ln102_1156_fu_1044_p2;
wire   [0:0] and_ln102_1137_fu_997_p2;
wire   [0:0] xor_ln104_448_fu_1002_p2;
wire   [0:0] and_ln102_1159_fu_1060_p2;
wire   [0:0] and_ln102_1149_fu_1007_p2;
wire   [0:0] or_ln117_823_fu_1071_p2;
wire   [4:0] zext_ln117_99_fu_1076_p1;
wire   [0:0] or_ln117_824_fu_1079_p2;
wire   [0:0] and_ln102_1151_fu_1017_p2;
wire   [4:0] select_ln117_903_fu_1084_p3;
wire   [0:0] or_ln117_825_fu_1092_p2;
wire   [4:0] select_ln117_904_fu_1098_p3;
wire   [0:0] or_ln117_826_fu_1106_p2;
wire   [0:0] and_ln102_1152_fu_1023_p2;
wire   [4:0] select_ln117_905_fu_1111_p3;
wire   [0:0] or_ln117_827_fu_1119_p2;
wire   [4:0] select_ln117_906_fu_1125_p3;
wire   [0:0] or_ln117_828_fu_1133_p2;
wire   [0:0] and_ln102_1154_fu_1033_p2;
wire   [4:0] select_ln117_907_fu_1139_p3;
wire   [0:0] or_ln117_829_fu_1147_p2;
wire   [4:0] select_ln117_908_fu_1153_p3;
wire   [0:0] or_ln117_830_fu_1161_p2;
wire   [0:0] and_ln102_1155_fu_1039_p2;
wire   [4:0] select_ln117_909_fu_1166_p3;
wire   [0:0] or_ln117_831_fu_1174_p2;
wire   [4:0] select_ln117_910_fu_1180_p3;
wire   [0:0] or_ln117_832_fu_1188_p2;
wire   [0:0] and_ln102_1157_fu_1049_p2;
wire   [4:0] select_ln117_911_fu_1194_p3;
wire   [0:0] or_ln117_833_fu_1202_p2;
wire   [4:0] select_ln117_912_fu_1208_p3;
wire   [0:0] or_ln117_834_fu_1216_p2;
wire   [0:0] and_ln102_1158_fu_1055_p2;
wire   [4:0] select_ln117_913_fu_1222_p3;
wire   [0:0] or_ln117_835_fu_1230_p2;
wire   [4:0] select_ln117_914_fu_1236_p3;
wire   [0:0] or_ln117_836_fu_1244_p2;
wire   [0:0] and_ln102_1160_fu_1065_p2;
wire   [4:0] select_ln117_915_fu_1250_p3;
wire   [0:0] or_ln117_837_fu_1258_p2;
wire   [4:0] select_ln117_916_fu_1264_p3;
wire   [12:0] agg_result_fu_1280_p63;
wire   [4:0] agg_result_fu_1280_p64;
wire   [12:0] agg_result_fu_1280_p65;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1280_p1;
wire   [4:0] agg_result_fu_1280_p3;
wire   [4:0] agg_result_fu_1280_p5;
wire   [4:0] agg_result_fu_1280_p7;
wire   [4:0] agg_result_fu_1280_p9;
wire   [4:0] agg_result_fu_1280_p11;
wire   [4:0] agg_result_fu_1280_p13;
wire   [4:0] agg_result_fu_1280_p15;
wire   [4:0] agg_result_fu_1280_p17;
wire   [4:0] agg_result_fu_1280_p19;
wire   [4:0] agg_result_fu_1280_p21;
wire   [4:0] agg_result_fu_1280_p23;
wire   [4:0] agg_result_fu_1280_p25;
wire   [4:0] agg_result_fu_1280_p27;
wire   [4:0] agg_result_fu_1280_p29;
wire   [4:0] agg_result_fu_1280_p31;
wire  signed [4:0] agg_result_fu_1280_p33;
wire  signed [4:0] agg_result_fu_1280_p35;
wire  signed [4:0] agg_result_fu_1280_p37;
wire  signed [4:0] agg_result_fu_1280_p39;
wire  signed [4:0] agg_result_fu_1280_p41;
wire  signed [4:0] agg_result_fu_1280_p43;
wire  signed [4:0] agg_result_fu_1280_p45;
wire  signed [4:0] agg_result_fu_1280_p47;
wire  signed [4:0] agg_result_fu_1280_p49;
wire  signed [4:0] agg_result_fu_1280_p51;
wire  signed [4:0] agg_result_fu_1280_p53;
wire  signed [4:0] agg_result_fu_1280_p55;
wire  signed [4:0] agg_result_fu_1280_p57;
wire  signed [4:0] agg_result_fu_1280_p59;
wire  signed [4:0] agg_result_fu_1280_p61;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_63_5_13_1_1_x0 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 13 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 13 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 13 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 13 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 13 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 13 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 13 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 13 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 13 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 13 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 13 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 13 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 13 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 13 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 13 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 13 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 13 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 13 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 13 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 13 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 13 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 13 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 13 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 13 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 13 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 13 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 13 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 13 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 13 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 13 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 13 ),
    .def_WIDTH( 13 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 13 ))
sparsemux_63_5_13_1_1_x0_U784(
    .din0(13'd860),
    .din1(13'd7873),
    .din2(13'd433),
    .din3(13'd7504),
    .din4(13'd66),
    .din5(13'd322),
    .din6(13'd7839),
    .din7(13'd17),
    .din8(13'd222),
    .din9(13'd7875),
    .din10(13'd8150),
    .din11(13'd7669),
    .din12(13'd8178),
    .din13(13'd0),
    .din14(13'd312),
    .din15(13'd7880),
    .din16(13'd145),
    .din17(13'd2062),
    .din18(13'd170),
    .din19(13'd7745),
    .din20(13'd8071),
    .din21(13'd8084),
    .din22(13'd7666),
    .din23(13'd7898),
    .din24(13'd51),
    .din25(13'd48),
    .din26(13'd7921),
    .din27(13'd7956),
    .din28(13'd240),
    .din29(13'd272),
    .din30(13'd8152),
    .def(agg_result_fu_1280_p63),
    .sel(agg_result_fu_1280_p64),
    .dout(agg_result_fu_1280_p65)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_919_reg_1421 <= icmp_ln86_919_fu_366_p2;
        icmp_ln86_922_reg_1427 <= icmp_ln86_922_fu_384_p2;
        icmp_ln86_923_reg_1433 <= icmp_ln86_923_fu_390_p2;
        icmp_ln86_928_reg_1439 <= icmp_ln86_928_fu_420_p2;
        icmp_ln86_929_reg_1445 <= icmp_ln86_929_fu_426_p2;
        icmp_ln86_930_reg_1451 <= icmp_ln86_930_fu_432_p2;
        icmp_ln86_931_reg_1457 <= icmp_ln86_931_fu_438_p2;
        icmp_ln86_939_reg_1463 <= icmp_ln86_939_fu_496_p2;
        icmp_ln86_940_reg_1468 <= icmp_ln86_940_fu_502_p2;
        icmp_ln86_941_reg_1473 <= icmp_ln86_941_fu_508_p2;
        icmp_ln86_942_reg_1478 <= icmp_ln86_942_fu_514_p2;
        icmp_ln86_943_reg_1483 <= icmp_ln86_943_fu_520_p2;
        icmp_ln86_944_reg_1488 <= icmp_ln86_944_fu_526_p2;
        icmp_ln86_945_reg_1493 <= icmp_ln86_945_fu_532_p2;
        icmp_ln86_946_reg_1498 <= icmp_ln86_946_fu_538_p2;
        icmp_ln86_reg_1412 <= icmp_ln86_fu_354_p2;
        select_ln117_902_reg_1503 <= select_ln117_902_fu_906_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1280_p63 = 'bx;

assign agg_result_fu_1280_p64 = ((or_ln117_837_fu_1258_p2[0:0] == 1'b1) ? select_ln117_916_fu_1264_p3 : 5'd30);

assign and_ln102_1125_fu_919_p2 = (xor_ln104_fu_914_p2 & icmp_ln86_919_reg_1421);

assign and_ln102_1126_fu_562_p2 = (icmp_ln86_920_fu_372_p2 & and_ln102_fu_544_p2);

assign and_ln102_1127_fu_580_p2 = (icmp_ln86_921_fu_378_p2 & and_ln104_fu_556_p2);

assign and_ln102_1128_fu_935_p2 = (icmp_ln86_922_reg_1427 & and_ln102_1125_fu_919_p2);

assign and_ln102_1129_fu_951_p2 = (icmp_ln86_923_reg_1433 & and_ln104_166_fu_929_p2);

assign and_ln102_1130_fu_598_p2 = (icmp_ln86_924_fu_396_p2 & and_ln102_1126_fu_562_p2);

assign and_ln102_1131_fu_610_p2 = (icmp_ln86_925_fu_402_p2 & and_ln104_167_fu_574_p2);

assign and_ln102_1132_fu_622_p2 = (icmp_ln86_926_fu_408_p2 & and_ln102_1127_fu_580_p2);

assign and_ln102_1133_fu_634_p2 = (icmp_ln86_927_fu_414_p2 & and_ln104_168_fu_592_p2);

assign and_ln102_1134_fu_967_p2 = (icmp_ln86_928_reg_1439 & and_ln102_1128_fu_935_p2);

assign and_ln102_1135_fu_977_p2 = (icmp_ln86_929_reg_1445 & and_ln104_169_fu_945_p2);

assign and_ln102_1136_fu_987_p2 = (icmp_ln86_930_reg_1451 & and_ln102_1129_fu_951_p2);

assign and_ln102_1137_fu_997_p2 = (icmp_ln86_931_reg_1457 & and_ln104_170_fu_961_p2);

assign and_ln102_1138_fu_646_p2 = (icmp_ln86_932_fu_454_p2 & and_ln102_1130_fu_598_p2);

assign and_ln102_1139_fu_652_p2 = (xor_ln104_441_fu_604_p2 & icmp_ln86_933_fu_460_p2);

assign and_ln102_1140_fu_658_p2 = (and_ln102_1139_fu_652_p2 & and_ln102_1126_fu_562_p2);

assign and_ln102_1141_fu_664_p2 = (xor_ln104_442_fu_616_p2 & icmp_ln86_934_fu_466_p2);

assign and_ln102_1142_fu_670_p2 = (and_ln104_167_fu_574_p2 & and_ln102_1141_fu_664_p2);

assign and_ln102_1143_fu_676_p2 = (icmp_ln86_935_fu_472_p2 & and_ln102_1132_fu_622_p2);

assign and_ln102_1144_fu_682_p2 = (xor_ln104_443_fu_628_p2 & icmp_ln86_936_fu_478_p2);

assign and_ln102_1145_fu_688_p2 = (and_ln102_1144_fu_682_p2 & and_ln102_1127_fu_580_p2);

assign and_ln102_1146_fu_694_p2 = (icmp_ln86_937_fu_484_p2 & and_ln102_1133_fu_634_p2);

assign and_ln102_1147_fu_700_p2 = (xor_ln104_444_fu_640_p2 & icmp_ln86_938_fu_490_p2);

assign and_ln102_1148_fu_706_p2 = (and_ln104_168_fu_592_p2 & and_ln102_1147_fu_700_p2);

assign and_ln102_1149_fu_1007_p2 = (icmp_ln86_939_reg_1463 & and_ln102_1134_fu_967_p2);

assign and_ln102_1150_fu_1012_p2 = (xor_ln104_445_fu_972_p2 & icmp_ln86_940_reg_1468);

assign and_ln102_1151_fu_1017_p2 = (and_ln102_1150_fu_1012_p2 & and_ln102_1128_fu_935_p2);

assign and_ln102_1152_fu_1023_p2 = (icmp_ln86_941_reg_1473 & and_ln102_1135_fu_977_p2);

assign and_ln102_1153_fu_1028_p2 = (xor_ln104_446_fu_982_p2 & icmp_ln86_942_reg_1478);

assign and_ln102_1154_fu_1033_p2 = (and_ln104_169_fu_945_p2 & and_ln102_1153_fu_1028_p2);

assign and_ln102_1155_fu_1039_p2 = (icmp_ln86_943_reg_1483 & and_ln102_1136_fu_987_p2);

assign and_ln102_1156_fu_1044_p2 = (xor_ln104_447_fu_992_p2 & icmp_ln86_944_reg_1488);

assign and_ln102_1157_fu_1049_p2 = (and_ln102_1156_fu_1044_p2 & and_ln102_1129_fu_951_p2);

assign and_ln102_1158_fu_1055_p2 = (icmp_ln86_945_reg_1493 & and_ln102_1137_fu_997_p2);

assign and_ln102_1159_fu_1060_p2 = (xor_ln104_448_fu_1002_p2 & icmp_ln86_946_reg_1498);

assign and_ln102_1160_fu_1065_p2 = (and_ln104_170_fu_961_p2 & and_ln102_1159_fu_1060_p2);

assign and_ln102_fu_544_p2 = (icmp_ln86_fu_354_p2 & icmp_ln86_918_fu_360_p2);

assign and_ln104_166_fu_929_p2 = (xor_ln104_fu_914_p2 & xor_ln104_436_fu_924_p2);

assign and_ln104_167_fu_574_p2 = (xor_ln104_437_fu_568_p2 & and_ln102_fu_544_p2);

assign and_ln104_168_fu_592_p2 = (xor_ln104_438_fu_586_p2 & and_ln104_fu_556_p2);

assign and_ln104_169_fu_945_p2 = (xor_ln104_439_fu_940_p2 & and_ln102_1125_fu_919_p2);

assign and_ln104_170_fu_961_p2 = (xor_ln104_440_fu_956_p2 & and_ln104_166_fu_929_p2);

assign and_ln104_fu_556_p2 = (xor_ln104_435_fu_550_p2 & icmp_ln86_fu_354_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1280_p65;

assign icmp_ln86_918_fu_360_p2 = (($signed(x_1_val) < $signed(18'd185071)) ? 1'b1 : 1'b0);

assign icmp_ln86_919_fu_366_p2 = (($signed(x_1_val) < $signed(18'd219622)) ? 1'b1 : 1'b0);

assign icmp_ln86_920_fu_372_p2 = (($signed(x_18_val) < $signed(18'd1620)) ? 1'b1 : 1'b0);

assign icmp_ln86_921_fu_378_p2 = (($signed(x_9_val) < $signed(18'd1423)) ? 1'b1 : 1'b0);

assign icmp_ln86_922_fu_384_p2 = (($signed(x_9_val) < $signed(18'd1252)) ? 1'b1 : 1'b0);

assign icmp_ln86_923_fu_390_p2 = (($signed(x_23_val) < $signed(18'd44)) ? 1'b1 : 1'b0);

assign icmp_ln86_924_fu_396_p2 = (($signed(x_50_val) < $signed(18'd87730)) ? 1'b1 : 1'b0);

assign icmp_ln86_925_fu_402_p2 = (($signed(x_17_val) < $signed(18'd5)) ? 1'b1 : 1'b0);

assign icmp_ln86_926_fu_408_p2 = (($signed(x_7_val) < $signed(18'd8855)) ? 1'b1 : 1'b0);

assign icmp_ln86_927_fu_414_p2 = (($signed(x_23_val) < $signed(18'd25)) ? 1'b1 : 1'b0);

assign icmp_ln86_928_fu_420_p2 = (($signed(x_12_val) < $signed(18'd259292)) ? 1'b1 : 1'b0);

assign icmp_ln86_929_fu_426_p2 = (($signed(x_17_val) < $signed(18'd30)) ? 1'b1 : 1'b0);

assign icmp_ln86_930_fu_432_p2 = (($signed(x_3_val) < $signed(18'd94143)) ? 1'b1 : 1'b0);

assign icmp_ln86_931_fu_438_p2 = (($signed(x_50_val) < $signed(18'd82660)) ? 1'b1 : 1'b0);

assign icmp_ln86_932_fu_454_p2 = (($signed(tmp_fu_444_p4) < $signed(15'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_933_fu_460_p2 = (($signed(x_7_val) < $signed(18'd8517)) ? 1'b1 : 1'b0);

assign icmp_ln86_934_fu_466_p2 = (($signed(x_23_val) < $signed(18'd6)) ? 1'b1 : 1'b0);

assign icmp_ln86_935_fu_472_p2 = (($signed(x_29_val) < $signed(18'd7890)) ? 1'b1 : 1'b0);

assign icmp_ln86_936_fu_478_p2 = (($signed(x_36_val) < $signed(18'd9)) ? 1'b1 : 1'b0);

assign icmp_ln86_937_fu_484_p2 = (($signed(x_1_val) < $signed(18'd220973)) ? 1'b1 : 1'b0);

assign icmp_ln86_938_fu_490_p2 = (($signed(x_1_val) < $signed(18'd228301)) ? 1'b1 : 1'b0);

assign icmp_ln86_939_fu_496_p2 = (($signed(x_9_val) < $signed(18'd1157)) ? 1'b1 : 1'b0);

assign icmp_ln86_940_fu_502_p2 = (($signed(x_12_val) < $signed(18'd259361)) ? 1'b1 : 1'b0);

assign icmp_ln86_941_fu_508_p2 = (($signed(x_40_val) < $signed(18'd1278)) ? 1'b1 : 1'b0);

assign icmp_ln86_942_fu_514_p2 = (($signed(x_8_val) < $signed(18'd1836)) ? 1'b1 : 1'b0);

assign icmp_ln86_943_fu_520_p2 = (($signed(x_7_val) < $signed(18'd4963)) ? 1'b1 : 1'b0);

assign icmp_ln86_944_fu_526_p2 = (($signed(x_9_val) < $signed(18'd908)) ? 1'b1 : 1'b0);

assign icmp_ln86_945_fu_532_p2 = (($signed(x_12_val) < $signed(18'd259038)) ? 1'b1 : 1'b0);

assign icmp_ln86_946_fu_538_p2 = (($signed(x_3_val) < $signed(18'd94075)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_354_p2 = (($signed(x_52_val) < $signed(18'd59905)) ? 1'b1 : 1'b0);

assign or_ln117_812_fu_728_p2 = (and_ln102_1131_fu_610_p2 | and_ln102_1130_fu_598_p2);

assign or_ln117_813_fu_742_p2 = (or_ln117_812_fu_728_p2 | and_ln102_1140_fu_658_p2);

assign or_ln117_814_fu_760_p2 = (and_ln102_1131_fu_610_p2 | and_ln102_1126_fu_562_p2);

assign or_ln117_815_fu_774_p2 = (or_ln117_814_fu_760_p2 | and_ln102_1142_fu_670_p2);

assign or_ln117_816_fu_796_p2 = (and_ln102_fu_544_p2 | and_ln102_1143_fu_676_p2);

assign or_ln117_817_fu_814_p2 = (and_ln102_fu_544_p2 | and_ln102_1132_fu_622_p2);

assign or_ln117_818_fu_828_p2 = (or_ln117_817_fu_814_p2 | and_ln102_1145_fu_688_p2);

assign or_ln117_819_fu_842_p2 = (and_ln102_fu_544_p2 | and_ln102_1127_fu_580_p2);

assign or_ln117_820_fu_856_p2 = (or_ln117_819_fu_842_p2 | and_ln102_1146_fu_694_p2);

assign or_ln117_821_fu_870_p2 = (or_ln117_819_fu_842_p2 | and_ln102_1133_fu_634_p2);

assign or_ln117_822_fu_884_p2 = (or_ln117_821_fu_870_p2 | and_ln102_1148_fu_706_p2);

assign or_ln117_823_fu_1071_p2 = (icmp_ln86_reg_1412 | and_ln102_1149_fu_1007_p2);

assign or_ln117_824_fu_1079_p2 = (icmp_ln86_reg_1412 | and_ln102_1134_fu_967_p2);

assign or_ln117_825_fu_1092_p2 = (or_ln117_824_fu_1079_p2 | and_ln102_1151_fu_1017_p2);

assign or_ln117_826_fu_1106_p2 = (icmp_ln86_reg_1412 | and_ln102_1128_fu_935_p2);

assign or_ln117_827_fu_1119_p2 = (or_ln117_826_fu_1106_p2 | and_ln102_1152_fu_1023_p2);

assign or_ln117_828_fu_1133_p2 = (or_ln117_826_fu_1106_p2 | and_ln102_1135_fu_977_p2);

assign or_ln117_829_fu_1147_p2 = (or_ln117_828_fu_1133_p2 | and_ln102_1154_fu_1033_p2);

assign or_ln117_830_fu_1161_p2 = (icmp_ln86_reg_1412 | and_ln102_1125_fu_919_p2);

assign or_ln117_831_fu_1174_p2 = (or_ln117_830_fu_1161_p2 | and_ln102_1155_fu_1039_p2);

assign or_ln117_832_fu_1188_p2 = (or_ln117_830_fu_1161_p2 | and_ln102_1136_fu_987_p2);

assign or_ln117_833_fu_1202_p2 = (or_ln117_832_fu_1188_p2 | and_ln102_1157_fu_1049_p2);

assign or_ln117_834_fu_1216_p2 = (or_ln117_830_fu_1161_p2 | and_ln102_1129_fu_951_p2);

assign or_ln117_835_fu_1230_p2 = (or_ln117_834_fu_1216_p2 | and_ln102_1158_fu_1055_p2);

assign or_ln117_836_fu_1244_p2 = (or_ln117_834_fu_1216_p2 | and_ln102_1137_fu_997_p2);

assign or_ln117_837_fu_1258_p2 = (or_ln117_836_fu_1244_p2 | and_ln102_1160_fu_1065_p2);

assign or_ln117_fu_712_p2 = (and_ln102_1138_fu_646_p2 | and_ln102_1131_fu_610_p2);

assign select_ln117_890_fu_748_p3 = ((or_ln117_812_fu_728_p2[0:0] == 1'b1) ? select_ln117_fu_734_p3 : 2'd3);

assign select_ln117_891_fu_766_p3 = ((or_ln117_813_fu_742_p2[0:0] == 1'b1) ? zext_ln117_97_fu_756_p1 : 3'd4);

assign select_ln117_892_fu_780_p3 = ((or_ln117_814_fu_760_p2[0:0] == 1'b1) ? select_ln117_891_fu_766_p3 : 3'd5);

assign select_ln117_893_fu_788_p3 = ((or_ln117_815_fu_774_p2[0:0] == 1'b1) ? select_ln117_892_fu_780_p3 : 3'd6);

assign select_ln117_894_fu_802_p3 = ((and_ln102_fu_544_p2[0:0] == 1'b1) ? select_ln117_893_fu_788_p3 : 3'd7);

assign select_ln117_895_fu_820_p3 = ((or_ln117_816_fu_796_p2[0:0] == 1'b1) ? zext_ln117_98_fu_810_p1 : 4'd8);

assign select_ln117_896_fu_834_p3 = ((or_ln117_817_fu_814_p2[0:0] == 1'b1) ? select_ln117_895_fu_820_p3 : 4'd9);

assign select_ln117_897_fu_848_p3 = ((or_ln117_818_fu_828_p2[0:0] == 1'b1) ? select_ln117_896_fu_834_p3 : 4'd10);

assign select_ln117_898_fu_862_p3 = ((or_ln117_819_fu_842_p2[0:0] == 1'b1) ? select_ln117_897_fu_848_p3 : 4'd11);

assign select_ln117_899_fu_876_p3 = ((or_ln117_820_fu_856_p2[0:0] == 1'b1) ? select_ln117_898_fu_862_p3 : 4'd12);

assign select_ln117_900_fu_890_p3 = ((or_ln117_821_fu_870_p2[0:0] == 1'b1) ? select_ln117_899_fu_876_p3 : 4'd13);

assign select_ln117_901_fu_898_p3 = ((or_ln117_822_fu_884_p2[0:0] == 1'b1) ? select_ln117_900_fu_890_p3 : 4'd14);

assign select_ln117_902_fu_906_p3 = ((icmp_ln86_fu_354_p2[0:0] == 1'b1) ? select_ln117_901_fu_898_p3 : 4'd15);

assign select_ln117_903_fu_1084_p3 = ((or_ln117_823_fu_1071_p2[0:0] == 1'b1) ? zext_ln117_99_fu_1076_p1 : 5'd16);

assign select_ln117_904_fu_1098_p3 = ((or_ln117_824_fu_1079_p2[0:0] == 1'b1) ? select_ln117_903_fu_1084_p3 : 5'd17);

assign select_ln117_905_fu_1111_p3 = ((or_ln117_825_fu_1092_p2[0:0] == 1'b1) ? select_ln117_904_fu_1098_p3 : 5'd18);

assign select_ln117_906_fu_1125_p3 = ((or_ln117_826_fu_1106_p2[0:0] == 1'b1) ? select_ln117_905_fu_1111_p3 : 5'd19);

assign select_ln117_907_fu_1139_p3 = ((or_ln117_827_fu_1119_p2[0:0] == 1'b1) ? select_ln117_906_fu_1125_p3 : 5'd20);

assign select_ln117_908_fu_1153_p3 = ((or_ln117_828_fu_1133_p2[0:0] == 1'b1) ? select_ln117_907_fu_1139_p3 : 5'd21);

assign select_ln117_909_fu_1166_p3 = ((or_ln117_829_fu_1147_p2[0:0] == 1'b1) ? select_ln117_908_fu_1153_p3 : 5'd22);

assign select_ln117_910_fu_1180_p3 = ((or_ln117_830_fu_1161_p2[0:0] == 1'b1) ? select_ln117_909_fu_1166_p3 : 5'd23);

assign select_ln117_911_fu_1194_p3 = ((or_ln117_831_fu_1174_p2[0:0] == 1'b1) ? select_ln117_910_fu_1180_p3 : 5'd24);

assign select_ln117_912_fu_1208_p3 = ((or_ln117_832_fu_1188_p2[0:0] == 1'b1) ? select_ln117_911_fu_1194_p3 : 5'd25);

assign select_ln117_913_fu_1222_p3 = ((or_ln117_833_fu_1202_p2[0:0] == 1'b1) ? select_ln117_912_fu_1208_p3 : 5'd26);

assign select_ln117_914_fu_1236_p3 = ((or_ln117_834_fu_1216_p2[0:0] == 1'b1) ? select_ln117_913_fu_1222_p3 : 5'd27);

assign select_ln117_915_fu_1250_p3 = ((or_ln117_835_fu_1230_p2[0:0] == 1'b1) ? select_ln117_914_fu_1236_p3 : 5'd28);

assign select_ln117_916_fu_1264_p3 = ((or_ln117_836_fu_1244_p2[0:0] == 1'b1) ? select_ln117_915_fu_1250_p3 : 5'd29);

assign select_ln117_fu_734_p3 = ((or_ln117_fu_712_p2[0:0] == 1'b1) ? zext_ln117_fu_724_p1 : 2'd2);

assign tmp_fu_444_p4 = {{x_15_val[17:3]}};

assign xor_ln104_435_fu_550_p2 = (icmp_ln86_918_fu_360_p2 ^ 1'd1);

assign xor_ln104_436_fu_924_p2 = (icmp_ln86_919_reg_1421 ^ 1'd1);

assign xor_ln104_437_fu_568_p2 = (icmp_ln86_920_fu_372_p2 ^ 1'd1);

assign xor_ln104_438_fu_586_p2 = (icmp_ln86_921_fu_378_p2 ^ 1'd1);

assign xor_ln104_439_fu_940_p2 = (icmp_ln86_922_reg_1427 ^ 1'd1);

assign xor_ln104_440_fu_956_p2 = (icmp_ln86_923_reg_1433 ^ 1'd1);

assign xor_ln104_441_fu_604_p2 = (icmp_ln86_924_fu_396_p2 ^ 1'd1);

assign xor_ln104_442_fu_616_p2 = (icmp_ln86_925_fu_402_p2 ^ 1'd1);

assign xor_ln104_443_fu_628_p2 = (icmp_ln86_926_fu_408_p2 ^ 1'd1);

assign xor_ln104_444_fu_640_p2 = (icmp_ln86_927_fu_414_p2 ^ 1'd1);

assign xor_ln104_445_fu_972_p2 = (icmp_ln86_928_reg_1439 ^ 1'd1);

assign xor_ln104_446_fu_982_p2 = (icmp_ln86_929_reg_1445 ^ 1'd1);

assign xor_ln104_447_fu_992_p2 = (icmp_ln86_930_reg_1451 ^ 1'd1);

assign xor_ln104_448_fu_1002_p2 = (icmp_ln86_931_reg_1457 ^ 1'd1);

assign xor_ln104_fu_914_p2 = (icmp_ln86_reg_1412 ^ 1'd1);

assign xor_ln117_fu_718_p2 = (1'd1 ^ and_ln102_1131_fu_610_p2);

assign zext_ln117_97_fu_756_p1 = select_ln117_890_fu_748_p3;

assign zext_ln117_98_fu_810_p1 = select_ln117_894_fu_802_p3;

assign zext_ln117_99_fu_1076_p1 = select_ln117_902_reg_1503;

assign zext_ln117_fu_724_p1 = xor_ln117_fu_718_p2;

endmodule //my_prj_decision_function_67
