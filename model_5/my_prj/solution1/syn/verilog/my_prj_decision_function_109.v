// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_109 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_2_val,
        x_3_val,
        x_9_val,
        x_11_val,
        x_15_val,
        x_17_val,
        x_21_val,
        x_23_val,
        x_30_val,
        x_33_val,
        x_35_val,
        x_36_val,
        x_38_val,
        x_47_val,
        x_50_val,
        x_51_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_2_val;
input  [17:0] x_3_val;
input  [17:0] x_9_val;
input  [17:0] x_11_val;
input  [17:0] x_15_val;
input  [17:0] x_17_val;
input  [17:0] x_21_val;
input  [17:0] x_23_val;
input  [17:0] x_30_val;
input  [17:0] x_33_val;
input  [17:0] x_35_val;
input  [17:0] x_36_val;
input  [17:0] x_38_val;
input  [17:0] x_47_val;
input  [17:0] x_50_val;
input  [17:0] x_51_val;
input  [17:0] x_52_val;
output  [10:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_1791_fu_380_p2;
reg   [0:0] icmp_ln86_1791_reg_1064;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] tmp_30_fu_386_p3;
reg   [0:0] tmp_30_reg_1070;
wire   [0:0] icmp_ln86_1798_fu_440_p2;
reg   [0:0] icmp_ln86_1798_reg_1075;
wire   [0:0] icmp_ln86_1799_fu_446_p2;
reg   [0:0] icmp_ln86_1799_reg_1080;
wire   [0:0] icmp_ln86_1800_fu_452_p2;
reg   [0:0] icmp_ln86_1800_reg_1085;
wire   [0:0] and_ln104_339_fu_530_p2;
reg   [0:0] and_ln104_339_reg_1090;
wire   [0:0] and_ln104_340_fu_548_p2;
reg   [0:0] and_ln104_340_reg_1096;
wire   [0:0] or_ln117_1630_fu_842_p2;
reg   [0:0] or_ln117_1630_reg_1101;
wire   [3:0] select_ln117_1744_fu_856_p3;
reg   [3:0] select_ln117_1744_reg_1107;
wire   [0:0] or_ln117_1634_fu_864_p2;
reg   [0:0] or_ln117_1634_reg_1112;
wire    ap_block_pp0_stage0;
wire   [14:0] tmp_fu_358_p4;
wire   [14:0] tmp_31_fu_424_p4;
wire   [0:0] icmp_ln86_fu_316_p2;
wire   [0:0] icmp_ln86_1783_fu_322_p2;
wire   [0:0] xor_ln104_851_fu_470_p2;
wire   [0:0] icmp_ln86_1784_fu_328_p2;
wire   [0:0] xor_ln104_fu_458_p2;
wire   [0:0] xor_ln104_852_fu_488_p2;
wire   [0:0] icmp_ln86_1785_fu_334_p2;
wire   [0:0] and_ln102_fu_464_p2;
wire   [0:0] xor_ln104_853_fu_506_p2;
wire   [0:0] icmp_ln86_1786_fu_340_p2;
wire   [0:0] and_ln104_fu_476_p2;
wire   [0:0] xor_ln104_854_fu_524_p2;
wire   [0:0] icmp_ln86_1787_fu_346_p2;
wire   [0:0] and_ln104_337_fu_494_p2;
wire   [0:0] xor_ln104_855_fu_542_p2;
wire   [0:0] icmp_ln86_1788_fu_352_p2;
wire   [0:0] and_ln102_1999_fu_500_p2;
wire   [0:0] icmp_ln86_1789_fu_368_p2;
wire   [0:0] and_ln104_338_fu_512_p2;
wire   [0:0] icmp_ln86_1790_fu_374_p2;
wire   [0:0] and_ln102_2000_fu_518_p2;
wire   [0:0] icmp_ln86_1792_fu_394_p2;
wire   [0:0] and_ln102_2002_fu_554_p2;
wire   [0:0] icmp_ln86_1793_fu_400_p2;
wire   [0:0] xor_ln104_856_fu_560_p2;
wire   [0:0] and_ln102_2008_fu_602_p2;
wire   [0:0] icmp_ln86_1794_fu_406_p2;
wire   [0:0] and_ln102_2003_fu_566_p2;
wire   [0:0] icmp_ln86_1795_fu_412_p2;
wire   [0:0] xor_ln104_857_fu_572_p2;
wire   [0:0] and_ln102_2011_fu_620_p2;
wire   [0:0] icmp_ln86_1796_fu_418_p2;
wire   [0:0] and_ln102_2004_fu_578_p2;
wire   [0:0] icmp_ln86_1797_fu_434_p2;
wire   [0:0] xor_ln104_858_fu_584_p2;
wire   [0:0] and_ln102_2014_fu_638_p2;
wire   [0:0] and_ln102_1998_fu_482_p2;
wire   [0:0] and_ln102_2001_fu_536_p2;
wire   [0:0] or_ln117_1617_fu_656_p2;
wire   [0:0] or_ln117_fu_650_p2;
wire   [0:0] and_ln102_2006_fu_590_p2;
wire   [1:0] zext_ln117_fu_662_p1;
wire   [0:0] or_ln117_1618_fu_666_p2;
wire   [0:0] and_ln102_2007_fu_596_p2;
wire   [1:0] select_ln117_fu_672_p3;
wire   [1:0] select_ln117_1732_fu_686_p3;
wire   [0:0] or_ln117_1619_fu_680_p2;
wire   [2:0] zext_ln117_192_fu_694_p1;
wire   [0:0] or_ln117_1620_fu_698_p2;
wire   [0:0] and_ln102_2009_fu_608_p2;
wire   [2:0] select_ln117_1733_fu_704_p3;
wire   [0:0] or_ln117_1621_fu_712_p2;
wire   [2:0] select_ln117_1734_fu_718_p3;
wire   [0:0] or_ln117_1622_fu_726_p2;
wire   [0:0] and_ln102_2010_fu_614_p2;
wire   [2:0] select_ln117_1735_fu_732_p3;
wire   [2:0] select_ln117_1736_fu_746_p3;
wire   [0:0] or_ln117_1623_fu_740_p2;
wire   [3:0] zext_ln117_193_fu_754_p1;
wire   [0:0] or_ln117_1624_fu_758_p2;
wire   [0:0] and_ln102_2012_fu_626_p2;
wire   [3:0] select_ln117_1737_fu_764_p3;
wire   [0:0] or_ln117_1625_fu_772_p2;
wire   [3:0] select_ln117_1738_fu_778_p3;
wire   [0:0] or_ln117_1626_fu_786_p2;
wire   [0:0] and_ln102_2013_fu_632_p2;
wire   [3:0] select_ln117_1739_fu_792_p3;
wire   [0:0] or_ln117_1627_fu_800_p2;
wire   [3:0] select_ln117_1740_fu_806_p3;
wire   [0:0] or_ln117_1628_fu_814_p2;
wire   [0:0] and_ln102_2015_fu_644_p2;
wire   [3:0] select_ln117_1741_fu_820_p3;
wire   [0:0] or_ln117_1629_fu_828_p2;
wire   [3:0] select_ln117_1742_fu_834_p3;
wire   [3:0] select_ln117_1743_fu_848_p3;
wire   [0:0] and_ln102_2005_fu_870_p2;
wire   [0:0] xor_ln104_859_fu_874_p2;
wire   [0:0] and_ln102_2017_fu_889_p2;
wire   [0:0] xor_ln104_860_fu_879_p2;
wire   [0:0] and_ln102_2019_fu_899_p2;
wire   [0:0] and_ln102_2016_fu_884_p2;
wire   [0:0] or_ln117_1631_fu_909_p2;
wire   [4:0] zext_ln117_194_fu_914_p1;
wire   [0:0] or_ln117_1632_fu_917_p2;
wire   [0:0] and_ln102_2018_fu_894_p2;
wire   [4:0] select_ln117_1745_fu_922_p3;
wire   [0:0] or_ln117_1633_fu_930_p2;
wire   [4:0] select_ln117_1746_fu_936_p3;
wire   [0:0] and_ln102_2020_fu_904_p2;
wire   [4:0] select_ln117_1747_fu_944_p3;
wire   [0:0] or_ln117_1635_fu_952_p2;
wire   [4:0] select_ln117_1748_fu_957_p3;
wire   [10:0] agg_result_fu_972_p43;
wire   [4:0] agg_result_fu_972_p44;
wire   [10:0] agg_result_fu_972_p45;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_972_p1;
wire   [4:0] agg_result_fu_972_p3;
wire   [4:0] agg_result_fu_972_p5;
wire   [4:0] agg_result_fu_972_p7;
wire   [4:0] agg_result_fu_972_p9;
wire   [4:0] agg_result_fu_972_p11;
wire   [4:0] agg_result_fu_972_p13;
wire   [4:0] agg_result_fu_972_p15;
wire   [4:0] agg_result_fu_972_p17;
wire   [4:0] agg_result_fu_972_p19;
wire   [4:0] agg_result_fu_972_p21;
wire   [4:0] agg_result_fu_972_p23;
wire   [4:0] agg_result_fu_972_p25;
wire   [4:0] agg_result_fu_972_p27;
wire   [4:0] agg_result_fu_972_p29;
wire   [4:0] agg_result_fu_972_p31;
wire  signed [4:0] agg_result_fu_972_p33;
wire  signed [4:0] agg_result_fu_972_p35;
wire  signed [4:0] agg_result_fu_972_p37;
wire  signed [4:0] agg_result_fu_972_p39;
wire  signed [4:0] agg_result_fu_972_p41;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_43_5_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 11 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 11 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 11 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 11 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 11 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 11 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 11 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 11 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 11 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 11 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 11 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 11 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 11 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 11 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 11 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 11 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 11 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 11 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 11 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 11 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 11 ),
    .def_WIDTH( 11 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 11 ))
sparsemux_43_5_11_1_1_U2343(
    .din0(11'd318),
    .din1(11'd1513),
    .din2(11'd665),
    .din3(11'd168),
    .din4(11'd1575),
    .din5(11'd2047),
    .din6(11'd1975),
    .din7(11'd138),
    .din8(11'd1998),
    .din9(11'd5),
    .din10(11'd206),
    .din11(11'd2023),
    .din12(11'd30),
    .din13(11'd79),
    .din14(11'd698),
    .din15(11'd849),
    .din16(11'd1962),
    .din17(11'd13),
    .din18(11'd1946),
    .din19(11'd190),
    .din20(11'd1583),
    .def(agg_result_fu_972_p43),
    .sel(agg_result_fu_972_p44),
    .dout(agg_result_fu_972_p45)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln104_339_reg_1090 <= and_ln104_339_fu_530_p2;
        and_ln104_340_reg_1096 <= and_ln104_340_fu_548_p2;
        icmp_ln86_1791_reg_1064 <= icmp_ln86_1791_fu_380_p2;
        icmp_ln86_1798_reg_1075 <= icmp_ln86_1798_fu_440_p2;
        icmp_ln86_1799_reg_1080 <= icmp_ln86_1799_fu_446_p2;
        icmp_ln86_1800_reg_1085 <= icmp_ln86_1800_fu_452_p2;
        or_ln117_1630_reg_1101 <= or_ln117_1630_fu_842_p2;
        or_ln117_1634_reg_1112 <= or_ln117_1634_fu_864_p2;
        select_ln117_1744_reg_1107 <= select_ln117_1744_fu_856_p3;
        tmp_30_reg_1070 <= x_51_val[32'd17];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_972_p43 = 'bx;

assign agg_result_fu_972_p44 = ((or_ln117_1635_fu_952_p2[0:0] == 1'b1) ? select_ln117_1748_fu_957_p3 : 5'd20);

assign and_ln102_1998_fu_482_p2 = (xor_ln104_fu_458_p2 & icmp_ln86_1784_fu_328_p2);

assign and_ln102_1999_fu_500_p2 = (icmp_ln86_1785_fu_334_p2 & and_ln102_fu_464_p2);

assign and_ln102_2000_fu_518_p2 = (icmp_ln86_1786_fu_340_p2 & and_ln104_fu_476_p2);

assign and_ln102_2001_fu_536_p2 = (icmp_ln86_1787_fu_346_p2 & and_ln104_337_fu_494_p2);

assign and_ln102_2002_fu_554_p2 = (icmp_ln86_1788_fu_352_p2 & and_ln102_1999_fu_500_p2);

assign and_ln102_2003_fu_566_p2 = (icmp_ln86_1789_fu_368_p2 & and_ln104_338_fu_512_p2);

assign and_ln102_2004_fu_578_p2 = (icmp_ln86_1790_fu_374_p2 & and_ln102_2000_fu_518_p2);

assign and_ln102_2005_fu_870_p2 = (icmp_ln86_1791_reg_1064 & and_ln104_339_reg_1090);

assign and_ln102_2006_fu_590_p2 = (tmp_30_fu_386_p3 & and_ln104_340_fu_548_p2);

assign and_ln102_2007_fu_596_p2 = (icmp_ln86_1792_fu_394_p2 & and_ln102_2002_fu_554_p2);

assign and_ln102_2008_fu_602_p2 = (xor_ln104_856_fu_560_p2 & icmp_ln86_1793_fu_400_p2);

assign and_ln102_2009_fu_608_p2 = (and_ln102_2008_fu_602_p2 & and_ln102_1999_fu_500_p2);

assign and_ln102_2010_fu_614_p2 = (icmp_ln86_1794_fu_406_p2 & and_ln102_2003_fu_566_p2);

assign and_ln102_2011_fu_620_p2 = (xor_ln104_857_fu_572_p2 & icmp_ln86_1795_fu_412_p2);

assign and_ln102_2012_fu_626_p2 = (and_ln104_338_fu_512_p2 & and_ln102_2011_fu_620_p2);

assign and_ln102_2013_fu_632_p2 = (icmp_ln86_1796_fu_418_p2 & and_ln102_2004_fu_578_p2);

assign and_ln102_2014_fu_638_p2 = (xor_ln104_858_fu_584_p2 & icmp_ln86_1797_fu_434_p2);

assign and_ln102_2015_fu_644_p2 = (and_ln102_2014_fu_638_p2 & and_ln102_2000_fu_518_p2);

assign and_ln102_2016_fu_884_p2 = (icmp_ln86_1798_reg_1075 & and_ln102_2005_fu_870_p2);

assign and_ln102_2017_fu_889_p2 = (xor_ln104_859_fu_874_p2 & icmp_ln86_1799_reg_1080);

assign and_ln102_2018_fu_894_p2 = (and_ln104_339_reg_1090 & and_ln102_2017_fu_889_p2);

assign and_ln102_2019_fu_899_p2 = (xor_ln104_860_fu_879_p2 & icmp_ln86_1800_reg_1085);

assign and_ln102_2020_fu_904_p2 = (and_ln104_340_reg_1096 & and_ln102_2019_fu_899_p2);

assign and_ln102_fu_464_p2 = (icmp_ln86_fu_316_p2 & icmp_ln86_1783_fu_322_p2);

assign and_ln104_337_fu_494_p2 = (xor_ln104_fu_458_p2 & xor_ln104_852_fu_488_p2);

assign and_ln104_338_fu_512_p2 = (xor_ln104_853_fu_506_p2 & and_ln102_fu_464_p2);

assign and_ln104_339_fu_530_p2 = (xor_ln104_854_fu_524_p2 & and_ln104_fu_476_p2);

assign and_ln104_340_fu_548_p2 = (xor_ln104_855_fu_542_p2 & and_ln104_337_fu_494_p2);

assign and_ln104_fu_476_p2 = (xor_ln104_851_fu_470_p2 & icmp_ln86_fu_316_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_972_p45;

assign icmp_ln86_1783_fu_322_p2 = (($signed(x_21_val) < $signed(18'd220)) ? 1'b1 : 1'b0);

assign icmp_ln86_1784_fu_328_p2 = (($signed(x_15_val) < $signed(18'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_1785_fu_334_p2 = (($signed(x_9_val) < $signed(18'd1143)) ? 1'b1 : 1'b0);

assign icmp_ln86_1786_fu_340_p2 = (($signed(x_47_val) < $signed(18'd81415)) ? 1'b1 : 1'b0);

assign icmp_ln86_1787_fu_346_p2 = (($signed(x_23_val) < $signed(18'd27)) ? 1'b1 : 1'b0);

assign icmp_ln86_1788_fu_352_p2 = (($signed(x_2_val) < $signed(18'd260600)) ? 1'b1 : 1'b0);

assign icmp_ln86_1789_fu_368_p2 = (($signed(tmp_fu_358_p4) < $signed(15'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_1790_fu_374_p2 = (($signed(x_3_val) < $signed(18'd77578)) ? 1'b1 : 1'b0);

assign icmp_ln86_1791_fu_380_p2 = (($signed(x_52_val) < $signed(18'd72193)) ? 1'b1 : 1'b0);

assign icmp_ln86_1792_fu_394_p2 = (($signed(x_35_val) < $signed(18'd68)) ? 1'b1 : 1'b0);

assign icmp_ln86_1793_fu_400_p2 = (($signed(x_33_val) < $signed(18'd849)) ? 1'b1 : 1'b0);

assign icmp_ln86_1794_fu_406_p2 = (($signed(x_11_val) < $signed(18'd945)) ? 1'b1 : 1'b0);

assign icmp_ln86_1795_fu_412_p2 = (($signed(x_30_val) < $signed(18'd6238)) ? 1'b1 : 1'b0);

assign icmp_ln86_1796_fu_418_p2 = (($signed(x_1_val) < $signed(18'd17962)) ? 1'b1 : 1'b0);

assign icmp_ln86_1797_fu_434_p2 = (($signed(tmp_31_fu_424_p4) < $signed(15'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_1798_fu_440_p2 = (($signed(x_50_val) < $signed(18'd72713)) ? 1'b1 : 1'b0);

assign icmp_ln86_1799_fu_446_p2 = (($signed(x_17_val) < $signed(18'd45)) ? 1'b1 : 1'b0);

assign icmp_ln86_1800_fu_452_p2 = (($signed(x_2_val) < $signed(18'd261523)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_316_p2 = (($signed(x_1_val) < $signed(18'd184174)) ? 1'b1 : 1'b0);

assign or_ln117_1617_fu_656_p2 = (xor_ln104_852_fu_488_p2 | icmp_ln86_fu_316_p2);

assign or_ln117_1618_fu_666_p2 = (or_ln117_fu_650_p2 | and_ln102_2006_fu_590_p2);

assign or_ln117_1619_fu_680_p2 = (or_ln117_1618_fu_666_p2 | and_ln102_2007_fu_596_p2);

assign or_ln117_1620_fu_698_p2 = (or_ln117_1618_fu_666_p2 | and_ln102_2002_fu_554_p2);

assign or_ln117_1621_fu_712_p2 = (or_ln117_1620_fu_698_p2 | and_ln102_2009_fu_608_p2);

assign or_ln117_1622_fu_726_p2 = (or_ln117_1618_fu_666_p2 | and_ln102_1999_fu_500_p2);

assign or_ln117_1623_fu_740_p2 = (or_ln117_1622_fu_726_p2 | and_ln102_2010_fu_614_p2);

assign or_ln117_1624_fu_758_p2 = (or_ln117_1622_fu_726_p2 | and_ln102_2003_fu_566_p2);

assign or_ln117_1625_fu_772_p2 = (or_ln117_1624_fu_758_p2 | and_ln102_2012_fu_626_p2);

assign or_ln117_1626_fu_786_p2 = (or_ln117_1618_fu_666_p2 | and_ln102_fu_464_p2);

assign or_ln117_1627_fu_800_p2 = (or_ln117_1626_fu_786_p2 | and_ln102_2013_fu_632_p2);

assign or_ln117_1628_fu_814_p2 = (or_ln117_1626_fu_786_p2 | and_ln102_2004_fu_578_p2);

assign or_ln117_1629_fu_828_p2 = (or_ln117_1628_fu_814_p2 | and_ln102_2015_fu_644_p2);

assign or_ln117_1630_fu_842_p2 = (or_ln117_1626_fu_786_p2 | and_ln102_2000_fu_518_p2);

assign or_ln117_1631_fu_909_p2 = (or_ln117_1630_reg_1101 | and_ln102_2016_fu_884_p2);

assign or_ln117_1632_fu_917_p2 = (or_ln117_1630_reg_1101 | and_ln102_2005_fu_870_p2);

assign or_ln117_1633_fu_930_p2 = (or_ln117_1632_fu_917_p2 | and_ln102_2018_fu_894_p2);

assign or_ln117_1634_fu_864_p2 = (or_ln117_1618_fu_666_p2 | icmp_ln86_fu_316_p2);

assign or_ln117_1635_fu_952_p2 = (or_ln117_1634_reg_1112 | and_ln102_2020_fu_904_p2);

assign or_ln117_fu_650_p2 = (and_ln102_2001_fu_536_p2 | and_ln102_1998_fu_482_p2);

assign select_ln117_1732_fu_686_p3 = ((or_ln117_1618_fu_666_p2[0:0] == 1'b1) ? select_ln117_fu_672_p3 : 2'd3);

assign select_ln117_1733_fu_704_p3 = ((or_ln117_1619_fu_680_p2[0:0] == 1'b1) ? zext_ln117_192_fu_694_p1 : 3'd4);

assign select_ln117_1734_fu_718_p3 = ((or_ln117_1620_fu_698_p2[0:0] == 1'b1) ? select_ln117_1733_fu_704_p3 : 3'd5);

assign select_ln117_1735_fu_732_p3 = ((or_ln117_1621_fu_712_p2[0:0] == 1'b1) ? select_ln117_1734_fu_718_p3 : 3'd6);

assign select_ln117_1736_fu_746_p3 = ((or_ln117_1622_fu_726_p2[0:0] == 1'b1) ? select_ln117_1735_fu_732_p3 : 3'd7);

assign select_ln117_1737_fu_764_p3 = ((or_ln117_1623_fu_740_p2[0:0] == 1'b1) ? zext_ln117_193_fu_754_p1 : 4'd8);

assign select_ln117_1738_fu_778_p3 = ((or_ln117_1624_fu_758_p2[0:0] == 1'b1) ? select_ln117_1737_fu_764_p3 : 4'd9);

assign select_ln117_1739_fu_792_p3 = ((or_ln117_1625_fu_772_p2[0:0] == 1'b1) ? select_ln117_1738_fu_778_p3 : 4'd10);

assign select_ln117_1740_fu_806_p3 = ((or_ln117_1626_fu_786_p2[0:0] == 1'b1) ? select_ln117_1739_fu_792_p3 : 4'd11);

assign select_ln117_1741_fu_820_p3 = ((or_ln117_1627_fu_800_p2[0:0] == 1'b1) ? select_ln117_1740_fu_806_p3 : 4'd12);

assign select_ln117_1742_fu_834_p3 = ((or_ln117_1628_fu_814_p2[0:0] == 1'b1) ? select_ln117_1741_fu_820_p3 : 4'd13);

assign select_ln117_1743_fu_848_p3 = ((or_ln117_1629_fu_828_p2[0:0] == 1'b1) ? select_ln117_1742_fu_834_p3 : 4'd14);

assign select_ln117_1744_fu_856_p3 = ((or_ln117_1630_fu_842_p2[0:0] == 1'b1) ? select_ln117_1743_fu_848_p3 : 4'd15);

assign select_ln117_1745_fu_922_p3 = ((or_ln117_1631_fu_909_p2[0:0] == 1'b1) ? zext_ln117_194_fu_914_p1 : 5'd16);

assign select_ln117_1746_fu_936_p3 = ((or_ln117_1632_fu_917_p2[0:0] == 1'b1) ? select_ln117_1745_fu_922_p3 : 5'd17);

assign select_ln117_1747_fu_944_p3 = ((or_ln117_1633_fu_930_p2[0:0] == 1'b1) ? select_ln117_1746_fu_936_p3 : 5'd18);

assign select_ln117_1748_fu_957_p3 = ((or_ln117_1634_reg_1112[0:0] == 1'b1) ? select_ln117_1747_fu_944_p3 : 5'd19);

assign select_ln117_fu_672_p3 = ((or_ln117_fu_650_p2[0:0] == 1'b1) ? zext_ln117_fu_662_p1 : 2'd2);

assign tmp_30_fu_386_p3 = x_51_val[32'd17];

assign tmp_31_fu_424_p4 = {{x_36_val[17:3]}};

assign tmp_fu_358_p4 = {{x_38_val[17:3]}};

assign xor_ln104_851_fu_470_p2 = (icmp_ln86_1783_fu_322_p2 ^ 1'd1);

assign xor_ln104_852_fu_488_p2 = (icmp_ln86_1784_fu_328_p2 ^ 1'd1);

assign xor_ln104_853_fu_506_p2 = (icmp_ln86_1785_fu_334_p2 ^ 1'd1);

assign xor_ln104_854_fu_524_p2 = (icmp_ln86_1786_fu_340_p2 ^ 1'd1);

assign xor_ln104_855_fu_542_p2 = (icmp_ln86_1787_fu_346_p2 ^ 1'd1);

assign xor_ln104_856_fu_560_p2 = (icmp_ln86_1788_fu_352_p2 ^ 1'd1);

assign xor_ln104_857_fu_572_p2 = (icmp_ln86_1789_fu_368_p2 ^ 1'd1);

assign xor_ln104_858_fu_584_p2 = (icmp_ln86_1790_fu_374_p2 ^ 1'd1);

assign xor_ln104_859_fu_874_p2 = (icmp_ln86_1791_reg_1064 ^ 1'd1);

assign xor_ln104_860_fu_879_p2 = (tmp_30_reg_1070 ^ 1'd1);

assign xor_ln104_fu_458_p2 = (icmp_ln86_fu_316_p2 ^ 1'd1);

assign zext_ln117_192_fu_694_p1 = select_ln117_1732_fu_686_p3;

assign zext_ln117_193_fu_754_p1 = select_ln117_1736_fu_746_p3;

assign zext_ln117_194_fu_914_p1 = select_ln117_1744_reg_1107;

assign zext_ln117_fu_662_p1 = or_ln117_1617_fu_656_p2;

endmodule //my_prj_decision_function_109
