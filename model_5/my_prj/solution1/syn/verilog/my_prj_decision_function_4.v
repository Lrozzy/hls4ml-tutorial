// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_2_val,
        x_9_val,
        x_17_val,
        x_19_val,
        x_21_val,
        x_22_val,
        x_25_val,
        x_27_val,
        x_28_val,
        x_32_val,
        x_36_val,
        x_37_val,
        x_42_val,
        x_44_val,
        x_46_val,
        x_48_val,
        x_51_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_2_val;
input  [17:0] x_9_val;
input  [17:0] x_17_val;
input  [17:0] x_19_val;
input  [17:0] x_21_val;
input  [17:0] x_22_val;
input  [17:0] x_25_val;
input  [17:0] x_27_val;
input  [17:0] x_28_val;
input  [17:0] x_32_val;
input  [17:0] x_36_val;
input  [17:0] x_37_val;
input  [17:0] x_42_val;
input  [17:0] x_44_val;
input  [17:0] x_46_val;
input  [17:0] x_48_val;
input  [17:0] x_51_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_110_fu_378_p2;
reg   [0:0] icmp_ln86_110_reg_1213;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_114_fu_402_p2;
reg   [0:0] icmp_ln86_114_reg_1219;
wire   [0:0] icmp_ln86_115_fu_408_p2;
reg   [0:0] icmp_ln86_115_reg_1225;
wire   [0:0] icmp_ln86_116_fu_414_p2;
reg   [0:0] icmp_ln86_116_reg_1231;
wire   [0:0] icmp_ln86_123_fu_456_p2;
reg   [0:0] icmp_ln86_123_reg_1237;
wire   [0:0] icmp_ln86_124_fu_462_p2;
reg   [0:0] icmp_ln86_124_reg_1242;
wire   [0:0] icmp_ln86_125_fu_468_p2;
reg   [0:0] icmp_ln86_125_reg_1247;
wire   [0:0] icmp_ln86_126_fu_474_p2;
reg   [0:0] icmp_ln86_126_reg_1252;
wire   [0:0] icmp_ln86_127_fu_480_p2;
reg   [0:0] icmp_ln86_127_reg_1257;
wire   [0:0] icmp_ln86_128_fu_486_p2;
reg   [0:0] icmp_ln86_128_reg_1262;
wire   [0:0] and_ln104_19_fu_528_p2;
reg   [0:0] and_ln104_19_reg_1267;
wire   [0:0] and_ln104_21_fu_564_p2;
reg   [0:0] and_ln104_21_reg_1273;
wire   [0:0] or_ln117_109_fu_838_p2;
reg   [0:0] or_ln117_109_reg_1279;
wire   [3:0] select_ln117_114_fu_852_p3;
reg   [3:0] select_ln117_114_reg_1285;
wire   [0:0] or_ln117_113_fu_860_p2;
reg   [0:0] or_ln117_113_reg_1290;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln86_fu_342_p2;
wire   [0:0] icmp_ln86_105_fu_348_p2;
wire   [0:0] xor_ln104_50_fu_504_p2;
wire   [0:0] icmp_ln86_106_fu_354_p2;
wire   [0:0] xor_ln104_fu_492_p2;
wire   [0:0] xor_ln104_51_fu_522_p2;
wire   [0:0] icmp_ln86_107_fu_360_p2;
wire   [0:0] and_ln102_fu_498_p2;
wire   [0:0] xor_ln104_52_fu_540_p2;
wire   [0:0] icmp_ln86_108_fu_366_p2;
wire   [0:0] and_ln104_fu_510_p2;
wire   [0:0] xor_ln104_53_fu_558_p2;
wire   [0:0] icmp_ln86_109_fu_372_p2;
wire   [0:0] and_ln102_100_fu_516_p2;
wire   [0:0] icmp_ln86_111_fu_384_p2;
wire   [0:0] and_ln102_101_fu_534_p2;
wire   [0:0] icmp_ln86_112_fu_390_p2;
wire   [0:0] and_ln104_20_fu_546_p2;
wire   [0:0] icmp_ln86_113_fu_396_p2;
wire   [0:0] and_ln102_102_fu_552_p2;
wire   [0:0] icmp_ln86_117_fu_420_p2;
wire   [0:0] and_ln102_105_fu_576_p2;
wire   [0:0] icmp_ln86_118_fu_426_p2;
wire   [0:0] xor_ln104_55_fu_582_p2;
wire   [0:0] and_ln102_123_fu_618_p2;
wire   [0:0] icmp_ln86_119_fu_432_p2;
wire   [0:0] and_ln102_106_fu_588_p2;
wire   [0:0] icmp_ln86_120_fu_438_p2;
wire   [0:0] xor_ln104_56_fu_594_p2;
wire   [0:0] and_ln102_124_fu_636_p2;
wire   [0:0] icmp_ln86_121_fu_444_p2;
wire   [0:0] and_ln102_107_fu_600_p2;
wire   [0:0] icmp_ln86_122_fu_450_p2;
wire   [0:0] xor_ln104_57_fu_606_p2;
wire   [0:0] and_ln102_125_fu_654_p2;
wire   [0:0] and_ln102_103_fu_570_p2;
wire   [0:0] xor_ln117_fu_666_p2;
wire   [0:0] and_ln102_111_fu_612_p2;
wire   [1:0] zext_ln117_fu_672_p1;
wire   [0:0] or_ln117_fu_676_p2;
wire   [1:0] select_ln117_fu_682_p3;
wire   [1:0] select_ln117_103_fu_696_p3;
wire   [0:0] or_ln117_99_fu_690_p2;
wire   [0:0] and_ln102_112_fu_624_p2;
wire   [2:0] zext_ln117_9_fu_704_p1;
wire   [0:0] or_ln117_100_fu_708_p2;
wire   [2:0] select_ln117_104_fu_714_p3;
wire   [0:0] or_ln117_101_fu_722_p2;
wire   [0:0] and_ln102_113_fu_630_p2;
wire   [2:0] select_ln117_105_fu_728_p3;
wire   [0:0] or_ln117_102_fu_736_p2;
wire   [2:0] select_ln117_106_fu_742_p3;
wire   [2:0] select_ln117_107_fu_756_p3;
wire   [0:0] or_ln117_103_fu_750_p2;
wire   [0:0] and_ln102_114_fu_642_p2;
wire   [3:0] zext_ln117_10_fu_764_p1;
wire   [0:0] or_ln117_104_fu_768_p2;
wire   [3:0] select_ln117_108_fu_774_p3;
wire   [0:0] or_ln117_105_fu_782_p2;
wire   [0:0] and_ln102_115_fu_648_p2;
wire   [3:0] select_ln117_109_fu_788_p3;
wire   [0:0] or_ln117_106_fu_796_p2;
wire   [3:0] select_ln117_110_fu_802_p3;
wire   [0:0] or_ln117_107_fu_810_p2;
wire   [0:0] and_ln102_116_fu_660_p2;
wire   [3:0] select_ln117_111_fu_816_p3;
wire   [0:0] or_ln117_108_fu_824_p2;
wire   [3:0] select_ln117_112_fu_830_p3;
wire   [3:0] select_ln117_113_fu_844_p3;
wire   [0:0] xor_ln104_54_fu_870_p2;
wire   [0:0] and_ln102_104_fu_866_p2;
wire   [0:0] and_ln104_22_fu_875_p2;
wire   [0:0] and_ln102_108_fu_880_p2;
wire   [0:0] xor_ln104_58_fu_884_p2;
wire   [0:0] and_ln102_126_fu_914_p2;
wire   [0:0] and_ln102_109_fu_889_p2;
wire   [0:0] xor_ln104_59_fu_894_p2;
wire   [0:0] and_ln102_127_fu_929_p2;
wire   [0:0] and_ln102_110_fu_899_p2;
wire   [0:0] xor_ln104_60_fu_904_p2;
wire   [0:0] and_ln102_128_fu_945_p2;
wire   [0:0] and_ln102_117_fu_909_p2;
wire   [0:0] or_ln117_110_fu_956_p2;
wire   [3:0] select_ln117_115_fu_966_p3;
wire   [0:0] or_ln117_111_fu_961_p2;
wire   [0:0] and_ln102_118_fu_919_p2;
wire   [4:0] zext_ln117_11_fu_973_p1;
wire   [0:0] or_ln117_112_fu_977_p2;
wire   [4:0] select_ln117_116_fu_983_p3;
wire   [0:0] and_ln102_119_fu_924_p2;
wire   [4:0] select_ln117_117_fu_991_p3;
wire   [0:0] or_ln117_114_fu_999_p2;
wire   [4:0] select_ln117_118_fu_1004_p3;
wire   [0:0] or_ln117_115_fu_1011_p2;
wire   [0:0] and_ln102_120_fu_934_p2;
wire   [4:0] select_ln117_119_fu_1016_p3;
wire   [0:0] or_ln117_116_fu_1024_p2;
wire   [4:0] select_ln117_120_fu_1030_p3;
wire   [0:0] or_ln117_117_fu_1038_p2;
wire   [0:0] and_ln102_121_fu_940_p2;
wire   [4:0] select_ln117_121_fu_1043_p3;
wire   [0:0] or_ln117_118_fu_1051_p2;
wire   [4:0] select_ln117_122_fu_1057_p3;
wire   [0:0] or_ln117_119_fu_1065_p2;
wire   [0:0] and_ln102_122_fu_950_p2;
wire   [4:0] select_ln117_123_fu_1071_p3;
wire   [0:0] or_ln117_120_fu_1079_p2;
wire   [4:0] select_ln117_124_fu_1085_p3;
wire   [11:0] agg_result_fu_1101_p53;
wire   [4:0] agg_result_fu_1101_p54;
wire   [11:0] agg_result_fu_1101_p55;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1101_p1;
wire   [4:0] agg_result_fu_1101_p3;
wire   [4:0] agg_result_fu_1101_p5;
wire   [4:0] agg_result_fu_1101_p7;
wire   [4:0] agg_result_fu_1101_p9;
wire   [4:0] agg_result_fu_1101_p11;
wire   [4:0] agg_result_fu_1101_p13;
wire   [4:0] agg_result_fu_1101_p15;
wire   [4:0] agg_result_fu_1101_p17;
wire   [4:0] agg_result_fu_1101_p19;
wire   [4:0] agg_result_fu_1101_p21;
wire   [4:0] agg_result_fu_1101_p23;
wire   [4:0] agg_result_fu_1101_p25;
wire   [4:0] agg_result_fu_1101_p27;
wire   [4:0] agg_result_fu_1101_p29;
wire   [4:0] agg_result_fu_1101_p31;
wire  signed [4:0] agg_result_fu_1101_p33;
wire  signed [4:0] agg_result_fu_1101_p35;
wire  signed [4:0] agg_result_fu_1101_p37;
wire  signed [4:0] agg_result_fu_1101_p39;
wire  signed [4:0] agg_result_fu_1101_p41;
wire  signed [4:0] agg_result_fu_1101_p43;
wire  signed [4:0] agg_result_fu_1101_p45;
wire  signed [4:0] agg_result_fu_1101_p47;
wire  signed [4:0] agg_result_fu_1101_p49;
wire  signed [4:0] agg_result_fu_1101_p51;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_53_5_12_1_1_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_53_5_12_1_1_x_U2016(
    .din0(12'd1789),
    .din1(12'd509),
    .din2(12'd7),
    .din3(12'd3727),
    .din4(12'd1786),
    .din5(12'd320),
    .din6(12'd4062),
    .din7(12'd338),
    .din8(12'd121),
    .din9(12'd3942),
    .din10(12'd3),
    .din11(12'd465),
    .din12(12'd3798),
    .din13(12'd114),
    .din14(12'd2874),
    .din15(12'd323),
    .din16(12'd3621),
    .din17(12'd295),
    .din18(12'd709),
    .din19(12'd3976),
    .din20(12'd3766),
    .din21(12'd2361),
    .din22(12'd503),
    .din23(12'd3832),
    .din24(12'd112),
    .din25(12'd3193),
    .def(agg_result_fu_1101_p53),
    .sel(agg_result_fu_1101_p54),
    .dout(agg_result_fu_1101_p55)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln104_19_reg_1267 <= and_ln104_19_fu_528_p2;
        and_ln104_21_reg_1273 <= and_ln104_21_fu_564_p2;
        icmp_ln86_110_reg_1213 <= icmp_ln86_110_fu_378_p2;
        icmp_ln86_114_reg_1219 <= icmp_ln86_114_fu_402_p2;
        icmp_ln86_115_reg_1225 <= icmp_ln86_115_fu_408_p2;
        icmp_ln86_116_reg_1231 <= icmp_ln86_116_fu_414_p2;
        icmp_ln86_123_reg_1237 <= icmp_ln86_123_fu_456_p2;
        icmp_ln86_124_reg_1242 <= icmp_ln86_124_fu_462_p2;
        icmp_ln86_125_reg_1247 <= icmp_ln86_125_fu_468_p2;
        icmp_ln86_126_reg_1252 <= icmp_ln86_126_fu_474_p2;
        icmp_ln86_127_reg_1257 <= icmp_ln86_127_fu_480_p2;
        icmp_ln86_128_reg_1262 <= icmp_ln86_128_fu_486_p2;
        or_ln117_109_reg_1279 <= or_ln117_109_fu_838_p2;
        or_ln117_113_reg_1290 <= or_ln117_113_fu_860_p2;
        select_ln117_114_reg_1285 <= select_ln117_114_fu_852_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1101_p53 = 'bx;

assign agg_result_fu_1101_p54 = ((or_ln117_120_fu_1079_p2[0:0] == 1'b1) ? select_ln117_124_fu_1085_p3 : 5'd25);

assign and_ln102_100_fu_516_p2 = (xor_ln104_fu_492_p2 & icmp_ln86_106_fu_354_p2);

assign and_ln102_101_fu_534_p2 = (icmp_ln86_107_fu_360_p2 & and_ln102_fu_498_p2);

assign and_ln102_102_fu_552_p2 = (icmp_ln86_108_fu_366_p2 & and_ln104_fu_510_p2);

assign and_ln102_103_fu_570_p2 = (icmp_ln86_109_fu_372_p2 & and_ln102_100_fu_516_p2);

assign and_ln102_104_fu_866_p2 = (icmp_ln86_110_reg_1213 & and_ln104_19_reg_1267);

assign and_ln102_105_fu_576_p2 = (icmp_ln86_111_fu_384_p2 & and_ln102_101_fu_534_p2);

assign and_ln102_106_fu_588_p2 = (icmp_ln86_112_fu_390_p2 & and_ln104_20_fu_546_p2);

assign and_ln102_107_fu_600_p2 = (icmp_ln86_113_fu_396_p2 & and_ln102_102_fu_552_p2);

assign and_ln102_108_fu_880_p2 = (icmp_ln86_114_reg_1219 & and_ln104_21_reg_1273);

assign and_ln102_109_fu_889_p2 = (icmp_ln86_115_reg_1225 & and_ln102_104_fu_866_p2);

assign and_ln102_110_fu_899_p2 = (icmp_ln86_116_reg_1231 & and_ln104_22_fu_875_p2);

assign and_ln102_111_fu_612_p2 = (icmp_ln86_117_fu_420_p2 & and_ln102_105_fu_576_p2);

assign and_ln102_112_fu_624_p2 = (and_ln102_123_fu_618_p2 & and_ln102_101_fu_534_p2);

assign and_ln102_113_fu_630_p2 = (icmp_ln86_119_fu_432_p2 & and_ln102_106_fu_588_p2);

assign and_ln102_114_fu_642_p2 = (and_ln104_20_fu_546_p2 & and_ln102_124_fu_636_p2);

assign and_ln102_115_fu_648_p2 = (icmp_ln86_121_fu_444_p2 & and_ln102_107_fu_600_p2);

assign and_ln102_116_fu_660_p2 = (and_ln102_125_fu_654_p2 & and_ln102_102_fu_552_p2);

assign and_ln102_117_fu_909_p2 = (icmp_ln86_123_reg_1237 & and_ln102_108_fu_880_p2);

assign and_ln102_118_fu_919_p2 = (and_ln104_21_reg_1273 & and_ln102_126_fu_914_p2);

assign and_ln102_119_fu_924_p2 = (icmp_ln86_125_reg_1247 & and_ln102_109_fu_889_p2);

assign and_ln102_120_fu_934_p2 = (and_ln102_127_fu_929_p2 & and_ln102_104_fu_866_p2);

assign and_ln102_121_fu_940_p2 = (icmp_ln86_127_reg_1257 & and_ln102_110_fu_899_p2);

assign and_ln102_122_fu_950_p2 = (and_ln104_22_fu_875_p2 & and_ln102_128_fu_945_p2);

assign and_ln102_123_fu_618_p2 = (xor_ln104_55_fu_582_p2 & icmp_ln86_118_fu_426_p2);

assign and_ln102_124_fu_636_p2 = (xor_ln104_56_fu_594_p2 & icmp_ln86_120_fu_438_p2);

assign and_ln102_125_fu_654_p2 = (xor_ln104_57_fu_606_p2 & icmp_ln86_122_fu_450_p2);

assign and_ln102_126_fu_914_p2 = (xor_ln104_58_fu_884_p2 & icmp_ln86_124_reg_1242);

assign and_ln102_127_fu_929_p2 = (xor_ln104_59_fu_894_p2 & icmp_ln86_126_reg_1252);

assign and_ln102_128_fu_945_p2 = (xor_ln104_60_fu_904_p2 & icmp_ln86_128_reg_1262);

assign and_ln102_fu_498_p2 = (icmp_ln86_fu_342_p2 & icmp_ln86_105_fu_348_p2);

assign and_ln104_19_fu_528_p2 = (xor_ln104_fu_492_p2 & xor_ln104_51_fu_522_p2);

assign and_ln104_20_fu_546_p2 = (xor_ln104_52_fu_540_p2 & and_ln102_fu_498_p2);

assign and_ln104_21_fu_564_p2 = (xor_ln104_53_fu_558_p2 & and_ln104_fu_510_p2);

assign and_ln104_22_fu_875_p2 = (xor_ln104_54_fu_870_p2 & and_ln104_19_reg_1267);

assign and_ln104_fu_510_p2 = (xor_ln104_50_fu_504_p2 & icmp_ln86_fu_342_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1101_p55;

assign icmp_ln86_105_fu_348_p2 = (($signed(x_51_val) < $signed(18'd520)) ? 1'b1 : 1'b0);

assign icmp_ln86_106_fu_354_p2 = (($signed(x_32_val) < $signed(18'd542)) ? 1'b1 : 1'b0);

assign icmp_ln86_107_fu_360_p2 = (($signed(x_51_val) < $signed(18'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_108_fu_366_p2 = (($signed(x_42_val) < $signed(18'd343)) ? 1'b1 : 1'b0);

assign icmp_ln86_109_fu_372_p2 = (($signed(x_28_val) < $signed(18'd967)) ? 1'b1 : 1'b0);

assign icmp_ln86_110_fu_378_p2 = (($signed(x_48_val) < $signed(18'd6779)) ? 1'b1 : 1'b0);

assign icmp_ln86_111_fu_384_p2 = (($signed(x_44_val) < $signed(18'd119)) ? 1'b1 : 1'b0);

assign icmp_ln86_112_fu_390_p2 = (($signed(x_25_val) < $signed(18'd365)) ? 1'b1 : 1'b0);

assign icmp_ln86_113_fu_396_p2 = (($signed(x_17_val) < $signed(18'd33)) ? 1'b1 : 1'b0);

assign icmp_ln86_114_fu_402_p2 = (($signed(x_51_val) < $signed(18'd958)) ? 1'b1 : 1'b0);

assign icmp_ln86_115_fu_408_p2 = (($signed(x_22_val) < $signed(18'd92)) ? 1'b1 : 1'b0);

assign icmp_ln86_116_fu_414_p2 = (($signed(x_21_val) < $signed(18'd260)) ? 1'b1 : 1'b0);

assign icmp_ln86_117_fu_420_p2 = (($signed(x_27_val) < $signed(18'd100300)) ? 1'b1 : 1'b0);

assign icmp_ln86_118_fu_426_p2 = (($signed(x_21_val) < $signed(18'd218)) ? 1'b1 : 1'b0);

assign icmp_ln86_119_fu_432_p2 = (($signed(x_36_val) < $signed(18'd37)) ? 1'b1 : 1'b0);

assign icmp_ln86_120_fu_438_p2 = (($signed(x_19_val) < $signed(18'd51640)) ? 1'b1 : 1'b0);

assign icmp_ln86_121_fu_444_p2 = (($signed(x_22_val) < $signed(18'd156)) ? 1'b1 : 1'b0);

assign icmp_ln86_122_fu_450_p2 = (($signed(x_25_val) < $signed(18'd146)) ? 1'b1 : 1'b0);

assign icmp_ln86_123_fu_456_p2 = (($signed(x_17_val) < $signed(18'd60)) ? 1'b1 : 1'b0);

assign icmp_ln86_124_fu_462_p2 = (($signed(x_1_val) < $signed(18'd250647)) ? 1'b1 : 1'b0);

assign icmp_ln86_125_fu_468_p2 = (($signed(x_46_val) < $signed(18'd314)) ? 1'b1 : 1'b0);

assign icmp_ln86_126_fu_474_p2 = (($signed(x_9_val) < $signed(18'd1083)) ? 1'b1 : 1'b0);

assign icmp_ln86_127_fu_480_p2 = (($signed(x_37_val) < $signed(18'd15)) ? 1'b1 : 1'b0);

assign icmp_ln86_128_fu_486_p2 = (($signed(x_2_val) < $signed(18'd1397)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_342_p2 = (($signed(x_46_val) < $signed(18'd312)) ? 1'b1 : 1'b0);

assign or_ln117_100_fu_708_p2 = (or_ln117_99_fu_690_p2 | and_ln102_112_fu_624_p2);

assign or_ln117_101_fu_722_p2 = (and_ln102_101_fu_534_p2 | and_ln102_100_fu_516_p2);

assign or_ln117_102_fu_736_p2 = (or_ln117_101_fu_722_p2 | and_ln102_113_fu_630_p2);

assign or_ln117_103_fu_750_p2 = (or_ln117_101_fu_722_p2 | and_ln102_106_fu_588_p2);

assign or_ln117_104_fu_768_p2 = (or_ln117_103_fu_750_p2 | and_ln102_114_fu_642_p2);

assign or_ln117_105_fu_782_p2 = (and_ln102_fu_498_p2 | and_ln102_100_fu_516_p2);

assign or_ln117_106_fu_796_p2 = (or_ln117_105_fu_782_p2 | and_ln102_115_fu_648_p2);

assign or_ln117_107_fu_810_p2 = (or_ln117_105_fu_782_p2 | and_ln102_107_fu_600_p2);

assign or_ln117_108_fu_824_p2 = (or_ln117_107_fu_810_p2 | and_ln102_116_fu_660_p2);

assign or_ln117_109_fu_838_p2 = (or_ln117_105_fu_782_p2 | and_ln102_102_fu_552_p2);

assign or_ln117_110_fu_956_p2 = (or_ln117_109_reg_1279 | and_ln102_117_fu_909_p2);

assign or_ln117_111_fu_961_p2 = (or_ln117_109_reg_1279 | and_ln102_108_fu_880_p2);

assign or_ln117_112_fu_977_p2 = (or_ln117_111_fu_961_p2 | and_ln102_118_fu_919_p2);

assign or_ln117_113_fu_860_p2 = (icmp_ln86_fu_342_p2 | and_ln102_100_fu_516_p2);

assign or_ln117_114_fu_999_p2 = (or_ln117_113_reg_1290 | and_ln102_119_fu_924_p2);

assign or_ln117_115_fu_1011_p2 = (or_ln117_113_reg_1290 | and_ln102_109_fu_889_p2);

assign or_ln117_116_fu_1024_p2 = (or_ln117_115_fu_1011_p2 | and_ln102_120_fu_934_p2);

assign or_ln117_117_fu_1038_p2 = (or_ln117_113_reg_1290 | and_ln102_104_fu_866_p2);

assign or_ln117_118_fu_1051_p2 = (or_ln117_117_fu_1038_p2 | and_ln102_121_fu_940_p2);

assign or_ln117_119_fu_1065_p2 = (or_ln117_117_fu_1038_p2 | and_ln102_110_fu_899_p2);

assign or_ln117_120_fu_1079_p2 = (or_ln117_119_fu_1065_p2 | and_ln102_122_fu_950_p2);

assign or_ln117_99_fu_690_p2 = (and_ln102_105_fu_576_p2 | and_ln102_100_fu_516_p2);

assign or_ln117_fu_676_p2 = (and_ln102_111_fu_612_p2 | and_ln102_100_fu_516_p2);

assign select_ln117_103_fu_696_p3 = ((or_ln117_fu_676_p2[0:0] == 1'b1) ? select_ln117_fu_682_p3 : 2'd3);

assign select_ln117_104_fu_714_p3 = ((or_ln117_99_fu_690_p2[0:0] == 1'b1) ? zext_ln117_9_fu_704_p1 : 3'd4);

assign select_ln117_105_fu_728_p3 = ((or_ln117_100_fu_708_p2[0:0] == 1'b1) ? select_ln117_104_fu_714_p3 : 3'd5);

assign select_ln117_106_fu_742_p3 = ((or_ln117_101_fu_722_p2[0:0] == 1'b1) ? select_ln117_105_fu_728_p3 : 3'd6);

assign select_ln117_107_fu_756_p3 = ((or_ln117_102_fu_736_p2[0:0] == 1'b1) ? select_ln117_106_fu_742_p3 : 3'd7);

assign select_ln117_108_fu_774_p3 = ((or_ln117_103_fu_750_p2[0:0] == 1'b1) ? zext_ln117_10_fu_764_p1 : 4'd8);

assign select_ln117_109_fu_788_p3 = ((or_ln117_104_fu_768_p2[0:0] == 1'b1) ? select_ln117_108_fu_774_p3 : 4'd9);

assign select_ln117_110_fu_802_p3 = ((or_ln117_105_fu_782_p2[0:0] == 1'b1) ? select_ln117_109_fu_788_p3 : 4'd10);

assign select_ln117_111_fu_816_p3 = ((or_ln117_106_fu_796_p2[0:0] == 1'b1) ? select_ln117_110_fu_802_p3 : 4'd11);

assign select_ln117_112_fu_830_p3 = ((or_ln117_107_fu_810_p2[0:0] == 1'b1) ? select_ln117_111_fu_816_p3 : 4'd12);

assign select_ln117_113_fu_844_p3 = ((or_ln117_108_fu_824_p2[0:0] == 1'b1) ? select_ln117_112_fu_830_p3 : 4'd13);

assign select_ln117_114_fu_852_p3 = ((or_ln117_109_fu_838_p2[0:0] == 1'b1) ? select_ln117_113_fu_844_p3 : 4'd14);

assign select_ln117_115_fu_966_p3 = ((or_ln117_110_fu_956_p2[0:0] == 1'b1) ? select_ln117_114_reg_1285 : 4'd15);

assign select_ln117_116_fu_983_p3 = ((or_ln117_111_fu_961_p2[0:0] == 1'b1) ? zext_ln117_11_fu_973_p1 : 5'd16);

assign select_ln117_117_fu_991_p3 = ((or_ln117_112_fu_977_p2[0:0] == 1'b1) ? select_ln117_116_fu_983_p3 : 5'd17);

assign select_ln117_118_fu_1004_p3 = ((or_ln117_113_reg_1290[0:0] == 1'b1) ? select_ln117_117_fu_991_p3 : 5'd18);

assign select_ln117_119_fu_1016_p3 = ((or_ln117_114_fu_999_p2[0:0] == 1'b1) ? select_ln117_118_fu_1004_p3 : 5'd19);

assign select_ln117_120_fu_1030_p3 = ((or_ln117_115_fu_1011_p2[0:0] == 1'b1) ? select_ln117_119_fu_1016_p3 : 5'd20);

assign select_ln117_121_fu_1043_p3 = ((or_ln117_116_fu_1024_p2[0:0] == 1'b1) ? select_ln117_120_fu_1030_p3 : 5'd21);

assign select_ln117_122_fu_1057_p3 = ((or_ln117_117_fu_1038_p2[0:0] == 1'b1) ? select_ln117_121_fu_1043_p3 : 5'd22);

assign select_ln117_123_fu_1071_p3 = ((or_ln117_118_fu_1051_p2[0:0] == 1'b1) ? select_ln117_122_fu_1057_p3 : 5'd23);

assign select_ln117_124_fu_1085_p3 = ((or_ln117_119_fu_1065_p2[0:0] == 1'b1) ? select_ln117_123_fu_1071_p3 : 5'd24);

assign select_ln117_fu_682_p3 = ((and_ln102_100_fu_516_p2[0:0] == 1'b1) ? zext_ln117_fu_672_p1 : 2'd2);

assign xor_ln104_50_fu_504_p2 = (icmp_ln86_105_fu_348_p2 ^ 1'd1);

assign xor_ln104_51_fu_522_p2 = (icmp_ln86_106_fu_354_p2 ^ 1'd1);

assign xor_ln104_52_fu_540_p2 = (icmp_ln86_107_fu_360_p2 ^ 1'd1);

assign xor_ln104_53_fu_558_p2 = (icmp_ln86_108_fu_366_p2 ^ 1'd1);

assign xor_ln104_54_fu_870_p2 = (icmp_ln86_110_reg_1213 ^ 1'd1);

assign xor_ln104_55_fu_582_p2 = (icmp_ln86_111_fu_384_p2 ^ 1'd1);

assign xor_ln104_56_fu_594_p2 = (icmp_ln86_112_fu_390_p2 ^ 1'd1);

assign xor_ln104_57_fu_606_p2 = (icmp_ln86_113_fu_396_p2 ^ 1'd1);

assign xor_ln104_58_fu_884_p2 = (icmp_ln86_114_reg_1219 ^ 1'd1);

assign xor_ln104_59_fu_894_p2 = (icmp_ln86_115_reg_1225 ^ 1'd1);

assign xor_ln104_60_fu_904_p2 = (icmp_ln86_116_reg_1231 ^ 1'd1);

assign xor_ln104_fu_492_p2 = (icmp_ln86_fu_342_p2 ^ 1'd1);

assign xor_ln117_fu_666_p2 = (1'd1 ^ and_ln102_103_fu_570_p2);

assign zext_ln117_10_fu_764_p1 = select_ln117_107_fu_756_p3;

assign zext_ln117_11_fu_973_p1 = select_ln117_115_fu_966_p3;

assign zext_ln117_9_fu_704_p1 = select_ln117_103_fu_696_p3;

assign zext_ln117_fu_672_p1 = xor_ln117_fu_666_p2;

endmodule //my_prj_decision_function_4
