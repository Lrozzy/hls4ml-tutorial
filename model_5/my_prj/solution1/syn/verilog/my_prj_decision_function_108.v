// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_108 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_9_val,
        x_11_val,
        x_14_val,
        x_15_val,
        x_19_val,
        x_25_val,
        x_32_val,
        x_39_val,
        x_48_val,
        x_50_val,
        x_51_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_9_val;
input  [17:0] x_11_val;
input  [17:0] x_14_val;
input  [17:0] x_15_val;
input  [17:0] x_19_val;
input  [17:0] x_25_val;
input  [17:0] x_32_val;
input  [17:0] x_39_val;
input  [17:0] x_48_val;
input  [17:0] x_50_val;
input  [17:0] x_51_val;
input  [17:0] x_52_val;
output  [10:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
reg   [0:0] tmp_32_reg_849;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_1813_fu_352_p2;
reg   [0:0] icmp_ln86_1813_reg_855;
wire   [0:0] icmp_ln86_1814_fu_358_p2;
reg   [0:0] icmp_ln86_1814_reg_860;
wire   [0:0] and_ln104_342_fu_442_p2;
reg   [0:0] and_ln104_342_reg_865;
wire   [0:0] or_ln117_1645_fu_672_p2;
reg   [0:0] or_ln117_1645_reg_872;
wire   [3:0] select_ln117_1760_fu_686_p3;
reg   [3:0] select_ln117_1760_reg_879;
wire    ap_block_pp0_stage0;
wire   [15:0] tmp_33_fu_318_p4;
wire   [0:0] icmp_ln86_fu_256_p2;
wire   [0:0] icmp_ln86_1801_fu_262_p2;
wire   [0:0] icmp_ln86_1802_fu_268_p2;
wire   [0:0] xor_ln104_fu_364_p2;
wire   [0:0] xor_ln104_862_fu_388_p2;
wire   [0:0] icmp_ln86_1803_fu_274_p2;
wire   [0:0] xor_ln104_861_fu_376_p2;
wire   [0:0] and_ln102_2022_fu_400_p2;
wire   [0:0] icmp_ln86_1804_fu_280_p2;
wire   [0:0] and_ln102_2021_fu_382_p2;
wire   [0:0] xor_ln104_863_fu_418_p2;
wire   [0:0] icmp_ln86_1805_fu_286_p2;
wire   [0:0] and_ln104_fu_394_p2;
wire   [0:0] xor_ln104_864_fu_436_p2;
wire   [0:0] icmp_ln86_1806_fu_292_p2;
wire   [0:0] and_ln102_2024_fu_412_p2;
wire   [0:0] icmp_ln86_1807_fu_298_p2;
wire   [0:0] and_ln104_341_fu_424_p2;
wire   [0:0] icmp_ln86_1808_fu_304_p2;
wire   [0:0] and_ln102_2025_fu_430_p2;
wire   [0:0] icmp_ln86_1809_fu_328_p2;
wire   [0:0] and_ln102_2026_fu_448_p2;
wire   [0:0] icmp_ln86_1810_fu_334_p2;
wire   [0:0] xor_ln104_865_fu_454_p2;
wire   [0:0] and_ln102_2031_fu_484_p2;
wire   [0:0] icmp_ln86_1811_fu_340_p2;
wire   [0:0] and_ln102_2027_fu_460_p2;
wire   [0:0] icmp_ln86_1812_fu_346_p2;
wire   [0:0] xor_ln104_866_fu_466_p2;
wire   [0:0] and_ln102_2034_fu_502_p2;
wire   [0:0] and_ln102_fu_370_p2;
wire   [0:0] and_ln102_2023_fu_406_p2;
wire   [0:0] xor_ln117_fu_520_p2;
wire   [0:0] or_ln117_fu_514_p2;
wire   [1:0] zext_ln117_fu_526_p1;
wire   [0:0] and_ln102_2028_fu_472_p2;
wire   [1:0] select_ln117_fu_530_p3;
wire   [1:0] select_ln117_1750_fu_544_p3;
wire   [0:0] or_ln117_1636_fu_538_p2;
wire   [2:0] zext_ln117_195_fu_552_p1;
wire   [0:0] or_ln117_1637_fu_556_p2;
wire   [0:0] and_ln102_2030_fu_478_p2;
wire   [2:0] select_ln117_1751_fu_562_p3;
wire   [0:0] or_ln117_1638_fu_570_p2;
wire   [2:0] select_ln117_1752_fu_576_p3;
wire   [0:0] or_ln117_1639_fu_584_p2;
wire   [0:0] and_ln102_2032_fu_490_p2;
wire   [2:0] select_ln117_1753_fu_590_p3;
wire   [2:0] select_ln117_1754_fu_604_p3;
wire   [0:0] or_ln117_1640_fu_598_p2;
wire   [3:0] zext_ln117_196_fu_612_p1;
wire   [0:0] or_ln117_1641_fu_616_p2;
wire   [0:0] and_ln102_2033_fu_496_p2;
wire   [3:0] select_ln117_1755_fu_622_p3;
wire   [0:0] or_ln117_1642_fu_630_p2;
wire   [3:0] select_ln117_1756_fu_636_p3;
wire   [0:0] or_ln117_1643_fu_644_p2;
wire   [0:0] and_ln102_2035_fu_508_p2;
wire   [3:0] select_ln117_1757_fu_650_p3;
wire   [0:0] or_ln117_1644_fu_658_p2;
wire   [3:0] select_ln117_1758_fu_664_p3;
wire   [3:0] select_ln117_1759_fu_678_p3;
wire   [0:0] and_ln102_2029_fu_694_p2;
wire   [0:0] xor_ln104_867_fu_698_p2;
wire   [0:0] and_ln102_2037_fu_708_p2;
wire   [0:0] and_ln102_2036_fu_703_p2;
wire   [0:0] or_ln117_1646_fu_718_p2;
wire   [0:0] or_ln117_1647_fu_723_p2;
wire   [0:0] and_ln102_2038_fu_713_p2;
wire   [3:0] select_ln117_1761_fu_728_p3;
wire   [3:0] select_ln117_1762_fu_741_p3;
wire   [0:0] or_ln117_1648_fu_735_p2;
wire   [4:0] zext_ln117_197_fu_749_p1;
wire   [10:0] tmp_fu_765_p35;
wire   [4:0] tmp_fu_765_p36;
wire   [0:0] or_ln117_1649_fu_753_p2;
wire   [10:0] tmp_fu_765_p37;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] tmp_fu_765_p1;
wire   [4:0] tmp_fu_765_p3;
wire   [4:0] tmp_fu_765_p5;
wire   [4:0] tmp_fu_765_p7;
wire   [4:0] tmp_fu_765_p9;
wire   [4:0] tmp_fu_765_p11;
wire   [4:0] tmp_fu_765_p13;
wire   [4:0] tmp_fu_765_p15;
wire   [4:0] tmp_fu_765_p17;
wire   [4:0] tmp_fu_765_p19;
wire   [4:0] tmp_fu_765_p21;
wire   [4:0] tmp_fu_765_p23;
wire   [4:0] tmp_fu_765_p25;
wire   [4:0] tmp_fu_765_p27;
wire   [4:0] tmp_fu_765_p29;
wire   [4:0] tmp_fu_765_p31;
wire  signed [4:0] tmp_fu_765_p33;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_35_5_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 11 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 11 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 11 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 11 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 11 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 11 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 11 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 11 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 11 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 11 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 11 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 11 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 11 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 11 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 11 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 11 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 11 ),
    .def_WIDTH( 11 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 11 ))
sparsemux_35_5_11_1_1_U2363(
    .din0(11'd1549),
    .din1(11'd407),
    .din2(11'd1704),
    .din3(11'd679),
    .din4(11'd1966),
    .din5(11'd2035),
    .din6(11'd117),
    .din7(11'd1763),
    .din8(11'd2008),
    .din9(11'd202),
    .din10(11'd1999),
    .din11(11'd10),
    .din12(11'd1832),
    .din13(11'd1684),
    .din14(11'd701),
    .din15(11'd1550),
    .din16(11'd1754),
    .def(tmp_fu_765_p35),
    .sel(tmp_fu_765_p36),
    .dout(tmp_fu_765_p37)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln104_342_reg_865 <= and_ln104_342_fu_442_p2;
        icmp_ln86_1813_reg_855 <= icmp_ln86_1813_fu_352_p2;
        icmp_ln86_1814_reg_860 <= icmp_ln86_1814_fu_358_p2;
        or_ln117_1645_reg_872 <= or_ln117_1645_fu_672_p2;
        select_ln117_1760_reg_879 <= select_ln117_1760_fu_686_p3;
        tmp_32_reg_849 <= x_51_val[32'd17];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln102_2021_fu_382_p2 = (xor_ln104_fu_364_p2 & icmp_ln86_1802_fu_268_p2);

assign and_ln102_2022_fu_400_p2 = (xor_ln104_861_fu_376_p2 & icmp_ln86_1803_fu_274_p2);

assign and_ln102_2023_fu_406_p2 = (icmp_ln86_fu_256_p2 & and_ln102_2022_fu_400_p2);

assign and_ln102_2024_fu_412_p2 = (icmp_ln86_1804_fu_280_p2 & and_ln102_2021_fu_382_p2);

assign and_ln102_2025_fu_430_p2 = (icmp_ln86_1805_fu_286_p2 & and_ln104_fu_394_p2);

assign and_ln102_2026_fu_448_p2 = (icmp_ln86_1806_fu_292_p2 & and_ln102_2024_fu_412_p2);

assign and_ln102_2027_fu_460_p2 = (icmp_ln86_1807_fu_298_p2 & and_ln104_341_fu_424_p2);

assign and_ln102_2028_fu_472_p2 = (icmp_ln86_1808_fu_304_p2 & and_ln102_2025_fu_430_p2);

assign and_ln102_2029_fu_694_p2 = (tmp_32_reg_849 & and_ln104_342_reg_865);

assign and_ln102_2030_fu_478_p2 = (icmp_ln86_1809_fu_328_p2 & and_ln102_2026_fu_448_p2);

assign and_ln102_2031_fu_484_p2 = (xor_ln104_865_fu_454_p2 & icmp_ln86_1810_fu_334_p2);

assign and_ln102_2032_fu_490_p2 = (and_ln102_2031_fu_484_p2 & and_ln102_2024_fu_412_p2);

assign and_ln102_2033_fu_496_p2 = (icmp_ln86_1811_fu_340_p2 & and_ln102_2027_fu_460_p2);

assign and_ln102_2034_fu_502_p2 = (xor_ln104_866_fu_466_p2 & icmp_ln86_1812_fu_346_p2);

assign and_ln102_2035_fu_508_p2 = (and_ln104_341_fu_424_p2 & and_ln102_2034_fu_502_p2);

assign and_ln102_2036_fu_703_p2 = (icmp_ln86_1813_reg_855 & and_ln102_2029_fu_694_p2);

assign and_ln102_2037_fu_708_p2 = (xor_ln104_867_fu_698_p2 & icmp_ln86_1814_reg_860);

assign and_ln102_2038_fu_713_p2 = (and_ln104_342_reg_865 & and_ln102_2037_fu_708_p2);

assign and_ln102_fu_370_p2 = (icmp_ln86_fu_256_p2 & icmp_ln86_1801_fu_262_p2);

assign and_ln104_341_fu_424_p2 = (xor_ln104_863_fu_418_p2 & and_ln102_2021_fu_382_p2);

assign and_ln104_342_fu_442_p2 = (xor_ln104_864_fu_436_p2 & and_ln104_fu_394_p2);

assign and_ln104_fu_394_p2 = (xor_ln104_fu_364_p2 & xor_ln104_862_fu_388_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((or_ln117_1649_fu_753_p2[0:0] == 1'b1) ? tmp_fu_765_p37 : 11'd0);

assign icmp_ln86_1801_fu_262_p2 = (($signed(x_32_val) < $signed(18'd875)) ? 1'b1 : 1'b0);

assign icmp_ln86_1802_fu_268_p2 = (($signed(x_52_val) < $signed(18'd102913)) ? 1'b1 : 1'b0);

assign icmp_ln86_1803_fu_274_p2 = (($signed(x_39_val) < $signed(18'd1002)) ? 1'b1 : 1'b0);

assign icmp_ln86_1804_fu_280_p2 = (($signed(x_14_val) < $signed(18'd29)) ? 1'b1 : 1'b0);

assign icmp_ln86_1805_fu_286_p2 = (($signed(x_9_val) < $signed(18'd1792)) ? 1'b1 : 1'b0);

assign icmp_ln86_1806_fu_292_p2 = (($signed(x_50_val) < $signed(18'd75125)) ? 1'b1 : 1'b0);

assign icmp_ln86_1807_fu_298_p2 = (($signed(x_48_val) < $signed(18'd24365)) ? 1'b1 : 1'b0);

assign icmp_ln86_1808_fu_304_p2 = (($signed(x_11_val) < $signed(18'd510)) ? 1'b1 : 1'b0);

assign icmp_ln86_1809_fu_328_p2 = (($signed(tmp_33_fu_318_p4) < $signed(16'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_1810_fu_334_p2 = (($signed(x_1_val) < $signed(18'd242718)) ? 1'b1 : 1'b0);

assign icmp_ln86_1811_fu_340_p2 = (($signed(x_50_val) < $signed(18'd88625)) ? 1'b1 : 1'b0);

assign icmp_ln86_1812_fu_346_p2 = (($signed(x_19_val) < $signed(18'd7648)) ? 1'b1 : 1'b0);

assign icmp_ln86_1813_fu_352_p2 = (($signed(x_25_val) < $signed(18'd313)) ? 1'b1 : 1'b0);

assign icmp_ln86_1814_fu_358_p2 = (($signed(x_51_val) < $signed(18'd146)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_256_p2 = (($signed(x_1_val) < $signed(18'd56919)) ? 1'b1 : 1'b0);

assign or_ln117_1636_fu_538_p2 = (icmp_ln86_fu_256_p2 | and_ln102_2028_fu_472_p2);

assign or_ln117_1637_fu_556_p2 = (icmp_ln86_fu_256_p2 | and_ln102_2025_fu_430_p2);

assign or_ln117_1638_fu_570_p2 = (or_ln117_1637_fu_556_p2 | and_ln102_2030_fu_478_p2);

assign or_ln117_1639_fu_584_p2 = (or_ln117_1637_fu_556_p2 | and_ln102_2026_fu_448_p2);

assign or_ln117_1640_fu_598_p2 = (or_ln117_1639_fu_584_p2 | and_ln102_2032_fu_490_p2);

assign or_ln117_1641_fu_616_p2 = (or_ln117_1637_fu_556_p2 | and_ln102_2024_fu_412_p2);

assign or_ln117_1642_fu_630_p2 = (or_ln117_1641_fu_616_p2 | and_ln102_2033_fu_496_p2);

assign or_ln117_1643_fu_644_p2 = (or_ln117_1641_fu_616_p2 | and_ln102_2027_fu_460_p2);

assign or_ln117_1644_fu_658_p2 = (or_ln117_1643_fu_644_p2 | and_ln102_2035_fu_508_p2);

assign or_ln117_1645_fu_672_p2 = (or_ln117_1637_fu_556_p2 | and_ln102_2021_fu_382_p2);

assign or_ln117_1646_fu_718_p2 = (or_ln117_1645_reg_872 | and_ln102_2036_fu_703_p2);

assign or_ln117_1647_fu_723_p2 = (or_ln117_1645_reg_872 | and_ln102_2029_fu_694_p2);

assign or_ln117_1648_fu_735_p2 = (or_ln117_1647_fu_723_p2 | and_ln102_2038_fu_713_p2);

assign or_ln117_1649_fu_753_p2 = (or_ln117_1645_reg_872 | and_ln104_342_reg_865);

assign or_ln117_fu_514_p2 = (and_ln102_fu_370_p2 | and_ln102_2023_fu_406_p2);

assign select_ln117_1750_fu_544_p3 = ((icmp_ln86_fu_256_p2[0:0] == 1'b1) ? select_ln117_fu_530_p3 : 2'd3);

assign select_ln117_1751_fu_562_p3 = ((or_ln117_1636_fu_538_p2[0:0] == 1'b1) ? zext_ln117_195_fu_552_p1 : 3'd4);

assign select_ln117_1752_fu_576_p3 = ((or_ln117_1637_fu_556_p2[0:0] == 1'b1) ? select_ln117_1751_fu_562_p3 : 3'd5);

assign select_ln117_1753_fu_590_p3 = ((or_ln117_1638_fu_570_p2[0:0] == 1'b1) ? select_ln117_1752_fu_576_p3 : 3'd6);

assign select_ln117_1754_fu_604_p3 = ((or_ln117_1639_fu_584_p2[0:0] == 1'b1) ? select_ln117_1753_fu_590_p3 : 3'd7);

assign select_ln117_1755_fu_622_p3 = ((or_ln117_1640_fu_598_p2[0:0] == 1'b1) ? zext_ln117_196_fu_612_p1 : 4'd8);

assign select_ln117_1756_fu_636_p3 = ((or_ln117_1641_fu_616_p2[0:0] == 1'b1) ? select_ln117_1755_fu_622_p3 : 4'd9);

assign select_ln117_1757_fu_650_p3 = ((or_ln117_1642_fu_630_p2[0:0] == 1'b1) ? select_ln117_1756_fu_636_p3 : 4'd10);

assign select_ln117_1758_fu_664_p3 = ((or_ln117_1643_fu_644_p2[0:0] == 1'b1) ? select_ln117_1757_fu_650_p3 : 4'd11);

assign select_ln117_1759_fu_678_p3 = ((or_ln117_1644_fu_658_p2[0:0] == 1'b1) ? select_ln117_1758_fu_664_p3 : 4'd12);

assign select_ln117_1760_fu_686_p3 = ((or_ln117_1645_fu_672_p2[0:0] == 1'b1) ? select_ln117_1759_fu_678_p3 : 4'd13);

assign select_ln117_1761_fu_728_p3 = ((or_ln117_1646_fu_718_p2[0:0] == 1'b1) ? select_ln117_1760_reg_879 : 4'd14);

assign select_ln117_1762_fu_741_p3 = ((or_ln117_1647_fu_723_p2[0:0] == 1'b1) ? select_ln117_1761_fu_728_p3 : 4'd15);

assign select_ln117_fu_530_p3 = ((or_ln117_fu_514_p2[0:0] == 1'b1) ? zext_ln117_fu_526_p1 : 2'd2);

assign tmp_33_fu_318_p4 = {{x_15_val[17:2]}};

assign tmp_fu_765_p35 = 'bx;

assign tmp_fu_765_p36 = ((or_ln117_1648_fu_735_p2[0:0] == 1'b1) ? zext_ln117_197_fu_749_p1 : 5'd16);

assign xor_ln104_861_fu_376_p2 = (icmp_ln86_1801_fu_262_p2 ^ 1'd1);

assign xor_ln104_862_fu_388_p2 = (icmp_ln86_1802_fu_268_p2 ^ 1'd1);

assign xor_ln104_863_fu_418_p2 = (icmp_ln86_1804_fu_280_p2 ^ 1'd1);

assign xor_ln104_864_fu_436_p2 = (icmp_ln86_1805_fu_286_p2 ^ 1'd1);

assign xor_ln104_865_fu_454_p2 = (icmp_ln86_1806_fu_292_p2 ^ 1'd1);

assign xor_ln104_866_fu_466_p2 = (icmp_ln86_1807_fu_298_p2 ^ 1'd1);

assign xor_ln104_867_fu_698_p2 = (tmp_32_reg_849 ^ 1'd1);

assign xor_ln104_fu_364_p2 = (icmp_ln86_fu_256_p2 ^ 1'd1);

assign xor_ln117_fu_520_p2 = (1'd1 ^ and_ln102_fu_370_p2);

assign zext_ln117_195_fu_552_p1 = select_ln117_1750_fu_544_p3;

assign zext_ln117_196_fu_612_p1 = select_ln117_1754_fu_604_p3;

assign zext_ln117_197_fu_749_p1 = select_ln117_1762_fu_741_p3;

assign zext_ln117_fu_526_p1 = xor_ln117_fu_520_p2;

endmodule //my_prj_decision_function_108
