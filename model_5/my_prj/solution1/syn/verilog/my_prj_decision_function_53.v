// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_53 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_7_val,
        x_9_val,
        x_10_val,
        x_15_val,
        x_19_val,
        x_23_val,
        x_24_val,
        x_26_val,
        x_27_val,
        x_33_val,
        x_34_val,
        x_38_val,
        x_42_val,
        x_43_val,
        x_47_val,
        x_48_val,
        x_50_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_7_val;
input  [17:0] x_9_val;
input  [17:0] x_10_val;
input  [17:0] x_15_val;
input  [17:0] x_19_val;
input  [17:0] x_23_val;
input  [17:0] x_24_val;
input  [17:0] x_26_val;
input  [17:0] x_27_val;
input  [17:0] x_33_val;
input  [17:0] x_34_val;
input  [17:0] x_38_val;
input  [17:0] x_42_val;
input  [17:0] x_43_val;
input  [17:0] x_47_val;
input  [17:0] x_48_val;
input  [17:0] x_50_val;
input  [17:0] x_52_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_388_p2;
reg   [0:0] icmp_ln86_reg_1426;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_1327_fu_400_p2;
reg   [0:0] icmp_ln86_1327_reg_1435;
wire   [0:0] icmp_ln86_1330_fu_418_p2;
reg   [0:0] icmp_ln86_1330_reg_1441;
wire   [0:0] icmp_ln86_1331_fu_424_p2;
reg   [0:0] icmp_ln86_1331_reg_1447;
wire   [0:0] icmp_ln86_1336_fu_454_p2;
reg   [0:0] icmp_ln86_1336_reg_1453;
wire   [0:0] icmp_ln86_1337_fu_460_p2;
reg   [0:0] icmp_ln86_1337_reg_1459;
wire   [0:0] icmp_ln86_1338_fu_466_p2;
reg   [0:0] icmp_ln86_1338_reg_1465;
wire   [0:0] icmp_ln86_1339_fu_472_p2;
reg   [0:0] icmp_ln86_1339_reg_1471;
wire   [0:0] icmp_ln86_1347_fu_520_p2;
reg   [0:0] icmp_ln86_1347_reg_1477;
wire   [0:0] icmp_ln86_1348_fu_526_p2;
reg   [0:0] icmp_ln86_1348_reg_1482;
wire   [0:0] icmp_ln86_1349_fu_532_p2;
reg   [0:0] icmp_ln86_1349_reg_1487;
wire   [0:0] icmp_ln86_1350_fu_548_p2;
reg   [0:0] icmp_ln86_1350_reg_1492;
wire   [0:0] icmp_ln86_1351_fu_554_p2;
reg   [0:0] icmp_ln86_1351_reg_1497;
wire   [0:0] icmp_ln86_1352_fu_560_p2;
reg   [0:0] icmp_ln86_1352_reg_1502;
wire   [0:0] icmp_ln86_1353_fu_566_p2;
reg   [0:0] icmp_ln86_1353_reg_1507;
wire   [0:0] icmp_ln86_1354_fu_572_p2;
reg   [0:0] icmp_ln86_1354_reg_1512;
wire   [4:0] select_ln117_1295_fu_920_p3;
reg   [4:0] select_ln117_1295_reg_1517;
wire    ap_block_pp0_stage0;
wire   [13:0] tmp_fu_538_p4;
wire   [0:0] icmp_ln86_1326_fu_394_p2;
wire   [0:0] xor_ln104_628_fu_584_p2;
wire   [0:0] icmp_ln86_1328_fu_406_p2;
wire   [0:0] and_ln102_fu_578_p2;
wire   [0:0] icmp_ln86_1329_fu_412_p2;
wire   [0:0] and_ln104_fu_590_p2;
wire   [0:0] xor_ln104_631_fu_614_p2;
wire   [0:0] icmp_ln86_1332_fu_430_p2;
wire   [0:0] and_ln102_1360_fu_596_p2;
wire   [0:0] icmp_ln86_1333_fu_436_p2;
wire   [0:0] xor_ln104_630_fu_602_p2;
wire   [0:0] and_ln102_1387_fu_638_p2;
wire   [0:0] icmp_ln86_1334_fu_442_p2;
wire   [0:0] and_ln102_1361_fu_608_p2;
wire   [0:0] icmp_ln86_1335_fu_448_p2;
wire   [0:0] and_ln104_241_fu_620_p2;
wire   [0:0] icmp_ln86_1340_fu_478_p2;
wire   [0:0] and_ln102_1364_fu_626_p2;
wire   [0:0] icmp_ln86_1341_fu_484_p2;
wire   [0:0] xor_ln104_634_fu_632_p2;
wire   [0:0] and_ln102_1388_fu_680_p2;
wire   [0:0] icmp_ln86_1342_fu_490_p2;
wire   [0:0] and_ln102_1365_fu_644_p2;
wire   [0:0] icmp_ln86_1343_fu_496_p2;
wire   [0:0] and_ln102_1366_fu_650_p2;
wire   [0:0] icmp_ln86_1344_fu_502_p2;
wire   [0:0] xor_ln104_635_fu_656_p2;
wire   [0:0] and_ln102_1389_fu_704_p2;
wire   [0:0] icmp_ln86_1345_fu_508_p2;
wire   [0:0] and_ln102_1367_fu_662_p2;
wire   [0:0] icmp_ln86_1346_fu_514_p2;
wire   [0:0] xor_ln104_636_fu_668_p2;
wire   [0:0] and_ln102_1390_fu_722_p2;
wire   [0:0] and_ln102_1372_fu_674_p2;
wire   [0:0] xor_ln117_fu_734_p2;
wire   [0:0] and_ln102_1373_fu_686_p2;
wire   [1:0] zext_ln117_fu_740_p1;
wire   [0:0] or_ln117_fu_744_p2;
wire   [1:0] select_ln117_fu_750_p3;
wire   [1:0] select_ln117_1283_fu_758_p3;
wire   [0:0] and_ln102_1374_fu_692_p2;
wire   [2:0] zext_ln117_139_fu_766_p1;
wire   [0:0] or_ln117_1173_fu_770_p2;
wire   [2:0] select_ln117_1284_fu_776_p3;
wire   [0:0] or_ln117_1174_fu_784_p2;
wire   [2:0] select_ln117_1285_fu_790_p3;
wire   [2:0] select_ln117_1286_fu_798_p3;
wire   [0:0] and_ln102_1375_fu_698_p2;
wire   [3:0] zext_ln117_140_fu_806_p1;
wire   [0:0] or_ln117_1175_fu_810_p2;
wire   [3:0] select_ln117_1287_fu_816_p3;
wire   [0:0] or_ln117_1176_fu_824_p2;
wire   [0:0] and_ln102_1376_fu_710_p2;
wire   [3:0] select_ln117_1288_fu_830_p3;
wire   [0:0] or_ln117_1177_fu_838_p2;
wire   [3:0] select_ln117_1289_fu_844_p3;
wire   [0:0] or_ln117_1178_fu_852_p2;
wire   [0:0] and_ln102_1377_fu_716_p2;
wire   [3:0] select_ln117_1290_fu_858_p3;
wire   [0:0] or_ln117_1179_fu_866_p2;
wire   [3:0] select_ln117_1291_fu_872_p3;
wire   [0:0] or_ln117_1180_fu_880_p2;
wire   [0:0] and_ln102_1378_fu_728_p2;
wire   [3:0] select_ln117_1292_fu_886_p3;
wire   [0:0] or_ln117_1181_fu_894_p2;
wire   [3:0] select_ln117_1293_fu_900_p3;
wire   [3:0] select_ln117_1294_fu_908_p3;
wire   [4:0] zext_ln117_141_fu_916_p1;
wire   [0:0] xor_ln104_fu_928_p2;
wire   [0:0] xor_ln104_629_fu_938_p2;
wire   [0:0] and_ln102_1359_fu_933_p2;
wire   [0:0] xor_ln104_632_fu_954_p2;
wire   [0:0] and_ln104_240_fu_943_p2;
wire   [0:0] xor_ln104_633_fu_970_p2;
wire   [0:0] and_ln102_1362_fu_949_p2;
wire   [0:0] and_ln104_242_fu_959_p2;
wire   [0:0] and_ln102_1363_fu_965_p2;
wire   [0:0] and_ln104_243_fu_975_p2;
wire   [0:0] and_ln102_1368_fu_981_p2;
wire   [0:0] xor_ln104_637_fu_986_p2;
wire   [0:0] and_ln102_1391_fu_1026_p2;
wire   [0:0] and_ln102_1369_fu_991_p2;
wire   [0:0] xor_ln104_638_fu_996_p2;
wire   [0:0] and_ln102_1392_fu_1042_p2;
wire   [0:0] and_ln102_1370_fu_1001_p2;
wire   [0:0] xor_ln104_639_fu_1006_p2;
wire   [0:0] and_ln102_1393_fu_1058_p2;
wire   [0:0] and_ln102_1371_fu_1011_p2;
wire   [0:0] xor_ln104_640_fu_1016_p2;
wire   [0:0] and_ln102_1394_fu_1074_p2;
wire   [0:0] and_ln102_1379_fu_1021_p2;
wire   [0:0] or_ln117_1182_fu_1085_p2;
wire   [0:0] or_ln117_1183_fu_1090_p2;
wire   [0:0] and_ln102_1380_fu_1031_p2;
wire   [4:0] select_ln117_1296_fu_1095_p3;
wire   [0:0] or_ln117_1184_fu_1102_p2;
wire   [4:0] select_ln117_1297_fu_1108_p3;
wire   [0:0] or_ln117_1185_fu_1116_p2;
wire   [0:0] and_ln102_1381_fu_1037_p2;
wire   [4:0] select_ln117_1298_fu_1121_p3;
wire   [0:0] or_ln117_1186_fu_1129_p2;
wire   [4:0] select_ln117_1299_fu_1135_p3;
wire   [0:0] or_ln117_1187_fu_1143_p2;
wire   [0:0] and_ln102_1382_fu_1047_p2;
wire   [4:0] select_ln117_1300_fu_1149_p3;
wire   [0:0] or_ln117_1188_fu_1157_p2;
wire   [4:0] select_ln117_1301_fu_1163_p3;
wire   [0:0] or_ln117_1189_fu_1171_p2;
wire   [0:0] and_ln102_1383_fu_1053_p2;
wire   [4:0] select_ln117_1302_fu_1176_p3;
wire   [0:0] or_ln117_1190_fu_1184_p2;
wire   [4:0] select_ln117_1303_fu_1190_p3;
wire   [0:0] or_ln117_1191_fu_1198_p2;
wire   [0:0] and_ln102_1384_fu_1063_p2;
wire   [4:0] select_ln117_1304_fu_1204_p3;
wire   [0:0] or_ln117_1192_fu_1212_p2;
wire   [4:0] select_ln117_1305_fu_1218_p3;
wire   [0:0] or_ln117_1193_fu_1226_p2;
wire   [0:0] and_ln102_1385_fu_1069_p2;
wire   [4:0] select_ln117_1306_fu_1232_p3;
wire   [0:0] or_ln117_1194_fu_1240_p2;
wire   [4:0] select_ln117_1307_fu_1246_p3;
wire   [0:0] or_ln117_1195_fu_1254_p2;
wire   [0:0] and_ln102_1386_fu_1079_p2;
wire   [4:0] select_ln117_1308_fu_1260_p3;
wire   [0:0] or_ln117_1196_fu_1268_p2;
wire   [4:0] select_ln117_1309_fu_1274_p3;
wire   [11:0] agg_result_fu_1290_p65;
wire   [4:0] agg_result_fu_1290_p66;
wire   [11:0] agg_result_fu_1290_p67;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1290_p1;
wire   [4:0] agg_result_fu_1290_p3;
wire   [4:0] agg_result_fu_1290_p5;
wire   [4:0] agg_result_fu_1290_p7;
wire   [4:0] agg_result_fu_1290_p9;
wire   [4:0] agg_result_fu_1290_p11;
wire   [4:0] agg_result_fu_1290_p13;
wire   [4:0] agg_result_fu_1290_p15;
wire   [4:0] agg_result_fu_1290_p17;
wire   [4:0] agg_result_fu_1290_p19;
wire   [4:0] agg_result_fu_1290_p21;
wire   [4:0] agg_result_fu_1290_p23;
wire   [4:0] agg_result_fu_1290_p25;
wire   [4:0] agg_result_fu_1290_p27;
wire   [4:0] agg_result_fu_1290_p29;
wire   [4:0] agg_result_fu_1290_p31;
wire  signed [4:0] agg_result_fu_1290_p33;
wire  signed [4:0] agg_result_fu_1290_p35;
wire  signed [4:0] agg_result_fu_1290_p37;
wire  signed [4:0] agg_result_fu_1290_p39;
wire  signed [4:0] agg_result_fu_1290_p41;
wire  signed [4:0] agg_result_fu_1290_p43;
wire  signed [4:0] agg_result_fu_1290_p45;
wire  signed [4:0] agg_result_fu_1290_p47;
wire  signed [4:0] agg_result_fu_1290_p49;
wire  signed [4:0] agg_result_fu_1290_p51;
wire  signed [4:0] agg_result_fu_1290_p53;
wire  signed [4:0] agg_result_fu_1290_p55;
wire  signed [4:0] agg_result_fu_1290_p57;
wire  signed [4:0] agg_result_fu_1290_p59;
wire  signed [4:0] agg_result_fu_1290_p61;
wire  signed [4:0] agg_result_fu_1290_p63;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_65_5_12_1_1_x20 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 12 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 12 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 12 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 12 ),
    .CASE31( 5'h1F ),
    .din31_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_65_5_12_1_1_x20_U1046(
    .din0(12'd50),
    .din1(12'd1689),
    .din2(12'd3847),
    .din3(12'd513),
    .din4(12'd553),
    .din5(12'd3885),
    .din6(12'd480),
    .din7(12'd1884),
    .din8(12'd3687),
    .din9(12'd221),
    .din10(12'd75),
    .din11(12'd4025),
    .din12(12'd6),
    .din13(12'd150),
    .din14(12'd184),
    .din15(12'd4084),
    .din16(12'd3831),
    .din17(12'd537),
    .din18(12'd1421),
    .din19(12'd4073),
    .din20(12'd3735),
    .din21(12'd60),
    .din22(12'd273),
    .din23(12'd3961),
    .din24(12'd3564),
    .din25(12'd244),
    .din26(12'd231),
    .din27(12'd1576),
    .din28(12'd297),
    .din29(12'd46),
    .din30(12'd3989),
    .din31(12'd4095),
    .def(agg_result_fu_1290_p65),
    .sel(agg_result_fu_1290_p66),
    .dout(agg_result_fu_1290_p67)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_1327_reg_1435 <= icmp_ln86_1327_fu_400_p2;
        icmp_ln86_1330_reg_1441 <= icmp_ln86_1330_fu_418_p2;
        icmp_ln86_1331_reg_1447 <= icmp_ln86_1331_fu_424_p2;
        icmp_ln86_1336_reg_1453 <= icmp_ln86_1336_fu_454_p2;
        icmp_ln86_1337_reg_1459 <= icmp_ln86_1337_fu_460_p2;
        icmp_ln86_1338_reg_1465 <= icmp_ln86_1338_fu_466_p2;
        icmp_ln86_1339_reg_1471 <= icmp_ln86_1339_fu_472_p2;
        icmp_ln86_1347_reg_1477 <= icmp_ln86_1347_fu_520_p2;
        icmp_ln86_1348_reg_1482 <= icmp_ln86_1348_fu_526_p2;
        icmp_ln86_1349_reg_1487 <= icmp_ln86_1349_fu_532_p2;
        icmp_ln86_1350_reg_1492 <= icmp_ln86_1350_fu_548_p2;
        icmp_ln86_1351_reg_1497 <= icmp_ln86_1351_fu_554_p2;
        icmp_ln86_1352_reg_1502 <= icmp_ln86_1352_fu_560_p2;
        icmp_ln86_1353_reg_1507 <= icmp_ln86_1353_fu_566_p2;
        icmp_ln86_1354_reg_1512 <= icmp_ln86_1354_fu_572_p2;
        icmp_ln86_reg_1426 <= icmp_ln86_fu_388_p2;
        select_ln117_1295_reg_1517 <= select_ln117_1295_fu_920_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1290_p65 = 'bx;

assign agg_result_fu_1290_p66 = ((or_ln117_1196_fu_1268_p2[0:0] == 1'b1) ? select_ln117_1309_fu_1274_p3 : 5'd31);

assign and_ln102_1359_fu_933_p2 = (xor_ln104_fu_928_p2 & icmp_ln86_1327_reg_1435);

assign and_ln102_1360_fu_596_p2 = (icmp_ln86_1328_fu_406_p2 & and_ln102_fu_578_p2);

assign and_ln102_1361_fu_608_p2 = (icmp_ln86_1329_fu_412_p2 & and_ln104_fu_590_p2);

assign and_ln102_1362_fu_949_p2 = (icmp_ln86_1330_reg_1441 & and_ln102_1359_fu_933_p2);

assign and_ln102_1363_fu_965_p2 = (icmp_ln86_1331_reg_1447 & and_ln104_240_fu_943_p2);

assign and_ln102_1364_fu_626_p2 = (icmp_ln86_1332_fu_430_p2 & and_ln102_1360_fu_596_p2);

assign and_ln102_1365_fu_644_p2 = (and_ln102_fu_578_p2 & and_ln102_1387_fu_638_p2);

assign and_ln102_1366_fu_650_p2 = (icmp_ln86_1334_fu_442_p2 & and_ln102_1361_fu_608_p2);

assign and_ln102_1367_fu_662_p2 = (icmp_ln86_1335_fu_448_p2 & and_ln104_241_fu_620_p2);

assign and_ln102_1368_fu_981_p2 = (icmp_ln86_1336_reg_1453 & and_ln102_1362_fu_949_p2);

assign and_ln102_1369_fu_991_p2 = (icmp_ln86_1337_reg_1459 & and_ln104_242_fu_959_p2);

assign and_ln102_1370_fu_1001_p2 = (icmp_ln86_1338_reg_1465 & and_ln102_1363_fu_965_p2);

assign and_ln102_1371_fu_1011_p2 = (icmp_ln86_1339_reg_1471 & and_ln104_243_fu_975_p2);

assign and_ln102_1372_fu_674_p2 = (icmp_ln86_1340_fu_478_p2 & and_ln102_1364_fu_626_p2);

assign and_ln102_1373_fu_686_p2 = (and_ln102_1388_fu_680_p2 & and_ln102_1360_fu_596_p2);

assign and_ln102_1374_fu_692_p2 = (icmp_ln86_1342_fu_490_p2 & and_ln102_1365_fu_644_p2);

assign and_ln102_1375_fu_698_p2 = (icmp_ln86_1343_fu_496_p2 & and_ln102_1366_fu_650_p2);

assign and_ln102_1376_fu_710_p2 = (and_ln102_1389_fu_704_p2 & and_ln102_1361_fu_608_p2);

assign and_ln102_1377_fu_716_p2 = (icmp_ln86_1345_fu_508_p2 & and_ln102_1367_fu_662_p2);

assign and_ln102_1378_fu_728_p2 = (and_ln104_241_fu_620_p2 & and_ln102_1390_fu_722_p2);

assign and_ln102_1379_fu_1021_p2 = (icmp_ln86_1347_reg_1477 & and_ln102_1368_fu_981_p2);

assign and_ln102_1380_fu_1031_p2 = (and_ln102_1391_fu_1026_p2 & and_ln102_1362_fu_949_p2);

assign and_ln102_1381_fu_1037_p2 = (icmp_ln86_1349_reg_1487 & and_ln102_1369_fu_991_p2);

assign and_ln102_1382_fu_1047_p2 = (and_ln104_242_fu_959_p2 & and_ln102_1392_fu_1042_p2);

assign and_ln102_1383_fu_1053_p2 = (icmp_ln86_1351_reg_1497 & and_ln102_1370_fu_1001_p2);

assign and_ln102_1384_fu_1063_p2 = (and_ln102_1393_fu_1058_p2 & and_ln102_1363_fu_965_p2);

assign and_ln102_1385_fu_1069_p2 = (icmp_ln86_1353_reg_1507 & and_ln102_1371_fu_1011_p2);

assign and_ln102_1386_fu_1079_p2 = (and_ln104_243_fu_975_p2 & and_ln102_1394_fu_1074_p2);

assign and_ln102_1387_fu_638_p2 = (xor_ln104_630_fu_602_p2 & icmp_ln86_1333_fu_436_p2);

assign and_ln102_1388_fu_680_p2 = (xor_ln104_634_fu_632_p2 & icmp_ln86_1341_fu_484_p2);

assign and_ln102_1389_fu_704_p2 = (xor_ln104_635_fu_656_p2 & icmp_ln86_1344_fu_502_p2);

assign and_ln102_1390_fu_722_p2 = (xor_ln104_636_fu_668_p2 & icmp_ln86_1346_fu_514_p2);

assign and_ln102_1391_fu_1026_p2 = (xor_ln104_637_fu_986_p2 & icmp_ln86_1348_reg_1482);

assign and_ln102_1392_fu_1042_p2 = (xor_ln104_638_fu_996_p2 & icmp_ln86_1350_reg_1492);

assign and_ln102_1393_fu_1058_p2 = (xor_ln104_639_fu_1006_p2 & icmp_ln86_1352_reg_1502);

assign and_ln102_1394_fu_1074_p2 = (xor_ln104_640_fu_1016_p2 & icmp_ln86_1354_reg_1512);

assign and_ln102_fu_578_p2 = (icmp_ln86_fu_388_p2 & icmp_ln86_1326_fu_394_p2);

assign and_ln104_240_fu_943_p2 = (xor_ln104_fu_928_p2 & xor_ln104_629_fu_938_p2);

assign and_ln104_241_fu_620_p2 = (xor_ln104_631_fu_614_p2 & and_ln104_fu_590_p2);

assign and_ln104_242_fu_959_p2 = (xor_ln104_632_fu_954_p2 & and_ln102_1359_fu_933_p2);

assign and_ln104_243_fu_975_p2 = (xor_ln104_633_fu_970_p2 & and_ln104_240_fu_943_p2);

assign and_ln104_fu_590_p2 = (xor_ln104_628_fu_584_p2 & icmp_ln86_fu_388_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1290_p67;

assign icmp_ln86_1326_fu_394_p2 = (($signed(x_24_val) < $signed(18'd279)) ? 1'b1 : 1'b0);

assign icmp_ln86_1327_fu_400_p2 = (($signed(x_47_val) < $signed(18'd86703)) ? 1'b1 : 1'b0);

assign icmp_ln86_1328_fu_406_p2 = (($signed(x_1_val) < $signed(18'd27837)) ? 1'b1 : 1'b0);

assign icmp_ln86_1329_fu_412_p2 = (($signed(x_47_val) < $signed(18'd29084)) ? 1'b1 : 1'b0);

assign icmp_ln86_1330_fu_418_p2 = (($signed(x_50_val) < $signed(18'd78567)) ? 1'b1 : 1'b0);

assign icmp_ln86_1331_fu_424_p2 = (($signed(x_7_val) < $signed(18'd6800)) ? 1'b1 : 1'b0);

assign icmp_ln86_1332_fu_430_p2 = (($signed(x_27_val) < $signed(18'd6010)) ? 1'b1 : 1'b0);

assign icmp_ln86_1333_fu_436_p2 = (($signed(x_9_val) < $signed(18'd422)) ? 1'b1 : 1'b0);

assign icmp_ln86_1334_fu_442_p2 = (($signed(x_19_val) < $signed(18'd10154)) ? 1'b1 : 1'b0);

assign icmp_ln86_1335_fu_448_p2 = (($signed(x_42_val) < $signed(18'd311)) ? 1'b1 : 1'b0);

assign icmp_ln86_1336_fu_454_p2 = (($signed(x_50_val) < $signed(18'd52628)) ? 1'b1 : 1'b0);

assign icmp_ln86_1337_fu_460_p2 = (($signed(x_52_val) < $signed(18'd46593)) ? 1'b1 : 1'b0);

assign icmp_ln86_1338_fu_466_p2 = (($signed(x_19_val) < $signed(18'd1217)) ? 1'b1 : 1'b0);

assign icmp_ln86_1339_fu_472_p2 = (($signed(x_1_val) < $signed(18'd155425)) ? 1'b1 : 1'b0);

assign icmp_ln86_1340_fu_478_p2 = (($signed(x_38_val) < $signed(18'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_1341_fu_484_p2 = (($signed(x_10_val) < $signed(18'd942)) ? 1'b1 : 1'b0);

assign icmp_ln86_1342_fu_490_p2 = (($signed(x_1_val) < $signed(18'd77511)) ? 1'b1 : 1'b0);

assign icmp_ln86_1343_fu_496_p2 = (($signed(x_33_val) < $signed(18'd734)) ? 1'b1 : 1'b0);

assign icmp_ln86_1344_fu_502_p2 = (($signed(x_1_val) < $signed(18'd193905)) ? 1'b1 : 1'b0);

assign icmp_ln86_1345_fu_508_p2 = (($signed(x_34_val) < $signed(18'd485)) ? 1'b1 : 1'b0);

assign icmp_ln86_1346_fu_514_p2 = (($signed(x_26_val) < $signed(18'd13700)) ? 1'b1 : 1'b0);

assign icmp_ln86_1347_fu_520_p2 = (($signed(x_9_val) < $signed(18'd598)) ? 1'b1 : 1'b0);

assign icmp_ln86_1348_fu_526_p2 = (($signed(x_43_val) < $signed(18'd23)) ? 1'b1 : 1'b0);

assign icmp_ln86_1349_fu_532_p2 = (($signed(x_1_val) < $signed(18'd100194)) ? 1'b1 : 1'b0);

assign icmp_ln86_1350_fu_548_p2 = (($signed(tmp_fu_538_p4) < $signed(14'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_1351_fu_554_p2 = (($signed(x_48_val) < $signed(18'd94093)) ? 1'b1 : 1'b0);

assign icmp_ln86_1352_fu_560_p2 = (($signed(x_33_val) < $signed(18'd955)) ? 1'b1 : 1'b0);

assign icmp_ln86_1353_fu_566_p2 = (($signed(x_33_val) < $signed(18'd448)) ? 1'b1 : 1'b0);

assign icmp_ln86_1354_fu_572_p2 = (($signed(x_47_val) < $signed(18'd94851)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_388_p2 = (($signed(x_15_val) < $signed(18'd5)) ? 1'b1 : 1'b0);

assign or_ln117_1173_fu_770_p2 = (and_ln102_1374_fu_692_p2 | and_ln102_1360_fu_596_p2);

assign or_ln117_1174_fu_784_p2 = (and_ln102_1365_fu_644_p2 | and_ln102_1360_fu_596_p2);

assign or_ln117_1175_fu_810_p2 = (and_ln102_fu_578_p2 | and_ln102_1375_fu_698_p2);

assign or_ln117_1176_fu_824_p2 = (and_ln102_fu_578_p2 | and_ln102_1366_fu_650_p2);

assign or_ln117_1177_fu_838_p2 = (or_ln117_1176_fu_824_p2 | and_ln102_1376_fu_710_p2);

assign or_ln117_1178_fu_852_p2 = (and_ln102_fu_578_p2 | and_ln102_1361_fu_608_p2);

assign or_ln117_1179_fu_866_p2 = (or_ln117_1178_fu_852_p2 | and_ln102_1377_fu_716_p2);

assign or_ln117_1180_fu_880_p2 = (or_ln117_1178_fu_852_p2 | and_ln102_1367_fu_662_p2);

assign or_ln117_1181_fu_894_p2 = (or_ln117_1180_fu_880_p2 | and_ln102_1378_fu_728_p2);

assign or_ln117_1182_fu_1085_p2 = (icmp_ln86_reg_1426 | and_ln102_1379_fu_1021_p2);

assign or_ln117_1183_fu_1090_p2 = (icmp_ln86_reg_1426 | and_ln102_1368_fu_981_p2);

assign or_ln117_1184_fu_1102_p2 = (or_ln117_1183_fu_1090_p2 | and_ln102_1380_fu_1031_p2);

assign or_ln117_1185_fu_1116_p2 = (icmp_ln86_reg_1426 | and_ln102_1362_fu_949_p2);

assign or_ln117_1186_fu_1129_p2 = (or_ln117_1185_fu_1116_p2 | and_ln102_1381_fu_1037_p2);

assign or_ln117_1187_fu_1143_p2 = (or_ln117_1185_fu_1116_p2 | and_ln102_1369_fu_991_p2);

assign or_ln117_1188_fu_1157_p2 = (or_ln117_1187_fu_1143_p2 | and_ln102_1382_fu_1047_p2);

assign or_ln117_1189_fu_1171_p2 = (icmp_ln86_reg_1426 | and_ln102_1359_fu_933_p2);

assign or_ln117_1190_fu_1184_p2 = (or_ln117_1189_fu_1171_p2 | and_ln102_1383_fu_1053_p2);

assign or_ln117_1191_fu_1198_p2 = (or_ln117_1189_fu_1171_p2 | and_ln102_1370_fu_1001_p2);

assign or_ln117_1192_fu_1212_p2 = (or_ln117_1191_fu_1198_p2 | and_ln102_1384_fu_1063_p2);

assign or_ln117_1193_fu_1226_p2 = (or_ln117_1189_fu_1171_p2 | and_ln102_1363_fu_965_p2);

assign or_ln117_1194_fu_1240_p2 = (or_ln117_1193_fu_1226_p2 | and_ln102_1385_fu_1069_p2);

assign or_ln117_1195_fu_1254_p2 = (or_ln117_1193_fu_1226_p2 | and_ln102_1371_fu_1011_p2);

assign or_ln117_1196_fu_1268_p2 = (or_ln117_1195_fu_1254_p2 | and_ln102_1386_fu_1079_p2);

assign or_ln117_fu_744_p2 = (and_ln102_1373_fu_686_p2 | and_ln102_1364_fu_626_p2);

assign select_ln117_1283_fu_758_p3 = ((or_ln117_fu_744_p2[0:0] == 1'b1) ? select_ln117_fu_750_p3 : 2'd3);

assign select_ln117_1284_fu_776_p3 = ((and_ln102_1360_fu_596_p2[0:0] == 1'b1) ? zext_ln117_139_fu_766_p1 : 3'd4);

assign select_ln117_1285_fu_790_p3 = ((or_ln117_1173_fu_770_p2[0:0] == 1'b1) ? select_ln117_1284_fu_776_p3 : 3'd5);

assign select_ln117_1286_fu_798_p3 = ((or_ln117_1174_fu_784_p2[0:0] == 1'b1) ? select_ln117_1285_fu_790_p3 : 3'd6);

assign select_ln117_1287_fu_816_p3 = ((and_ln102_fu_578_p2[0:0] == 1'b1) ? zext_ln117_140_fu_806_p1 : 4'd8);

assign select_ln117_1288_fu_830_p3 = ((or_ln117_1175_fu_810_p2[0:0] == 1'b1) ? select_ln117_1287_fu_816_p3 : 4'd9);

assign select_ln117_1289_fu_844_p3 = ((or_ln117_1176_fu_824_p2[0:0] == 1'b1) ? select_ln117_1288_fu_830_p3 : 4'd10);

assign select_ln117_1290_fu_858_p3 = ((or_ln117_1177_fu_838_p2[0:0] == 1'b1) ? select_ln117_1289_fu_844_p3 : 4'd11);

assign select_ln117_1291_fu_872_p3 = ((or_ln117_1178_fu_852_p2[0:0] == 1'b1) ? select_ln117_1290_fu_858_p3 : 4'd12);

assign select_ln117_1292_fu_886_p3 = ((or_ln117_1179_fu_866_p2[0:0] == 1'b1) ? select_ln117_1291_fu_872_p3 : 4'd13);

assign select_ln117_1293_fu_900_p3 = ((or_ln117_1180_fu_880_p2[0:0] == 1'b1) ? select_ln117_1292_fu_886_p3 : 4'd14);

assign select_ln117_1294_fu_908_p3 = ((or_ln117_1181_fu_894_p2[0:0] == 1'b1) ? select_ln117_1293_fu_900_p3 : 4'd15);

assign select_ln117_1295_fu_920_p3 = ((icmp_ln86_fu_388_p2[0:0] == 1'b1) ? zext_ln117_141_fu_916_p1 : 5'd16);

assign select_ln117_1296_fu_1095_p3 = ((or_ln117_1182_fu_1085_p2[0:0] == 1'b1) ? select_ln117_1295_reg_1517 : 5'd17);

assign select_ln117_1297_fu_1108_p3 = ((or_ln117_1183_fu_1090_p2[0:0] == 1'b1) ? select_ln117_1296_fu_1095_p3 : 5'd18);

assign select_ln117_1298_fu_1121_p3 = ((or_ln117_1184_fu_1102_p2[0:0] == 1'b1) ? select_ln117_1297_fu_1108_p3 : 5'd19);

assign select_ln117_1299_fu_1135_p3 = ((or_ln117_1185_fu_1116_p2[0:0] == 1'b1) ? select_ln117_1298_fu_1121_p3 : 5'd20);

assign select_ln117_1300_fu_1149_p3 = ((or_ln117_1186_fu_1129_p2[0:0] == 1'b1) ? select_ln117_1299_fu_1135_p3 : 5'd21);

assign select_ln117_1301_fu_1163_p3 = ((or_ln117_1187_fu_1143_p2[0:0] == 1'b1) ? select_ln117_1300_fu_1149_p3 : 5'd22);

assign select_ln117_1302_fu_1176_p3 = ((or_ln117_1188_fu_1157_p2[0:0] == 1'b1) ? select_ln117_1301_fu_1163_p3 : 5'd23);

assign select_ln117_1303_fu_1190_p3 = ((or_ln117_1189_fu_1171_p2[0:0] == 1'b1) ? select_ln117_1302_fu_1176_p3 : 5'd24);

assign select_ln117_1304_fu_1204_p3 = ((or_ln117_1190_fu_1184_p2[0:0] == 1'b1) ? select_ln117_1303_fu_1190_p3 : 5'd25);

assign select_ln117_1305_fu_1218_p3 = ((or_ln117_1191_fu_1198_p2[0:0] == 1'b1) ? select_ln117_1304_fu_1204_p3 : 5'd26);

assign select_ln117_1306_fu_1232_p3 = ((or_ln117_1192_fu_1212_p2[0:0] == 1'b1) ? select_ln117_1305_fu_1218_p3 : 5'd27);

assign select_ln117_1307_fu_1246_p3 = ((or_ln117_1193_fu_1226_p2[0:0] == 1'b1) ? select_ln117_1306_fu_1232_p3 : 5'd28);

assign select_ln117_1308_fu_1260_p3 = ((or_ln117_1194_fu_1240_p2[0:0] == 1'b1) ? select_ln117_1307_fu_1246_p3 : 5'd29);

assign select_ln117_1309_fu_1274_p3 = ((or_ln117_1195_fu_1254_p2[0:0] == 1'b1) ? select_ln117_1308_fu_1260_p3 : 5'd30);

assign select_ln117_fu_750_p3 = ((and_ln102_1364_fu_626_p2[0:0] == 1'b1) ? zext_ln117_fu_740_p1 : 2'd2);

assign tmp_fu_538_p4 = {{x_23_val[17:4]}};

assign xor_ln104_628_fu_584_p2 = (icmp_ln86_1326_fu_394_p2 ^ 1'd1);

assign xor_ln104_629_fu_938_p2 = (icmp_ln86_1327_reg_1435 ^ 1'd1);

assign xor_ln104_630_fu_602_p2 = (icmp_ln86_1328_fu_406_p2 ^ 1'd1);

assign xor_ln104_631_fu_614_p2 = (icmp_ln86_1329_fu_412_p2 ^ 1'd1);

assign xor_ln104_632_fu_954_p2 = (icmp_ln86_1330_reg_1441 ^ 1'd1);

assign xor_ln104_633_fu_970_p2 = (icmp_ln86_1331_reg_1447 ^ 1'd1);

assign xor_ln104_634_fu_632_p2 = (icmp_ln86_1332_fu_430_p2 ^ 1'd1);

assign xor_ln104_635_fu_656_p2 = (icmp_ln86_1334_fu_442_p2 ^ 1'd1);

assign xor_ln104_636_fu_668_p2 = (icmp_ln86_1335_fu_448_p2 ^ 1'd1);

assign xor_ln104_637_fu_986_p2 = (icmp_ln86_1336_reg_1453 ^ 1'd1);

assign xor_ln104_638_fu_996_p2 = (icmp_ln86_1337_reg_1459 ^ 1'd1);

assign xor_ln104_639_fu_1006_p2 = (icmp_ln86_1338_reg_1465 ^ 1'd1);

assign xor_ln104_640_fu_1016_p2 = (icmp_ln86_1339_reg_1471 ^ 1'd1);

assign xor_ln104_fu_928_p2 = (icmp_ln86_reg_1426 ^ 1'd1);

assign xor_ln117_fu_734_p2 = (1'd1 ^ and_ln102_1372_fu_674_p2);

assign zext_ln117_139_fu_766_p1 = select_ln117_1283_fu_758_p3;

assign zext_ln117_140_fu_806_p1 = select_ln117_1286_fu_798_p3;

assign zext_ln117_141_fu_916_p1 = select_ln117_1294_fu_908_p3;

assign zext_ln117_fu_740_p1 = xor_ln117_fu_734_p2;

endmodule //my_prj_decision_function_53
