// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_71 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_2_val,
        x_3_val,
        x_8_val,
        x_9_val,
        x_11_val,
        x_14_val,
        x_15_val,
        x_17_val,
        x_18_val,
        x_19_val,
        x_23_val,
        x_24_val,
        x_39_val,
        x_47_val,
        x_48_val,
        x_49_val,
        x_51_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_2_val;
input  [17:0] x_3_val;
input  [17:0] x_8_val;
input  [17:0] x_9_val;
input  [17:0] x_11_val;
input  [17:0] x_14_val;
input  [17:0] x_15_val;
input  [17:0] x_17_val;
input  [17:0] x_18_val;
input  [17:0] x_19_val;
input  [17:0] x_23_val;
input  [17:0] x_24_val;
input  [17:0] x_39_val;
input  [17:0] x_47_val;
input  [17:0] x_48_val;
input  [17:0] x_49_val;
input  [17:0] x_51_val;
output  [12:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_380_p2;
reg   [0:0] icmp_ln86_reg_1460;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_803_fu_392_p2;
reg   [0:0] icmp_ln86_803_reg_1469;
wire   [0:0] icmp_ln86_806_fu_410_p2;
reg   [0:0] icmp_ln86_806_reg_1475;
wire   [0:0] icmp_ln86_807_fu_416_p2;
reg   [0:0] icmp_ln86_807_reg_1481;
wire   [0:0] icmp_ln86_812_fu_446_p2;
reg   [0:0] icmp_ln86_812_reg_1487;
wire   [0:0] icmp_ln86_813_fu_452_p2;
reg   [0:0] icmp_ln86_813_reg_1493;
wire   [0:0] icmp_ln86_814_fu_458_p2;
reg   [0:0] icmp_ln86_814_reg_1499;
wire   [0:0] icmp_ln86_815_fu_464_p2;
reg   [0:0] icmp_ln86_815_reg_1505;
wire   [0:0] icmp_ln86_823_fu_522_p2;
reg   [0:0] icmp_ln86_823_reg_1511;
wire   [0:0] icmp_ln86_824_fu_528_p2;
reg   [0:0] icmp_ln86_824_reg_1516;
wire   [0:0] icmp_ln86_825_fu_534_p2;
reg   [0:0] icmp_ln86_825_reg_1521;
wire   [0:0] icmp_ln86_826_fu_540_p2;
reg   [0:0] icmp_ln86_826_reg_1526;
wire   [0:0] icmp_ln86_827_fu_546_p2;
reg   [0:0] icmp_ln86_827_reg_1531;
wire   [0:0] icmp_ln86_828_fu_562_p2;
reg   [0:0] icmp_ln86_828_reg_1536;
wire   [0:0] icmp_ln86_829_fu_568_p2;
reg   [0:0] icmp_ln86_829_reg_1541;
wire   [0:0] icmp_ln86_830_fu_574_p2;
reg   [0:0] icmp_ln86_830_reg_1546;
wire   [3:0] select_ln117_790_fu_954_p3;
reg   [3:0] select_ln117_790_reg_1551;
wire    ap_block_pp0_stage0;
wire   [16:0] tmp_fu_488_p4;
wire   [14:0] tmp_10_fu_552_p4;
wire   [0:0] icmp_ln86_802_fu_386_p2;
wire   [0:0] xor_ln104_379_fu_586_p2;
wire   [0:0] icmp_ln86_804_fu_398_p2;
wire   [0:0] and_ln102_fu_580_p2;
wire   [0:0] xor_ln104_381_fu_604_p2;
wire   [0:0] icmp_ln86_805_fu_404_p2;
wire   [0:0] and_ln104_fu_592_p2;
wire   [0:0] xor_ln104_382_fu_622_p2;
wire   [0:0] icmp_ln86_808_fu_422_p2;
wire   [0:0] and_ln102_986_fu_598_p2;
wire   [0:0] icmp_ln86_809_fu_428_p2;
wire   [0:0] and_ln104_144_fu_610_p2;
wire   [0:0] icmp_ln86_810_fu_434_p2;
wire   [0:0] and_ln102_987_fu_616_p2;
wire   [0:0] xor_ln104_387_fu_658_p2;
wire   [0:0] icmp_ln86_811_fu_440_p2;
wire   [0:0] and_ln104_145_fu_628_p2;
wire   [0:0] icmp_ln86_816_fu_470_p2;
wire   [0:0] and_ln102_990_fu_634_p2;
wire   [0:0] icmp_ln86_817_fu_476_p2;
wire   [0:0] xor_ln104_385_fu_640_p2;
wire   [0:0] and_ln102_998_fu_688_p2;
wire   [0:0] icmp_ln86_818_fu_482_p2;
wire   [0:0] and_ln102_991_fu_646_p2;
wire   [0:0] icmp_ln86_819_fu_498_p2;
wire   [0:0] xor_ln104_386_fu_652_p2;
wire   [0:0] and_ln102_1001_fu_706_p2;
wire   [0:0] icmp_ln86_820_fu_504_p2;
wire   [0:0] and_ln102_1003_fu_718_p2;
wire   [0:0] icmp_ln86_821_fu_510_p2;
wire   [0:0] and_ln102_992_fu_670_p2;
wire   [0:0] icmp_ln86_822_fu_516_p2;
wire   [0:0] xor_ln104_388_fu_676_p2;
wire   [0:0] and_ln102_1006_fu_736_p2;
wire   [0:0] and_ln104_148_fu_664_p2;
wire   [0:0] and_ln102_997_fu_682_p2;
wire   [0:0] xor_ln117_fu_754_p2;
wire   [0:0] or_ln117_704_fu_760_p2;
wire   [0:0] or_ln117_fu_748_p2;
wire   [1:0] zext_ln117_fu_766_p1;
wire   [0:0] or_ln117_705_fu_770_p2;
wire   [0:0] and_ln102_999_fu_694_p2;
wire   [1:0] select_ln117_fu_776_p3;
wire   [1:0] select_ln117_778_fu_790_p3;
wire   [0:0] or_ln117_706_fu_784_p2;
wire   [2:0] zext_ln117_85_fu_798_p1;
wire   [0:0] or_ln117_707_fu_802_p2;
wire   [0:0] and_ln102_1000_fu_700_p2;
wire   [2:0] select_ln117_779_fu_808_p3;
wire   [0:0] or_ln117_708_fu_816_p2;
wire   [2:0] select_ln117_780_fu_822_p3;
wire   [0:0] or_ln117_709_fu_830_p2;
wire   [0:0] and_ln102_1002_fu_712_p2;
wire   [2:0] select_ln117_781_fu_836_p3;
wire   [2:0] select_ln117_782_fu_850_p3;
wire   [0:0] or_ln117_710_fu_844_p2;
wire   [3:0] zext_ln117_86_fu_858_p1;
wire   [0:0] or_ln117_711_fu_862_p2;
wire   [0:0] and_ln102_1004_fu_724_p2;
wire   [3:0] select_ln117_783_fu_868_p3;
wire   [0:0] or_ln117_712_fu_876_p2;
wire   [3:0] select_ln117_784_fu_882_p3;
wire   [0:0] or_ln117_713_fu_890_p2;
wire   [0:0] and_ln102_1005_fu_730_p2;
wire   [3:0] select_ln117_785_fu_896_p3;
wire   [0:0] or_ln117_714_fu_904_p2;
wire   [3:0] select_ln117_786_fu_910_p3;
wire   [0:0] or_ln117_715_fu_918_p2;
wire   [0:0] and_ln102_1007_fu_742_p2;
wire   [3:0] select_ln117_787_fu_924_p3;
wire   [0:0] or_ln117_716_fu_932_p2;
wire   [3:0] select_ln117_788_fu_938_p3;
wire   [3:0] select_ln117_789_fu_946_p3;
wire   [0:0] xor_ln104_fu_962_p2;
wire   [0:0] xor_ln104_380_fu_972_p2;
wire   [0:0] and_ln102_985_fu_967_p2;
wire   [0:0] xor_ln104_383_fu_988_p2;
wire   [0:0] and_ln104_143_fu_977_p2;
wire   [0:0] xor_ln104_384_fu_1004_p2;
wire   [0:0] and_ln102_988_fu_983_p2;
wire   [0:0] and_ln104_146_fu_993_p2;
wire   [0:0] and_ln102_989_fu_999_p2;
wire   [0:0] and_ln104_147_fu_1009_p2;
wire   [0:0] and_ln102_993_fu_1015_p2;
wire   [0:0] xor_ln104_389_fu_1020_p2;
wire   [0:0] and_ln102_1009_fu_1060_p2;
wire   [0:0] and_ln102_994_fu_1025_p2;
wire   [0:0] xor_ln104_390_fu_1030_p2;
wire   [0:0] and_ln102_1012_fu_1076_p2;
wire   [0:0] and_ln102_995_fu_1035_p2;
wire   [0:0] xor_ln104_391_fu_1040_p2;
wire   [0:0] and_ln102_1015_fu_1092_p2;
wire   [0:0] and_ln102_996_fu_1045_p2;
wire   [0:0] xor_ln104_392_fu_1050_p2;
wire   [0:0] and_ln102_1018_fu_1108_p2;
wire   [0:0] and_ln102_1008_fu_1055_p2;
wire   [0:0] or_ln117_717_fu_1119_p2;
wire   [4:0] zext_ln117_87_fu_1124_p1;
wire   [0:0] or_ln117_718_fu_1127_p2;
wire   [0:0] and_ln102_1010_fu_1065_p2;
wire   [4:0] select_ln117_791_fu_1132_p3;
wire   [0:0] or_ln117_719_fu_1140_p2;
wire   [4:0] select_ln117_792_fu_1146_p3;
wire   [0:0] or_ln117_720_fu_1154_p2;
wire   [0:0] and_ln102_1011_fu_1071_p2;
wire   [4:0] select_ln117_793_fu_1159_p3;
wire   [0:0] or_ln117_721_fu_1167_p2;
wire   [4:0] select_ln117_794_fu_1173_p3;
wire   [0:0] or_ln117_722_fu_1181_p2;
wire   [0:0] and_ln102_1013_fu_1081_p2;
wire   [4:0] select_ln117_795_fu_1187_p3;
wire   [0:0] or_ln117_723_fu_1195_p2;
wire   [4:0] select_ln117_796_fu_1201_p3;
wire   [0:0] or_ln117_724_fu_1209_p2;
wire   [0:0] and_ln102_1014_fu_1087_p2;
wire   [4:0] select_ln117_797_fu_1214_p3;
wire   [0:0] or_ln117_725_fu_1222_p2;
wire   [4:0] select_ln117_798_fu_1228_p3;
wire   [0:0] or_ln117_726_fu_1236_p2;
wire   [0:0] and_ln102_1016_fu_1097_p2;
wire   [4:0] select_ln117_799_fu_1242_p3;
wire   [0:0] or_ln117_727_fu_1250_p2;
wire   [4:0] select_ln117_800_fu_1256_p3;
wire   [0:0] or_ln117_728_fu_1264_p2;
wire   [0:0] and_ln102_1017_fu_1103_p2;
wire   [4:0] select_ln117_801_fu_1270_p3;
wire   [0:0] or_ln117_729_fu_1278_p2;
wire   [4:0] select_ln117_802_fu_1284_p3;
wire   [0:0] or_ln117_730_fu_1292_p2;
wire   [0:0] and_ln102_1019_fu_1113_p2;
wire   [4:0] select_ln117_803_fu_1298_p3;
wire   [0:0] or_ln117_731_fu_1306_p2;
wire   [4:0] select_ln117_804_fu_1312_p3;
wire   [12:0] agg_result_fu_1328_p63;
wire   [4:0] agg_result_fu_1328_p64;
wire   [12:0] agg_result_fu_1328_p65;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1328_p1;
wire   [4:0] agg_result_fu_1328_p3;
wire   [4:0] agg_result_fu_1328_p5;
wire   [4:0] agg_result_fu_1328_p7;
wire   [4:0] agg_result_fu_1328_p9;
wire   [4:0] agg_result_fu_1328_p11;
wire   [4:0] agg_result_fu_1328_p13;
wire   [4:0] agg_result_fu_1328_p15;
wire   [4:0] agg_result_fu_1328_p17;
wire   [4:0] agg_result_fu_1328_p19;
wire   [4:0] agg_result_fu_1328_p21;
wire   [4:0] agg_result_fu_1328_p23;
wire   [4:0] agg_result_fu_1328_p25;
wire   [4:0] agg_result_fu_1328_p27;
wire   [4:0] agg_result_fu_1328_p29;
wire   [4:0] agg_result_fu_1328_p31;
wire  signed [4:0] agg_result_fu_1328_p33;
wire  signed [4:0] agg_result_fu_1328_p35;
wire  signed [4:0] agg_result_fu_1328_p37;
wire  signed [4:0] agg_result_fu_1328_p39;
wire  signed [4:0] agg_result_fu_1328_p41;
wire  signed [4:0] agg_result_fu_1328_p43;
wire  signed [4:0] agg_result_fu_1328_p45;
wire  signed [4:0] agg_result_fu_1328_p47;
wire  signed [4:0] agg_result_fu_1328_p49;
wire  signed [4:0] agg_result_fu_1328_p51;
wire  signed [4:0] agg_result_fu_1328_p53;
wire  signed [4:0] agg_result_fu_1328_p55;
wire  signed [4:0] agg_result_fu_1328_p57;
wire  signed [4:0] agg_result_fu_1328_p59;
wire  signed [4:0] agg_result_fu_1328_p61;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_63_5_13_1_1_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 13 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 13 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 13 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 13 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 13 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 13 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 13 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 13 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 13 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 13 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 13 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 13 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 13 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 13 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 13 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 13 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 13 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 13 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 13 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 13 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 13 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 13 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 13 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 13 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 13 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 13 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 13 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 13 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 13 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 13 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 13 ),
    .def_WIDTH( 13 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 13 ))
sparsemux_63_5_13_1_1_x_U698(
    .din0(13'd741),
    .din1(13'd8007),
    .din2(13'd864),
    .din3(13'd1106),
    .din4(13'd8150),
    .din5(13'd8129),
    .din6(13'd733),
    .din7(13'd2356),
    .din8(13'd548),
    .din9(13'd7820),
    .din10(13'd639),
    .din11(13'd8103),
    .din12(13'd2113),
    .din13(13'd7980),
    .din14(13'd306),
    .din15(13'd8015),
    .din16(13'd21),
    .din17(13'd8052),
    .din18(13'd273),
    .din19(13'd66),
    .din20(13'd248),
    .din21(13'd7995),
    .din22(13'd47),
    .din23(13'd7669),
    .din24(13'd7994),
    .din25(13'd7828),
    .din26(13'd1989),
    .din27(13'd40),
    .din28(13'd504),
    .din29(13'd204),
    .din30(13'd7228),
    .def(agg_result_fu_1328_p63),
    .sel(agg_result_fu_1328_p64),
    .dout(agg_result_fu_1328_p65)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_803_reg_1469 <= icmp_ln86_803_fu_392_p2;
        icmp_ln86_806_reg_1475 <= icmp_ln86_806_fu_410_p2;
        icmp_ln86_807_reg_1481 <= icmp_ln86_807_fu_416_p2;
        icmp_ln86_812_reg_1487 <= icmp_ln86_812_fu_446_p2;
        icmp_ln86_813_reg_1493 <= icmp_ln86_813_fu_452_p2;
        icmp_ln86_814_reg_1499 <= icmp_ln86_814_fu_458_p2;
        icmp_ln86_815_reg_1505 <= icmp_ln86_815_fu_464_p2;
        icmp_ln86_823_reg_1511 <= icmp_ln86_823_fu_522_p2;
        icmp_ln86_824_reg_1516 <= icmp_ln86_824_fu_528_p2;
        icmp_ln86_825_reg_1521 <= icmp_ln86_825_fu_534_p2;
        icmp_ln86_826_reg_1526 <= icmp_ln86_826_fu_540_p2;
        icmp_ln86_827_reg_1531 <= icmp_ln86_827_fu_546_p2;
        icmp_ln86_828_reg_1536 <= icmp_ln86_828_fu_562_p2;
        icmp_ln86_829_reg_1541 <= icmp_ln86_829_fu_568_p2;
        icmp_ln86_830_reg_1546 <= icmp_ln86_830_fu_574_p2;
        icmp_ln86_reg_1460 <= icmp_ln86_fu_380_p2;
        select_ln117_790_reg_1551 <= select_ln117_790_fu_954_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1328_p63 = 'bx;

assign agg_result_fu_1328_p64 = ((or_ln117_731_fu_1306_p2[0:0] == 1'b1) ? select_ln117_804_fu_1312_p3 : 5'd30);

assign and_ln102_1000_fu_700_p2 = (icmp_ln86_818_fu_482_p2 & and_ln102_991_fu_646_p2);

assign and_ln102_1001_fu_706_p2 = (xor_ln104_386_fu_652_p2 & icmp_ln86_819_fu_498_p2);

assign and_ln102_1002_fu_712_p2 = (and_ln104_144_fu_610_p2 & and_ln102_1001_fu_706_p2);

assign and_ln102_1003_fu_718_p2 = (icmp_ln86_820_fu_504_p2 & and_ln102_987_fu_616_p2);

assign and_ln102_1004_fu_724_p2 = (icmp_ln86_810_fu_434_p2 & and_ln102_1003_fu_718_p2);

assign and_ln102_1005_fu_730_p2 = (icmp_ln86_821_fu_510_p2 & and_ln102_992_fu_670_p2);

assign and_ln102_1006_fu_736_p2 = (xor_ln104_388_fu_676_p2 & icmp_ln86_822_fu_516_p2);

assign and_ln102_1007_fu_742_p2 = (and_ln104_145_fu_628_p2 & and_ln102_1006_fu_736_p2);

assign and_ln102_1008_fu_1055_p2 = (icmp_ln86_823_reg_1511 & and_ln102_993_fu_1015_p2);

assign and_ln102_1009_fu_1060_p2 = (xor_ln104_389_fu_1020_p2 & icmp_ln86_824_reg_1516);

assign and_ln102_1010_fu_1065_p2 = (and_ln102_988_fu_983_p2 & and_ln102_1009_fu_1060_p2);

assign and_ln102_1011_fu_1071_p2 = (icmp_ln86_825_reg_1521 & and_ln102_994_fu_1025_p2);

assign and_ln102_1012_fu_1076_p2 = (xor_ln104_390_fu_1030_p2 & icmp_ln86_826_reg_1526);

assign and_ln102_1013_fu_1081_p2 = (and_ln104_146_fu_993_p2 & and_ln102_1012_fu_1076_p2);

assign and_ln102_1014_fu_1087_p2 = (icmp_ln86_827_reg_1531 & and_ln102_995_fu_1035_p2);

assign and_ln102_1015_fu_1092_p2 = (xor_ln104_391_fu_1040_p2 & icmp_ln86_828_reg_1536);

assign and_ln102_1016_fu_1097_p2 = (and_ln102_989_fu_999_p2 & and_ln102_1015_fu_1092_p2);

assign and_ln102_1017_fu_1103_p2 = (icmp_ln86_829_reg_1541 & and_ln102_996_fu_1045_p2);

assign and_ln102_1018_fu_1108_p2 = (xor_ln104_392_fu_1050_p2 & icmp_ln86_830_reg_1546);

assign and_ln102_1019_fu_1113_p2 = (and_ln104_147_fu_1009_p2 & and_ln102_1018_fu_1108_p2);

assign and_ln102_985_fu_967_p2 = (xor_ln104_fu_962_p2 & icmp_ln86_803_reg_1469);

assign and_ln102_986_fu_598_p2 = (icmp_ln86_804_fu_398_p2 & and_ln102_fu_580_p2);

assign and_ln102_987_fu_616_p2 = (icmp_ln86_805_fu_404_p2 & and_ln104_fu_592_p2);

assign and_ln102_988_fu_983_p2 = (icmp_ln86_806_reg_1475 & and_ln102_985_fu_967_p2);

assign and_ln102_989_fu_999_p2 = (icmp_ln86_807_reg_1481 & and_ln104_143_fu_977_p2);

assign and_ln102_990_fu_634_p2 = (icmp_ln86_808_fu_422_p2 & and_ln102_986_fu_598_p2);

assign and_ln102_991_fu_646_p2 = (icmp_ln86_809_fu_428_p2 & and_ln104_144_fu_610_p2);

assign and_ln102_992_fu_670_p2 = (icmp_ln86_811_fu_440_p2 & and_ln104_145_fu_628_p2);

assign and_ln102_993_fu_1015_p2 = (icmp_ln86_812_reg_1487 & and_ln102_988_fu_983_p2);

assign and_ln102_994_fu_1025_p2 = (icmp_ln86_813_reg_1493 & and_ln104_146_fu_993_p2);

assign and_ln102_995_fu_1035_p2 = (icmp_ln86_814_reg_1499 & and_ln102_989_fu_999_p2);

assign and_ln102_996_fu_1045_p2 = (icmp_ln86_815_reg_1505 & and_ln104_147_fu_1009_p2);

assign and_ln102_997_fu_682_p2 = (icmp_ln86_816_fu_470_p2 & and_ln102_990_fu_634_p2);

assign and_ln102_998_fu_688_p2 = (xor_ln104_385_fu_640_p2 & icmp_ln86_817_fu_476_p2);

assign and_ln102_999_fu_694_p2 = (and_ln102_998_fu_688_p2 & and_ln102_986_fu_598_p2);

assign and_ln102_fu_580_p2 = (icmp_ln86_fu_380_p2 & icmp_ln86_802_fu_386_p2);

assign and_ln104_143_fu_977_p2 = (xor_ln104_fu_962_p2 & xor_ln104_380_fu_972_p2);

assign and_ln104_144_fu_610_p2 = (xor_ln104_381_fu_604_p2 & and_ln102_fu_580_p2);

assign and_ln104_145_fu_628_p2 = (xor_ln104_382_fu_622_p2 & and_ln104_fu_592_p2);

assign and_ln104_146_fu_993_p2 = (xor_ln104_383_fu_988_p2 & and_ln102_985_fu_967_p2);

assign and_ln104_147_fu_1009_p2 = (xor_ln104_384_fu_1004_p2 & and_ln104_143_fu_977_p2);

assign and_ln104_148_fu_664_p2 = (xor_ln104_387_fu_658_p2 & and_ln102_987_fu_616_p2);

assign and_ln104_fu_592_p2 = (xor_ln104_379_fu_586_p2 & icmp_ln86_fu_380_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1328_p65;

assign icmp_ln86_802_fu_386_p2 = (($signed(x_1_val) < $signed(18'd187137)) ? 1'b1 : 1'b0);

assign icmp_ln86_803_fu_392_p2 = (($signed(x_39_val) < $signed(18'd2158)) ? 1'b1 : 1'b0);

assign icmp_ln86_804_fu_398_p2 = (($signed(x_51_val) < $signed(18'd142)) ? 1'b1 : 1'b0);

assign icmp_ln86_805_fu_404_p2 = (($signed(x_3_val) < $signed(18'd46377)) ? 1'b1 : 1'b0);

assign icmp_ln86_806_fu_410_p2 = (($signed(x_17_val) < $signed(18'd26)) ? 1'b1 : 1'b0);

assign icmp_ln86_807_fu_416_p2 = (($signed(x_17_val) < $signed(18'd61)) ? 1'b1 : 1'b0);

assign icmp_ln86_808_fu_422_p2 = (($signed(x_17_val) < $signed(18'd80)) ? 1'b1 : 1'b0);

assign icmp_ln86_809_fu_428_p2 = (($signed(x_49_val) < $signed(18'd17140)) ? 1'b1 : 1'b0);

assign icmp_ln86_810_fu_434_p2 = (($signed(x_24_val) < $signed(18'd470)) ? 1'b1 : 1'b0);

assign icmp_ln86_811_fu_440_p2 = (($signed(x_18_val) < $signed(18'd2521)) ? 1'b1 : 1'b0);

assign icmp_ln86_812_fu_446_p2 = (($signed(x_24_val) < $signed(18'd318)) ? 1'b1 : 1'b0);

assign icmp_ln86_813_fu_452_p2 = (($signed(x_24_val) < $signed(18'd375)) ? 1'b1 : 1'b0);

assign icmp_ln86_814_fu_458_p2 = (($signed(x_11_val) < $signed(18'd997)) ? 1'b1 : 1'b0);

assign icmp_ln86_815_fu_464_p2 = (($signed(x_3_val) < $signed(18'd175920)) ? 1'b1 : 1'b0);

assign icmp_ln86_816_fu_470_p2 = (($signed(x_47_val) < $signed(18'd68525)) ? 1'b1 : 1'b0);

assign icmp_ln86_817_fu_476_p2 = (($signed(x_9_val) < $signed(18'd790)) ? 1'b1 : 1'b0);

assign icmp_ln86_818_fu_482_p2 = (($signed(x_8_val) < $signed(18'd1264)) ? 1'b1 : 1'b0);

assign icmp_ln86_819_fu_498_p2 = (($signed(tmp_fu_488_p4) < $signed(17'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_820_fu_504_p2 = (($signed(x_1_val) < $signed(18'd119616)) ? 1'b1 : 1'b0);

assign icmp_ln86_821_fu_510_p2 = (($signed(x_18_val) < $signed(18'd2437)) ? 1'b1 : 1'b0);

assign icmp_ln86_822_fu_516_p2 = (($signed(x_23_val) < $signed(18'd41)) ? 1'b1 : 1'b0);

assign icmp_ln86_823_fu_522_p2 = (($signed(x_19_val) < $signed(18'd326)) ? 1'b1 : 1'b0);

assign icmp_ln86_824_fu_528_p2 = (($signed(x_48_val) < $signed(18'd169814)) ? 1'b1 : 1'b0);

assign icmp_ln86_825_fu_534_p2 = (($signed(x_19_val) < $signed(18'd3482)) ? 1'b1 : 1'b0);

assign icmp_ln86_826_fu_540_p2 = (($signed(x_11_val) < $signed(18'd379)) ? 1'b1 : 1'b0);

assign icmp_ln86_827_fu_546_p2 = (($signed(x_2_val) < $signed(18'd260900)) ? 1'b1 : 1'b0);

assign icmp_ln86_828_fu_562_p2 = (($signed(tmp_10_fu_552_p4) < $signed(15'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_829_fu_568_p2 = (($signed(x_9_val) < $signed(18'd3294)) ? 1'b1 : 1'b0);

assign icmp_ln86_830_fu_574_p2 = (($signed(x_18_val) < $signed(18'd2251)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_380_p2 = (($signed(x_14_val) < $signed(18'd23)) ? 1'b1 : 1'b0);

assign or_ln117_704_fu_760_p2 = (xor_ln117_fu_754_p2 | icmp_ln86_810_fu_434_p2);

assign or_ln117_705_fu_770_p2 = (and_ln104_148_fu_664_p2 | and_ln102_990_fu_634_p2);

assign or_ln117_706_fu_784_p2 = (or_ln117_705_fu_770_p2 | and_ln102_999_fu_694_p2);

assign or_ln117_707_fu_802_p2 = (and_ln104_148_fu_664_p2 | and_ln102_986_fu_598_p2);

assign or_ln117_708_fu_816_p2 = (or_ln117_707_fu_802_p2 | and_ln102_1000_fu_700_p2);

assign or_ln117_709_fu_830_p2 = (or_ln117_707_fu_802_p2 | and_ln102_991_fu_646_p2);

assign or_ln117_710_fu_844_p2 = (or_ln117_709_fu_830_p2 | and_ln102_1002_fu_712_p2);

assign or_ln117_711_fu_862_p2 = (and_ln104_148_fu_664_p2 | and_ln102_fu_580_p2);

assign or_ln117_712_fu_876_p2 = (or_ln117_711_fu_862_p2 | and_ln102_1004_fu_724_p2);

assign or_ln117_713_fu_890_p2 = (and_ln102_fu_580_p2 | and_ln102_987_fu_616_p2);

assign or_ln117_714_fu_904_p2 = (or_ln117_713_fu_890_p2 | and_ln102_1005_fu_730_p2);

assign or_ln117_715_fu_918_p2 = (or_ln117_713_fu_890_p2 | and_ln102_992_fu_670_p2);

assign or_ln117_716_fu_932_p2 = (or_ln117_715_fu_918_p2 | and_ln102_1007_fu_742_p2);

assign or_ln117_717_fu_1119_p2 = (icmp_ln86_reg_1460 | and_ln102_1008_fu_1055_p2);

assign or_ln117_718_fu_1127_p2 = (icmp_ln86_reg_1460 | and_ln102_993_fu_1015_p2);

assign or_ln117_719_fu_1140_p2 = (or_ln117_718_fu_1127_p2 | and_ln102_1010_fu_1065_p2);

assign or_ln117_720_fu_1154_p2 = (icmp_ln86_reg_1460 | and_ln102_988_fu_983_p2);

assign or_ln117_721_fu_1167_p2 = (or_ln117_720_fu_1154_p2 | and_ln102_1011_fu_1071_p2);

assign or_ln117_722_fu_1181_p2 = (or_ln117_720_fu_1154_p2 | and_ln102_994_fu_1025_p2);

assign or_ln117_723_fu_1195_p2 = (or_ln117_722_fu_1181_p2 | and_ln102_1013_fu_1081_p2);

assign or_ln117_724_fu_1209_p2 = (icmp_ln86_reg_1460 | and_ln102_985_fu_967_p2);

assign or_ln117_725_fu_1222_p2 = (or_ln117_724_fu_1209_p2 | and_ln102_1014_fu_1087_p2);

assign or_ln117_726_fu_1236_p2 = (or_ln117_724_fu_1209_p2 | and_ln102_995_fu_1035_p2);

assign or_ln117_727_fu_1250_p2 = (or_ln117_726_fu_1236_p2 | and_ln102_1016_fu_1097_p2);

assign or_ln117_728_fu_1264_p2 = (or_ln117_724_fu_1209_p2 | and_ln102_989_fu_999_p2);

assign or_ln117_729_fu_1278_p2 = (or_ln117_728_fu_1264_p2 | and_ln102_1017_fu_1103_p2);

assign or_ln117_730_fu_1292_p2 = (or_ln117_728_fu_1264_p2 | and_ln102_996_fu_1045_p2);

assign or_ln117_731_fu_1306_p2 = (or_ln117_730_fu_1292_p2 | and_ln102_1019_fu_1113_p2);

assign or_ln117_fu_748_p2 = (and_ln104_148_fu_664_p2 | and_ln102_997_fu_682_p2);

assign select_ln117_778_fu_790_p3 = ((or_ln117_705_fu_770_p2[0:0] == 1'b1) ? select_ln117_fu_776_p3 : 2'd3);

assign select_ln117_779_fu_808_p3 = ((or_ln117_706_fu_784_p2[0:0] == 1'b1) ? zext_ln117_85_fu_798_p1 : 3'd4);

assign select_ln117_780_fu_822_p3 = ((or_ln117_707_fu_802_p2[0:0] == 1'b1) ? select_ln117_779_fu_808_p3 : 3'd5);

assign select_ln117_781_fu_836_p3 = ((or_ln117_708_fu_816_p2[0:0] == 1'b1) ? select_ln117_780_fu_822_p3 : 3'd6);

assign select_ln117_782_fu_850_p3 = ((or_ln117_709_fu_830_p2[0:0] == 1'b1) ? select_ln117_781_fu_836_p3 : 3'd7);

assign select_ln117_783_fu_868_p3 = ((or_ln117_710_fu_844_p2[0:0] == 1'b1) ? zext_ln117_86_fu_858_p1 : 4'd8);

assign select_ln117_784_fu_882_p3 = ((or_ln117_711_fu_862_p2[0:0] == 1'b1) ? select_ln117_783_fu_868_p3 : 4'd9);

assign select_ln117_785_fu_896_p3 = ((or_ln117_712_fu_876_p2[0:0] == 1'b1) ? select_ln117_784_fu_882_p3 : 4'd10);

assign select_ln117_786_fu_910_p3 = ((or_ln117_713_fu_890_p2[0:0] == 1'b1) ? select_ln117_785_fu_896_p3 : 4'd11);

assign select_ln117_787_fu_924_p3 = ((or_ln117_714_fu_904_p2[0:0] == 1'b1) ? select_ln117_786_fu_910_p3 : 4'd12);

assign select_ln117_788_fu_938_p3 = ((or_ln117_715_fu_918_p2[0:0] == 1'b1) ? select_ln117_787_fu_924_p3 : 4'd13);

assign select_ln117_789_fu_946_p3 = ((or_ln117_716_fu_932_p2[0:0] == 1'b1) ? select_ln117_788_fu_938_p3 : 4'd14);

assign select_ln117_790_fu_954_p3 = ((icmp_ln86_fu_380_p2[0:0] == 1'b1) ? select_ln117_789_fu_946_p3 : 4'd15);

assign select_ln117_791_fu_1132_p3 = ((or_ln117_717_fu_1119_p2[0:0] == 1'b1) ? zext_ln117_87_fu_1124_p1 : 5'd16);

assign select_ln117_792_fu_1146_p3 = ((or_ln117_718_fu_1127_p2[0:0] == 1'b1) ? select_ln117_791_fu_1132_p3 : 5'd17);

assign select_ln117_793_fu_1159_p3 = ((or_ln117_719_fu_1140_p2[0:0] == 1'b1) ? select_ln117_792_fu_1146_p3 : 5'd18);

assign select_ln117_794_fu_1173_p3 = ((or_ln117_720_fu_1154_p2[0:0] == 1'b1) ? select_ln117_793_fu_1159_p3 : 5'd19);

assign select_ln117_795_fu_1187_p3 = ((or_ln117_721_fu_1167_p2[0:0] == 1'b1) ? select_ln117_794_fu_1173_p3 : 5'd20);

assign select_ln117_796_fu_1201_p3 = ((or_ln117_722_fu_1181_p2[0:0] == 1'b1) ? select_ln117_795_fu_1187_p3 : 5'd21);

assign select_ln117_797_fu_1214_p3 = ((or_ln117_723_fu_1195_p2[0:0] == 1'b1) ? select_ln117_796_fu_1201_p3 : 5'd22);

assign select_ln117_798_fu_1228_p3 = ((or_ln117_724_fu_1209_p2[0:0] == 1'b1) ? select_ln117_797_fu_1214_p3 : 5'd23);

assign select_ln117_799_fu_1242_p3 = ((or_ln117_725_fu_1222_p2[0:0] == 1'b1) ? select_ln117_798_fu_1228_p3 : 5'd24);

assign select_ln117_800_fu_1256_p3 = ((or_ln117_726_fu_1236_p2[0:0] == 1'b1) ? select_ln117_799_fu_1242_p3 : 5'd25);

assign select_ln117_801_fu_1270_p3 = ((or_ln117_727_fu_1250_p2[0:0] == 1'b1) ? select_ln117_800_fu_1256_p3 : 5'd26);

assign select_ln117_802_fu_1284_p3 = ((or_ln117_728_fu_1264_p2[0:0] == 1'b1) ? select_ln117_801_fu_1270_p3 : 5'd27);

assign select_ln117_803_fu_1298_p3 = ((or_ln117_729_fu_1278_p2[0:0] == 1'b1) ? select_ln117_802_fu_1284_p3 : 5'd28);

assign select_ln117_804_fu_1312_p3 = ((or_ln117_730_fu_1292_p2[0:0] == 1'b1) ? select_ln117_803_fu_1298_p3 : 5'd29);

assign select_ln117_fu_776_p3 = ((or_ln117_fu_748_p2[0:0] == 1'b1) ? zext_ln117_fu_766_p1 : 2'd2);

assign tmp_10_fu_552_p4 = {{x_15_val[17:3]}};

assign tmp_fu_488_p4 = {{x_15_val[17:1]}};

assign xor_ln104_379_fu_586_p2 = (icmp_ln86_802_fu_386_p2 ^ 1'd1);

assign xor_ln104_380_fu_972_p2 = (icmp_ln86_803_reg_1469 ^ 1'd1);

assign xor_ln104_381_fu_604_p2 = (icmp_ln86_804_fu_398_p2 ^ 1'd1);

assign xor_ln104_382_fu_622_p2 = (icmp_ln86_805_fu_404_p2 ^ 1'd1);

assign xor_ln104_383_fu_988_p2 = (icmp_ln86_806_reg_1475 ^ 1'd1);

assign xor_ln104_384_fu_1004_p2 = (icmp_ln86_807_reg_1481 ^ 1'd1);

assign xor_ln104_385_fu_640_p2 = (icmp_ln86_808_fu_422_p2 ^ 1'd1);

assign xor_ln104_386_fu_652_p2 = (icmp_ln86_809_fu_428_p2 ^ 1'd1);

assign xor_ln104_387_fu_658_p2 = (icmp_ln86_810_fu_434_p2 ^ 1'd1);

assign xor_ln104_388_fu_676_p2 = (icmp_ln86_811_fu_440_p2 ^ 1'd1);

assign xor_ln104_389_fu_1020_p2 = (icmp_ln86_812_reg_1487 ^ 1'd1);

assign xor_ln104_390_fu_1030_p2 = (icmp_ln86_813_reg_1493 ^ 1'd1);

assign xor_ln104_391_fu_1040_p2 = (icmp_ln86_814_reg_1499 ^ 1'd1);

assign xor_ln104_392_fu_1050_p2 = (icmp_ln86_815_reg_1505 ^ 1'd1);

assign xor_ln104_fu_962_p2 = (icmp_ln86_reg_1460 ^ 1'd1);

assign xor_ln117_fu_754_p2 = (1'd1 ^ and_ln102_987_fu_616_p2);

assign zext_ln117_85_fu_798_p1 = select_ln117_778_fu_790_p3;

assign zext_ln117_86_fu_858_p1 = select_ln117_782_fu_850_p3;

assign zext_ln117_87_fu_1124_p1 = select_ln117_790_reg_1551;

assign zext_ln117_fu_766_p1 = or_ln117_704_fu_760_p2;

endmodule //my_prj_decision_function_71
