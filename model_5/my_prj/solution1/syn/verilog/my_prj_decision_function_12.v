// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_12 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_2_val,
        x_6_val,
        x_8_val,
        x_10_val,
        x_11_val,
        x_16_val,
        x_17_val,
        x_19_val,
        x_22_val,
        x_30_val,
        x_36_val,
        x_38_val,
        x_44_val,
        x_49_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_2_val;
input  [17:0] x_6_val;
input  [17:0] x_8_val;
input  [17:0] x_10_val;
input  [17:0] x_11_val;
input  [17:0] x_16_val;
input  [17:0] x_17_val;
input  [17:0] x_19_val;
input  [17:0] x_22_val;
input  [17:0] x_30_val;
input  [17:0] x_36_val;
input  [17:0] x_38_val;
input  [17:0] x_44_val;
input  [17:0] x_49_val;
input  [17:0] x_52_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_320_fu_362_p2;
reg   [0:0] icmp_ln86_320_reg_1230;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_325_fu_392_p2;
reg   [0:0] icmp_ln86_325_reg_1236;
wire   [0:0] icmp_ln86_326_fu_398_p2;
reg   [0:0] icmp_ln86_326_reg_1242;
wire   [0:0] icmp_ln86_327_fu_404_p2;
reg   [0:0] icmp_ln86_327_reg_1248;
wire   [0:0] icmp_ln86_333_fu_440_p2;
reg   [0:0] icmp_ln86_333_reg_1254;
wire   [0:0] icmp_ln86_334_fu_446_p2;
reg   [0:0] icmp_ln86_334_reg_1259;
wire   [0:0] icmp_ln86_335_fu_452_p2;
reg   [0:0] icmp_ln86_335_reg_1264;
wire   [0:0] icmp_ln86_336_fu_458_p2;
reg   [0:0] icmp_ln86_336_reg_1269;
wire   [0:0] icmp_ln86_337_fu_464_p2;
reg   [0:0] icmp_ln86_337_reg_1274;
wire   [0:0] icmp_ln86_338_fu_470_p2;
reg   [0:0] icmp_ln86_338_reg_1279;
wire   [0:0] and_ln104_59_fu_512_p2;
reg   [0:0] and_ln104_59_reg_1284;
wire   [0:0] and_ln104_62_fu_566_p2;
reg   [0:0] and_ln104_62_reg_1291;
wire   [0:0] or_ln117_302_fu_840_p2;
reg   [0:0] or_ln117_302_reg_1298;
wire   [3:0] select_ln117_319_fu_854_p3;
reg   [3:0] select_ln117_319_reg_1305;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln86_fu_326_p2;
wire   [0:0] icmp_ln86_315_fu_332_p2;
wire   [0:0] xor_ln104_151_fu_488_p2;
wire   [0:0] icmp_ln86_316_fu_338_p2;
wire   [0:0] xor_ln104_fu_476_p2;
wire   [0:0] xor_ln104_152_fu_506_p2;
wire   [0:0] icmp_ln86_317_fu_344_p2;
wire   [0:0] and_ln102_fu_482_p2;
wire   [0:0] xor_ln104_153_fu_524_p2;
wire   [0:0] icmp_ln86_318_fu_350_p2;
wire   [0:0] and_ln104_fu_494_p2;
wire   [0:0] xor_ln104_154_fu_542_p2;
wire   [0:0] icmp_ln86_319_fu_356_p2;
wire   [0:0] and_ln102_303_fu_500_p2;
wire   [0:0] xor_ln104_155_fu_560_p2;
wire   [0:0] icmp_ln86_321_fu_368_p2;
wire   [0:0] and_ln104_60_fu_530_p2;
wire   [0:0] icmp_ln86_322_fu_374_p2;
wire   [0:0] and_ln102_305_fu_536_p2;
wire   [0:0] icmp_ln86_323_fu_380_p2;
wire   [0:0] and_ln104_61_fu_548_p2;
wire   [0:0] icmp_ln86_324_fu_386_p2;
wire   [0:0] and_ln102_306_fu_554_p2;
wire   [0:0] xor_ln104_159_fu_608_p2;
wire   [0:0] icmp_ln86_328_fu_410_p2;
wire   [0:0] and_ln102_308_fu_572_p2;
wire   [0:0] icmp_ln86_329_fu_416_p2;
wire   [0:0] xor_ln104_157_fu_578_p2;
wire   [0:0] and_ln102_326_fu_626_p2;
wire   [0:0] icmp_ln86_330_fu_422_p2;
wire   [0:0] and_ln102_310_fu_590_p2;
wire   [0:0] icmp_ln86_331_fu_428_p2;
wire   [0:0] xor_ln104_158_fu_596_p2;
wire   [0:0] and_ln102_327_fu_644_p2;
wire   [0:0] icmp_ln86_332_fu_434_p2;
wire   [0:0] and_ln102_311_fu_602_p2;
wire   [0:0] and_ln102_304_fu_518_p2;
wire   [0:0] and_ln102_309_fu_584_p2;
wire   [0:0] xor_ln117_fu_668_p2;
wire   [0:0] or_ln117_fu_662_p2;
wire   [1:0] zext_ln117_fu_674_p1;
wire   [0:0] or_ln117_291_fu_678_p2;
wire   [0:0] and_ln104_64_fu_614_p2;
wire   [1:0] select_ln117_fu_684_p3;
wire   [1:0] select_ln117_308_fu_698_p3;
wire   [0:0] or_ln117_292_fu_692_p2;
wire   [0:0] and_ln102_315_fu_620_p2;
wire   [2:0] zext_ln117_33_fu_706_p1;
wire   [0:0] or_ln117_293_fu_710_p2;
wire   [2:0] select_ln117_309_fu_716_p3;
wire   [0:0] or_ln117_294_fu_724_p2;
wire   [0:0] and_ln102_316_fu_632_p2;
wire   [2:0] select_ln117_310_fu_730_p3;
wire   [0:0] or_ln117_295_fu_738_p2;
wire   [2:0] select_ln117_311_fu_744_p3;
wire   [2:0] select_ln117_312_fu_758_p3;
wire   [0:0] or_ln117_296_fu_752_p2;
wire   [0:0] and_ln102_317_fu_638_p2;
wire   [3:0] zext_ln117_34_fu_766_p1;
wire   [0:0] or_ln117_297_fu_770_p2;
wire   [3:0] select_ln117_313_fu_776_p3;
wire   [0:0] or_ln117_298_fu_784_p2;
wire   [0:0] and_ln102_318_fu_650_p2;
wire   [3:0] select_ln117_314_fu_790_p3;
wire   [0:0] or_ln117_299_fu_798_p2;
wire   [3:0] select_ln117_315_fu_804_p3;
wire   [0:0] or_ln117_300_fu_812_p2;
wire   [0:0] and_ln102_319_fu_656_p2;
wire   [3:0] select_ln117_316_fu_818_p3;
wire   [0:0] or_ln117_301_fu_826_p2;
wire   [3:0] select_ln117_317_fu_832_p3;
wire   [3:0] select_ln117_318_fu_846_p3;
wire   [0:0] xor_ln104_156_fu_866_p2;
wire   [0:0] and_ln102_307_fu_862_p2;
wire   [0:0] and_ln104_63_fu_871_p2;
wire   [0:0] and_ln102_312_fu_876_p2;
wire   [0:0] xor_ln104_160_fu_880_p2;
wire   [0:0] and_ln102_328_fu_910_p2;
wire   [0:0] and_ln102_313_fu_885_p2;
wire   [0:0] xor_ln104_161_fu_890_p2;
wire   [0:0] and_ln102_329_fu_925_p2;
wire   [0:0] and_ln102_314_fu_895_p2;
wire   [0:0] xor_ln104_162_fu_900_p2;
wire   [0:0] and_ln102_330_fu_941_p2;
wire   [0:0] and_ln102_320_fu_905_p2;
wire   [0:0] or_ln117_303_fu_952_p2;
wire   [3:0] select_ln117_320_fu_962_p3;
wire   [0:0] or_ln117_304_fu_957_p2;
wire   [0:0] and_ln102_321_fu_915_p2;
wire   [4:0] zext_ln117_35_fu_969_p1;
wire   [0:0] or_ln117_305_fu_973_p2;
wire   [4:0] select_ln117_321_fu_979_p3;
wire   [0:0] or_ln117_306_fu_987_p2;
wire   [0:0] and_ln102_322_fu_920_p2;
wire   [4:0] select_ln117_322_fu_991_p3;
wire   [0:0] or_ln117_307_fu_999_p2;
wire   [4:0] select_ln117_323_fu_1005_p3;
wire   [0:0] or_ln117_308_fu_1013_p2;
wire   [0:0] and_ln102_323_fu_930_p2;
wire   [4:0] select_ln117_324_fu_1019_p3;
wire   [0:0] or_ln117_309_fu_1027_p2;
wire   [4:0] select_ln117_325_fu_1033_p3;
wire   [0:0] or_ln117_310_fu_1041_p2;
wire   [0:0] and_ln102_324_fu_936_p2;
wire   [4:0] select_ln117_326_fu_1047_p3;
wire   [0:0] or_ln117_311_fu_1055_p2;
wire   [4:0] select_ln117_327_fu_1061_p3;
wire   [0:0] or_ln117_312_fu_1069_p2;
wire   [0:0] and_ln102_325_fu_946_p2;
wire   [4:0] select_ln117_328_fu_1075_p3;
wire   [0:0] or_ln117_313_fu_1083_p2;
wire   [4:0] select_ln117_329_fu_1089_p3;
wire   [11:0] tmp_fu_1110_p53;
wire   [4:0] tmp_fu_1110_p54;
wire   [0:0] or_ln117_314_fu_1097_p2;
wire   [11:0] tmp_fu_1110_p55;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] tmp_fu_1110_p1;
wire   [4:0] tmp_fu_1110_p3;
wire   [4:0] tmp_fu_1110_p5;
wire   [4:0] tmp_fu_1110_p7;
wire   [4:0] tmp_fu_1110_p9;
wire   [4:0] tmp_fu_1110_p11;
wire   [4:0] tmp_fu_1110_p13;
wire   [4:0] tmp_fu_1110_p15;
wire   [4:0] tmp_fu_1110_p17;
wire   [4:0] tmp_fu_1110_p19;
wire   [4:0] tmp_fu_1110_p21;
wire   [4:0] tmp_fu_1110_p23;
wire   [4:0] tmp_fu_1110_p25;
wire   [4:0] tmp_fu_1110_p27;
wire   [4:0] tmp_fu_1110_p29;
wire   [4:0] tmp_fu_1110_p31;
wire  signed [4:0] tmp_fu_1110_p33;
wire  signed [4:0] tmp_fu_1110_p35;
wire  signed [4:0] tmp_fu_1110_p37;
wire  signed [4:0] tmp_fu_1110_p39;
wire  signed [4:0] tmp_fu_1110_p41;
wire  signed [4:0] tmp_fu_1110_p43;
wire  signed [4:0] tmp_fu_1110_p45;
wire  signed [4:0] tmp_fu_1110_p47;
wire  signed [4:0] tmp_fu_1110_p49;
wire  signed [4:0] tmp_fu_1110_p51;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_53_5_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_53_5_12_1_1_U1871(
    .din0(12'd3530),
    .din1(12'd1660),
    .din2(12'd97),
    .din3(12'd3763),
    .din4(12'd208),
    .din5(12'd687),
    .din6(12'd3374),
    .din7(12'd213),
    .din8(12'd4038),
    .din9(12'd70),
    .din10(12'd371),
    .din11(12'd3889),
    .din12(12'd124),
    .din13(12'd1031),
    .din14(12'd3894),
    .din15(12'd3568),
    .din16(12'd3916),
    .din17(12'd610),
    .din18(12'd818),
    .din19(12'd3493),
    .din20(12'd222),
    .din21(12'd2012),
    .din22(12'd10),
    .din23(12'd600),
    .din24(12'd3641),
    .din25(12'd181),
    .def(tmp_fu_1110_p53),
    .sel(tmp_fu_1110_p54),
    .dout(tmp_fu_1110_p55)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln104_59_reg_1284 <= and_ln104_59_fu_512_p2;
        and_ln104_62_reg_1291 <= and_ln104_62_fu_566_p2;
        icmp_ln86_320_reg_1230 <= icmp_ln86_320_fu_362_p2;
        icmp_ln86_325_reg_1236 <= icmp_ln86_325_fu_392_p2;
        icmp_ln86_326_reg_1242 <= icmp_ln86_326_fu_398_p2;
        icmp_ln86_327_reg_1248 <= icmp_ln86_327_fu_404_p2;
        icmp_ln86_333_reg_1254 <= icmp_ln86_333_fu_440_p2;
        icmp_ln86_334_reg_1259 <= icmp_ln86_334_fu_446_p2;
        icmp_ln86_335_reg_1264 <= icmp_ln86_335_fu_452_p2;
        icmp_ln86_336_reg_1269 <= icmp_ln86_336_fu_458_p2;
        icmp_ln86_337_reg_1274 <= icmp_ln86_337_fu_464_p2;
        icmp_ln86_338_reg_1279 <= icmp_ln86_338_fu_470_p2;
        or_ln117_302_reg_1298 <= or_ln117_302_fu_840_p2;
        select_ln117_319_reg_1305 <= select_ln117_319_fu_854_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln102_303_fu_500_p2 = (xor_ln104_fu_476_p2 & icmp_ln86_316_fu_338_p2);

assign and_ln102_304_fu_518_p2 = (icmp_ln86_317_fu_344_p2 & and_ln102_fu_482_p2);

assign and_ln102_305_fu_536_p2 = (icmp_ln86_318_fu_350_p2 & and_ln104_fu_494_p2);

assign and_ln102_306_fu_554_p2 = (icmp_ln86_319_fu_356_p2 & and_ln102_303_fu_500_p2);

assign and_ln102_307_fu_862_p2 = (icmp_ln86_320_reg_1230 & and_ln104_59_reg_1284);

assign and_ln102_308_fu_572_p2 = (icmp_ln86_321_fu_368_p2 & and_ln104_60_fu_530_p2);

assign and_ln102_309_fu_584_p2 = (icmp_ln86_322_fu_374_p2 & and_ln102_305_fu_536_p2);

assign and_ln102_310_fu_590_p2 = (icmp_ln86_323_fu_380_p2 & and_ln104_61_fu_548_p2);

assign and_ln102_311_fu_602_p2 = (icmp_ln86_324_fu_386_p2 & and_ln102_306_fu_554_p2);

assign and_ln102_312_fu_876_p2 = (icmp_ln86_325_reg_1236 & and_ln104_62_reg_1291);

assign and_ln102_313_fu_885_p2 = (icmp_ln86_326_reg_1242 & and_ln102_307_fu_862_p2);

assign and_ln102_314_fu_895_p2 = (icmp_ln86_327_reg_1248 & and_ln104_63_fu_871_p2);

assign and_ln102_315_fu_620_p2 = (icmp_ln86_328_fu_410_p2 & and_ln102_308_fu_572_p2);

assign and_ln102_316_fu_632_p2 = (and_ln104_60_fu_530_p2 & and_ln102_326_fu_626_p2);

assign and_ln102_317_fu_638_p2 = (icmp_ln86_330_fu_422_p2 & and_ln102_310_fu_590_p2);

assign and_ln102_318_fu_650_p2 = (and_ln104_61_fu_548_p2 & and_ln102_327_fu_644_p2);

assign and_ln102_319_fu_656_p2 = (icmp_ln86_332_fu_434_p2 & and_ln102_311_fu_602_p2);

assign and_ln102_320_fu_905_p2 = (icmp_ln86_333_reg_1254 & and_ln102_312_fu_876_p2);

assign and_ln102_321_fu_915_p2 = (and_ln104_62_reg_1291 & and_ln102_328_fu_910_p2);

assign and_ln102_322_fu_920_p2 = (icmp_ln86_335_reg_1264 & and_ln102_313_fu_885_p2);

assign and_ln102_323_fu_930_p2 = (and_ln102_329_fu_925_p2 & and_ln102_307_fu_862_p2);

assign and_ln102_324_fu_936_p2 = (icmp_ln86_337_reg_1274 & and_ln102_314_fu_895_p2);

assign and_ln102_325_fu_946_p2 = (and_ln104_63_fu_871_p2 & and_ln102_330_fu_941_p2);

assign and_ln102_326_fu_626_p2 = (xor_ln104_157_fu_578_p2 & icmp_ln86_329_fu_416_p2);

assign and_ln102_327_fu_644_p2 = (xor_ln104_158_fu_596_p2 & icmp_ln86_331_fu_428_p2);

assign and_ln102_328_fu_910_p2 = (xor_ln104_160_fu_880_p2 & icmp_ln86_334_reg_1259);

assign and_ln102_329_fu_925_p2 = (xor_ln104_161_fu_890_p2 & icmp_ln86_336_reg_1269);

assign and_ln102_330_fu_941_p2 = (xor_ln104_162_fu_900_p2 & icmp_ln86_338_reg_1279);

assign and_ln102_fu_482_p2 = (icmp_ln86_fu_326_p2 & icmp_ln86_315_fu_332_p2);

assign and_ln104_59_fu_512_p2 = (xor_ln104_fu_476_p2 & xor_ln104_152_fu_506_p2);

assign and_ln104_60_fu_530_p2 = (xor_ln104_153_fu_524_p2 & and_ln102_fu_482_p2);

assign and_ln104_61_fu_548_p2 = (xor_ln104_154_fu_542_p2 & and_ln104_fu_494_p2);

assign and_ln104_62_fu_566_p2 = (xor_ln104_155_fu_560_p2 & and_ln102_303_fu_500_p2);

assign and_ln104_63_fu_871_p2 = (xor_ln104_156_fu_866_p2 & and_ln104_59_reg_1284);

assign and_ln104_64_fu_614_p2 = (xor_ln104_159_fu_608_p2 & and_ln102_306_fu_554_p2);

assign and_ln104_fu_494_p2 = (xor_ln104_151_fu_488_p2 & icmp_ln86_fu_326_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((or_ln117_314_fu_1097_p2[0:0] == 1'b1) ? tmp_fu_1110_p55 : 12'd0);

assign icmp_ln86_315_fu_332_p2 = (($signed(x_11_val) < $signed(18'd241)) ? 1'b1 : 1'b0);

assign icmp_ln86_316_fu_338_p2 = (($signed(x_1_val) < $signed(18'd146787)) ? 1'b1 : 1'b0);

assign icmp_ln86_317_fu_344_p2 = (($signed(x_52_val) < $signed(18'd26113)) ? 1'b1 : 1'b0);

assign icmp_ln86_318_fu_350_p2 = (($signed(x_49_val) < $signed(18'd2685)) ? 1'b1 : 1'b0);

assign icmp_ln86_319_fu_356_p2 = (($signed(x_11_val) < $signed(18'd292)) ? 1'b1 : 1'b0);

assign icmp_ln86_320_fu_362_p2 = (($signed(x_2_val) < $signed(18'd261414)) ? 1'b1 : 1'b0);

assign icmp_ln86_321_fu_368_p2 = (($signed(x_8_val) < $signed(18'd5077)) ? 1'b1 : 1'b0);

assign icmp_ln86_322_fu_374_p2 = (($signed(x_19_val) < $signed(18'd43413)) ? 1'b1 : 1'b0);

assign icmp_ln86_323_fu_380_p2 = (($signed(x_1_val) < $signed(18'd213737)) ? 1'b1 : 1'b0);

assign icmp_ln86_324_fu_386_p2 = (($signed(x_17_val) < $signed(18'd29)) ? 1'b1 : 1'b0);

assign icmp_ln86_325_fu_392_p2 = (($signed(x_10_val) < $signed(18'd854)) ? 1'b1 : 1'b0);

assign icmp_ln86_326_fu_398_p2 = (($signed(x_10_val) < $signed(18'd851)) ? 1'b1 : 1'b0);

assign icmp_ln86_327_fu_404_p2 = (($signed(x_38_val) < $signed(18'd45)) ? 1'b1 : 1'b0);

assign icmp_ln86_328_fu_410_p2 = (($signed(x_6_val) < $signed(18'd12856)) ? 1'b1 : 1'b0);

assign icmp_ln86_329_fu_416_p2 = (($signed(x_16_val) < $signed(18'd105)) ? 1'b1 : 1'b0);

assign icmp_ln86_330_fu_422_p2 = (($signed(x_36_val) < $signed(18'd9)) ? 1'b1 : 1'b0);

assign icmp_ln86_331_fu_428_p2 = (($signed(x_44_val) < $signed(18'd55)) ? 1'b1 : 1'b0);

assign icmp_ln86_332_fu_434_p2 = (($signed(x_2_val) < $signed(18'd244)) ? 1'b1 : 1'b0);

assign icmp_ln86_333_fu_440_p2 = (($signed(x_10_val) < $signed(18'd748)) ? 1'b1 : 1'b0);

assign icmp_ln86_334_fu_446_p2 = (($signed(x_11_val) < $signed(18'd953)) ? 1'b1 : 1'b0);

assign icmp_ln86_335_fu_452_p2 = (($signed(x_11_val) < $signed(18'd632)) ? 1'b1 : 1'b0);

assign icmp_ln86_336_fu_458_p2 = (($signed(x_22_val) < $signed(18'd55)) ? 1'b1 : 1'b0);

assign icmp_ln86_337_fu_464_p2 = (($signed(x_30_val) < $signed(18'd11699)) ? 1'b1 : 1'b0);

assign icmp_ln86_338_fu_470_p2 = (($signed(x_2_val) < $signed(18'd973)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_326_p2 = (($signed(x_2_val) < $signed(18'd261412)) ? 1'b1 : 1'b0);

assign or_ln117_291_fu_678_p2 = (and_ln102_305_fu_536_p2 | and_ln102_304_fu_518_p2);

assign or_ln117_292_fu_692_p2 = (or_ln117_291_fu_678_p2 | and_ln104_64_fu_614_p2);

assign or_ln117_293_fu_710_p2 = (or_ln117_292_fu_692_p2 | and_ln102_315_fu_620_p2);

assign or_ln117_294_fu_724_p2 = (or_ln117_292_fu_692_p2 | and_ln102_308_fu_572_p2);

assign or_ln117_295_fu_738_p2 = (or_ln117_294_fu_724_p2 | and_ln102_316_fu_632_p2);

assign or_ln117_296_fu_752_p2 = (or_ln117_292_fu_692_p2 | and_ln104_60_fu_530_p2);

assign or_ln117_297_fu_770_p2 = (or_ln117_296_fu_752_p2 | and_ln102_317_fu_638_p2);

assign or_ln117_298_fu_784_p2 = (or_ln117_296_fu_752_p2 | and_ln102_310_fu_590_p2);

assign or_ln117_299_fu_798_p2 = (or_ln117_298_fu_784_p2 | and_ln102_318_fu_650_p2);

assign or_ln117_300_fu_812_p2 = (or_ln117_296_fu_752_p2 | and_ln104_61_fu_548_p2);

assign or_ln117_301_fu_826_p2 = (or_ln117_300_fu_812_p2 | and_ln102_319_fu_656_p2);

assign or_ln117_302_fu_840_p2 = (or_ln117_300_fu_812_p2 | and_ln102_311_fu_602_p2);

assign or_ln117_303_fu_952_p2 = (or_ln117_302_reg_1298 | and_ln102_320_fu_905_p2);

assign or_ln117_304_fu_957_p2 = (or_ln117_302_reg_1298 | and_ln102_312_fu_876_p2);

assign or_ln117_305_fu_973_p2 = (or_ln117_304_fu_957_p2 | and_ln102_321_fu_915_p2);

assign or_ln117_306_fu_987_p2 = (or_ln117_302_reg_1298 | and_ln104_62_reg_1291);

assign or_ln117_307_fu_999_p2 = (or_ln117_306_fu_987_p2 | and_ln102_322_fu_920_p2);

assign or_ln117_308_fu_1013_p2 = (or_ln117_306_fu_987_p2 | and_ln102_313_fu_885_p2);

assign or_ln117_309_fu_1027_p2 = (or_ln117_308_fu_1013_p2 | and_ln102_323_fu_930_p2);

assign or_ln117_310_fu_1041_p2 = (or_ln117_306_fu_987_p2 | and_ln102_307_fu_862_p2);

assign or_ln117_311_fu_1055_p2 = (or_ln117_310_fu_1041_p2 | and_ln102_324_fu_936_p2);

assign or_ln117_312_fu_1069_p2 = (or_ln117_310_fu_1041_p2 | and_ln102_314_fu_895_p2);

assign or_ln117_313_fu_1083_p2 = (or_ln117_312_fu_1069_p2 | and_ln102_325_fu_946_p2);

assign or_ln117_314_fu_1097_p2 = (or_ln117_306_fu_987_p2 | and_ln104_59_reg_1284);

assign or_ln117_fu_662_p2 = (and_ln102_309_fu_584_p2 | and_ln102_304_fu_518_p2);

assign select_ln117_308_fu_698_p3 = ((or_ln117_291_fu_678_p2[0:0] == 1'b1) ? select_ln117_fu_684_p3 : 2'd3);

assign select_ln117_309_fu_716_p3 = ((or_ln117_292_fu_692_p2[0:0] == 1'b1) ? zext_ln117_33_fu_706_p1 : 3'd4);

assign select_ln117_310_fu_730_p3 = ((or_ln117_293_fu_710_p2[0:0] == 1'b1) ? select_ln117_309_fu_716_p3 : 3'd5);

assign select_ln117_311_fu_744_p3 = ((or_ln117_294_fu_724_p2[0:0] == 1'b1) ? select_ln117_310_fu_730_p3 : 3'd6);

assign select_ln117_312_fu_758_p3 = ((or_ln117_295_fu_738_p2[0:0] == 1'b1) ? select_ln117_311_fu_744_p3 : 3'd7);

assign select_ln117_313_fu_776_p3 = ((or_ln117_296_fu_752_p2[0:0] == 1'b1) ? zext_ln117_34_fu_766_p1 : 4'd8);

assign select_ln117_314_fu_790_p3 = ((or_ln117_297_fu_770_p2[0:0] == 1'b1) ? select_ln117_313_fu_776_p3 : 4'd9);

assign select_ln117_315_fu_804_p3 = ((or_ln117_298_fu_784_p2[0:0] == 1'b1) ? select_ln117_314_fu_790_p3 : 4'd10);

assign select_ln117_316_fu_818_p3 = ((or_ln117_299_fu_798_p2[0:0] == 1'b1) ? select_ln117_315_fu_804_p3 : 4'd11);

assign select_ln117_317_fu_832_p3 = ((or_ln117_300_fu_812_p2[0:0] == 1'b1) ? select_ln117_316_fu_818_p3 : 4'd12);

assign select_ln117_318_fu_846_p3 = ((or_ln117_301_fu_826_p2[0:0] == 1'b1) ? select_ln117_317_fu_832_p3 : 4'd13);

assign select_ln117_319_fu_854_p3 = ((or_ln117_302_fu_840_p2[0:0] == 1'b1) ? select_ln117_318_fu_846_p3 : 4'd14);

assign select_ln117_320_fu_962_p3 = ((or_ln117_303_fu_952_p2[0:0] == 1'b1) ? select_ln117_319_reg_1305 : 4'd15);

assign select_ln117_321_fu_979_p3 = ((or_ln117_304_fu_957_p2[0:0] == 1'b1) ? zext_ln117_35_fu_969_p1 : 5'd16);

assign select_ln117_322_fu_991_p3 = ((or_ln117_305_fu_973_p2[0:0] == 1'b1) ? select_ln117_321_fu_979_p3 : 5'd17);

assign select_ln117_323_fu_1005_p3 = ((or_ln117_306_fu_987_p2[0:0] == 1'b1) ? select_ln117_322_fu_991_p3 : 5'd18);

assign select_ln117_324_fu_1019_p3 = ((or_ln117_307_fu_999_p2[0:0] == 1'b1) ? select_ln117_323_fu_1005_p3 : 5'd19);

assign select_ln117_325_fu_1033_p3 = ((or_ln117_308_fu_1013_p2[0:0] == 1'b1) ? select_ln117_324_fu_1019_p3 : 5'd20);

assign select_ln117_326_fu_1047_p3 = ((or_ln117_309_fu_1027_p2[0:0] == 1'b1) ? select_ln117_325_fu_1033_p3 : 5'd21);

assign select_ln117_327_fu_1061_p3 = ((or_ln117_310_fu_1041_p2[0:0] == 1'b1) ? select_ln117_326_fu_1047_p3 : 5'd22);

assign select_ln117_328_fu_1075_p3 = ((or_ln117_311_fu_1055_p2[0:0] == 1'b1) ? select_ln117_327_fu_1061_p3 : 5'd23);

assign select_ln117_329_fu_1089_p3 = ((or_ln117_312_fu_1069_p2[0:0] == 1'b1) ? select_ln117_328_fu_1075_p3 : 5'd24);

assign select_ln117_fu_684_p3 = ((or_ln117_fu_662_p2[0:0] == 1'b1) ? zext_ln117_fu_674_p1 : 2'd2);

assign tmp_fu_1110_p53 = 'bx;

assign tmp_fu_1110_p54 = ((or_ln117_313_fu_1083_p2[0:0] == 1'b1) ? select_ln117_329_fu_1089_p3 : 5'd25);

assign xor_ln104_151_fu_488_p2 = (icmp_ln86_315_fu_332_p2 ^ 1'd1);

assign xor_ln104_152_fu_506_p2 = (icmp_ln86_316_fu_338_p2 ^ 1'd1);

assign xor_ln104_153_fu_524_p2 = (icmp_ln86_317_fu_344_p2 ^ 1'd1);

assign xor_ln104_154_fu_542_p2 = (icmp_ln86_318_fu_350_p2 ^ 1'd1);

assign xor_ln104_155_fu_560_p2 = (icmp_ln86_319_fu_356_p2 ^ 1'd1);

assign xor_ln104_156_fu_866_p2 = (icmp_ln86_320_reg_1230 ^ 1'd1);

assign xor_ln104_157_fu_578_p2 = (icmp_ln86_321_fu_368_p2 ^ 1'd1);

assign xor_ln104_158_fu_596_p2 = (icmp_ln86_323_fu_380_p2 ^ 1'd1);

assign xor_ln104_159_fu_608_p2 = (icmp_ln86_324_fu_386_p2 ^ 1'd1);

assign xor_ln104_160_fu_880_p2 = (icmp_ln86_325_reg_1236 ^ 1'd1);

assign xor_ln104_161_fu_890_p2 = (icmp_ln86_326_reg_1242 ^ 1'd1);

assign xor_ln104_162_fu_900_p2 = (icmp_ln86_327_reg_1248 ^ 1'd1);

assign xor_ln104_fu_476_p2 = (icmp_ln86_fu_326_p2 ^ 1'd1);

assign xor_ln117_fu_668_p2 = (1'd1 ^ and_ln102_304_fu_518_p2);

assign zext_ln117_33_fu_706_p1 = select_ln117_308_fu_698_p3;

assign zext_ln117_34_fu_766_p1 = select_ln117_312_fu_758_p3;

assign zext_ln117_35_fu_969_p1 = select_ln117_320_fu_962_p3;

assign zext_ln117_fu_674_p1 = xor_ln117_fu_668_p2;

endmodule //my_prj_decision_function_12
