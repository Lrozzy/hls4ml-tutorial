// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_78 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_2_val,
        x_3_val,
        x_6_val,
        x_7_val,
        x_10_val,
        x_16_val,
        x_17_val,
        x_18_val,
        x_19_val,
        x_23_val,
        x_24_val,
        x_25_val,
        x_29_val,
        x_30_val,
        x_42_val,
        x_45_val,
        x_47_val,
        x_50_val,
        x_51_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_2_val;
input  [17:0] x_3_val;
input  [17:0] x_6_val;
input  [17:0] x_7_val;
input  [17:0] x_10_val;
input  [17:0] x_16_val;
input  [17:0] x_17_val;
input  [17:0] x_18_val;
input  [17:0] x_19_val;
input  [17:0] x_23_val;
input  [17:0] x_24_val;
input  [17:0] x_25_val;
input  [17:0] x_29_val;
input  [17:0] x_30_val;
input  [17:0] x_42_val;
input  [17:0] x_45_val;
input  [17:0] x_47_val;
input  [17:0] x_50_val;
input  [17:0] x_51_val;
input  [17:0] x_52_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
reg   [17:0] x_51_val_read_reg_1470;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_fu_402_p2;
reg   [0:0] icmp_ln86_reg_1475;
wire   [0:0] icmp_ln86_597_fu_414_p2;
reg   [0:0] icmp_ln86_597_reg_1484;
wire   [0:0] icmp_ln86_600_fu_432_p2;
reg   [0:0] icmp_ln86_600_reg_1490;
wire   [0:0] icmp_ln86_601_fu_438_p2;
reg   [0:0] icmp_ln86_601_reg_1496;
wire   [0:0] icmp_ln86_606_fu_468_p2;
reg   [0:0] icmp_ln86_606_reg_1502;
wire   [0:0] icmp_ln86_607_fu_474_p2;
reg   [0:0] icmp_ln86_607_reg_1508;
wire   [0:0] icmp_ln86_608_fu_480_p2;
reg   [0:0] icmp_ln86_608_reg_1514;
wire   [0:0] icmp_ln86_609_fu_486_p2;
reg   [0:0] icmp_ln86_609_reg_1520;
wire   [0:0] icmp_ln86_618_fu_540_p2;
reg   [0:0] icmp_ln86_618_reg_1526;
wire   [0:0] icmp_ln86_619_fu_546_p2;
reg   [0:0] icmp_ln86_619_reg_1531;
wire   [0:0] icmp_ln86_620_fu_552_p2;
reg   [0:0] icmp_ln86_620_reg_1536;
wire   [0:0] icmp_ln86_621_fu_558_p2;
reg   [0:0] icmp_ln86_621_reg_1541;
wire   [0:0] icmp_ln86_622_fu_564_p2;
reg   [0:0] icmp_ln86_622_reg_1546;
wire   [0:0] icmp_ln86_623_fu_570_p2;
reg   [0:0] icmp_ln86_623_reg_1551;
wire   [0:0] icmp_ln86_624_fu_576_p2;
reg   [0:0] icmp_ln86_624_reg_1556;
wire   [4:0] select_ln117_591_fu_956_p3;
reg   [4:0] select_ln117_591_reg_1561;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln86_596_fu_408_p2;
wire   [0:0] xor_ln104_281_fu_588_p2;
wire   [0:0] icmp_ln86_598_fu_420_p2;
wire   [0:0] and_ln102_fu_582_p2;
wire   [0:0] xor_ln104_283_fu_606_p2;
wire   [0:0] icmp_ln86_599_fu_426_p2;
wire   [0:0] and_ln104_fu_594_p2;
wire   [0:0] xor_ln104_284_fu_624_p2;
wire   [0:0] icmp_ln86_602_fu_444_p2;
wire   [0:0] and_ln102_733_fu_600_p2;
wire   [0:0] icmp_ln86_603_fu_450_p2;
wire   [0:0] and_ln104_106_fu_612_p2;
wire   [0:0] icmp_ln86_604_fu_456_p2;
wire   [0:0] and_ln102_734_fu_618_p2;
wire   [0:0] icmp_ln86_605_fu_462_p2;
wire   [0:0] and_ln104_107_fu_630_p2;
wire   [0:0] icmp_ln86_610_fu_492_p2;
wire   [0:0] and_ln102_737_fu_636_p2;
wire   [0:0] icmp_ln86_611_fu_498_p2;
wire   [0:0] xor_ln104_287_fu_642_p2;
wire   [0:0] and_ln102_746_fu_690_p2;
wire   [0:0] icmp_ln86_612_fu_504_p2;
wire   [0:0] and_ln102_738_fu_648_p2;
wire   [0:0] icmp_ln86_613_fu_510_p2;
wire   [0:0] xor_ln104_288_fu_654_p2;
wire   [0:0] and_ln102_749_fu_708_p2;
wire   [0:0] icmp_ln86_614_fu_516_p2;
wire   [0:0] and_ln102_739_fu_660_p2;
wire   [0:0] icmp_ln86_615_fu_522_p2;
wire   [0:0] xor_ln104_289_fu_666_p2;
wire   [0:0] and_ln102_752_fu_726_p2;
wire   [0:0] icmp_ln86_616_fu_528_p2;
wire   [0:0] and_ln102_740_fu_672_p2;
wire   [0:0] icmp_ln86_617_fu_534_p2;
wire   [0:0] xor_ln104_290_fu_678_p2;
wire   [0:0] and_ln102_755_fu_744_p2;
wire   [0:0] and_ln102_745_fu_684_p2;
wire   [0:0] xor_ln117_fu_756_p2;
wire   [0:0] and_ln102_747_fu_696_p2;
wire   [1:0] zext_ln117_fu_762_p1;
wire   [0:0] or_ln117_fu_766_p2;
wire   [1:0] select_ln117_fu_772_p3;
wire   [1:0] select_ln117_578_fu_780_p3;
wire   [0:0] and_ln102_748_fu_702_p2;
wire   [2:0] zext_ln117_64_fu_788_p1;
wire   [0:0] or_ln117_523_fu_792_p2;
wire   [2:0] select_ln117_579_fu_798_p3;
wire   [0:0] or_ln117_524_fu_806_p2;
wire   [0:0] and_ln102_750_fu_714_p2;
wire   [2:0] select_ln117_580_fu_812_p3;
wire   [0:0] or_ln117_525_fu_820_p2;
wire   [2:0] select_ln117_581_fu_826_p3;
wire   [2:0] select_ln117_582_fu_834_p3;
wire   [0:0] and_ln102_751_fu_720_p2;
wire   [3:0] zext_ln117_65_fu_842_p1;
wire   [0:0] or_ln117_526_fu_846_p2;
wire   [3:0] select_ln117_583_fu_852_p3;
wire   [0:0] or_ln117_527_fu_860_p2;
wire   [0:0] and_ln102_753_fu_732_p2;
wire   [3:0] select_ln117_584_fu_866_p3;
wire   [0:0] or_ln117_528_fu_874_p2;
wire   [3:0] select_ln117_585_fu_880_p3;
wire   [0:0] or_ln117_529_fu_888_p2;
wire   [0:0] and_ln102_754_fu_738_p2;
wire   [3:0] select_ln117_586_fu_894_p3;
wire   [0:0] or_ln117_530_fu_902_p2;
wire   [3:0] select_ln117_587_fu_908_p3;
wire   [0:0] or_ln117_531_fu_916_p2;
wire   [0:0] and_ln102_756_fu_750_p2;
wire   [3:0] select_ln117_588_fu_922_p3;
wire   [0:0] or_ln117_532_fu_930_p2;
wire   [3:0] select_ln117_589_fu_936_p3;
wire   [3:0] select_ln117_590_fu_944_p3;
wire   [4:0] zext_ln117_66_fu_952_p1;
wire   [0:0] xor_ln104_fu_971_p2;
wire   [0:0] xor_ln104_282_fu_981_p2;
wire   [0:0] and_ln102_732_fu_976_p2;
wire   [0:0] xor_ln104_285_fu_997_p2;
wire   [0:0] and_ln104_105_fu_986_p2;
wire   [0:0] xor_ln104_286_fu_1013_p2;
wire   [0:0] and_ln102_735_fu_992_p2;
wire   [0:0] and_ln104_108_fu_1002_p2;
wire   [0:0] and_ln102_736_fu_1008_p2;
wire   [0:0] and_ln104_109_fu_1018_p2;
wire   [0:0] and_ln102_741_fu_1024_p2;
wire   [0:0] xor_ln104_291_fu_1029_p2;
wire   [0:0] and_ln102_758_fu_1069_p2;
wire   [0:0] tmp_fu_964_p3;
wire   [0:0] and_ln102_742_fu_1034_p2;
wire   [0:0] xor_ln104_292_fu_1039_p2;
wire   [0:0] and_ln102_761_fu_1086_p2;
wire   [0:0] and_ln102_743_fu_1044_p2;
wire   [0:0] xor_ln104_293_fu_1049_p2;
wire   [0:0] and_ln102_764_fu_1102_p2;
wire   [0:0] and_ln102_744_fu_1054_p2;
wire   [0:0] xor_ln104_294_fu_1059_p2;
wire   [0:0] and_ln102_767_fu_1118_p2;
wire   [0:0] and_ln102_757_fu_1064_p2;
wire   [0:0] or_ln117_533_fu_1129_p2;
wire   [0:0] or_ln117_534_fu_1134_p2;
wire   [0:0] and_ln102_759_fu_1074_p2;
wire   [4:0] select_ln117_592_fu_1139_p3;
wire   [0:0] or_ln117_535_fu_1146_p2;
wire   [4:0] select_ln117_593_fu_1152_p3;
wire   [0:0] or_ln117_536_fu_1160_p2;
wire   [0:0] and_ln102_760_fu_1080_p2;
wire   [4:0] select_ln117_594_fu_1165_p3;
wire   [0:0] or_ln117_537_fu_1173_p2;
wire   [4:0] select_ln117_595_fu_1179_p3;
wire   [0:0] or_ln117_538_fu_1187_p2;
wire   [0:0] and_ln102_762_fu_1091_p2;
wire   [4:0] select_ln117_596_fu_1193_p3;
wire   [0:0] or_ln117_539_fu_1201_p2;
wire   [4:0] select_ln117_597_fu_1207_p3;
wire   [0:0] or_ln117_540_fu_1215_p2;
wire   [0:0] and_ln102_763_fu_1097_p2;
wire   [4:0] select_ln117_598_fu_1220_p3;
wire   [0:0] or_ln117_541_fu_1228_p2;
wire   [4:0] select_ln117_599_fu_1234_p3;
wire   [0:0] or_ln117_542_fu_1242_p2;
wire   [0:0] and_ln102_765_fu_1107_p2;
wire   [4:0] select_ln117_600_fu_1248_p3;
wire   [0:0] or_ln117_543_fu_1256_p2;
wire   [4:0] select_ln117_601_fu_1262_p3;
wire   [0:0] or_ln117_544_fu_1270_p2;
wire   [0:0] and_ln102_766_fu_1113_p2;
wire   [4:0] select_ln117_602_fu_1276_p3;
wire   [0:0] or_ln117_545_fu_1284_p2;
wire   [4:0] select_ln117_603_fu_1290_p3;
wire   [0:0] or_ln117_546_fu_1298_p2;
wire   [0:0] and_ln102_768_fu_1123_p2;
wire   [4:0] select_ln117_604_fu_1304_p3;
wire   [0:0] or_ln117_547_fu_1312_p2;
wire   [4:0] select_ln117_605_fu_1318_p3;
wire   [11:0] agg_result_fu_1334_p65;
wire   [4:0] agg_result_fu_1334_p66;
wire   [11:0] agg_result_fu_1334_p67;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1334_p1;
wire   [4:0] agg_result_fu_1334_p3;
wire   [4:0] agg_result_fu_1334_p5;
wire   [4:0] agg_result_fu_1334_p7;
wire   [4:0] agg_result_fu_1334_p9;
wire   [4:0] agg_result_fu_1334_p11;
wire   [4:0] agg_result_fu_1334_p13;
wire   [4:0] agg_result_fu_1334_p15;
wire   [4:0] agg_result_fu_1334_p17;
wire   [4:0] agg_result_fu_1334_p19;
wire   [4:0] agg_result_fu_1334_p21;
wire   [4:0] agg_result_fu_1334_p23;
wire   [4:0] agg_result_fu_1334_p25;
wire   [4:0] agg_result_fu_1334_p27;
wire   [4:0] agg_result_fu_1334_p29;
wire   [4:0] agg_result_fu_1334_p31;
wire  signed [4:0] agg_result_fu_1334_p33;
wire  signed [4:0] agg_result_fu_1334_p35;
wire  signed [4:0] agg_result_fu_1334_p37;
wire  signed [4:0] agg_result_fu_1334_p39;
wire  signed [4:0] agg_result_fu_1334_p41;
wire  signed [4:0] agg_result_fu_1334_p43;
wire  signed [4:0] agg_result_fu_1334_p45;
wire  signed [4:0] agg_result_fu_1334_p47;
wire  signed [4:0] agg_result_fu_1334_p49;
wire  signed [4:0] agg_result_fu_1334_p51;
wire  signed [4:0] agg_result_fu_1334_p53;
wire  signed [4:0] agg_result_fu_1334_p55;
wire  signed [4:0] agg_result_fu_1334_p57;
wire  signed [4:0] agg_result_fu_1334_p59;
wire  signed [4:0] agg_result_fu_1334_p61;
wire  signed [4:0] agg_result_fu_1334_p63;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_65_5_12_1_1_x11 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 12 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 12 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 12 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 12 ),
    .CASE31( 5'h1F ),
    .din31_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_65_5_12_1_1_x11_U563(
    .din0(12'd3996),
    .din1(12'd1203),
    .din2(12'd3633),
    .din3(12'd3965),
    .din4(12'd11),
    .din5(12'd163),
    .din6(12'd314),
    .din7(12'd80),
    .din8(12'd4007),
    .din9(12'd331),
    .din10(12'd3707),
    .din11(12'd518),
    .din12(12'd109),
    .din13(12'd3700),
    .din14(12'd3944),
    .din15(12'd1203),
    .din16(12'd3917),
    .din17(12'd69),
    .din18(12'd185),
    .din19(12'd3955),
    .din20(12'd251),
    .din21(12'd3627),
    .din22(12'd3754),
    .din23(12'd4001),
    .din24(12'd576),
    .din25(12'd3886),
    .din26(12'd67),
    .din27(12'd3711),
    .din28(12'd3640),
    .din29(12'd200),
    .din30(12'd3911),
    .din31(12'd4087),
    .def(agg_result_fu_1334_p65),
    .sel(agg_result_fu_1334_p66),
    .dout(agg_result_fu_1334_p67)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_597_reg_1484 <= icmp_ln86_597_fu_414_p2;
        icmp_ln86_600_reg_1490 <= icmp_ln86_600_fu_432_p2;
        icmp_ln86_601_reg_1496 <= icmp_ln86_601_fu_438_p2;
        icmp_ln86_606_reg_1502 <= icmp_ln86_606_fu_468_p2;
        icmp_ln86_607_reg_1508 <= icmp_ln86_607_fu_474_p2;
        icmp_ln86_608_reg_1514 <= icmp_ln86_608_fu_480_p2;
        icmp_ln86_609_reg_1520 <= icmp_ln86_609_fu_486_p2;
        icmp_ln86_618_reg_1526 <= icmp_ln86_618_fu_540_p2;
        icmp_ln86_619_reg_1531 <= icmp_ln86_619_fu_546_p2;
        icmp_ln86_620_reg_1536 <= icmp_ln86_620_fu_552_p2;
        icmp_ln86_621_reg_1541 <= icmp_ln86_621_fu_558_p2;
        icmp_ln86_622_reg_1546 <= icmp_ln86_622_fu_564_p2;
        icmp_ln86_623_reg_1551 <= icmp_ln86_623_fu_570_p2;
        icmp_ln86_624_reg_1556 <= icmp_ln86_624_fu_576_p2;
        icmp_ln86_reg_1475 <= icmp_ln86_fu_402_p2;
        select_ln117_591_reg_1561 <= select_ln117_591_fu_956_p3;
        x_51_val_read_reg_1470 <= x_51_val;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1334_p65 = 'bx;

assign agg_result_fu_1334_p66 = ((or_ln117_547_fu_1312_p2[0:0] == 1'b1) ? select_ln117_605_fu_1318_p3 : 5'd31);

assign and_ln102_732_fu_976_p2 = (xor_ln104_fu_971_p2 & icmp_ln86_597_reg_1484);

assign and_ln102_733_fu_600_p2 = (icmp_ln86_598_fu_420_p2 & and_ln102_fu_582_p2);

assign and_ln102_734_fu_618_p2 = (icmp_ln86_599_fu_426_p2 & and_ln104_fu_594_p2);

assign and_ln102_735_fu_992_p2 = (icmp_ln86_600_reg_1490 & and_ln102_732_fu_976_p2);

assign and_ln102_736_fu_1008_p2 = (icmp_ln86_601_reg_1496 & and_ln104_105_fu_986_p2);

assign and_ln102_737_fu_636_p2 = (icmp_ln86_602_fu_444_p2 & and_ln102_733_fu_600_p2);

assign and_ln102_738_fu_648_p2 = (icmp_ln86_603_fu_450_p2 & and_ln104_106_fu_612_p2);

assign and_ln102_739_fu_660_p2 = (icmp_ln86_604_fu_456_p2 & and_ln102_734_fu_618_p2);

assign and_ln102_740_fu_672_p2 = (icmp_ln86_605_fu_462_p2 & and_ln104_107_fu_630_p2);

assign and_ln102_741_fu_1024_p2 = (icmp_ln86_606_reg_1502 & and_ln102_735_fu_992_p2);

assign and_ln102_742_fu_1034_p2 = (icmp_ln86_607_reg_1508 & and_ln104_108_fu_1002_p2);

assign and_ln102_743_fu_1044_p2 = (icmp_ln86_608_reg_1514 & and_ln102_736_fu_1008_p2);

assign and_ln102_744_fu_1054_p2 = (icmp_ln86_609_reg_1520 & and_ln104_109_fu_1018_p2);

assign and_ln102_745_fu_684_p2 = (icmp_ln86_610_fu_492_p2 & and_ln102_737_fu_636_p2);

assign and_ln102_746_fu_690_p2 = (xor_ln104_287_fu_642_p2 & icmp_ln86_611_fu_498_p2);

assign and_ln102_747_fu_696_p2 = (and_ln102_746_fu_690_p2 & and_ln102_733_fu_600_p2);

assign and_ln102_748_fu_702_p2 = (icmp_ln86_612_fu_504_p2 & and_ln102_738_fu_648_p2);

assign and_ln102_749_fu_708_p2 = (xor_ln104_288_fu_654_p2 & icmp_ln86_613_fu_510_p2);

assign and_ln102_750_fu_714_p2 = (and_ln104_106_fu_612_p2 & and_ln102_749_fu_708_p2);

assign and_ln102_751_fu_720_p2 = (icmp_ln86_614_fu_516_p2 & and_ln102_739_fu_660_p2);

assign and_ln102_752_fu_726_p2 = (xor_ln104_289_fu_666_p2 & icmp_ln86_615_fu_522_p2);

assign and_ln102_753_fu_732_p2 = (and_ln102_752_fu_726_p2 & and_ln102_734_fu_618_p2);

assign and_ln102_754_fu_738_p2 = (icmp_ln86_616_fu_528_p2 & and_ln102_740_fu_672_p2);

assign and_ln102_755_fu_744_p2 = (xor_ln104_290_fu_678_p2 & icmp_ln86_617_fu_534_p2);

assign and_ln102_756_fu_750_p2 = (and_ln104_107_fu_630_p2 & and_ln102_755_fu_744_p2);

assign and_ln102_757_fu_1064_p2 = (icmp_ln86_618_reg_1526 & and_ln102_741_fu_1024_p2);

assign and_ln102_758_fu_1069_p2 = (xor_ln104_291_fu_1029_p2 & icmp_ln86_619_reg_1531);

assign and_ln102_759_fu_1074_p2 = (and_ln102_758_fu_1069_p2 & and_ln102_735_fu_992_p2);

assign and_ln102_760_fu_1080_p2 = (tmp_fu_964_p3 & and_ln102_742_fu_1034_p2);

assign and_ln102_761_fu_1086_p2 = (xor_ln104_292_fu_1039_p2 & icmp_ln86_620_reg_1536);

assign and_ln102_762_fu_1091_p2 = (and_ln104_108_fu_1002_p2 & and_ln102_761_fu_1086_p2);

assign and_ln102_763_fu_1097_p2 = (icmp_ln86_621_reg_1541 & and_ln102_743_fu_1044_p2);

assign and_ln102_764_fu_1102_p2 = (xor_ln104_293_fu_1049_p2 & icmp_ln86_622_reg_1546);

assign and_ln102_765_fu_1107_p2 = (and_ln102_764_fu_1102_p2 & and_ln102_736_fu_1008_p2);

assign and_ln102_766_fu_1113_p2 = (icmp_ln86_623_reg_1551 & and_ln102_744_fu_1054_p2);

assign and_ln102_767_fu_1118_p2 = (xor_ln104_294_fu_1059_p2 & icmp_ln86_624_reg_1556);

assign and_ln102_768_fu_1123_p2 = (and_ln104_109_fu_1018_p2 & and_ln102_767_fu_1118_p2);

assign and_ln102_fu_582_p2 = (icmp_ln86_fu_402_p2 & icmp_ln86_596_fu_408_p2);

assign and_ln104_105_fu_986_p2 = (xor_ln104_fu_971_p2 & xor_ln104_282_fu_981_p2);

assign and_ln104_106_fu_612_p2 = (xor_ln104_283_fu_606_p2 & and_ln102_fu_582_p2);

assign and_ln104_107_fu_630_p2 = (xor_ln104_284_fu_624_p2 & and_ln104_fu_594_p2);

assign and_ln104_108_fu_1002_p2 = (xor_ln104_285_fu_997_p2 & and_ln102_732_fu_976_p2);

assign and_ln104_109_fu_1018_p2 = (xor_ln104_286_fu_1013_p2 & and_ln104_105_fu_986_p2);

assign and_ln104_fu_594_p2 = (xor_ln104_281_fu_588_p2 & icmp_ln86_fu_402_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1334_p67;

assign icmp_ln86_596_fu_408_p2 = (($signed(x_24_val) < $signed(18'd453)) ? 1'b1 : 1'b0);

assign icmp_ln86_597_fu_414_p2 = (($signed(x_10_val) < $signed(18'd790)) ? 1'b1 : 1'b0);

assign icmp_ln86_598_fu_420_p2 = (($signed(x_1_val) < $signed(18'd152129)) ? 1'b1 : 1'b0);

assign icmp_ln86_599_fu_426_p2 = (($signed(x_6_val) < $signed(18'd8660)) ? 1'b1 : 1'b0);

assign icmp_ln86_600_fu_432_p2 = (($signed(x_29_val) < $signed(18'd8975)) ? 1'b1 : 1'b0);

assign icmp_ln86_601_fu_438_p2 = (($signed(x_23_val) < $signed(18'd28)) ? 1'b1 : 1'b0);

assign icmp_ln86_602_fu_444_p2 = (($signed(x_19_val) < $signed(18'd471)) ? 1'b1 : 1'b0);

assign icmp_ln86_603_fu_450_p2 = (($signed(x_16_val) < $signed(18'd88)) ? 1'b1 : 1'b0);

assign icmp_ln86_604_fu_456_p2 = (($signed(x_16_val) < $signed(18'd100)) ? 1'b1 : 1'b0);

assign icmp_ln86_605_fu_462_p2 = (($signed(x_42_val) < $signed(18'd338)) ? 1'b1 : 1'b0);

assign icmp_ln86_606_fu_468_p2 = (($signed(x_7_val) < $signed(18'd6793)) ? 1'b1 : 1'b0);

assign icmp_ln86_607_fu_474_p2 = (($signed(x_1_val) < $signed(18'd255292)) ? 1'b1 : 1'b0);

assign icmp_ln86_608_fu_480_p2 = (($signed(x_3_val) < $signed(18'd89656)) ? 1'b1 : 1'b0);

assign icmp_ln86_609_fu_486_p2 = (($signed(x_1_val) < $signed(18'd197174)) ? 1'b1 : 1'b0);

assign icmp_ln86_610_fu_492_p2 = (($signed(x_24_val) < $signed(18'd171)) ? 1'b1 : 1'b0);

assign icmp_ln86_611_fu_498_p2 = (($signed(x_30_val) < $signed(18'd439)) ? 1'b1 : 1'b0);

assign icmp_ln86_612_fu_504_p2 = (($signed(x_47_val) < $signed(18'd92329)) ? 1'b1 : 1'b0);

assign icmp_ln86_613_fu_510_p2 = (($signed(x_17_val) < $signed(18'd22)) ? 1'b1 : 1'b0);

assign icmp_ln86_614_fu_516_p2 = (($signed(x_7_val) < $signed(18'd898)) ? 1'b1 : 1'b0);

assign icmp_ln86_615_fu_522_p2 = (($signed(x_45_val) < $signed(18'd411)) ? 1'b1 : 1'b0);

assign icmp_ln86_616_fu_528_p2 = (($signed(x_45_val) < $signed(18'd287)) ? 1'b1 : 1'b0);

assign icmp_ln86_617_fu_534_p2 = (($signed(x_52_val) < $signed(18'd46593)) ? 1'b1 : 1'b0);

assign icmp_ln86_618_fu_540_p2 = (($signed(x_16_val) < $signed(18'd98)) ? 1'b1 : 1'b0);

assign icmp_ln86_619_fu_546_p2 = (($signed(x_17_val) < $signed(18'd31)) ? 1'b1 : 1'b0);

assign icmp_ln86_620_fu_552_p2 = (($signed(x_18_val) < $signed(18'd1267)) ? 1'b1 : 1'b0);

assign icmp_ln86_621_fu_558_p2 = (($signed(x_25_val) < $signed(18'd78)) ? 1'b1 : 1'b0);

assign icmp_ln86_622_fu_564_p2 = (($signed(x_17_val) < $signed(18'd5)) ? 1'b1 : 1'b0);

assign icmp_ln86_623_fu_570_p2 = (($signed(x_2_val) < $signed(18'd1383)) ? 1'b1 : 1'b0);

assign icmp_ln86_624_fu_576_p2 = (($signed(x_50_val) < $signed(18'd82625)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_402_p2 = (($signed(x_52_val) < $signed(18'd48641)) ? 1'b1 : 1'b0);

assign or_ln117_523_fu_792_p2 = (and_ln102_748_fu_702_p2 | and_ln102_733_fu_600_p2);

assign or_ln117_524_fu_806_p2 = (and_ln102_738_fu_648_p2 | and_ln102_733_fu_600_p2);

assign or_ln117_525_fu_820_p2 = (or_ln117_524_fu_806_p2 | and_ln102_750_fu_714_p2);

assign or_ln117_526_fu_846_p2 = (and_ln102_fu_582_p2 | and_ln102_751_fu_720_p2);

assign or_ln117_527_fu_860_p2 = (and_ln102_fu_582_p2 | and_ln102_739_fu_660_p2);

assign or_ln117_528_fu_874_p2 = (or_ln117_527_fu_860_p2 | and_ln102_753_fu_732_p2);

assign or_ln117_529_fu_888_p2 = (and_ln102_fu_582_p2 | and_ln102_734_fu_618_p2);

assign or_ln117_530_fu_902_p2 = (or_ln117_529_fu_888_p2 | and_ln102_754_fu_738_p2);

assign or_ln117_531_fu_916_p2 = (or_ln117_529_fu_888_p2 | and_ln102_740_fu_672_p2);

assign or_ln117_532_fu_930_p2 = (or_ln117_531_fu_916_p2 | and_ln102_756_fu_750_p2);

assign or_ln117_533_fu_1129_p2 = (icmp_ln86_reg_1475 | and_ln102_757_fu_1064_p2);

assign or_ln117_534_fu_1134_p2 = (icmp_ln86_reg_1475 | and_ln102_741_fu_1024_p2);

assign or_ln117_535_fu_1146_p2 = (or_ln117_534_fu_1134_p2 | and_ln102_759_fu_1074_p2);

assign or_ln117_536_fu_1160_p2 = (icmp_ln86_reg_1475 | and_ln102_735_fu_992_p2);

assign or_ln117_537_fu_1173_p2 = (or_ln117_536_fu_1160_p2 | and_ln102_760_fu_1080_p2);

assign or_ln117_538_fu_1187_p2 = (or_ln117_536_fu_1160_p2 | and_ln102_742_fu_1034_p2);

assign or_ln117_539_fu_1201_p2 = (or_ln117_538_fu_1187_p2 | and_ln102_762_fu_1091_p2);

assign or_ln117_540_fu_1215_p2 = (icmp_ln86_reg_1475 | and_ln102_732_fu_976_p2);

assign or_ln117_541_fu_1228_p2 = (or_ln117_540_fu_1215_p2 | and_ln102_763_fu_1097_p2);

assign or_ln117_542_fu_1242_p2 = (or_ln117_540_fu_1215_p2 | and_ln102_743_fu_1044_p2);

assign or_ln117_543_fu_1256_p2 = (or_ln117_542_fu_1242_p2 | and_ln102_765_fu_1107_p2);

assign or_ln117_544_fu_1270_p2 = (or_ln117_540_fu_1215_p2 | and_ln102_736_fu_1008_p2);

assign or_ln117_545_fu_1284_p2 = (or_ln117_544_fu_1270_p2 | and_ln102_766_fu_1113_p2);

assign or_ln117_546_fu_1298_p2 = (or_ln117_544_fu_1270_p2 | and_ln102_744_fu_1054_p2);

assign or_ln117_547_fu_1312_p2 = (or_ln117_546_fu_1298_p2 | and_ln102_768_fu_1123_p2);

assign or_ln117_fu_766_p2 = (and_ln102_747_fu_696_p2 | and_ln102_737_fu_636_p2);

assign select_ln117_578_fu_780_p3 = ((or_ln117_fu_766_p2[0:0] == 1'b1) ? select_ln117_fu_772_p3 : 2'd3);

assign select_ln117_579_fu_798_p3 = ((and_ln102_733_fu_600_p2[0:0] == 1'b1) ? zext_ln117_64_fu_788_p1 : 3'd4);

assign select_ln117_580_fu_812_p3 = ((or_ln117_523_fu_792_p2[0:0] == 1'b1) ? select_ln117_579_fu_798_p3 : 3'd5);

assign select_ln117_581_fu_826_p3 = ((or_ln117_524_fu_806_p2[0:0] == 1'b1) ? select_ln117_580_fu_812_p3 : 3'd6);

assign select_ln117_582_fu_834_p3 = ((or_ln117_525_fu_820_p2[0:0] == 1'b1) ? select_ln117_581_fu_826_p3 : 3'd7);

assign select_ln117_583_fu_852_p3 = ((and_ln102_fu_582_p2[0:0] == 1'b1) ? zext_ln117_65_fu_842_p1 : 4'd8);

assign select_ln117_584_fu_866_p3 = ((or_ln117_526_fu_846_p2[0:0] == 1'b1) ? select_ln117_583_fu_852_p3 : 4'd9);

assign select_ln117_585_fu_880_p3 = ((or_ln117_527_fu_860_p2[0:0] == 1'b1) ? select_ln117_584_fu_866_p3 : 4'd10);

assign select_ln117_586_fu_894_p3 = ((or_ln117_528_fu_874_p2[0:0] == 1'b1) ? select_ln117_585_fu_880_p3 : 4'd11);

assign select_ln117_587_fu_908_p3 = ((or_ln117_529_fu_888_p2[0:0] == 1'b1) ? select_ln117_586_fu_894_p3 : 4'd12);

assign select_ln117_588_fu_922_p3 = ((or_ln117_530_fu_902_p2[0:0] == 1'b1) ? select_ln117_587_fu_908_p3 : 4'd13);

assign select_ln117_589_fu_936_p3 = ((or_ln117_531_fu_916_p2[0:0] == 1'b1) ? select_ln117_588_fu_922_p3 : 4'd14);

assign select_ln117_590_fu_944_p3 = ((or_ln117_532_fu_930_p2[0:0] == 1'b1) ? select_ln117_589_fu_936_p3 : 4'd15);

assign select_ln117_591_fu_956_p3 = ((icmp_ln86_fu_402_p2[0:0] == 1'b1) ? zext_ln117_66_fu_952_p1 : 5'd16);

assign select_ln117_592_fu_1139_p3 = ((or_ln117_533_fu_1129_p2[0:0] == 1'b1) ? select_ln117_591_reg_1561 : 5'd17);

assign select_ln117_593_fu_1152_p3 = ((or_ln117_534_fu_1134_p2[0:0] == 1'b1) ? select_ln117_592_fu_1139_p3 : 5'd18);

assign select_ln117_594_fu_1165_p3 = ((or_ln117_535_fu_1146_p2[0:0] == 1'b1) ? select_ln117_593_fu_1152_p3 : 5'd19);

assign select_ln117_595_fu_1179_p3 = ((or_ln117_536_fu_1160_p2[0:0] == 1'b1) ? select_ln117_594_fu_1165_p3 : 5'd20);

assign select_ln117_596_fu_1193_p3 = ((or_ln117_537_fu_1173_p2[0:0] == 1'b1) ? select_ln117_595_fu_1179_p3 : 5'd21);

assign select_ln117_597_fu_1207_p3 = ((or_ln117_538_fu_1187_p2[0:0] == 1'b1) ? select_ln117_596_fu_1193_p3 : 5'd22);

assign select_ln117_598_fu_1220_p3 = ((or_ln117_539_fu_1201_p2[0:0] == 1'b1) ? select_ln117_597_fu_1207_p3 : 5'd23);

assign select_ln117_599_fu_1234_p3 = ((or_ln117_540_fu_1215_p2[0:0] == 1'b1) ? select_ln117_598_fu_1220_p3 : 5'd24);

assign select_ln117_600_fu_1248_p3 = ((or_ln117_541_fu_1228_p2[0:0] == 1'b1) ? select_ln117_599_fu_1234_p3 : 5'd25);

assign select_ln117_601_fu_1262_p3 = ((or_ln117_542_fu_1242_p2[0:0] == 1'b1) ? select_ln117_600_fu_1248_p3 : 5'd26);

assign select_ln117_602_fu_1276_p3 = ((or_ln117_543_fu_1256_p2[0:0] == 1'b1) ? select_ln117_601_fu_1262_p3 : 5'd27);

assign select_ln117_603_fu_1290_p3 = ((or_ln117_544_fu_1270_p2[0:0] == 1'b1) ? select_ln117_602_fu_1276_p3 : 5'd28);

assign select_ln117_604_fu_1304_p3 = ((or_ln117_545_fu_1284_p2[0:0] == 1'b1) ? select_ln117_603_fu_1290_p3 : 5'd29);

assign select_ln117_605_fu_1318_p3 = ((or_ln117_546_fu_1298_p2[0:0] == 1'b1) ? select_ln117_604_fu_1304_p3 : 5'd30);

assign select_ln117_fu_772_p3 = ((and_ln102_737_fu_636_p2[0:0] == 1'b1) ? zext_ln117_fu_762_p1 : 2'd2);

assign tmp_fu_964_p3 = x_51_val_read_reg_1470[32'd17];

assign xor_ln104_281_fu_588_p2 = (icmp_ln86_596_fu_408_p2 ^ 1'd1);

assign xor_ln104_282_fu_981_p2 = (icmp_ln86_597_reg_1484 ^ 1'd1);

assign xor_ln104_283_fu_606_p2 = (icmp_ln86_598_fu_420_p2 ^ 1'd1);

assign xor_ln104_284_fu_624_p2 = (icmp_ln86_599_fu_426_p2 ^ 1'd1);

assign xor_ln104_285_fu_997_p2 = (icmp_ln86_600_reg_1490 ^ 1'd1);

assign xor_ln104_286_fu_1013_p2 = (icmp_ln86_601_reg_1496 ^ 1'd1);

assign xor_ln104_287_fu_642_p2 = (icmp_ln86_602_fu_444_p2 ^ 1'd1);

assign xor_ln104_288_fu_654_p2 = (icmp_ln86_603_fu_450_p2 ^ 1'd1);

assign xor_ln104_289_fu_666_p2 = (icmp_ln86_604_fu_456_p2 ^ 1'd1);

assign xor_ln104_290_fu_678_p2 = (icmp_ln86_605_fu_462_p2 ^ 1'd1);

assign xor_ln104_291_fu_1029_p2 = (icmp_ln86_606_reg_1502 ^ 1'd1);

assign xor_ln104_292_fu_1039_p2 = (icmp_ln86_607_reg_1508 ^ 1'd1);

assign xor_ln104_293_fu_1049_p2 = (icmp_ln86_608_reg_1514 ^ 1'd1);

assign xor_ln104_294_fu_1059_p2 = (icmp_ln86_609_reg_1520 ^ 1'd1);

assign xor_ln104_fu_971_p2 = (icmp_ln86_reg_1475 ^ 1'd1);

assign xor_ln117_fu_756_p2 = (1'd1 ^ and_ln102_745_fu_684_p2);

assign zext_ln117_64_fu_788_p1 = select_ln117_578_fu_780_p3;

assign zext_ln117_65_fu_842_p1 = select_ln117_582_fu_834_p3;

assign zext_ln117_66_fu_952_p1 = select_ln117_590_fu_944_p3;

assign zext_ln117_fu_762_p1 = xor_ln117_fu_756_p2;

endmodule //my_prj_decision_function_78
