// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_26 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_2_val,
        x_9_val,
        x_10_val,
        x_11_val,
        x_13_val,
        x_21_val,
        x_23_val,
        x_29_val,
        x_32_val,
        x_33_val,
        x_34_val,
        x_35_val,
        x_40_val,
        x_43_val,
        x_46_val,
        x_48_val,
        x_49_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_2_val;
input  [17:0] x_9_val;
input  [17:0] x_10_val;
input  [17:0] x_11_val;
input  [17:0] x_13_val;
input  [17:0] x_21_val;
input  [17:0] x_23_val;
input  [17:0] x_29_val;
input  [17:0] x_32_val;
input  [17:0] x_33_val;
input  [17:0] x_34_val;
input  [17:0] x_35_val;
input  [17:0] x_40_val;
input  [17:0] x_43_val;
input  [17:0] x_46_val;
input  [17:0] x_48_val;
input  [17:0] x_49_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_378_p2;
reg   [0:0] icmp_ln86_reg_1448;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_688_fu_390_p2;
reg   [0:0] icmp_ln86_688_reg_1457;
wire   [0:0] icmp_ln86_691_fu_408_p2;
reg   [0:0] icmp_ln86_691_reg_1463;
wire   [0:0] icmp_ln86_692_fu_414_p2;
reg   [0:0] icmp_ln86_692_reg_1469;
wire   [0:0] icmp_ln86_697_fu_444_p2;
reg   [0:0] icmp_ln86_697_reg_1475;
wire   [0:0] icmp_ln86_698_fu_450_p2;
reg   [0:0] icmp_ln86_698_reg_1481;
wire   [0:0] icmp_ln86_699_fu_456_p2;
reg   [0:0] icmp_ln86_699_reg_1487;
wire   [0:0] icmp_ln86_1396_fu_472_p2;
reg   [0:0] icmp_ln86_1396_reg_1493;
wire   [0:0] icmp_ln86_708_fu_520_p2;
reg   [0:0] icmp_ln86_708_reg_1499;
wire   [0:0] icmp_ln86_709_fu_526_p2;
reg   [0:0] icmp_ln86_709_reg_1504;
wire   [0:0] icmp_ln86_710_fu_532_p2;
reg   [0:0] icmp_ln86_710_reg_1509;
wire   [0:0] icmp_ln86_711_fu_538_p2;
reg   [0:0] icmp_ln86_711_reg_1514;
wire   [0:0] icmp_ln86_712_fu_544_p2;
reg   [0:0] icmp_ln86_712_reg_1519;
wire   [0:0] icmp_ln86_713_fu_550_p2;
reg   [0:0] icmp_ln86_713_reg_1524;
wire   [0:0] icmp_ln86_714_fu_556_p2;
reg   [0:0] icmp_ln86_714_reg_1529;
wire   [0:0] icmp_ln86_715_fu_562_p2;
reg   [0:0] icmp_ln86_715_reg_1534;
wire   [3:0] select_ln117_679_fu_942_p3;
reg   [3:0] select_ln117_679_reg_1539;
wire    ap_block_pp0_stage0;
wire   [15:0] tmp_fu_462_p4;
wire   [0:0] icmp_ln86_687_fu_384_p2;
wire   [0:0] xor_ln104_330_fu_574_p2;
wire   [0:0] icmp_ln86_689_fu_396_p2;
wire   [0:0] and_ln102_fu_568_p2;
wire   [0:0] xor_ln104_332_fu_592_p2;
wire   [0:0] icmp_ln86_690_fu_402_p2;
wire   [0:0] and_ln104_fu_580_p2;
wire   [0:0] xor_ln104_333_fu_610_p2;
wire   [0:0] icmp_ln86_693_fu_420_p2;
wire   [0:0] and_ln102_661_fu_586_p2;
wire   [0:0] icmp_ln86_694_fu_426_p2;
wire   [0:0] and_ln104_135_fu_598_p2;
wire   [0:0] xor_ln104_337_fu_634_p2;
wire   [0:0] icmp_ln86_695_fu_432_p2;
wire   [0:0] and_ln102_662_fu_604_p2;
wire   [0:0] icmp_ln86_696_fu_438_p2;
wire   [0:0] and_ln104_136_fu_616_p2;
wire   [0:0] icmp_ln86_701_fu_478_p2;
wire   [0:0] and_ln102_665_fu_622_p2;
wire   [0:0] icmp_ln86_702_fu_484_p2;
wire   [0:0] xor_ln104_336_fu_628_p2;
wire   [0:0] and_ln102_688_fu_676_p2;
wire   [0:0] icmp_ln86_703_fu_490_p2;
wire   [0:0] and_ln102_689_fu_688_p2;
wire   [0:0] icmp_ln86_704_fu_496_p2;
wire   [0:0] and_ln102_667_fu_646_p2;
wire   [0:0] icmp_ln86_705_fu_502_p2;
wire   [0:0] xor_ln104_338_fu_652_p2;
wire   [0:0] and_ln102_690_fu_706_p2;
wire   [0:0] icmp_ln86_706_fu_508_p2;
wire   [0:0] and_ln102_668_fu_658_p2;
wire   [0:0] icmp_ln86_707_fu_514_p2;
wire   [0:0] xor_ln104_339_fu_664_p2;
wire   [0:0] and_ln102_691_fu_724_p2;
wire   [0:0] and_ln104_139_fu_640_p2;
wire   [0:0] and_ln102_673_fu_670_p2;
wire   [0:0] xor_ln117_fu_742_p2;
wire   [0:0] or_ln117_655_fu_748_p2;
wire   [0:0] or_ln117_656_fu_754_p2;
wire   [0:0] or_ln117_fu_736_p2;
wire   [1:0] zext_ln117_fu_760_p1;
wire   [0:0] or_ln117_629_fu_764_p2;
wire   [0:0] and_ln102_674_fu_682_p2;
wire   [1:0] select_ln117_fu_770_p3;
wire   [1:0] select_ln117_667_fu_784_p3;
wire   [0:0] or_ln117_630_fu_778_p2;
wire   [2:0] zext_ln117_75_fu_792_p1;
wire   [0:0] or_ln117_631_fu_796_p2;
wire   [0:0] and_ln102_675_fu_694_p2;
wire   [2:0] select_ln117_668_fu_802_p3;
wire   [0:0] or_ln117_632_fu_810_p2;
wire   [2:0] select_ln117_669_fu_816_p3;
wire   [0:0] and_ln102_676_fu_700_p2;
wire   [2:0] select_ln117_670_fu_824_p3;
wire   [2:0] select_ln117_671_fu_838_p3;
wire   [0:0] or_ln117_633_fu_832_p2;
wire   [3:0] zext_ln117_76_fu_846_p1;
wire   [0:0] or_ln117_634_fu_850_p2;
wire   [0:0] and_ln102_677_fu_712_p2;
wire   [3:0] select_ln117_672_fu_856_p3;
wire   [0:0] or_ln117_635_fu_864_p2;
wire   [3:0] select_ln117_673_fu_870_p3;
wire   [0:0] or_ln117_636_fu_878_p2;
wire   [0:0] and_ln102_678_fu_718_p2;
wire   [3:0] select_ln117_674_fu_884_p3;
wire   [0:0] or_ln117_637_fu_892_p2;
wire   [3:0] select_ln117_675_fu_898_p3;
wire   [0:0] or_ln117_638_fu_906_p2;
wire   [0:0] and_ln102_679_fu_730_p2;
wire   [3:0] select_ln117_676_fu_912_p3;
wire   [0:0] or_ln117_639_fu_920_p2;
wire   [3:0] select_ln117_677_fu_926_p3;
wire   [3:0] select_ln117_678_fu_934_p3;
wire   [0:0] xor_ln104_fu_950_p2;
wire   [0:0] xor_ln104_331_fu_960_p2;
wire   [0:0] and_ln102_660_fu_955_p2;
wire   [0:0] xor_ln104_334_fu_976_p2;
wire   [0:0] and_ln104_134_fu_965_p2;
wire   [0:0] xor_ln104_335_fu_992_p2;
wire   [0:0] and_ln102_663_fu_971_p2;
wire   [0:0] and_ln104_137_fu_981_p2;
wire   [0:0] and_ln102_664_fu_987_p2;
wire   [0:0] and_ln104_138_fu_997_p2;
wire   [0:0] and_ln102_669_fu_1003_p2;
wire   [0:0] xor_ln104_340_fu_1008_p2;
wire   [0:0] and_ln102_692_fu_1048_p2;
wire   [0:0] and_ln102_670_fu_1013_p2;
wire   [0:0] xor_ln104_341_fu_1018_p2;
wire   [0:0] and_ln102_693_fu_1064_p2;
wire   [0:0] and_ln102_671_fu_1023_p2;
wire   [0:0] xor_ln104_342_fu_1028_p2;
wire   [0:0] and_ln102_694_fu_1080_p2;
wire   [0:0] and_ln102_672_fu_1033_p2;
wire   [0:0] xor_ln104_343_fu_1038_p2;
wire   [0:0] and_ln102_695_fu_1096_p2;
wire   [0:0] and_ln102_680_fu_1043_p2;
wire   [0:0] or_ln117_640_fu_1107_p2;
wire   [4:0] zext_ln117_77_fu_1112_p1;
wire   [0:0] or_ln117_641_fu_1115_p2;
wire   [0:0] and_ln102_681_fu_1053_p2;
wire   [4:0] select_ln117_680_fu_1120_p3;
wire   [0:0] or_ln117_642_fu_1128_p2;
wire   [4:0] select_ln117_681_fu_1134_p3;
wire   [0:0] or_ln117_643_fu_1142_p2;
wire   [0:0] and_ln102_682_fu_1059_p2;
wire   [4:0] select_ln117_682_fu_1147_p3;
wire   [0:0] or_ln117_644_fu_1155_p2;
wire   [4:0] select_ln117_683_fu_1161_p3;
wire   [0:0] or_ln117_645_fu_1169_p2;
wire   [0:0] and_ln102_683_fu_1069_p2;
wire   [4:0] select_ln117_684_fu_1175_p3;
wire   [0:0] or_ln117_646_fu_1183_p2;
wire   [4:0] select_ln117_685_fu_1189_p3;
wire   [0:0] or_ln117_647_fu_1197_p2;
wire   [0:0] and_ln102_684_fu_1075_p2;
wire   [4:0] select_ln117_686_fu_1202_p3;
wire   [0:0] or_ln117_648_fu_1210_p2;
wire   [4:0] select_ln117_687_fu_1216_p3;
wire   [0:0] or_ln117_649_fu_1224_p2;
wire   [0:0] and_ln102_685_fu_1085_p2;
wire   [4:0] select_ln117_688_fu_1230_p3;
wire   [0:0] or_ln117_650_fu_1238_p2;
wire   [4:0] select_ln117_689_fu_1244_p3;
wire   [0:0] or_ln117_651_fu_1252_p2;
wire   [0:0] and_ln102_686_fu_1091_p2;
wire   [4:0] select_ln117_690_fu_1258_p3;
wire   [0:0] or_ln117_652_fu_1266_p2;
wire   [4:0] select_ln117_691_fu_1272_p3;
wire   [0:0] or_ln117_653_fu_1280_p2;
wire   [0:0] and_ln102_687_fu_1101_p2;
wire   [4:0] select_ln117_692_fu_1286_p3;
wire   [0:0] or_ln117_654_fu_1294_p2;
wire   [4:0] select_ln117_693_fu_1300_p3;
wire   [11:0] agg_result_fu_1316_p63;
wire   [4:0] agg_result_fu_1316_p64;
wire   [11:0] agg_result_fu_1316_p65;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1316_p1;
wire   [4:0] agg_result_fu_1316_p3;
wire   [4:0] agg_result_fu_1316_p5;
wire   [4:0] agg_result_fu_1316_p7;
wire   [4:0] agg_result_fu_1316_p9;
wire   [4:0] agg_result_fu_1316_p11;
wire   [4:0] agg_result_fu_1316_p13;
wire   [4:0] agg_result_fu_1316_p15;
wire   [4:0] agg_result_fu_1316_p17;
wire   [4:0] agg_result_fu_1316_p19;
wire   [4:0] agg_result_fu_1316_p21;
wire   [4:0] agg_result_fu_1316_p23;
wire   [4:0] agg_result_fu_1316_p25;
wire   [4:0] agg_result_fu_1316_p27;
wire   [4:0] agg_result_fu_1316_p29;
wire   [4:0] agg_result_fu_1316_p31;
wire  signed [4:0] agg_result_fu_1316_p33;
wire  signed [4:0] agg_result_fu_1316_p35;
wire  signed [4:0] agg_result_fu_1316_p37;
wire  signed [4:0] agg_result_fu_1316_p39;
wire  signed [4:0] agg_result_fu_1316_p41;
wire  signed [4:0] agg_result_fu_1316_p43;
wire  signed [4:0] agg_result_fu_1316_p45;
wire  signed [4:0] agg_result_fu_1316_p47;
wire  signed [4:0] agg_result_fu_1316_p49;
wire  signed [4:0] agg_result_fu_1316_p51;
wire  signed [4:0] agg_result_fu_1316_p53;
wire  signed [4:0] agg_result_fu_1316_p55;
wire  signed [4:0] agg_result_fu_1316_p57;
wire  signed [4:0] agg_result_fu_1316_p59;
wire  signed [4:0] agg_result_fu_1316_p61;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_63_5_12_1_1_x2 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 12 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 12 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 12 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_63_5_12_1_1_x2_U1591(
    .din0(12'd3782),
    .din1(12'd3976),
    .din2(12'd3452),
    .din3(12'd243),
    .din4(12'd3987),
    .din5(12'd1376),
    .din6(12'd166),
    .din7(12'd647),
    .din8(12'd3689),
    .din9(12'd4069),
    .din10(12'd1010),
    .din11(12'd51),
    .din12(12'd1342),
    .din13(12'd1227),
    .din14(12'd3839),
    .din15(12'd4002),
    .din16(12'd462),
    .din17(12'd48),
    .din18(12'd4058),
    .din19(12'd3821),
    .din20(12'd443),
    .din21(12'd78),
    .din22(12'd4063),
    .din23(12'd4089),
    .din24(12'd54),
    .din25(12'd4056),
    .din26(12'd3639),
    .din27(12'd3634),
    .din28(12'd49),
    .din29(12'd320),
    .din30(12'd81),
    .def(agg_result_fu_1316_p63),
    .sel(agg_result_fu_1316_p64),
    .dout(agg_result_fu_1316_p65)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_1396_reg_1493 <= icmp_ln86_1396_fu_472_p2;
        icmp_ln86_688_reg_1457 <= icmp_ln86_688_fu_390_p2;
        icmp_ln86_691_reg_1463 <= icmp_ln86_691_fu_408_p2;
        icmp_ln86_692_reg_1469 <= icmp_ln86_692_fu_414_p2;
        icmp_ln86_697_reg_1475 <= icmp_ln86_697_fu_444_p2;
        icmp_ln86_698_reg_1481 <= icmp_ln86_698_fu_450_p2;
        icmp_ln86_699_reg_1487 <= icmp_ln86_699_fu_456_p2;
        icmp_ln86_708_reg_1499 <= icmp_ln86_708_fu_520_p2;
        icmp_ln86_709_reg_1504 <= icmp_ln86_709_fu_526_p2;
        icmp_ln86_710_reg_1509 <= icmp_ln86_710_fu_532_p2;
        icmp_ln86_711_reg_1514 <= icmp_ln86_711_fu_538_p2;
        icmp_ln86_712_reg_1519 <= icmp_ln86_712_fu_544_p2;
        icmp_ln86_713_reg_1524 <= icmp_ln86_713_fu_550_p2;
        icmp_ln86_714_reg_1529 <= icmp_ln86_714_fu_556_p2;
        icmp_ln86_715_reg_1534 <= icmp_ln86_715_fu_562_p2;
        icmp_ln86_reg_1448 <= icmp_ln86_fu_378_p2;
        select_ln117_679_reg_1539 <= select_ln117_679_fu_942_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1316_p63 = 'bx;

assign agg_result_fu_1316_p64 = ((or_ln117_654_fu_1294_p2[0:0] == 1'b1) ? select_ln117_693_fu_1300_p3 : 5'd30);

assign and_ln102_660_fu_955_p2 = (xor_ln104_fu_950_p2 & icmp_ln86_688_reg_1457);

assign and_ln102_661_fu_586_p2 = (icmp_ln86_689_fu_396_p2 & and_ln102_fu_568_p2);

assign and_ln102_662_fu_604_p2 = (icmp_ln86_690_fu_402_p2 & and_ln104_fu_580_p2);

assign and_ln102_663_fu_971_p2 = (icmp_ln86_691_reg_1463 & and_ln102_660_fu_955_p2);

assign and_ln102_664_fu_987_p2 = (icmp_ln86_692_reg_1469 & and_ln104_134_fu_965_p2);

assign and_ln102_665_fu_622_p2 = (icmp_ln86_693_fu_420_p2 & and_ln102_661_fu_586_p2);

assign and_ln102_667_fu_646_p2 = (icmp_ln86_695_fu_432_p2 & and_ln102_662_fu_604_p2);

assign and_ln102_668_fu_658_p2 = (icmp_ln86_696_fu_438_p2 & and_ln104_136_fu_616_p2);

assign and_ln102_669_fu_1003_p2 = (icmp_ln86_697_reg_1475 & and_ln102_663_fu_971_p2);

assign and_ln102_670_fu_1013_p2 = (icmp_ln86_698_reg_1481 & and_ln104_137_fu_981_p2);

assign and_ln102_671_fu_1023_p2 = (icmp_ln86_699_reg_1487 & and_ln102_664_fu_987_p2);

assign and_ln102_672_fu_1033_p2 = (icmp_ln86_1396_reg_1493 & and_ln104_138_fu_997_p2);

assign and_ln102_673_fu_670_p2 = (icmp_ln86_701_fu_478_p2 & and_ln102_665_fu_622_p2);

assign and_ln102_674_fu_682_p2 = (and_ln102_688_fu_676_p2 & and_ln102_661_fu_586_p2);

assign and_ln102_675_fu_694_p2 = (icmp_ln86_694_fu_426_p2 & and_ln102_689_fu_688_p2);

assign and_ln102_676_fu_700_p2 = (icmp_ln86_704_fu_496_p2 & and_ln102_667_fu_646_p2);

assign and_ln102_677_fu_712_p2 = (and_ln102_690_fu_706_p2 & and_ln102_662_fu_604_p2);

assign and_ln102_678_fu_718_p2 = (icmp_ln86_706_fu_508_p2 & and_ln102_668_fu_658_p2);

assign and_ln102_679_fu_730_p2 = (and_ln104_136_fu_616_p2 & and_ln102_691_fu_724_p2);

assign and_ln102_680_fu_1043_p2 = (icmp_ln86_708_reg_1499 & and_ln102_669_fu_1003_p2);

assign and_ln102_681_fu_1053_p2 = (and_ln102_692_fu_1048_p2 & and_ln102_663_fu_971_p2);

assign and_ln102_682_fu_1059_p2 = (icmp_ln86_710_reg_1509 & and_ln102_670_fu_1013_p2);

assign and_ln102_683_fu_1069_p2 = (and_ln104_137_fu_981_p2 & and_ln102_693_fu_1064_p2);

assign and_ln102_684_fu_1075_p2 = (icmp_ln86_712_reg_1519 & and_ln102_671_fu_1023_p2);

assign and_ln102_685_fu_1085_p2 = (and_ln102_694_fu_1080_p2 & and_ln102_664_fu_987_p2);

assign and_ln102_686_fu_1091_p2 = (icmp_ln86_714_reg_1529 & and_ln102_672_fu_1033_p2);

assign and_ln102_687_fu_1101_p2 = (and_ln104_138_fu_997_p2 & and_ln102_695_fu_1096_p2);

assign and_ln102_688_fu_676_p2 = (xor_ln104_336_fu_628_p2 & icmp_ln86_702_fu_484_p2);

assign and_ln102_689_fu_688_p2 = (icmp_ln86_703_fu_490_p2 & and_ln104_135_fu_598_p2);

assign and_ln102_690_fu_706_p2 = (xor_ln104_338_fu_652_p2 & icmp_ln86_705_fu_502_p2);

assign and_ln102_691_fu_724_p2 = (xor_ln104_339_fu_664_p2 & icmp_ln86_707_fu_514_p2);

assign and_ln102_692_fu_1048_p2 = (xor_ln104_340_fu_1008_p2 & icmp_ln86_709_reg_1504);

assign and_ln102_693_fu_1064_p2 = (xor_ln104_341_fu_1018_p2 & icmp_ln86_711_reg_1514);

assign and_ln102_694_fu_1080_p2 = (xor_ln104_342_fu_1028_p2 & icmp_ln86_713_reg_1524);

assign and_ln102_695_fu_1096_p2 = (xor_ln104_343_fu_1038_p2 & icmp_ln86_715_reg_1534);

assign and_ln102_fu_568_p2 = (icmp_ln86_fu_378_p2 & icmp_ln86_687_fu_384_p2);

assign and_ln104_134_fu_965_p2 = (xor_ln104_fu_950_p2 & xor_ln104_331_fu_960_p2);

assign and_ln104_135_fu_598_p2 = (xor_ln104_332_fu_592_p2 & and_ln102_fu_568_p2);

assign and_ln104_136_fu_616_p2 = (xor_ln104_333_fu_610_p2 & and_ln104_fu_580_p2);

assign and_ln104_137_fu_981_p2 = (xor_ln104_334_fu_976_p2 & and_ln102_660_fu_955_p2);

assign and_ln104_138_fu_997_p2 = (xor_ln104_335_fu_992_p2 & and_ln104_134_fu_965_p2);

assign and_ln104_139_fu_640_p2 = (xor_ln104_337_fu_634_p2 & and_ln104_135_fu_598_p2);

assign and_ln104_fu_580_p2 = (xor_ln104_330_fu_574_p2 & icmp_ln86_fu_378_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1316_p65;

assign icmp_ln86_1396_fu_472_p2 = (($signed(tmp_fu_462_p4) < $signed(16'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_687_fu_384_p2 = (($signed(x_43_val) < $signed(18'd38)) ? 1'b1 : 1'b0);

assign icmp_ln86_688_fu_390_p2 = (($signed(x_33_val) < $signed(18'd626)) ? 1'b1 : 1'b0);

assign icmp_ln86_689_fu_396_p2 = (($signed(x_43_val) < $signed(18'd37)) ? 1'b1 : 1'b0);

assign icmp_ln86_690_fu_402_p2 = (($signed(x_48_val) < $signed(18'd124395)) ? 1'b1 : 1'b0);

assign icmp_ln86_691_fu_408_p2 = (($signed(x_32_val) < $signed(18'd596)) ? 1'b1 : 1'b0);

assign icmp_ln86_692_fu_414_p2 = (($signed(x_43_val) < $signed(18'd149)) ? 1'b1 : 1'b0);

assign icmp_ln86_693_fu_420_p2 = (($signed(x_13_val) < $signed(18'd358)) ? 1'b1 : 1'b0);

assign icmp_ln86_694_fu_426_p2 = (($signed(x_40_val) < $signed(18'd205)) ? 1'b1 : 1'b0);

assign icmp_ln86_695_fu_432_p2 = (($signed(x_21_val) < $signed(18'd269)) ? 1'b1 : 1'b0);

assign icmp_ln86_696_fu_438_p2 = (($signed(x_35_val) < $signed(18'd68)) ? 1'b1 : 1'b0);

assign icmp_ln86_697_fu_444_p2 = (($signed(x_32_val) < $signed(18'd336)) ? 1'b1 : 1'b0);

assign icmp_ln86_698_fu_450_p2 = (($signed(x_11_val) < $signed(18'd325)) ? 1'b1 : 1'b0);

assign icmp_ln86_699_fu_456_p2 = (($signed(x_46_val) < $signed(18'd184)) ? 1'b1 : 1'b0);

assign icmp_ln86_701_fu_478_p2 = (($signed(x_49_val) < $signed(18'd18291)) ? 1'b1 : 1'b0);

assign icmp_ln86_702_fu_484_p2 = (($signed(x_32_val) < $signed(18'd784)) ? 1'b1 : 1'b0);

assign icmp_ln86_703_fu_490_p2 = (($signed(x_2_val) < $signed(18'd88)) ? 1'b1 : 1'b0);

assign icmp_ln86_704_fu_496_p2 = (($signed(x_49_val) < $signed(18'd6899)) ? 1'b1 : 1'b0);

assign icmp_ln86_705_fu_502_p2 = (($signed(x_10_val) < $signed(18'd758)) ? 1'b1 : 1'b0);

assign icmp_ln86_706_fu_508_p2 = (($signed(x_32_val) < $signed(18'd904)) ? 1'b1 : 1'b0);

assign icmp_ln86_707_fu_514_p2 = (($signed(x_1_val) < $signed(18'd74438)) ? 1'b1 : 1'b0);

assign icmp_ln86_708_fu_520_p2 = (($signed(x_10_val) < $signed(18'd943)) ? 1'b1 : 1'b0);

assign icmp_ln86_709_fu_526_p2 = (($signed(x_9_val) < $signed(18'd2783)) ? 1'b1 : 1'b0);

assign icmp_ln86_710_fu_532_p2 = (($signed(x_29_val) < $signed(18'd30814)) ? 1'b1 : 1'b0);

assign icmp_ln86_711_fu_538_p2 = (($signed(x_33_val) < $signed(18'd373)) ? 1'b1 : 1'b0);

assign icmp_ln86_712_fu_544_p2 = (($signed(x_21_val) < $signed(18'd206)) ? 1'b1 : 1'b0);

assign icmp_ln86_713_fu_550_p2 = (($signed(x_23_val) < $signed(18'd79)) ? 1'b1 : 1'b0);

assign icmp_ln86_714_fu_556_p2 = (($signed(x_2_val) < $signed(18'd261903)) ? 1'b1 : 1'b0);

assign icmp_ln86_715_fu_562_p2 = (($signed(x_34_val) < $signed(18'd448)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_378_p2 = (($signed(x_40_val) < $signed(18'd225)) ? 1'b1 : 1'b0);

assign or_ln117_629_fu_764_p2 = (and_ln104_139_fu_640_p2 | and_ln102_665_fu_622_p2);

assign or_ln117_630_fu_778_p2 = (or_ln117_629_fu_764_p2 | and_ln102_674_fu_682_p2);

assign or_ln117_631_fu_796_p2 = (and_ln104_139_fu_640_p2 | and_ln102_661_fu_586_p2);

assign or_ln117_632_fu_810_p2 = (or_ln117_631_fu_796_p2 | and_ln102_675_fu_694_p2);

assign or_ln117_633_fu_832_p2 = (and_ln102_fu_568_p2 | and_ln102_676_fu_700_p2);

assign or_ln117_634_fu_850_p2 = (and_ln102_fu_568_p2 | and_ln102_667_fu_646_p2);

assign or_ln117_635_fu_864_p2 = (or_ln117_634_fu_850_p2 | and_ln102_677_fu_712_p2);

assign or_ln117_636_fu_878_p2 = (and_ln102_fu_568_p2 | and_ln102_662_fu_604_p2);

assign or_ln117_637_fu_892_p2 = (or_ln117_636_fu_878_p2 | and_ln102_678_fu_718_p2);

assign or_ln117_638_fu_906_p2 = (or_ln117_636_fu_878_p2 | and_ln102_668_fu_658_p2);

assign or_ln117_639_fu_920_p2 = (or_ln117_638_fu_906_p2 | and_ln102_679_fu_730_p2);

assign or_ln117_640_fu_1107_p2 = (icmp_ln86_reg_1448 | and_ln102_680_fu_1043_p2);

assign or_ln117_641_fu_1115_p2 = (icmp_ln86_reg_1448 | and_ln102_669_fu_1003_p2);

assign or_ln117_642_fu_1128_p2 = (or_ln117_641_fu_1115_p2 | and_ln102_681_fu_1053_p2);

assign or_ln117_643_fu_1142_p2 = (icmp_ln86_reg_1448 | and_ln102_663_fu_971_p2);

assign or_ln117_644_fu_1155_p2 = (or_ln117_643_fu_1142_p2 | and_ln102_682_fu_1059_p2);

assign or_ln117_645_fu_1169_p2 = (or_ln117_643_fu_1142_p2 | and_ln102_670_fu_1013_p2);

assign or_ln117_646_fu_1183_p2 = (or_ln117_645_fu_1169_p2 | and_ln102_683_fu_1069_p2);

assign or_ln117_647_fu_1197_p2 = (icmp_ln86_reg_1448 | and_ln102_660_fu_955_p2);

assign or_ln117_648_fu_1210_p2 = (or_ln117_647_fu_1197_p2 | and_ln102_684_fu_1075_p2);

assign or_ln117_649_fu_1224_p2 = (or_ln117_647_fu_1197_p2 | and_ln102_671_fu_1023_p2);

assign or_ln117_650_fu_1238_p2 = (or_ln117_649_fu_1224_p2 | and_ln102_685_fu_1085_p2);

assign or_ln117_651_fu_1252_p2 = (or_ln117_647_fu_1197_p2 | and_ln102_664_fu_987_p2);

assign or_ln117_652_fu_1266_p2 = (or_ln117_651_fu_1252_p2 | and_ln102_686_fu_1091_p2);

assign or_ln117_653_fu_1280_p2 = (or_ln117_651_fu_1252_p2 | and_ln102_672_fu_1033_p2);

assign or_ln117_654_fu_1294_p2 = (or_ln117_653_fu_1280_p2 | and_ln102_687_fu_1101_p2);

assign or_ln117_655_fu_748_p2 = (xor_ln117_fu_742_p2 | icmp_ln86_689_fu_396_p2);

assign or_ln117_656_fu_754_p2 = (or_ln117_655_fu_748_p2 | icmp_ln86_694_fu_426_p2);

assign or_ln117_fu_736_p2 = (and_ln104_139_fu_640_p2 | and_ln102_673_fu_670_p2);

assign select_ln117_667_fu_784_p3 = ((or_ln117_629_fu_764_p2[0:0] == 1'b1) ? select_ln117_fu_770_p3 : 2'd3);

assign select_ln117_668_fu_802_p3 = ((or_ln117_630_fu_778_p2[0:0] == 1'b1) ? zext_ln117_75_fu_792_p1 : 3'd4);

assign select_ln117_669_fu_816_p3 = ((or_ln117_631_fu_796_p2[0:0] == 1'b1) ? select_ln117_668_fu_802_p3 : 3'd5);

assign select_ln117_670_fu_824_p3 = ((or_ln117_632_fu_810_p2[0:0] == 1'b1) ? select_ln117_669_fu_816_p3 : 3'd6);

assign select_ln117_671_fu_838_p3 = ((and_ln102_fu_568_p2[0:0] == 1'b1) ? select_ln117_670_fu_824_p3 : 3'd7);

assign select_ln117_672_fu_856_p3 = ((or_ln117_633_fu_832_p2[0:0] == 1'b1) ? zext_ln117_76_fu_846_p1 : 4'd8);

assign select_ln117_673_fu_870_p3 = ((or_ln117_634_fu_850_p2[0:0] == 1'b1) ? select_ln117_672_fu_856_p3 : 4'd9);

assign select_ln117_674_fu_884_p3 = ((or_ln117_635_fu_864_p2[0:0] == 1'b1) ? select_ln117_673_fu_870_p3 : 4'd10);

assign select_ln117_675_fu_898_p3 = ((or_ln117_636_fu_878_p2[0:0] == 1'b1) ? select_ln117_674_fu_884_p3 : 4'd11);

assign select_ln117_676_fu_912_p3 = ((or_ln117_637_fu_892_p2[0:0] == 1'b1) ? select_ln117_675_fu_898_p3 : 4'd12);

assign select_ln117_677_fu_926_p3 = ((or_ln117_638_fu_906_p2[0:0] == 1'b1) ? select_ln117_676_fu_912_p3 : 4'd13);

assign select_ln117_678_fu_934_p3 = ((or_ln117_639_fu_920_p2[0:0] == 1'b1) ? select_ln117_677_fu_926_p3 : 4'd14);

assign select_ln117_679_fu_942_p3 = ((icmp_ln86_fu_378_p2[0:0] == 1'b1) ? select_ln117_678_fu_934_p3 : 4'd15);

assign select_ln117_680_fu_1120_p3 = ((or_ln117_640_fu_1107_p2[0:0] == 1'b1) ? zext_ln117_77_fu_1112_p1 : 5'd16);

assign select_ln117_681_fu_1134_p3 = ((or_ln117_641_fu_1115_p2[0:0] == 1'b1) ? select_ln117_680_fu_1120_p3 : 5'd17);

assign select_ln117_682_fu_1147_p3 = ((or_ln117_642_fu_1128_p2[0:0] == 1'b1) ? select_ln117_681_fu_1134_p3 : 5'd18);

assign select_ln117_683_fu_1161_p3 = ((or_ln117_643_fu_1142_p2[0:0] == 1'b1) ? select_ln117_682_fu_1147_p3 : 5'd19);

assign select_ln117_684_fu_1175_p3 = ((or_ln117_644_fu_1155_p2[0:0] == 1'b1) ? select_ln117_683_fu_1161_p3 : 5'd20);

assign select_ln117_685_fu_1189_p3 = ((or_ln117_645_fu_1169_p2[0:0] == 1'b1) ? select_ln117_684_fu_1175_p3 : 5'd21);

assign select_ln117_686_fu_1202_p3 = ((or_ln117_646_fu_1183_p2[0:0] == 1'b1) ? select_ln117_685_fu_1189_p3 : 5'd22);

assign select_ln117_687_fu_1216_p3 = ((or_ln117_647_fu_1197_p2[0:0] == 1'b1) ? select_ln117_686_fu_1202_p3 : 5'd23);

assign select_ln117_688_fu_1230_p3 = ((or_ln117_648_fu_1210_p2[0:0] == 1'b1) ? select_ln117_687_fu_1216_p3 : 5'd24);

assign select_ln117_689_fu_1244_p3 = ((or_ln117_649_fu_1224_p2[0:0] == 1'b1) ? select_ln117_688_fu_1230_p3 : 5'd25);

assign select_ln117_690_fu_1258_p3 = ((or_ln117_650_fu_1238_p2[0:0] == 1'b1) ? select_ln117_689_fu_1244_p3 : 5'd26);

assign select_ln117_691_fu_1272_p3 = ((or_ln117_651_fu_1252_p2[0:0] == 1'b1) ? select_ln117_690_fu_1258_p3 : 5'd27);

assign select_ln117_692_fu_1286_p3 = ((or_ln117_652_fu_1266_p2[0:0] == 1'b1) ? select_ln117_691_fu_1272_p3 : 5'd28);

assign select_ln117_693_fu_1300_p3 = ((or_ln117_653_fu_1280_p2[0:0] == 1'b1) ? select_ln117_692_fu_1286_p3 : 5'd29);

assign select_ln117_fu_770_p3 = ((or_ln117_fu_736_p2[0:0] == 1'b1) ? zext_ln117_fu_760_p1 : 2'd2);

assign tmp_fu_462_p4 = {{x_35_val[17:2]}};

assign xor_ln104_330_fu_574_p2 = (icmp_ln86_687_fu_384_p2 ^ 1'd1);

assign xor_ln104_331_fu_960_p2 = (icmp_ln86_688_reg_1457 ^ 1'd1);

assign xor_ln104_332_fu_592_p2 = (icmp_ln86_689_fu_396_p2 ^ 1'd1);

assign xor_ln104_333_fu_610_p2 = (icmp_ln86_690_fu_402_p2 ^ 1'd1);

assign xor_ln104_334_fu_976_p2 = (icmp_ln86_691_reg_1463 ^ 1'd1);

assign xor_ln104_335_fu_992_p2 = (icmp_ln86_692_reg_1469 ^ 1'd1);

assign xor_ln104_336_fu_628_p2 = (icmp_ln86_693_fu_420_p2 ^ 1'd1);

assign xor_ln104_337_fu_634_p2 = (icmp_ln86_694_fu_426_p2 ^ 1'd1);

assign xor_ln104_338_fu_652_p2 = (icmp_ln86_695_fu_432_p2 ^ 1'd1);

assign xor_ln104_339_fu_664_p2 = (icmp_ln86_696_fu_438_p2 ^ 1'd1);

assign xor_ln104_340_fu_1008_p2 = (icmp_ln86_697_reg_1475 ^ 1'd1);

assign xor_ln104_341_fu_1018_p2 = (icmp_ln86_698_reg_1481 ^ 1'd1);

assign xor_ln104_342_fu_1028_p2 = (icmp_ln86_699_reg_1487 ^ 1'd1);

assign xor_ln104_343_fu_1038_p2 = (icmp_ln86_1396_reg_1493 ^ 1'd1);

assign xor_ln104_fu_950_p2 = (icmp_ln86_reg_1448 ^ 1'd1);

assign xor_ln117_fu_742_p2 = (1'd1 ^ and_ln102_fu_568_p2);

assign zext_ln117_75_fu_792_p1 = select_ln117_667_fu_784_p3;

assign zext_ln117_76_fu_846_p1 = select_ln117_671_fu_838_p3;

assign zext_ln117_77_fu_1112_p1 = select_ln117_679_reg_1539;

assign zext_ln117_fu_760_p1 = or_ln117_656_fu_754_p2;

endmodule //my_prj_decision_function_26
