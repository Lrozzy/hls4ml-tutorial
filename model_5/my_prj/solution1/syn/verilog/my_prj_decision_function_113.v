// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_113 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_2_val,
        x_3_val,
        x_4_val,
        x_7_val,
        x_8_val,
        x_9_val,
        x_10_val,
        x_11_val,
        x_12_val,
        x_23_val,
        x_25_val,
        x_28_val,
        x_33_val,
        x_34_val,
        x_36_val,
        x_40_val,
        x_45_val,
        x_47_val,
        x_50_val,
        x_51_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_2_val;
input  [17:0] x_3_val;
input  [17:0] x_4_val;
input  [17:0] x_7_val;
input  [17:0] x_8_val;
input  [17:0] x_9_val;
input  [17:0] x_10_val;
input  [17:0] x_11_val;
input  [17:0] x_12_val;
input  [17:0] x_23_val;
input  [17:0] x_25_val;
input  [17:0] x_28_val;
input  [17:0] x_33_val;
input  [17:0] x_34_val;
input  [17:0] x_36_val;
input  [17:0] x_40_val;
input  [17:0] x_45_val;
input  [17:0] x_47_val;
input  [17:0] x_50_val;
input  [17:0] x_51_val;
input  [17:0] x_52_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_392_p2;
reg   [0:0] icmp_ln86_reg_1359;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_1673_fu_404_p2;
reg   [0:0] icmp_ln86_1673_reg_1367;
wire   [0:0] icmp_ln86_1676_fu_422_p2;
reg   [0:0] icmp_ln86_1676_reg_1373;
wire   [0:0] icmp_ln86_1677_fu_428_p2;
reg   [0:0] icmp_ln86_1677_reg_1379;
wire   [0:0] icmp_ln86_1681_fu_452_p2;
reg   [0:0] icmp_ln86_1681_reg_1385;
wire   [0:0] icmp_ln86_1682_fu_458_p2;
reg   [0:0] icmp_ln86_1682_reg_1391;
wire   [0:0] icmp_ln86_1683_fu_464_p2;
reg   [0:0] icmp_ln86_1683_reg_1397;
wire   [0:0] icmp_ln86_1684_fu_470_p2;
reg   [0:0] icmp_ln86_1684_reg_1403;
wire   [0:0] icmp_ln86_1690_fu_516_p2;
reg   [0:0] icmp_ln86_1690_reg_1409;
wire   [0:0] icmp_ln86_1691_fu_522_p2;
reg   [0:0] icmp_ln86_1691_reg_1414;
wire   [0:0] icmp_ln86_1692_fu_528_p2;
reg   [0:0] icmp_ln86_1692_reg_1419;
wire   [0:0] icmp_ln86_1693_fu_534_p2;
reg   [0:0] icmp_ln86_1693_reg_1424;
wire   [0:0] icmp_ln86_1694_fu_540_p2;
reg   [0:0] icmp_ln86_1694_reg_1429;
wire   [0:0] icmp_ln86_1695_fu_546_p2;
reg   [0:0] icmp_ln86_1695_reg_1434;
wire   [0:0] icmp_ln86_1696_fu_552_p2;
reg   [0:0] icmp_ln86_1696_reg_1439;
wire   [0:0] icmp_ln86_1697_fu_558_p2;
reg   [0:0] icmp_ln86_1697_reg_1444;
wire   [0:0] xor_ln104_fu_564_p2;
reg   [0:0] xor_ln104_reg_1449;
wire   [3:0] select_ln117_1630_fu_872_p3;
reg   [3:0] select_ln117_1630_reg_1455;
wire    ap_block_pp0_stage0;
wire   [10:0] tmp_fu_506_p4;
wire   [0:0] icmp_ln86_1672_fu_398_p2;
wire   [0:0] xor_ln104_799_fu_576_p2;
wire   [0:0] icmp_ln86_1674_fu_410_p2;
wire   [0:0] and_ln102_fu_570_p2;
wire   [0:0] xor_ln104_801_fu_594_p2;
wire   [0:0] icmp_ln86_1675_fu_416_p2;
wire   [0:0] and_ln104_fu_582_p2;
wire   [0:0] xor_ln104_802_fu_612_p2;
wire   [0:0] icmp_ln86_1678_fu_434_p2;
wire   [0:0] and_ln102_1861_fu_588_p2;
wire   [0:0] icmp_ln86_1679_fu_440_p2;
wire   [0:0] and_ln104_316_fu_600_p2;
wire   [0:0] icmp_ln86_1680_fu_446_p2;
wire   [0:0] and_ln102_1862_fu_606_p2;
wire   [0:0] xor_ln104_807_fu_648_p2;
wire   [0:0] icmp_ln86_1685_fu_476_p2;
wire   [0:0] and_ln102_1865_fu_624_p2;
wire   [0:0] icmp_ln86_1686_fu_482_p2;
wire   [0:0] xor_ln104_805_fu_630_p2;
wire   [0:0] and_ln102_1872_fu_666_p2;
wire   [0:0] icmp_ln86_1687_fu_488_p2;
wire   [0:0] and_ln102_1866_fu_636_p2;
wire   [0:0] icmp_ln86_1688_fu_494_p2;
wire   [0:0] xor_ln104_806_fu_642_p2;
wire   [0:0] and_ln102_1875_fu_684_p2;
wire   [0:0] icmp_ln86_1689_fu_500_p2;
wire   [0:0] and_ln102_1877_fu_696_p2;
wire   [0:0] and_ln104_317_fu_618_p2;
wire   [0:0] and_ln104_320_fu_654_p2;
wire   [0:0] or_ln117_1508_fu_714_p2;
wire   [0:0] or_ln117_1509_fu_720_p2;
wire   [0:0] or_ln117_fu_708_p2;
wire   [0:0] and_ln102_1871_fu_660_p2;
wire   [1:0] zext_ln117_fu_726_p1;
wire   [0:0] or_ln117_1510_fu_730_p2;
wire   [1:0] select_ln117_fu_736_p3;
wire   [1:0] select_ln117_1621_fu_750_p3;
wire   [0:0] or_ln117_1511_fu_744_p2;
wire   [0:0] and_ln102_1873_fu_672_p2;
wire   [2:0] zext_ln117_180_fu_758_p1;
wire   [0:0] or_ln117_1512_fu_762_p2;
wire   [2:0] select_ln117_1622_fu_768_p3;
wire   [0:0] or_ln117_1513_fu_776_p2;
wire   [0:0] and_ln102_1874_fu_678_p2;
wire   [2:0] select_ln117_1623_fu_782_p3;
wire   [0:0] or_ln117_1514_fu_790_p2;
wire   [2:0] select_ln117_1624_fu_796_p3;
wire   [2:0] select_ln117_1625_fu_810_p3;
wire   [0:0] or_ln117_1515_fu_804_p2;
wire   [0:0] and_ln102_1876_fu_690_p2;
wire   [3:0] zext_ln117_181_fu_818_p1;
wire   [0:0] or_ln117_1516_fu_822_p2;
wire   [3:0] select_ln117_1626_fu_828_p3;
wire   [0:0] or_ln117_1517_fu_836_p2;
wire   [0:0] and_ln102_1878_fu_702_p2;
wire   [3:0] select_ln117_1627_fu_842_p3;
wire   [0:0] or_ln117_1518_fu_850_p2;
wire   [3:0] select_ln117_1628_fu_856_p3;
wire   [3:0] select_ln117_1629_fu_864_p3;
wire   [0:0] xor_ln104_800_fu_884_p2;
wire   [0:0] and_ln102_1860_fu_880_p2;
wire   [0:0] xor_ln104_803_fu_899_p2;
wire   [0:0] and_ln104_315_fu_889_p2;
wire   [0:0] xor_ln104_804_fu_915_p2;
wire   [0:0] and_ln102_1863_fu_894_p2;
wire   [0:0] and_ln104_318_fu_904_p2;
wire   [0:0] and_ln102_1864_fu_910_p2;
wire   [0:0] and_ln104_319_fu_920_p2;
wire   [0:0] and_ln102_1867_fu_926_p2;
wire   [0:0] xor_ln104_808_fu_931_p2;
wire   [0:0] and_ln102_1880_fu_971_p2;
wire   [0:0] and_ln102_1868_fu_936_p2;
wire   [0:0] xor_ln104_809_fu_941_p2;
wire   [0:0] and_ln102_1883_fu_987_p2;
wire   [0:0] and_ln102_1869_fu_946_p2;
wire   [0:0] xor_ln104_810_fu_951_p2;
wire   [0:0] and_ln102_1886_fu_1003_p2;
wire   [0:0] and_ln102_1870_fu_956_p2;
wire   [0:0] xor_ln104_811_fu_961_p2;
wire   [0:0] and_ln102_1889_fu_1019_p2;
wire   [0:0] and_ln102_1879_fu_966_p2;
wire   [0:0] or_ln117_1519_fu_1030_p2;
wire   [0:0] or_ln117_1520_fu_1035_p2;
wire   [0:0] and_ln102_1881_fu_976_p2;
wire   [3:0] select_ln117_1631_fu_1040_p3;
wire   [0:0] or_ln117_1521_fu_1047_p2;
wire   [3:0] select_ln117_1632_fu_1053_p3;
wire   [3:0] select_ln117_1633_fu_1066_p3;
wire   [0:0] or_ln117_1522_fu_1061_p2;
wire   [0:0] and_ln102_1882_fu_982_p2;
wire   [4:0] zext_ln117_182_fu_1074_p1;
wire   [0:0] or_ln117_1523_fu_1078_p2;
wire   [4:0] select_ln117_1634_fu_1084_p3;
wire   [0:0] or_ln117_1524_fu_1092_p2;
wire   [0:0] and_ln102_1884_fu_992_p2;
wire   [4:0] select_ln117_1635_fu_1098_p3;
wire   [0:0] or_ln117_1525_fu_1106_p2;
wire   [4:0] select_ln117_1636_fu_1112_p3;
wire   [0:0] or_ln117_1526_fu_1120_p2;
wire   [0:0] and_ln102_1885_fu_998_p2;
wire   [4:0] select_ln117_1637_fu_1125_p3;
wire   [0:0] or_ln117_1527_fu_1133_p2;
wire   [4:0] select_ln117_1638_fu_1139_p3;
wire   [0:0] or_ln117_1528_fu_1147_p2;
wire   [0:0] and_ln102_1887_fu_1008_p2;
wire   [4:0] select_ln117_1639_fu_1153_p3;
wire   [0:0] or_ln117_1529_fu_1161_p2;
wire   [4:0] select_ln117_1640_fu_1167_p3;
wire   [0:0] or_ln117_1530_fu_1175_p2;
wire   [0:0] and_ln102_1888_fu_1014_p2;
wire   [4:0] select_ln117_1641_fu_1181_p3;
wire   [0:0] or_ln117_1531_fu_1189_p2;
wire   [4:0] select_ln117_1642_fu_1195_p3;
wire   [0:0] or_ln117_1532_fu_1203_p2;
wire   [0:0] and_ln102_1890_fu_1024_p2;
wire   [4:0] select_ln117_1643_fu_1209_p3;
wire   [0:0] or_ln117_1533_fu_1217_p2;
wire   [4:0] select_ln117_1644_fu_1223_p3;
wire   [11:0] agg_result_fu_1239_p57;
wire   [4:0] agg_result_fu_1239_p58;
wire   [11:0] agg_result_fu_1239_p59;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1239_p1;
wire   [4:0] agg_result_fu_1239_p3;
wire   [4:0] agg_result_fu_1239_p5;
wire   [4:0] agg_result_fu_1239_p7;
wire   [4:0] agg_result_fu_1239_p9;
wire   [4:0] agg_result_fu_1239_p11;
wire   [4:0] agg_result_fu_1239_p13;
wire   [4:0] agg_result_fu_1239_p15;
wire   [4:0] agg_result_fu_1239_p17;
wire   [4:0] agg_result_fu_1239_p19;
wire   [4:0] agg_result_fu_1239_p21;
wire   [4:0] agg_result_fu_1239_p23;
wire   [4:0] agg_result_fu_1239_p25;
wire   [4:0] agg_result_fu_1239_p27;
wire   [4:0] agg_result_fu_1239_p29;
wire   [4:0] agg_result_fu_1239_p31;
wire  signed [4:0] agg_result_fu_1239_p33;
wire  signed [4:0] agg_result_fu_1239_p35;
wire  signed [4:0] agg_result_fu_1239_p37;
wire  signed [4:0] agg_result_fu_1239_p39;
wire  signed [4:0] agg_result_fu_1239_p41;
wire  signed [4:0] agg_result_fu_1239_p43;
wire  signed [4:0] agg_result_fu_1239_p45;
wire  signed [4:0] agg_result_fu_1239_p47;
wire  signed [4:0] agg_result_fu_1239_p49;
wire  signed [4:0] agg_result_fu_1239_p51;
wire  signed [4:0] agg_result_fu_1239_p53;
wire  signed [4:0] agg_result_fu_1239_p55;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_57_5_12_1_1_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_57_5_12_1_1_x_U2271(
    .din0(12'd462),
    .din1(12'd248),
    .din2(12'd4092),
    .din3(12'd4023),
    .din4(12'd3674),
    .din5(12'd281),
    .din6(12'd1255),
    .din7(12'd225),
    .din8(12'd4088),
    .din9(12'd264),
    .din10(12'd3627),
    .din11(12'd252),
    .din12(12'd523),
    .din13(12'd93),
    .din14(12'd333),
    .din15(12'd1566),
    .din16(12'd62),
    .din17(12'd3822),
    .din18(12'd355),
    .din19(12'd25),
    .din20(12'd822),
    .din21(12'd4024),
    .din22(12'd3911),
    .din23(12'd77),
    .din24(12'd1437),
    .din25(12'd3942),
    .din26(12'd768),
    .din27(12'd112),
    .def(agg_result_fu_1239_p57),
    .sel(agg_result_fu_1239_p58),
    .dout(agg_result_fu_1239_p59)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_1673_reg_1367 <= icmp_ln86_1673_fu_404_p2;
        icmp_ln86_1676_reg_1373 <= icmp_ln86_1676_fu_422_p2;
        icmp_ln86_1677_reg_1379 <= icmp_ln86_1677_fu_428_p2;
        icmp_ln86_1681_reg_1385 <= icmp_ln86_1681_fu_452_p2;
        icmp_ln86_1682_reg_1391 <= icmp_ln86_1682_fu_458_p2;
        icmp_ln86_1683_reg_1397 <= icmp_ln86_1683_fu_464_p2;
        icmp_ln86_1684_reg_1403 <= icmp_ln86_1684_fu_470_p2;
        icmp_ln86_1690_reg_1409 <= icmp_ln86_1690_fu_516_p2;
        icmp_ln86_1691_reg_1414 <= icmp_ln86_1691_fu_522_p2;
        icmp_ln86_1692_reg_1419 <= icmp_ln86_1692_fu_528_p2;
        icmp_ln86_1693_reg_1424 <= icmp_ln86_1693_fu_534_p2;
        icmp_ln86_1694_reg_1429 <= icmp_ln86_1694_fu_540_p2;
        icmp_ln86_1695_reg_1434 <= icmp_ln86_1695_fu_546_p2;
        icmp_ln86_1696_reg_1439 <= icmp_ln86_1696_fu_552_p2;
        icmp_ln86_1697_reg_1444 <= icmp_ln86_1697_fu_558_p2;
        icmp_ln86_reg_1359 <= icmp_ln86_fu_392_p2;
        select_ln117_1630_reg_1455 <= select_ln117_1630_fu_872_p3;
        xor_ln104_reg_1449 <= xor_ln104_fu_564_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1239_p57 = 'bx;

assign agg_result_fu_1239_p58 = ((or_ln117_1533_fu_1217_p2[0:0] == 1'b1) ? select_ln117_1644_fu_1223_p3 : 5'd27);

assign and_ln102_1860_fu_880_p2 = (xor_ln104_reg_1449 & icmp_ln86_1673_reg_1367);

assign and_ln102_1861_fu_588_p2 = (icmp_ln86_1674_fu_410_p2 & and_ln102_fu_570_p2);

assign and_ln102_1862_fu_606_p2 = (icmp_ln86_1675_fu_416_p2 & and_ln104_fu_582_p2);

assign and_ln102_1863_fu_894_p2 = (icmp_ln86_1676_reg_1373 & and_ln102_1860_fu_880_p2);

assign and_ln102_1864_fu_910_p2 = (icmp_ln86_1677_reg_1379 & and_ln104_315_fu_889_p2);

assign and_ln102_1865_fu_624_p2 = (icmp_ln86_1678_fu_434_p2 & and_ln102_1861_fu_588_p2);

assign and_ln102_1866_fu_636_p2 = (icmp_ln86_1679_fu_440_p2 & and_ln104_316_fu_600_p2);

assign and_ln102_1867_fu_926_p2 = (icmp_ln86_1681_reg_1385 & and_ln102_1863_fu_894_p2);

assign and_ln102_1868_fu_936_p2 = (icmp_ln86_1682_reg_1391 & and_ln104_318_fu_904_p2);

assign and_ln102_1869_fu_946_p2 = (icmp_ln86_1683_reg_1397 & and_ln102_1864_fu_910_p2);

assign and_ln102_1870_fu_956_p2 = (icmp_ln86_1684_reg_1403 & and_ln104_319_fu_920_p2);

assign and_ln102_1871_fu_660_p2 = (icmp_ln86_1685_fu_476_p2 & and_ln102_1865_fu_624_p2);

assign and_ln102_1872_fu_666_p2 = (xor_ln104_805_fu_630_p2 & icmp_ln86_1686_fu_482_p2);

assign and_ln102_1873_fu_672_p2 = (and_ln102_1872_fu_666_p2 & and_ln102_1861_fu_588_p2);

assign and_ln102_1874_fu_678_p2 = (icmp_ln86_1687_fu_488_p2 & and_ln102_1866_fu_636_p2);

assign and_ln102_1875_fu_684_p2 = (xor_ln104_806_fu_642_p2 & icmp_ln86_1688_fu_494_p2);

assign and_ln102_1876_fu_690_p2 = (and_ln104_316_fu_600_p2 & and_ln102_1875_fu_684_p2);

assign and_ln102_1877_fu_696_p2 = (icmp_ln86_1689_fu_500_p2 & and_ln102_1862_fu_606_p2);

assign and_ln102_1878_fu_702_p2 = (icmp_ln86_1680_fu_446_p2 & and_ln102_1877_fu_696_p2);

assign and_ln102_1879_fu_966_p2 = (icmp_ln86_1690_reg_1409 & and_ln102_1867_fu_926_p2);

assign and_ln102_1880_fu_971_p2 = (xor_ln104_808_fu_931_p2 & icmp_ln86_1691_reg_1414);

assign and_ln102_1881_fu_976_p2 = (and_ln102_1880_fu_971_p2 & and_ln102_1863_fu_894_p2);

assign and_ln102_1882_fu_982_p2 = (icmp_ln86_1692_reg_1419 & and_ln102_1868_fu_936_p2);

assign and_ln102_1883_fu_987_p2 = (xor_ln104_809_fu_941_p2 & icmp_ln86_1693_reg_1424);

assign and_ln102_1884_fu_992_p2 = (and_ln104_318_fu_904_p2 & and_ln102_1883_fu_987_p2);

assign and_ln102_1885_fu_998_p2 = (icmp_ln86_1694_reg_1429 & and_ln102_1869_fu_946_p2);

assign and_ln102_1886_fu_1003_p2 = (xor_ln104_810_fu_951_p2 & icmp_ln86_1695_reg_1434);

assign and_ln102_1887_fu_1008_p2 = (and_ln102_1886_fu_1003_p2 & and_ln102_1864_fu_910_p2);

assign and_ln102_1888_fu_1014_p2 = (icmp_ln86_1696_reg_1439 & and_ln102_1870_fu_956_p2);

assign and_ln102_1889_fu_1019_p2 = (xor_ln104_811_fu_961_p2 & icmp_ln86_1697_reg_1444);

assign and_ln102_1890_fu_1024_p2 = (and_ln104_319_fu_920_p2 & and_ln102_1889_fu_1019_p2);

assign and_ln102_fu_570_p2 = (icmp_ln86_fu_392_p2 & icmp_ln86_1672_fu_398_p2);

assign and_ln104_315_fu_889_p2 = (xor_ln104_reg_1449 & xor_ln104_800_fu_884_p2);

assign and_ln104_316_fu_600_p2 = (xor_ln104_801_fu_594_p2 & and_ln102_fu_570_p2);

assign and_ln104_317_fu_618_p2 = (xor_ln104_802_fu_612_p2 & and_ln104_fu_582_p2);

assign and_ln104_318_fu_904_p2 = (xor_ln104_803_fu_899_p2 & and_ln102_1860_fu_880_p2);

assign and_ln104_319_fu_920_p2 = (xor_ln104_804_fu_915_p2 & and_ln104_315_fu_889_p2);

assign and_ln104_320_fu_654_p2 = (xor_ln104_807_fu_648_p2 & and_ln102_1862_fu_606_p2);

assign and_ln104_fu_582_p2 = (xor_ln104_799_fu_576_p2 & icmp_ln86_fu_392_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1239_p59;

assign icmp_ln86_1672_fu_398_p2 = (($signed(x_7_val) < $signed(18'd10908)) ? 1'b1 : 1'b0);

assign icmp_ln86_1673_fu_404_p2 = (($signed(x_33_val) < $signed(18'd768)) ? 1'b1 : 1'b0);

assign icmp_ln86_1674_fu_410_p2 = (($signed(x_4_val) < $signed(18'd81900)) ? 1'b1 : 1'b0);

assign icmp_ln86_1675_fu_416_p2 = (($signed(x_11_val) < $signed(18'd993)) ? 1'b1 : 1'b0);

assign icmp_ln86_1676_fu_422_p2 = (($signed(x_9_val) < $signed(18'd1139)) ? 1'b1 : 1'b0);

assign icmp_ln86_1677_fu_428_p2 = (($signed(x_2_val) < $signed(18'd279)) ? 1'b1 : 1'b0);

assign icmp_ln86_1678_fu_434_p2 = (($signed(x_4_val) < $signed(18'd80964)) ? 1'b1 : 1'b0);

assign icmp_ln86_1679_fu_440_p2 = (($signed(x_50_val) < $signed(18'd86863)) ? 1'b1 : 1'b0);

assign icmp_ln86_1680_fu_446_p2 = (($signed(x_25_val) < $signed(18'd137)) ? 1'b1 : 1'b0);

assign icmp_ln86_1681_fu_452_p2 = (($signed(x_11_val) < $signed(18'd561)) ? 1'b1 : 1'b0);

assign icmp_ln86_1682_fu_458_p2 = (($signed(x_23_val) < $signed(18'd24)) ? 1'b1 : 1'b0);

assign icmp_ln86_1683_fu_464_p2 = (($signed(x_9_val) < $signed(18'd610)) ? 1'b1 : 1'b0);

assign icmp_ln86_1684_fu_470_p2 = (($signed(x_10_val) < $signed(18'd734)) ? 1'b1 : 1'b0);

assign icmp_ln86_1685_fu_476_p2 = (($signed(x_28_val) < $signed(18'd13550)) ? 1'b1 : 1'b0);

assign icmp_ln86_1686_fu_482_p2 = (($signed(x_3_val) < $signed(18'd98544)) ? 1'b1 : 1'b0);

assign icmp_ln86_1687_fu_488_p2 = (($signed(x_36_val) < $signed(18'd7)) ? 1'b1 : 1'b0);

assign icmp_ln86_1688_fu_494_p2 = (($signed(x_51_val) < $signed(18'd146)) ? 1'b1 : 1'b0);

assign icmp_ln86_1689_fu_500_p2 = (($signed(x_47_val) < $signed(18'd211706)) ? 1'b1 : 1'b0);

assign icmp_ln86_1690_fu_516_p2 = (($signed(tmp_fu_506_p4) < $signed(11'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_1691_fu_522_p2 = (($signed(x_45_val) < $signed(18'd399)) ? 1'b1 : 1'b0);

assign icmp_ln86_1692_fu_528_p2 = (($signed(x_52_val) < $signed(18'd49665)) ? 1'b1 : 1'b0);

assign icmp_ln86_1693_fu_534_p2 = (($signed(x_40_val) < $signed(18'd412)) ? 1'b1 : 1'b0);

assign icmp_ln86_1694_fu_540_p2 = (($signed(x_34_val) < $signed(18'd438)) ? 1'b1 : 1'b0);

assign icmp_ln86_1695_fu_546_p2 = (($signed(x_1_val) < $signed(18'd70530)) ? 1'b1 : 1'b0);

assign icmp_ln86_1696_fu_552_p2 = (($signed(x_12_val) < $signed(18'd258418)) ? 1'b1 : 1'b0);

assign icmp_ln86_1697_fu_558_p2 = (($signed(x_2_val) < $signed(18'd359)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_392_p2 = (($signed(x_8_val) < $signed(18'd1854)) ? 1'b1 : 1'b0);

assign or_ln117_1508_fu_714_p2 = (xor_ln104_fu_564_p2 | icmp_ln86_1672_fu_398_p2);

assign or_ln117_1509_fu_720_p2 = (or_ln117_1508_fu_714_p2 | icmp_ln86_1675_fu_416_p2);

assign or_ln117_1510_fu_730_p2 = (or_ln117_fu_708_p2 | and_ln102_1871_fu_660_p2);

assign or_ln117_1511_fu_744_p2 = (or_ln117_fu_708_p2 | and_ln102_1865_fu_624_p2);

assign or_ln117_1512_fu_762_p2 = (or_ln117_1511_fu_744_p2 | and_ln102_1873_fu_672_p2);

assign or_ln117_1513_fu_776_p2 = (or_ln117_fu_708_p2 | and_ln102_1861_fu_588_p2);

assign or_ln117_1514_fu_790_p2 = (or_ln117_1513_fu_776_p2 | and_ln102_1874_fu_678_p2);

assign or_ln117_1515_fu_804_p2 = (or_ln117_1513_fu_776_p2 | and_ln102_1866_fu_636_p2);

assign or_ln117_1516_fu_822_p2 = (or_ln117_1515_fu_804_p2 | and_ln102_1876_fu_690_p2);

assign or_ln117_1517_fu_836_p2 = (or_ln117_fu_708_p2 | and_ln102_fu_570_p2);

assign or_ln117_1518_fu_850_p2 = (or_ln117_1517_fu_836_p2 | and_ln102_1878_fu_702_p2);

assign or_ln117_1519_fu_1030_p2 = (icmp_ln86_reg_1359 | and_ln102_1879_fu_966_p2);

assign or_ln117_1520_fu_1035_p2 = (icmp_ln86_reg_1359 | and_ln102_1867_fu_926_p2);

assign or_ln117_1521_fu_1047_p2 = (or_ln117_1520_fu_1035_p2 | and_ln102_1881_fu_976_p2);

assign or_ln117_1522_fu_1061_p2 = (icmp_ln86_reg_1359 | and_ln102_1863_fu_894_p2);

assign or_ln117_1523_fu_1078_p2 = (or_ln117_1522_fu_1061_p2 | and_ln102_1882_fu_982_p2);

assign or_ln117_1524_fu_1092_p2 = (or_ln117_1522_fu_1061_p2 | and_ln102_1868_fu_936_p2);

assign or_ln117_1525_fu_1106_p2 = (or_ln117_1524_fu_1092_p2 | and_ln102_1884_fu_992_p2);

assign or_ln117_1526_fu_1120_p2 = (icmp_ln86_reg_1359 | and_ln102_1860_fu_880_p2);

assign or_ln117_1527_fu_1133_p2 = (or_ln117_1526_fu_1120_p2 | and_ln102_1885_fu_998_p2);

assign or_ln117_1528_fu_1147_p2 = (or_ln117_1526_fu_1120_p2 | and_ln102_1869_fu_946_p2);

assign or_ln117_1529_fu_1161_p2 = (or_ln117_1528_fu_1147_p2 | and_ln102_1887_fu_1008_p2);

assign or_ln117_1530_fu_1175_p2 = (or_ln117_1526_fu_1120_p2 | and_ln102_1864_fu_910_p2);

assign or_ln117_1531_fu_1189_p2 = (or_ln117_1530_fu_1175_p2 | and_ln102_1888_fu_1014_p2);

assign or_ln117_1532_fu_1203_p2 = (or_ln117_1530_fu_1175_p2 | and_ln102_1870_fu_956_p2);

assign or_ln117_1533_fu_1217_p2 = (or_ln117_1532_fu_1203_p2 | and_ln102_1890_fu_1024_p2);

assign or_ln117_fu_708_p2 = (and_ln104_320_fu_654_p2 | and_ln104_317_fu_618_p2);

assign select_ln117_1621_fu_750_p3 = ((or_ln117_1510_fu_730_p2[0:0] == 1'b1) ? select_ln117_fu_736_p3 : 2'd3);

assign select_ln117_1622_fu_768_p3 = ((or_ln117_1511_fu_744_p2[0:0] == 1'b1) ? zext_ln117_180_fu_758_p1 : 3'd4);

assign select_ln117_1623_fu_782_p3 = ((or_ln117_1512_fu_762_p2[0:0] == 1'b1) ? select_ln117_1622_fu_768_p3 : 3'd5);

assign select_ln117_1624_fu_796_p3 = ((or_ln117_1513_fu_776_p2[0:0] == 1'b1) ? select_ln117_1623_fu_782_p3 : 3'd6);

assign select_ln117_1625_fu_810_p3 = ((or_ln117_1514_fu_790_p2[0:0] == 1'b1) ? select_ln117_1624_fu_796_p3 : 3'd7);

assign select_ln117_1626_fu_828_p3 = ((or_ln117_1515_fu_804_p2[0:0] == 1'b1) ? zext_ln117_181_fu_818_p1 : 4'd8);

assign select_ln117_1627_fu_842_p3 = ((or_ln117_1516_fu_822_p2[0:0] == 1'b1) ? select_ln117_1626_fu_828_p3 : 4'd9);

assign select_ln117_1628_fu_856_p3 = ((or_ln117_1517_fu_836_p2[0:0] == 1'b1) ? select_ln117_1627_fu_842_p3 : 4'd10);

assign select_ln117_1629_fu_864_p3 = ((or_ln117_1518_fu_850_p2[0:0] == 1'b1) ? select_ln117_1628_fu_856_p3 : 4'd11);

assign select_ln117_1630_fu_872_p3 = ((icmp_ln86_fu_392_p2[0:0] == 1'b1) ? select_ln117_1629_fu_864_p3 : 4'd12);

assign select_ln117_1631_fu_1040_p3 = ((or_ln117_1519_fu_1030_p2[0:0] == 1'b1) ? select_ln117_1630_reg_1455 : 4'd13);

assign select_ln117_1632_fu_1053_p3 = ((or_ln117_1520_fu_1035_p2[0:0] == 1'b1) ? select_ln117_1631_fu_1040_p3 : 4'd14);

assign select_ln117_1633_fu_1066_p3 = ((or_ln117_1521_fu_1047_p2[0:0] == 1'b1) ? select_ln117_1632_fu_1053_p3 : 4'd15);

assign select_ln117_1634_fu_1084_p3 = ((or_ln117_1522_fu_1061_p2[0:0] == 1'b1) ? zext_ln117_182_fu_1074_p1 : 5'd16);

assign select_ln117_1635_fu_1098_p3 = ((or_ln117_1523_fu_1078_p2[0:0] == 1'b1) ? select_ln117_1634_fu_1084_p3 : 5'd17);

assign select_ln117_1636_fu_1112_p3 = ((or_ln117_1524_fu_1092_p2[0:0] == 1'b1) ? select_ln117_1635_fu_1098_p3 : 5'd18);

assign select_ln117_1637_fu_1125_p3 = ((or_ln117_1525_fu_1106_p2[0:0] == 1'b1) ? select_ln117_1636_fu_1112_p3 : 5'd19);

assign select_ln117_1638_fu_1139_p3 = ((or_ln117_1526_fu_1120_p2[0:0] == 1'b1) ? select_ln117_1637_fu_1125_p3 : 5'd20);

assign select_ln117_1639_fu_1153_p3 = ((or_ln117_1527_fu_1133_p2[0:0] == 1'b1) ? select_ln117_1638_fu_1139_p3 : 5'd21);

assign select_ln117_1640_fu_1167_p3 = ((or_ln117_1528_fu_1147_p2[0:0] == 1'b1) ? select_ln117_1639_fu_1153_p3 : 5'd22);

assign select_ln117_1641_fu_1181_p3 = ((or_ln117_1529_fu_1161_p2[0:0] == 1'b1) ? select_ln117_1640_fu_1167_p3 : 5'd23);

assign select_ln117_1642_fu_1195_p3 = ((or_ln117_1530_fu_1175_p2[0:0] == 1'b1) ? select_ln117_1641_fu_1181_p3 : 5'd24);

assign select_ln117_1643_fu_1209_p3 = ((or_ln117_1531_fu_1189_p2[0:0] == 1'b1) ? select_ln117_1642_fu_1195_p3 : 5'd25);

assign select_ln117_1644_fu_1223_p3 = ((or_ln117_1532_fu_1203_p2[0:0] == 1'b1) ? select_ln117_1643_fu_1209_p3 : 5'd26);

assign select_ln117_fu_736_p3 = ((or_ln117_fu_708_p2[0:0] == 1'b1) ? zext_ln117_fu_726_p1 : 2'd2);

assign tmp_fu_506_p4 = {{x_25_val[17:7]}};

assign xor_ln104_799_fu_576_p2 = (icmp_ln86_1672_fu_398_p2 ^ 1'd1);

assign xor_ln104_800_fu_884_p2 = (icmp_ln86_1673_reg_1367 ^ 1'd1);

assign xor_ln104_801_fu_594_p2 = (icmp_ln86_1674_fu_410_p2 ^ 1'd1);

assign xor_ln104_802_fu_612_p2 = (icmp_ln86_1675_fu_416_p2 ^ 1'd1);

assign xor_ln104_803_fu_899_p2 = (icmp_ln86_1676_reg_1373 ^ 1'd1);

assign xor_ln104_804_fu_915_p2 = (icmp_ln86_1677_reg_1379 ^ 1'd1);

assign xor_ln104_805_fu_630_p2 = (icmp_ln86_1678_fu_434_p2 ^ 1'd1);

assign xor_ln104_806_fu_642_p2 = (icmp_ln86_1679_fu_440_p2 ^ 1'd1);

assign xor_ln104_807_fu_648_p2 = (icmp_ln86_1680_fu_446_p2 ^ 1'd1);

assign xor_ln104_808_fu_931_p2 = (icmp_ln86_1681_reg_1385 ^ 1'd1);

assign xor_ln104_809_fu_941_p2 = (icmp_ln86_1682_reg_1391 ^ 1'd1);

assign xor_ln104_810_fu_951_p2 = (icmp_ln86_1683_reg_1397 ^ 1'd1);

assign xor_ln104_811_fu_961_p2 = (icmp_ln86_1684_reg_1403 ^ 1'd1);

assign xor_ln104_fu_564_p2 = (icmp_ln86_fu_392_p2 ^ 1'd1);

assign zext_ln117_180_fu_758_p1 = select_ln117_1621_fu_750_p3;

assign zext_ln117_181_fu_818_p1 = select_ln117_1625_fu_810_p3;

assign zext_ln117_182_fu_1074_p1 = select_ln117_1633_fu_1066_p3;

assign zext_ln117_fu_726_p1 = or_ln117_1509_fu_720_p2;

endmodule //my_prj_decision_function_113
