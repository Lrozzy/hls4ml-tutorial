// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_70 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_3_val,
        x_6_val,
        x_8_val,
        x_10_val,
        x_13_val,
        x_14_val,
        x_15_val,
        x_17_val,
        x_19_val,
        x_22_val,
        x_24_val,
        x_27_val,
        x_32_val,
        x_42_val,
        x_43_val,
        x_44_val,
        x_47_val,
        x_48_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_3_val;
input  [17:0] x_6_val;
input  [17:0] x_8_val;
input  [17:0] x_10_val;
input  [17:0] x_13_val;
input  [17:0] x_14_val;
input  [17:0] x_15_val;
input  [17:0] x_17_val;
input  [17:0] x_19_val;
input  [17:0] x_22_val;
input  [17:0] x_24_val;
input  [17:0] x_27_val;
input  [17:0] x_32_val;
input  [17:0] x_42_val;
input  [17:0] x_43_val;
input  [17:0] x_44_val;
input  [17:0] x_47_val;
input  [17:0] x_48_val;
input  [17:0] x_52_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_386_p2;
reg   [0:0] icmp_ln86_reg_1434;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_832_fu_398_p2;
reg   [0:0] icmp_ln86_832_reg_1443;
wire   [0:0] icmp_ln86_835_fu_416_p2;
reg   [0:0] icmp_ln86_835_reg_1449;
wire   [0:0] icmp_ln86_836_fu_422_p2;
reg   [0:0] icmp_ln86_836_reg_1455;
wire   [0:0] icmp_ln86_841_fu_452_p2;
reg   [0:0] icmp_ln86_841_reg_1461;
wire   [0:0] icmp_ln86_842_fu_458_p2;
reg   [0:0] icmp_ln86_842_reg_1467;
wire   [0:0] icmp_ln86_843_fu_464_p2;
reg   [0:0] icmp_ln86_843_reg_1473;
wire   [0:0] icmp_ln86_844_fu_470_p2;
reg   [0:0] icmp_ln86_844_reg_1479;
wire   [0:0] icmp_ln86_852_fu_518_p2;
reg   [0:0] icmp_ln86_852_reg_1485;
wire   [0:0] icmp_ln86_853_fu_524_p2;
reg   [0:0] icmp_ln86_853_reg_1490;
wire   [0:0] icmp_ln86_854_fu_530_p2;
reg   [0:0] icmp_ln86_854_reg_1495;
wire   [0:0] icmp_ln86_855_fu_536_p2;
reg   [0:0] icmp_ln86_855_reg_1500;
wire   [0:0] icmp_ln86_856_fu_542_p2;
reg   [0:0] icmp_ln86_856_reg_1505;
wire   [0:0] icmp_ln86_857_fu_548_p2;
reg   [0:0] icmp_ln86_857_reg_1510;
wire   [0:0] icmp_ln86_858_fu_554_p2;
reg   [0:0] icmp_ln86_858_reg_1515;
wire   [0:0] icmp_ln86_859_fu_560_p2;
reg   [0:0] icmp_ln86_859_reg_1520;
wire   [3:0] select_ln117_818_fu_928_p3;
reg   [3:0] select_ln117_818_reg_1525;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln86_831_fu_392_p2;
wire   [0:0] xor_ln104_393_fu_572_p2;
wire   [0:0] icmp_ln86_833_fu_404_p2;
wire   [0:0] and_ln102_fu_566_p2;
wire   [0:0] xor_ln104_395_fu_590_p2;
wire   [0:0] icmp_ln86_834_fu_410_p2;
wire   [0:0] and_ln104_fu_578_p2;
wire   [0:0] xor_ln104_396_fu_608_p2;
wire   [0:0] icmp_ln86_837_fu_428_p2;
wire   [0:0] and_ln102_1021_fu_584_p2;
wire   [0:0] icmp_ln86_838_fu_434_p2;
wire   [0:0] and_ln104_150_fu_596_p2;
wire   [0:0] icmp_ln86_839_fu_440_p2;
wire   [0:0] and_ln102_1022_fu_602_p2;
wire   [0:0] icmp_ln86_840_fu_446_p2;
wire   [0:0] and_ln104_151_fu_614_p2;
wire   [0:0] icmp_ln86_845_fu_476_p2;
wire   [0:0] and_ln102_1025_fu_620_p2;
wire   [0:0] icmp_ln86_846_fu_482_p2;
wire   [0:0] xor_ln104_399_fu_626_p2;
wire   [0:0] and_ln102_1034_fu_674_p2;
wire   [0:0] icmp_ln86_847_fu_488_p2;
wire   [0:0] xor_ln104_400_fu_638_p2;
wire   [0:0] and_ln102_1036_fu_686_p2;
wire   [0:0] icmp_ln86_848_fu_494_p2;
wire   [0:0] and_ln102_1027_fu_644_p2;
wire   [0:0] icmp_ln86_849_fu_500_p2;
wire   [0:0] xor_ln104_401_fu_650_p2;
wire   [0:0] and_ln102_1039_fu_704_p2;
wire   [0:0] icmp_ln86_850_fu_506_p2;
wire   [0:0] and_ln102_1028_fu_656_p2;
wire   [0:0] icmp_ln86_851_fu_512_p2;
wire   [0:0] xor_ln104_402_fu_662_p2;
wire   [0:0] and_ln102_1042_fu_722_p2;
wire   [0:0] and_ln102_1026_fu_632_p2;
wire   [0:0] and_ln102_1033_fu_668_p2;
wire   [0:0] xor_ln117_fu_740_p2;
wire   [0:0] or_ln117_fu_734_p2;
wire   [1:0] zext_ln117_fu_746_p1;
wire   [0:0] or_ln117_732_fu_750_p2;
wire   [0:0] and_ln102_1035_fu_680_p2;
wire   [1:0] select_ln117_fu_756_p3;
wire   [1:0] select_ln117_806_fu_770_p3;
wire   [0:0] or_ln117_733_fu_764_p2;
wire   [2:0] zext_ln117_88_fu_778_p1;
wire   [0:0] or_ln117_734_fu_782_p2;
wire   [0:0] and_ln102_1037_fu_692_p2;
wire   [2:0] select_ln117_807_fu_788_p3;
wire   [0:0] or_ln117_735_fu_796_p2;
wire   [2:0] select_ln117_808_fu_802_p3;
wire   [0:0] and_ln102_1038_fu_698_p2;
wire   [2:0] select_ln117_809_fu_810_p3;
wire   [2:0] select_ln117_810_fu_824_p3;
wire   [0:0] or_ln117_736_fu_818_p2;
wire   [3:0] zext_ln117_89_fu_832_p1;
wire   [0:0] or_ln117_737_fu_836_p2;
wire   [0:0] and_ln102_1040_fu_710_p2;
wire   [3:0] select_ln117_811_fu_842_p3;
wire   [0:0] or_ln117_738_fu_850_p2;
wire   [3:0] select_ln117_812_fu_856_p3;
wire   [0:0] or_ln117_739_fu_864_p2;
wire   [0:0] and_ln102_1041_fu_716_p2;
wire   [3:0] select_ln117_813_fu_870_p3;
wire   [0:0] or_ln117_740_fu_878_p2;
wire   [3:0] select_ln117_814_fu_884_p3;
wire   [0:0] or_ln117_741_fu_892_p2;
wire   [0:0] and_ln102_1043_fu_728_p2;
wire   [3:0] select_ln117_815_fu_898_p3;
wire   [0:0] or_ln117_742_fu_906_p2;
wire   [3:0] select_ln117_816_fu_912_p3;
wire   [3:0] select_ln117_817_fu_920_p3;
wire   [0:0] xor_ln104_fu_936_p2;
wire   [0:0] xor_ln104_394_fu_946_p2;
wire   [0:0] and_ln102_1020_fu_941_p2;
wire   [0:0] xor_ln104_397_fu_962_p2;
wire   [0:0] and_ln104_149_fu_951_p2;
wire   [0:0] xor_ln104_398_fu_978_p2;
wire   [0:0] and_ln102_1023_fu_957_p2;
wire   [0:0] and_ln104_152_fu_967_p2;
wire   [0:0] and_ln102_1024_fu_973_p2;
wire   [0:0] and_ln104_153_fu_983_p2;
wire   [0:0] and_ln102_1029_fu_989_p2;
wire   [0:0] xor_ln104_403_fu_994_p2;
wire   [0:0] and_ln102_1045_fu_1034_p2;
wire   [0:0] and_ln102_1030_fu_999_p2;
wire   [0:0] xor_ln104_404_fu_1004_p2;
wire   [0:0] and_ln102_1048_fu_1050_p2;
wire   [0:0] and_ln102_1031_fu_1009_p2;
wire   [0:0] xor_ln104_405_fu_1014_p2;
wire   [0:0] and_ln102_1051_fu_1066_p2;
wire   [0:0] and_ln102_1032_fu_1019_p2;
wire   [0:0] xor_ln104_406_fu_1024_p2;
wire   [0:0] and_ln102_1054_fu_1082_p2;
wire   [0:0] and_ln102_1044_fu_1029_p2;
wire   [0:0] or_ln117_743_fu_1093_p2;
wire   [4:0] zext_ln117_90_fu_1098_p1;
wire   [0:0] or_ln117_744_fu_1101_p2;
wire   [0:0] and_ln102_1046_fu_1039_p2;
wire   [4:0] select_ln117_819_fu_1106_p3;
wire   [0:0] or_ln117_745_fu_1114_p2;
wire   [4:0] select_ln117_820_fu_1120_p3;
wire   [0:0] or_ln117_746_fu_1128_p2;
wire   [0:0] and_ln102_1047_fu_1045_p2;
wire   [4:0] select_ln117_821_fu_1133_p3;
wire   [0:0] or_ln117_747_fu_1141_p2;
wire   [4:0] select_ln117_822_fu_1147_p3;
wire   [0:0] or_ln117_748_fu_1155_p2;
wire   [0:0] and_ln102_1049_fu_1055_p2;
wire   [4:0] select_ln117_823_fu_1161_p3;
wire   [0:0] or_ln117_749_fu_1169_p2;
wire   [4:0] select_ln117_824_fu_1175_p3;
wire   [0:0] or_ln117_750_fu_1183_p2;
wire   [0:0] and_ln102_1050_fu_1061_p2;
wire   [4:0] select_ln117_825_fu_1188_p3;
wire   [0:0] or_ln117_751_fu_1196_p2;
wire   [4:0] select_ln117_826_fu_1202_p3;
wire   [0:0] or_ln117_752_fu_1210_p2;
wire   [0:0] and_ln102_1052_fu_1071_p2;
wire   [4:0] select_ln117_827_fu_1216_p3;
wire   [0:0] or_ln117_753_fu_1224_p2;
wire   [4:0] select_ln117_828_fu_1230_p3;
wire   [0:0] or_ln117_754_fu_1238_p2;
wire   [0:0] and_ln102_1053_fu_1077_p2;
wire   [4:0] select_ln117_829_fu_1244_p3;
wire   [0:0] or_ln117_755_fu_1252_p2;
wire   [4:0] select_ln117_830_fu_1258_p3;
wire   [0:0] or_ln117_756_fu_1266_p2;
wire   [0:0] and_ln102_1055_fu_1087_p2;
wire   [4:0] select_ln117_831_fu_1272_p3;
wire   [0:0] or_ln117_757_fu_1280_p2;
wire   [4:0] select_ln117_832_fu_1286_p3;
wire   [11:0] agg_result_fu_1302_p63;
wire   [4:0] agg_result_fu_1302_p64;
wire   [11:0] agg_result_fu_1302_p65;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1302_p1;
wire   [4:0] agg_result_fu_1302_p3;
wire   [4:0] agg_result_fu_1302_p5;
wire   [4:0] agg_result_fu_1302_p7;
wire   [4:0] agg_result_fu_1302_p9;
wire   [4:0] agg_result_fu_1302_p11;
wire   [4:0] agg_result_fu_1302_p13;
wire   [4:0] agg_result_fu_1302_p15;
wire   [4:0] agg_result_fu_1302_p17;
wire   [4:0] agg_result_fu_1302_p19;
wire   [4:0] agg_result_fu_1302_p21;
wire   [4:0] agg_result_fu_1302_p23;
wire   [4:0] agg_result_fu_1302_p25;
wire   [4:0] agg_result_fu_1302_p27;
wire   [4:0] agg_result_fu_1302_p29;
wire   [4:0] agg_result_fu_1302_p31;
wire  signed [4:0] agg_result_fu_1302_p33;
wire  signed [4:0] agg_result_fu_1302_p35;
wire  signed [4:0] agg_result_fu_1302_p37;
wire  signed [4:0] agg_result_fu_1302_p39;
wire  signed [4:0] agg_result_fu_1302_p41;
wire  signed [4:0] agg_result_fu_1302_p43;
wire  signed [4:0] agg_result_fu_1302_p45;
wire  signed [4:0] agg_result_fu_1302_p47;
wire  signed [4:0] agg_result_fu_1302_p49;
wire  signed [4:0] agg_result_fu_1302_p51;
wire  signed [4:0] agg_result_fu_1302_p53;
wire  signed [4:0] agg_result_fu_1302_p55;
wire  signed [4:0] agg_result_fu_1302_p57;
wire  signed [4:0] agg_result_fu_1302_p59;
wire  signed [4:0] agg_result_fu_1302_p61;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_63_5_12_1_1_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 12 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 12 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 12 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_63_5_12_1_1_x_U718(
    .din0(12'd1706),
    .din1(12'd3790),
    .din2(12'd1126),
    .din3(12'd3636),
    .din4(12'd370),
    .din5(12'd3806),
    .din6(12'd816),
    .din7(12'd482),
    .din8(12'd3627),
    .din9(12'd204),
    .din10(12'd848),
    .din11(12'd3853),
    .din12(12'd2891),
    .din13(12'd3558),
    .din14(12'd532),
    .din15(12'd4043),
    .din16(12'd311),
    .din17(12'd3814),
    .din18(12'd4050),
    .din19(12'd291),
    .din20(12'd1189),
    .din21(12'd3758),
    .din22(12'd507),
    .din23(12'd3979),
    .din24(12'd89),
    .din25(12'd283),
    .din26(12'd88),
    .din27(12'd251),
    .din28(12'd4030),
    .din29(12'd3983),
    .din30(12'd39),
    .def(agg_result_fu_1302_p63),
    .sel(agg_result_fu_1302_p64),
    .dout(agg_result_fu_1302_p65)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_832_reg_1443 <= icmp_ln86_832_fu_398_p2;
        icmp_ln86_835_reg_1449 <= icmp_ln86_835_fu_416_p2;
        icmp_ln86_836_reg_1455 <= icmp_ln86_836_fu_422_p2;
        icmp_ln86_841_reg_1461 <= icmp_ln86_841_fu_452_p2;
        icmp_ln86_842_reg_1467 <= icmp_ln86_842_fu_458_p2;
        icmp_ln86_843_reg_1473 <= icmp_ln86_843_fu_464_p2;
        icmp_ln86_844_reg_1479 <= icmp_ln86_844_fu_470_p2;
        icmp_ln86_852_reg_1485 <= icmp_ln86_852_fu_518_p2;
        icmp_ln86_853_reg_1490 <= icmp_ln86_853_fu_524_p2;
        icmp_ln86_854_reg_1495 <= icmp_ln86_854_fu_530_p2;
        icmp_ln86_855_reg_1500 <= icmp_ln86_855_fu_536_p2;
        icmp_ln86_856_reg_1505 <= icmp_ln86_856_fu_542_p2;
        icmp_ln86_857_reg_1510 <= icmp_ln86_857_fu_548_p2;
        icmp_ln86_858_reg_1515 <= icmp_ln86_858_fu_554_p2;
        icmp_ln86_859_reg_1520 <= icmp_ln86_859_fu_560_p2;
        icmp_ln86_reg_1434 <= icmp_ln86_fu_386_p2;
        select_ln117_818_reg_1525 <= select_ln117_818_fu_928_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1302_p63 = 'bx;

assign agg_result_fu_1302_p64 = ((or_ln117_757_fu_1280_p2[0:0] == 1'b1) ? select_ln117_832_fu_1286_p3 : 5'd30);

assign and_ln102_1020_fu_941_p2 = (xor_ln104_fu_936_p2 & icmp_ln86_832_reg_1443);

assign and_ln102_1021_fu_584_p2 = (icmp_ln86_833_fu_404_p2 & and_ln102_fu_566_p2);

assign and_ln102_1022_fu_602_p2 = (icmp_ln86_834_fu_410_p2 & and_ln104_fu_578_p2);

assign and_ln102_1023_fu_957_p2 = (icmp_ln86_835_reg_1449 & and_ln102_1020_fu_941_p2);

assign and_ln102_1024_fu_973_p2 = (icmp_ln86_836_reg_1455 & and_ln104_149_fu_951_p2);

assign and_ln102_1025_fu_620_p2 = (icmp_ln86_837_fu_428_p2 & and_ln102_1021_fu_584_p2);

assign and_ln102_1026_fu_632_p2 = (icmp_ln86_838_fu_434_p2 & and_ln104_150_fu_596_p2);

assign and_ln102_1027_fu_644_p2 = (icmp_ln86_839_fu_440_p2 & and_ln102_1022_fu_602_p2);

assign and_ln102_1028_fu_656_p2 = (icmp_ln86_840_fu_446_p2 & and_ln104_151_fu_614_p2);

assign and_ln102_1029_fu_989_p2 = (icmp_ln86_841_reg_1461 & and_ln102_1023_fu_957_p2);

assign and_ln102_1030_fu_999_p2 = (icmp_ln86_842_reg_1467 & and_ln104_152_fu_967_p2);

assign and_ln102_1031_fu_1009_p2 = (icmp_ln86_843_reg_1473 & and_ln102_1024_fu_973_p2);

assign and_ln102_1032_fu_1019_p2 = (icmp_ln86_844_reg_1479 & and_ln104_153_fu_983_p2);

assign and_ln102_1033_fu_668_p2 = (icmp_ln86_845_fu_476_p2 & and_ln102_1025_fu_620_p2);

assign and_ln102_1034_fu_674_p2 = (xor_ln104_399_fu_626_p2 & icmp_ln86_846_fu_482_p2);

assign and_ln102_1035_fu_680_p2 = (and_ln102_1034_fu_674_p2 & and_ln102_1021_fu_584_p2);

assign and_ln102_1036_fu_686_p2 = (xor_ln104_400_fu_638_p2 & icmp_ln86_847_fu_488_p2);

assign and_ln102_1037_fu_692_p2 = (and_ln104_150_fu_596_p2 & and_ln102_1036_fu_686_p2);

assign and_ln102_1038_fu_698_p2 = (icmp_ln86_848_fu_494_p2 & and_ln102_1027_fu_644_p2);

assign and_ln102_1039_fu_704_p2 = (xor_ln104_401_fu_650_p2 & icmp_ln86_849_fu_500_p2);

assign and_ln102_1040_fu_710_p2 = (and_ln102_1039_fu_704_p2 & and_ln102_1022_fu_602_p2);

assign and_ln102_1041_fu_716_p2 = (icmp_ln86_850_fu_506_p2 & and_ln102_1028_fu_656_p2);

assign and_ln102_1042_fu_722_p2 = (xor_ln104_402_fu_662_p2 & icmp_ln86_851_fu_512_p2);

assign and_ln102_1043_fu_728_p2 = (and_ln104_151_fu_614_p2 & and_ln102_1042_fu_722_p2);

assign and_ln102_1044_fu_1029_p2 = (icmp_ln86_852_reg_1485 & and_ln102_1029_fu_989_p2);

assign and_ln102_1045_fu_1034_p2 = (xor_ln104_403_fu_994_p2 & icmp_ln86_853_reg_1490);

assign and_ln102_1046_fu_1039_p2 = (and_ln102_1045_fu_1034_p2 & and_ln102_1023_fu_957_p2);

assign and_ln102_1047_fu_1045_p2 = (icmp_ln86_854_reg_1495 & and_ln102_1030_fu_999_p2);

assign and_ln102_1048_fu_1050_p2 = (xor_ln104_404_fu_1004_p2 & icmp_ln86_855_reg_1500);

assign and_ln102_1049_fu_1055_p2 = (and_ln104_152_fu_967_p2 & and_ln102_1048_fu_1050_p2);

assign and_ln102_1050_fu_1061_p2 = (icmp_ln86_856_reg_1505 & and_ln102_1031_fu_1009_p2);

assign and_ln102_1051_fu_1066_p2 = (xor_ln104_405_fu_1014_p2 & icmp_ln86_857_reg_1510);

assign and_ln102_1052_fu_1071_p2 = (and_ln102_1051_fu_1066_p2 & and_ln102_1024_fu_973_p2);

assign and_ln102_1053_fu_1077_p2 = (icmp_ln86_858_reg_1515 & and_ln102_1032_fu_1019_p2);

assign and_ln102_1054_fu_1082_p2 = (xor_ln104_406_fu_1024_p2 & icmp_ln86_859_reg_1520);

assign and_ln102_1055_fu_1087_p2 = (and_ln104_153_fu_983_p2 & and_ln102_1054_fu_1082_p2);

assign and_ln102_fu_566_p2 = (icmp_ln86_fu_386_p2 & icmp_ln86_831_fu_392_p2);

assign and_ln104_149_fu_951_p2 = (xor_ln104_fu_936_p2 & xor_ln104_394_fu_946_p2);

assign and_ln104_150_fu_596_p2 = (xor_ln104_395_fu_590_p2 & and_ln102_fu_566_p2);

assign and_ln104_151_fu_614_p2 = (xor_ln104_396_fu_608_p2 & and_ln104_fu_578_p2);

assign and_ln104_152_fu_967_p2 = (xor_ln104_397_fu_962_p2 & and_ln102_1020_fu_941_p2);

assign and_ln104_153_fu_983_p2 = (xor_ln104_398_fu_978_p2 & and_ln104_149_fu_951_p2);

assign and_ln104_fu_578_p2 = (xor_ln104_393_fu_572_p2 & icmp_ln86_fu_386_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1302_p65;

assign icmp_ln86_831_fu_392_p2 = (($signed(x_3_val) < $signed(18'd124153)) ? 1'b1 : 1'b0);

assign icmp_ln86_832_fu_398_p2 = (($signed(x_52_val) < $signed(18'd32257)) ? 1'b1 : 1'b0);

assign icmp_ln86_833_fu_404_p2 = (($signed(x_19_val) < $signed(18'd1094)) ? 1'b1 : 1'b0);

assign icmp_ln86_834_fu_410_p2 = (($signed(x_8_val) < $signed(18'd1033)) ? 1'b1 : 1'b0);

assign icmp_ln86_835_fu_416_p2 = (($signed(x_1_val) < $signed(18'd129160)) ? 1'b1 : 1'b0);

assign icmp_ln86_836_fu_422_p2 = (($signed(x_27_val) < $signed(18'd4945)) ? 1'b1 : 1'b0);

assign icmp_ln86_837_fu_428_p2 = (($signed(x_44_val) < $signed(18'd5)) ? 1'b1 : 1'b0);

assign icmp_ln86_838_fu_434_p2 = (($signed(x_1_val) < $signed(18'd176542)) ? 1'b1 : 1'b0);

assign icmp_ln86_839_fu_440_p2 = (($signed(x_8_val) < $signed(18'd615)) ? 1'b1 : 1'b0);

assign icmp_ln86_840_fu_446_p2 = (($signed(x_14_val) < $signed(18'd80)) ? 1'b1 : 1'b0);

assign icmp_ln86_841_fu_452_p2 = (($signed(x_1_val) < $signed(18'd206292)) ? 1'b1 : 1'b0);

assign icmp_ln86_842_fu_458_p2 = (($signed(x_3_val) < $signed(18'd68830)) ? 1'b1 : 1'b0);

assign icmp_ln86_843_fu_464_p2 = (($signed(x_48_val) < $signed(18'd5036)) ? 1'b1 : 1'b0);

assign icmp_ln86_844_fu_470_p2 = (($signed(x_13_val) < $signed(18'd476)) ? 1'b1 : 1'b0);

assign icmp_ln86_845_fu_476_p2 = (($signed(x_6_val) < $signed(18'd5511)) ? 1'b1 : 1'b0);

assign icmp_ln86_846_fu_482_p2 = (($signed(x_15_val) < $signed(18'd15)) ? 1'b1 : 1'b0);

assign icmp_ln86_847_fu_488_p2 = (($signed(x_10_val) < $signed(18'd893)) ? 1'b1 : 1'b0);

assign icmp_ln86_848_fu_494_p2 = (($signed(x_22_val) < $signed(18'd21)) ? 1'b1 : 1'b0);

assign icmp_ln86_849_fu_500_p2 = (($signed(x_42_val) < $signed(18'd94)) ? 1'b1 : 1'b0);

assign icmp_ln86_850_fu_506_p2 = (($signed(x_15_val) < $signed(18'd17)) ? 1'b1 : 1'b0);

assign icmp_ln86_851_fu_512_p2 = (($signed(x_1_val) < $signed(18'd119501)) ? 1'b1 : 1'b0);

assign icmp_ln86_852_fu_518_p2 = (($signed(x_17_val) < $signed(18'd62)) ? 1'b1 : 1'b0);

assign icmp_ln86_853_fu_524_p2 = (($signed(x_1_val) < $signed(18'd45152)) ? 1'b1 : 1'b0);

assign icmp_ln86_854_fu_530_p2 = (($signed(x_47_val) < $signed(18'd49417)) ? 1'b1 : 1'b0);

assign icmp_ln86_855_fu_536_p2 = (($signed(x_32_val) < $signed(18'd794)) ? 1'b1 : 1'b0);

assign icmp_ln86_856_fu_542_p2 = (($signed(x_24_val) < $signed(18'd428)) ? 1'b1 : 1'b0);

assign icmp_ln86_857_fu_548_p2 = (($signed(x_27_val) < $signed(18'd2641)) ? 1'b1 : 1'b0);

assign icmp_ln86_858_fu_554_p2 = (($signed(x_43_val) < $signed(18'd38)) ? 1'b1 : 1'b0);

assign icmp_ln86_859_fu_560_p2 = (($signed(x_52_val) < $signed(18'd52737)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_386_p2 = (($signed(x_17_val) < $signed(18'd5)) ? 1'b1 : 1'b0);

assign or_ln117_732_fu_750_p2 = (and_ln102_1026_fu_632_p2 | and_ln102_1025_fu_620_p2);

assign or_ln117_733_fu_764_p2 = (or_ln117_732_fu_750_p2 | and_ln102_1035_fu_680_p2);

assign or_ln117_734_fu_782_p2 = (and_ln102_1026_fu_632_p2 | and_ln102_1021_fu_584_p2);

assign or_ln117_735_fu_796_p2 = (or_ln117_734_fu_782_p2 | and_ln102_1037_fu_692_p2);

assign or_ln117_736_fu_818_p2 = (and_ln102_fu_566_p2 | and_ln102_1038_fu_698_p2);

assign or_ln117_737_fu_836_p2 = (and_ln102_fu_566_p2 | and_ln102_1027_fu_644_p2);

assign or_ln117_738_fu_850_p2 = (or_ln117_737_fu_836_p2 | and_ln102_1040_fu_710_p2);

assign or_ln117_739_fu_864_p2 = (and_ln102_fu_566_p2 | and_ln102_1022_fu_602_p2);

assign or_ln117_740_fu_878_p2 = (or_ln117_739_fu_864_p2 | and_ln102_1041_fu_716_p2);

assign or_ln117_741_fu_892_p2 = (or_ln117_739_fu_864_p2 | and_ln102_1028_fu_656_p2);

assign or_ln117_742_fu_906_p2 = (or_ln117_741_fu_892_p2 | and_ln102_1043_fu_728_p2);

assign or_ln117_743_fu_1093_p2 = (icmp_ln86_reg_1434 | and_ln102_1044_fu_1029_p2);

assign or_ln117_744_fu_1101_p2 = (icmp_ln86_reg_1434 | and_ln102_1029_fu_989_p2);

assign or_ln117_745_fu_1114_p2 = (or_ln117_744_fu_1101_p2 | and_ln102_1046_fu_1039_p2);

assign or_ln117_746_fu_1128_p2 = (icmp_ln86_reg_1434 | and_ln102_1023_fu_957_p2);

assign or_ln117_747_fu_1141_p2 = (or_ln117_746_fu_1128_p2 | and_ln102_1047_fu_1045_p2);

assign or_ln117_748_fu_1155_p2 = (or_ln117_746_fu_1128_p2 | and_ln102_1030_fu_999_p2);

assign or_ln117_749_fu_1169_p2 = (or_ln117_748_fu_1155_p2 | and_ln102_1049_fu_1055_p2);

assign or_ln117_750_fu_1183_p2 = (icmp_ln86_reg_1434 | and_ln102_1020_fu_941_p2);

assign or_ln117_751_fu_1196_p2 = (or_ln117_750_fu_1183_p2 | and_ln102_1050_fu_1061_p2);

assign or_ln117_752_fu_1210_p2 = (or_ln117_750_fu_1183_p2 | and_ln102_1031_fu_1009_p2);

assign or_ln117_753_fu_1224_p2 = (or_ln117_752_fu_1210_p2 | and_ln102_1052_fu_1071_p2);

assign or_ln117_754_fu_1238_p2 = (or_ln117_750_fu_1183_p2 | and_ln102_1024_fu_973_p2);

assign or_ln117_755_fu_1252_p2 = (or_ln117_754_fu_1238_p2 | and_ln102_1053_fu_1077_p2);

assign or_ln117_756_fu_1266_p2 = (or_ln117_754_fu_1238_p2 | and_ln102_1032_fu_1019_p2);

assign or_ln117_757_fu_1280_p2 = (or_ln117_756_fu_1266_p2 | and_ln102_1055_fu_1087_p2);

assign or_ln117_fu_734_p2 = (and_ln102_1033_fu_668_p2 | and_ln102_1026_fu_632_p2);

assign select_ln117_806_fu_770_p3 = ((or_ln117_732_fu_750_p2[0:0] == 1'b1) ? select_ln117_fu_756_p3 : 2'd3);

assign select_ln117_807_fu_788_p3 = ((or_ln117_733_fu_764_p2[0:0] == 1'b1) ? zext_ln117_88_fu_778_p1 : 3'd4);

assign select_ln117_808_fu_802_p3 = ((or_ln117_734_fu_782_p2[0:0] == 1'b1) ? select_ln117_807_fu_788_p3 : 3'd5);

assign select_ln117_809_fu_810_p3 = ((or_ln117_735_fu_796_p2[0:0] == 1'b1) ? select_ln117_808_fu_802_p3 : 3'd6);

assign select_ln117_810_fu_824_p3 = ((and_ln102_fu_566_p2[0:0] == 1'b1) ? select_ln117_809_fu_810_p3 : 3'd7);

assign select_ln117_811_fu_842_p3 = ((or_ln117_736_fu_818_p2[0:0] == 1'b1) ? zext_ln117_89_fu_832_p1 : 4'd8);

assign select_ln117_812_fu_856_p3 = ((or_ln117_737_fu_836_p2[0:0] == 1'b1) ? select_ln117_811_fu_842_p3 : 4'd9);

assign select_ln117_813_fu_870_p3 = ((or_ln117_738_fu_850_p2[0:0] == 1'b1) ? select_ln117_812_fu_856_p3 : 4'd10);

assign select_ln117_814_fu_884_p3 = ((or_ln117_739_fu_864_p2[0:0] == 1'b1) ? select_ln117_813_fu_870_p3 : 4'd11);

assign select_ln117_815_fu_898_p3 = ((or_ln117_740_fu_878_p2[0:0] == 1'b1) ? select_ln117_814_fu_884_p3 : 4'd12);

assign select_ln117_816_fu_912_p3 = ((or_ln117_741_fu_892_p2[0:0] == 1'b1) ? select_ln117_815_fu_898_p3 : 4'd13);

assign select_ln117_817_fu_920_p3 = ((or_ln117_742_fu_906_p2[0:0] == 1'b1) ? select_ln117_816_fu_912_p3 : 4'd14);

assign select_ln117_818_fu_928_p3 = ((icmp_ln86_fu_386_p2[0:0] == 1'b1) ? select_ln117_817_fu_920_p3 : 4'd15);

assign select_ln117_819_fu_1106_p3 = ((or_ln117_743_fu_1093_p2[0:0] == 1'b1) ? zext_ln117_90_fu_1098_p1 : 5'd16);

assign select_ln117_820_fu_1120_p3 = ((or_ln117_744_fu_1101_p2[0:0] == 1'b1) ? select_ln117_819_fu_1106_p3 : 5'd17);

assign select_ln117_821_fu_1133_p3 = ((or_ln117_745_fu_1114_p2[0:0] == 1'b1) ? select_ln117_820_fu_1120_p3 : 5'd18);

assign select_ln117_822_fu_1147_p3 = ((or_ln117_746_fu_1128_p2[0:0] == 1'b1) ? select_ln117_821_fu_1133_p3 : 5'd19);

assign select_ln117_823_fu_1161_p3 = ((or_ln117_747_fu_1141_p2[0:0] == 1'b1) ? select_ln117_822_fu_1147_p3 : 5'd20);

assign select_ln117_824_fu_1175_p3 = ((or_ln117_748_fu_1155_p2[0:0] == 1'b1) ? select_ln117_823_fu_1161_p3 : 5'd21);

assign select_ln117_825_fu_1188_p3 = ((or_ln117_749_fu_1169_p2[0:0] == 1'b1) ? select_ln117_824_fu_1175_p3 : 5'd22);

assign select_ln117_826_fu_1202_p3 = ((or_ln117_750_fu_1183_p2[0:0] == 1'b1) ? select_ln117_825_fu_1188_p3 : 5'd23);

assign select_ln117_827_fu_1216_p3 = ((or_ln117_751_fu_1196_p2[0:0] == 1'b1) ? select_ln117_826_fu_1202_p3 : 5'd24);

assign select_ln117_828_fu_1230_p3 = ((or_ln117_752_fu_1210_p2[0:0] == 1'b1) ? select_ln117_827_fu_1216_p3 : 5'd25);

assign select_ln117_829_fu_1244_p3 = ((or_ln117_753_fu_1224_p2[0:0] == 1'b1) ? select_ln117_828_fu_1230_p3 : 5'd26);

assign select_ln117_830_fu_1258_p3 = ((or_ln117_754_fu_1238_p2[0:0] == 1'b1) ? select_ln117_829_fu_1244_p3 : 5'd27);

assign select_ln117_831_fu_1272_p3 = ((or_ln117_755_fu_1252_p2[0:0] == 1'b1) ? select_ln117_830_fu_1258_p3 : 5'd28);

assign select_ln117_832_fu_1286_p3 = ((or_ln117_756_fu_1266_p2[0:0] == 1'b1) ? select_ln117_831_fu_1272_p3 : 5'd29);

assign select_ln117_fu_756_p3 = ((or_ln117_fu_734_p2[0:0] == 1'b1) ? zext_ln117_fu_746_p1 : 2'd2);

assign xor_ln104_393_fu_572_p2 = (icmp_ln86_831_fu_392_p2 ^ 1'd1);

assign xor_ln104_394_fu_946_p2 = (icmp_ln86_832_reg_1443 ^ 1'd1);

assign xor_ln104_395_fu_590_p2 = (icmp_ln86_833_fu_404_p2 ^ 1'd1);

assign xor_ln104_396_fu_608_p2 = (icmp_ln86_834_fu_410_p2 ^ 1'd1);

assign xor_ln104_397_fu_962_p2 = (icmp_ln86_835_reg_1449 ^ 1'd1);

assign xor_ln104_398_fu_978_p2 = (icmp_ln86_836_reg_1455 ^ 1'd1);

assign xor_ln104_399_fu_626_p2 = (icmp_ln86_837_fu_428_p2 ^ 1'd1);

assign xor_ln104_400_fu_638_p2 = (icmp_ln86_838_fu_434_p2 ^ 1'd1);

assign xor_ln104_401_fu_650_p2 = (icmp_ln86_839_fu_440_p2 ^ 1'd1);

assign xor_ln104_402_fu_662_p2 = (icmp_ln86_840_fu_446_p2 ^ 1'd1);

assign xor_ln104_403_fu_994_p2 = (icmp_ln86_841_reg_1461 ^ 1'd1);

assign xor_ln104_404_fu_1004_p2 = (icmp_ln86_842_reg_1467 ^ 1'd1);

assign xor_ln104_405_fu_1014_p2 = (icmp_ln86_843_reg_1473 ^ 1'd1);

assign xor_ln104_406_fu_1024_p2 = (icmp_ln86_844_reg_1479 ^ 1'd1);

assign xor_ln104_fu_936_p2 = (icmp_ln86_reg_1434 ^ 1'd1);

assign xor_ln117_fu_740_p2 = (1'd1 ^ and_ln102_1026_fu_632_p2);

assign zext_ln117_88_fu_778_p1 = select_ln117_806_fu_770_p3;

assign zext_ln117_89_fu_832_p1 = select_ln117_810_fu_824_p3;

assign zext_ln117_90_fu_1098_p1 = select_ln117_818_reg_1525;

assign zext_ln117_fu_746_p1 = xor_ln117_fu_740_p2;

endmodule //my_prj_decision_function_70
