// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_61 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_3_val,
        x_6_val,
        x_9_val,
        x_11_val,
        x_12_val,
        x_17_val,
        x_19_val,
        x_23_val,
        x_26_val,
        x_33_val,
        x_35_val,
        x_38_val,
        x_45_val,
        x_47_val,
        x_48_val,
        x_49_val,
        x_50_val,
        x_51_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_3_val;
input  [17:0] x_6_val;
input  [17:0] x_9_val;
input  [17:0] x_11_val;
input  [17:0] x_12_val;
input  [17:0] x_17_val;
input  [17:0] x_19_val;
input  [17:0] x_23_val;
input  [17:0] x_26_val;
input  [17:0] x_33_val;
input  [17:0] x_35_val;
input  [17:0] x_38_val;
input  [17:0] x_45_val;
input  [17:0] x_47_val;
input  [17:0] x_48_val;
input  [17:0] x_49_val;
input  [17:0] x_50_val;
input  [17:0] x_51_val;
input  [17:0] x_52_val;
output  [12:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_1097_fu_414_p2;
reg   [0:0] icmp_ln86_1097_reg_1362;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_1102_fu_444_p2;
reg   [0:0] icmp_ln86_1102_reg_1368;
wire   [0:0] icmp_ln86_1103_fu_450_p2;
reg   [0:0] icmp_ln86_1103_reg_1374;
wire   [0:0] icmp_ln86_1104_fu_456_p2;
reg   [0:0] icmp_ln86_1104_reg_1380;
wire   [0:0] icmp_ln86_1111_fu_508_p2;
reg   [0:0] icmp_ln86_1111_reg_1386;
wire   [0:0] icmp_ln86_1112_fu_514_p2;
reg   [0:0] icmp_ln86_1112_reg_1391;
wire   [0:0] icmp_ln86_1113_fu_520_p2;
reg   [0:0] icmp_ln86_1113_reg_1396;
wire   [0:0] icmp_ln86_1114_fu_526_p2;
reg   [0:0] icmp_ln86_1114_reg_1401;
wire   [0:0] icmp_ln86_1115_fu_532_p2;
reg   [0:0] icmp_ln86_1115_reg_1406;
wire   [0:0] icmp_ln86_1116_fu_538_p2;
reg   [0:0] icmp_ln86_1116_reg_1411;
wire   [0:0] icmp_ln86_1117_fu_544_p2;
reg   [0:0] icmp_ln86_1117_reg_1416;
wire   [0:0] and_ln104_197_fu_586_p2;
reg   [0:0] and_ln104_197_reg_1421;
wire   [0:0] and_ln104_200_fu_640_p2;
reg   [0:0] and_ln104_200_reg_1428;
wire   [0:0] and_ln102_1346_fu_682_p2;
reg   [0:0] and_ln102_1346_reg_1435;
wire   [0:0] or_ln117_974_fu_932_p2;
reg   [0:0] or_ln117_974_reg_1441;
wire   [3:0] select_ln117_1069_fu_946_p3;
reg   [3:0] select_ln117_1069_reg_1447;
wire    ap_block_pp0_stage0;
wire   [13:0] tmp_14_fu_462_p4;
wire   [0:0] icmp_ln86_fu_378_p2;
wire   [0:0] icmp_ln86_1092_fu_384_p2;
wire   [0:0] xor_ln104_517_fu_562_p2;
wire   [0:0] icmp_ln86_1093_fu_390_p2;
wire   [0:0] xor_ln104_fu_550_p2;
wire   [0:0] xor_ln104_518_fu_580_p2;
wire   [0:0] icmp_ln86_1094_fu_396_p2;
wire   [0:0] and_ln102_fu_556_p2;
wire   [0:0] xor_ln104_519_fu_598_p2;
wire   [0:0] icmp_ln86_1095_fu_402_p2;
wire   [0:0] and_ln104_fu_568_p2;
wire   [0:0] xor_ln104_520_fu_616_p2;
wire   [0:0] icmp_ln86_1096_fu_408_p2;
wire   [0:0] and_ln102_1338_fu_574_p2;
wire   [0:0] xor_ln104_521_fu_634_p2;
wire   [0:0] icmp_ln86_1098_fu_420_p2;
wire   [0:0] and_ln102_1339_fu_592_p2;
wire   [0:0] icmp_ln86_1099_fu_426_p2;
wire   [0:0] and_ln104_198_fu_604_p2;
wire   [0:0] icmp_ln86_1100_fu_432_p2;
wire   [0:0] and_ln102_1340_fu_610_p2;
wire   [0:0] icmp_ln86_1101_fu_438_p2;
wire   [0:0] and_ln104_199_fu_622_p2;
wire   [0:0] xor_ln104_526_fu_688_p2;
wire   [0:0] icmp_ln86_1105_fu_472_p2;
wire   [0:0] and_ln102_1343_fu_646_p2;
wire   [0:0] icmp_ln86_1106_fu_478_p2;
wire   [0:0] xor_ln104_523_fu_652_p2;
wire   [0:0] and_ln102_1351_fu_706_p2;
wire   [0:0] icmp_ln86_1107_fu_484_p2;
wire   [0:0] and_ln102_1344_fu_658_p2;
wire   [0:0] icmp_ln86_1108_fu_490_p2;
wire   [0:0] xor_ln104_524_fu_664_p2;
wire   [0:0] and_ln102_1354_fu_724_p2;
wire   [0:0] icmp_ln86_1109_fu_496_p2;
wire   [0:0] and_ln102_1345_fu_670_p2;
wire   [0:0] icmp_ln86_1110_fu_502_p2;
wire   [0:0] xor_ln104_525_fu_676_p2;
wire   [0:0] and_ln102_1357_fu_742_p2;
wire   [0:0] and_ln102_1341_fu_628_p2;
wire   [0:0] and_ln104_202_fu_694_p2;
wire   [0:0] xor_ln117_fu_760_p2;
wire   [0:0] or_ln117_fu_754_p2;
wire   [0:0] and_ln102_1350_fu_700_p2;
wire   [1:0] zext_ln117_fu_766_p1;
wire   [0:0] or_ln117_963_fu_770_p2;
wire   [1:0] select_ln117_fu_776_p3;
wire   [1:0] select_ln117_1058_fu_790_p3;
wire   [0:0] or_ln117_964_fu_784_p2;
wire   [0:0] and_ln102_1352_fu_712_p2;
wire   [2:0] zext_ln117_115_fu_798_p1;
wire   [0:0] or_ln117_965_fu_802_p2;
wire   [2:0] select_ln117_1059_fu_808_p3;
wire   [0:0] or_ln117_966_fu_816_p2;
wire   [0:0] and_ln102_1353_fu_718_p2;
wire   [2:0] select_ln117_1060_fu_822_p3;
wire   [0:0] or_ln117_967_fu_830_p2;
wire   [2:0] select_ln117_1061_fu_836_p3;
wire   [2:0] select_ln117_1062_fu_850_p3;
wire   [0:0] or_ln117_968_fu_844_p2;
wire   [0:0] and_ln102_1355_fu_730_p2;
wire   [3:0] zext_ln117_116_fu_858_p1;
wire   [0:0] or_ln117_969_fu_862_p2;
wire   [3:0] select_ln117_1063_fu_868_p3;
wire   [0:0] or_ln117_970_fu_876_p2;
wire   [0:0] and_ln102_1356_fu_736_p2;
wire   [3:0] select_ln117_1064_fu_882_p3;
wire   [0:0] or_ln117_971_fu_890_p2;
wire   [3:0] select_ln117_1065_fu_896_p3;
wire   [0:0] or_ln117_972_fu_904_p2;
wire   [0:0] and_ln102_1358_fu_748_p2;
wire   [3:0] select_ln117_1066_fu_910_p3;
wire   [0:0] or_ln117_973_fu_918_p2;
wire   [3:0] select_ln117_1067_fu_924_p3;
wire   [3:0] select_ln117_1068_fu_938_p3;
wire   [0:0] xor_ln104_522_fu_958_p2;
wire   [0:0] and_ln102_1342_fu_954_p2;
wire   [0:0] and_ln104_201_fu_963_p2;
wire   [0:0] and_ln102_1347_fu_968_p2;
wire   [0:0] xor_ln104_527_fu_972_p2;
wire   [0:0] and_ln102_1361_fu_1006_p2;
wire   [0:0] and_ln102_1348_fu_977_p2;
wire   [0:0] xor_ln104_528_fu_982_p2;
wire   [0:0] and_ln102_1364_fu_1021_p2;
wire   [0:0] and_ln102_1349_fu_987_p2;
wire   [0:0] xor_ln104_529_fu_992_p2;
wire   [0:0] and_ln102_1367_fu_1037_p2;
wire   [0:0] and_ln102_1359_fu_997_p2;
wire   [0:0] or_ln117_975_fu_1048_p2;
wire   [3:0] select_ln117_1070_fu_1057_p3;
wire   [0:0] or_ln117_976_fu_1053_p2;
wire   [0:0] and_ln102_1360_fu_1001_p2;
wire   [4:0] zext_ln117_117_fu_1064_p1;
wire   [0:0] or_ln117_977_fu_1068_p2;
wire   [4:0] select_ln117_1071_fu_1074_p3;
wire   [0:0] or_ln117_978_fu_1082_p2;
wire   [0:0] and_ln102_1362_fu_1011_p2;
wire   [4:0] select_ln117_1072_fu_1088_p3;
wire   [0:0] or_ln117_979_fu_1096_p2;
wire   [4:0] select_ln117_1073_fu_1102_p3;
wire   [0:0] or_ln117_980_fu_1110_p2;
wire   [0:0] and_ln102_1363_fu_1016_p2;
wire   [4:0] select_ln117_1074_fu_1115_p3;
wire   [0:0] or_ln117_981_fu_1123_p2;
wire   [4:0] select_ln117_1075_fu_1129_p3;
wire   [0:0] or_ln117_982_fu_1137_p2;
wire   [0:0] and_ln102_1365_fu_1026_p2;
wire   [4:0] select_ln117_1076_fu_1143_p3;
wire   [0:0] or_ln117_983_fu_1151_p2;
wire   [4:0] select_ln117_1077_fu_1157_p3;
wire   [0:0] or_ln117_984_fu_1165_p2;
wire   [0:0] and_ln102_1366_fu_1032_p2;
wire   [4:0] select_ln117_1078_fu_1171_p3;
wire   [0:0] or_ln117_985_fu_1179_p2;
wire   [4:0] select_ln117_1079_fu_1185_p3;
wire   [0:0] or_ln117_986_fu_1193_p2;
wire   [0:0] and_ln102_1368_fu_1042_p2;
wire   [4:0] select_ln117_1080_fu_1199_p3;
wire   [0:0] or_ln117_987_fu_1207_p2;
wire   [4:0] select_ln117_1081_fu_1213_p3;
wire   [12:0] tmp_fu_1234_p57;
wire   [4:0] tmp_fu_1234_p58;
wire   [0:0] or_ln117_988_fu_1221_p2;
wire   [12:0] tmp_fu_1234_p59;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] tmp_fu_1234_p1;
wire   [4:0] tmp_fu_1234_p3;
wire   [4:0] tmp_fu_1234_p5;
wire   [4:0] tmp_fu_1234_p7;
wire   [4:0] tmp_fu_1234_p9;
wire   [4:0] tmp_fu_1234_p11;
wire   [4:0] tmp_fu_1234_p13;
wire   [4:0] tmp_fu_1234_p15;
wire   [4:0] tmp_fu_1234_p17;
wire   [4:0] tmp_fu_1234_p19;
wire   [4:0] tmp_fu_1234_p21;
wire   [4:0] tmp_fu_1234_p23;
wire   [4:0] tmp_fu_1234_p25;
wire   [4:0] tmp_fu_1234_p27;
wire   [4:0] tmp_fu_1234_p29;
wire   [4:0] tmp_fu_1234_p31;
wire  signed [4:0] tmp_fu_1234_p33;
wire  signed [4:0] tmp_fu_1234_p35;
wire  signed [4:0] tmp_fu_1234_p37;
wire  signed [4:0] tmp_fu_1234_p39;
wire  signed [4:0] tmp_fu_1234_p41;
wire  signed [4:0] tmp_fu_1234_p43;
wire  signed [4:0] tmp_fu_1234_p45;
wire  signed [4:0] tmp_fu_1234_p47;
wire  signed [4:0] tmp_fu_1234_p49;
wire  signed [4:0] tmp_fu_1234_p51;
wire  signed [4:0] tmp_fu_1234_p53;
wire  signed [4:0] tmp_fu_1234_p55;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_57_5_13_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 13 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 13 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 13 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 13 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 13 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 13 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 13 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 13 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 13 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 13 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 13 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 13 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 13 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 13 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 13 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 13 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 13 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 13 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 13 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 13 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 13 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 13 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 13 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 13 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 13 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 13 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 13 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 13 ),
    .def_WIDTH( 13 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 13 ))
sparsemux_57_5_13_1_1_U884(
    .din0(13'd567),
    .din1(13'd7796),
    .din2(13'd1670),
    .din3(13'd89),
    .din4(13'd8092),
    .din5(13'd7768),
    .din6(13'd52),
    .din7(13'd8173),
    .din8(13'd7955),
    .din9(13'd916),
    .din10(13'd8144),
    .din11(13'd299),
    .din12(13'd255),
    .din13(13'd7701),
    .din14(13'd403),
    .din15(13'd3582),
    .din16(13'd7792),
    .din17(13'd1263),
    .din18(13'd57),
    .din19(13'd7709),
    .din20(13'd19),
    .din21(13'd7994),
    .din22(13'd1916),
    .din23(13'd193),
    .din24(13'd1188),
    .din25(13'd7830),
    .din26(13'd7758),
    .din27(13'd562),
    .def(tmp_fu_1234_p57),
    .sel(tmp_fu_1234_p58),
    .dout(tmp_fu_1234_p59)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln102_1346_reg_1435 <= and_ln102_1346_fu_682_p2;
        and_ln104_197_reg_1421 <= and_ln104_197_fu_586_p2;
        and_ln104_200_reg_1428 <= and_ln104_200_fu_640_p2;
        icmp_ln86_1097_reg_1362 <= icmp_ln86_1097_fu_414_p2;
        icmp_ln86_1102_reg_1368 <= icmp_ln86_1102_fu_444_p2;
        icmp_ln86_1103_reg_1374 <= icmp_ln86_1103_fu_450_p2;
        icmp_ln86_1104_reg_1380 <= icmp_ln86_1104_fu_456_p2;
        icmp_ln86_1111_reg_1386 <= icmp_ln86_1111_fu_508_p2;
        icmp_ln86_1112_reg_1391 <= icmp_ln86_1112_fu_514_p2;
        icmp_ln86_1113_reg_1396 <= icmp_ln86_1113_fu_520_p2;
        icmp_ln86_1114_reg_1401 <= icmp_ln86_1114_fu_526_p2;
        icmp_ln86_1115_reg_1406 <= icmp_ln86_1115_fu_532_p2;
        icmp_ln86_1116_reg_1411 <= icmp_ln86_1116_fu_538_p2;
        icmp_ln86_1117_reg_1416 <= icmp_ln86_1117_fu_544_p2;
        or_ln117_974_reg_1441 <= or_ln117_974_fu_932_p2;
        select_ln117_1069_reg_1447 <= select_ln117_1069_fu_946_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln102_1338_fu_574_p2 = (xor_ln104_fu_550_p2 & icmp_ln86_1093_fu_390_p2);

assign and_ln102_1339_fu_592_p2 = (icmp_ln86_1094_fu_396_p2 & and_ln102_fu_556_p2);

assign and_ln102_1340_fu_610_p2 = (icmp_ln86_1095_fu_402_p2 & and_ln104_fu_568_p2);

assign and_ln102_1341_fu_628_p2 = (icmp_ln86_1096_fu_408_p2 & and_ln102_1338_fu_574_p2);

assign and_ln102_1342_fu_954_p2 = (icmp_ln86_1097_reg_1362 & and_ln104_197_reg_1421);

assign and_ln102_1343_fu_646_p2 = (icmp_ln86_1098_fu_420_p2 & and_ln102_1339_fu_592_p2);

assign and_ln102_1344_fu_658_p2 = (icmp_ln86_1099_fu_426_p2 & and_ln104_198_fu_604_p2);

assign and_ln102_1345_fu_670_p2 = (icmp_ln86_1100_fu_432_p2 & and_ln102_1340_fu_610_p2);

assign and_ln102_1346_fu_682_p2 = (icmp_ln86_1101_fu_438_p2 & and_ln104_199_fu_622_p2);

assign and_ln102_1347_fu_968_p2 = (icmp_ln86_1102_reg_1368 & and_ln104_200_reg_1428);

assign and_ln102_1348_fu_977_p2 = (icmp_ln86_1103_reg_1374 & and_ln102_1342_fu_954_p2);

assign and_ln102_1349_fu_987_p2 = (icmp_ln86_1104_reg_1380 & and_ln104_201_fu_963_p2);

assign and_ln102_1350_fu_700_p2 = (icmp_ln86_1105_fu_472_p2 & and_ln102_1343_fu_646_p2);

assign and_ln102_1351_fu_706_p2 = (xor_ln104_523_fu_652_p2 & icmp_ln86_1106_fu_478_p2);

assign and_ln102_1352_fu_712_p2 = (and_ln102_1351_fu_706_p2 & and_ln102_1339_fu_592_p2);

assign and_ln102_1353_fu_718_p2 = (icmp_ln86_1107_fu_484_p2 & and_ln102_1344_fu_658_p2);

assign and_ln102_1354_fu_724_p2 = (xor_ln104_524_fu_664_p2 & icmp_ln86_1108_fu_490_p2);

assign and_ln102_1355_fu_730_p2 = (and_ln104_198_fu_604_p2 & and_ln102_1354_fu_724_p2);

assign and_ln102_1356_fu_736_p2 = (icmp_ln86_1109_fu_496_p2 & and_ln102_1345_fu_670_p2);

assign and_ln102_1357_fu_742_p2 = (xor_ln104_525_fu_676_p2 & icmp_ln86_1110_fu_502_p2);

assign and_ln102_1358_fu_748_p2 = (and_ln102_1357_fu_742_p2 & and_ln102_1340_fu_610_p2);

assign and_ln102_1359_fu_997_p2 = (icmp_ln86_1111_reg_1386 & and_ln102_1346_reg_1435);

assign and_ln102_1360_fu_1001_p2 = (icmp_ln86_1112_reg_1391 & and_ln102_1347_fu_968_p2);

assign and_ln102_1361_fu_1006_p2 = (xor_ln104_527_fu_972_p2 & icmp_ln86_1113_reg_1396);

assign and_ln102_1362_fu_1011_p2 = (and_ln104_200_reg_1428 & and_ln102_1361_fu_1006_p2);

assign and_ln102_1363_fu_1016_p2 = (icmp_ln86_1114_reg_1401 & and_ln102_1348_fu_977_p2);

assign and_ln102_1364_fu_1021_p2 = (xor_ln104_528_fu_982_p2 & icmp_ln86_1115_reg_1406);

assign and_ln102_1365_fu_1026_p2 = (and_ln102_1364_fu_1021_p2 & and_ln102_1342_fu_954_p2);

assign and_ln102_1366_fu_1032_p2 = (icmp_ln86_1116_reg_1411 & and_ln102_1349_fu_987_p2);

assign and_ln102_1367_fu_1037_p2 = (xor_ln104_529_fu_992_p2 & icmp_ln86_1117_reg_1416);

assign and_ln102_1368_fu_1042_p2 = (and_ln104_201_fu_963_p2 & and_ln102_1367_fu_1037_p2);

assign and_ln102_fu_556_p2 = (icmp_ln86_fu_378_p2 & icmp_ln86_1092_fu_384_p2);

assign and_ln104_197_fu_586_p2 = (xor_ln104_fu_550_p2 & xor_ln104_518_fu_580_p2);

assign and_ln104_198_fu_604_p2 = (xor_ln104_519_fu_598_p2 & and_ln102_fu_556_p2);

assign and_ln104_199_fu_622_p2 = (xor_ln104_520_fu_616_p2 & and_ln104_fu_568_p2);

assign and_ln104_200_fu_640_p2 = (xor_ln104_521_fu_634_p2 & and_ln102_1338_fu_574_p2);

assign and_ln104_201_fu_963_p2 = (xor_ln104_522_fu_958_p2 & and_ln104_197_reg_1421);

assign and_ln104_202_fu_694_p2 = (xor_ln104_526_fu_688_p2 & and_ln104_199_fu_622_p2);

assign and_ln104_fu_568_p2 = (xor_ln104_517_fu_562_p2 & icmp_ln86_fu_378_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((or_ln117_988_fu_1221_p2[0:0] == 1'b1) ? tmp_fu_1234_p59 : 13'd0);

assign icmp_ln86_1092_fu_384_p2 = (($signed(x_6_val) < $signed(18'd25975)) ? 1'b1 : 1'b0);

assign icmp_ln86_1093_fu_390_p2 = (($signed(x_1_val) < $signed(18'd231488)) ? 1'b1 : 1'b0);

assign icmp_ln86_1094_fu_396_p2 = (($signed(x_1_val) < $signed(18'd152129)) ? 1'b1 : 1'b0);

assign icmp_ln86_1095_fu_402_p2 = (($signed(x_48_val) < $signed(18'd199345)) ? 1'b1 : 1'b0);

assign icmp_ln86_1096_fu_408_p2 = (($signed(x_33_val) < $signed(18'd216)) ? 1'b1 : 1'b0);

assign icmp_ln86_1097_fu_414_p2 = (($signed(x_19_val) < $signed(18'd5509)) ? 1'b1 : 1'b0);

assign icmp_ln86_1098_fu_420_p2 = (($signed(x_51_val) < $signed(18'd262116)) ? 1'b1 : 1'b0);

assign icmp_ln86_1099_fu_426_p2 = (($signed(x_49_val) < $signed(18'd100278)) ? 1'b1 : 1'b0);

assign icmp_ln86_1100_fu_432_p2 = (($signed(x_35_val) < $signed(18'd80)) ? 1'b1 : 1'b0);

assign icmp_ln86_1101_fu_438_p2 = (($signed(x_23_val) < $signed(18'd63)) ? 1'b1 : 1'b0);

assign icmp_ln86_1102_fu_444_p2 = (($signed(x_47_val) < $signed(18'd64569)) ? 1'b1 : 1'b0);

assign icmp_ln86_1103_fu_450_p2 = (($signed(x_45_val) < $signed(18'd436)) ? 1'b1 : 1'b0);

assign icmp_ln86_1104_fu_456_p2 = (($signed(x_11_val) < $signed(18'd410)) ? 1'b1 : 1'b0);

assign icmp_ln86_1105_fu_472_p2 = (($signed(tmp_14_fu_462_p4) < $signed(14'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_1106_fu_478_p2 = (($signed(x_17_val) < $signed(18'd13)) ? 1'b1 : 1'b0);

assign icmp_ln86_1107_fu_484_p2 = (($signed(x_19_val) < $signed(18'd3018)) ? 1'b1 : 1'b0);

assign icmp_ln86_1108_fu_490_p2 = (($signed(x_26_val) < $signed(18'd188671)) ? 1'b1 : 1'b0);

assign icmp_ln86_1109_fu_496_p2 = (($signed(x_50_val) < $signed(18'd87107)) ? 1'b1 : 1'b0);

assign icmp_ln86_1110_fu_502_p2 = (($signed(x_12_val) < $signed(18'd258378)) ? 1'b1 : 1'b0);

assign icmp_ln86_1111_fu_508_p2 = (($signed(x_38_val) < $signed(18'd37)) ? 1'b1 : 1'b0);

assign icmp_ln86_1112_fu_514_p2 = (($signed(x_1_val) < $signed(18'd220665)) ? 1'b1 : 1'b0);

assign icmp_ln86_1113_fu_520_p2 = (($signed(x_9_val) < $signed(18'd1261)) ? 1'b1 : 1'b0);

assign icmp_ln86_1114_fu_526_p2 = (($signed(x_3_val) < $signed(18'd97473)) ? 1'b1 : 1'b0);

assign icmp_ln86_1115_fu_532_p2 = (($signed(x_11_val) < $signed(18'd601)) ? 1'b1 : 1'b0);

assign icmp_ln86_1116_fu_538_p2 = (($signed(x_9_val) < $signed(18'd1689)) ? 1'b1 : 1'b0);

assign icmp_ln86_1117_fu_544_p2 = (($signed(x_50_val) < $signed(18'd123894)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_378_p2 = (($signed(x_52_val) < $signed(18'd79361)) ? 1'b1 : 1'b0);

assign or_ln117_963_fu_770_p2 = (or_ln117_fu_754_p2 | and_ln102_1350_fu_700_p2);

assign or_ln117_964_fu_784_p2 = (or_ln117_fu_754_p2 | and_ln102_1343_fu_646_p2);

assign or_ln117_965_fu_802_p2 = (or_ln117_964_fu_784_p2 | and_ln102_1352_fu_712_p2);

assign or_ln117_966_fu_816_p2 = (or_ln117_fu_754_p2 | and_ln102_1339_fu_592_p2);

assign or_ln117_967_fu_830_p2 = (or_ln117_966_fu_816_p2 | and_ln102_1353_fu_718_p2);

assign or_ln117_968_fu_844_p2 = (or_ln117_966_fu_816_p2 | and_ln102_1344_fu_658_p2);

assign or_ln117_969_fu_862_p2 = (or_ln117_968_fu_844_p2 | and_ln102_1355_fu_730_p2);

assign or_ln117_970_fu_876_p2 = (or_ln117_fu_754_p2 | and_ln102_fu_556_p2);

assign or_ln117_971_fu_890_p2 = (or_ln117_970_fu_876_p2 | and_ln102_1356_fu_736_p2);

assign or_ln117_972_fu_904_p2 = (or_ln117_970_fu_876_p2 | and_ln102_1345_fu_670_p2);

assign or_ln117_973_fu_918_p2 = (or_ln117_972_fu_904_p2 | and_ln102_1358_fu_748_p2);

assign or_ln117_974_fu_932_p2 = (or_ln117_970_fu_876_p2 | and_ln102_1340_fu_610_p2);

assign or_ln117_975_fu_1048_p2 = (or_ln117_974_reg_1441 | and_ln102_1359_fu_997_p2);

assign or_ln117_976_fu_1053_p2 = (or_ln117_974_reg_1441 | and_ln102_1346_reg_1435);

assign or_ln117_977_fu_1068_p2 = (or_ln117_976_fu_1053_p2 | and_ln102_1360_fu_1001_p2);

assign or_ln117_978_fu_1082_p2 = (or_ln117_976_fu_1053_p2 | and_ln102_1347_fu_968_p2);

assign or_ln117_979_fu_1096_p2 = (or_ln117_978_fu_1082_p2 | and_ln102_1362_fu_1011_p2);

assign or_ln117_980_fu_1110_p2 = (or_ln117_976_fu_1053_p2 | and_ln104_200_reg_1428);

assign or_ln117_981_fu_1123_p2 = (or_ln117_980_fu_1110_p2 | and_ln102_1363_fu_1016_p2);

assign or_ln117_982_fu_1137_p2 = (or_ln117_980_fu_1110_p2 | and_ln102_1348_fu_977_p2);

assign or_ln117_983_fu_1151_p2 = (or_ln117_982_fu_1137_p2 | and_ln102_1365_fu_1026_p2);

assign or_ln117_984_fu_1165_p2 = (or_ln117_980_fu_1110_p2 | and_ln102_1342_fu_954_p2);

assign or_ln117_985_fu_1179_p2 = (or_ln117_984_fu_1165_p2 | and_ln102_1366_fu_1032_p2);

assign or_ln117_986_fu_1193_p2 = (or_ln117_984_fu_1165_p2 | and_ln102_1349_fu_987_p2);

assign or_ln117_987_fu_1207_p2 = (or_ln117_986_fu_1193_p2 | and_ln102_1368_fu_1042_p2);

assign or_ln117_988_fu_1221_p2 = (or_ln117_980_fu_1110_p2 | and_ln104_197_reg_1421);

assign or_ln117_fu_754_p2 = (and_ln104_202_fu_694_p2 | and_ln102_1341_fu_628_p2);

assign select_ln117_1058_fu_790_p3 = ((or_ln117_963_fu_770_p2[0:0] == 1'b1) ? select_ln117_fu_776_p3 : 2'd3);

assign select_ln117_1059_fu_808_p3 = ((or_ln117_964_fu_784_p2[0:0] == 1'b1) ? zext_ln117_115_fu_798_p1 : 3'd4);

assign select_ln117_1060_fu_822_p3 = ((or_ln117_965_fu_802_p2[0:0] == 1'b1) ? select_ln117_1059_fu_808_p3 : 3'd5);

assign select_ln117_1061_fu_836_p3 = ((or_ln117_966_fu_816_p2[0:0] == 1'b1) ? select_ln117_1060_fu_822_p3 : 3'd6);

assign select_ln117_1062_fu_850_p3 = ((or_ln117_967_fu_830_p2[0:0] == 1'b1) ? select_ln117_1061_fu_836_p3 : 3'd7);

assign select_ln117_1063_fu_868_p3 = ((or_ln117_968_fu_844_p2[0:0] == 1'b1) ? zext_ln117_116_fu_858_p1 : 4'd8);

assign select_ln117_1064_fu_882_p3 = ((or_ln117_969_fu_862_p2[0:0] == 1'b1) ? select_ln117_1063_fu_868_p3 : 4'd9);

assign select_ln117_1065_fu_896_p3 = ((or_ln117_970_fu_876_p2[0:0] == 1'b1) ? select_ln117_1064_fu_882_p3 : 4'd10);

assign select_ln117_1066_fu_910_p3 = ((or_ln117_971_fu_890_p2[0:0] == 1'b1) ? select_ln117_1065_fu_896_p3 : 4'd11);

assign select_ln117_1067_fu_924_p3 = ((or_ln117_972_fu_904_p2[0:0] == 1'b1) ? select_ln117_1066_fu_910_p3 : 4'd12);

assign select_ln117_1068_fu_938_p3 = ((or_ln117_973_fu_918_p2[0:0] == 1'b1) ? select_ln117_1067_fu_924_p3 : 4'd13);

assign select_ln117_1069_fu_946_p3 = ((or_ln117_974_fu_932_p2[0:0] == 1'b1) ? select_ln117_1068_fu_938_p3 : 4'd14);

assign select_ln117_1070_fu_1057_p3 = ((or_ln117_975_fu_1048_p2[0:0] == 1'b1) ? select_ln117_1069_reg_1447 : 4'd15);

assign select_ln117_1071_fu_1074_p3 = ((or_ln117_976_fu_1053_p2[0:0] == 1'b1) ? zext_ln117_117_fu_1064_p1 : 5'd16);

assign select_ln117_1072_fu_1088_p3 = ((or_ln117_977_fu_1068_p2[0:0] == 1'b1) ? select_ln117_1071_fu_1074_p3 : 5'd17);

assign select_ln117_1073_fu_1102_p3 = ((or_ln117_978_fu_1082_p2[0:0] == 1'b1) ? select_ln117_1072_fu_1088_p3 : 5'd18);

assign select_ln117_1074_fu_1115_p3 = ((or_ln117_979_fu_1096_p2[0:0] == 1'b1) ? select_ln117_1073_fu_1102_p3 : 5'd19);

assign select_ln117_1075_fu_1129_p3 = ((or_ln117_980_fu_1110_p2[0:0] == 1'b1) ? select_ln117_1074_fu_1115_p3 : 5'd20);

assign select_ln117_1076_fu_1143_p3 = ((or_ln117_981_fu_1123_p2[0:0] == 1'b1) ? select_ln117_1075_fu_1129_p3 : 5'd21);

assign select_ln117_1077_fu_1157_p3 = ((or_ln117_982_fu_1137_p2[0:0] == 1'b1) ? select_ln117_1076_fu_1143_p3 : 5'd22);

assign select_ln117_1078_fu_1171_p3 = ((or_ln117_983_fu_1151_p2[0:0] == 1'b1) ? select_ln117_1077_fu_1157_p3 : 5'd23);

assign select_ln117_1079_fu_1185_p3 = ((or_ln117_984_fu_1165_p2[0:0] == 1'b1) ? select_ln117_1078_fu_1171_p3 : 5'd24);

assign select_ln117_1080_fu_1199_p3 = ((or_ln117_985_fu_1179_p2[0:0] == 1'b1) ? select_ln117_1079_fu_1185_p3 : 5'd25);

assign select_ln117_1081_fu_1213_p3 = ((or_ln117_986_fu_1193_p2[0:0] == 1'b1) ? select_ln117_1080_fu_1199_p3 : 5'd26);

assign select_ln117_fu_776_p3 = ((or_ln117_fu_754_p2[0:0] == 1'b1) ? zext_ln117_fu_766_p1 : 2'd2);

assign tmp_14_fu_462_p4 = {{x_23_val[17:4]}};

assign tmp_fu_1234_p57 = 'bx;

assign tmp_fu_1234_p58 = ((or_ln117_987_fu_1207_p2[0:0] == 1'b1) ? select_ln117_1081_fu_1213_p3 : 5'd27);

assign xor_ln104_517_fu_562_p2 = (icmp_ln86_1092_fu_384_p2 ^ 1'd1);

assign xor_ln104_518_fu_580_p2 = (icmp_ln86_1093_fu_390_p2 ^ 1'd1);

assign xor_ln104_519_fu_598_p2 = (icmp_ln86_1094_fu_396_p2 ^ 1'd1);

assign xor_ln104_520_fu_616_p2 = (icmp_ln86_1095_fu_402_p2 ^ 1'd1);

assign xor_ln104_521_fu_634_p2 = (icmp_ln86_1096_fu_408_p2 ^ 1'd1);

assign xor_ln104_522_fu_958_p2 = (icmp_ln86_1097_reg_1362 ^ 1'd1);

assign xor_ln104_523_fu_652_p2 = (icmp_ln86_1098_fu_420_p2 ^ 1'd1);

assign xor_ln104_524_fu_664_p2 = (icmp_ln86_1099_fu_426_p2 ^ 1'd1);

assign xor_ln104_525_fu_676_p2 = (icmp_ln86_1100_fu_432_p2 ^ 1'd1);

assign xor_ln104_526_fu_688_p2 = (icmp_ln86_1101_fu_438_p2 ^ 1'd1);

assign xor_ln104_527_fu_972_p2 = (icmp_ln86_1102_reg_1368 ^ 1'd1);

assign xor_ln104_528_fu_982_p2 = (icmp_ln86_1103_reg_1374 ^ 1'd1);

assign xor_ln104_529_fu_992_p2 = (icmp_ln86_1104_reg_1380 ^ 1'd1);

assign xor_ln104_fu_550_p2 = (icmp_ln86_fu_378_p2 ^ 1'd1);

assign xor_ln117_fu_760_p2 = (1'd1 ^ and_ln102_1341_fu_628_p2);

assign zext_ln117_115_fu_798_p1 = select_ln117_1058_fu_790_p3;

assign zext_ln117_116_fu_858_p1 = select_ln117_1062_fu_850_p3;

assign zext_ln117_117_fu_1064_p1 = select_ln117_1070_fu_1057_p3;

assign zext_ln117_fu_766_p1 = xor_ln117_fu_760_p2;

endmodule //my_prj_decision_function_61
