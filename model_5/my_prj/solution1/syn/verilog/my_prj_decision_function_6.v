// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_3_val,
        x_5_val,
        x_10_val,
        x_11_val,
        x_12_val,
        x_13_val,
        x_16_val,
        x_18_val,
        x_23_val,
        x_34_val,
        x_37_val,
        x_44_val,
        x_49_val,
        x_50_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_3_val;
input  [17:0] x_5_val;
input  [17:0] x_10_val;
input  [17:0] x_11_val;
input  [17:0] x_12_val;
input  [17:0] x_13_val;
input  [17:0] x_16_val;
input  [17:0] x_18_val;
input  [17:0] x_23_val;
input  [17:0] x_34_val;
input  [17:0] x_37_val;
input  [17:0] x_44_val;
input  [17:0] x_49_val;
input  [17:0] x_50_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_177_fu_432_p2;
reg   [0:0] icmp_ln86_177_reg_1054;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] and_ln104_33_fu_612_p2;
reg   [0:0] and_ln104_33_reg_1059;
wire   [0:0] or_ln117_163_fu_912_p2;
reg   [0:0] or_ln117_163_reg_1065;
wire   [4:0] select_ln117_171_fu_926_p3;
reg   [4:0] select_ln117_171_reg_1071;
wire    ap_block_pp0_stage0;
wire   [16:0] tmp_16_fu_322_p4;
wire   [15:0] tmp_17_fu_380_p4;
wire   [0:0] icmp_ln86_fu_298_p2;
wire   [0:0] icmp_ln86_159_fu_304_p2;
wire   [0:0] xor_ln104_75_fu_444_p2;
wire   [0:0] icmp_ln86_160_fu_310_p2;
wire   [0:0] xor_ln104_fu_438_p2;
wire   [0:0] xor_ln104_76_fu_462_p2;
wire   [0:0] icmp_ln86_161_fu_316_p2;
wire   [0:0] xor_ln104_77_fu_480_p2;
wire   [0:0] icmp_ln86_1148_fu_332_p2;
wire   [0:0] and_ln104_fu_450_p2;
wire   [0:0] icmp_ln86_163_fu_338_p2;
wire   [0:0] and_ln102_fu_456_p2;
wire   [0:0] xor_ln104_79_fu_510_p2;
wire   [0:0] icmp_ln86_164_fu_344_p2;
wire   [0:0] and_ln104_28_fu_468_p2;
wire   [0:0] xor_ln104_80_fu_528_p2;
wire   [0:0] icmp_ln86_165_fu_350_p2;
wire   [0:0] and_ln102_151_fu_474_p2;
wire   [0:0] icmp_ln86_166_fu_356_p2;
wire   [0:0] and_ln104_29_fu_486_p2;
wire   [0:0] icmp_ln86_167_fu_362_p2;
wire   [0:0] xor_ln104_78_fu_498_p2;
wire   [0:0] and_ln102_168_fu_564_p2;
wire   [0:0] icmp_ln86_168_fu_368_p2;
wire   [0:0] and_ln102_153_fu_504_p2;
wire   [0:0] xor_ln104_83_fu_582_p2;
wire   [0:0] icmp_ln86_169_fu_374_p2;
wire   [0:0] and_ln104_30_fu_516_p2;
wire   [0:0] icmp_ln86_1149_fu_390_p2;
wire   [0:0] and_ln102_154_fu_522_p2;
wire   [0:0] xor_ln104_84_fu_606_p2;
wire   [0:0] icmp_ln86_171_fu_396_p2;
wire   [0:0] and_ln104_31_fu_534_p2;
wire   [0:0] icmp_ln86_172_fu_402_p2;
wire   [0:0] and_ln102_155_fu_540_p2;
wire   [0:0] icmp_ln86_173_fu_408_p2;
wire   [0:0] xor_ln104_81_fu_546_p2;
wire   [0:0] and_ln102_169_fu_630_p2;
wire   [0:0] icmp_ln86_174_fu_414_p2;
wire   [0:0] and_ln102_156_fu_552_p2;
wire   [0:0] icmp_ln86_175_fu_420_p2;
wire   [0:0] xor_ln104_82_fu_558_p2;
wire   [0:0] and_ln102_170_fu_648_p2;
wire   [0:0] icmp_ln86_176_fu_426_p2;
wire   [0:0] and_ln104_32_fu_588_p2;
wire   [0:0] and_ln102_152_fu_492_p2;
wire   [0:0] and_ln102_157_fu_570_p2;
wire   [0:0] xor_ln117_fu_672_p2;
wire   [0:0] or_ln117_fu_666_p2;
wire   [1:0] zext_ln117_fu_678_p1;
wire   [0:0] and_ln102_158_fu_576_p2;
wire   [1:0] select_ln117_fu_682_p3;
wire   [1:0] select_ln117_155_fu_696_p3;
wire   [0:0] or_ln117_148_fu_690_p2;
wire   [0:0] and_ln102_159_fu_594_p2;
wire   [2:0] zext_ln117_15_fu_704_p1;
wire   [0:0] or_ln117_149_fu_708_p2;
wire   [2:0] select_ln117_156_fu_714_p3;
wire   [0:0] or_ln117_150_fu_722_p2;
wire   [0:0] and_ln102_160_fu_600_p2;
wire   [2:0] select_ln117_157_fu_728_p3;
wire   [0:0] or_ln117_151_fu_736_p2;
wire   [0:0] and_ln102_161_fu_618_p2;
wire   [2:0] select_ln117_158_fu_742_p3;
wire   [2:0] select_ln117_159_fu_756_p3;
wire   [0:0] or_ln117_152_fu_750_p2;
wire   [3:0] zext_ln117_16_fu_764_p1;
wire   [0:0] or_ln117_153_fu_768_p2;
wire   [0:0] and_ln102_162_fu_624_p2;
wire   [3:0] select_ln117_160_fu_774_p3;
wire   [0:0] or_ln117_154_fu_782_p2;
wire   [3:0] select_ln117_161_fu_788_p3;
wire   [0:0] or_ln117_155_fu_796_p2;
wire   [0:0] and_ln102_163_fu_636_p2;
wire   [3:0] select_ln117_162_fu_802_p3;
wire   [0:0] or_ln117_156_fu_810_p2;
wire   [3:0] select_ln117_163_fu_816_p3;
wire   [0:0] or_ln117_157_fu_824_p2;
wire   [0:0] and_ln102_164_fu_642_p2;
wire   [3:0] select_ln117_164_fu_830_p3;
wire   [0:0] or_ln117_158_fu_838_p2;
wire   [3:0] select_ln117_165_fu_844_p3;
wire   [0:0] or_ln117_159_fu_852_p2;
wire   [0:0] and_ln102_165_fu_654_p2;
wire   [3:0] select_ln117_166_fu_858_p3;
wire   [3:0] select_ln117_167_fu_872_p3;
wire   [0:0] or_ln117_160_fu_866_p2;
wire   [4:0] zext_ln117_17_fu_880_p1;
wire   [0:0] or_ln117_161_fu_884_p2;
wire   [0:0] and_ln102_166_fu_660_p2;
wire   [4:0] select_ln117_168_fu_890_p3;
wire   [0:0] or_ln117_162_fu_898_p2;
wire   [4:0] select_ln117_169_fu_904_p3;
wire   [4:0] select_ln117_170_fu_918_p3;
wire   [0:0] and_ln102_167_fu_934_p2;
wire   [0:0] or_ln117_164_fu_938_p2;
wire   [11:0] tmp_fu_954_p43;
wire   [4:0] tmp_fu_954_p44;
wire   [0:0] or_ln117_165_fu_943_p2;
wire   [11:0] tmp_fu_954_p45;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] tmp_fu_954_p1;
wire   [4:0] tmp_fu_954_p3;
wire   [4:0] tmp_fu_954_p5;
wire   [4:0] tmp_fu_954_p7;
wire   [4:0] tmp_fu_954_p9;
wire   [4:0] tmp_fu_954_p11;
wire   [4:0] tmp_fu_954_p13;
wire   [4:0] tmp_fu_954_p15;
wire   [4:0] tmp_fu_954_p17;
wire   [4:0] tmp_fu_954_p19;
wire   [4:0] tmp_fu_954_p21;
wire   [4:0] tmp_fu_954_p23;
wire   [4:0] tmp_fu_954_p25;
wire   [4:0] tmp_fu_954_p27;
wire   [4:0] tmp_fu_954_p29;
wire   [4:0] tmp_fu_954_p31;
wire  signed [4:0] tmp_fu_954_p33;
wire  signed [4:0] tmp_fu_954_p35;
wire  signed [4:0] tmp_fu_954_p37;
wire  signed [4:0] tmp_fu_954_p39;
wire  signed [4:0] tmp_fu_954_p41;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_43_5_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_43_5_12_1_1_U1976(
    .din0(12'd1897),
    .din1(12'd698),
    .din2(12'd3687),
    .din3(12'd3758),
    .din4(12'd3621),
    .din5(12'd393),
    .din6(12'd128),
    .din7(12'd3718),
    .din8(12'd782),
    .din9(12'd4081),
    .din10(12'd39),
    .din11(12'd321),
    .din12(12'd3880),
    .din13(12'd3802),
    .din14(12'd4026),
    .din15(12'd76),
    .din16(12'd4036),
    .din17(12'd328),
    .din18(12'd1742),
    .din19(12'd125),
    .din20(12'd3528),
    .def(tmp_fu_954_p43),
    .sel(tmp_fu_954_p44),
    .dout(tmp_fu_954_p45)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln104_33_reg_1059 <= and_ln104_33_fu_612_p2;
        icmp_ln86_177_reg_1054 <= icmp_ln86_177_fu_432_p2;
        or_ln117_163_reg_1065 <= or_ln117_163_fu_912_p2;
        select_ln117_171_reg_1071 <= select_ln117_171_fu_926_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln102_151_fu_474_p2 = (icmp_ln86_161_fu_316_p2 & icmp_ln86_159_fu_304_p2);

assign and_ln102_152_fu_492_p2 = (icmp_ln86_1148_fu_332_p2 & and_ln104_fu_450_p2);

assign and_ln102_153_fu_504_p2 = (icmp_ln86_163_fu_338_p2 & and_ln102_fu_456_p2);

assign and_ln102_154_fu_522_p2 = (icmp_ln86_164_fu_344_p2 & and_ln104_28_fu_468_p2);

assign and_ln102_155_fu_540_p2 = (icmp_ln86_165_fu_350_p2 & and_ln102_151_fu_474_p2);

assign and_ln102_156_fu_552_p2 = (icmp_ln86_166_fu_356_p2 & and_ln104_29_fu_486_p2);

assign and_ln102_157_fu_570_p2 = (and_ln104_fu_450_p2 & and_ln102_168_fu_564_p2);

assign and_ln102_158_fu_576_p2 = (icmp_ln86_168_fu_368_p2 & and_ln102_153_fu_504_p2);

assign and_ln102_159_fu_594_p2 = (icmp_ln86_169_fu_374_p2 & and_ln104_30_fu_516_p2);

assign and_ln102_160_fu_600_p2 = (icmp_ln86_1149_fu_390_p2 & and_ln102_154_fu_522_p2);

assign and_ln102_161_fu_618_p2 = (icmp_ln86_171_fu_396_p2 & and_ln104_31_fu_534_p2);

assign and_ln102_162_fu_624_p2 = (icmp_ln86_172_fu_402_p2 & and_ln102_155_fu_540_p2);

assign and_ln102_163_fu_636_p2 = (and_ln102_169_fu_630_p2 & and_ln102_151_fu_474_p2);

assign and_ln102_164_fu_642_p2 = (icmp_ln86_174_fu_414_p2 & and_ln102_156_fu_552_p2);

assign and_ln102_165_fu_654_p2 = (and_ln104_29_fu_486_p2 & and_ln102_170_fu_648_p2);

assign and_ln102_166_fu_660_p2 = (icmp_ln86_176_fu_426_p2 & and_ln104_32_fu_588_p2);

assign and_ln102_167_fu_934_p2 = (icmp_ln86_177_reg_1054 & and_ln104_33_reg_1059);

assign and_ln102_168_fu_564_p2 = (xor_ln104_78_fu_498_p2 & icmp_ln86_167_fu_362_p2);

assign and_ln102_169_fu_630_p2 = (xor_ln104_81_fu_546_p2 & icmp_ln86_173_fu_408_p2);

assign and_ln102_170_fu_648_p2 = (xor_ln104_82_fu_558_p2 & icmp_ln86_175_fu_420_p2);

assign and_ln102_fu_456_p2 = (xor_ln104_fu_438_p2 & icmp_ln86_160_fu_310_p2);

assign and_ln104_28_fu_468_p2 = (xor_ln104_fu_438_p2 & xor_ln104_76_fu_462_p2);

assign and_ln104_29_fu_486_p2 = (xor_ln104_77_fu_480_p2 & icmp_ln86_159_fu_304_p2);

assign and_ln104_30_fu_516_p2 = (xor_ln104_79_fu_510_p2 & and_ln102_fu_456_p2);

assign and_ln104_31_fu_534_p2 = (xor_ln104_80_fu_528_p2 & and_ln104_28_fu_468_p2);

assign and_ln104_32_fu_588_p2 = (xor_ln104_83_fu_582_p2 & and_ln102_153_fu_504_p2);

assign and_ln104_33_fu_612_p2 = (xor_ln104_84_fu_606_p2 & and_ln102_154_fu_522_p2);

assign and_ln104_fu_450_p2 = (xor_ln104_75_fu_444_p2 & icmp_ln86_fu_298_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((or_ln117_165_fu_943_p2[0:0] == 1'b1) ? tmp_fu_954_p45 : 12'd0);

assign icmp_ln86_1148_fu_332_p2 = (($signed(tmp_16_fu_322_p4) < $signed(17'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_1149_fu_390_p2 = (($signed(tmp_17_fu_380_p4) < $signed(16'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_159_fu_304_p2 = (($signed(x_12_val) < $signed(18'd261031)) ? 1'b1 : 1'b0);

assign icmp_ln86_160_fu_310_p2 = (($signed(x_34_val) < $signed(18'd130)) ? 1'b1 : 1'b0);

assign icmp_ln86_161_fu_316_p2 = (($signed(x_50_val) < $signed(18'd94421)) ? 1'b1 : 1'b0);

assign icmp_ln86_163_fu_338_p2 = (($signed(x_18_val) < $signed(18'd11755)) ? 1'b1 : 1'b0);

assign icmp_ln86_164_fu_344_p2 = (($signed(x_12_val) < $signed(18'd261320)) ? 1'b1 : 1'b0);

assign icmp_ln86_165_fu_350_p2 = (($signed(x_49_val) < $signed(18'd91432)) ? 1'b1 : 1'b0);

assign icmp_ln86_166_fu_356_p2 = (($signed(x_1_val) < $signed(18'd255991)) ? 1'b1 : 1'b0);

assign icmp_ln86_167_fu_362_p2 = (($signed(x_11_val) < $signed(18'd584)) ? 1'b1 : 1'b0);

assign icmp_ln86_168_fu_368_p2 = (($signed(x_13_val) < $signed(18'd184)) ? 1'b1 : 1'b0);

assign icmp_ln86_169_fu_374_p2 = (($signed(x_5_val) < $signed(18'd5811)) ? 1'b1 : 1'b0);

assign icmp_ln86_171_fu_396_p2 = (($signed(x_23_val) < $signed(18'd5)) ? 1'b1 : 1'b0);

assign icmp_ln86_172_fu_402_p2 = (($signed(x_16_val) < $signed(18'd90)) ? 1'b1 : 1'b0);

assign icmp_ln86_173_fu_408_p2 = (($signed(x_18_val) < $signed(18'd1675)) ? 1'b1 : 1'b0);

assign icmp_ln86_174_fu_414_p2 = (($signed(x_3_val) < $signed(18'd98156)) ? 1'b1 : 1'b0);

assign icmp_ln86_175_fu_420_p2 = (($signed(x_1_val) < $signed(18'd33483)) ? 1'b1 : 1'b0);

assign icmp_ln86_176_fu_426_p2 = (($signed(x_11_val) < $signed(18'd696)) ? 1'b1 : 1'b0);

assign icmp_ln86_177_fu_432_p2 = (($signed(x_10_val) < $signed(18'd547)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_298_p2 = (($signed(x_12_val) < $signed(18'd261045)) ? 1'b1 : 1'b0);

assign or_ln117_148_fu_690_p2 = (and_ln104_fu_450_p2 | and_ln102_158_fu_576_p2);

assign or_ln117_149_fu_708_p2 = (or_ln117_148_fu_690_p2 | and_ln102_159_fu_594_p2);

assign or_ln117_150_fu_722_p2 = (or_ln117_148_fu_690_p2 | and_ln104_30_fu_516_p2);

assign or_ln117_151_fu_736_p2 = (or_ln117_150_fu_722_p2 | and_ln102_160_fu_600_p2);

assign or_ln117_152_fu_750_p2 = (or_ln117_151_fu_736_p2 | and_ln102_161_fu_618_p2);

assign or_ln117_153_fu_768_p2 = (or_ln117_151_fu_736_p2 | and_ln104_31_fu_534_p2);

assign or_ln117_154_fu_782_p2 = (or_ln117_153_fu_768_p2 | and_ln102_162_fu_624_p2);

assign or_ln117_155_fu_796_p2 = (or_ln117_153_fu_768_p2 | and_ln102_155_fu_540_p2);

assign or_ln117_156_fu_810_p2 = (or_ln117_155_fu_796_p2 | and_ln102_163_fu_636_p2);

assign or_ln117_157_fu_824_p2 = (or_ln117_153_fu_768_p2 | and_ln102_151_fu_474_p2);

assign or_ln117_158_fu_838_p2 = (or_ln117_157_fu_824_p2 | and_ln102_164_fu_642_p2);

assign or_ln117_159_fu_852_p2 = (or_ln117_157_fu_824_p2 | and_ln102_156_fu_552_p2);

assign or_ln117_160_fu_866_p2 = (or_ln117_159_fu_852_p2 | and_ln102_165_fu_654_p2);

assign or_ln117_161_fu_884_p2 = (or_ln117_153_fu_768_p2 | icmp_ln86_159_fu_304_p2);

assign or_ln117_162_fu_898_p2 = (or_ln117_161_fu_884_p2 | and_ln102_166_fu_660_p2);

assign or_ln117_163_fu_912_p2 = (or_ln117_161_fu_884_p2 | and_ln104_32_fu_588_p2);

assign or_ln117_164_fu_938_p2 = (or_ln117_163_reg_1065 | and_ln102_167_fu_934_p2);

assign or_ln117_165_fu_943_p2 = (or_ln117_163_reg_1065 | and_ln104_33_reg_1059);

assign or_ln117_fu_666_p2 = (and_ln102_157_fu_570_p2 | and_ln102_152_fu_492_p2);

assign select_ln117_155_fu_696_p3 = ((and_ln104_fu_450_p2[0:0] == 1'b1) ? select_ln117_fu_682_p3 : 2'd3);

assign select_ln117_156_fu_714_p3 = ((or_ln117_148_fu_690_p2[0:0] == 1'b1) ? zext_ln117_15_fu_704_p1 : 3'd4);

assign select_ln117_157_fu_728_p3 = ((or_ln117_149_fu_708_p2[0:0] == 1'b1) ? select_ln117_156_fu_714_p3 : 3'd5);

assign select_ln117_158_fu_742_p3 = ((or_ln117_150_fu_722_p2[0:0] == 1'b1) ? select_ln117_157_fu_728_p3 : 3'd6);

assign select_ln117_159_fu_756_p3 = ((or_ln117_151_fu_736_p2[0:0] == 1'b1) ? select_ln117_158_fu_742_p3 : 3'd7);

assign select_ln117_160_fu_774_p3 = ((or_ln117_152_fu_750_p2[0:0] == 1'b1) ? zext_ln117_16_fu_764_p1 : 4'd8);

assign select_ln117_161_fu_788_p3 = ((or_ln117_153_fu_768_p2[0:0] == 1'b1) ? select_ln117_160_fu_774_p3 : 4'd9);

assign select_ln117_162_fu_802_p3 = ((or_ln117_154_fu_782_p2[0:0] == 1'b1) ? select_ln117_161_fu_788_p3 : 4'd10);

assign select_ln117_163_fu_816_p3 = ((or_ln117_155_fu_796_p2[0:0] == 1'b1) ? select_ln117_162_fu_802_p3 : 4'd11);

assign select_ln117_164_fu_830_p3 = ((or_ln117_156_fu_810_p2[0:0] == 1'b1) ? select_ln117_163_fu_816_p3 : 4'd12);

assign select_ln117_165_fu_844_p3 = ((or_ln117_157_fu_824_p2[0:0] == 1'b1) ? select_ln117_164_fu_830_p3 : 4'd13);

assign select_ln117_166_fu_858_p3 = ((or_ln117_158_fu_838_p2[0:0] == 1'b1) ? select_ln117_165_fu_844_p3 : 4'd14);

assign select_ln117_167_fu_872_p3 = ((or_ln117_159_fu_852_p2[0:0] == 1'b1) ? select_ln117_166_fu_858_p3 : 4'd15);

assign select_ln117_168_fu_890_p3 = ((or_ln117_160_fu_866_p2[0:0] == 1'b1) ? zext_ln117_17_fu_880_p1 : 5'd16);

assign select_ln117_169_fu_904_p3 = ((or_ln117_161_fu_884_p2[0:0] == 1'b1) ? select_ln117_168_fu_890_p3 : 5'd17);

assign select_ln117_170_fu_918_p3 = ((or_ln117_162_fu_898_p2[0:0] == 1'b1) ? select_ln117_169_fu_904_p3 : 5'd18);

assign select_ln117_171_fu_926_p3 = ((or_ln117_163_fu_912_p2[0:0] == 1'b1) ? select_ln117_170_fu_918_p3 : 5'd19);

assign select_ln117_fu_682_p3 = ((or_ln117_fu_666_p2[0:0] == 1'b1) ? zext_ln117_fu_678_p1 : 2'd2);

assign tmp_16_fu_322_p4 = {{x_37_val[17:1]}};

assign tmp_17_fu_380_p4 = {{x_44_val[17:2]}};

assign tmp_fu_954_p43 = 'bx;

assign tmp_fu_954_p44 = ((or_ln117_164_fu_938_p2[0:0] == 1'b1) ? select_ln117_171_reg_1071 : 5'd20);

assign xor_ln104_75_fu_444_p2 = (icmp_ln86_159_fu_304_p2 ^ 1'd1);

assign xor_ln104_76_fu_462_p2 = (icmp_ln86_160_fu_310_p2 ^ 1'd1);

assign xor_ln104_77_fu_480_p2 = (icmp_ln86_161_fu_316_p2 ^ 1'd1);

assign xor_ln104_78_fu_498_p2 = (icmp_ln86_1148_fu_332_p2 ^ 1'd1);

assign xor_ln104_79_fu_510_p2 = (icmp_ln86_163_fu_338_p2 ^ 1'd1);

assign xor_ln104_80_fu_528_p2 = (icmp_ln86_164_fu_344_p2 ^ 1'd1);

assign xor_ln104_81_fu_546_p2 = (icmp_ln86_165_fu_350_p2 ^ 1'd1);

assign xor_ln104_82_fu_558_p2 = (icmp_ln86_166_fu_356_p2 ^ 1'd1);

assign xor_ln104_83_fu_582_p2 = (icmp_ln86_168_fu_368_p2 ^ 1'd1);

assign xor_ln104_84_fu_606_p2 = (icmp_ln86_1149_fu_390_p2 ^ 1'd1);

assign xor_ln104_fu_438_p2 = (icmp_ln86_fu_298_p2 ^ 1'd1);

assign xor_ln117_fu_672_p2 = (1'd1 ^ and_ln102_152_fu_492_p2);

assign zext_ln117_15_fu_704_p1 = select_ln117_155_fu_696_p3;

assign zext_ln117_16_fu_764_p1 = select_ln117_159_fu_756_p3;

assign zext_ln117_17_fu_880_p1 = select_ln117_167_fu_872_p3;

assign zext_ln117_fu_678_p1 = xor_ln117_fu_672_p2;

endmodule //my_prj_decision_function_6
