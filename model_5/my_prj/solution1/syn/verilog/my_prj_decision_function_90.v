// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_90 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_3_val,
        x_7_val,
        x_11_val,
        x_15_val,
        x_18_val,
        x_33_val,
        x_36_val,
        x_47_val,
        x_48_val,
        x_49_val,
        x_50_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_3_val;
input  [17:0] x_7_val;
input  [17:0] x_11_val;
input  [17:0] x_15_val;
input  [17:0] x_18_val;
input  [17:0] x_33_val;
input  [17:0] x_36_val;
input  [17:0] x_47_val;
input  [17:0] x_48_val;
input  [17:0] x_49_val;
input  [17:0] x_50_val;
input  [17:0] x_52_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_304_p2;
reg   [0:0] icmp_ln86_reg_1105;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_252_fu_328_p2;
reg   [0:0] icmp_ln86_252_reg_1113;
wire   [0:0] icmp_ln86_257_fu_358_p2;
reg   [0:0] icmp_ln86_257_reg_1119;
wire   [0:0] icmp_ln86_258_fu_364_p2;
reg   [0:0] icmp_ln86_258_reg_1125;
wire   [0:0] icmp_ln86_267_fu_418_p2;
reg   [0:0] icmp_ln86_267_reg_1131;
wire   [0:0] icmp_ln86_268_fu_434_p2;
reg   [0:0] icmp_ln86_268_reg_1136;
wire   [0:0] icmp_ln86_269_fu_440_p2;
reg   [0:0] icmp_ln86_269_reg_1141;
wire   [0:0] icmp_ln86_270_fu_446_p2;
reg   [0:0] icmp_ln86_270_reg_1146;
wire   [4:0] select_ln117_255_fu_826_p3;
reg   [4:0] select_ln117_255_reg_1151;
wire    ap_block_pp0_stage0;
wire   [14:0] tmp_fu_294_p4;
wire   [14:0] tmp_4_fu_424_p4;
wire   [0:0] icmp_ln86_249_fu_310_p2;
wire   [0:0] xor_ln104_118_fu_458_p2;
wire   [0:0] icmp_ln86_250_fu_316_p2;
wire   [0:0] and_ln102_fu_452_p2;
wire   [0:0] xor_ln104_119_fu_476_p2;
wire   [0:0] icmp_ln86_251_fu_322_p2;
wire   [0:0] and_ln104_fu_464_p2;
wire   [0:0] xor_ln104_120_fu_494_p2;
wire   [0:0] icmp_ln86_253_fu_334_p2;
wire   [0:0] and_ln102_305_fu_470_p2;
wire   [0:0] icmp_ln86_254_fu_340_p2;
wire   [0:0] and_ln104_46_fu_482_p2;
wire   [0:0] icmp_ln86_255_fu_346_p2;
wire   [0:0] and_ln102_306_fu_488_p2;
wire   [0:0] icmp_ln86_256_fu_352_p2;
wire   [0:0] and_ln104_47_fu_500_p2;
wire   [0:0] icmp_ln86_259_fu_370_p2;
wire   [0:0] and_ln102_308_fu_506_p2;
wire   [0:0] icmp_ln86_260_fu_376_p2;
wire   [0:0] xor_ln104_122_fu_512_p2;
wire   [0:0] and_ln102_315_fu_560_p2;
wire   [0:0] icmp_ln86_261_fu_382_p2;
wire   [0:0] and_ln102_309_fu_518_p2;
wire   [0:0] icmp_ln86_262_fu_388_p2;
wire   [0:0] xor_ln104_123_fu_524_p2;
wire   [0:0] and_ln102_318_fu_578_p2;
wire   [0:0] icmp_ln86_263_fu_394_p2;
wire   [0:0] and_ln102_310_fu_530_p2;
wire   [0:0] icmp_ln86_264_fu_400_p2;
wire   [0:0] xor_ln104_124_fu_536_p2;
wire   [0:0] and_ln102_321_fu_596_p2;
wire   [0:0] icmp_ln86_265_fu_406_p2;
wire   [0:0] and_ln102_311_fu_542_p2;
wire   [0:0] icmp_ln86_266_fu_412_p2;
wire   [0:0] xor_ln104_125_fu_548_p2;
wire   [0:0] and_ln102_324_fu_614_p2;
wire   [0:0] and_ln102_314_fu_554_p2;
wire   [0:0] xor_ln117_fu_626_p2;
wire   [0:0] and_ln102_316_fu_566_p2;
wire   [1:0] zext_ln117_fu_632_p1;
wire   [0:0] or_ln117_fu_636_p2;
wire   [1:0] select_ln117_fu_642_p3;
wire   [1:0] select_ln117_242_fu_650_p3;
wire   [0:0] and_ln102_317_fu_572_p2;
wire   [2:0] zext_ln117_28_fu_658_p1;
wire   [0:0] or_ln117_223_fu_662_p2;
wire   [2:0] select_ln117_243_fu_668_p3;
wire   [0:0] or_ln117_224_fu_676_p2;
wire   [0:0] and_ln102_319_fu_584_p2;
wire   [2:0] select_ln117_244_fu_682_p3;
wire   [0:0] or_ln117_225_fu_690_p2;
wire   [2:0] select_ln117_245_fu_696_p3;
wire   [2:0] select_ln117_246_fu_704_p3;
wire   [0:0] and_ln102_320_fu_590_p2;
wire   [3:0] zext_ln117_29_fu_712_p1;
wire   [0:0] or_ln117_226_fu_716_p2;
wire   [3:0] select_ln117_247_fu_722_p3;
wire   [0:0] or_ln117_227_fu_730_p2;
wire   [0:0] and_ln102_322_fu_602_p2;
wire   [3:0] select_ln117_248_fu_736_p3;
wire   [0:0] or_ln117_228_fu_744_p2;
wire   [3:0] select_ln117_249_fu_750_p3;
wire   [0:0] or_ln117_229_fu_758_p2;
wire   [0:0] and_ln102_323_fu_608_p2;
wire   [3:0] select_ln117_250_fu_764_p3;
wire   [0:0] or_ln117_230_fu_772_p2;
wire   [3:0] select_ln117_251_fu_778_p3;
wire   [0:0] or_ln117_231_fu_786_p2;
wire   [0:0] and_ln102_325_fu_620_p2;
wire   [3:0] select_ln117_252_fu_792_p3;
wire   [0:0] or_ln117_232_fu_800_p2;
wire   [3:0] select_ln117_253_fu_806_p3;
wire   [3:0] select_ln117_254_fu_814_p3;
wire   [4:0] zext_ln117_30_fu_822_p1;
wire   [0:0] xor_ln104_fu_834_p2;
wire   [0:0] xor_ln104_121_fu_844_p2;
wire   [0:0] and_ln102_307_fu_839_p2;
wire   [0:0] and_ln104_48_fu_849_p2;
wire   [0:0] and_ln102_312_fu_855_p2;
wire   [0:0] xor_ln104_126_fu_860_p2;
wire   [0:0] and_ln102_327_fu_880_p2;
wire   [0:0] and_ln102_313_fu_865_p2;
wire   [0:0] xor_ln104_127_fu_870_p2;
wire   [0:0] and_ln102_330_fu_896_p2;
wire   [0:0] and_ln102_326_fu_875_p2;
wire   [0:0] or_ln117_233_fu_907_p2;
wire   [0:0] or_ln117_234_fu_912_p2;
wire   [0:0] and_ln102_328_fu_885_p2;
wire   [4:0] select_ln117_256_fu_917_p3;
wire   [0:0] or_ln117_235_fu_924_p2;
wire   [4:0] select_ln117_257_fu_930_p3;
wire   [0:0] or_ln117_236_fu_938_p2;
wire   [0:0] and_ln102_329_fu_891_p2;
wire   [4:0] select_ln117_258_fu_943_p3;
wire   [0:0] or_ln117_237_fu_951_p2;
wire   [4:0] select_ln117_259_fu_957_p3;
wire   [0:0] or_ln117_238_fu_965_p2;
wire   [0:0] and_ln102_331_fu_901_p2;
wire   [4:0] select_ln117_260_fu_971_p3;
wire   [0:0] or_ln117_239_fu_979_p2;
wire   [4:0] select_ln117_261_fu_985_p3;
wire   [11:0] agg_result_fu_1001_p49;
wire   [4:0] agg_result_fu_1001_p50;
wire   [11:0] agg_result_fu_1001_p51;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1001_p1;
wire   [4:0] agg_result_fu_1001_p3;
wire   [4:0] agg_result_fu_1001_p5;
wire   [4:0] agg_result_fu_1001_p7;
wire   [4:0] agg_result_fu_1001_p9;
wire   [4:0] agg_result_fu_1001_p11;
wire   [4:0] agg_result_fu_1001_p13;
wire   [4:0] agg_result_fu_1001_p15;
wire   [4:0] agg_result_fu_1001_p17;
wire   [4:0] agg_result_fu_1001_p19;
wire   [4:0] agg_result_fu_1001_p21;
wire   [4:0] agg_result_fu_1001_p23;
wire   [4:0] agg_result_fu_1001_p25;
wire   [4:0] agg_result_fu_1001_p27;
wire   [4:0] agg_result_fu_1001_p29;
wire   [4:0] agg_result_fu_1001_p31;
wire  signed [4:0] agg_result_fu_1001_p33;
wire  signed [4:0] agg_result_fu_1001_p35;
wire  signed [4:0] agg_result_fu_1001_p37;
wire  signed [4:0] agg_result_fu_1001_p39;
wire  signed [4:0] agg_result_fu_1001_p41;
wire  signed [4:0] agg_result_fu_1001_p43;
wire  signed [4:0] agg_result_fu_1001_p45;
wire  signed [4:0] agg_result_fu_1001_p47;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_49_5_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h18 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h19 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h1A ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h1B ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h1C ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h1D ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h1E ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h1F ),
    .din23_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_49_5_12_1_1_U326(
    .din0(12'd4085),
    .din1(12'd130),
    .din2(12'd3987),
    .din3(12'd3643),
    .din4(12'd135),
    .din5(12'd354),
    .din6(12'd320),
    .din7(12'd3913),
    .din8(12'd3574),
    .din9(12'd3957),
    .din10(12'd3955),
    .din11(12'd3752),
    .din12(12'd3883),
    .din13(12'd343),
    .din14(12'd4074),
    .din15(12'd3836),
    .din16(12'd792),
    .din17(12'd3706),
    .din18(12'd410),
    .din19(12'd3588),
    .din20(12'd1042),
    .din21(12'd3922),
    .din22(12'd3668),
    .din23(12'd4020),
    .def(agg_result_fu_1001_p49),
    .sel(agg_result_fu_1001_p50),
    .dout(agg_result_fu_1001_p51)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_252_reg_1113 <= icmp_ln86_252_fu_328_p2;
        icmp_ln86_257_reg_1119 <= icmp_ln86_257_fu_358_p2;
        icmp_ln86_258_reg_1125 <= icmp_ln86_258_fu_364_p2;
        icmp_ln86_267_reg_1131 <= icmp_ln86_267_fu_418_p2;
        icmp_ln86_268_reg_1136 <= icmp_ln86_268_fu_434_p2;
        icmp_ln86_269_reg_1141 <= icmp_ln86_269_fu_440_p2;
        icmp_ln86_270_reg_1146 <= icmp_ln86_270_fu_446_p2;
        icmp_ln86_reg_1105 <= icmp_ln86_fu_304_p2;
        select_ln117_255_reg_1151 <= select_ln117_255_fu_826_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1001_p49 = 'bx;

assign agg_result_fu_1001_p50 = ((or_ln117_239_fu_979_p2[0:0] == 1'b1) ? select_ln117_261_fu_985_p3 : 5'd31);

assign and_ln102_305_fu_470_p2 = (icmp_ln86_250_fu_316_p2 & and_ln102_fu_452_p2);

assign and_ln102_306_fu_488_p2 = (icmp_ln86_251_fu_322_p2 & and_ln104_fu_464_p2);

assign and_ln102_307_fu_839_p2 = (xor_ln104_fu_834_p2 & icmp_ln86_252_reg_1113);

assign and_ln102_308_fu_506_p2 = (icmp_ln86_253_fu_334_p2 & and_ln102_305_fu_470_p2);

assign and_ln102_309_fu_518_p2 = (icmp_ln86_254_fu_340_p2 & and_ln104_46_fu_482_p2);

assign and_ln102_310_fu_530_p2 = (icmp_ln86_255_fu_346_p2 & and_ln102_306_fu_488_p2);

assign and_ln102_311_fu_542_p2 = (icmp_ln86_256_fu_352_p2 & and_ln104_47_fu_500_p2);

assign and_ln102_312_fu_855_p2 = (icmp_ln86_257_reg_1119 & and_ln102_307_fu_839_p2);

assign and_ln102_313_fu_865_p2 = (icmp_ln86_258_reg_1125 & and_ln104_48_fu_849_p2);

assign and_ln102_314_fu_554_p2 = (icmp_ln86_259_fu_370_p2 & and_ln102_308_fu_506_p2);

assign and_ln102_315_fu_560_p2 = (xor_ln104_122_fu_512_p2 & icmp_ln86_260_fu_376_p2);

assign and_ln102_316_fu_566_p2 = (and_ln102_315_fu_560_p2 & and_ln102_305_fu_470_p2);

assign and_ln102_317_fu_572_p2 = (icmp_ln86_261_fu_382_p2 & and_ln102_309_fu_518_p2);

assign and_ln102_318_fu_578_p2 = (xor_ln104_123_fu_524_p2 & icmp_ln86_262_fu_388_p2);

assign and_ln102_319_fu_584_p2 = (and_ln104_46_fu_482_p2 & and_ln102_318_fu_578_p2);

assign and_ln102_320_fu_590_p2 = (icmp_ln86_263_fu_394_p2 & and_ln102_310_fu_530_p2);

assign and_ln102_321_fu_596_p2 = (xor_ln104_124_fu_536_p2 & icmp_ln86_264_fu_400_p2);

assign and_ln102_322_fu_602_p2 = (and_ln102_321_fu_596_p2 & and_ln102_306_fu_488_p2);

assign and_ln102_323_fu_608_p2 = (icmp_ln86_265_fu_406_p2 & and_ln102_311_fu_542_p2);

assign and_ln102_324_fu_614_p2 = (xor_ln104_125_fu_548_p2 & icmp_ln86_266_fu_412_p2);

assign and_ln102_325_fu_620_p2 = (and_ln104_47_fu_500_p2 & and_ln102_324_fu_614_p2);

assign and_ln102_326_fu_875_p2 = (icmp_ln86_267_reg_1131 & and_ln102_312_fu_855_p2);

assign and_ln102_327_fu_880_p2 = (xor_ln104_126_fu_860_p2 & icmp_ln86_268_reg_1136);

assign and_ln102_328_fu_885_p2 = (and_ln102_327_fu_880_p2 & and_ln102_307_fu_839_p2);

assign and_ln102_329_fu_891_p2 = (icmp_ln86_269_reg_1141 & and_ln102_313_fu_865_p2);

assign and_ln102_330_fu_896_p2 = (xor_ln104_127_fu_870_p2 & icmp_ln86_270_reg_1146);

assign and_ln102_331_fu_901_p2 = (and_ln104_48_fu_849_p2 & and_ln102_330_fu_896_p2);

assign and_ln102_fu_452_p2 = (icmp_ln86_fu_304_p2 & icmp_ln86_249_fu_310_p2);

assign and_ln104_46_fu_482_p2 = (xor_ln104_119_fu_476_p2 & and_ln102_fu_452_p2);

assign and_ln104_47_fu_500_p2 = (xor_ln104_120_fu_494_p2 & and_ln104_fu_464_p2);

assign and_ln104_48_fu_849_p2 = (xor_ln104_fu_834_p2 & xor_ln104_121_fu_844_p2);

assign and_ln104_fu_464_p2 = (xor_ln104_118_fu_458_p2 & icmp_ln86_fu_304_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1001_p51;

assign icmp_ln86_249_fu_310_p2 = (($signed(x_52_val) < $signed(18'd48641)) ? 1'b1 : 1'b0);

assign icmp_ln86_250_fu_316_p2 = (($signed(x_48_val) < $signed(18'd80755)) ? 1'b1 : 1'b0);

assign icmp_ln86_251_fu_322_p2 = (($signed(x_50_val) < $signed(18'd77173)) ? 1'b1 : 1'b0);

assign icmp_ln86_252_fu_328_p2 = (($signed(x_1_val) < $signed(18'd19155)) ? 1'b1 : 1'b0);

assign icmp_ln86_253_fu_334_p2 = (($signed(x_15_val) < $signed(18'd7)) ? 1'b1 : 1'b0);

assign icmp_ln86_254_fu_340_p2 = (($signed(x_1_val) < $signed(18'd76027)) ? 1'b1 : 1'b0);

assign icmp_ln86_255_fu_346_p2 = (($signed(x_1_val) < $signed(18'd196958)) ? 1'b1 : 1'b0);

assign icmp_ln86_256_fu_352_p2 = (($signed(x_3_val) < $signed(18'd84335)) ? 1'b1 : 1'b0);

assign icmp_ln86_257_fu_358_p2 = (($signed(x_49_val) < $signed(18'd86786)) ? 1'b1 : 1'b0);

assign icmp_ln86_258_fu_364_p2 = (($signed(x_33_val) < $signed(18'd364)) ? 1'b1 : 1'b0);

assign icmp_ln86_259_fu_370_p2 = (($signed(x_7_val) < $signed(18'd3162)) ? 1'b1 : 1'b0);

assign icmp_ln86_260_fu_376_p2 = (($signed(x_18_val) < $signed(18'd3652)) ? 1'b1 : 1'b0);

assign icmp_ln86_261_fu_382_p2 = (($signed(x_1_val) < $signed(18'd241749)) ? 1'b1 : 1'b0);

assign icmp_ln86_262_fu_388_p2 = (($signed(x_47_val) < $signed(18'd84764)) ? 1'b1 : 1'b0);

assign icmp_ln86_263_fu_394_p2 = (($signed(x_49_val) < $signed(18'd71071)) ? 1'b1 : 1'b0);

assign icmp_ln86_264_fu_400_p2 = (($signed(x_1_val) < $signed(18'd12593)) ? 1'b1 : 1'b0);

assign icmp_ln86_265_fu_406_p2 = (($signed(x_1_val) < $signed(18'd233136)) ? 1'b1 : 1'b0);

assign icmp_ln86_266_fu_412_p2 = (($signed(x_50_val) < $signed(18'd83362)) ? 1'b1 : 1'b0);

assign icmp_ln86_267_fu_418_p2 = (($signed(x_33_val) < $signed(18'd186)) ? 1'b1 : 1'b0);

assign icmp_ln86_268_fu_434_p2 = (($signed(tmp_4_fu_424_p4) < $signed(15'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_269_fu_440_p2 = (($signed(x_11_val) < $signed(18'd73)) ? 1'b1 : 1'b0);

assign icmp_ln86_270_fu_446_p2 = (($signed(x_49_val) < $signed(18'd239860)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_304_p2 = (($signed(tmp_fu_294_p4) < $signed(15'd1)) ? 1'b1 : 1'b0);

assign or_ln117_223_fu_662_p2 = (and_ln102_317_fu_572_p2 | and_ln102_305_fu_470_p2);

assign or_ln117_224_fu_676_p2 = (and_ln102_309_fu_518_p2 | and_ln102_305_fu_470_p2);

assign or_ln117_225_fu_690_p2 = (or_ln117_224_fu_676_p2 | and_ln102_319_fu_584_p2);

assign or_ln117_226_fu_716_p2 = (and_ln102_fu_452_p2 | and_ln102_320_fu_590_p2);

assign or_ln117_227_fu_730_p2 = (and_ln102_fu_452_p2 | and_ln102_310_fu_530_p2);

assign or_ln117_228_fu_744_p2 = (or_ln117_227_fu_730_p2 | and_ln102_322_fu_602_p2);

assign or_ln117_229_fu_758_p2 = (and_ln102_fu_452_p2 | and_ln102_306_fu_488_p2);

assign or_ln117_230_fu_772_p2 = (or_ln117_229_fu_758_p2 | and_ln102_323_fu_608_p2);

assign or_ln117_231_fu_786_p2 = (or_ln117_229_fu_758_p2 | and_ln102_311_fu_542_p2);

assign or_ln117_232_fu_800_p2 = (or_ln117_231_fu_786_p2 | and_ln102_325_fu_620_p2);

assign or_ln117_233_fu_907_p2 = (icmp_ln86_reg_1105 | and_ln102_326_fu_875_p2);

assign or_ln117_234_fu_912_p2 = (icmp_ln86_reg_1105 | and_ln102_312_fu_855_p2);

assign or_ln117_235_fu_924_p2 = (or_ln117_234_fu_912_p2 | and_ln102_328_fu_885_p2);

assign or_ln117_236_fu_938_p2 = (icmp_ln86_reg_1105 | and_ln102_307_fu_839_p2);

assign or_ln117_237_fu_951_p2 = (or_ln117_236_fu_938_p2 | and_ln102_329_fu_891_p2);

assign or_ln117_238_fu_965_p2 = (or_ln117_236_fu_938_p2 | and_ln102_313_fu_865_p2);

assign or_ln117_239_fu_979_p2 = (or_ln117_238_fu_965_p2 | and_ln102_331_fu_901_p2);

assign or_ln117_fu_636_p2 = (and_ln102_316_fu_566_p2 | and_ln102_308_fu_506_p2);

assign select_ln117_242_fu_650_p3 = ((or_ln117_fu_636_p2[0:0] == 1'b1) ? select_ln117_fu_642_p3 : 2'd3);

assign select_ln117_243_fu_668_p3 = ((and_ln102_305_fu_470_p2[0:0] == 1'b1) ? zext_ln117_28_fu_658_p1 : 3'd4);

assign select_ln117_244_fu_682_p3 = ((or_ln117_223_fu_662_p2[0:0] == 1'b1) ? select_ln117_243_fu_668_p3 : 3'd5);

assign select_ln117_245_fu_696_p3 = ((or_ln117_224_fu_676_p2[0:0] == 1'b1) ? select_ln117_244_fu_682_p3 : 3'd6);

assign select_ln117_246_fu_704_p3 = ((or_ln117_225_fu_690_p2[0:0] == 1'b1) ? select_ln117_245_fu_696_p3 : 3'd7);

assign select_ln117_247_fu_722_p3 = ((and_ln102_fu_452_p2[0:0] == 1'b1) ? zext_ln117_29_fu_712_p1 : 4'd8);

assign select_ln117_248_fu_736_p3 = ((or_ln117_226_fu_716_p2[0:0] == 1'b1) ? select_ln117_247_fu_722_p3 : 4'd9);

assign select_ln117_249_fu_750_p3 = ((or_ln117_227_fu_730_p2[0:0] == 1'b1) ? select_ln117_248_fu_736_p3 : 4'd10);

assign select_ln117_250_fu_764_p3 = ((or_ln117_228_fu_744_p2[0:0] == 1'b1) ? select_ln117_249_fu_750_p3 : 4'd11);

assign select_ln117_251_fu_778_p3 = ((or_ln117_229_fu_758_p2[0:0] == 1'b1) ? select_ln117_250_fu_764_p3 : 4'd12);

assign select_ln117_252_fu_792_p3 = ((or_ln117_230_fu_772_p2[0:0] == 1'b1) ? select_ln117_251_fu_778_p3 : 4'd13);

assign select_ln117_253_fu_806_p3 = ((or_ln117_231_fu_786_p2[0:0] == 1'b1) ? select_ln117_252_fu_792_p3 : 4'd14);

assign select_ln117_254_fu_814_p3 = ((or_ln117_232_fu_800_p2[0:0] == 1'b1) ? select_ln117_253_fu_806_p3 : 4'd15);

assign select_ln117_255_fu_826_p3 = ((icmp_ln86_fu_304_p2[0:0] == 1'b1) ? zext_ln117_30_fu_822_p1 : 5'd24);

assign select_ln117_256_fu_917_p3 = ((or_ln117_233_fu_907_p2[0:0] == 1'b1) ? select_ln117_255_reg_1151 : 5'd25);

assign select_ln117_257_fu_930_p3 = ((or_ln117_234_fu_912_p2[0:0] == 1'b1) ? select_ln117_256_fu_917_p3 : 5'd26);

assign select_ln117_258_fu_943_p3 = ((or_ln117_235_fu_924_p2[0:0] == 1'b1) ? select_ln117_257_fu_930_p3 : 5'd27);

assign select_ln117_259_fu_957_p3 = ((or_ln117_236_fu_938_p2[0:0] == 1'b1) ? select_ln117_258_fu_943_p3 : 5'd28);

assign select_ln117_260_fu_971_p3 = ((or_ln117_237_fu_951_p2[0:0] == 1'b1) ? select_ln117_259_fu_957_p3 : 5'd29);

assign select_ln117_261_fu_985_p3 = ((or_ln117_238_fu_965_p2[0:0] == 1'b1) ? select_ln117_260_fu_971_p3 : 5'd30);

assign select_ln117_fu_642_p3 = ((and_ln102_308_fu_506_p2[0:0] == 1'b1) ? zext_ln117_fu_632_p1 : 2'd2);

assign tmp_4_fu_424_p4 = {{x_15_val[17:3]}};

assign tmp_fu_294_p4 = {{x_36_val[17:3]}};

assign xor_ln104_118_fu_458_p2 = (icmp_ln86_249_fu_310_p2 ^ 1'd1);

assign xor_ln104_119_fu_476_p2 = (icmp_ln86_250_fu_316_p2 ^ 1'd1);

assign xor_ln104_120_fu_494_p2 = (icmp_ln86_251_fu_322_p2 ^ 1'd1);

assign xor_ln104_121_fu_844_p2 = (icmp_ln86_252_reg_1113 ^ 1'd1);

assign xor_ln104_122_fu_512_p2 = (icmp_ln86_253_fu_334_p2 ^ 1'd1);

assign xor_ln104_123_fu_524_p2 = (icmp_ln86_254_fu_340_p2 ^ 1'd1);

assign xor_ln104_124_fu_536_p2 = (icmp_ln86_255_fu_346_p2 ^ 1'd1);

assign xor_ln104_125_fu_548_p2 = (icmp_ln86_256_fu_352_p2 ^ 1'd1);

assign xor_ln104_126_fu_860_p2 = (icmp_ln86_257_reg_1119 ^ 1'd1);

assign xor_ln104_127_fu_870_p2 = (icmp_ln86_258_reg_1125 ^ 1'd1);

assign xor_ln104_fu_834_p2 = (icmp_ln86_reg_1105 ^ 1'd1);

assign xor_ln117_fu_626_p2 = (1'd1 ^ and_ln102_314_fu_554_p2);

assign zext_ln117_28_fu_658_p1 = select_ln117_242_fu_650_p3;

assign zext_ln117_29_fu_712_p1 = select_ln117_246_fu_704_p3;

assign zext_ln117_30_fu_822_p1 = select_ln117_254_fu_814_p3;

assign zext_ln117_fu_632_p1 = xor_ln117_fu_626_p2;

endmodule //my_prj_decision_function_90
