// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_81 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_2_val,
        x_9_val,
        x_10_val,
        x_11_val,
        x_12_val,
        x_13_val,
        x_17_val,
        x_23_val,
        x_25_val,
        x_27_val,
        x_29_val,
        x_32_val,
        x_33_val,
        x_37_val,
        x_39_val,
        x_40_val,
        x_43_val,
        x_45_val,
        x_48_val,
        x_50_val,
        x_51_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_2_val;
input  [17:0] x_9_val;
input  [17:0] x_10_val;
input  [17:0] x_11_val;
input  [17:0] x_12_val;
input  [17:0] x_13_val;
input  [17:0] x_17_val;
input  [17:0] x_23_val;
input  [17:0] x_25_val;
input  [17:0] x_27_val;
input  [17:0] x_29_val;
input  [17:0] x_32_val;
input  [17:0] x_33_val;
input  [17:0] x_37_val;
input  [17:0] x_39_val;
input  [17:0] x_40_val;
input  [17:0] x_43_val;
input  [17:0] x_45_val;
input  [17:0] x_48_val;
input  [17:0] x_50_val;
input  [17:0] x_51_val;
input  [17:0] x_52_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
reg   [17:0] x_51_val_read_reg_1486;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_fu_418_p2;
reg   [0:0] icmp_ln86_reg_1491;
wire   [0:0] icmp_ln86_508_fu_430_p2;
reg   [0:0] icmp_ln86_508_reg_1500;
wire   [0:0] icmp_ln86_511_fu_448_p2;
reg   [0:0] icmp_ln86_511_reg_1506;
wire   [0:0] icmp_ln86_512_fu_454_p2;
reg   [0:0] icmp_ln86_512_reg_1512;
wire   [0:0] icmp_ln86_517_fu_484_p2;
reg   [0:0] icmp_ln86_517_reg_1518;
wire   [0:0] icmp_ln86_518_fu_490_p2;
reg   [0:0] icmp_ln86_518_reg_1524;
wire   [0:0] icmp_ln86_519_fu_496_p2;
reg   [0:0] icmp_ln86_519_reg_1530;
wire   [0:0] icmp_ln86_520_fu_502_p2;
reg   [0:0] icmp_ln86_520_reg_1536;
wire   [0:0] icmp_ln86_529_fu_556_p2;
reg   [0:0] icmp_ln86_529_reg_1542;
wire   [0:0] icmp_ln86_530_fu_562_p2;
reg   [0:0] icmp_ln86_530_reg_1547;
wire   [0:0] icmp_ln86_531_fu_568_p2;
reg   [0:0] icmp_ln86_531_reg_1552;
wire   [0:0] icmp_ln86_532_fu_574_p2;
reg   [0:0] icmp_ln86_532_reg_1557;
wire   [0:0] icmp_ln86_533_fu_580_p2;
reg   [0:0] icmp_ln86_533_reg_1562;
wire   [0:0] icmp_ln86_534_fu_586_p2;
reg   [0:0] icmp_ln86_534_reg_1567;
wire   [0:0] icmp_ln86_535_fu_592_p2;
reg   [0:0] icmp_ln86_535_reg_1572;
wire   [4:0] select_ln117_505_fu_972_p3;
reg   [4:0] select_ln117_505_reg_1577;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln86_507_fu_424_p2;
wire   [0:0] xor_ln104_239_fu_604_p2;
wire   [0:0] icmp_ln86_509_fu_436_p2;
wire   [0:0] and_ln102_fu_598_p2;
wire   [0:0] xor_ln104_241_fu_622_p2;
wire   [0:0] icmp_ln86_510_fu_442_p2;
wire   [0:0] and_ln104_fu_610_p2;
wire   [0:0] xor_ln104_242_fu_640_p2;
wire   [0:0] icmp_ln86_513_fu_460_p2;
wire   [0:0] and_ln102_624_fu_616_p2;
wire   [0:0] icmp_ln86_514_fu_466_p2;
wire   [0:0] and_ln104_90_fu_628_p2;
wire   [0:0] icmp_ln86_515_fu_472_p2;
wire   [0:0] and_ln102_625_fu_634_p2;
wire   [0:0] icmp_ln86_516_fu_478_p2;
wire   [0:0] and_ln104_91_fu_646_p2;
wire   [0:0] icmp_ln86_521_fu_508_p2;
wire   [0:0] and_ln102_628_fu_652_p2;
wire   [0:0] icmp_ln86_522_fu_514_p2;
wire   [0:0] xor_ln104_245_fu_658_p2;
wire   [0:0] and_ln102_637_fu_706_p2;
wire   [0:0] icmp_ln86_523_fu_520_p2;
wire   [0:0] and_ln102_629_fu_664_p2;
wire   [0:0] icmp_ln86_524_fu_526_p2;
wire   [0:0] xor_ln104_246_fu_670_p2;
wire   [0:0] and_ln102_640_fu_724_p2;
wire   [0:0] icmp_ln86_525_fu_532_p2;
wire   [0:0] and_ln102_630_fu_676_p2;
wire   [0:0] icmp_ln86_526_fu_538_p2;
wire   [0:0] xor_ln104_247_fu_682_p2;
wire   [0:0] and_ln102_643_fu_742_p2;
wire   [0:0] icmp_ln86_527_fu_544_p2;
wire   [0:0] and_ln102_631_fu_688_p2;
wire   [0:0] icmp_ln86_528_fu_550_p2;
wire   [0:0] xor_ln104_248_fu_694_p2;
wire   [0:0] and_ln102_646_fu_760_p2;
wire   [0:0] and_ln102_636_fu_700_p2;
wire   [0:0] xor_ln117_fu_772_p2;
wire   [0:0] and_ln102_638_fu_712_p2;
wire   [1:0] zext_ln117_fu_778_p1;
wire   [0:0] or_ln117_fu_782_p2;
wire   [1:0] select_ln117_fu_788_p3;
wire   [1:0] select_ln117_492_fu_796_p3;
wire   [0:0] and_ln102_639_fu_718_p2;
wire   [2:0] zext_ln117_55_fu_804_p1;
wire   [0:0] or_ln117_444_fu_808_p2;
wire   [2:0] select_ln117_493_fu_814_p3;
wire   [0:0] or_ln117_445_fu_822_p2;
wire   [0:0] and_ln102_641_fu_730_p2;
wire   [2:0] select_ln117_494_fu_828_p3;
wire   [0:0] or_ln117_446_fu_836_p2;
wire   [2:0] select_ln117_495_fu_842_p3;
wire   [2:0] select_ln117_496_fu_850_p3;
wire   [0:0] and_ln102_642_fu_736_p2;
wire   [3:0] zext_ln117_56_fu_858_p1;
wire   [0:0] or_ln117_447_fu_862_p2;
wire   [3:0] select_ln117_497_fu_868_p3;
wire   [0:0] or_ln117_448_fu_876_p2;
wire   [0:0] and_ln102_644_fu_748_p2;
wire   [3:0] select_ln117_498_fu_882_p3;
wire   [0:0] or_ln117_449_fu_890_p2;
wire   [3:0] select_ln117_499_fu_896_p3;
wire   [0:0] or_ln117_450_fu_904_p2;
wire   [0:0] and_ln102_645_fu_754_p2;
wire   [3:0] select_ln117_500_fu_910_p3;
wire   [0:0] or_ln117_451_fu_918_p2;
wire   [3:0] select_ln117_501_fu_924_p3;
wire   [0:0] or_ln117_452_fu_932_p2;
wire   [0:0] and_ln102_647_fu_766_p2;
wire   [3:0] select_ln117_502_fu_938_p3;
wire   [0:0] or_ln117_453_fu_946_p2;
wire   [3:0] select_ln117_503_fu_952_p3;
wire   [3:0] select_ln117_504_fu_960_p3;
wire   [4:0] zext_ln117_57_fu_968_p1;
wire   [0:0] xor_ln104_fu_987_p2;
wire   [0:0] xor_ln104_240_fu_997_p2;
wire   [0:0] and_ln102_623_fu_992_p2;
wire   [0:0] xor_ln104_243_fu_1013_p2;
wire   [0:0] and_ln104_89_fu_1002_p2;
wire   [0:0] xor_ln104_244_fu_1029_p2;
wire   [0:0] and_ln102_626_fu_1008_p2;
wire   [0:0] and_ln104_92_fu_1018_p2;
wire   [0:0] and_ln102_627_fu_1024_p2;
wire   [0:0] and_ln104_93_fu_1034_p2;
wire   [0:0] and_ln102_632_fu_1040_p2;
wire   [0:0] xor_ln104_249_fu_1045_p2;
wire   [0:0] and_ln102_649_fu_1085_p2;
wire   [0:0] and_ln102_633_fu_1050_p2;
wire   [0:0] xor_ln104_250_fu_1055_p2;
wire   [0:0] and_ln102_652_fu_1101_p2;
wire   [0:0] and_ln102_634_fu_1060_p2;
wire   [0:0] tmp_fu_980_p3;
wire   [0:0] xor_ln104_251_fu_1065_p2;
wire   [0:0] and_ln102_655_fu_1117_p2;
wire   [0:0] and_ln102_635_fu_1070_p2;
wire   [0:0] xor_ln104_252_fu_1075_p2;
wire   [0:0] and_ln102_658_fu_1134_p2;
wire   [0:0] and_ln102_648_fu_1080_p2;
wire   [0:0] or_ln117_454_fu_1145_p2;
wire   [0:0] or_ln117_455_fu_1150_p2;
wire   [0:0] and_ln102_650_fu_1090_p2;
wire   [4:0] select_ln117_506_fu_1155_p3;
wire   [0:0] or_ln117_456_fu_1162_p2;
wire   [4:0] select_ln117_507_fu_1168_p3;
wire   [0:0] or_ln117_457_fu_1176_p2;
wire   [0:0] and_ln102_651_fu_1096_p2;
wire   [4:0] select_ln117_508_fu_1181_p3;
wire   [0:0] or_ln117_458_fu_1189_p2;
wire   [4:0] select_ln117_509_fu_1195_p3;
wire   [0:0] or_ln117_459_fu_1203_p2;
wire   [0:0] and_ln102_653_fu_1106_p2;
wire   [4:0] select_ln117_510_fu_1209_p3;
wire   [0:0] or_ln117_460_fu_1217_p2;
wire   [4:0] select_ln117_511_fu_1223_p3;
wire   [0:0] or_ln117_461_fu_1231_p2;
wire   [0:0] and_ln102_654_fu_1112_p2;
wire   [4:0] select_ln117_512_fu_1236_p3;
wire   [0:0] or_ln117_462_fu_1244_p2;
wire   [4:0] select_ln117_513_fu_1250_p3;
wire   [0:0] or_ln117_463_fu_1258_p2;
wire   [0:0] and_ln102_656_fu_1123_p2;
wire   [4:0] select_ln117_514_fu_1264_p3;
wire   [0:0] or_ln117_464_fu_1272_p2;
wire   [4:0] select_ln117_515_fu_1278_p3;
wire   [0:0] or_ln117_465_fu_1286_p2;
wire   [0:0] and_ln102_657_fu_1129_p2;
wire   [4:0] select_ln117_516_fu_1292_p3;
wire   [0:0] or_ln117_466_fu_1300_p2;
wire   [4:0] select_ln117_517_fu_1306_p3;
wire   [0:0] or_ln117_467_fu_1314_p2;
wire   [0:0] and_ln102_659_fu_1139_p2;
wire   [4:0] select_ln117_518_fu_1320_p3;
wire   [0:0] or_ln117_468_fu_1328_p2;
wire   [4:0] select_ln117_519_fu_1334_p3;
wire   [11:0] agg_result_fu_1350_p65;
wire   [4:0] agg_result_fu_1350_p66;
wire   [11:0] agg_result_fu_1350_p67;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1350_p1;
wire   [4:0] agg_result_fu_1350_p3;
wire   [4:0] agg_result_fu_1350_p5;
wire   [4:0] agg_result_fu_1350_p7;
wire   [4:0] agg_result_fu_1350_p9;
wire   [4:0] agg_result_fu_1350_p11;
wire   [4:0] agg_result_fu_1350_p13;
wire   [4:0] agg_result_fu_1350_p15;
wire   [4:0] agg_result_fu_1350_p17;
wire   [4:0] agg_result_fu_1350_p19;
wire   [4:0] agg_result_fu_1350_p21;
wire   [4:0] agg_result_fu_1350_p23;
wire   [4:0] agg_result_fu_1350_p25;
wire   [4:0] agg_result_fu_1350_p27;
wire   [4:0] agg_result_fu_1350_p29;
wire   [4:0] agg_result_fu_1350_p31;
wire  signed [4:0] agg_result_fu_1350_p33;
wire  signed [4:0] agg_result_fu_1350_p35;
wire  signed [4:0] agg_result_fu_1350_p37;
wire  signed [4:0] agg_result_fu_1350_p39;
wire  signed [4:0] agg_result_fu_1350_p41;
wire  signed [4:0] agg_result_fu_1350_p43;
wire  signed [4:0] agg_result_fu_1350_p45;
wire  signed [4:0] agg_result_fu_1350_p47;
wire  signed [4:0] agg_result_fu_1350_p49;
wire  signed [4:0] agg_result_fu_1350_p51;
wire  signed [4:0] agg_result_fu_1350_p53;
wire  signed [4:0] agg_result_fu_1350_p55;
wire  signed [4:0] agg_result_fu_1350_p57;
wire  signed [4:0] agg_result_fu_1350_p59;
wire  signed [4:0] agg_result_fu_1350_p61;
wire  signed [4:0] agg_result_fu_1350_p63;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_65_5_12_1_1_x10 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 12 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 12 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 12 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 12 ),
    .CASE31( 5'h1F ),
    .din31_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_65_5_12_1_1_x10_U494(
    .din0(12'd141),
    .din1(12'd4077),
    .din2(12'd683),
    .din3(12'd192),
    .din4(12'd4075),
    .din5(12'd3938),
    .din6(12'd55),
    .din7(12'd3981),
    .din8(12'd289),
    .din9(12'd3781),
    .din10(12'd1064),
    .din11(12'd4073),
    .din12(12'd131),
    .din13(12'd362),
    .din14(12'd4071),
    .din15(12'd108),
    .din16(12'd3712),
    .din17(12'd712),
    .din18(12'd357),
    .din19(12'd3520),
    .din20(12'd88),
    .din21(12'd376),
    .din22(12'd3903),
    .din23(12'd89),
    .din24(12'd3533),
    .din25(12'd2417),
    .din26(12'd3415),
    .din27(12'd311),
    .din28(12'd4010),
    .din29(12'd237),
    .din30(12'd3457),
    .din31(12'd413),
    .def(agg_result_fu_1350_p65),
    .sel(agg_result_fu_1350_p66),
    .dout(agg_result_fu_1350_p67)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_508_reg_1500 <= icmp_ln86_508_fu_430_p2;
        icmp_ln86_511_reg_1506 <= icmp_ln86_511_fu_448_p2;
        icmp_ln86_512_reg_1512 <= icmp_ln86_512_fu_454_p2;
        icmp_ln86_517_reg_1518 <= icmp_ln86_517_fu_484_p2;
        icmp_ln86_518_reg_1524 <= icmp_ln86_518_fu_490_p2;
        icmp_ln86_519_reg_1530 <= icmp_ln86_519_fu_496_p2;
        icmp_ln86_520_reg_1536 <= icmp_ln86_520_fu_502_p2;
        icmp_ln86_529_reg_1542 <= icmp_ln86_529_fu_556_p2;
        icmp_ln86_530_reg_1547 <= icmp_ln86_530_fu_562_p2;
        icmp_ln86_531_reg_1552 <= icmp_ln86_531_fu_568_p2;
        icmp_ln86_532_reg_1557 <= icmp_ln86_532_fu_574_p2;
        icmp_ln86_533_reg_1562 <= icmp_ln86_533_fu_580_p2;
        icmp_ln86_534_reg_1567 <= icmp_ln86_534_fu_586_p2;
        icmp_ln86_535_reg_1572 <= icmp_ln86_535_fu_592_p2;
        icmp_ln86_reg_1491 <= icmp_ln86_fu_418_p2;
        select_ln117_505_reg_1577 <= select_ln117_505_fu_972_p3;
        x_51_val_read_reg_1486 <= x_51_val;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1350_p65 = 'bx;

assign agg_result_fu_1350_p66 = ((or_ln117_468_fu_1328_p2[0:0] == 1'b1) ? select_ln117_519_fu_1334_p3 : 5'd31);

assign and_ln102_623_fu_992_p2 = (xor_ln104_fu_987_p2 & icmp_ln86_508_reg_1500);

assign and_ln102_624_fu_616_p2 = (icmp_ln86_509_fu_436_p2 & and_ln102_fu_598_p2);

assign and_ln102_625_fu_634_p2 = (icmp_ln86_510_fu_442_p2 & and_ln104_fu_610_p2);

assign and_ln102_626_fu_1008_p2 = (icmp_ln86_511_reg_1506 & and_ln102_623_fu_992_p2);

assign and_ln102_627_fu_1024_p2 = (icmp_ln86_512_reg_1512 & and_ln104_89_fu_1002_p2);

assign and_ln102_628_fu_652_p2 = (icmp_ln86_513_fu_460_p2 & and_ln102_624_fu_616_p2);

assign and_ln102_629_fu_664_p2 = (icmp_ln86_514_fu_466_p2 & and_ln104_90_fu_628_p2);

assign and_ln102_630_fu_676_p2 = (icmp_ln86_515_fu_472_p2 & and_ln102_625_fu_634_p2);

assign and_ln102_631_fu_688_p2 = (icmp_ln86_516_fu_478_p2 & and_ln104_91_fu_646_p2);

assign and_ln102_632_fu_1040_p2 = (icmp_ln86_517_reg_1518 & and_ln102_626_fu_1008_p2);

assign and_ln102_633_fu_1050_p2 = (icmp_ln86_518_reg_1524 & and_ln104_92_fu_1018_p2);

assign and_ln102_634_fu_1060_p2 = (icmp_ln86_519_reg_1530 & and_ln102_627_fu_1024_p2);

assign and_ln102_635_fu_1070_p2 = (icmp_ln86_520_reg_1536 & and_ln104_93_fu_1034_p2);

assign and_ln102_636_fu_700_p2 = (icmp_ln86_521_fu_508_p2 & and_ln102_628_fu_652_p2);

assign and_ln102_637_fu_706_p2 = (xor_ln104_245_fu_658_p2 & icmp_ln86_522_fu_514_p2);

assign and_ln102_638_fu_712_p2 = (and_ln102_637_fu_706_p2 & and_ln102_624_fu_616_p2);

assign and_ln102_639_fu_718_p2 = (icmp_ln86_523_fu_520_p2 & and_ln102_629_fu_664_p2);

assign and_ln102_640_fu_724_p2 = (xor_ln104_246_fu_670_p2 & icmp_ln86_524_fu_526_p2);

assign and_ln102_641_fu_730_p2 = (and_ln104_90_fu_628_p2 & and_ln102_640_fu_724_p2);

assign and_ln102_642_fu_736_p2 = (icmp_ln86_525_fu_532_p2 & and_ln102_630_fu_676_p2);

assign and_ln102_643_fu_742_p2 = (xor_ln104_247_fu_682_p2 & icmp_ln86_526_fu_538_p2);

assign and_ln102_644_fu_748_p2 = (and_ln102_643_fu_742_p2 & and_ln102_625_fu_634_p2);

assign and_ln102_645_fu_754_p2 = (icmp_ln86_527_fu_544_p2 & and_ln102_631_fu_688_p2);

assign and_ln102_646_fu_760_p2 = (xor_ln104_248_fu_694_p2 & icmp_ln86_528_fu_550_p2);

assign and_ln102_647_fu_766_p2 = (and_ln104_91_fu_646_p2 & and_ln102_646_fu_760_p2);

assign and_ln102_648_fu_1080_p2 = (icmp_ln86_529_reg_1542 & and_ln102_632_fu_1040_p2);

assign and_ln102_649_fu_1085_p2 = (xor_ln104_249_fu_1045_p2 & icmp_ln86_530_reg_1547);

assign and_ln102_650_fu_1090_p2 = (and_ln102_649_fu_1085_p2 & and_ln102_626_fu_1008_p2);

assign and_ln102_651_fu_1096_p2 = (icmp_ln86_531_reg_1552 & and_ln102_633_fu_1050_p2);

assign and_ln102_652_fu_1101_p2 = (xor_ln104_250_fu_1055_p2 & icmp_ln86_532_reg_1557);

assign and_ln102_653_fu_1106_p2 = (and_ln104_92_fu_1018_p2 & and_ln102_652_fu_1101_p2);

assign and_ln102_654_fu_1112_p2 = (icmp_ln86_533_reg_1562 & and_ln102_634_fu_1060_p2);

assign and_ln102_655_fu_1117_p2 = (xor_ln104_251_fu_1065_p2 & tmp_fu_980_p3);

assign and_ln102_656_fu_1123_p2 = (and_ln102_655_fu_1117_p2 & and_ln102_627_fu_1024_p2);

assign and_ln102_657_fu_1129_p2 = (icmp_ln86_534_reg_1567 & and_ln102_635_fu_1070_p2);

assign and_ln102_658_fu_1134_p2 = (xor_ln104_252_fu_1075_p2 & icmp_ln86_535_reg_1572);

assign and_ln102_659_fu_1139_p2 = (and_ln104_93_fu_1034_p2 & and_ln102_658_fu_1134_p2);

assign and_ln102_fu_598_p2 = (icmp_ln86_fu_418_p2 & icmp_ln86_507_fu_424_p2);

assign and_ln104_89_fu_1002_p2 = (xor_ln104_fu_987_p2 & xor_ln104_240_fu_997_p2);

assign and_ln104_90_fu_628_p2 = (xor_ln104_241_fu_622_p2 & and_ln102_fu_598_p2);

assign and_ln104_91_fu_646_p2 = (xor_ln104_242_fu_640_p2 & and_ln104_fu_610_p2);

assign and_ln104_92_fu_1018_p2 = (xor_ln104_243_fu_1013_p2 & and_ln102_623_fu_992_p2);

assign and_ln104_93_fu_1034_p2 = (xor_ln104_244_fu_1029_p2 & and_ln104_89_fu_1002_p2);

assign and_ln104_fu_610_p2 = (xor_ln104_239_fu_604_p2 & icmp_ln86_fu_418_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1350_p67;

assign icmp_ln86_507_fu_424_p2 = (($signed(x_33_val) < $signed(18'd742)) ? 1'b1 : 1'b0);

assign icmp_ln86_508_fu_430_p2 = (($signed(x_11_val) < $signed(18'd657)) ? 1'b1 : 1'b0);

assign icmp_ln86_509_fu_436_p2 = (($signed(x_1_val) < $signed(18'd170246)) ? 1'b1 : 1'b0);

assign icmp_ln86_510_fu_442_p2 = (($signed(x_40_val) < $signed(18'd312)) ? 1'b1 : 1'b0);

assign icmp_ln86_511_fu_448_p2 = (($signed(x_43_val) < $signed(18'd54)) ? 1'b1 : 1'b0);

assign icmp_ln86_512_fu_454_p2 = (($signed(x_2_val) < $signed(18'd260946)) ? 1'b1 : 1'b0);

assign icmp_ln86_513_fu_460_p2 = (($signed(x_37_val) < $signed(18'd110)) ? 1'b1 : 1'b0);

assign icmp_ln86_514_fu_466_p2 = (($signed(x_1_val) < $signed(18'd205)) ? 1'b1 : 1'b0);

assign icmp_ln86_515_fu_472_p2 = (($signed(x_29_val) < $signed(18'd23704)) ? 1'b1 : 1'b0);

assign icmp_ln86_516_fu_478_p2 = (($signed(x_12_val) < $signed(18'd258872)) ? 1'b1 : 1'b0);

assign icmp_ln86_517_fu_484_p2 = (($signed(x_52_val) < $signed(18'd53761)) ? 1'b1 : 1'b0);

assign icmp_ln86_518_fu_490_p2 = (($signed(x_10_val) < $signed(18'd591)) ? 1'b1 : 1'b0);

assign icmp_ln86_519_fu_496_p2 = (($signed(x_50_val) < $signed(18'd45077)) ? 1'b1 : 1'b0);

assign icmp_ln86_520_fu_502_p2 = (($signed(x_25_val) < $signed(18'd356)) ? 1'b1 : 1'b0);

assign icmp_ln86_521_fu_508_p2 = (($signed(x_9_val) < $signed(18'd1057)) ? 1'b1 : 1'b0);

assign icmp_ln86_522_fu_514_p2 = (($signed(x_17_val) < $signed(18'd28)) ? 1'b1 : 1'b0);

assign icmp_ln86_523_fu_520_p2 = (($signed(x_1_val) < $signed(18'd224907)) ? 1'b1 : 1'b0);

assign icmp_ln86_524_fu_526_p2 = (($signed(x_1_val) < $signed(18'd81174)) ? 1'b1 : 1'b0);

assign icmp_ln86_525_fu_532_p2 = (($signed(x_48_val) < $signed(18'd73146)) ? 1'b1 : 1'b0);

assign icmp_ln86_526_fu_538_p2 = (($signed(x_27_val) < $signed(18'd14369)) ? 1'b1 : 1'b0);

assign icmp_ln86_527_fu_544_p2 = (($signed(x_39_val) < $signed(18'd2132)) ? 1'b1 : 1'b0);

assign icmp_ln86_528_fu_550_p2 = (($signed(x_1_val) < $signed(18'd22754)) ? 1'b1 : 1'b0);

assign icmp_ln86_529_fu_556_p2 = (($signed(x_13_val) < $signed(18'd237)) ? 1'b1 : 1'b0);

assign icmp_ln86_530_fu_562_p2 = (($signed(x_10_val) < $signed(18'd873)) ? 1'b1 : 1'b0);

assign icmp_ln86_531_fu_568_p2 = (($signed(x_50_val) < $signed(18'd188454)) ? 1'b1 : 1'b0);

assign icmp_ln86_532_fu_574_p2 = (($signed(x_45_val) < $signed(18'd307)) ? 1'b1 : 1'b0);

assign icmp_ln86_533_fu_580_p2 = (($signed(x_23_val) < $signed(18'd28)) ? 1'b1 : 1'b0);

assign icmp_ln86_534_fu_586_p2 = (($signed(x_50_val) < $signed(18'd38491)) ? 1'b1 : 1'b0);

assign icmp_ln86_535_fu_592_p2 = (($signed(x_32_val) < $signed(18'd113)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_418_p2 = (($signed(x_1_val) < $signed(18'd250929)) ? 1'b1 : 1'b0);

assign or_ln117_444_fu_808_p2 = (and_ln102_639_fu_718_p2 | and_ln102_624_fu_616_p2);

assign or_ln117_445_fu_822_p2 = (and_ln102_629_fu_664_p2 | and_ln102_624_fu_616_p2);

assign or_ln117_446_fu_836_p2 = (or_ln117_445_fu_822_p2 | and_ln102_641_fu_730_p2);

assign or_ln117_447_fu_862_p2 = (and_ln102_fu_598_p2 | and_ln102_642_fu_736_p2);

assign or_ln117_448_fu_876_p2 = (and_ln102_fu_598_p2 | and_ln102_630_fu_676_p2);

assign or_ln117_449_fu_890_p2 = (or_ln117_448_fu_876_p2 | and_ln102_644_fu_748_p2);

assign or_ln117_450_fu_904_p2 = (and_ln102_fu_598_p2 | and_ln102_625_fu_634_p2);

assign or_ln117_451_fu_918_p2 = (or_ln117_450_fu_904_p2 | and_ln102_645_fu_754_p2);

assign or_ln117_452_fu_932_p2 = (or_ln117_450_fu_904_p2 | and_ln102_631_fu_688_p2);

assign or_ln117_453_fu_946_p2 = (or_ln117_452_fu_932_p2 | and_ln102_647_fu_766_p2);

assign or_ln117_454_fu_1145_p2 = (icmp_ln86_reg_1491 | and_ln102_648_fu_1080_p2);

assign or_ln117_455_fu_1150_p2 = (icmp_ln86_reg_1491 | and_ln102_632_fu_1040_p2);

assign or_ln117_456_fu_1162_p2 = (or_ln117_455_fu_1150_p2 | and_ln102_650_fu_1090_p2);

assign or_ln117_457_fu_1176_p2 = (icmp_ln86_reg_1491 | and_ln102_626_fu_1008_p2);

assign or_ln117_458_fu_1189_p2 = (or_ln117_457_fu_1176_p2 | and_ln102_651_fu_1096_p2);

assign or_ln117_459_fu_1203_p2 = (or_ln117_457_fu_1176_p2 | and_ln102_633_fu_1050_p2);

assign or_ln117_460_fu_1217_p2 = (or_ln117_459_fu_1203_p2 | and_ln102_653_fu_1106_p2);

assign or_ln117_461_fu_1231_p2 = (icmp_ln86_reg_1491 | and_ln102_623_fu_992_p2);

assign or_ln117_462_fu_1244_p2 = (or_ln117_461_fu_1231_p2 | and_ln102_654_fu_1112_p2);

assign or_ln117_463_fu_1258_p2 = (or_ln117_461_fu_1231_p2 | and_ln102_634_fu_1060_p2);

assign or_ln117_464_fu_1272_p2 = (or_ln117_463_fu_1258_p2 | and_ln102_656_fu_1123_p2);

assign or_ln117_465_fu_1286_p2 = (or_ln117_461_fu_1231_p2 | and_ln102_627_fu_1024_p2);

assign or_ln117_466_fu_1300_p2 = (or_ln117_465_fu_1286_p2 | and_ln102_657_fu_1129_p2);

assign or_ln117_467_fu_1314_p2 = (or_ln117_465_fu_1286_p2 | and_ln102_635_fu_1070_p2);

assign or_ln117_468_fu_1328_p2 = (or_ln117_467_fu_1314_p2 | and_ln102_659_fu_1139_p2);

assign or_ln117_fu_782_p2 = (and_ln102_638_fu_712_p2 | and_ln102_628_fu_652_p2);

assign select_ln117_492_fu_796_p3 = ((or_ln117_fu_782_p2[0:0] == 1'b1) ? select_ln117_fu_788_p3 : 2'd3);

assign select_ln117_493_fu_814_p3 = ((and_ln102_624_fu_616_p2[0:0] == 1'b1) ? zext_ln117_55_fu_804_p1 : 3'd4);

assign select_ln117_494_fu_828_p3 = ((or_ln117_444_fu_808_p2[0:0] == 1'b1) ? select_ln117_493_fu_814_p3 : 3'd5);

assign select_ln117_495_fu_842_p3 = ((or_ln117_445_fu_822_p2[0:0] == 1'b1) ? select_ln117_494_fu_828_p3 : 3'd6);

assign select_ln117_496_fu_850_p3 = ((or_ln117_446_fu_836_p2[0:0] == 1'b1) ? select_ln117_495_fu_842_p3 : 3'd7);

assign select_ln117_497_fu_868_p3 = ((and_ln102_fu_598_p2[0:0] == 1'b1) ? zext_ln117_56_fu_858_p1 : 4'd8);

assign select_ln117_498_fu_882_p3 = ((or_ln117_447_fu_862_p2[0:0] == 1'b1) ? select_ln117_497_fu_868_p3 : 4'd9);

assign select_ln117_499_fu_896_p3 = ((or_ln117_448_fu_876_p2[0:0] == 1'b1) ? select_ln117_498_fu_882_p3 : 4'd10);

assign select_ln117_500_fu_910_p3 = ((or_ln117_449_fu_890_p2[0:0] == 1'b1) ? select_ln117_499_fu_896_p3 : 4'd11);

assign select_ln117_501_fu_924_p3 = ((or_ln117_450_fu_904_p2[0:0] == 1'b1) ? select_ln117_500_fu_910_p3 : 4'd12);

assign select_ln117_502_fu_938_p3 = ((or_ln117_451_fu_918_p2[0:0] == 1'b1) ? select_ln117_501_fu_924_p3 : 4'd13);

assign select_ln117_503_fu_952_p3 = ((or_ln117_452_fu_932_p2[0:0] == 1'b1) ? select_ln117_502_fu_938_p3 : 4'd14);

assign select_ln117_504_fu_960_p3 = ((or_ln117_453_fu_946_p2[0:0] == 1'b1) ? select_ln117_503_fu_952_p3 : 4'd15);

assign select_ln117_505_fu_972_p3 = ((icmp_ln86_fu_418_p2[0:0] == 1'b1) ? zext_ln117_57_fu_968_p1 : 5'd16);

assign select_ln117_506_fu_1155_p3 = ((or_ln117_454_fu_1145_p2[0:0] == 1'b1) ? select_ln117_505_reg_1577 : 5'd17);

assign select_ln117_507_fu_1168_p3 = ((or_ln117_455_fu_1150_p2[0:0] == 1'b1) ? select_ln117_506_fu_1155_p3 : 5'd18);

assign select_ln117_508_fu_1181_p3 = ((or_ln117_456_fu_1162_p2[0:0] == 1'b1) ? select_ln117_507_fu_1168_p3 : 5'd19);

assign select_ln117_509_fu_1195_p3 = ((or_ln117_457_fu_1176_p2[0:0] == 1'b1) ? select_ln117_508_fu_1181_p3 : 5'd20);

assign select_ln117_510_fu_1209_p3 = ((or_ln117_458_fu_1189_p2[0:0] == 1'b1) ? select_ln117_509_fu_1195_p3 : 5'd21);

assign select_ln117_511_fu_1223_p3 = ((or_ln117_459_fu_1203_p2[0:0] == 1'b1) ? select_ln117_510_fu_1209_p3 : 5'd22);

assign select_ln117_512_fu_1236_p3 = ((or_ln117_460_fu_1217_p2[0:0] == 1'b1) ? select_ln117_511_fu_1223_p3 : 5'd23);

assign select_ln117_513_fu_1250_p3 = ((or_ln117_461_fu_1231_p2[0:0] == 1'b1) ? select_ln117_512_fu_1236_p3 : 5'd24);

assign select_ln117_514_fu_1264_p3 = ((or_ln117_462_fu_1244_p2[0:0] == 1'b1) ? select_ln117_513_fu_1250_p3 : 5'd25);

assign select_ln117_515_fu_1278_p3 = ((or_ln117_463_fu_1258_p2[0:0] == 1'b1) ? select_ln117_514_fu_1264_p3 : 5'd26);

assign select_ln117_516_fu_1292_p3 = ((or_ln117_464_fu_1272_p2[0:0] == 1'b1) ? select_ln117_515_fu_1278_p3 : 5'd27);

assign select_ln117_517_fu_1306_p3 = ((or_ln117_465_fu_1286_p2[0:0] == 1'b1) ? select_ln117_516_fu_1292_p3 : 5'd28);

assign select_ln117_518_fu_1320_p3 = ((or_ln117_466_fu_1300_p2[0:0] == 1'b1) ? select_ln117_517_fu_1306_p3 : 5'd29);

assign select_ln117_519_fu_1334_p3 = ((or_ln117_467_fu_1314_p2[0:0] == 1'b1) ? select_ln117_518_fu_1320_p3 : 5'd30);

assign select_ln117_fu_788_p3 = ((and_ln102_628_fu_652_p2[0:0] == 1'b1) ? zext_ln117_fu_778_p1 : 2'd2);

assign tmp_fu_980_p3 = x_51_val_read_reg_1486[32'd17];

assign xor_ln104_239_fu_604_p2 = (icmp_ln86_507_fu_424_p2 ^ 1'd1);

assign xor_ln104_240_fu_997_p2 = (icmp_ln86_508_reg_1500 ^ 1'd1);

assign xor_ln104_241_fu_622_p2 = (icmp_ln86_509_fu_436_p2 ^ 1'd1);

assign xor_ln104_242_fu_640_p2 = (icmp_ln86_510_fu_442_p2 ^ 1'd1);

assign xor_ln104_243_fu_1013_p2 = (icmp_ln86_511_reg_1506 ^ 1'd1);

assign xor_ln104_244_fu_1029_p2 = (icmp_ln86_512_reg_1512 ^ 1'd1);

assign xor_ln104_245_fu_658_p2 = (icmp_ln86_513_fu_460_p2 ^ 1'd1);

assign xor_ln104_246_fu_670_p2 = (icmp_ln86_514_fu_466_p2 ^ 1'd1);

assign xor_ln104_247_fu_682_p2 = (icmp_ln86_515_fu_472_p2 ^ 1'd1);

assign xor_ln104_248_fu_694_p2 = (icmp_ln86_516_fu_478_p2 ^ 1'd1);

assign xor_ln104_249_fu_1045_p2 = (icmp_ln86_517_reg_1518 ^ 1'd1);

assign xor_ln104_250_fu_1055_p2 = (icmp_ln86_518_reg_1524 ^ 1'd1);

assign xor_ln104_251_fu_1065_p2 = (icmp_ln86_519_reg_1530 ^ 1'd1);

assign xor_ln104_252_fu_1075_p2 = (icmp_ln86_520_reg_1536 ^ 1'd1);

assign xor_ln104_fu_987_p2 = (icmp_ln86_reg_1491 ^ 1'd1);

assign xor_ln117_fu_772_p2 = (1'd1 ^ and_ln102_636_fu_700_p2);

assign zext_ln117_55_fu_804_p1 = select_ln117_492_fu_796_p3;

assign zext_ln117_56_fu_858_p1 = select_ln117_496_fu_850_p3;

assign zext_ln117_57_fu_968_p1 = select_ln117_504_fu_960_p3;

assign zext_ln117_fu_778_p1 = xor_ln117_fu_772_p2;

endmodule //my_prj_decision_function_81
