// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_62 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_2_val,
        x_3_val,
        x_5_val,
        x_6_val,
        x_7_val,
        x_8_val,
        x_9_val,
        x_11_val,
        x_12_val,
        x_13_val,
        x_15_val,
        x_17_val,
        x_19_val,
        x_21_val,
        x_39_val,
        x_40_val,
        x_47_val,
        x_50_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_2_val;
input  [17:0] x_3_val;
input  [17:0] x_5_val;
input  [17:0] x_6_val;
input  [17:0] x_7_val;
input  [17:0] x_8_val;
input  [17:0] x_9_val;
input  [17:0] x_11_val;
input  [17:0] x_12_val;
input  [17:0] x_13_val;
input  [17:0] x_15_val;
input  [17:0] x_17_val;
input  [17:0] x_19_val;
input  [17:0] x_21_val;
input  [17:0] x_39_val;
input  [17:0] x_40_val;
input  [17:0] x_47_val;
input  [17:0] x_50_val;
input  [17:0] x_52_val;
output  [12:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_368_p2;
reg   [0:0] icmp_ln86_reg_1356;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_1066_fu_380_p2;
reg   [0:0] icmp_ln86_1066_reg_1365;
wire   [0:0] icmp_ln86_1069_fu_398_p2;
reg   [0:0] icmp_ln86_1069_reg_1371;
wire   [0:0] icmp_ln86_1070_fu_404_p2;
reg   [0:0] icmp_ln86_1070_reg_1377;
wire   [0:0] icmp_ln86_1075_fu_434_p2;
reg   [0:0] icmp_ln86_1075_reg_1383;
wire   [0:0] icmp_ln86_1076_fu_440_p2;
reg   [0:0] icmp_ln86_1076_reg_1389;
wire   [0:0] icmp_ln86_1077_fu_446_p2;
reg   [0:0] icmp_ln86_1077_reg_1395;
wire   [0:0] icmp_ln86_1078_fu_452_p2;
reg   [0:0] icmp_ln86_1078_reg_1401;
wire   [0:0] icmp_ln86_1084_fu_488_p2;
reg   [0:0] icmp_ln86_1084_reg_1407;
wire   [0:0] icmp_ln86_1085_fu_494_p2;
reg   [0:0] icmp_ln86_1085_reg_1412;
wire   [0:0] icmp_ln86_1086_fu_500_p2;
reg   [0:0] icmp_ln86_1086_reg_1417;
wire   [0:0] icmp_ln86_1087_fu_506_p2;
reg   [0:0] icmp_ln86_1087_reg_1422;
wire   [0:0] icmp_ln86_1088_fu_512_p2;
reg   [0:0] icmp_ln86_1088_reg_1427;
wire   [0:0] icmp_ln86_1089_fu_518_p2;
reg   [0:0] icmp_ln86_1089_reg_1432;
wire   [0:0] icmp_ln86_1090_fu_524_p2;
reg   [0:0] icmp_ln86_1090_reg_1437;
wire   [0:0] icmp_ln86_1091_fu_530_p2;
reg   [0:0] icmp_ln86_1091_reg_1442;
wire   [3:0] select_ln117_1042_fu_858_p3;
reg   [3:0] select_ln117_1042_reg_1447;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln86_1065_fu_374_p2;
wire   [0:0] xor_ln104_504_fu_542_p2;
wire   [0:0] icmp_ln86_1067_fu_386_p2;
wire   [0:0] and_ln102_fu_536_p2;
wire   [0:0] xor_ln104_506_fu_560_p2;
wire   [0:0] icmp_ln86_1068_fu_392_p2;
wire   [0:0] and_ln104_fu_548_p2;
wire   [0:0] xor_ln104_507_fu_578_p2;
wire   [0:0] icmp_ln86_1071_fu_410_p2;
wire   [0:0] and_ln102_1307_fu_554_p2;
wire   [0:0] xor_ln104_510_fu_590_p2;
wire   [0:0] icmp_ln86_1072_fu_416_p2;
wire   [0:0] and_ln104_192_fu_566_p2;
wire   [0:0] icmp_ln86_1073_fu_422_p2;
wire   [0:0] and_ln102_1308_fu_572_p2;
wire   [0:0] icmp_ln86_1074_fu_428_p2;
wire   [0:0] and_ln104_193_fu_584_p2;
wire   [0:0] icmp_ln86_1079_fu_458_p2;
wire   [0:0] and_ln102_1318_fu_632_p2;
wire   [0:0] icmp_ln86_1080_fu_464_p2;
wire   [0:0] and_ln102_1311_fu_602_p2;
wire   [0:0] icmp_ln86_1081_fu_470_p2;
wire   [0:0] xor_ln104_511_fu_608_p2;
wire   [0:0] and_ln102_1321_fu_650_p2;
wire   [0:0] icmp_ln86_1082_fu_476_p2;
wire   [0:0] and_ln102_1313_fu_620_p2;
wire   [0:0] icmp_ln86_1083_fu_482_p2;
wire   [0:0] xor_ln104_512_fu_626_p2;
wire   [0:0] and_ln102_1324_fu_668_p2;
wire   [0:0] and_ln104_196_fu_596_p2;
wire   [0:0] and_ln102_1312_fu_614_p2;
wire   [0:0] xor_ln117_fu_686_p2;
wire   [0:0] or_ln117_937_fu_692_p2;
wire   [0:0] or_ln117_fu_680_p2;
wire   [1:0] zext_ln117_fu_698_p1;
wire   [0:0] or_ln117_938_fu_702_p2;
wire   [0:0] and_ln102_1319_fu_638_p2;
wire   [1:0] select_ln117_fu_708_p3;
wire   [1:0] select_ln117_1032_fu_722_p3;
wire   [0:0] or_ln117_939_fu_716_p2;
wire   [2:0] zext_ln117_112_fu_730_p1;
wire   [0:0] or_ln117_940_fu_734_p2;
wire   [0:0] and_ln102_1320_fu_644_p2;
wire   [2:0] select_ln117_1033_fu_740_p3;
wire   [0:0] or_ln117_941_fu_748_p2;
wire   [2:0] select_ln117_1034_fu_754_p3;
wire   [0:0] or_ln117_942_fu_762_p2;
wire   [0:0] and_ln102_1322_fu_656_p2;
wire   [2:0] select_ln117_1035_fu_768_p3;
wire   [2:0] select_ln117_1036_fu_782_p3;
wire   [0:0] or_ln117_943_fu_776_p2;
wire   [3:0] zext_ln117_113_fu_790_p1;
wire   [0:0] or_ln117_944_fu_794_p2;
wire   [0:0] and_ln102_1323_fu_662_p2;
wire   [3:0] select_ln117_1037_fu_800_p3;
wire   [0:0] or_ln117_945_fu_808_p2;
wire   [3:0] select_ln117_1038_fu_814_p3;
wire   [0:0] or_ln117_946_fu_822_p2;
wire   [0:0] and_ln102_1325_fu_674_p2;
wire   [3:0] select_ln117_1039_fu_828_p3;
wire   [0:0] or_ln117_947_fu_836_p2;
wire   [3:0] select_ln117_1040_fu_842_p3;
wire   [3:0] select_ln117_1041_fu_850_p3;
wire   [0:0] xor_ln104_fu_866_p2;
wire   [0:0] xor_ln104_505_fu_876_p2;
wire   [0:0] and_ln102_1306_fu_871_p2;
wire   [0:0] xor_ln104_508_fu_892_p2;
wire   [0:0] and_ln104_191_fu_881_p2;
wire   [0:0] xor_ln104_509_fu_908_p2;
wire   [0:0] and_ln102_1309_fu_887_p2;
wire   [0:0] and_ln104_194_fu_897_p2;
wire   [0:0] and_ln102_1310_fu_903_p2;
wire   [0:0] and_ln104_195_fu_913_p2;
wire   [0:0] and_ln102_1314_fu_919_p2;
wire   [0:0] xor_ln104_513_fu_924_p2;
wire   [0:0] and_ln102_1327_fu_964_p2;
wire   [0:0] and_ln102_1315_fu_929_p2;
wire   [0:0] xor_ln104_514_fu_934_p2;
wire   [0:0] and_ln102_1330_fu_980_p2;
wire   [0:0] and_ln102_1316_fu_939_p2;
wire   [0:0] xor_ln104_515_fu_944_p2;
wire   [0:0] and_ln102_1333_fu_996_p2;
wire   [0:0] and_ln102_1317_fu_949_p2;
wire   [0:0] xor_ln104_516_fu_954_p2;
wire   [0:0] and_ln102_1336_fu_1012_p2;
wire   [0:0] and_ln102_1326_fu_959_p2;
wire   [0:0] or_ln117_948_fu_1023_p2;
wire   [0:0] or_ln117_949_fu_1028_p2;
wire   [0:0] and_ln102_1328_fu_969_p2;
wire   [3:0] select_ln117_1043_fu_1033_p3;
wire   [3:0] select_ln117_1044_fu_1046_p3;
wire   [0:0] or_ln117_950_fu_1040_p2;
wire   [4:0] zext_ln117_114_fu_1054_p1;
wire   [0:0] or_ln117_951_fu_1058_p2;
wire   [0:0] and_ln102_1329_fu_975_p2;
wire   [4:0] select_ln117_1045_fu_1063_p3;
wire   [0:0] or_ln117_952_fu_1071_p2;
wire   [4:0] select_ln117_1046_fu_1077_p3;
wire   [0:0] or_ln117_953_fu_1085_p2;
wire   [0:0] and_ln102_1331_fu_985_p2;
wire   [4:0] select_ln117_1047_fu_1091_p3;
wire   [0:0] or_ln117_954_fu_1099_p2;
wire   [4:0] select_ln117_1048_fu_1105_p3;
wire   [0:0] or_ln117_955_fu_1113_p2;
wire   [0:0] and_ln102_1332_fu_991_p2;
wire   [4:0] select_ln117_1049_fu_1118_p3;
wire   [0:0] or_ln117_956_fu_1126_p2;
wire   [4:0] select_ln117_1050_fu_1132_p3;
wire   [0:0] or_ln117_957_fu_1140_p2;
wire   [0:0] and_ln102_1334_fu_1001_p2;
wire   [4:0] select_ln117_1051_fu_1146_p3;
wire   [0:0] or_ln117_958_fu_1154_p2;
wire   [4:0] select_ln117_1052_fu_1160_p3;
wire   [0:0] or_ln117_959_fu_1168_p2;
wire   [0:0] and_ln102_1335_fu_1007_p2;
wire   [4:0] select_ln117_1053_fu_1174_p3;
wire   [0:0] or_ln117_960_fu_1182_p2;
wire   [4:0] select_ln117_1054_fu_1188_p3;
wire   [0:0] or_ln117_961_fu_1196_p2;
wire   [0:0] and_ln102_1337_fu_1017_p2;
wire   [4:0] select_ln117_1055_fu_1202_p3;
wire   [0:0] or_ln117_962_fu_1210_p2;
wire   [4:0] select_ln117_1056_fu_1216_p3;
wire   [12:0] agg_result_fu_1232_p59;
wire   [4:0] agg_result_fu_1232_p60;
wire   [12:0] agg_result_fu_1232_p61;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1232_p1;
wire   [4:0] agg_result_fu_1232_p3;
wire   [4:0] agg_result_fu_1232_p5;
wire   [4:0] agg_result_fu_1232_p7;
wire   [4:0] agg_result_fu_1232_p9;
wire   [4:0] agg_result_fu_1232_p11;
wire   [4:0] agg_result_fu_1232_p13;
wire   [4:0] agg_result_fu_1232_p15;
wire   [4:0] agg_result_fu_1232_p17;
wire   [4:0] agg_result_fu_1232_p19;
wire   [4:0] agg_result_fu_1232_p21;
wire   [4:0] agg_result_fu_1232_p23;
wire   [4:0] agg_result_fu_1232_p25;
wire   [4:0] agg_result_fu_1232_p27;
wire   [4:0] agg_result_fu_1232_p29;
wire   [4:0] agg_result_fu_1232_p31;
wire  signed [4:0] agg_result_fu_1232_p33;
wire  signed [4:0] agg_result_fu_1232_p35;
wire  signed [4:0] agg_result_fu_1232_p37;
wire  signed [4:0] agg_result_fu_1232_p39;
wire  signed [4:0] agg_result_fu_1232_p41;
wire  signed [4:0] agg_result_fu_1232_p43;
wire  signed [4:0] agg_result_fu_1232_p45;
wire  signed [4:0] agg_result_fu_1232_p47;
wire  signed [4:0] agg_result_fu_1232_p49;
wire  signed [4:0] agg_result_fu_1232_p51;
wire  signed [4:0] agg_result_fu_1232_p53;
wire  signed [4:0] agg_result_fu_1232_p55;
wire  signed [4:0] agg_result_fu_1232_p57;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_59_5_13_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 13 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 13 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 13 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 13 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 13 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 13 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 13 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 13 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 13 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 13 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 13 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 13 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 13 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 13 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 13 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 13 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 13 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 13 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 13 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 13 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 13 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 13 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 13 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 13 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 13 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 13 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 13 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 13 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 13 ),
    .def_WIDTH( 13 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 13 ))
sparsemux_59_5_13_1_1_U863(
    .din0(13'd1660),
    .din1(13'd669),
    .din2(13'd5209),
    .din3(13'd409),
    .din4(13'd8191),
    .din5(13'd7937),
    .din6(13'd648),
    .din7(13'd59),
    .din8(13'd261),
    .din9(13'd8075),
    .din10(13'd438),
    .din11(13'd20),
    .din12(13'd7926),
    .din13(13'd0),
    .din14(13'd112),
    .din15(13'd7959),
    .din16(13'd428),
    .din17(13'd8120),
    .din18(13'd70),
    .din19(13'd8053),
    .din20(13'd7892),
    .din21(13'd88),
    .din22(13'd318),
    .din23(13'd51),
    .din24(13'd8109),
    .din25(13'd1132),
    .din26(13'd326),
    .din27(13'd7661),
    .din28(13'd40),
    .def(agg_result_fu_1232_p59),
    .sel(agg_result_fu_1232_p60),
    .dout(agg_result_fu_1232_p61)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_1066_reg_1365 <= icmp_ln86_1066_fu_380_p2;
        icmp_ln86_1069_reg_1371 <= icmp_ln86_1069_fu_398_p2;
        icmp_ln86_1070_reg_1377 <= icmp_ln86_1070_fu_404_p2;
        icmp_ln86_1075_reg_1383 <= icmp_ln86_1075_fu_434_p2;
        icmp_ln86_1076_reg_1389 <= icmp_ln86_1076_fu_440_p2;
        icmp_ln86_1077_reg_1395 <= icmp_ln86_1077_fu_446_p2;
        icmp_ln86_1078_reg_1401 <= icmp_ln86_1078_fu_452_p2;
        icmp_ln86_1084_reg_1407 <= icmp_ln86_1084_fu_488_p2;
        icmp_ln86_1085_reg_1412 <= icmp_ln86_1085_fu_494_p2;
        icmp_ln86_1086_reg_1417 <= icmp_ln86_1086_fu_500_p2;
        icmp_ln86_1087_reg_1422 <= icmp_ln86_1087_fu_506_p2;
        icmp_ln86_1088_reg_1427 <= icmp_ln86_1088_fu_512_p2;
        icmp_ln86_1089_reg_1432 <= icmp_ln86_1089_fu_518_p2;
        icmp_ln86_1090_reg_1437 <= icmp_ln86_1090_fu_524_p2;
        icmp_ln86_1091_reg_1442 <= icmp_ln86_1091_fu_530_p2;
        icmp_ln86_reg_1356 <= icmp_ln86_fu_368_p2;
        select_ln117_1042_reg_1447 <= select_ln117_1042_fu_858_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1232_p59 = 'bx;

assign agg_result_fu_1232_p60 = ((or_ln117_962_fu_1210_p2[0:0] == 1'b1) ? select_ln117_1056_fu_1216_p3 : 5'd28);

assign and_ln102_1306_fu_871_p2 = (xor_ln104_fu_866_p2 & icmp_ln86_1066_reg_1365);

assign and_ln102_1307_fu_554_p2 = (icmp_ln86_1067_fu_386_p2 & and_ln102_fu_536_p2);

assign and_ln102_1308_fu_572_p2 = (icmp_ln86_1068_fu_392_p2 & and_ln104_fu_548_p2);

assign and_ln102_1309_fu_887_p2 = (icmp_ln86_1069_reg_1371 & and_ln102_1306_fu_871_p2);

assign and_ln102_1310_fu_903_p2 = (icmp_ln86_1070_reg_1377 & and_ln104_191_fu_881_p2);

assign and_ln102_1311_fu_602_p2 = (icmp_ln86_1072_fu_416_p2 & and_ln104_192_fu_566_p2);

assign and_ln102_1312_fu_614_p2 = (icmp_ln86_1073_fu_422_p2 & and_ln102_1308_fu_572_p2);

assign and_ln102_1313_fu_620_p2 = (icmp_ln86_1074_fu_428_p2 & and_ln104_193_fu_584_p2);

assign and_ln102_1314_fu_919_p2 = (icmp_ln86_1075_reg_1383 & and_ln102_1309_fu_887_p2);

assign and_ln102_1315_fu_929_p2 = (icmp_ln86_1076_reg_1389 & and_ln104_194_fu_897_p2);

assign and_ln102_1316_fu_939_p2 = (icmp_ln86_1077_reg_1395 & and_ln102_1310_fu_903_p2);

assign and_ln102_1317_fu_949_p2 = (icmp_ln86_1078_reg_1401 & and_ln104_195_fu_913_p2);

assign and_ln102_1318_fu_632_p2 = (icmp_ln86_1079_fu_458_p2 & and_ln102_1307_fu_554_p2);

assign and_ln102_1319_fu_638_p2 = (icmp_ln86_1071_fu_410_p2 & and_ln102_1318_fu_632_p2);

assign and_ln102_1320_fu_644_p2 = (icmp_ln86_1080_fu_464_p2 & and_ln102_1311_fu_602_p2);

assign and_ln102_1321_fu_650_p2 = (xor_ln104_511_fu_608_p2 & icmp_ln86_1081_fu_470_p2);

assign and_ln102_1322_fu_656_p2 = (and_ln104_192_fu_566_p2 & and_ln102_1321_fu_650_p2);

assign and_ln102_1323_fu_662_p2 = (icmp_ln86_1082_fu_476_p2 & and_ln102_1313_fu_620_p2);

assign and_ln102_1324_fu_668_p2 = (xor_ln104_512_fu_626_p2 & icmp_ln86_1083_fu_482_p2);

assign and_ln102_1325_fu_674_p2 = (and_ln104_193_fu_584_p2 & and_ln102_1324_fu_668_p2);

assign and_ln102_1326_fu_959_p2 = (icmp_ln86_1084_reg_1407 & and_ln102_1314_fu_919_p2);

assign and_ln102_1327_fu_964_p2 = (xor_ln104_513_fu_924_p2 & icmp_ln86_1085_reg_1412);

assign and_ln102_1328_fu_969_p2 = (and_ln102_1327_fu_964_p2 & and_ln102_1309_fu_887_p2);

assign and_ln102_1329_fu_975_p2 = (icmp_ln86_1086_reg_1417 & and_ln102_1315_fu_929_p2);

assign and_ln102_1330_fu_980_p2 = (xor_ln104_514_fu_934_p2 & icmp_ln86_1087_reg_1422);

assign and_ln102_1331_fu_985_p2 = (and_ln104_194_fu_897_p2 & and_ln102_1330_fu_980_p2);

assign and_ln102_1332_fu_991_p2 = (icmp_ln86_1088_reg_1427 & and_ln102_1316_fu_939_p2);

assign and_ln102_1333_fu_996_p2 = (xor_ln104_515_fu_944_p2 & icmp_ln86_1089_reg_1432);

assign and_ln102_1334_fu_1001_p2 = (and_ln102_1333_fu_996_p2 & and_ln102_1310_fu_903_p2);

assign and_ln102_1335_fu_1007_p2 = (icmp_ln86_1090_reg_1437 & and_ln102_1317_fu_949_p2);

assign and_ln102_1336_fu_1012_p2 = (xor_ln104_516_fu_954_p2 & icmp_ln86_1091_reg_1442);

assign and_ln102_1337_fu_1017_p2 = (and_ln104_195_fu_913_p2 & and_ln102_1336_fu_1012_p2);

assign and_ln102_fu_536_p2 = (icmp_ln86_fu_368_p2 & icmp_ln86_1065_fu_374_p2);

assign and_ln104_191_fu_881_p2 = (xor_ln104_fu_866_p2 & xor_ln104_505_fu_876_p2);

assign and_ln104_192_fu_566_p2 = (xor_ln104_506_fu_560_p2 & and_ln102_fu_536_p2);

assign and_ln104_193_fu_584_p2 = (xor_ln104_507_fu_578_p2 & and_ln104_fu_548_p2);

assign and_ln104_194_fu_897_p2 = (xor_ln104_508_fu_892_p2 & and_ln102_1306_fu_871_p2);

assign and_ln104_195_fu_913_p2 = (xor_ln104_509_fu_908_p2 & and_ln104_191_fu_881_p2);

assign and_ln104_196_fu_596_p2 = (xor_ln104_510_fu_590_p2 & and_ln102_1307_fu_554_p2);

assign and_ln104_fu_548_p2 = (xor_ln104_504_fu_542_p2 & icmp_ln86_fu_368_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1232_p61;

assign icmp_ln86_1065_fu_374_p2 = (($signed(x_47_val) < $signed(18'd85541)) ? 1'b1 : 1'b0);

assign icmp_ln86_1066_fu_380_p2 = (($signed(x_2_val) < $signed(18'd770)) ? 1'b1 : 1'b0);

assign icmp_ln86_1067_fu_386_p2 = (($signed(x_7_val) < $signed(18'd4323)) ? 1'b1 : 1'b0);

assign icmp_ln86_1068_fu_392_p2 = (($signed(x_3_val) < $signed(18'd85769)) ? 1'b1 : 1'b0);

assign icmp_ln86_1069_fu_398_p2 = (($signed(x_52_val) < $signed(18'd41473)) ? 1'b1 : 1'b0);

assign icmp_ln86_1070_fu_404_p2 = (($signed(x_21_val) < $signed(18'd298)) ? 1'b1 : 1'b0);

assign icmp_ln86_1071_fu_410_p2 = (($signed(x_19_val) < $signed(18'd226502)) ? 1'b1 : 1'b0);

assign icmp_ln86_1072_fu_416_p2 = (($signed(x_3_val) < $signed(18'd74195)) ? 1'b1 : 1'b0);

assign icmp_ln86_1073_fu_422_p2 = (($signed(x_12_val) < $signed(18'd259129)) ? 1'b1 : 1'b0);

assign icmp_ln86_1074_fu_428_p2 = (($signed(x_7_val) < $signed(18'd6553)) ? 1'b1 : 1'b0);

assign icmp_ln86_1075_fu_434_p2 = (($signed(x_2_val) < $signed(18'd696)) ? 1'b1 : 1'b0);

assign icmp_ln86_1076_fu_440_p2 = (($signed(x_17_val) < $signed(18'd38)) ? 1'b1 : 1'b0);

assign icmp_ln86_1077_fu_446_p2 = (($signed(x_40_val) < $signed(18'd357)) ? 1'b1 : 1'b0);

assign icmp_ln86_1078_fu_452_p2 = (($signed(x_15_val) < $signed(18'd7)) ? 1'b1 : 1'b0);

assign icmp_ln86_1079_fu_458_p2 = (($signed(x_11_val) < $signed(18'd354)) ? 1'b1 : 1'b0);

assign icmp_ln86_1080_fu_464_p2 = (($signed(x_12_val) < $signed(18'd258997)) ? 1'b1 : 1'b0);

assign icmp_ln86_1081_fu_470_p2 = (($signed(x_47_val) < $signed(18'd79814)) ? 1'b1 : 1'b0);

assign icmp_ln86_1082_fu_476_p2 = (($signed(x_2_val) < $signed(18'd260821)) ? 1'b1 : 1'b0);

assign icmp_ln86_1083_fu_482_p2 = (($signed(x_39_val) < $signed(18'd1191)) ? 1'b1 : 1'b0);

assign icmp_ln86_1084_fu_488_p2 = (($signed(x_9_val) < $signed(18'd777)) ? 1'b1 : 1'b0);

assign icmp_ln86_1085_fu_494_p2 = (($signed(x_7_val) < $signed(18'd7118)) ? 1'b1 : 1'b0);

assign icmp_ln86_1086_fu_500_p2 = (($signed(x_8_val) < $signed(18'd2318)) ? 1'b1 : 1'b0);

assign icmp_ln86_1087_fu_506_p2 = (($signed(x_52_val) < $signed(18'd61953)) ? 1'b1 : 1'b0);

assign icmp_ln86_1088_fu_512_p2 = (($signed(x_6_val) < $signed(18'd9794)) ? 1'b1 : 1'b0);

assign icmp_ln86_1089_fu_518_p2 = (($signed(x_50_val) < $signed(18'd83280)) ? 1'b1 : 1'b0);

assign icmp_ln86_1090_fu_524_p2 = (($signed(x_13_val) < $signed(18'd442)) ? 1'b1 : 1'b0);

assign icmp_ln86_1091_fu_530_p2 = (($signed(x_5_val) < $signed(18'd50532)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_368_p2 = (($signed(x_2_val) < $signed(18'd261093)) ? 1'b1 : 1'b0);

assign or_ln117_937_fu_692_p2 = (xor_ln117_fu_686_p2 | icmp_ln86_1071_fu_410_p2);

assign or_ln117_938_fu_702_p2 = (and_ln104_196_fu_596_p2 | and_ln102_1308_fu_572_p2);

assign or_ln117_939_fu_716_p2 = (or_ln117_938_fu_702_p2 | and_ln102_1319_fu_638_p2);

assign or_ln117_940_fu_734_p2 = (and_ln102_1308_fu_572_p2 | and_ln102_1307_fu_554_p2);

assign or_ln117_941_fu_748_p2 = (or_ln117_940_fu_734_p2 | and_ln102_1320_fu_644_p2);

assign or_ln117_942_fu_762_p2 = (or_ln117_940_fu_734_p2 | and_ln102_1311_fu_602_p2);

assign or_ln117_943_fu_776_p2 = (or_ln117_942_fu_762_p2 | and_ln102_1322_fu_656_p2);

assign or_ln117_944_fu_794_p2 = (and_ln102_fu_536_p2 | and_ln102_1308_fu_572_p2);

assign or_ln117_945_fu_808_p2 = (or_ln117_944_fu_794_p2 | and_ln102_1323_fu_662_p2);

assign or_ln117_946_fu_822_p2 = (or_ln117_944_fu_794_p2 | and_ln102_1313_fu_620_p2);

assign or_ln117_947_fu_836_p2 = (or_ln117_946_fu_822_p2 | and_ln102_1325_fu_674_p2);

assign or_ln117_948_fu_1023_p2 = (icmp_ln86_reg_1356 | and_ln102_1326_fu_959_p2);

assign or_ln117_949_fu_1028_p2 = (icmp_ln86_reg_1356 | and_ln102_1314_fu_919_p2);

assign or_ln117_950_fu_1040_p2 = (or_ln117_949_fu_1028_p2 | and_ln102_1328_fu_969_p2);

assign or_ln117_951_fu_1058_p2 = (icmp_ln86_reg_1356 | and_ln102_1309_fu_887_p2);

assign or_ln117_952_fu_1071_p2 = (or_ln117_951_fu_1058_p2 | and_ln102_1329_fu_975_p2);

assign or_ln117_953_fu_1085_p2 = (or_ln117_951_fu_1058_p2 | and_ln102_1315_fu_929_p2);

assign or_ln117_954_fu_1099_p2 = (or_ln117_953_fu_1085_p2 | and_ln102_1331_fu_985_p2);

assign or_ln117_955_fu_1113_p2 = (icmp_ln86_reg_1356 | and_ln102_1306_fu_871_p2);

assign or_ln117_956_fu_1126_p2 = (or_ln117_955_fu_1113_p2 | and_ln102_1332_fu_991_p2);

assign or_ln117_957_fu_1140_p2 = (or_ln117_955_fu_1113_p2 | and_ln102_1316_fu_939_p2);

assign or_ln117_958_fu_1154_p2 = (or_ln117_957_fu_1140_p2 | and_ln102_1334_fu_1001_p2);

assign or_ln117_959_fu_1168_p2 = (or_ln117_955_fu_1113_p2 | and_ln102_1310_fu_903_p2);

assign or_ln117_960_fu_1182_p2 = (or_ln117_959_fu_1168_p2 | and_ln102_1335_fu_1007_p2);

assign or_ln117_961_fu_1196_p2 = (or_ln117_959_fu_1168_p2 | and_ln102_1317_fu_949_p2);

assign or_ln117_962_fu_1210_p2 = (or_ln117_961_fu_1196_p2 | and_ln102_1337_fu_1017_p2);

assign or_ln117_fu_680_p2 = (and_ln104_196_fu_596_p2 | and_ln102_1312_fu_614_p2);

assign select_ln117_1032_fu_722_p3 = ((or_ln117_938_fu_702_p2[0:0] == 1'b1) ? select_ln117_fu_708_p3 : 2'd3);

assign select_ln117_1033_fu_740_p3 = ((or_ln117_939_fu_716_p2[0:0] == 1'b1) ? zext_ln117_112_fu_730_p1 : 3'd4);

assign select_ln117_1034_fu_754_p3 = ((or_ln117_940_fu_734_p2[0:0] == 1'b1) ? select_ln117_1033_fu_740_p3 : 3'd5);

assign select_ln117_1035_fu_768_p3 = ((or_ln117_941_fu_748_p2[0:0] == 1'b1) ? select_ln117_1034_fu_754_p3 : 3'd6);

assign select_ln117_1036_fu_782_p3 = ((or_ln117_942_fu_762_p2[0:0] == 1'b1) ? select_ln117_1035_fu_768_p3 : 3'd7);

assign select_ln117_1037_fu_800_p3 = ((or_ln117_943_fu_776_p2[0:0] == 1'b1) ? zext_ln117_113_fu_790_p1 : 4'd8);

assign select_ln117_1038_fu_814_p3 = ((or_ln117_944_fu_794_p2[0:0] == 1'b1) ? select_ln117_1037_fu_800_p3 : 4'd9);

assign select_ln117_1039_fu_828_p3 = ((or_ln117_945_fu_808_p2[0:0] == 1'b1) ? select_ln117_1038_fu_814_p3 : 4'd10);

assign select_ln117_1040_fu_842_p3 = ((or_ln117_946_fu_822_p2[0:0] == 1'b1) ? select_ln117_1039_fu_828_p3 : 4'd11);

assign select_ln117_1041_fu_850_p3 = ((or_ln117_947_fu_836_p2[0:0] == 1'b1) ? select_ln117_1040_fu_842_p3 : 4'd12);

assign select_ln117_1042_fu_858_p3 = ((icmp_ln86_fu_368_p2[0:0] == 1'b1) ? select_ln117_1041_fu_850_p3 : 4'd13);

assign select_ln117_1043_fu_1033_p3 = ((or_ln117_948_fu_1023_p2[0:0] == 1'b1) ? select_ln117_1042_reg_1447 : 4'd14);

assign select_ln117_1044_fu_1046_p3 = ((or_ln117_949_fu_1028_p2[0:0] == 1'b1) ? select_ln117_1043_fu_1033_p3 : 4'd15);

assign select_ln117_1045_fu_1063_p3 = ((or_ln117_950_fu_1040_p2[0:0] == 1'b1) ? zext_ln117_114_fu_1054_p1 : 5'd16);

assign select_ln117_1046_fu_1077_p3 = ((or_ln117_951_fu_1058_p2[0:0] == 1'b1) ? select_ln117_1045_fu_1063_p3 : 5'd17);

assign select_ln117_1047_fu_1091_p3 = ((or_ln117_952_fu_1071_p2[0:0] == 1'b1) ? select_ln117_1046_fu_1077_p3 : 5'd18);

assign select_ln117_1048_fu_1105_p3 = ((or_ln117_953_fu_1085_p2[0:0] == 1'b1) ? select_ln117_1047_fu_1091_p3 : 5'd19);

assign select_ln117_1049_fu_1118_p3 = ((or_ln117_954_fu_1099_p2[0:0] == 1'b1) ? select_ln117_1048_fu_1105_p3 : 5'd20);

assign select_ln117_1050_fu_1132_p3 = ((or_ln117_955_fu_1113_p2[0:0] == 1'b1) ? select_ln117_1049_fu_1118_p3 : 5'd21);

assign select_ln117_1051_fu_1146_p3 = ((or_ln117_956_fu_1126_p2[0:0] == 1'b1) ? select_ln117_1050_fu_1132_p3 : 5'd22);

assign select_ln117_1052_fu_1160_p3 = ((or_ln117_957_fu_1140_p2[0:0] == 1'b1) ? select_ln117_1051_fu_1146_p3 : 5'd23);

assign select_ln117_1053_fu_1174_p3 = ((or_ln117_958_fu_1154_p2[0:0] == 1'b1) ? select_ln117_1052_fu_1160_p3 : 5'd24);

assign select_ln117_1054_fu_1188_p3 = ((or_ln117_959_fu_1168_p2[0:0] == 1'b1) ? select_ln117_1053_fu_1174_p3 : 5'd25);

assign select_ln117_1055_fu_1202_p3 = ((or_ln117_960_fu_1182_p2[0:0] == 1'b1) ? select_ln117_1054_fu_1188_p3 : 5'd26);

assign select_ln117_1056_fu_1216_p3 = ((or_ln117_961_fu_1196_p2[0:0] == 1'b1) ? select_ln117_1055_fu_1202_p3 : 5'd27);

assign select_ln117_fu_708_p3 = ((or_ln117_fu_680_p2[0:0] == 1'b1) ? zext_ln117_fu_698_p1 : 2'd2);

assign xor_ln104_504_fu_542_p2 = (icmp_ln86_1065_fu_374_p2 ^ 1'd1);

assign xor_ln104_505_fu_876_p2 = (icmp_ln86_1066_reg_1365 ^ 1'd1);

assign xor_ln104_506_fu_560_p2 = (icmp_ln86_1067_fu_386_p2 ^ 1'd1);

assign xor_ln104_507_fu_578_p2 = (icmp_ln86_1068_fu_392_p2 ^ 1'd1);

assign xor_ln104_508_fu_892_p2 = (icmp_ln86_1069_reg_1371 ^ 1'd1);

assign xor_ln104_509_fu_908_p2 = (icmp_ln86_1070_reg_1377 ^ 1'd1);

assign xor_ln104_510_fu_590_p2 = (icmp_ln86_1071_fu_410_p2 ^ 1'd1);

assign xor_ln104_511_fu_608_p2 = (icmp_ln86_1072_fu_416_p2 ^ 1'd1);

assign xor_ln104_512_fu_626_p2 = (icmp_ln86_1074_fu_428_p2 ^ 1'd1);

assign xor_ln104_513_fu_924_p2 = (icmp_ln86_1075_reg_1383 ^ 1'd1);

assign xor_ln104_514_fu_934_p2 = (icmp_ln86_1076_reg_1389 ^ 1'd1);

assign xor_ln104_515_fu_944_p2 = (icmp_ln86_1077_reg_1395 ^ 1'd1);

assign xor_ln104_516_fu_954_p2 = (icmp_ln86_1078_reg_1401 ^ 1'd1);

assign xor_ln104_fu_866_p2 = (icmp_ln86_reg_1356 ^ 1'd1);

assign xor_ln117_fu_686_p2 = (1'd1 ^ and_ln102_1307_fu_554_p2);

assign zext_ln117_112_fu_730_p1 = select_ln117_1032_fu_722_p3;

assign zext_ln117_113_fu_790_p1 = select_ln117_1036_fu_782_p3;

assign zext_ln117_114_fu_1054_p1 = select_ln117_1044_fu_1046_p3;

assign zext_ln117_fu_698_p1 = or_ln117_937_fu_692_p2;

endmodule //my_prj_decision_function_62
