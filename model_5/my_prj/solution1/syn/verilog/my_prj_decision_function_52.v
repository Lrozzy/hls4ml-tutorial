// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_52 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_2_val,
        x_3_val,
        x_9_val,
        x_11_val,
        x_15_val,
        x_16_val,
        x_17_val,
        x_25_val,
        x_28_val,
        x_32_val,
        x_33_val,
        x_34_val,
        x_38_val,
        x_40_val,
        x_42_val,
        x_44_val,
        x_45_val,
        x_46_val,
        x_48_val,
        x_49_val,
        x_51_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_2_val;
input  [17:0] x_3_val;
input  [17:0] x_9_val;
input  [17:0] x_11_val;
input  [17:0] x_15_val;
input  [17:0] x_16_val;
input  [17:0] x_17_val;
input  [17:0] x_25_val;
input  [17:0] x_28_val;
input  [17:0] x_32_val;
input  [17:0] x_33_val;
input  [17:0] x_34_val;
input  [17:0] x_38_val;
input  [17:0] x_40_val;
input  [17:0] x_42_val;
input  [17:0] x_44_val;
input  [17:0] x_45_val;
input  [17:0] x_46_val;
input  [17:0] x_48_val;
input  [17:0] x_49_val;
input  [17:0] x_51_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_406_p2;
reg   [0:0] icmp_ln86_reg_1468;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_1356_fu_418_p2;
reg   [0:0] icmp_ln86_1356_reg_1477;
wire   [0:0] icmp_ln86_1358_fu_438_p2;
reg   [0:0] icmp_ln86_1358_reg_1483;
wire   [0:0] icmp_ln86_1359_fu_444_p2;
reg   [0:0] icmp_ln86_1359_reg_1489;
wire   [0:0] icmp_ln86_1364_fu_474_p2;
reg   [0:0] icmp_ln86_1364_reg_1495;
wire   [0:0] icmp_ln86_1365_fu_480_p2;
reg   [0:0] icmp_ln86_1365_reg_1501;
wire   [0:0] icmp_ln86_1366_fu_486_p2;
reg   [0:0] icmp_ln86_1366_reg_1507;
wire   [0:0] icmp_ln86_1367_fu_492_p2;
reg   [0:0] icmp_ln86_1367_reg_1513;
wire   [0:0] icmp_ln86_1375_fu_540_p2;
reg   [0:0] icmp_ln86_1375_reg_1519;
wire   [0:0] icmp_ln86_1376_fu_546_p2;
reg   [0:0] icmp_ln86_1376_reg_1524;
wire   [0:0] icmp_ln86_1377_fu_552_p2;
reg   [0:0] icmp_ln86_1377_reg_1529;
wire   [0:0] icmp_ln86_1378_fu_558_p2;
reg   [0:0] icmp_ln86_1378_reg_1534;
wire   [0:0] icmp_ln86_1379_fu_564_p2;
reg   [0:0] icmp_ln86_1379_reg_1539;
wire   [0:0] icmp_ln86_1380_fu_570_p2;
reg   [0:0] icmp_ln86_1380_reg_1544;
wire   [0:0] icmp_ln86_1381_fu_576_p2;
reg   [0:0] icmp_ln86_1381_reg_1549;
wire   [0:0] icmp_ln86_1382_fu_582_p2;
reg   [0:0] icmp_ln86_1382_reg_1554;
wire   [3:0] select_ln117_1323_fu_962_p3;
reg   [3:0] select_ln117_1323_reg_1559;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln86_1355_fu_412_p2;
wire   [0:0] xor_ln104_641_fu_594_p2;
wire   [0:0] tmp_fu_424_p3;
wire   [0:0] and_ln102_fu_588_p2;
wire   [0:0] xor_ln104_643_fu_612_p2;
wire   [0:0] icmp_ln86_1357_fu_432_p2;
wire   [0:0] and_ln104_fu_600_p2;
wire   [0:0] xor_ln104_644_fu_630_p2;
wire   [0:0] icmp_ln86_1360_fu_450_p2;
wire   [0:0] and_ln102_1332_fu_606_p2;
wire   [0:0] icmp_ln86_1361_fu_456_p2;
wire   [0:0] and_ln104_245_fu_618_p2;
wire   [0:0] xor_ln104_648_fu_654_p2;
wire   [0:0] icmp_ln86_1362_fu_462_p2;
wire   [0:0] and_ln102_1333_fu_624_p2;
wire   [0:0] icmp_ln86_1363_fu_468_p2;
wire   [0:0] and_ln104_246_fu_636_p2;
wire   [0:0] icmp_ln86_1368_fu_498_p2;
wire   [0:0] and_ln102_1336_fu_642_p2;
wire   [0:0] icmp_ln86_1369_fu_504_p2;
wire   [0:0] xor_ln104_647_fu_648_p2;
wire   [0:0] and_ln102_1344_fu_696_p2;
wire   [0:0] icmp_ln86_1370_fu_510_p2;
wire   [0:0] and_ln102_1359_fu_708_p2;
wire   [0:0] icmp_ln86_1371_fu_516_p2;
wire   [0:0] and_ln102_1337_fu_666_p2;
wire   [0:0] icmp_ln86_1372_fu_522_p2;
wire   [0:0] xor_ln104_649_fu_672_p2;
wire   [0:0] and_ln102_1360_fu_726_p2;
wire   [0:0] icmp_ln86_1373_fu_528_p2;
wire   [0:0] and_ln102_1338_fu_678_p2;
wire   [0:0] icmp_ln86_1374_fu_534_p2;
wire   [0:0] xor_ln104_650_fu_684_p2;
wire   [0:0] and_ln102_1361_fu_744_p2;
wire   [0:0] and_ln104_249_fu_660_p2;
wire   [0:0] and_ln102_1343_fu_690_p2;
wire   [0:0] xor_ln117_fu_762_p2;
wire   [0:0] or_ln117_1197_fu_768_p2;
wire   [0:0] or_ln117_1198_fu_774_p2;
wire   [0:0] or_ln117_fu_756_p2;
wire   [1:0] zext_ln117_fu_780_p1;
wire   [0:0] or_ln117_1199_fu_784_p2;
wire   [0:0] and_ln102_1345_fu_702_p2;
wire   [1:0] select_ln117_fu_790_p3;
wire   [1:0] select_ln117_1311_fu_804_p3;
wire   [0:0] or_ln117_1200_fu_798_p2;
wire   [2:0] zext_ln117_142_fu_812_p1;
wire   [0:0] or_ln117_1201_fu_816_p2;
wire   [0:0] and_ln102_1346_fu_714_p2;
wire   [2:0] select_ln117_1312_fu_822_p3;
wire   [0:0] or_ln117_1202_fu_830_p2;
wire   [2:0] select_ln117_1313_fu_836_p3;
wire   [0:0] and_ln102_1347_fu_720_p2;
wire   [2:0] select_ln117_1314_fu_844_p3;
wire   [2:0] select_ln117_1315_fu_858_p3;
wire   [0:0] or_ln117_1203_fu_852_p2;
wire   [3:0] zext_ln117_143_fu_866_p1;
wire   [0:0] or_ln117_1204_fu_870_p2;
wire   [0:0] and_ln102_1348_fu_732_p2;
wire   [3:0] select_ln117_1316_fu_876_p3;
wire   [0:0] or_ln117_1205_fu_884_p2;
wire   [3:0] select_ln117_1317_fu_890_p3;
wire   [0:0] or_ln117_1206_fu_898_p2;
wire   [0:0] and_ln102_1349_fu_738_p2;
wire   [3:0] select_ln117_1318_fu_904_p3;
wire   [0:0] or_ln117_1207_fu_912_p2;
wire   [3:0] select_ln117_1319_fu_918_p3;
wire   [0:0] or_ln117_1208_fu_926_p2;
wire   [0:0] and_ln102_1350_fu_750_p2;
wire   [3:0] select_ln117_1320_fu_932_p3;
wire   [0:0] or_ln117_1209_fu_940_p2;
wire   [3:0] select_ln117_1321_fu_946_p3;
wire   [3:0] select_ln117_1322_fu_954_p3;
wire   [0:0] xor_ln104_fu_970_p2;
wire   [0:0] xor_ln104_642_fu_980_p2;
wire   [0:0] and_ln102_1331_fu_975_p2;
wire   [0:0] xor_ln104_645_fu_996_p2;
wire   [0:0] and_ln104_244_fu_985_p2;
wire   [0:0] xor_ln104_646_fu_1012_p2;
wire   [0:0] and_ln102_1334_fu_991_p2;
wire   [0:0] and_ln104_247_fu_1001_p2;
wire   [0:0] and_ln102_1335_fu_1007_p2;
wire   [0:0] and_ln104_248_fu_1017_p2;
wire   [0:0] and_ln102_1339_fu_1023_p2;
wire   [0:0] xor_ln104_651_fu_1028_p2;
wire   [0:0] and_ln102_1362_fu_1068_p2;
wire   [0:0] and_ln102_1340_fu_1033_p2;
wire   [0:0] xor_ln104_652_fu_1038_p2;
wire   [0:0] and_ln102_1363_fu_1084_p2;
wire   [0:0] and_ln102_1341_fu_1043_p2;
wire   [0:0] xor_ln104_653_fu_1048_p2;
wire   [0:0] and_ln102_1364_fu_1100_p2;
wire   [0:0] and_ln102_1342_fu_1053_p2;
wire   [0:0] xor_ln104_654_fu_1058_p2;
wire   [0:0] and_ln102_1365_fu_1116_p2;
wire   [0:0] and_ln102_1351_fu_1063_p2;
wire   [0:0] or_ln117_1210_fu_1127_p2;
wire   [4:0] zext_ln117_144_fu_1132_p1;
wire   [0:0] or_ln117_1211_fu_1135_p2;
wire   [0:0] and_ln102_1352_fu_1073_p2;
wire   [4:0] select_ln117_1324_fu_1140_p3;
wire   [0:0] or_ln117_1212_fu_1148_p2;
wire   [4:0] select_ln117_1325_fu_1154_p3;
wire   [0:0] or_ln117_1213_fu_1162_p2;
wire   [0:0] and_ln102_1353_fu_1079_p2;
wire   [4:0] select_ln117_1326_fu_1167_p3;
wire   [0:0] or_ln117_1214_fu_1175_p2;
wire   [4:0] select_ln117_1327_fu_1181_p3;
wire   [0:0] or_ln117_1215_fu_1189_p2;
wire   [0:0] and_ln102_1354_fu_1089_p2;
wire   [4:0] select_ln117_1328_fu_1195_p3;
wire   [0:0] or_ln117_1216_fu_1203_p2;
wire   [4:0] select_ln117_1329_fu_1209_p3;
wire   [0:0] or_ln117_1217_fu_1217_p2;
wire   [0:0] and_ln102_1355_fu_1095_p2;
wire   [4:0] select_ln117_1330_fu_1222_p3;
wire   [0:0] or_ln117_1218_fu_1230_p2;
wire   [4:0] select_ln117_1331_fu_1236_p3;
wire   [0:0] or_ln117_1219_fu_1244_p2;
wire   [0:0] and_ln102_1356_fu_1105_p2;
wire   [4:0] select_ln117_1332_fu_1250_p3;
wire   [0:0] or_ln117_1220_fu_1258_p2;
wire   [4:0] select_ln117_1333_fu_1264_p3;
wire   [0:0] or_ln117_1221_fu_1272_p2;
wire   [0:0] and_ln102_1357_fu_1111_p2;
wire   [4:0] select_ln117_1334_fu_1278_p3;
wire   [0:0] or_ln117_1222_fu_1286_p2;
wire   [4:0] select_ln117_1335_fu_1292_p3;
wire   [0:0] or_ln117_1223_fu_1300_p2;
wire   [0:0] and_ln102_1358_fu_1121_p2;
wire   [4:0] select_ln117_1336_fu_1306_p3;
wire   [0:0] or_ln117_1224_fu_1314_p2;
wire   [4:0] select_ln117_1337_fu_1320_p3;
wire   [11:0] agg_result_fu_1336_p63;
wire   [4:0] agg_result_fu_1336_p64;
wire   [11:0] agg_result_fu_1336_p65;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1336_p1;
wire   [4:0] agg_result_fu_1336_p3;
wire   [4:0] agg_result_fu_1336_p5;
wire   [4:0] agg_result_fu_1336_p7;
wire   [4:0] agg_result_fu_1336_p9;
wire   [4:0] agg_result_fu_1336_p11;
wire   [4:0] agg_result_fu_1336_p13;
wire   [4:0] agg_result_fu_1336_p15;
wire   [4:0] agg_result_fu_1336_p17;
wire   [4:0] agg_result_fu_1336_p19;
wire   [4:0] agg_result_fu_1336_p21;
wire   [4:0] agg_result_fu_1336_p23;
wire   [4:0] agg_result_fu_1336_p25;
wire   [4:0] agg_result_fu_1336_p27;
wire   [4:0] agg_result_fu_1336_p29;
wire   [4:0] agg_result_fu_1336_p31;
wire  signed [4:0] agg_result_fu_1336_p33;
wire  signed [4:0] agg_result_fu_1336_p35;
wire  signed [4:0] agg_result_fu_1336_p37;
wire  signed [4:0] agg_result_fu_1336_p39;
wire  signed [4:0] agg_result_fu_1336_p41;
wire  signed [4:0] agg_result_fu_1336_p43;
wire  signed [4:0] agg_result_fu_1336_p45;
wire  signed [4:0] agg_result_fu_1336_p47;
wire  signed [4:0] agg_result_fu_1336_p49;
wire  signed [4:0] agg_result_fu_1336_p51;
wire  signed [4:0] agg_result_fu_1336_p53;
wire  signed [4:0] agg_result_fu_1336_p55;
wire  signed [4:0] agg_result_fu_1336_p57;
wire  signed [4:0] agg_result_fu_1336_p59;
wire  signed [4:0] agg_result_fu_1336_p61;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_63_5_12_1_1_x0 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 12 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 12 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 12 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_63_5_12_1_1_x0_U1067(
    .din0(12'd1691),
    .din1(12'd685),
    .din2(12'd120),
    .din3(12'd313),
    .din4(12'd3513),
    .din5(12'd77),
    .din6(12'd4068),
    .din7(12'd426),
    .din8(12'd1142),
    .din9(12'd292),
    .din10(12'd3368),
    .din11(12'd492),
    .din12(12'd3560),
    .din13(12'd2736),
    .din14(12'd3944),
    .din15(12'd365),
    .din16(12'd2847),
    .din17(12'd7),
    .din18(12'd3987),
    .din19(12'd797),
    .din20(12'd4048),
    .din21(12'd21),
    .din22(12'd408),
    .din23(12'd62),
    .din24(12'd288),
    .din25(12'd4076),
    .din26(12'd43),
    .din27(12'd3511),
    .din28(12'd105),
    .din29(12'd3903),
    .din30(12'd4056),
    .def(agg_result_fu_1336_p63),
    .sel(agg_result_fu_1336_p64),
    .dout(agg_result_fu_1336_p65)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_1356_reg_1477 <= icmp_ln86_1356_fu_418_p2;
        icmp_ln86_1358_reg_1483 <= icmp_ln86_1358_fu_438_p2;
        icmp_ln86_1359_reg_1489 <= icmp_ln86_1359_fu_444_p2;
        icmp_ln86_1364_reg_1495 <= icmp_ln86_1364_fu_474_p2;
        icmp_ln86_1365_reg_1501 <= icmp_ln86_1365_fu_480_p2;
        icmp_ln86_1366_reg_1507 <= icmp_ln86_1366_fu_486_p2;
        icmp_ln86_1367_reg_1513 <= icmp_ln86_1367_fu_492_p2;
        icmp_ln86_1375_reg_1519 <= icmp_ln86_1375_fu_540_p2;
        icmp_ln86_1376_reg_1524 <= icmp_ln86_1376_fu_546_p2;
        icmp_ln86_1377_reg_1529 <= icmp_ln86_1377_fu_552_p2;
        icmp_ln86_1378_reg_1534 <= icmp_ln86_1378_fu_558_p2;
        icmp_ln86_1379_reg_1539 <= icmp_ln86_1379_fu_564_p2;
        icmp_ln86_1380_reg_1544 <= icmp_ln86_1380_fu_570_p2;
        icmp_ln86_1381_reg_1549 <= icmp_ln86_1381_fu_576_p2;
        icmp_ln86_1382_reg_1554 <= icmp_ln86_1382_fu_582_p2;
        icmp_ln86_reg_1468 <= icmp_ln86_fu_406_p2;
        select_ln117_1323_reg_1559 <= select_ln117_1323_fu_962_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1336_p63 = 'bx;

assign agg_result_fu_1336_p64 = ((or_ln117_1224_fu_1314_p2[0:0] == 1'b1) ? select_ln117_1337_fu_1320_p3 : 5'd30);

assign and_ln102_1331_fu_975_p2 = (xor_ln104_fu_970_p2 & icmp_ln86_1356_reg_1477);

assign and_ln102_1332_fu_606_p2 = (tmp_fu_424_p3 & and_ln102_fu_588_p2);

assign and_ln102_1333_fu_624_p2 = (icmp_ln86_1357_fu_432_p2 & and_ln104_fu_600_p2);

assign and_ln102_1334_fu_991_p2 = (icmp_ln86_1358_reg_1483 & and_ln102_1331_fu_975_p2);

assign and_ln102_1335_fu_1007_p2 = (icmp_ln86_1359_reg_1489 & and_ln104_244_fu_985_p2);

assign and_ln102_1336_fu_642_p2 = (icmp_ln86_1360_fu_450_p2 & and_ln102_1332_fu_606_p2);

assign and_ln102_1337_fu_666_p2 = (icmp_ln86_1362_fu_462_p2 & and_ln102_1333_fu_624_p2);

assign and_ln102_1338_fu_678_p2 = (icmp_ln86_1363_fu_468_p2 & and_ln104_246_fu_636_p2);

assign and_ln102_1339_fu_1023_p2 = (icmp_ln86_1364_reg_1495 & and_ln102_1334_fu_991_p2);

assign and_ln102_1340_fu_1033_p2 = (icmp_ln86_1365_reg_1501 & and_ln104_247_fu_1001_p2);

assign and_ln102_1341_fu_1043_p2 = (icmp_ln86_1366_reg_1507 & and_ln102_1335_fu_1007_p2);

assign and_ln102_1342_fu_1053_p2 = (icmp_ln86_1367_reg_1513 & and_ln104_248_fu_1017_p2);

assign and_ln102_1343_fu_690_p2 = (icmp_ln86_1368_fu_498_p2 & and_ln102_1336_fu_642_p2);

assign and_ln102_1344_fu_696_p2 = (xor_ln104_647_fu_648_p2 & icmp_ln86_1369_fu_504_p2);

assign and_ln102_1345_fu_702_p2 = (and_ln102_1344_fu_696_p2 & and_ln102_1332_fu_606_p2);

assign and_ln102_1346_fu_714_p2 = (icmp_ln86_1361_fu_456_p2 & and_ln102_1359_fu_708_p2);

assign and_ln102_1347_fu_720_p2 = (icmp_ln86_1371_fu_516_p2 & and_ln102_1337_fu_666_p2);

assign and_ln102_1348_fu_732_p2 = (and_ln102_1360_fu_726_p2 & and_ln102_1333_fu_624_p2);

assign and_ln102_1349_fu_738_p2 = (icmp_ln86_1373_fu_528_p2 & and_ln102_1338_fu_678_p2);

assign and_ln102_1350_fu_750_p2 = (and_ln104_246_fu_636_p2 & and_ln102_1361_fu_744_p2);

assign and_ln102_1351_fu_1063_p2 = (icmp_ln86_1375_reg_1519 & and_ln102_1339_fu_1023_p2);

assign and_ln102_1352_fu_1073_p2 = (and_ln102_1362_fu_1068_p2 & and_ln102_1334_fu_991_p2);

assign and_ln102_1353_fu_1079_p2 = (icmp_ln86_1377_reg_1529 & and_ln102_1340_fu_1033_p2);

assign and_ln102_1354_fu_1089_p2 = (and_ln104_247_fu_1001_p2 & and_ln102_1363_fu_1084_p2);

assign and_ln102_1355_fu_1095_p2 = (icmp_ln86_1379_reg_1539 & and_ln102_1341_fu_1043_p2);

assign and_ln102_1356_fu_1105_p2 = (and_ln102_1364_fu_1100_p2 & and_ln102_1335_fu_1007_p2);

assign and_ln102_1357_fu_1111_p2 = (icmp_ln86_1381_reg_1549 & and_ln102_1342_fu_1053_p2);

assign and_ln102_1358_fu_1121_p2 = (and_ln104_248_fu_1017_p2 & and_ln102_1365_fu_1116_p2);

assign and_ln102_1359_fu_708_p2 = (icmp_ln86_1370_fu_510_p2 & and_ln104_245_fu_618_p2);

assign and_ln102_1360_fu_726_p2 = (xor_ln104_649_fu_672_p2 & icmp_ln86_1372_fu_522_p2);

assign and_ln102_1361_fu_744_p2 = (xor_ln104_650_fu_684_p2 & icmp_ln86_1374_fu_534_p2);

assign and_ln102_1362_fu_1068_p2 = (xor_ln104_651_fu_1028_p2 & icmp_ln86_1376_reg_1524);

assign and_ln102_1363_fu_1084_p2 = (xor_ln104_652_fu_1038_p2 & icmp_ln86_1378_reg_1534);

assign and_ln102_1364_fu_1100_p2 = (xor_ln104_653_fu_1048_p2 & icmp_ln86_1380_reg_1544);

assign and_ln102_1365_fu_1116_p2 = (xor_ln104_654_fu_1058_p2 & icmp_ln86_1382_reg_1554);

assign and_ln102_fu_588_p2 = (icmp_ln86_fu_406_p2 & icmp_ln86_1355_fu_412_p2);

assign and_ln104_244_fu_985_p2 = (xor_ln104_fu_970_p2 & xor_ln104_642_fu_980_p2);

assign and_ln104_245_fu_618_p2 = (xor_ln104_643_fu_612_p2 & and_ln102_fu_588_p2);

assign and_ln104_246_fu_636_p2 = (xor_ln104_644_fu_630_p2 & and_ln104_fu_600_p2);

assign and_ln104_247_fu_1001_p2 = (xor_ln104_645_fu_996_p2 & and_ln102_1331_fu_975_p2);

assign and_ln104_248_fu_1017_p2 = (xor_ln104_646_fu_1012_p2 & and_ln104_244_fu_985_p2);

assign and_ln104_249_fu_660_p2 = (xor_ln104_648_fu_654_p2 & and_ln104_245_fu_618_p2);

assign and_ln104_fu_600_p2 = (xor_ln104_641_fu_594_p2 & icmp_ln86_fu_406_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1336_p65;

assign icmp_ln86_1355_fu_412_p2 = (($signed(x_25_val) < $signed(18'd373)) ? 1'b1 : 1'b0);

assign icmp_ln86_1356_fu_418_p2 = (($signed(x_2_val) < $signed(18'd520)) ? 1'b1 : 1'b0);

assign icmp_ln86_1357_fu_432_p2 = (($signed(x_25_val) < $signed(18'd387)) ? 1'b1 : 1'b0);

assign icmp_ln86_1358_fu_438_p2 = (($signed(x_2_val) < $signed(18'd261940)) ? 1'b1 : 1'b0);

assign icmp_ln86_1359_fu_444_p2 = (($signed(x_33_val) < $signed(18'd815)) ? 1'b1 : 1'b0);

assign icmp_ln86_1360_fu_450_p2 = (($signed(x_2_val) < $signed(18'd260683)) ? 1'b1 : 1'b0);

assign icmp_ln86_1361_fu_456_p2 = (($signed(x_2_val) < $signed(18'd260842)) ? 1'b1 : 1'b0);

assign icmp_ln86_1362_fu_462_p2 = (($signed(x_48_val) < $signed(18'd23002)) ? 1'b1 : 1'b0);

assign icmp_ln86_1363_fu_468_p2 = (($signed(x_46_val) < $signed(18'd206)) ? 1'b1 : 1'b0);

assign icmp_ln86_1364_fu_474_p2 = (($signed(x_42_val) < $signed(18'd10)) ? 1'b1 : 1'b0);

assign icmp_ln86_1365_fu_480_p2 = (($signed(x_32_val) < $signed(18'd869)) ? 1'b1 : 1'b0);

assign icmp_ln86_1366_fu_486_p2 = (($signed(x_17_val) < $signed(18'd15)) ? 1'b1 : 1'b0);

assign icmp_ln86_1367_fu_492_p2 = (($signed(x_40_val) < $signed(18'd521)) ? 1'b1 : 1'b0);

assign icmp_ln86_1368_fu_498_p2 = (($signed(x_34_val) < $signed(18'd429)) ? 1'b1 : 1'b0);

assign icmp_ln86_1369_fu_504_p2 = (($signed(x_3_val) < $signed(18'd48529)) ? 1'b1 : 1'b0);

assign icmp_ln86_1370_fu_510_p2 = (($signed(x_1_val) < $signed(18'd255953)) ? 1'b1 : 1'b0);

assign icmp_ln86_1371_fu_516_p2 = (($signed(x_49_val) < $signed(18'd18609)) ? 1'b1 : 1'b0);

assign icmp_ln86_1372_fu_522_p2 = (($signed(x_1_val) < $signed(18'd246581)) ? 1'b1 : 1'b0);

assign icmp_ln86_1373_fu_528_p2 = (($signed(x_11_val) < $signed(18'd978)) ? 1'b1 : 1'b0);

assign icmp_ln86_1374_fu_534_p2 = (($signed(x_42_val) < $signed(18'd243)) ? 1'b1 : 1'b0);

assign icmp_ln86_1375_fu_540_p2 = (($signed(x_16_val) < $signed(18'd86)) ? 1'b1 : 1'b0);

assign icmp_ln86_1376_fu_546_p2 = (($signed(x_38_val) < $signed(18'd27)) ? 1'b1 : 1'b0);

assign icmp_ln86_1377_fu_552_p2 = (($signed(x_42_val) < $signed(18'd14)) ? 1'b1 : 1'b0);

assign icmp_ln86_1378_fu_558_p2 = (($signed(x_15_val) < $signed(18'd25)) ? 1'b1 : 1'b0);

assign icmp_ln86_1379_fu_564_p2 = (($signed(x_9_val) < $signed(18'd1285)) ? 1'b1 : 1'b0);

assign icmp_ln86_1380_fu_570_p2 = (($signed(x_44_val) < $signed(18'd49)) ? 1'b1 : 1'b0);

assign icmp_ln86_1381_fu_576_p2 = (($signed(x_28_val) < $signed(18'd4874)) ? 1'b1 : 1'b0);

assign icmp_ln86_1382_fu_582_p2 = (($signed(x_45_val) < $signed(18'd266)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_406_p2 = (($signed(x_2_val) < $signed(18'd260843)) ? 1'b1 : 1'b0);

assign or_ln117_1197_fu_768_p2 = (xor_ln117_fu_762_p2 | tmp_fu_424_p3);

assign or_ln117_1198_fu_774_p2 = (or_ln117_1197_fu_768_p2 | icmp_ln86_1361_fu_456_p2);

assign or_ln117_1199_fu_784_p2 = (and_ln104_249_fu_660_p2 | and_ln102_1336_fu_642_p2);

assign or_ln117_1200_fu_798_p2 = (or_ln117_1199_fu_784_p2 | and_ln102_1345_fu_702_p2);

assign or_ln117_1201_fu_816_p2 = (and_ln104_249_fu_660_p2 | and_ln102_1332_fu_606_p2);

assign or_ln117_1202_fu_830_p2 = (or_ln117_1201_fu_816_p2 | and_ln102_1346_fu_714_p2);

assign or_ln117_1203_fu_852_p2 = (and_ln102_fu_588_p2 | and_ln102_1347_fu_720_p2);

assign or_ln117_1204_fu_870_p2 = (and_ln102_fu_588_p2 | and_ln102_1337_fu_666_p2);

assign or_ln117_1205_fu_884_p2 = (or_ln117_1204_fu_870_p2 | and_ln102_1348_fu_732_p2);

assign or_ln117_1206_fu_898_p2 = (and_ln102_fu_588_p2 | and_ln102_1333_fu_624_p2);

assign or_ln117_1207_fu_912_p2 = (or_ln117_1206_fu_898_p2 | and_ln102_1349_fu_738_p2);

assign or_ln117_1208_fu_926_p2 = (or_ln117_1206_fu_898_p2 | and_ln102_1338_fu_678_p2);

assign or_ln117_1209_fu_940_p2 = (or_ln117_1208_fu_926_p2 | and_ln102_1350_fu_750_p2);

assign or_ln117_1210_fu_1127_p2 = (icmp_ln86_reg_1468 | and_ln102_1351_fu_1063_p2);

assign or_ln117_1211_fu_1135_p2 = (icmp_ln86_reg_1468 | and_ln102_1339_fu_1023_p2);

assign or_ln117_1212_fu_1148_p2 = (or_ln117_1211_fu_1135_p2 | and_ln102_1352_fu_1073_p2);

assign or_ln117_1213_fu_1162_p2 = (icmp_ln86_reg_1468 | and_ln102_1334_fu_991_p2);

assign or_ln117_1214_fu_1175_p2 = (or_ln117_1213_fu_1162_p2 | and_ln102_1353_fu_1079_p2);

assign or_ln117_1215_fu_1189_p2 = (or_ln117_1213_fu_1162_p2 | and_ln102_1340_fu_1033_p2);

assign or_ln117_1216_fu_1203_p2 = (or_ln117_1215_fu_1189_p2 | and_ln102_1354_fu_1089_p2);

assign or_ln117_1217_fu_1217_p2 = (icmp_ln86_reg_1468 | and_ln102_1331_fu_975_p2);

assign or_ln117_1218_fu_1230_p2 = (or_ln117_1217_fu_1217_p2 | and_ln102_1355_fu_1095_p2);

assign or_ln117_1219_fu_1244_p2 = (or_ln117_1217_fu_1217_p2 | and_ln102_1341_fu_1043_p2);

assign or_ln117_1220_fu_1258_p2 = (or_ln117_1219_fu_1244_p2 | and_ln102_1356_fu_1105_p2);

assign or_ln117_1221_fu_1272_p2 = (or_ln117_1217_fu_1217_p2 | and_ln102_1335_fu_1007_p2);

assign or_ln117_1222_fu_1286_p2 = (or_ln117_1221_fu_1272_p2 | and_ln102_1357_fu_1111_p2);

assign or_ln117_1223_fu_1300_p2 = (or_ln117_1221_fu_1272_p2 | and_ln102_1342_fu_1053_p2);

assign or_ln117_1224_fu_1314_p2 = (or_ln117_1223_fu_1300_p2 | and_ln102_1358_fu_1121_p2);

assign or_ln117_fu_756_p2 = (and_ln104_249_fu_660_p2 | and_ln102_1343_fu_690_p2);

assign select_ln117_1311_fu_804_p3 = ((or_ln117_1199_fu_784_p2[0:0] == 1'b1) ? select_ln117_fu_790_p3 : 2'd3);

assign select_ln117_1312_fu_822_p3 = ((or_ln117_1200_fu_798_p2[0:0] == 1'b1) ? zext_ln117_142_fu_812_p1 : 3'd4);

assign select_ln117_1313_fu_836_p3 = ((or_ln117_1201_fu_816_p2[0:0] == 1'b1) ? select_ln117_1312_fu_822_p3 : 3'd5);

assign select_ln117_1314_fu_844_p3 = ((or_ln117_1202_fu_830_p2[0:0] == 1'b1) ? select_ln117_1313_fu_836_p3 : 3'd6);

assign select_ln117_1315_fu_858_p3 = ((and_ln102_fu_588_p2[0:0] == 1'b1) ? select_ln117_1314_fu_844_p3 : 3'd7);

assign select_ln117_1316_fu_876_p3 = ((or_ln117_1203_fu_852_p2[0:0] == 1'b1) ? zext_ln117_143_fu_866_p1 : 4'd8);

assign select_ln117_1317_fu_890_p3 = ((or_ln117_1204_fu_870_p2[0:0] == 1'b1) ? select_ln117_1316_fu_876_p3 : 4'd9);

assign select_ln117_1318_fu_904_p3 = ((or_ln117_1205_fu_884_p2[0:0] == 1'b1) ? select_ln117_1317_fu_890_p3 : 4'd10);

assign select_ln117_1319_fu_918_p3 = ((or_ln117_1206_fu_898_p2[0:0] == 1'b1) ? select_ln117_1318_fu_904_p3 : 4'd11);

assign select_ln117_1320_fu_932_p3 = ((or_ln117_1207_fu_912_p2[0:0] == 1'b1) ? select_ln117_1319_fu_918_p3 : 4'd12);

assign select_ln117_1321_fu_946_p3 = ((or_ln117_1208_fu_926_p2[0:0] == 1'b1) ? select_ln117_1320_fu_932_p3 : 4'd13);

assign select_ln117_1322_fu_954_p3 = ((or_ln117_1209_fu_940_p2[0:0] == 1'b1) ? select_ln117_1321_fu_946_p3 : 4'd14);

assign select_ln117_1323_fu_962_p3 = ((icmp_ln86_fu_406_p2[0:0] == 1'b1) ? select_ln117_1322_fu_954_p3 : 4'd15);

assign select_ln117_1324_fu_1140_p3 = ((or_ln117_1210_fu_1127_p2[0:0] == 1'b1) ? zext_ln117_144_fu_1132_p1 : 5'd16);

assign select_ln117_1325_fu_1154_p3 = ((or_ln117_1211_fu_1135_p2[0:0] == 1'b1) ? select_ln117_1324_fu_1140_p3 : 5'd17);

assign select_ln117_1326_fu_1167_p3 = ((or_ln117_1212_fu_1148_p2[0:0] == 1'b1) ? select_ln117_1325_fu_1154_p3 : 5'd18);

assign select_ln117_1327_fu_1181_p3 = ((or_ln117_1213_fu_1162_p2[0:0] == 1'b1) ? select_ln117_1326_fu_1167_p3 : 5'd19);

assign select_ln117_1328_fu_1195_p3 = ((or_ln117_1214_fu_1175_p2[0:0] == 1'b1) ? select_ln117_1327_fu_1181_p3 : 5'd20);

assign select_ln117_1329_fu_1209_p3 = ((or_ln117_1215_fu_1189_p2[0:0] == 1'b1) ? select_ln117_1328_fu_1195_p3 : 5'd21);

assign select_ln117_1330_fu_1222_p3 = ((or_ln117_1216_fu_1203_p2[0:0] == 1'b1) ? select_ln117_1329_fu_1209_p3 : 5'd22);

assign select_ln117_1331_fu_1236_p3 = ((or_ln117_1217_fu_1217_p2[0:0] == 1'b1) ? select_ln117_1330_fu_1222_p3 : 5'd23);

assign select_ln117_1332_fu_1250_p3 = ((or_ln117_1218_fu_1230_p2[0:0] == 1'b1) ? select_ln117_1331_fu_1236_p3 : 5'd24);

assign select_ln117_1333_fu_1264_p3 = ((or_ln117_1219_fu_1244_p2[0:0] == 1'b1) ? select_ln117_1332_fu_1250_p3 : 5'd25);

assign select_ln117_1334_fu_1278_p3 = ((or_ln117_1220_fu_1258_p2[0:0] == 1'b1) ? select_ln117_1333_fu_1264_p3 : 5'd26);

assign select_ln117_1335_fu_1292_p3 = ((or_ln117_1221_fu_1272_p2[0:0] == 1'b1) ? select_ln117_1334_fu_1278_p3 : 5'd27);

assign select_ln117_1336_fu_1306_p3 = ((or_ln117_1222_fu_1286_p2[0:0] == 1'b1) ? select_ln117_1335_fu_1292_p3 : 5'd28);

assign select_ln117_1337_fu_1320_p3 = ((or_ln117_1223_fu_1300_p2[0:0] == 1'b1) ? select_ln117_1336_fu_1306_p3 : 5'd29);

assign select_ln117_fu_790_p3 = ((or_ln117_fu_756_p2[0:0] == 1'b1) ? zext_ln117_fu_780_p1 : 2'd2);

assign tmp_fu_424_p3 = x_51_val[32'd17];

assign xor_ln104_641_fu_594_p2 = (icmp_ln86_1355_fu_412_p2 ^ 1'd1);

assign xor_ln104_642_fu_980_p2 = (icmp_ln86_1356_reg_1477 ^ 1'd1);

assign xor_ln104_643_fu_612_p2 = (tmp_fu_424_p3 ^ 1'd1);

assign xor_ln104_644_fu_630_p2 = (icmp_ln86_1357_fu_432_p2 ^ 1'd1);

assign xor_ln104_645_fu_996_p2 = (icmp_ln86_1358_reg_1483 ^ 1'd1);

assign xor_ln104_646_fu_1012_p2 = (icmp_ln86_1359_reg_1489 ^ 1'd1);

assign xor_ln104_647_fu_648_p2 = (icmp_ln86_1360_fu_450_p2 ^ 1'd1);

assign xor_ln104_648_fu_654_p2 = (icmp_ln86_1361_fu_456_p2 ^ 1'd1);

assign xor_ln104_649_fu_672_p2 = (icmp_ln86_1362_fu_462_p2 ^ 1'd1);

assign xor_ln104_650_fu_684_p2 = (icmp_ln86_1363_fu_468_p2 ^ 1'd1);

assign xor_ln104_651_fu_1028_p2 = (icmp_ln86_1364_reg_1495 ^ 1'd1);

assign xor_ln104_652_fu_1038_p2 = (icmp_ln86_1365_reg_1501 ^ 1'd1);

assign xor_ln104_653_fu_1048_p2 = (icmp_ln86_1366_reg_1507 ^ 1'd1);

assign xor_ln104_654_fu_1058_p2 = (icmp_ln86_1367_reg_1513 ^ 1'd1);

assign xor_ln104_fu_970_p2 = (icmp_ln86_reg_1468 ^ 1'd1);

assign xor_ln117_fu_762_p2 = (1'd1 ^ and_ln102_fu_588_p2);

assign zext_ln117_142_fu_812_p1 = select_ln117_1311_fu_804_p3;

assign zext_ln117_143_fu_866_p1 = select_ln117_1315_fu_858_p3;

assign zext_ln117_144_fu_1132_p1 = select_ln117_1323_reg_1559;

assign zext_ln117_fu_780_p1 = or_ln117_1198_fu_774_p2;

endmodule //my_prj_decision_function_52
