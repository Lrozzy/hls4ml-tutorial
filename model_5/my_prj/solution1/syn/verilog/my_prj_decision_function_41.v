// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_41 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_3_val,
        x_5_val,
        x_6_val,
        x_7_val,
        x_8_val,
        x_11_val,
        x_12_val,
        x_15_val,
        x_18_val,
        x_19_val,
        x_21_val,
        x_22_val,
        x_23_val,
        x_24_val,
        x_28_val,
        x_32_val,
        x_33_val,
        x_38_val,
        x_43_val,
        x_47_val,
        x_50_val,
        x_51_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_3_val;
input  [17:0] x_5_val;
input  [17:0] x_6_val;
input  [17:0] x_7_val;
input  [17:0] x_8_val;
input  [17:0] x_11_val;
input  [17:0] x_12_val;
input  [17:0] x_15_val;
input  [17:0] x_18_val;
input  [17:0] x_19_val;
input  [17:0] x_21_val;
input  [17:0] x_22_val;
input  [17:0] x_23_val;
input  [17:0] x_24_val;
input  [17:0] x_28_val;
input  [17:0] x_32_val;
input  [17:0] x_33_val;
input  [17:0] x_38_val;
input  [17:0] x_43_val;
input  [17:0] x_47_val;
input  [17:0] x_50_val;
input  [17:0] x_51_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_420_p2;
reg   [0:0] icmp_ln86_reg_1488;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_1075_fu_432_p2;
reg   [0:0] icmp_ln86_1075_reg_1497;
wire   [0:0] icmp_ln86_1078_fu_450_p2;
reg   [0:0] icmp_ln86_1078_reg_1503;
wire   [0:0] icmp_ln86_1079_fu_456_p2;
reg   [0:0] icmp_ln86_1079_reg_1509;
wire   [0:0] icmp_ln86_1084_fu_486_p2;
reg   [0:0] icmp_ln86_1084_reg_1515;
wire   [0:0] icmp_ln86_1085_fu_492_p2;
reg   [0:0] icmp_ln86_1085_reg_1521;
wire   [0:0] icmp_ln86_1086_fu_498_p2;
reg   [0:0] icmp_ln86_1086_reg_1527;
wire   [0:0] icmp_ln86_1087_fu_504_p2;
reg   [0:0] icmp_ln86_1087_reg_1533;
wire   [0:0] icmp_ln86_1096_fu_560_p2;
reg   [0:0] icmp_ln86_1096_reg_1539;
wire   [0:0] icmp_ln86_1097_fu_566_p2;
reg   [0:0] icmp_ln86_1097_reg_1544;
wire   [0:0] icmp_ln86_1098_fu_572_p2;
reg   [0:0] icmp_ln86_1098_reg_1549;
wire   [0:0] icmp_ln86_1099_fu_578_p2;
reg   [0:0] icmp_ln86_1099_reg_1554;
wire   [0:0] icmp_ln86_1100_fu_584_p2;
reg   [0:0] icmp_ln86_1100_reg_1559;
wire   [0:0] icmp_ln86_1101_fu_590_p2;
reg   [0:0] icmp_ln86_1101_reg_1564;
wire   [0:0] icmp_ln86_1102_fu_596_p2;
reg   [0:0] icmp_ln86_1102_reg_1569;
wire   [0:0] icmp_ln86_1103_fu_602_p2;
reg   [0:0] icmp_ln86_1103_reg_1574;
wire   [4:0] select_ln117_1053_fu_982_p3;
reg   [4:0] select_ln117_1053_reg_1579;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln86_1074_fu_426_p2;
wire   [0:0] xor_ln104_515_fu_614_p2;
wire   [0:0] icmp_ln86_1076_fu_438_p2;
wire   [0:0] and_ln102_fu_608_p2;
wire   [0:0] xor_ln104_517_fu_632_p2;
wire   [0:0] icmp_ln86_1077_fu_444_p2;
wire   [0:0] and_ln104_fu_620_p2;
wire   [0:0] xor_ln104_518_fu_650_p2;
wire   [0:0] icmp_ln86_1080_fu_462_p2;
wire   [0:0] and_ln102_1034_fu_626_p2;
wire   [0:0] icmp_ln86_1081_fu_468_p2;
wire   [0:0] and_ln104_210_fu_638_p2;
wire   [0:0] icmp_ln86_1082_fu_474_p2;
wire   [0:0] and_ln102_1035_fu_644_p2;
wire   [0:0] icmp_ln86_1083_fu_480_p2;
wire   [0:0] and_ln104_211_fu_656_p2;
wire   [0:0] icmp_ln86_1088_fu_510_p2;
wire   [0:0] and_ln102_1038_fu_662_p2;
wire   [0:0] icmp_ln86_1089_fu_516_p2;
wire   [0:0] xor_ln104_521_fu_668_p2;
wire   [0:0] and_ln102_1062_fu_716_p2;
wire   [0:0] icmp_ln86_1090_fu_522_p2;
wire   [0:0] and_ln102_1039_fu_674_p2;
wire   [0:0] icmp_ln86_1091_fu_528_p2;
wire   [0:0] xor_ln104_522_fu_680_p2;
wire   [0:0] and_ln102_1063_fu_734_p2;
wire   [0:0] icmp_ln86_1092_fu_534_p2;
wire   [0:0] and_ln102_1040_fu_686_p2;
wire   [0:0] icmp_ln86_1093_fu_540_p2;
wire   [0:0] xor_ln104_523_fu_692_p2;
wire   [0:0] and_ln102_1064_fu_752_p2;
wire   [0:0] tmp_fu_546_p3;
wire   [0:0] and_ln102_1041_fu_698_p2;
wire   [0:0] icmp_ln86_1095_fu_554_p2;
wire   [0:0] xor_ln104_524_fu_704_p2;
wire   [0:0] and_ln102_1065_fu_770_p2;
wire   [0:0] and_ln102_1046_fu_710_p2;
wire   [0:0] xor_ln117_fu_782_p2;
wire   [0:0] and_ln102_1047_fu_722_p2;
wire   [1:0] zext_ln117_fu_788_p1;
wire   [0:0] or_ln117_fu_792_p2;
wire   [1:0] select_ln117_fu_798_p3;
wire   [1:0] select_ln117_1040_fu_806_p3;
wire   [0:0] and_ln102_1048_fu_728_p2;
wire   [2:0] zext_ln117_120_fu_814_p1;
wire   [0:0] or_ln117_979_fu_818_p2;
wire   [2:0] select_ln117_1041_fu_824_p3;
wire   [0:0] or_ln117_980_fu_832_p2;
wire   [0:0] and_ln102_1049_fu_740_p2;
wire   [2:0] select_ln117_1042_fu_838_p3;
wire   [0:0] or_ln117_981_fu_846_p2;
wire   [2:0] select_ln117_1043_fu_852_p3;
wire   [2:0] select_ln117_1044_fu_860_p3;
wire   [0:0] and_ln102_1050_fu_746_p2;
wire   [3:0] zext_ln117_121_fu_868_p1;
wire   [0:0] or_ln117_982_fu_872_p2;
wire   [3:0] select_ln117_1045_fu_878_p3;
wire   [0:0] or_ln117_983_fu_886_p2;
wire   [0:0] and_ln102_1051_fu_758_p2;
wire   [3:0] select_ln117_1046_fu_892_p3;
wire   [0:0] or_ln117_984_fu_900_p2;
wire   [3:0] select_ln117_1047_fu_906_p3;
wire   [0:0] or_ln117_985_fu_914_p2;
wire   [0:0] and_ln102_1052_fu_764_p2;
wire   [3:0] select_ln117_1048_fu_920_p3;
wire   [0:0] or_ln117_986_fu_928_p2;
wire   [3:0] select_ln117_1049_fu_934_p3;
wire   [0:0] or_ln117_987_fu_942_p2;
wire   [0:0] and_ln102_1053_fu_776_p2;
wire   [3:0] select_ln117_1050_fu_948_p3;
wire   [0:0] or_ln117_988_fu_956_p2;
wire   [3:0] select_ln117_1051_fu_962_p3;
wire   [3:0] select_ln117_1052_fu_970_p3;
wire   [4:0] zext_ln117_122_fu_978_p1;
wire   [0:0] xor_ln104_fu_990_p2;
wire   [0:0] xor_ln104_516_fu_1000_p2;
wire   [0:0] and_ln102_1033_fu_995_p2;
wire   [0:0] xor_ln104_519_fu_1016_p2;
wire   [0:0] and_ln104_209_fu_1005_p2;
wire   [0:0] xor_ln104_520_fu_1032_p2;
wire   [0:0] and_ln102_1036_fu_1011_p2;
wire   [0:0] and_ln104_212_fu_1021_p2;
wire   [0:0] and_ln102_1037_fu_1027_p2;
wire   [0:0] and_ln104_213_fu_1037_p2;
wire   [0:0] and_ln102_1042_fu_1043_p2;
wire   [0:0] xor_ln104_525_fu_1048_p2;
wire   [0:0] and_ln102_1066_fu_1088_p2;
wire   [0:0] and_ln102_1043_fu_1053_p2;
wire   [0:0] xor_ln104_526_fu_1058_p2;
wire   [0:0] and_ln102_1067_fu_1104_p2;
wire   [0:0] and_ln102_1044_fu_1063_p2;
wire   [0:0] xor_ln104_527_fu_1068_p2;
wire   [0:0] and_ln102_1068_fu_1120_p2;
wire   [0:0] and_ln102_1045_fu_1073_p2;
wire   [0:0] xor_ln104_528_fu_1078_p2;
wire   [0:0] and_ln102_1069_fu_1136_p2;
wire   [0:0] and_ln102_1054_fu_1083_p2;
wire   [0:0] or_ln117_989_fu_1147_p2;
wire   [0:0] or_ln117_990_fu_1152_p2;
wire   [0:0] and_ln102_1055_fu_1093_p2;
wire   [4:0] select_ln117_1054_fu_1157_p3;
wire   [0:0] or_ln117_991_fu_1164_p2;
wire   [4:0] select_ln117_1055_fu_1170_p3;
wire   [0:0] or_ln117_992_fu_1178_p2;
wire   [0:0] and_ln102_1056_fu_1099_p2;
wire   [4:0] select_ln117_1056_fu_1183_p3;
wire   [0:0] or_ln117_993_fu_1191_p2;
wire   [4:0] select_ln117_1057_fu_1197_p3;
wire   [0:0] or_ln117_994_fu_1205_p2;
wire   [0:0] and_ln102_1057_fu_1109_p2;
wire   [4:0] select_ln117_1058_fu_1211_p3;
wire   [0:0] or_ln117_995_fu_1219_p2;
wire   [4:0] select_ln117_1059_fu_1225_p3;
wire   [0:0] or_ln117_996_fu_1233_p2;
wire   [0:0] and_ln102_1058_fu_1115_p2;
wire   [4:0] select_ln117_1060_fu_1238_p3;
wire   [0:0] or_ln117_997_fu_1246_p2;
wire   [4:0] select_ln117_1061_fu_1252_p3;
wire   [0:0] or_ln117_998_fu_1260_p2;
wire   [0:0] and_ln102_1059_fu_1125_p2;
wire   [4:0] select_ln117_1062_fu_1266_p3;
wire   [0:0] or_ln117_999_fu_1274_p2;
wire   [4:0] select_ln117_1063_fu_1280_p3;
wire   [0:0] or_ln117_1000_fu_1288_p2;
wire   [0:0] and_ln102_1060_fu_1131_p2;
wire   [4:0] select_ln117_1064_fu_1294_p3;
wire   [0:0] or_ln117_1001_fu_1302_p2;
wire   [4:0] select_ln117_1065_fu_1308_p3;
wire   [0:0] or_ln117_1002_fu_1316_p2;
wire   [0:0] and_ln102_1061_fu_1141_p2;
wire   [4:0] select_ln117_1066_fu_1322_p3;
wire   [0:0] or_ln117_1003_fu_1330_p2;
wire   [4:0] select_ln117_1067_fu_1336_p3;
wire   [11:0] agg_result_fu_1352_p65;
wire   [4:0] agg_result_fu_1352_p66;
wire   [11:0] agg_result_fu_1352_p67;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1352_p1;
wire   [4:0] agg_result_fu_1352_p3;
wire   [4:0] agg_result_fu_1352_p5;
wire   [4:0] agg_result_fu_1352_p7;
wire   [4:0] agg_result_fu_1352_p9;
wire   [4:0] agg_result_fu_1352_p11;
wire   [4:0] agg_result_fu_1352_p13;
wire   [4:0] agg_result_fu_1352_p15;
wire   [4:0] agg_result_fu_1352_p17;
wire   [4:0] agg_result_fu_1352_p19;
wire   [4:0] agg_result_fu_1352_p21;
wire   [4:0] agg_result_fu_1352_p23;
wire   [4:0] agg_result_fu_1352_p25;
wire   [4:0] agg_result_fu_1352_p27;
wire   [4:0] agg_result_fu_1352_p29;
wire   [4:0] agg_result_fu_1352_p31;
wire  signed [4:0] agg_result_fu_1352_p33;
wire  signed [4:0] agg_result_fu_1352_p35;
wire  signed [4:0] agg_result_fu_1352_p37;
wire  signed [4:0] agg_result_fu_1352_p39;
wire  signed [4:0] agg_result_fu_1352_p41;
wire  signed [4:0] agg_result_fu_1352_p43;
wire  signed [4:0] agg_result_fu_1352_p45;
wire  signed [4:0] agg_result_fu_1352_p47;
wire  signed [4:0] agg_result_fu_1352_p49;
wire  signed [4:0] agg_result_fu_1352_p51;
wire  signed [4:0] agg_result_fu_1352_p53;
wire  signed [4:0] agg_result_fu_1352_p55;
wire  signed [4:0] agg_result_fu_1352_p57;
wire  signed [4:0] agg_result_fu_1352_p59;
wire  signed [4:0] agg_result_fu_1352_p61;
wire  signed [4:0] agg_result_fu_1352_p63;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_65_5_12_1_1_x24 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 12 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 12 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 12 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 12 ),
    .CASE31( 5'h1F ),
    .din31_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_65_5_12_1_1_x24_U1290(
    .din0(12'd6),
    .din1(12'd135),
    .din2(12'd4031),
    .din3(12'd78),
    .din4(12'd3901),
    .din5(12'd169),
    .din6(12'd390),
    .din7(12'd3969),
    .din8(12'd2026),
    .din9(12'd132),
    .din10(12'd53),
    .din11(12'd4060),
    .din12(12'd4065),
    .din13(12'd203),
    .din14(12'd113),
    .din15(12'd3835),
    .din16(12'd3516),
    .din17(12'd4039),
    .din18(12'd431),
    .din19(12'd26),
    .din20(12'd4081),
    .din21(12'd3857),
    .din22(12'd3924),
    .din23(12'd250),
    .din24(12'd4042),
    .din25(12'd31),
    .din26(12'd107),
    .din27(12'd4087),
    .din28(12'd7),
    .din29(12'd159),
    .din30(12'd3897),
    .din31(12'd4059),
    .def(agg_result_fu_1352_p65),
    .sel(agg_result_fu_1352_p66),
    .dout(agg_result_fu_1352_p67)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_1075_reg_1497 <= icmp_ln86_1075_fu_432_p2;
        icmp_ln86_1078_reg_1503 <= icmp_ln86_1078_fu_450_p2;
        icmp_ln86_1079_reg_1509 <= icmp_ln86_1079_fu_456_p2;
        icmp_ln86_1084_reg_1515 <= icmp_ln86_1084_fu_486_p2;
        icmp_ln86_1085_reg_1521 <= icmp_ln86_1085_fu_492_p2;
        icmp_ln86_1086_reg_1527 <= icmp_ln86_1086_fu_498_p2;
        icmp_ln86_1087_reg_1533 <= icmp_ln86_1087_fu_504_p2;
        icmp_ln86_1096_reg_1539 <= icmp_ln86_1096_fu_560_p2;
        icmp_ln86_1097_reg_1544 <= icmp_ln86_1097_fu_566_p2;
        icmp_ln86_1098_reg_1549 <= icmp_ln86_1098_fu_572_p2;
        icmp_ln86_1099_reg_1554 <= icmp_ln86_1099_fu_578_p2;
        icmp_ln86_1100_reg_1559 <= icmp_ln86_1100_fu_584_p2;
        icmp_ln86_1101_reg_1564 <= icmp_ln86_1101_fu_590_p2;
        icmp_ln86_1102_reg_1569 <= icmp_ln86_1102_fu_596_p2;
        icmp_ln86_1103_reg_1574 <= icmp_ln86_1103_fu_602_p2;
        icmp_ln86_reg_1488 <= icmp_ln86_fu_420_p2;
        select_ln117_1053_reg_1579 <= select_ln117_1053_fu_982_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1352_p65 = 'bx;

assign agg_result_fu_1352_p66 = ((or_ln117_1003_fu_1330_p2[0:0] == 1'b1) ? select_ln117_1067_fu_1336_p3 : 5'd31);

assign and_ln102_1033_fu_995_p2 = (xor_ln104_fu_990_p2 & icmp_ln86_1075_reg_1497);

assign and_ln102_1034_fu_626_p2 = (icmp_ln86_1076_fu_438_p2 & and_ln102_fu_608_p2);

assign and_ln102_1035_fu_644_p2 = (icmp_ln86_1077_fu_444_p2 & and_ln104_fu_620_p2);

assign and_ln102_1036_fu_1011_p2 = (icmp_ln86_1078_reg_1503 & and_ln102_1033_fu_995_p2);

assign and_ln102_1037_fu_1027_p2 = (icmp_ln86_1079_reg_1509 & and_ln104_209_fu_1005_p2);

assign and_ln102_1038_fu_662_p2 = (icmp_ln86_1080_fu_462_p2 & and_ln102_1034_fu_626_p2);

assign and_ln102_1039_fu_674_p2 = (icmp_ln86_1081_fu_468_p2 & and_ln104_210_fu_638_p2);

assign and_ln102_1040_fu_686_p2 = (icmp_ln86_1082_fu_474_p2 & and_ln102_1035_fu_644_p2);

assign and_ln102_1041_fu_698_p2 = (icmp_ln86_1083_fu_480_p2 & and_ln104_211_fu_656_p2);

assign and_ln102_1042_fu_1043_p2 = (icmp_ln86_1084_reg_1515 & and_ln102_1036_fu_1011_p2);

assign and_ln102_1043_fu_1053_p2 = (icmp_ln86_1085_reg_1521 & and_ln104_212_fu_1021_p2);

assign and_ln102_1044_fu_1063_p2 = (icmp_ln86_1086_reg_1527 & and_ln102_1037_fu_1027_p2);

assign and_ln102_1045_fu_1073_p2 = (icmp_ln86_1087_reg_1533 & and_ln104_213_fu_1037_p2);

assign and_ln102_1046_fu_710_p2 = (icmp_ln86_1088_fu_510_p2 & and_ln102_1038_fu_662_p2);

assign and_ln102_1047_fu_722_p2 = (and_ln102_1062_fu_716_p2 & and_ln102_1034_fu_626_p2);

assign and_ln102_1048_fu_728_p2 = (icmp_ln86_1090_fu_522_p2 & and_ln102_1039_fu_674_p2);

assign and_ln102_1049_fu_740_p2 = (and_ln104_210_fu_638_p2 & and_ln102_1063_fu_734_p2);

assign and_ln102_1050_fu_746_p2 = (icmp_ln86_1092_fu_534_p2 & and_ln102_1040_fu_686_p2);

assign and_ln102_1051_fu_758_p2 = (and_ln102_1064_fu_752_p2 & and_ln102_1035_fu_644_p2);

assign and_ln102_1052_fu_764_p2 = (tmp_fu_546_p3 & and_ln102_1041_fu_698_p2);

assign and_ln102_1053_fu_776_p2 = (and_ln104_211_fu_656_p2 & and_ln102_1065_fu_770_p2);

assign and_ln102_1054_fu_1083_p2 = (icmp_ln86_1096_reg_1539 & and_ln102_1042_fu_1043_p2);

assign and_ln102_1055_fu_1093_p2 = (and_ln102_1066_fu_1088_p2 & and_ln102_1036_fu_1011_p2);

assign and_ln102_1056_fu_1099_p2 = (icmp_ln86_1098_reg_1549 & and_ln102_1043_fu_1053_p2);

assign and_ln102_1057_fu_1109_p2 = (and_ln104_212_fu_1021_p2 & and_ln102_1067_fu_1104_p2);

assign and_ln102_1058_fu_1115_p2 = (icmp_ln86_1100_reg_1559 & and_ln102_1044_fu_1063_p2);

assign and_ln102_1059_fu_1125_p2 = (and_ln102_1068_fu_1120_p2 & and_ln102_1037_fu_1027_p2);

assign and_ln102_1060_fu_1131_p2 = (icmp_ln86_1102_reg_1569 & and_ln102_1045_fu_1073_p2);

assign and_ln102_1061_fu_1141_p2 = (and_ln104_213_fu_1037_p2 & and_ln102_1069_fu_1136_p2);

assign and_ln102_1062_fu_716_p2 = (xor_ln104_521_fu_668_p2 & icmp_ln86_1089_fu_516_p2);

assign and_ln102_1063_fu_734_p2 = (xor_ln104_522_fu_680_p2 & icmp_ln86_1091_fu_528_p2);

assign and_ln102_1064_fu_752_p2 = (xor_ln104_523_fu_692_p2 & icmp_ln86_1093_fu_540_p2);

assign and_ln102_1065_fu_770_p2 = (xor_ln104_524_fu_704_p2 & icmp_ln86_1095_fu_554_p2);

assign and_ln102_1066_fu_1088_p2 = (xor_ln104_525_fu_1048_p2 & icmp_ln86_1097_reg_1544);

assign and_ln102_1067_fu_1104_p2 = (xor_ln104_526_fu_1058_p2 & icmp_ln86_1099_reg_1554);

assign and_ln102_1068_fu_1120_p2 = (xor_ln104_527_fu_1068_p2 & icmp_ln86_1101_reg_1564);

assign and_ln102_1069_fu_1136_p2 = (xor_ln104_528_fu_1078_p2 & icmp_ln86_1103_reg_1574);

assign and_ln102_fu_608_p2 = (icmp_ln86_fu_420_p2 & icmp_ln86_1074_fu_426_p2);

assign and_ln104_209_fu_1005_p2 = (xor_ln104_fu_990_p2 & xor_ln104_516_fu_1000_p2);

assign and_ln104_210_fu_638_p2 = (xor_ln104_517_fu_632_p2 & and_ln102_fu_608_p2);

assign and_ln104_211_fu_656_p2 = (xor_ln104_518_fu_650_p2 & and_ln104_fu_620_p2);

assign and_ln104_212_fu_1021_p2 = (xor_ln104_519_fu_1016_p2 & and_ln102_1033_fu_995_p2);

assign and_ln104_213_fu_1037_p2 = (xor_ln104_520_fu_1032_p2 & and_ln104_209_fu_1005_p2);

assign and_ln104_fu_620_p2 = (xor_ln104_515_fu_614_p2 & icmp_ln86_fu_420_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1352_p67;

assign icmp_ln86_1074_fu_426_p2 = (($signed(x_6_val) < $signed(18'd8291)) ? 1'b1 : 1'b0);

assign icmp_ln86_1075_fu_432_p2 = (($signed(x_3_val) < $signed(18'd64466)) ? 1'b1 : 1'b0);

assign icmp_ln86_1076_fu_438_p2 = (($signed(x_50_val) < $signed(18'd48298)) ? 1'b1 : 1'b0);

assign icmp_ln86_1077_fu_444_p2 = (($signed(x_19_val) < $signed(18'd37994)) ? 1'b1 : 1'b0);

assign icmp_ln86_1078_fu_450_p2 = (($signed(x_33_val) < $signed(18'd691)) ? 1'b1 : 1'b0);

assign icmp_ln86_1079_fu_456_p2 = (($signed(x_1_val) < $signed(18'd258662)) ? 1'b1 : 1'b0);

assign icmp_ln86_1080_fu_462_p2 = (($signed(x_5_val) < $signed(18'd7055)) ? 1'b1 : 1'b0);

assign icmp_ln86_1081_fu_468_p2 = (($signed(x_43_val) < $signed(18'd80)) ? 1'b1 : 1'b0);

assign icmp_ln86_1082_fu_474_p2 = (($signed(x_12_val) < $signed(18'd258255)) ? 1'b1 : 1'b0);

assign icmp_ln86_1083_fu_480_p2 = (($signed(x_24_val) < $signed(18'd465)) ? 1'b1 : 1'b0);

assign icmp_ln86_1084_fu_486_p2 = (($signed(x_23_val) < $signed(18'd35)) ? 1'b1 : 1'b0);

assign icmp_ln86_1085_fu_492_p2 = (($signed(x_8_val) < $signed(18'd2160)) ? 1'b1 : 1'b0);

assign icmp_ln86_1086_fu_498_p2 = (($signed(x_32_val) < $signed(18'd814)) ? 1'b1 : 1'b0);

assign icmp_ln86_1087_fu_504_p2 = (($signed(x_7_val) < $signed(18'd5604)) ? 1'b1 : 1'b0);

assign icmp_ln86_1088_fu_510_p2 = (($signed(x_24_val) < $signed(18'd451)) ? 1'b1 : 1'b0);

assign icmp_ln86_1089_fu_516_p2 = (($signed(x_28_val) < $signed(18'd4023)) ? 1'b1 : 1'b0);

assign icmp_ln86_1090_fu_522_p2 = (($signed(x_47_val) < $signed(18'd34458)) ? 1'b1 : 1'b0);

assign icmp_ln86_1091_fu_528_p2 = (($signed(x_11_val) < $signed(18'd972)) ? 1'b1 : 1'b0);

assign icmp_ln86_1092_fu_534_p2 = (($signed(x_5_val) < $signed(18'd26886)) ? 1'b1 : 1'b0);

assign icmp_ln86_1093_fu_540_p2 = (($signed(x_21_val) < $signed(18'd301)) ? 1'b1 : 1'b0);

assign icmp_ln86_1095_fu_554_p2 = (($signed(x_6_val) < $signed(18'd10009)) ? 1'b1 : 1'b0);

assign icmp_ln86_1096_fu_560_p2 = (($signed(x_1_val) < $signed(18'd107085)) ? 1'b1 : 1'b0);

assign icmp_ln86_1097_fu_566_p2 = (($signed(x_22_val) < $signed(18'd97)) ? 1'b1 : 1'b0);

assign icmp_ln86_1098_fu_572_p2 = (($signed(x_18_val) < $signed(18'd1837)) ? 1'b1 : 1'b0);

assign icmp_ln86_1099_fu_578_p2 = (($signed(x_51_val) < $signed(18'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_1100_fu_584_p2 = (($signed(x_1_val) < $signed(18'd203716)) ? 1'b1 : 1'b0);

assign icmp_ln86_1101_fu_590_p2 = (($signed(x_38_val) < $signed(18'd9)) ? 1'b1 : 1'b0);

assign icmp_ln86_1102_fu_596_p2 = (($signed(x_15_val) < $signed(18'd5)) ? 1'b1 : 1'b0);

assign icmp_ln86_1103_fu_602_p2 = (($signed(x_3_val) < $signed(18'd85217)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_420_p2 = (($signed(x_15_val) < $signed(18'd3)) ? 1'b1 : 1'b0);

assign or_ln117_1000_fu_1288_p2 = (or_ln117_996_fu_1233_p2 | and_ln102_1037_fu_1027_p2);

assign or_ln117_1001_fu_1302_p2 = (or_ln117_1000_fu_1288_p2 | and_ln102_1060_fu_1131_p2);

assign or_ln117_1002_fu_1316_p2 = (or_ln117_1000_fu_1288_p2 | and_ln102_1045_fu_1073_p2);

assign or_ln117_1003_fu_1330_p2 = (or_ln117_1002_fu_1316_p2 | and_ln102_1061_fu_1141_p2);

assign or_ln117_979_fu_818_p2 = (and_ln102_1048_fu_728_p2 | and_ln102_1034_fu_626_p2);

assign or_ln117_980_fu_832_p2 = (and_ln102_1039_fu_674_p2 | and_ln102_1034_fu_626_p2);

assign or_ln117_981_fu_846_p2 = (or_ln117_980_fu_832_p2 | and_ln102_1049_fu_740_p2);

assign or_ln117_982_fu_872_p2 = (and_ln102_fu_608_p2 | and_ln102_1050_fu_746_p2);

assign or_ln117_983_fu_886_p2 = (and_ln102_fu_608_p2 | and_ln102_1040_fu_686_p2);

assign or_ln117_984_fu_900_p2 = (or_ln117_983_fu_886_p2 | and_ln102_1051_fu_758_p2);

assign or_ln117_985_fu_914_p2 = (and_ln102_fu_608_p2 | and_ln102_1035_fu_644_p2);

assign or_ln117_986_fu_928_p2 = (or_ln117_985_fu_914_p2 | and_ln102_1052_fu_764_p2);

assign or_ln117_987_fu_942_p2 = (or_ln117_985_fu_914_p2 | and_ln102_1041_fu_698_p2);

assign or_ln117_988_fu_956_p2 = (or_ln117_987_fu_942_p2 | and_ln102_1053_fu_776_p2);

assign or_ln117_989_fu_1147_p2 = (icmp_ln86_reg_1488 | and_ln102_1054_fu_1083_p2);

assign or_ln117_990_fu_1152_p2 = (icmp_ln86_reg_1488 | and_ln102_1042_fu_1043_p2);

assign or_ln117_991_fu_1164_p2 = (or_ln117_990_fu_1152_p2 | and_ln102_1055_fu_1093_p2);

assign or_ln117_992_fu_1178_p2 = (icmp_ln86_reg_1488 | and_ln102_1036_fu_1011_p2);

assign or_ln117_993_fu_1191_p2 = (or_ln117_992_fu_1178_p2 | and_ln102_1056_fu_1099_p2);

assign or_ln117_994_fu_1205_p2 = (or_ln117_992_fu_1178_p2 | and_ln102_1043_fu_1053_p2);

assign or_ln117_995_fu_1219_p2 = (or_ln117_994_fu_1205_p2 | and_ln102_1057_fu_1109_p2);

assign or_ln117_996_fu_1233_p2 = (icmp_ln86_reg_1488 | and_ln102_1033_fu_995_p2);

assign or_ln117_997_fu_1246_p2 = (or_ln117_996_fu_1233_p2 | and_ln102_1058_fu_1115_p2);

assign or_ln117_998_fu_1260_p2 = (or_ln117_996_fu_1233_p2 | and_ln102_1044_fu_1063_p2);

assign or_ln117_999_fu_1274_p2 = (or_ln117_998_fu_1260_p2 | and_ln102_1059_fu_1125_p2);

assign or_ln117_fu_792_p2 = (and_ln102_1047_fu_722_p2 | and_ln102_1038_fu_662_p2);

assign select_ln117_1040_fu_806_p3 = ((or_ln117_fu_792_p2[0:0] == 1'b1) ? select_ln117_fu_798_p3 : 2'd3);

assign select_ln117_1041_fu_824_p3 = ((and_ln102_1034_fu_626_p2[0:0] == 1'b1) ? zext_ln117_120_fu_814_p1 : 3'd4);

assign select_ln117_1042_fu_838_p3 = ((or_ln117_979_fu_818_p2[0:0] == 1'b1) ? select_ln117_1041_fu_824_p3 : 3'd5);

assign select_ln117_1043_fu_852_p3 = ((or_ln117_980_fu_832_p2[0:0] == 1'b1) ? select_ln117_1042_fu_838_p3 : 3'd6);

assign select_ln117_1044_fu_860_p3 = ((or_ln117_981_fu_846_p2[0:0] == 1'b1) ? select_ln117_1043_fu_852_p3 : 3'd7);

assign select_ln117_1045_fu_878_p3 = ((and_ln102_fu_608_p2[0:0] == 1'b1) ? zext_ln117_121_fu_868_p1 : 4'd8);

assign select_ln117_1046_fu_892_p3 = ((or_ln117_982_fu_872_p2[0:0] == 1'b1) ? select_ln117_1045_fu_878_p3 : 4'd9);

assign select_ln117_1047_fu_906_p3 = ((or_ln117_983_fu_886_p2[0:0] == 1'b1) ? select_ln117_1046_fu_892_p3 : 4'd10);

assign select_ln117_1048_fu_920_p3 = ((or_ln117_984_fu_900_p2[0:0] == 1'b1) ? select_ln117_1047_fu_906_p3 : 4'd11);

assign select_ln117_1049_fu_934_p3 = ((or_ln117_985_fu_914_p2[0:0] == 1'b1) ? select_ln117_1048_fu_920_p3 : 4'd12);

assign select_ln117_1050_fu_948_p3 = ((or_ln117_986_fu_928_p2[0:0] == 1'b1) ? select_ln117_1049_fu_934_p3 : 4'd13);

assign select_ln117_1051_fu_962_p3 = ((or_ln117_987_fu_942_p2[0:0] == 1'b1) ? select_ln117_1050_fu_948_p3 : 4'd14);

assign select_ln117_1052_fu_970_p3 = ((or_ln117_988_fu_956_p2[0:0] == 1'b1) ? select_ln117_1051_fu_962_p3 : 4'd15);

assign select_ln117_1053_fu_982_p3 = ((icmp_ln86_fu_420_p2[0:0] == 1'b1) ? zext_ln117_122_fu_978_p1 : 5'd16);

assign select_ln117_1054_fu_1157_p3 = ((or_ln117_989_fu_1147_p2[0:0] == 1'b1) ? select_ln117_1053_reg_1579 : 5'd17);

assign select_ln117_1055_fu_1170_p3 = ((or_ln117_990_fu_1152_p2[0:0] == 1'b1) ? select_ln117_1054_fu_1157_p3 : 5'd18);

assign select_ln117_1056_fu_1183_p3 = ((or_ln117_991_fu_1164_p2[0:0] == 1'b1) ? select_ln117_1055_fu_1170_p3 : 5'd19);

assign select_ln117_1057_fu_1197_p3 = ((or_ln117_992_fu_1178_p2[0:0] == 1'b1) ? select_ln117_1056_fu_1183_p3 : 5'd20);

assign select_ln117_1058_fu_1211_p3 = ((or_ln117_993_fu_1191_p2[0:0] == 1'b1) ? select_ln117_1057_fu_1197_p3 : 5'd21);

assign select_ln117_1059_fu_1225_p3 = ((or_ln117_994_fu_1205_p2[0:0] == 1'b1) ? select_ln117_1058_fu_1211_p3 : 5'd22);

assign select_ln117_1060_fu_1238_p3 = ((or_ln117_995_fu_1219_p2[0:0] == 1'b1) ? select_ln117_1059_fu_1225_p3 : 5'd23);

assign select_ln117_1061_fu_1252_p3 = ((or_ln117_996_fu_1233_p2[0:0] == 1'b1) ? select_ln117_1060_fu_1238_p3 : 5'd24);

assign select_ln117_1062_fu_1266_p3 = ((or_ln117_997_fu_1246_p2[0:0] == 1'b1) ? select_ln117_1061_fu_1252_p3 : 5'd25);

assign select_ln117_1063_fu_1280_p3 = ((or_ln117_998_fu_1260_p2[0:0] == 1'b1) ? select_ln117_1062_fu_1266_p3 : 5'd26);

assign select_ln117_1064_fu_1294_p3 = ((or_ln117_999_fu_1274_p2[0:0] == 1'b1) ? select_ln117_1063_fu_1280_p3 : 5'd27);

assign select_ln117_1065_fu_1308_p3 = ((or_ln117_1000_fu_1288_p2[0:0] == 1'b1) ? select_ln117_1064_fu_1294_p3 : 5'd28);

assign select_ln117_1066_fu_1322_p3 = ((or_ln117_1001_fu_1302_p2[0:0] == 1'b1) ? select_ln117_1065_fu_1308_p3 : 5'd29);

assign select_ln117_1067_fu_1336_p3 = ((or_ln117_1002_fu_1316_p2[0:0] == 1'b1) ? select_ln117_1066_fu_1322_p3 : 5'd30);

assign select_ln117_fu_798_p3 = ((and_ln102_1038_fu_662_p2[0:0] == 1'b1) ? zext_ln117_fu_788_p1 : 2'd2);

assign tmp_fu_546_p3 = x_51_val[32'd17];

assign xor_ln104_515_fu_614_p2 = (icmp_ln86_1074_fu_426_p2 ^ 1'd1);

assign xor_ln104_516_fu_1000_p2 = (icmp_ln86_1075_reg_1497 ^ 1'd1);

assign xor_ln104_517_fu_632_p2 = (icmp_ln86_1076_fu_438_p2 ^ 1'd1);

assign xor_ln104_518_fu_650_p2 = (icmp_ln86_1077_fu_444_p2 ^ 1'd1);

assign xor_ln104_519_fu_1016_p2 = (icmp_ln86_1078_reg_1503 ^ 1'd1);

assign xor_ln104_520_fu_1032_p2 = (icmp_ln86_1079_reg_1509 ^ 1'd1);

assign xor_ln104_521_fu_668_p2 = (icmp_ln86_1080_fu_462_p2 ^ 1'd1);

assign xor_ln104_522_fu_680_p2 = (icmp_ln86_1081_fu_468_p2 ^ 1'd1);

assign xor_ln104_523_fu_692_p2 = (icmp_ln86_1082_fu_474_p2 ^ 1'd1);

assign xor_ln104_524_fu_704_p2 = (icmp_ln86_1083_fu_480_p2 ^ 1'd1);

assign xor_ln104_525_fu_1048_p2 = (icmp_ln86_1084_reg_1515 ^ 1'd1);

assign xor_ln104_526_fu_1058_p2 = (icmp_ln86_1085_reg_1521 ^ 1'd1);

assign xor_ln104_527_fu_1068_p2 = (icmp_ln86_1086_reg_1527 ^ 1'd1);

assign xor_ln104_528_fu_1078_p2 = (icmp_ln86_1087_reg_1533 ^ 1'd1);

assign xor_ln104_fu_990_p2 = (icmp_ln86_reg_1488 ^ 1'd1);

assign xor_ln117_fu_782_p2 = (1'd1 ^ and_ln102_1046_fu_710_p2);

assign zext_ln117_120_fu_814_p1 = select_ln117_1040_fu_806_p3;

assign zext_ln117_121_fu_868_p1 = select_ln117_1044_fu_860_p3;

assign zext_ln117_122_fu_978_p1 = select_ln117_1052_fu_970_p3;

assign zext_ln117_fu_788_p1 = xor_ln117_fu_782_p2;

endmodule //my_prj_decision_function_41
