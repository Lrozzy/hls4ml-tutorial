// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_14 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_2_val,
        x_6_val,
        x_9_val,
        x_11_val,
        x_12_val,
        x_18_val,
        x_19_val,
        x_21_val,
        x_23_val,
        x_24_val,
        x_27_val,
        x_31_val,
        x_32_val,
        x_33_val,
        x_34_val,
        x_37_val,
        x_38_val,
        x_40_val,
        x_42_val,
        x_43_val,
        x_44_val,
        x_45_val,
        x_46_val,
        x_47_val,
        x_48_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_2_val;
input  [17:0] x_6_val;
input  [17:0] x_9_val;
input  [17:0] x_11_val;
input  [17:0] x_12_val;
input  [17:0] x_18_val;
input  [17:0] x_19_val;
input  [17:0] x_21_val;
input  [17:0] x_23_val;
input  [17:0] x_24_val;
input  [17:0] x_27_val;
input  [17:0] x_31_val;
input  [17:0] x_32_val;
input  [17:0] x_33_val;
input  [17:0] x_34_val;
input  [17:0] x_37_val;
input  [17:0] x_38_val;
input  [17:0] x_40_val;
input  [17:0] x_42_val;
input  [17:0] x_43_val;
input  [17:0] x_44_val;
input  [17:0] x_45_val;
input  [17:0] x_46_val;
input  [17:0] x_47_val;
input  [17:0] x_48_val;
output  [10:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_436_p2;
reg   [0:0] icmp_ln86_reg_1506;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_365_fu_448_p2;
reg   [0:0] icmp_ln86_365_reg_1515;
wire   [0:0] icmp_ln86_368_fu_466_p2;
reg   [0:0] icmp_ln86_368_reg_1521;
wire   [0:0] icmp_ln86_369_fu_472_p2;
reg   [0:0] icmp_ln86_369_reg_1527;
wire   [0:0] icmp_ln86_374_fu_512_p2;
reg   [0:0] icmp_ln86_374_reg_1533;
wire   [0:0] icmp_ln86_375_fu_518_p2;
reg   [0:0] icmp_ln86_375_reg_1539;
wire   [0:0] icmp_ln86_376_fu_524_p2;
reg   [0:0] icmp_ln86_376_reg_1545;
wire   [0:0] icmp_ln86_377_fu_530_p2;
reg   [0:0] icmp_ln86_377_reg_1551;
wire   [0:0] icmp_ln86_385_fu_578_p2;
reg   [0:0] icmp_ln86_385_reg_1557;
wire   [0:0] icmp_ln86_386_fu_584_p2;
reg   [0:0] icmp_ln86_386_reg_1562;
wire   [0:0] icmp_ln86_387_fu_590_p2;
reg   [0:0] icmp_ln86_387_reg_1567;
wire   [0:0] icmp_ln86_388_fu_596_p2;
reg   [0:0] icmp_ln86_388_reg_1572;
wire   [0:0] icmp_ln86_389_fu_602_p2;
reg   [0:0] icmp_ln86_389_reg_1577;
wire   [0:0] icmp_ln86_390_fu_608_p2;
reg   [0:0] icmp_ln86_390_reg_1582;
wire   [0:0] icmp_ln86_391_fu_614_p2;
reg   [0:0] icmp_ln86_391_reg_1587;
wire   [0:0] icmp_ln86_392_fu_620_p2;
reg   [0:0] icmp_ln86_392_reg_1592;
wire   [4:0] select_ln117_368_fu_1000_p3;
reg   [4:0] select_ln117_368_reg_1597;
wire    ap_block_pp0_stage0;
wire   [16:0] tmp_fu_490_p4;
wire   [0:0] icmp_ln86_364_fu_442_p2;
wire   [0:0] xor_ln104_175_fu_632_p2;
wire   [0:0] icmp_ln86_366_fu_454_p2;
wire   [0:0] and_ln102_fu_626_p2;
wire   [0:0] xor_ln104_177_fu_650_p2;
wire   [0:0] icmp_ln86_367_fu_460_p2;
wire   [0:0] and_ln104_fu_638_p2;
wire   [0:0] xor_ln104_178_fu_668_p2;
wire   [0:0] icmp_ln86_370_fu_478_p2;
wire   [0:0] and_ln102_351_fu_644_p2;
wire   [0:0] icmp_ln86_371_fu_484_p2;
wire   [0:0] and_ln104_71_fu_656_p2;
wire   [0:0] icmp_ln86_1403_fu_500_p2;
wire   [0:0] and_ln102_352_fu_662_p2;
wire   [0:0] icmp_ln86_373_fu_506_p2;
wire   [0:0] and_ln104_72_fu_674_p2;
wire   [0:0] icmp_ln86_378_fu_536_p2;
wire   [0:0] and_ln102_355_fu_680_p2;
wire   [0:0] icmp_ln86_379_fu_542_p2;
wire   [0:0] xor_ln104_181_fu_686_p2;
wire   [0:0] and_ln102_379_fu_734_p2;
wire   [0:0] icmp_ln86_380_fu_548_p2;
wire   [0:0] and_ln102_356_fu_692_p2;
wire   [0:0] icmp_ln86_381_fu_554_p2;
wire   [0:0] xor_ln104_182_fu_698_p2;
wire   [0:0] and_ln102_380_fu_752_p2;
wire   [0:0] icmp_ln86_382_fu_560_p2;
wire   [0:0] and_ln102_357_fu_704_p2;
wire   [0:0] icmp_ln86_383_fu_566_p2;
wire   [0:0] xor_ln104_183_fu_710_p2;
wire   [0:0] and_ln102_381_fu_770_p2;
wire   [0:0] and_ln102_358_fu_716_p2;
wire   [0:0] icmp_ln86_384_fu_572_p2;
wire   [0:0] xor_ln104_184_fu_722_p2;
wire   [0:0] and_ln102_382_fu_788_p2;
wire   [0:0] and_ln102_363_fu_728_p2;
wire   [0:0] xor_ln117_fu_800_p2;
wire   [0:0] and_ln102_364_fu_740_p2;
wire   [1:0] zext_ln117_fu_806_p1;
wire   [0:0] or_ln117_fu_810_p2;
wire   [1:0] select_ln117_fu_816_p3;
wire   [1:0] select_ln117_355_fu_824_p3;
wire   [0:0] and_ln102_365_fu_746_p2;
wire   [2:0] zext_ln117_39_fu_832_p1;
wire   [0:0] or_ln117_340_fu_836_p2;
wire   [2:0] select_ln117_356_fu_842_p3;
wire   [0:0] or_ln117_341_fu_850_p2;
wire   [0:0] and_ln102_366_fu_758_p2;
wire   [2:0] select_ln117_357_fu_856_p3;
wire   [0:0] or_ln117_342_fu_864_p2;
wire   [2:0] select_ln117_358_fu_870_p3;
wire   [2:0] select_ln117_359_fu_878_p3;
wire   [0:0] and_ln102_367_fu_764_p2;
wire   [3:0] zext_ln117_40_fu_886_p1;
wire   [0:0] or_ln117_343_fu_890_p2;
wire   [3:0] select_ln117_360_fu_896_p3;
wire   [0:0] or_ln117_344_fu_904_p2;
wire   [0:0] and_ln102_368_fu_776_p2;
wire   [3:0] select_ln117_361_fu_910_p3;
wire   [0:0] or_ln117_345_fu_918_p2;
wire   [3:0] select_ln117_362_fu_924_p3;
wire   [0:0] or_ln117_346_fu_932_p2;
wire   [0:0] and_ln102_369_fu_782_p2;
wire   [3:0] select_ln117_363_fu_938_p3;
wire   [0:0] or_ln117_347_fu_946_p2;
wire   [3:0] select_ln117_364_fu_952_p3;
wire   [0:0] or_ln117_348_fu_960_p2;
wire   [0:0] and_ln102_370_fu_794_p2;
wire   [3:0] select_ln117_365_fu_966_p3;
wire   [0:0] or_ln117_349_fu_974_p2;
wire   [3:0] select_ln117_366_fu_980_p3;
wire   [3:0] select_ln117_367_fu_988_p3;
wire   [4:0] zext_ln117_41_fu_996_p1;
wire   [0:0] xor_ln104_fu_1008_p2;
wire   [0:0] xor_ln104_176_fu_1018_p2;
wire   [0:0] and_ln102_350_fu_1013_p2;
wire   [0:0] xor_ln104_179_fu_1034_p2;
wire   [0:0] and_ln104_70_fu_1023_p2;
wire   [0:0] xor_ln104_180_fu_1050_p2;
wire   [0:0] and_ln102_353_fu_1029_p2;
wire   [0:0] and_ln104_73_fu_1039_p2;
wire   [0:0] and_ln102_354_fu_1045_p2;
wire   [0:0] and_ln104_74_fu_1055_p2;
wire   [0:0] and_ln102_359_fu_1061_p2;
wire   [0:0] xor_ln104_185_fu_1066_p2;
wire   [0:0] and_ln102_383_fu_1106_p2;
wire   [0:0] and_ln102_360_fu_1071_p2;
wire   [0:0] xor_ln104_186_fu_1076_p2;
wire   [0:0] and_ln102_384_fu_1122_p2;
wire   [0:0] and_ln102_361_fu_1081_p2;
wire   [0:0] xor_ln104_187_fu_1086_p2;
wire   [0:0] and_ln102_385_fu_1138_p2;
wire   [0:0] and_ln102_362_fu_1091_p2;
wire   [0:0] xor_ln104_188_fu_1096_p2;
wire   [0:0] and_ln102_386_fu_1154_p2;
wire   [0:0] and_ln102_371_fu_1101_p2;
wire   [0:0] or_ln117_350_fu_1165_p2;
wire   [0:0] or_ln117_351_fu_1170_p2;
wire   [0:0] and_ln102_372_fu_1111_p2;
wire   [4:0] select_ln117_369_fu_1175_p3;
wire   [0:0] or_ln117_352_fu_1182_p2;
wire   [4:0] select_ln117_370_fu_1188_p3;
wire   [0:0] or_ln117_353_fu_1196_p2;
wire   [0:0] and_ln102_373_fu_1117_p2;
wire   [4:0] select_ln117_371_fu_1201_p3;
wire   [0:0] or_ln117_354_fu_1209_p2;
wire   [4:0] select_ln117_372_fu_1215_p3;
wire   [0:0] or_ln117_355_fu_1223_p2;
wire   [0:0] and_ln102_374_fu_1127_p2;
wire   [4:0] select_ln117_373_fu_1229_p3;
wire   [0:0] or_ln117_356_fu_1237_p2;
wire   [4:0] select_ln117_374_fu_1243_p3;
wire   [0:0] or_ln117_357_fu_1251_p2;
wire   [0:0] and_ln102_375_fu_1133_p2;
wire   [4:0] select_ln117_375_fu_1256_p3;
wire   [0:0] or_ln117_358_fu_1264_p2;
wire   [4:0] select_ln117_376_fu_1270_p3;
wire   [0:0] or_ln117_359_fu_1278_p2;
wire   [0:0] and_ln102_376_fu_1143_p2;
wire   [4:0] select_ln117_377_fu_1284_p3;
wire   [0:0] or_ln117_360_fu_1292_p2;
wire   [4:0] select_ln117_378_fu_1298_p3;
wire   [0:0] or_ln117_361_fu_1306_p2;
wire   [0:0] and_ln102_377_fu_1149_p2;
wire   [4:0] select_ln117_379_fu_1312_p3;
wire   [0:0] or_ln117_362_fu_1320_p2;
wire   [4:0] select_ln117_380_fu_1326_p3;
wire   [0:0] or_ln117_363_fu_1334_p2;
wire   [0:0] and_ln102_378_fu_1159_p2;
wire   [4:0] select_ln117_381_fu_1340_p3;
wire   [0:0] or_ln117_364_fu_1348_p2;
wire   [4:0] select_ln117_382_fu_1354_p3;
wire   [10:0] agg_result_fu_1370_p65;
wire   [4:0] agg_result_fu_1370_p66;
wire   [10:0] agg_result_fu_1370_p67;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1370_p1;
wire   [4:0] agg_result_fu_1370_p3;
wire   [4:0] agg_result_fu_1370_p5;
wire   [4:0] agg_result_fu_1370_p7;
wire   [4:0] agg_result_fu_1370_p9;
wire   [4:0] agg_result_fu_1370_p11;
wire   [4:0] agg_result_fu_1370_p13;
wire   [4:0] agg_result_fu_1370_p15;
wire   [4:0] agg_result_fu_1370_p17;
wire   [4:0] agg_result_fu_1370_p19;
wire   [4:0] agg_result_fu_1370_p21;
wire   [4:0] agg_result_fu_1370_p23;
wire   [4:0] agg_result_fu_1370_p25;
wire   [4:0] agg_result_fu_1370_p27;
wire   [4:0] agg_result_fu_1370_p29;
wire   [4:0] agg_result_fu_1370_p31;
wire  signed [4:0] agg_result_fu_1370_p33;
wire  signed [4:0] agg_result_fu_1370_p35;
wire  signed [4:0] agg_result_fu_1370_p37;
wire  signed [4:0] agg_result_fu_1370_p39;
wire  signed [4:0] agg_result_fu_1370_p41;
wire  signed [4:0] agg_result_fu_1370_p43;
wire  signed [4:0] agg_result_fu_1370_p45;
wire  signed [4:0] agg_result_fu_1370_p47;
wire  signed [4:0] agg_result_fu_1370_p49;
wire  signed [4:0] agg_result_fu_1370_p51;
wire  signed [4:0] agg_result_fu_1370_p53;
wire  signed [4:0] agg_result_fu_1370_p55;
wire  signed [4:0] agg_result_fu_1370_p57;
wire  signed [4:0] agg_result_fu_1370_p59;
wire  signed [4:0] agg_result_fu_1370_p61;
wire  signed [4:0] agg_result_fu_1370_p63;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_65_5_11_1_1_x2 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 11 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 11 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 11 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 11 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 11 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 11 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 11 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 11 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 11 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 11 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 11 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 11 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 11 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 11 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 11 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 11 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 11 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 11 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 11 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 11 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 11 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 11 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 11 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 11 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 11 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 11 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 11 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 11 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 11 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 11 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 11 ),
    .CASE31( 5'h1F ),
    .din31_WIDTH( 11 ),
    .def_WIDTH( 11 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 11 ))
sparsemux_65_5_11_1_1_x2_U1822(
    .din0(11'd3),
    .din1(11'd1780),
    .din2(11'd1761),
    .din3(11'd1996),
    .din4(11'd756),
    .din5(11'd1560),
    .din6(11'd393),
    .din7(11'd2044),
    .din8(11'd383),
    .din9(11'd1709),
    .din10(11'd977),
    .din11(11'd2040),
    .din12(11'd175),
    .din13(11'd907),
    .din14(11'd115),
    .din15(11'd2006),
    .din16(11'd1882),
    .din17(11'd2039),
    .din18(11'd286),
    .din19(11'd1967),
    .din20(11'd1593),
    .din21(11'd1863),
    .din22(11'd1958),
    .din23(11'd993),
    .din24(11'd180),
    .din25(11'd2009),
    .din26(11'd106),
    .din27(11'd773),
    .din28(11'd404),
    .din29(11'd23),
    .din30(11'd1988),
    .din31(11'd0),
    .def(agg_result_fu_1370_p65),
    .sel(agg_result_fu_1370_p66),
    .dout(agg_result_fu_1370_p67)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_365_reg_1515 <= icmp_ln86_365_fu_448_p2;
        icmp_ln86_368_reg_1521 <= icmp_ln86_368_fu_466_p2;
        icmp_ln86_369_reg_1527 <= icmp_ln86_369_fu_472_p2;
        icmp_ln86_374_reg_1533 <= icmp_ln86_374_fu_512_p2;
        icmp_ln86_375_reg_1539 <= icmp_ln86_375_fu_518_p2;
        icmp_ln86_376_reg_1545 <= icmp_ln86_376_fu_524_p2;
        icmp_ln86_377_reg_1551 <= icmp_ln86_377_fu_530_p2;
        icmp_ln86_385_reg_1557 <= icmp_ln86_385_fu_578_p2;
        icmp_ln86_386_reg_1562 <= icmp_ln86_386_fu_584_p2;
        icmp_ln86_387_reg_1567 <= icmp_ln86_387_fu_590_p2;
        icmp_ln86_388_reg_1572 <= icmp_ln86_388_fu_596_p2;
        icmp_ln86_389_reg_1577 <= icmp_ln86_389_fu_602_p2;
        icmp_ln86_390_reg_1582 <= icmp_ln86_390_fu_608_p2;
        icmp_ln86_391_reg_1587 <= icmp_ln86_391_fu_614_p2;
        icmp_ln86_392_reg_1592 <= icmp_ln86_392_fu_620_p2;
        icmp_ln86_reg_1506 <= icmp_ln86_fu_436_p2;
        select_ln117_368_reg_1597 <= select_ln117_368_fu_1000_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1370_p65 = 'bx;

assign agg_result_fu_1370_p66 = ((or_ln117_364_fu_1348_p2[0:0] == 1'b1) ? select_ln117_382_fu_1354_p3 : 5'd31);

assign and_ln102_350_fu_1013_p2 = (xor_ln104_fu_1008_p2 & icmp_ln86_365_reg_1515);

assign and_ln102_351_fu_644_p2 = (icmp_ln86_366_fu_454_p2 & and_ln102_fu_626_p2);

assign and_ln102_352_fu_662_p2 = (icmp_ln86_367_fu_460_p2 & and_ln104_fu_638_p2);

assign and_ln102_353_fu_1029_p2 = (icmp_ln86_368_reg_1521 & and_ln102_350_fu_1013_p2);

assign and_ln102_354_fu_1045_p2 = (icmp_ln86_369_reg_1527 & and_ln104_70_fu_1023_p2);

assign and_ln102_355_fu_680_p2 = (icmp_ln86_370_fu_478_p2 & and_ln102_351_fu_644_p2);

assign and_ln102_356_fu_692_p2 = (icmp_ln86_371_fu_484_p2 & and_ln104_71_fu_656_p2);

assign and_ln102_357_fu_704_p2 = (icmp_ln86_1403_fu_500_p2 & and_ln102_352_fu_662_p2);

assign and_ln102_358_fu_716_p2 = (icmp_ln86_373_fu_506_p2 & and_ln104_72_fu_674_p2);

assign and_ln102_359_fu_1061_p2 = (icmp_ln86_374_reg_1533 & and_ln102_353_fu_1029_p2);

assign and_ln102_360_fu_1071_p2 = (icmp_ln86_375_reg_1539 & and_ln104_73_fu_1039_p2);

assign and_ln102_361_fu_1081_p2 = (icmp_ln86_376_reg_1545 & and_ln102_354_fu_1045_p2);

assign and_ln102_362_fu_1091_p2 = (icmp_ln86_377_reg_1551 & and_ln104_74_fu_1055_p2);

assign and_ln102_363_fu_728_p2 = (icmp_ln86_378_fu_536_p2 & and_ln102_355_fu_680_p2);

assign and_ln102_364_fu_740_p2 = (and_ln102_379_fu_734_p2 & and_ln102_351_fu_644_p2);

assign and_ln102_365_fu_746_p2 = (icmp_ln86_380_fu_548_p2 & and_ln102_356_fu_692_p2);

assign and_ln102_366_fu_758_p2 = (and_ln104_71_fu_656_p2 & and_ln102_380_fu_752_p2);

assign and_ln102_367_fu_764_p2 = (icmp_ln86_382_fu_560_p2 & and_ln102_357_fu_704_p2);

assign and_ln102_368_fu_776_p2 = (and_ln102_381_fu_770_p2 & and_ln102_352_fu_662_p2);

assign and_ln102_369_fu_782_p2 = (icmp_ln86_1403_fu_500_p2 & and_ln102_358_fu_716_p2);

assign and_ln102_370_fu_794_p2 = (and_ln104_72_fu_674_p2 & and_ln102_382_fu_788_p2);

assign and_ln102_371_fu_1101_p2 = (icmp_ln86_385_reg_1557 & and_ln102_359_fu_1061_p2);

assign and_ln102_372_fu_1111_p2 = (and_ln102_383_fu_1106_p2 & and_ln102_353_fu_1029_p2);

assign and_ln102_373_fu_1117_p2 = (icmp_ln86_387_reg_1567 & and_ln102_360_fu_1071_p2);

assign and_ln102_374_fu_1127_p2 = (and_ln104_73_fu_1039_p2 & and_ln102_384_fu_1122_p2);

assign and_ln102_375_fu_1133_p2 = (icmp_ln86_389_reg_1577 & and_ln102_361_fu_1081_p2);

assign and_ln102_376_fu_1143_p2 = (and_ln102_385_fu_1138_p2 & and_ln102_354_fu_1045_p2);

assign and_ln102_377_fu_1149_p2 = (icmp_ln86_391_reg_1587 & and_ln102_362_fu_1091_p2);

assign and_ln102_378_fu_1159_p2 = (and_ln104_74_fu_1055_p2 & and_ln102_386_fu_1154_p2);

assign and_ln102_379_fu_734_p2 = (xor_ln104_181_fu_686_p2 & icmp_ln86_379_fu_542_p2);

assign and_ln102_380_fu_752_p2 = (xor_ln104_182_fu_698_p2 & icmp_ln86_381_fu_554_p2);

assign and_ln102_381_fu_770_p2 = (xor_ln104_183_fu_710_p2 & icmp_ln86_383_fu_566_p2);

assign and_ln102_382_fu_788_p2 = (xor_ln104_184_fu_722_p2 & icmp_ln86_384_fu_572_p2);

assign and_ln102_383_fu_1106_p2 = (xor_ln104_185_fu_1066_p2 & icmp_ln86_386_reg_1562);

assign and_ln102_384_fu_1122_p2 = (xor_ln104_186_fu_1076_p2 & icmp_ln86_388_reg_1572);

assign and_ln102_385_fu_1138_p2 = (xor_ln104_187_fu_1086_p2 & icmp_ln86_390_reg_1582);

assign and_ln102_386_fu_1154_p2 = (xor_ln104_188_fu_1096_p2 & icmp_ln86_392_reg_1592);

assign and_ln102_fu_626_p2 = (icmp_ln86_fu_436_p2 & icmp_ln86_364_fu_442_p2);

assign and_ln104_70_fu_1023_p2 = (xor_ln104_fu_1008_p2 & xor_ln104_176_fu_1018_p2);

assign and_ln104_71_fu_656_p2 = (xor_ln104_177_fu_650_p2 & and_ln102_fu_626_p2);

assign and_ln104_72_fu_674_p2 = (xor_ln104_178_fu_668_p2 & and_ln104_fu_638_p2);

assign and_ln104_73_fu_1039_p2 = (xor_ln104_179_fu_1034_p2 & and_ln102_350_fu_1013_p2);

assign and_ln104_74_fu_1055_p2 = (xor_ln104_180_fu_1050_p2 & and_ln104_70_fu_1023_p2);

assign and_ln104_fu_638_p2 = (xor_ln104_175_fu_632_p2 & icmp_ln86_fu_436_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1370_p67;

assign icmp_ln86_1403_fu_500_p2 = (($signed(tmp_fu_490_p4) < $signed(17'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_364_fu_442_p2 = (($signed(x_32_val) < $signed(18'd734)) ? 1'b1 : 1'b0);

assign icmp_ln86_365_fu_448_p2 = (($signed(x_24_val) < $signed(18'd302)) ? 1'b1 : 1'b0);

assign icmp_ln86_366_fu_454_p2 = (($signed(x_43_val) < $signed(18'd93)) ? 1'b1 : 1'b0);

assign icmp_ln86_367_fu_460_p2 = (($signed(x_44_val) < $signed(18'd15)) ? 1'b1 : 1'b0);

assign icmp_ln86_368_fu_466_p2 = (($signed(x_21_val) < $signed(18'd179)) ? 1'b1 : 1'b0);

assign icmp_ln86_369_fu_472_p2 = (($signed(x_42_val) < $signed(18'd172)) ? 1'b1 : 1'b0);

assign icmp_ln86_370_fu_478_p2 = (($signed(x_34_val) < $signed(18'd452)) ? 1'b1 : 1'b0);

assign icmp_ln86_371_fu_484_p2 = (($signed(x_48_val) < $signed(18'd3249)) ? 1'b1 : 1'b0);

assign icmp_ln86_373_fu_506_p2 = (($signed(x_46_val) < $signed(18'd45)) ? 1'b1 : 1'b0);

assign icmp_ln86_374_fu_512_p2 = (($signed(x_27_val) < $signed(18'd30255)) ? 1'b1 : 1'b0);

assign icmp_ln86_375_fu_518_p2 = (($signed(x_43_val) < $signed(18'd76)) ? 1'b1 : 1'b0);

assign icmp_ln86_376_fu_524_p2 = (($signed(x_45_val) < $signed(18'd267)) ? 1'b1 : 1'b0);

assign icmp_ln86_377_fu_530_p2 = (($signed(x_48_val) < $signed(18'd1826)) ? 1'b1 : 1'b0);

assign icmp_ln86_378_fu_536_p2 = (($signed(x_32_val) < $signed(18'd710)) ? 1'b1 : 1'b0);

assign icmp_ln86_379_fu_542_p2 = (($signed(x_31_val) < $signed(18'd508)) ? 1'b1 : 1'b0);

assign icmp_ln86_380_fu_548_p2 = (($signed(x_9_val) < $signed(18'd1098)) ? 1'b1 : 1'b0);

assign icmp_ln86_381_fu_554_p2 = (($signed(x_12_val) < $signed(18'd258384)) ? 1'b1 : 1'b0);

assign icmp_ln86_382_fu_560_p2 = (($signed(x_47_val) < $signed(18'd49159)) ? 1'b1 : 1'b0);

assign icmp_ln86_383_fu_566_p2 = (($signed(x_37_val) < $signed(18'd21)) ? 1'b1 : 1'b0);

assign icmp_ln86_384_fu_572_p2 = (($signed(x_11_val) < $signed(18'd927)) ? 1'b1 : 1'b0);

assign icmp_ln86_385_fu_578_p2 = (($signed(x_18_val) < $signed(18'd1392)) ? 1'b1 : 1'b0);

assign icmp_ln86_386_fu_584_p2 = (($signed(x_2_val) < $signed(18'd725)) ? 1'b1 : 1'b0);

assign icmp_ln86_387_fu_590_p2 = (($signed(x_23_val) < $signed(18'd31)) ? 1'b1 : 1'b0);

assign icmp_ln86_388_fu_596_p2 = (($signed(x_33_val) < $signed(18'd952)) ? 1'b1 : 1'b0);

assign icmp_ln86_389_fu_602_p2 = (($signed(x_19_val) < $signed(18'd3854)) ? 1'b1 : 1'b0);

assign icmp_ln86_390_fu_608_p2 = (($signed(x_6_val) < $signed(18'd26777)) ? 1'b1 : 1'b0);

assign icmp_ln86_391_fu_614_p2 = (($signed(x_21_val) < $signed(18'd188)) ? 1'b1 : 1'b0);

assign icmp_ln86_392_fu_620_p2 = (($signed(x_43_val) < $signed(18'd85)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_436_p2 = (($signed(x_40_val) < $signed(18'd657)) ? 1'b1 : 1'b0);

assign or_ln117_340_fu_836_p2 = (and_ln102_365_fu_746_p2 | and_ln102_351_fu_644_p2);

assign or_ln117_341_fu_850_p2 = (and_ln102_356_fu_692_p2 | and_ln102_351_fu_644_p2);

assign or_ln117_342_fu_864_p2 = (or_ln117_341_fu_850_p2 | and_ln102_366_fu_758_p2);

assign or_ln117_343_fu_890_p2 = (and_ln102_fu_626_p2 | and_ln102_367_fu_764_p2);

assign or_ln117_344_fu_904_p2 = (and_ln102_fu_626_p2 | and_ln102_357_fu_704_p2);

assign or_ln117_345_fu_918_p2 = (or_ln117_344_fu_904_p2 | and_ln102_368_fu_776_p2);

assign or_ln117_346_fu_932_p2 = (and_ln102_fu_626_p2 | and_ln102_352_fu_662_p2);

assign or_ln117_347_fu_946_p2 = (or_ln117_346_fu_932_p2 | and_ln102_369_fu_782_p2);

assign or_ln117_348_fu_960_p2 = (or_ln117_346_fu_932_p2 | and_ln102_358_fu_716_p2);

assign or_ln117_349_fu_974_p2 = (or_ln117_348_fu_960_p2 | and_ln102_370_fu_794_p2);

assign or_ln117_350_fu_1165_p2 = (icmp_ln86_reg_1506 | and_ln102_371_fu_1101_p2);

assign or_ln117_351_fu_1170_p2 = (icmp_ln86_reg_1506 | and_ln102_359_fu_1061_p2);

assign or_ln117_352_fu_1182_p2 = (or_ln117_351_fu_1170_p2 | and_ln102_372_fu_1111_p2);

assign or_ln117_353_fu_1196_p2 = (icmp_ln86_reg_1506 | and_ln102_353_fu_1029_p2);

assign or_ln117_354_fu_1209_p2 = (or_ln117_353_fu_1196_p2 | and_ln102_373_fu_1117_p2);

assign or_ln117_355_fu_1223_p2 = (or_ln117_353_fu_1196_p2 | and_ln102_360_fu_1071_p2);

assign or_ln117_356_fu_1237_p2 = (or_ln117_355_fu_1223_p2 | and_ln102_374_fu_1127_p2);

assign or_ln117_357_fu_1251_p2 = (icmp_ln86_reg_1506 | and_ln102_350_fu_1013_p2);

assign or_ln117_358_fu_1264_p2 = (or_ln117_357_fu_1251_p2 | and_ln102_375_fu_1133_p2);

assign or_ln117_359_fu_1278_p2 = (or_ln117_357_fu_1251_p2 | and_ln102_361_fu_1081_p2);

assign or_ln117_360_fu_1292_p2 = (or_ln117_359_fu_1278_p2 | and_ln102_376_fu_1143_p2);

assign or_ln117_361_fu_1306_p2 = (or_ln117_357_fu_1251_p2 | and_ln102_354_fu_1045_p2);

assign or_ln117_362_fu_1320_p2 = (or_ln117_361_fu_1306_p2 | and_ln102_377_fu_1149_p2);

assign or_ln117_363_fu_1334_p2 = (or_ln117_361_fu_1306_p2 | and_ln102_362_fu_1091_p2);

assign or_ln117_364_fu_1348_p2 = (or_ln117_363_fu_1334_p2 | and_ln102_378_fu_1159_p2);

assign or_ln117_fu_810_p2 = (and_ln102_364_fu_740_p2 | and_ln102_355_fu_680_p2);

assign select_ln117_355_fu_824_p3 = ((or_ln117_fu_810_p2[0:0] == 1'b1) ? select_ln117_fu_816_p3 : 2'd3);

assign select_ln117_356_fu_842_p3 = ((and_ln102_351_fu_644_p2[0:0] == 1'b1) ? zext_ln117_39_fu_832_p1 : 3'd4);

assign select_ln117_357_fu_856_p3 = ((or_ln117_340_fu_836_p2[0:0] == 1'b1) ? select_ln117_356_fu_842_p3 : 3'd5);

assign select_ln117_358_fu_870_p3 = ((or_ln117_341_fu_850_p2[0:0] == 1'b1) ? select_ln117_357_fu_856_p3 : 3'd6);

assign select_ln117_359_fu_878_p3 = ((or_ln117_342_fu_864_p2[0:0] == 1'b1) ? select_ln117_358_fu_870_p3 : 3'd7);

assign select_ln117_360_fu_896_p3 = ((and_ln102_fu_626_p2[0:0] == 1'b1) ? zext_ln117_40_fu_886_p1 : 4'd8);

assign select_ln117_361_fu_910_p3 = ((or_ln117_343_fu_890_p2[0:0] == 1'b1) ? select_ln117_360_fu_896_p3 : 4'd9);

assign select_ln117_362_fu_924_p3 = ((or_ln117_344_fu_904_p2[0:0] == 1'b1) ? select_ln117_361_fu_910_p3 : 4'd10);

assign select_ln117_363_fu_938_p3 = ((or_ln117_345_fu_918_p2[0:0] == 1'b1) ? select_ln117_362_fu_924_p3 : 4'd11);

assign select_ln117_364_fu_952_p3 = ((or_ln117_346_fu_932_p2[0:0] == 1'b1) ? select_ln117_363_fu_938_p3 : 4'd12);

assign select_ln117_365_fu_966_p3 = ((or_ln117_347_fu_946_p2[0:0] == 1'b1) ? select_ln117_364_fu_952_p3 : 4'd13);

assign select_ln117_366_fu_980_p3 = ((or_ln117_348_fu_960_p2[0:0] == 1'b1) ? select_ln117_365_fu_966_p3 : 4'd14);

assign select_ln117_367_fu_988_p3 = ((or_ln117_349_fu_974_p2[0:0] == 1'b1) ? select_ln117_366_fu_980_p3 : 4'd15);

assign select_ln117_368_fu_1000_p3 = ((icmp_ln86_fu_436_p2[0:0] == 1'b1) ? zext_ln117_41_fu_996_p1 : 5'd16);

assign select_ln117_369_fu_1175_p3 = ((or_ln117_350_fu_1165_p2[0:0] == 1'b1) ? select_ln117_368_reg_1597 : 5'd17);

assign select_ln117_370_fu_1188_p3 = ((or_ln117_351_fu_1170_p2[0:0] == 1'b1) ? select_ln117_369_fu_1175_p3 : 5'd18);

assign select_ln117_371_fu_1201_p3 = ((or_ln117_352_fu_1182_p2[0:0] == 1'b1) ? select_ln117_370_fu_1188_p3 : 5'd19);

assign select_ln117_372_fu_1215_p3 = ((or_ln117_353_fu_1196_p2[0:0] == 1'b1) ? select_ln117_371_fu_1201_p3 : 5'd20);

assign select_ln117_373_fu_1229_p3 = ((or_ln117_354_fu_1209_p2[0:0] == 1'b1) ? select_ln117_372_fu_1215_p3 : 5'd21);

assign select_ln117_374_fu_1243_p3 = ((or_ln117_355_fu_1223_p2[0:0] == 1'b1) ? select_ln117_373_fu_1229_p3 : 5'd22);

assign select_ln117_375_fu_1256_p3 = ((or_ln117_356_fu_1237_p2[0:0] == 1'b1) ? select_ln117_374_fu_1243_p3 : 5'd23);

assign select_ln117_376_fu_1270_p3 = ((or_ln117_357_fu_1251_p2[0:0] == 1'b1) ? select_ln117_375_fu_1256_p3 : 5'd24);

assign select_ln117_377_fu_1284_p3 = ((or_ln117_358_fu_1264_p2[0:0] == 1'b1) ? select_ln117_376_fu_1270_p3 : 5'd25);

assign select_ln117_378_fu_1298_p3 = ((or_ln117_359_fu_1278_p2[0:0] == 1'b1) ? select_ln117_377_fu_1284_p3 : 5'd26);

assign select_ln117_379_fu_1312_p3 = ((or_ln117_360_fu_1292_p2[0:0] == 1'b1) ? select_ln117_378_fu_1298_p3 : 5'd27);

assign select_ln117_380_fu_1326_p3 = ((or_ln117_361_fu_1306_p2[0:0] == 1'b1) ? select_ln117_379_fu_1312_p3 : 5'd28);

assign select_ln117_381_fu_1340_p3 = ((or_ln117_362_fu_1320_p2[0:0] == 1'b1) ? select_ln117_380_fu_1326_p3 : 5'd29);

assign select_ln117_382_fu_1354_p3 = ((or_ln117_363_fu_1334_p2[0:0] == 1'b1) ? select_ln117_381_fu_1340_p3 : 5'd30);

assign select_ln117_fu_816_p3 = ((and_ln102_355_fu_680_p2[0:0] == 1'b1) ? zext_ln117_fu_806_p1 : 2'd2);

assign tmp_fu_490_p4 = {{x_38_val[17:1]}};

assign xor_ln104_175_fu_632_p2 = (icmp_ln86_364_fu_442_p2 ^ 1'd1);

assign xor_ln104_176_fu_1018_p2 = (icmp_ln86_365_reg_1515 ^ 1'd1);

assign xor_ln104_177_fu_650_p2 = (icmp_ln86_366_fu_454_p2 ^ 1'd1);

assign xor_ln104_178_fu_668_p2 = (icmp_ln86_367_fu_460_p2 ^ 1'd1);

assign xor_ln104_179_fu_1034_p2 = (icmp_ln86_368_reg_1521 ^ 1'd1);

assign xor_ln104_180_fu_1050_p2 = (icmp_ln86_369_reg_1527 ^ 1'd1);

assign xor_ln104_181_fu_686_p2 = (icmp_ln86_370_fu_478_p2 ^ 1'd1);

assign xor_ln104_182_fu_698_p2 = (icmp_ln86_371_fu_484_p2 ^ 1'd1);

assign xor_ln104_183_fu_710_p2 = (icmp_ln86_1403_fu_500_p2 ^ 1'd1);

assign xor_ln104_184_fu_722_p2 = (icmp_ln86_373_fu_506_p2 ^ 1'd1);

assign xor_ln104_185_fu_1066_p2 = (icmp_ln86_374_reg_1533 ^ 1'd1);

assign xor_ln104_186_fu_1076_p2 = (icmp_ln86_375_reg_1539 ^ 1'd1);

assign xor_ln104_187_fu_1086_p2 = (icmp_ln86_376_reg_1545 ^ 1'd1);

assign xor_ln104_188_fu_1096_p2 = (icmp_ln86_377_reg_1551 ^ 1'd1);

assign xor_ln104_fu_1008_p2 = (icmp_ln86_reg_1506 ^ 1'd1);

assign xor_ln117_fu_800_p2 = (1'd1 ^ and_ln102_363_fu_728_p2);

assign zext_ln117_39_fu_832_p1 = select_ln117_355_fu_824_p3;

assign zext_ln117_40_fu_886_p1 = select_ln117_359_fu_878_p3;

assign zext_ln117_41_fu_996_p1 = select_ln117_367_fu_988_p3;

assign zext_ln117_fu_806_p1 = xor_ln117_fu_800_p2;

endmodule //my_prj_decision_function_14
