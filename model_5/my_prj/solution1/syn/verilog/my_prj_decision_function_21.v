// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_21 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_7_val,
        x_9_val,
        x_12_val,
        x_15_val,
        x_17_val,
        x_19_val,
        x_21_val,
        x_25_val,
        x_27_val,
        x_29_val,
        x_33_val,
        x_35_val,
        x_36_val,
        x_47_val,
        x_48_val,
        x_49_val,
        x_50_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_7_val;
input  [17:0] x_9_val;
input  [17:0] x_12_val;
input  [17:0] x_15_val;
input  [17:0] x_17_val;
input  [17:0] x_19_val;
input  [17:0] x_21_val;
input  [17:0] x_25_val;
input  [17:0] x_27_val;
input  [17:0] x_29_val;
input  [17:0] x_33_val;
input  [17:0] x_35_val;
input  [17:0] x_36_val;
input  [17:0] x_47_val;
input  [17:0] x_48_val;
input  [17:0] x_49_val;
input  [17:0] x_50_val;
input  [17:0] x_52_val;
output  [10:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_384_p2;
reg   [0:0] icmp_ln86_reg_1450;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_543_fu_396_p2;
reg   [0:0] icmp_ln86_543_reg_1459;
wire   [0:0] icmp_ln86_546_fu_414_p2;
reg   [0:0] icmp_ln86_546_reg_1465;
wire   [0:0] icmp_ln86_547_fu_420_p2;
reg   [0:0] icmp_ln86_547_reg_1471;
wire   [0:0] icmp_ln86_552_fu_450_p2;
reg   [0:0] icmp_ln86_552_reg_1477;
wire   [0:0] icmp_ln86_553_fu_456_p2;
reg   [0:0] icmp_ln86_553_reg_1483;
wire   [0:0] icmp_ln86_554_fu_462_p2;
reg   [0:0] icmp_ln86_554_reg_1489;
wire   [0:0] icmp_ln86_555_fu_468_p2;
reg   [0:0] icmp_ln86_555_reg_1495;
wire   [0:0] icmp_ln86_564_fu_522_p2;
reg   [0:0] icmp_ln86_564_reg_1501;
wire   [0:0] icmp_ln86_565_fu_528_p2;
reg   [0:0] icmp_ln86_565_reg_1506;
wire   [0:0] icmp_ln86_566_fu_534_p2;
reg   [0:0] icmp_ln86_566_reg_1511;
wire   [0:0] icmp_ln86_567_fu_540_p2;
reg   [0:0] icmp_ln86_567_reg_1516;
wire   [0:0] icmp_ln86_568_fu_546_p2;
reg   [0:0] icmp_ln86_568_reg_1521;
wire   [0:0] icmp_ln86_569_fu_552_p2;
reg   [0:0] icmp_ln86_569_reg_1526;
wire   [0:0] icmp_ln86_570_fu_558_p2;
reg   [0:0] icmp_ln86_570_reg_1531;
wire   [0:0] icmp_ln86_571_fu_564_p2;
reg   [0:0] icmp_ln86_571_reg_1536;
wire   [4:0] select_ln117_540_fu_944_p3;
reg   [4:0] select_ln117_540_reg_1541;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln86_542_fu_390_p2;
wire   [0:0] xor_ln104_262_fu_576_p2;
wire   [0:0] icmp_ln86_544_fu_402_p2;
wire   [0:0] and_ln102_fu_570_p2;
wire   [0:0] xor_ln104_264_fu_594_p2;
wire   [0:0] icmp_ln86_545_fu_408_p2;
wire   [0:0] and_ln104_fu_582_p2;
wire   [0:0] xor_ln104_265_fu_612_p2;
wire   [0:0] icmp_ln86_548_fu_426_p2;
wire   [0:0] and_ln102_522_fu_588_p2;
wire   [0:0] icmp_ln86_549_fu_432_p2;
wire   [0:0] and_ln104_109_fu_600_p2;
wire   [0:0] icmp_ln86_550_fu_438_p2;
wire   [0:0] and_ln102_523_fu_606_p2;
wire   [0:0] icmp_ln86_551_fu_444_p2;
wire   [0:0] and_ln104_110_fu_618_p2;
wire   [0:0] icmp_ln86_556_fu_474_p2;
wire   [0:0] and_ln102_526_fu_624_p2;
wire   [0:0] icmp_ln86_557_fu_480_p2;
wire   [0:0] xor_ln104_268_fu_630_p2;
wire   [0:0] and_ln102_550_fu_678_p2;
wire   [0:0] icmp_ln86_558_fu_486_p2;
wire   [0:0] and_ln102_527_fu_636_p2;
wire   [0:0] icmp_ln86_559_fu_492_p2;
wire   [0:0] xor_ln104_269_fu_642_p2;
wire   [0:0] and_ln102_551_fu_696_p2;
wire   [0:0] icmp_ln86_560_fu_498_p2;
wire   [0:0] and_ln102_528_fu_648_p2;
wire   [0:0] icmp_ln86_561_fu_504_p2;
wire   [0:0] xor_ln104_270_fu_654_p2;
wire   [0:0] and_ln102_552_fu_714_p2;
wire   [0:0] icmp_ln86_562_fu_510_p2;
wire   [0:0] and_ln102_529_fu_660_p2;
wire   [0:0] icmp_ln86_563_fu_516_p2;
wire   [0:0] xor_ln104_271_fu_666_p2;
wire   [0:0] and_ln102_553_fu_732_p2;
wire   [0:0] and_ln102_534_fu_672_p2;
wire   [0:0] xor_ln117_fu_744_p2;
wire   [0:0] and_ln102_535_fu_684_p2;
wire   [1:0] zext_ln117_fu_750_p1;
wire   [0:0] or_ln117_fu_754_p2;
wire   [1:0] select_ln117_fu_760_p3;
wire   [1:0] select_ln117_527_fu_768_p3;
wire   [0:0] and_ln102_536_fu_690_p2;
wire   [2:0] zext_ln117_60_fu_776_p1;
wire   [0:0] or_ln117_506_fu_780_p2;
wire   [2:0] select_ln117_528_fu_786_p3;
wire   [0:0] or_ln117_507_fu_794_p2;
wire   [0:0] and_ln102_537_fu_702_p2;
wire   [2:0] select_ln117_529_fu_800_p3;
wire   [0:0] or_ln117_508_fu_808_p2;
wire   [2:0] select_ln117_530_fu_814_p3;
wire   [2:0] select_ln117_531_fu_822_p3;
wire   [0:0] and_ln102_538_fu_708_p2;
wire   [3:0] zext_ln117_61_fu_830_p1;
wire   [0:0] or_ln117_509_fu_834_p2;
wire   [3:0] select_ln117_532_fu_840_p3;
wire   [0:0] or_ln117_510_fu_848_p2;
wire   [0:0] and_ln102_539_fu_720_p2;
wire   [3:0] select_ln117_533_fu_854_p3;
wire   [0:0] or_ln117_511_fu_862_p2;
wire   [3:0] select_ln117_534_fu_868_p3;
wire   [0:0] or_ln117_512_fu_876_p2;
wire   [0:0] and_ln102_540_fu_726_p2;
wire   [3:0] select_ln117_535_fu_882_p3;
wire   [0:0] or_ln117_513_fu_890_p2;
wire   [3:0] select_ln117_536_fu_896_p3;
wire   [0:0] or_ln117_514_fu_904_p2;
wire   [0:0] and_ln102_541_fu_738_p2;
wire   [3:0] select_ln117_537_fu_910_p3;
wire   [0:0] or_ln117_515_fu_918_p2;
wire   [3:0] select_ln117_538_fu_924_p3;
wire   [3:0] select_ln117_539_fu_932_p3;
wire   [4:0] zext_ln117_62_fu_940_p1;
wire   [0:0] xor_ln104_fu_952_p2;
wire   [0:0] xor_ln104_263_fu_962_p2;
wire   [0:0] and_ln102_521_fu_957_p2;
wire   [0:0] xor_ln104_266_fu_978_p2;
wire   [0:0] and_ln104_108_fu_967_p2;
wire   [0:0] xor_ln104_267_fu_994_p2;
wire   [0:0] and_ln102_524_fu_973_p2;
wire   [0:0] and_ln104_111_fu_983_p2;
wire   [0:0] and_ln102_525_fu_989_p2;
wire   [0:0] and_ln104_112_fu_999_p2;
wire   [0:0] and_ln102_530_fu_1005_p2;
wire   [0:0] xor_ln104_272_fu_1010_p2;
wire   [0:0] and_ln102_554_fu_1050_p2;
wire   [0:0] and_ln102_531_fu_1015_p2;
wire   [0:0] xor_ln104_273_fu_1020_p2;
wire   [0:0] and_ln102_555_fu_1066_p2;
wire   [0:0] and_ln102_532_fu_1025_p2;
wire   [0:0] xor_ln104_274_fu_1030_p2;
wire   [0:0] and_ln102_556_fu_1082_p2;
wire   [0:0] and_ln102_533_fu_1035_p2;
wire   [0:0] xor_ln104_275_fu_1040_p2;
wire   [0:0] and_ln102_557_fu_1098_p2;
wire   [0:0] and_ln102_542_fu_1045_p2;
wire   [0:0] or_ln117_516_fu_1109_p2;
wire   [0:0] or_ln117_517_fu_1114_p2;
wire   [0:0] and_ln102_543_fu_1055_p2;
wire   [4:0] select_ln117_541_fu_1119_p3;
wire   [0:0] or_ln117_518_fu_1126_p2;
wire   [4:0] select_ln117_542_fu_1132_p3;
wire   [0:0] or_ln117_519_fu_1140_p2;
wire   [0:0] and_ln102_544_fu_1061_p2;
wire   [4:0] select_ln117_543_fu_1145_p3;
wire   [0:0] or_ln117_520_fu_1153_p2;
wire   [4:0] select_ln117_544_fu_1159_p3;
wire   [0:0] or_ln117_521_fu_1167_p2;
wire   [0:0] and_ln102_545_fu_1071_p2;
wire   [4:0] select_ln117_545_fu_1173_p3;
wire   [0:0] or_ln117_522_fu_1181_p2;
wire   [4:0] select_ln117_546_fu_1187_p3;
wire   [0:0] or_ln117_523_fu_1195_p2;
wire   [0:0] and_ln102_546_fu_1077_p2;
wire   [4:0] select_ln117_547_fu_1200_p3;
wire   [0:0] or_ln117_524_fu_1208_p2;
wire   [4:0] select_ln117_548_fu_1214_p3;
wire   [0:0] or_ln117_525_fu_1222_p2;
wire   [0:0] and_ln102_547_fu_1087_p2;
wire   [4:0] select_ln117_549_fu_1228_p3;
wire   [0:0] or_ln117_526_fu_1236_p2;
wire   [4:0] select_ln117_550_fu_1242_p3;
wire   [0:0] or_ln117_527_fu_1250_p2;
wire   [0:0] and_ln102_548_fu_1093_p2;
wire   [4:0] select_ln117_551_fu_1256_p3;
wire   [0:0] or_ln117_528_fu_1264_p2;
wire   [4:0] select_ln117_552_fu_1270_p3;
wire   [0:0] or_ln117_529_fu_1278_p2;
wire   [0:0] and_ln102_549_fu_1103_p2;
wire   [4:0] select_ln117_553_fu_1284_p3;
wire   [0:0] or_ln117_530_fu_1292_p2;
wire   [4:0] select_ln117_554_fu_1298_p3;
wire   [10:0] agg_result_fu_1314_p65;
wire   [4:0] agg_result_fu_1314_p66;
wire   [10:0] agg_result_fu_1314_p67;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1314_p1;
wire   [4:0] agg_result_fu_1314_p3;
wire   [4:0] agg_result_fu_1314_p5;
wire   [4:0] agg_result_fu_1314_p7;
wire   [4:0] agg_result_fu_1314_p9;
wire   [4:0] agg_result_fu_1314_p11;
wire   [4:0] agg_result_fu_1314_p13;
wire   [4:0] agg_result_fu_1314_p15;
wire   [4:0] agg_result_fu_1314_p17;
wire   [4:0] agg_result_fu_1314_p19;
wire   [4:0] agg_result_fu_1314_p21;
wire   [4:0] agg_result_fu_1314_p23;
wire   [4:0] agg_result_fu_1314_p25;
wire   [4:0] agg_result_fu_1314_p27;
wire   [4:0] agg_result_fu_1314_p29;
wire   [4:0] agg_result_fu_1314_p31;
wire  signed [4:0] agg_result_fu_1314_p33;
wire  signed [4:0] agg_result_fu_1314_p35;
wire  signed [4:0] agg_result_fu_1314_p37;
wire  signed [4:0] agg_result_fu_1314_p39;
wire  signed [4:0] agg_result_fu_1314_p41;
wire  signed [4:0] agg_result_fu_1314_p43;
wire  signed [4:0] agg_result_fu_1314_p45;
wire  signed [4:0] agg_result_fu_1314_p47;
wire  signed [4:0] agg_result_fu_1314_p49;
wire  signed [4:0] agg_result_fu_1314_p51;
wire  signed [4:0] agg_result_fu_1314_p53;
wire  signed [4:0] agg_result_fu_1314_p55;
wire  signed [4:0] agg_result_fu_1314_p57;
wire  signed [4:0] agg_result_fu_1314_p59;
wire  signed [4:0] agg_result_fu_1314_p61;
wire  signed [4:0] agg_result_fu_1314_p63;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_65_5_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 11 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 11 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 11 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 11 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 11 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 11 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 11 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 11 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 11 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 11 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 11 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 11 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 11 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 11 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 11 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 11 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 11 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 11 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 11 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 11 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 11 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 11 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 11 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 11 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 11 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 11 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 11 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 11 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 11 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 11 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 11 ),
    .CASE31( 5'h1F ),
    .din31_WIDTH( 11 ),
    .def_WIDTH( 11 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 11 ))
sparsemux_65_5_11_1_1_U139(
    .din0(11'd1619),
    .din1(11'd164),
    .din2(11'd1569),
    .din3(11'd1898),
    .din4(11'd139),
    .din5(11'd1822),
    .din6(11'd1599),
    .din7(11'd1735),
    .din8(11'd283),
    .din9(11'd1873),
    .din10(11'd1806),
    .din11(11'd541),
    .din12(11'd523),
    .din13(11'd1883),
    .din14(11'd2024),
    .din15(11'd1520),
    .din16(11'd1202),
    .din17(11'd1476),
    .din18(11'd268),
    .din19(11'd1604),
    .din20(11'd561),
    .din21(11'd1860),
    .din22(11'd1813),
    .din23(11'd1538),
    .din24(11'd1496),
    .din25(11'd287),
    .din26(11'd1539),
    .din27(11'd39),
    .din28(11'd663),
    .din29(11'd1660),
    .din30(11'd1503),
    .din31(11'd195),
    .def(agg_result_fu_1314_p65),
    .sel(agg_result_fu_1314_p66),
    .dout(agg_result_fu_1314_p67)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_543_reg_1459 <= icmp_ln86_543_fu_396_p2;
        icmp_ln86_546_reg_1465 <= icmp_ln86_546_fu_414_p2;
        icmp_ln86_547_reg_1471 <= icmp_ln86_547_fu_420_p2;
        icmp_ln86_552_reg_1477 <= icmp_ln86_552_fu_450_p2;
        icmp_ln86_553_reg_1483 <= icmp_ln86_553_fu_456_p2;
        icmp_ln86_554_reg_1489 <= icmp_ln86_554_fu_462_p2;
        icmp_ln86_555_reg_1495 <= icmp_ln86_555_fu_468_p2;
        icmp_ln86_564_reg_1501 <= icmp_ln86_564_fu_522_p2;
        icmp_ln86_565_reg_1506 <= icmp_ln86_565_fu_528_p2;
        icmp_ln86_566_reg_1511 <= icmp_ln86_566_fu_534_p2;
        icmp_ln86_567_reg_1516 <= icmp_ln86_567_fu_540_p2;
        icmp_ln86_568_reg_1521 <= icmp_ln86_568_fu_546_p2;
        icmp_ln86_569_reg_1526 <= icmp_ln86_569_fu_552_p2;
        icmp_ln86_570_reg_1531 <= icmp_ln86_570_fu_558_p2;
        icmp_ln86_571_reg_1536 <= icmp_ln86_571_fu_564_p2;
        icmp_ln86_reg_1450 <= icmp_ln86_fu_384_p2;
        select_ln117_540_reg_1541 <= select_ln117_540_fu_944_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1314_p65 = 'bx;

assign agg_result_fu_1314_p66 = ((or_ln117_530_fu_1292_p2[0:0] == 1'b1) ? select_ln117_554_fu_1298_p3 : 5'd31);

assign and_ln102_521_fu_957_p2 = (xor_ln104_fu_952_p2 & icmp_ln86_543_reg_1459);

assign and_ln102_522_fu_588_p2 = (icmp_ln86_544_fu_402_p2 & and_ln102_fu_570_p2);

assign and_ln102_523_fu_606_p2 = (icmp_ln86_545_fu_408_p2 & and_ln104_fu_582_p2);

assign and_ln102_524_fu_973_p2 = (icmp_ln86_546_reg_1465 & and_ln102_521_fu_957_p2);

assign and_ln102_525_fu_989_p2 = (icmp_ln86_547_reg_1471 & and_ln104_108_fu_967_p2);

assign and_ln102_526_fu_624_p2 = (icmp_ln86_548_fu_426_p2 & and_ln102_522_fu_588_p2);

assign and_ln102_527_fu_636_p2 = (icmp_ln86_549_fu_432_p2 & and_ln104_109_fu_600_p2);

assign and_ln102_528_fu_648_p2 = (icmp_ln86_550_fu_438_p2 & and_ln102_523_fu_606_p2);

assign and_ln102_529_fu_660_p2 = (icmp_ln86_551_fu_444_p2 & and_ln104_110_fu_618_p2);

assign and_ln102_530_fu_1005_p2 = (icmp_ln86_552_reg_1477 & and_ln102_524_fu_973_p2);

assign and_ln102_531_fu_1015_p2 = (icmp_ln86_553_reg_1483 & and_ln104_111_fu_983_p2);

assign and_ln102_532_fu_1025_p2 = (icmp_ln86_554_reg_1489 & and_ln102_525_fu_989_p2);

assign and_ln102_533_fu_1035_p2 = (icmp_ln86_555_reg_1495 & and_ln104_112_fu_999_p2);

assign and_ln102_534_fu_672_p2 = (icmp_ln86_556_fu_474_p2 & and_ln102_526_fu_624_p2);

assign and_ln102_535_fu_684_p2 = (and_ln102_550_fu_678_p2 & and_ln102_522_fu_588_p2);

assign and_ln102_536_fu_690_p2 = (icmp_ln86_558_fu_486_p2 & and_ln102_527_fu_636_p2);

assign and_ln102_537_fu_702_p2 = (and_ln104_109_fu_600_p2 & and_ln102_551_fu_696_p2);

assign and_ln102_538_fu_708_p2 = (icmp_ln86_560_fu_498_p2 & and_ln102_528_fu_648_p2);

assign and_ln102_539_fu_720_p2 = (and_ln102_552_fu_714_p2 & and_ln102_523_fu_606_p2);

assign and_ln102_540_fu_726_p2 = (icmp_ln86_562_fu_510_p2 & and_ln102_529_fu_660_p2);

assign and_ln102_541_fu_738_p2 = (and_ln104_110_fu_618_p2 & and_ln102_553_fu_732_p2);

assign and_ln102_542_fu_1045_p2 = (icmp_ln86_564_reg_1501 & and_ln102_530_fu_1005_p2);

assign and_ln102_543_fu_1055_p2 = (and_ln102_554_fu_1050_p2 & and_ln102_524_fu_973_p2);

assign and_ln102_544_fu_1061_p2 = (icmp_ln86_566_reg_1511 & and_ln102_531_fu_1015_p2);

assign and_ln102_545_fu_1071_p2 = (and_ln104_111_fu_983_p2 & and_ln102_555_fu_1066_p2);

assign and_ln102_546_fu_1077_p2 = (icmp_ln86_568_reg_1521 & and_ln102_532_fu_1025_p2);

assign and_ln102_547_fu_1087_p2 = (and_ln102_556_fu_1082_p2 & and_ln102_525_fu_989_p2);

assign and_ln102_548_fu_1093_p2 = (icmp_ln86_570_reg_1531 & and_ln102_533_fu_1035_p2);

assign and_ln102_549_fu_1103_p2 = (and_ln104_112_fu_999_p2 & and_ln102_557_fu_1098_p2);

assign and_ln102_550_fu_678_p2 = (xor_ln104_268_fu_630_p2 & icmp_ln86_557_fu_480_p2);

assign and_ln102_551_fu_696_p2 = (xor_ln104_269_fu_642_p2 & icmp_ln86_559_fu_492_p2);

assign and_ln102_552_fu_714_p2 = (xor_ln104_270_fu_654_p2 & icmp_ln86_561_fu_504_p2);

assign and_ln102_553_fu_732_p2 = (xor_ln104_271_fu_666_p2 & icmp_ln86_563_fu_516_p2);

assign and_ln102_554_fu_1050_p2 = (xor_ln104_272_fu_1010_p2 & icmp_ln86_565_reg_1506);

assign and_ln102_555_fu_1066_p2 = (xor_ln104_273_fu_1020_p2 & icmp_ln86_567_reg_1516);

assign and_ln102_556_fu_1082_p2 = (xor_ln104_274_fu_1030_p2 & icmp_ln86_569_reg_1526);

assign and_ln102_557_fu_1098_p2 = (xor_ln104_275_fu_1040_p2 & icmp_ln86_571_reg_1536);

assign and_ln102_fu_570_p2 = (icmp_ln86_fu_384_p2 & icmp_ln86_542_fu_390_p2);

assign and_ln104_108_fu_967_p2 = (xor_ln104_fu_952_p2 & xor_ln104_263_fu_962_p2);

assign and_ln104_109_fu_600_p2 = (xor_ln104_264_fu_594_p2 & and_ln102_fu_570_p2);

assign and_ln104_110_fu_618_p2 = (xor_ln104_265_fu_612_p2 & and_ln104_fu_582_p2);

assign and_ln104_111_fu_983_p2 = (xor_ln104_266_fu_978_p2 & and_ln102_521_fu_957_p2);

assign and_ln104_112_fu_999_p2 = (xor_ln104_267_fu_994_p2 & and_ln104_108_fu_967_p2);

assign and_ln104_fu_582_p2 = (xor_ln104_262_fu_576_p2 & icmp_ln86_fu_384_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1314_p67;

assign icmp_ln86_542_fu_390_p2 = (($signed(x_50_val) < $signed(18'd85218)) ? 1'b1 : 1'b0);

assign icmp_ln86_543_fu_396_p2 = (($signed(x_36_val) < $signed(18'd11)) ? 1'b1 : 1'b0);

assign icmp_ln86_544_fu_402_p2 = (($signed(x_27_val) < $signed(18'd2737)) ? 1'b1 : 1'b0);

assign icmp_ln86_545_fu_408_p2 = (($signed(x_50_val) < $signed(18'd98216)) ? 1'b1 : 1'b0);

assign icmp_ln86_546_fu_414_p2 = (($signed(x_49_val) < $signed(18'd87924)) ? 1'b1 : 1'b0);

assign icmp_ln86_547_fu_420_p2 = (($signed(x_33_val) < $signed(18'd384)) ? 1'b1 : 1'b0);

assign icmp_ln86_548_fu_426_p2 = (($signed(x_21_val) < $signed(18'd179)) ? 1'b1 : 1'b0);

assign icmp_ln86_549_fu_432_p2 = (($signed(x_47_val) < $signed(18'd34961)) ? 1'b1 : 1'b0);

assign icmp_ln86_550_fu_438_p2 = (($signed(x_7_val) < $signed(18'd7416)) ? 1'b1 : 1'b0);

assign icmp_ln86_551_fu_444_p2 = (($signed(x_9_val) < $signed(18'd670)) ? 1'b1 : 1'b0);

assign icmp_ln86_552_fu_450_p2 = (($signed(x_1_val) < $signed(18'd239865)) ? 1'b1 : 1'b0);

assign icmp_ln86_553_fu_456_p2 = (($signed(x_52_val) < $signed(18'd59905)) ? 1'b1 : 1'b0);

assign icmp_ln86_554_fu_462_p2 = (($signed(x_35_val) < $signed(18'd52)) ? 1'b1 : 1'b0);

assign icmp_ln86_555_fu_468_p2 = (($signed(x_52_val) < $signed(18'd22017)) ? 1'b1 : 1'b0);

assign icmp_ln86_556_fu_474_p2 = (($signed(x_1_val) < $signed(18'd183133)) ? 1'b1 : 1'b0);

assign icmp_ln86_557_fu_480_p2 = (($signed(x_1_val) < $signed(18'd204370)) ? 1'b1 : 1'b0);

assign icmp_ln86_558_fu_486_p2 = (($signed(x_25_val) < $signed(18'd303)) ? 1'b1 : 1'b0);

assign icmp_ln86_559_fu_492_p2 = (($signed(x_19_val) < $signed(18'd1407)) ? 1'b1 : 1'b0);

assign icmp_ln86_560_fu_498_p2 = (($signed(x_52_val) < $signed(18'd65025)) ? 1'b1 : 1'b0);

assign icmp_ln86_561_fu_504_p2 = (($signed(x_1_val) < $signed(18'd194758)) ? 1'b1 : 1'b0);

assign icmp_ln86_562_fu_510_p2 = (($signed(x_1_val) < $signed(18'd104927)) ? 1'b1 : 1'b0);

assign icmp_ln86_563_fu_516_p2 = (($signed(x_1_val) < $signed(18'd41067)) ? 1'b1 : 1'b0);

assign icmp_ln86_564_fu_522_p2 = (($signed(x_17_val) < $signed(18'd14)) ? 1'b1 : 1'b0);

assign icmp_ln86_565_fu_528_p2 = (($signed(x_50_val) < $signed(18'd97232)) ? 1'b1 : 1'b0);

assign icmp_ln86_566_fu_534_p2 = (($signed(x_36_val) < $signed(18'd10)) ? 1'b1 : 1'b0);

assign icmp_ln86_567_fu_540_p2 = (($signed(x_29_val) < $signed(18'd8905)) ? 1'b1 : 1'b0);

assign icmp_ln86_568_fu_546_p2 = (($signed(x_35_val) < $signed(18'd48)) ? 1'b1 : 1'b0);

assign icmp_ln86_569_fu_552_p2 = (($signed(x_48_val) < $signed(18'd19627)) ? 1'b1 : 1'b0);

assign icmp_ln86_570_fu_558_p2 = (($signed(x_12_val) < $signed(18'd260113)) ? 1'b1 : 1'b0);

assign icmp_ln86_571_fu_564_p2 = (($signed(x_49_val) < $signed(18'd91169)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_384_p2 = (($signed(x_15_val) < $signed(18'd10)) ? 1'b1 : 1'b0);

assign or_ln117_506_fu_780_p2 = (and_ln102_536_fu_690_p2 | and_ln102_522_fu_588_p2);

assign or_ln117_507_fu_794_p2 = (and_ln102_527_fu_636_p2 | and_ln102_522_fu_588_p2);

assign or_ln117_508_fu_808_p2 = (or_ln117_507_fu_794_p2 | and_ln102_537_fu_702_p2);

assign or_ln117_509_fu_834_p2 = (and_ln102_fu_570_p2 | and_ln102_538_fu_708_p2);

assign or_ln117_510_fu_848_p2 = (and_ln102_fu_570_p2 | and_ln102_528_fu_648_p2);

assign or_ln117_511_fu_862_p2 = (or_ln117_510_fu_848_p2 | and_ln102_539_fu_720_p2);

assign or_ln117_512_fu_876_p2 = (and_ln102_fu_570_p2 | and_ln102_523_fu_606_p2);

assign or_ln117_513_fu_890_p2 = (or_ln117_512_fu_876_p2 | and_ln102_540_fu_726_p2);

assign or_ln117_514_fu_904_p2 = (or_ln117_512_fu_876_p2 | and_ln102_529_fu_660_p2);

assign or_ln117_515_fu_918_p2 = (or_ln117_514_fu_904_p2 | and_ln102_541_fu_738_p2);

assign or_ln117_516_fu_1109_p2 = (icmp_ln86_reg_1450 | and_ln102_542_fu_1045_p2);

assign or_ln117_517_fu_1114_p2 = (icmp_ln86_reg_1450 | and_ln102_530_fu_1005_p2);

assign or_ln117_518_fu_1126_p2 = (or_ln117_517_fu_1114_p2 | and_ln102_543_fu_1055_p2);

assign or_ln117_519_fu_1140_p2 = (icmp_ln86_reg_1450 | and_ln102_524_fu_973_p2);

assign or_ln117_520_fu_1153_p2 = (or_ln117_519_fu_1140_p2 | and_ln102_544_fu_1061_p2);

assign or_ln117_521_fu_1167_p2 = (or_ln117_519_fu_1140_p2 | and_ln102_531_fu_1015_p2);

assign or_ln117_522_fu_1181_p2 = (or_ln117_521_fu_1167_p2 | and_ln102_545_fu_1071_p2);

assign or_ln117_523_fu_1195_p2 = (icmp_ln86_reg_1450 | and_ln102_521_fu_957_p2);

assign or_ln117_524_fu_1208_p2 = (or_ln117_523_fu_1195_p2 | and_ln102_546_fu_1077_p2);

assign or_ln117_525_fu_1222_p2 = (or_ln117_523_fu_1195_p2 | and_ln102_532_fu_1025_p2);

assign or_ln117_526_fu_1236_p2 = (or_ln117_525_fu_1222_p2 | and_ln102_547_fu_1087_p2);

assign or_ln117_527_fu_1250_p2 = (or_ln117_523_fu_1195_p2 | and_ln102_525_fu_989_p2);

assign or_ln117_528_fu_1264_p2 = (or_ln117_527_fu_1250_p2 | and_ln102_548_fu_1093_p2);

assign or_ln117_529_fu_1278_p2 = (or_ln117_527_fu_1250_p2 | and_ln102_533_fu_1035_p2);

assign or_ln117_530_fu_1292_p2 = (or_ln117_529_fu_1278_p2 | and_ln102_549_fu_1103_p2);

assign or_ln117_fu_754_p2 = (and_ln102_535_fu_684_p2 | and_ln102_526_fu_624_p2);

assign select_ln117_527_fu_768_p3 = ((or_ln117_fu_754_p2[0:0] == 1'b1) ? select_ln117_fu_760_p3 : 2'd3);

assign select_ln117_528_fu_786_p3 = ((and_ln102_522_fu_588_p2[0:0] == 1'b1) ? zext_ln117_60_fu_776_p1 : 3'd4);

assign select_ln117_529_fu_800_p3 = ((or_ln117_506_fu_780_p2[0:0] == 1'b1) ? select_ln117_528_fu_786_p3 : 3'd5);

assign select_ln117_530_fu_814_p3 = ((or_ln117_507_fu_794_p2[0:0] == 1'b1) ? select_ln117_529_fu_800_p3 : 3'd6);

assign select_ln117_531_fu_822_p3 = ((or_ln117_508_fu_808_p2[0:0] == 1'b1) ? select_ln117_530_fu_814_p3 : 3'd7);

assign select_ln117_532_fu_840_p3 = ((and_ln102_fu_570_p2[0:0] == 1'b1) ? zext_ln117_61_fu_830_p1 : 4'd8);

assign select_ln117_533_fu_854_p3 = ((or_ln117_509_fu_834_p2[0:0] == 1'b1) ? select_ln117_532_fu_840_p3 : 4'd9);

assign select_ln117_534_fu_868_p3 = ((or_ln117_510_fu_848_p2[0:0] == 1'b1) ? select_ln117_533_fu_854_p3 : 4'd10);

assign select_ln117_535_fu_882_p3 = ((or_ln117_511_fu_862_p2[0:0] == 1'b1) ? select_ln117_534_fu_868_p3 : 4'd11);

assign select_ln117_536_fu_896_p3 = ((or_ln117_512_fu_876_p2[0:0] == 1'b1) ? select_ln117_535_fu_882_p3 : 4'd12);

assign select_ln117_537_fu_910_p3 = ((or_ln117_513_fu_890_p2[0:0] == 1'b1) ? select_ln117_536_fu_896_p3 : 4'd13);

assign select_ln117_538_fu_924_p3 = ((or_ln117_514_fu_904_p2[0:0] == 1'b1) ? select_ln117_537_fu_910_p3 : 4'd14);

assign select_ln117_539_fu_932_p3 = ((or_ln117_515_fu_918_p2[0:0] == 1'b1) ? select_ln117_538_fu_924_p3 : 4'd15);

assign select_ln117_540_fu_944_p3 = ((icmp_ln86_fu_384_p2[0:0] == 1'b1) ? zext_ln117_62_fu_940_p1 : 5'd16);

assign select_ln117_541_fu_1119_p3 = ((or_ln117_516_fu_1109_p2[0:0] == 1'b1) ? select_ln117_540_reg_1541 : 5'd17);

assign select_ln117_542_fu_1132_p3 = ((or_ln117_517_fu_1114_p2[0:0] == 1'b1) ? select_ln117_541_fu_1119_p3 : 5'd18);

assign select_ln117_543_fu_1145_p3 = ((or_ln117_518_fu_1126_p2[0:0] == 1'b1) ? select_ln117_542_fu_1132_p3 : 5'd19);

assign select_ln117_544_fu_1159_p3 = ((or_ln117_519_fu_1140_p2[0:0] == 1'b1) ? select_ln117_543_fu_1145_p3 : 5'd20);

assign select_ln117_545_fu_1173_p3 = ((or_ln117_520_fu_1153_p2[0:0] == 1'b1) ? select_ln117_544_fu_1159_p3 : 5'd21);

assign select_ln117_546_fu_1187_p3 = ((or_ln117_521_fu_1167_p2[0:0] == 1'b1) ? select_ln117_545_fu_1173_p3 : 5'd22);

assign select_ln117_547_fu_1200_p3 = ((or_ln117_522_fu_1181_p2[0:0] == 1'b1) ? select_ln117_546_fu_1187_p3 : 5'd23);

assign select_ln117_548_fu_1214_p3 = ((or_ln117_523_fu_1195_p2[0:0] == 1'b1) ? select_ln117_547_fu_1200_p3 : 5'd24);

assign select_ln117_549_fu_1228_p3 = ((or_ln117_524_fu_1208_p2[0:0] == 1'b1) ? select_ln117_548_fu_1214_p3 : 5'd25);

assign select_ln117_550_fu_1242_p3 = ((or_ln117_525_fu_1222_p2[0:0] == 1'b1) ? select_ln117_549_fu_1228_p3 : 5'd26);

assign select_ln117_551_fu_1256_p3 = ((or_ln117_526_fu_1236_p2[0:0] == 1'b1) ? select_ln117_550_fu_1242_p3 : 5'd27);

assign select_ln117_552_fu_1270_p3 = ((or_ln117_527_fu_1250_p2[0:0] == 1'b1) ? select_ln117_551_fu_1256_p3 : 5'd28);

assign select_ln117_553_fu_1284_p3 = ((or_ln117_528_fu_1264_p2[0:0] == 1'b1) ? select_ln117_552_fu_1270_p3 : 5'd29);

assign select_ln117_554_fu_1298_p3 = ((or_ln117_529_fu_1278_p2[0:0] == 1'b1) ? select_ln117_553_fu_1284_p3 : 5'd30);

assign select_ln117_fu_760_p3 = ((and_ln102_526_fu_624_p2[0:0] == 1'b1) ? zext_ln117_fu_750_p1 : 2'd2);

assign xor_ln104_262_fu_576_p2 = (icmp_ln86_542_fu_390_p2 ^ 1'd1);

assign xor_ln104_263_fu_962_p2 = (icmp_ln86_543_reg_1459 ^ 1'd1);

assign xor_ln104_264_fu_594_p2 = (icmp_ln86_544_fu_402_p2 ^ 1'd1);

assign xor_ln104_265_fu_612_p2 = (icmp_ln86_545_fu_408_p2 ^ 1'd1);

assign xor_ln104_266_fu_978_p2 = (icmp_ln86_546_reg_1465 ^ 1'd1);

assign xor_ln104_267_fu_994_p2 = (icmp_ln86_547_reg_1471 ^ 1'd1);

assign xor_ln104_268_fu_630_p2 = (icmp_ln86_548_fu_426_p2 ^ 1'd1);

assign xor_ln104_269_fu_642_p2 = (icmp_ln86_549_fu_432_p2 ^ 1'd1);

assign xor_ln104_270_fu_654_p2 = (icmp_ln86_550_fu_438_p2 ^ 1'd1);

assign xor_ln104_271_fu_666_p2 = (icmp_ln86_551_fu_444_p2 ^ 1'd1);

assign xor_ln104_272_fu_1010_p2 = (icmp_ln86_552_reg_1477 ^ 1'd1);

assign xor_ln104_273_fu_1020_p2 = (icmp_ln86_553_reg_1483 ^ 1'd1);

assign xor_ln104_274_fu_1030_p2 = (icmp_ln86_554_reg_1489 ^ 1'd1);

assign xor_ln104_275_fu_1040_p2 = (icmp_ln86_555_reg_1495 ^ 1'd1);

assign xor_ln104_fu_952_p2 = (icmp_ln86_reg_1450 ^ 1'd1);

assign xor_ln117_fu_744_p2 = (1'd1 ^ and_ln102_534_fu_672_p2);

assign zext_ln117_60_fu_776_p1 = select_ln117_527_fu_768_p3;

assign zext_ln117_61_fu_830_p1 = select_ln117_531_fu_822_p3;

assign zext_ln117_62_fu_940_p1 = select_ln117_539_fu_932_p3;

assign zext_ln117_fu_750_p1 = xor_ln117_fu_744_p2;

endmodule //my_prj_decision_function_21
