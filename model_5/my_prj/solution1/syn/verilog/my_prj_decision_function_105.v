// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_105 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_5_val,
        x_6_val,
        x_8_val,
        x_9_val,
        x_11_val,
        x_12_val,
        x_13_val,
        x_23_val,
        x_26_val,
        x_27_val,
        x_30_val,
        x_32_val,
        x_33_val,
        x_36_val,
        x_39_val,
        x_40_val,
        x_43_val,
        x_45_val,
        x_46_val,
        x_47_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_5_val;
input  [17:0] x_6_val;
input  [17:0] x_8_val;
input  [17:0] x_9_val;
input  [17:0] x_11_val;
input  [17:0] x_12_val;
input  [17:0] x_13_val;
input  [17:0] x_23_val;
input  [17:0] x_26_val;
input  [17:0] x_27_val;
input  [17:0] x_30_val;
input  [17:0] x_32_val;
input  [17:0] x_33_val;
input  [17:0] x_36_val;
input  [17:0] x_39_val;
input  [17:0] x_40_val;
input  [17:0] x_43_val;
input  [17:0] x_45_val;
input  [17:0] x_46_val;
input  [17:0] x_47_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_388_p2;
reg   [0:0] icmp_ln86_reg_1345;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_1871_fu_400_p2;
reg   [0:0] icmp_ln86_1871_reg_1355;
wire   [0:0] icmp_ln86_1874_fu_418_p2;
reg   [0:0] icmp_ln86_1874_reg_1361;
wire   [0:0] icmp_ln86_1879_fu_448_p2;
reg   [0:0] icmp_ln86_1879_reg_1367;
wire   [0:0] icmp_ln86_1880_fu_454_p2;
reg   [0:0] icmp_ln86_1880_reg_1373;
wire   [0:0] icmp_ln86_1881_fu_460_p2;
reg   [0:0] icmp_ln86_1881_reg_1379;
wire   [0:0] icmp_ln86_1890_fu_514_p2;
reg   [0:0] icmp_ln86_1890_reg_1385;
wire   [0:0] icmp_ln86_1891_fu_520_p2;
reg   [0:0] icmp_ln86_1891_reg_1390;
wire   [0:0] icmp_ln86_1892_fu_526_p2;
reg   [0:0] icmp_ln86_1892_reg_1395;
wire   [0:0] icmp_ln86_1893_fu_532_p2;
reg   [0:0] icmp_ln86_1893_reg_1400;
wire   [0:0] icmp_ln86_1894_fu_538_p2;
reg   [0:0] icmp_ln86_1894_reg_1405;
wire   [0:0] icmp_ln86_1895_fu_544_p2;
reg   [0:0] icmp_ln86_1895_reg_1410;
wire   [4:0] select_ln117_1830_fu_924_p3;
reg   [4:0] select_ln117_1830_reg_1415;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln86_1870_fu_394_p2;
wire   [0:0] xor_ln104_895_fu_556_p2;
wire   [0:0] icmp_ln86_1872_fu_406_p2;
wire   [0:0] and_ln102_fu_550_p2;
wire   [0:0] xor_ln104_896_fu_574_p2;
wire   [0:0] icmp_ln86_1873_fu_412_p2;
wire   [0:0] and_ln104_fu_562_p2;
wire   [0:0] xor_ln104_897_fu_592_p2;
wire   [0:0] icmp_ln86_1875_fu_424_p2;
wire   [0:0] and_ln102_2106_fu_568_p2;
wire   [0:0] icmp_ln86_1876_fu_430_p2;
wire   [0:0] and_ln104_355_fu_580_p2;
wire   [0:0] icmp_ln86_1877_fu_436_p2;
wire   [0:0] and_ln102_2107_fu_586_p2;
wire   [0:0] icmp_ln86_1878_fu_442_p2;
wire   [0:0] and_ln104_356_fu_598_p2;
wire   [0:0] icmp_ln86_1882_fu_466_p2;
wire   [0:0] and_ln102_2109_fu_604_p2;
wire   [0:0] icmp_ln86_1883_fu_472_p2;
wire   [0:0] xor_ln104_900_fu_610_p2;
wire   [0:0] and_ln102_2117_fu_658_p2;
wire   [0:0] icmp_ln86_1884_fu_478_p2;
wire   [0:0] and_ln102_2110_fu_616_p2;
wire   [0:0] icmp_ln86_1885_fu_484_p2;
wire   [0:0] xor_ln104_901_fu_622_p2;
wire   [0:0] and_ln102_2120_fu_676_p2;
wire   [0:0] icmp_ln86_1886_fu_490_p2;
wire   [0:0] and_ln102_2111_fu_628_p2;
wire   [0:0] icmp_ln86_1887_fu_496_p2;
wire   [0:0] xor_ln104_902_fu_634_p2;
wire   [0:0] and_ln102_2123_fu_694_p2;
wire   [0:0] icmp_ln86_1888_fu_502_p2;
wire   [0:0] and_ln102_2112_fu_640_p2;
wire   [0:0] icmp_ln86_1889_fu_508_p2;
wire   [0:0] xor_ln104_903_fu_646_p2;
wire   [0:0] and_ln102_2126_fu_712_p2;
wire   [0:0] and_ln102_2116_fu_652_p2;
wire   [0:0] xor_ln117_fu_724_p2;
wire   [0:0] and_ln102_2118_fu_664_p2;
wire   [1:0] zext_ln117_fu_730_p1;
wire   [0:0] or_ln117_fu_734_p2;
wire   [1:0] select_ln117_fu_740_p3;
wire   [1:0] select_ln117_1817_fu_748_p3;
wire   [0:0] and_ln102_2119_fu_670_p2;
wire   [2:0] zext_ln117_204_fu_756_p1;
wire   [0:0] or_ln117_1702_fu_760_p2;
wire   [2:0] select_ln117_1818_fu_766_p3;
wire   [0:0] or_ln117_1703_fu_774_p2;
wire   [0:0] and_ln102_2121_fu_682_p2;
wire   [2:0] select_ln117_1819_fu_780_p3;
wire   [0:0] or_ln117_1704_fu_788_p2;
wire   [2:0] select_ln117_1820_fu_794_p3;
wire   [2:0] select_ln117_1821_fu_802_p3;
wire   [0:0] and_ln102_2122_fu_688_p2;
wire   [3:0] zext_ln117_205_fu_810_p1;
wire   [0:0] or_ln117_1705_fu_814_p2;
wire   [3:0] select_ln117_1822_fu_820_p3;
wire   [0:0] or_ln117_1706_fu_828_p2;
wire   [0:0] and_ln102_2124_fu_700_p2;
wire   [3:0] select_ln117_1823_fu_834_p3;
wire   [0:0] or_ln117_1707_fu_842_p2;
wire   [3:0] select_ln117_1824_fu_848_p3;
wire   [0:0] or_ln117_1708_fu_856_p2;
wire   [0:0] and_ln102_2125_fu_706_p2;
wire   [3:0] select_ln117_1825_fu_862_p3;
wire   [0:0] or_ln117_1709_fu_870_p2;
wire   [3:0] select_ln117_1826_fu_876_p3;
wire   [0:0] or_ln117_1710_fu_884_p2;
wire   [0:0] and_ln102_2127_fu_718_p2;
wire   [3:0] select_ln117_1827_fu_890_p3;
wire   [0:0] or_ln117_1711_fu_898_p2;
wire   [3:0] select_ln117_1828_fu_904_p3;
wire   [3:0] select_ln117_1829_fu_912_p3;
wire   [4:0] zext_ln117_206_fu_920_p1;
wire   [0:0] xor_ln104_fu_932_p2;
wire   [0:0] and_ln102_2105_fu_937_p2;
wire   [0:0] xor_ln104_898_fu_947_p2;
wire   [0:0] or_ln104_fu_958_p2;
wire   [0:0] and_ln102_2108_fu_942_p2;
wire   [0:0] and_ln104_357_fu_952_p2;
wire   [0:0] xor_ln104_899_fu_962_p2;
wire   [0:0] and_ln102_2113_fu_968_p2;
wire   [0:0] xor_ln104_904_fu_973_p2;
wire   [0:0] and_ln102_2129_fu_1003_p2;
wire   [0:0] and_ln102_2114_fu_978_p2;
wire   [0:0] xor_ln104_905_fu_983_p2;
wire   [0:0] and_ln102_2132_fu_1019_p2;
wire   [0:0] and_ln102_2115_fu_988_p2;
wire   [0:0] xor_ln104_906_fu_993_p2;
wire   [0:0] and_ln102_2135_fu_1035_p2;
wire   [0:0] and_ln102_2128_fu_998_p2;
wire   [0:0] or_ln117_1712_fu_1046_p2;
wire   [0:0] or_ln117_1713_fu_1051_p2;
wire   [0:0] and_ln102_2130_fu_1008_p2;
wire   [4:0] select_ln117_1831_fu_1056_p3;
wire   [0:0] or_ln117_1714_fu_1063_p2;
wire   [4:0] select_ln117_1832_fu_1069_p3;
wire   [0:0] or_ln117_1715_fu_1077_p2;
wire   [0:0] and_ln102_2131_fu_1014_p2;
wire   [4:0] select_ln117_1833_fu_1082_p3;
wire   [0:0] or_ln117_1716_fu_1090_p2;
wire   [4:0] select_ln117_1834_fu_1096_p3;
wire   [0:0] or_ln117_1717_fu_1104_p2;
wire   [0:0] and_ln102_2133_fu_1024_p2;
wire   [4:0] select_ln117_1835_fu_1110_p3;
wire   [0:0] or_ln117_1718_fu_1118_p2;
wire   [4:0] select_ln117_1836_fu_1124_p3;
wire   [0:0] or_ln117_1719_fu_1132_p2;
wire   [0:0] and_ln102_2134_fu_1030_p2;
wire   [4:0] select_ln117_1837_fu_1137_p3;
wire   [0:0] or_ln117_1720_fu_1145_p2;
wire   [4:0] select_ln117_1838_fu_1151_p3;
wire   [0:0] or_ln117_1721_fu_1159_p2;
wire   [0:0] and_ln102_2136_fu_1040_p2;
wire   [4:0] select_ln117_1839_fu_1165_p3;
wire   [0:0] or_ln117_1722_fu_1173_p2;
wire   [4:0] select_ln117_1840_fu_1179_p3;
wire   [11:0] tmp_fu_1201_p65;
wire   [4:0] tmp_fu_1201_p66;
wire   [0:0] or_ln117_1723_fu_1187_p2;
wire   [11:0] tmp_fu_1201_p67;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] tmp_fu_1201_p1;
wire   [4:0] tmp_fu_1201_p3;
wire   [4:0] tmp_fu_1201_p5;
wire   [4:0] tmp_fu_1201_p7;
wire   [4:0] tmp_fu_1201_p9;
wire   [4:0] tmp_fu_1201_p11;
wire   [4:0] tmp_fu_1201_p13;
wire   [4:0] tmp_fu_1201_p15;
wire   [4:0] tmp_fu_1201_p17;
wire   [4:0] tmp_fu_1201_p19;
wire   [4:0] tmp_fu_1201_p21;
wire   [4:0] tmp_fu_1201_p23;
wire   [4:0] tmp_fu_1201_p25;
wire   [4:0] tmp_fu_1201_p27;
wire   [4:0] tmp_fu_1201_p29;
wire   [4:0] tmp_fu_1201_p31;
wire  signed [4:0] tmp_fu_1201_p33;
wire  signed [4:0] tmp_fu_1201_p35;
wire  signed [4:0] tmp_fu_1201_p37;
wire  signed [4:0] tmp_fu_1201_p39;
wire  signed [4:0] tmp_fu_1201_p41;
wire  signed [4:0] tmp_fu_1201_p43;
wire  signed [4:0] tmp_fu_1201_p45;
wire  signed [4:0] tmp_fu_1201_p47;
wire  signed [4:0] tmp_fu_1201_p49;
wire  signed [4:0] tmp_fu_1201_p51;
wire  signed [4:0] tmp_fu_1201_p53;
wire  signed [4:0] tmp_fu_1201_p55;
wire  signed [4:0] tmp_fu_1201_p57;
wire  signed [4:0] tmp_fu_1201_p59;
wire  signed [4:0] tmp_fu_1201_p61;
wire  signed [4:0] tmp_fu_1201_p63;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_65_5_12_1_1_x36 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 12 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 12 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 12 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 12 ),
    .CASE31( 5'h1F ),
    .din31_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_65_5_12_1_1_x36_U2421(
    .din0(12'd4),
    .din1(12'd121),
    .din2(12'd13),
    .din3(12'd3990),
    .din4(12'd1011),
    .din5(12'd61),
    .din6(12'd1596),
    .din7(12'd107),
    .din8(12'd288),
    .din9(12'd1056),
    .din10(12'd4083),
    .din11(12'd344),
    .din12(12'd4071),
    .din13(12'd3977),
    .din14(12'd3839),
    .din15(12'd260),
    .din16(12'd3651),
    .din17(12'd646),
    .din18(12'd1418),
    .din19(12'd104),
    .din20(12'd504),
    .din21(12'd3926),
    .din22(12'd3336),
    .din23(12'd277),
    .din24(12'd1116),
    .din25(12'd78),
    .din26(12'd42),
    .din27(12'd1634),
    .din28(12'd2),
    .din29(12'd3650),
    .din30(12'd173),
    .din31(12'd32),
    .def(tmp_fu_1201_p65),
    .sel(tmp_fu_1201_p66),
    .dout(tmp_fu_1201_p67)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_1871_reg_1355 <= icmp_ln86_1871_fu_400_p2;
        icmp_ln86_1874_reg_1361 <= icmp_ln86_1874_fu_418_p2;
        icmp_ln86_1879_reg_1367 <= icmp_ln86_1879_fu_448_p2;
        icmp_ln86_1880_reg_1373 <= icmp_ln86_1880_fu_454_p2;
        icmp_ln86_1881_reg_1379 <= icmp_ln86_1881_fu_460_p2;
        icmp_ln86_1890_reg_1385 <= icmp_ln86_1890_fu_514_p2;
        icmp_ln86_1891_reg_1390 <= icmp_ln86_1891_fu_520_p2;
        icmp_ln86_1892_reg_1395 <= icmp_ln86_1892_fu_526_p2;
        icmp_ln86_1893_reg_1400 <= icmp_ln86_1893_fu_532_p2;
        icmp_ln86_1894_reg_1405 <= icmp_ln86_1894_fu_538_p2;
        icmp_ln86_1895_reg_1410 <= icmp_ln86_1895_fu_544_p2;
        icmp_ln86_reg_1345 <= icmp_ln86_fu_388_p2;
        select_ln117_1830_reg_1415 <= select_ln117_1830_fu_924_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln102_2105_fu_937_p2 = (xor_ln104_fu_932_p2 & icmp_ln86_1871_reg_1355);

assign and_ln102_2106_fu_568_p2 = (icmp_ln86_1872_fu_406_p2 & and_ln102_fu_550_p2);

assign and_ln102_2107_fu_586_p2 = (icmp_ln86_1873_fu_412_p2 & and_ln104_fu_562_p2);

assign and_ln102_2108_fu_942_p2 = (icmp_ln86_1874_reg_1361 & and_ln102_2105_fu_937_p2);

assign and_ln102_2109_fu_604_p2 = (icmp_ln86_1875_fu_424_p2 & and_ln102_2106_fu_568_p2);

assign and_ln102_2110_fu_616_p2 = (icmp_ln86_1876_fu_430_p2 & and_ln104_355_fu_580_p2);

assign and_ln102_2111_fu_628_p2 = (icmp_ln86_1877_fu_436_p2 & and_ln102_2107_fu_586_p2);

assign and_ln102_2112_fu_640_p2 = (icmp_ln86_1878_fu_442_p2 & and_ln104_356_fu_598_p2);

assign and_ln102_2113_fu_968_p2 = (icmp_ln86_1879_reg_1367 & and_ln102_2108_fu_942_p2);

assign and_ln102_2114_fu_978_p2 = (icmp_ln86_1880_reg_1373 & and_ln104_357_fu_952_p2);

assign and_ln102_2115_fu_988_p2 = (xor_ln104_899_fu_962_p2 & icmp_ln86_1881_reg_1379);

assign and_ln102_2116_fu_652_p2 = (icmp_ln86_1882_fu_466_p2 & and_ln102_2109_fu_604_p2);

assign and_ln102_2117_fu_658_p2 = (xor_ln104_900_fu_610_p2 & icmp_ln86_1883_fu_472_p2);

assign and_ln102_2118_fu_664_p2 = (and_ln102_2117_fu_658_p2 & and_ln102_2106_fu_568_p2);

assign and_ln102_2119_fu_670_p2 = (icmp_ln86_1884_fu_478_p2 & and_ln102_2110_fu_616_p2);

assign and_ln102_2120_fu_676_p2 = (xor_ln104_901_fu_622_p2 & icmp_ln86_1885_fu_484_p2);

assign and_ln102_2121_fu_682_p2 = (and_ln104_355_fu_580_p2 & and_ln102_2120_fu_676_p2);

assign and_ln102_2122_fu_688_p2 = (icmp_ln86_1886_fu_490_p2 & and_ln102_2111_fu_628_p2);

assign and_ln102_2123_fu_694_p2 = (xor_ln104_902_fu_634_p2 & icmp_ln86_1887_fu_496_p2);

assign and_ln102_2124_fu_700_p2 = (and_ln102_2123_fu_694_p2 & and_ln102_2107_fu_586_p2);

assign and_ln102_2125_fu_706_p2 = (icmp_ln86_1888_fu_502_p2 & and_ln102_2112_fu_640_p2);

assign and_ln102_2126_fu_712_p2 = (xor_ln104_903_fu_646_p2 & icmp_ln86_1889_fu_508_p2);

assign and_ln102_2127_fu_718_p2 = (and_ln104_356_fu_598_p2 & and_ln102_2126_fu_712_p2);

assign and_ln102_2128_fu_998_p2 = (icmp_ln86_1890_reg_1385 & and_ln102_2113_fu_968_p2);

assign and_ln102_2129_fu_1003_p2 = (xor_ln104_904_fu_973_p2 & icmp_ln86_1891_reg_1390);

assign and_ln102_2130_fu_1008_p2 = (and_ln102_2129_fu_1003_p2 & and_ln102_2108_fu_942_p2);

assign and_ln102_2131_fu_1014_p2 = (icmp_ln86_1892_reg_1395 & and_ln102_2114_fu_978_p2);

assign and_ln102_2132_fu_1019_p2 = (xor_ln104_905_fu_983_p2 & icmp_ln86_1893_reg_1400);

assign and_ln102_2133_fu_1024_p2 = (and_ln104_357_fu_952_p2 & and_ln102_2132_fu_1019_p2);

assign and_ln102_2134_fu_1030_p2 = (icmp_ln86_1894_reg_1405 & and_ln102_2115_fu_988_p2);

assign and_ln102_2135_fu_1035_p2 = (xor_ln104_906_fu_993_p2 & icmp_ln86_1895_reg_1410);

assign and_ln102_2136_fu_1040_p2 = (xor_ln104_899_fu_962_p2 & and_ln102_2135_fu_1035_p2);

assign and_ln102_fu_550_p2 = (icmp_ln86_fu_388_p2 & icmp_ln86_1870_fu_394_p2);

assign and_ln104_355_fu_580_p2 = (xor_ln104_896_fu_574_p2 & and_ln102_fu_550_p2);

assign and_ln104_356_fu_598_p2 = (xor_ln104_897_fu_592_p2 & and_ln104_fu_562_p2);

assign and_ln104_357_fu_952_p2 = (xor_ln104_898_fu_947_p2 & and_ln102_2105_fu_937_p2);

assign and_ln104_fu_562_p2 = (xor_ln104_895_fu_556_p2 & icmp_ln86_fu_388_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((or_ln117_1723_fu_1187_p2[0:0] == 1'b1) ? tmp_fu_1201_p67 : 12'd0);

assign icmp_ln86_1870_fu_394_p2 = (($signed(x_32_val) < $signed(18'd716)) ? 1'b1 : 1'b0);

assign icmp_ln86_1871_fu_400_p2 = (($signed(x_27_val) < $signed(18'd1912)) ? 1'b1 : 1'b0);

assign icmp_ln86_1872_fu_406_p2 = (($signed(x_45_val) < $signed(18'd415)) ? 1'b1 : 1'b0);

assign icmp_ln86_1873_fu_412_p2 = (($signed(x_39_val) < $signed(18'd1016)) ? 1'b1 : 1'b0);

assign icmp_ln86_1874_fu_418_p2 = (($signed(x_5_val) < $signed(18'd20193)) ? 1'b1 : 1'b0);

assign icmp_ln86_1875_fu_424_p2 = (($signed(x_45_val) < $signed(18'd356)) ? 1'b1 : 1'b0);

assign icmp_ln86_1876_fu_430_p2 = (($signed(x_32_val) < $signed(18'd623)) ? 1'b1 : 1'b0);

assign icmp_ln86_1877_fu_436_p2 = (($signed(x_26_val) < $signed(18'd34961)) ? 1'b1 : 1'b0);

assign icmp_ln86_1878_fu_442_p2 = (($signed(x_36_val) < $signed(18'd17)) ? 1'b1 : 1'b0);

assign icmp_ln86_1879_fu_448_p2 = (($signed(x_32_val) < $signed(18'd729)) ? 1'b1 : 1'b0);

assign icmp_ln86_1880_fu_454_p2 = (($signed(x_43_val) < $signed(18'd149)) ? 1'b1 : 1'b0);

assign icmp_ln86_1881_fu_460_p2 = (($signed(x_39_val) < $signed(18'd1685)) ? 1'b1 : 1'b0);

assign icmp_ln86_1882_fu_466_p2 = (($signed(x_33_val) < $signed(18'd592)) ? 1'b1 : 1'b0);

assign icmp_ln86_1883_fu_472_p2 = (($signed(x_9_val) < $signed(18'd982)) ? 1'b1 : 1'b0);

assign icmp_ln86_1884_fu_478_p2 = (($signed(x_11_val) < $signed(18'd926)) ? 1'b1 : 1'b0);

assign icmp_ln86_1885_fu_484_p2 = (($signed(x_8_val) < $signed(18'd191)) ? 1'b1 : 1'b0);

assign icmp_ln86_1886_fu_490_p2 = (($signed(x_47_val) < $signed(18'd79390)) ? 1'b1 : 1'b0);

assign icmp_ln86_1887_fu_496_p2 = (($signed(x_40_val) < $signed(18'd703)) ? 1'b1 : 1'b0);

assign icmp_ln86_1888_fu_502_p2 = (($signed(x_23_val) < $signed(18'd42)) ? 1'b1 : 1'b0);

assign icmp_ln86_1889_fu_508_p2 = (($signed(x_30_val) < $signed(18'd5839)) ? 1'b1 : 1'b0);

assign icmp_ln86_1890_fu_514_p2 = (($signed(x_6_val) < $signed(18'd9990)) ? 1'b1 : 1'b0);

assign icmp_ln86_1891_fu_520_p2 = (($signed(x_46_val) < $signed(18'd289)) ? 1'b1 : 1'b0);

assign icmp_ln86_1892_fu_526_p2 = (($signed(x_12_val) < $signed(18'd258983)) ? 1'b1 : 1'b0);

assign icmp_ln86_1893_fu_532_p2 = (($signed(x_40_val) < $signed(18'd1428)) ? 1'b1 : 1'b0);

assign icmp_ln86_1894_fu_538_p2 = (($signed(x_40_val) < $signed(18'd2289)) ? 1'b1 : 1'b0);

assign icmp_ln86_1895_fu_544_p2 = (($signed(x_5_val) < $signed(18'd17479)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_388_p2 = (($signed(x_13_val) < $signed(18'd473)) ? 1'b1 : 1'b0);

assign or_ln104_fu_958_p2 = (icmp_ln86_reg_1345 | icmp_ln86_1871_reg_1355);

assign or_ln117_1702_fu_760_p2 = (and_ln102_2119_fu_670_p2 | and_ln102_2106_fu_568_p2);

assign or_ln117_1703_fu_774_p2 = (and_ln102_2110_fu_616_p2 | and_ln102_2106_fu_568_p2);

assign or_ln117_1704_fu_788_p2 = (or_ln117_1703_fu_774_p2 | and_ln102_2121_fu_682_p2);

assign or_ln117_1705_fu_814_p2 = (and_ln102_fu_550_p2 | and_ln102_2122_fu_688_p2);

assign or_ln117_1706_fu_828_p2 = (and_ln102_fu_550_p2 | and_ln102_2111_fu_628_p2);

assign or_ln117_1707_fu_842_p2 = (or_ln117_1706_fu_828_p2 | and_ln102_2124_fu_700_p2);

assign or_ln117_1708_fu_856_p2 = (and_ln102_fu_550_p2 | and_ln102_2107_fu_586_p2);

assign or_ln117_1709_fu_870_p2 = (or_ln117_1708_fu_856_p2 | and_ln102_2125_fu_706_p2);

assign or_ln117_1710_fu_884_p2 = (or_ln117_1708_fu_856_p2 | and_ln102_2112_fu_640_p2);

assign or_ln117_1711_fu_898_p2 = (or_ln117_1710_fu_884_p2 | and_ln102_2127_fu_718_p2);

assign or_ln117_1712_fu_1046_p2 = (icmp_ln86_reg_1345 | and_ln102_2128_fu_998_p2);

assign or_ln117_1713_fu_1051_p2 = (icmp_ln86_reg_1345 | and_ln102_2113_fu_968_p2);

assign or_ln117_1714_fu_1063_p2 = (or_ln117_1713_fu_1051_p2 | and_ln102_2130_fu_1008_p2);

assign or_ln117_1715_fu_1077_p2 = (icmp_ln86_reg_1345 | and_ln102_2108_fu_942_p2);

assign or_ln117_1716_fu_1090_p2 = (or_ln117_1715_fu_1077_p2 | and_ln102_2131_fu_1014_p2);

assign or_ln117_1717_fu_1104_p2 = (or_ln117_1715_fu_1077_p2 | and_ln102_2114_fu_978_p2);

assign or_ln117_1718_fu_1118_p2 = (or_ln117_1717_fu_1104_p2 | and_ln102_2133_fu_1024_p2);

assign or_ln117_1719_fu_1132_p2 = (icmp_ln86_reg_1345 | and_ln102_2105_fu_937_p2);

assign or_ln117_1720_fu_1145_p2 = (or_ln117_1719_fu_1132_p2 | and_ln102_2134_fu_1030_p2);

assign or_ln117_1721_fu_1159_p2 = (or_ln117_1719_fu_1132_p2 | and_ln102_2115_fu_988_p2);

assign or_ln117_1722_fu_1173_p2 = (or_ln117_1721_fu_1159_p2 | and_ln102_2136_fu_1040_p2);

assign or_ln117_1723_fu_1187_p2 = (xor_ln104_899_fu_962_p2 | or_ln117_1719_fu_1132_p2);

assign or_ln117_fu_734_p2 = (and_ln102_2118_fu_664_p2 | and_ln102_2109_fu_604_p2);

assign select_ln117_1817_fu_748_p3 = ((or_ln117_fu_734_p2[0:0] == 1'b1) ? select_ln117_fu_740_p3 : 2'd3);

assign select_ln117_1818_fu_766_p3 = ((and_ln102_2106_fu_568_p2[0:0] == 1'b1) ? zext_ln117_204_fu_756_p1 : 3'd4);

assign select_ln117_1819_fu_780_p3 = ((or_ln117_1702_fu_760_p2[0:0] == 1'b1) ? select_ln117_1818_fu_766_p3 : 3'd5);

assign select_ln117_1820_fu_794_p3 = ((or_ln117_1703_fu_774_p2[0:0] == 1'b1) ? select_ln117_1819_fu_780_p3 : 3'd6);

assign select_ln117_1821_fu_802_p3 = ((or_ln117_1704_fu_788_p2[0:0] == 1'b1) ? select_ln117_1820_fu_794_p3 : 3'd7);

assign select_ln117_1822_fu_820_p3 = ((and_ln102_fu_550_p2[0:0] == 1'b1) ? zext_ln117_205_fu_810_p1 : 4'd8);

assign select_ln117_1823_fu_834_p3 = ((or_ln117_1705_fu_814_p2[0:0] == 1'b1) ? select_ln117_1822_fu_820_p3 : 4'd9);

assign select_ln117_1824_fu_848_p3 = ((or_ln117_1706_fu_828_p2[0:0] == 1'b1) ? select_ln117_1823_fu_834_p3 : 4'd10);

assign select_ln117_1825_fu_862_p3 = ((or_ln117_1707_fu_842_p2[0:0] == 1'b1) ? select_ln117_1824_fu_848_p3 : 4'd11);

assign select_ln117_1826_fu_876_p3 = ((or_ln117_1708_fu_856_p2[0:0] == 1'b1) ? select_ln117_1825_fu_862_p3 : 4'd12);

assign select_ln117_1827_fu_890_p3 = ((or_ln117_1709_fu_870_p2[0:0] == 1'b1) ? select_ln117_1826_fu_876_p3 : 4'd13);

assign select_ln117_1828_fu_904_p3 = ((or_ln117_1710_fu_884_p2[0:0] == 1'b1) ? select_ln117_1827_fu_890_p3 : 4'd14);

assign select_ln117_1829_fu_912_p3 = ((or_ln117_1711_fu_898_p2[0:0] == 1'b1) ? select_ln117_1828_fu_904_p3 : 4'd15);

assign select_ln117_1830_fu_924_p3 = ((icmp_ln86_fu_388_p2[0:0] == 1'b1) ? zext_ln117_206_fu_920_p1 : 5'd16);

assign select_ln117_1831_fu_1056_p3 = ((or_ln117_1712_fu_1046_p2[0:0] == 1'b1) ? select_ln117_1830_reg_1415 : 5'd17);

assign select_ln117_1832_fu_1069_p3 = ((or_ln117_1713_fu_1051_p2[0:0] == 1'b1) ? select_ln117_1831_fu_1056_p3 : 5'd18);

assign select_ln117_1833_fu_1082_p3 = ((or_ln117_1714_fu_1063_p2[0:0] == 1'b1) ? select_ln117_1832_fu_1069_p3 : 5'd19);

assign select_ln117_1834_fu_1096_p3 = ((or_ln117_1715_fu_1077_p2[0:0] == 1'b1) ? select_ln117_1833_fu_1082_p3 : 5'd20);

assign select_ln117_1835_fu_1110_p3 = ((or_ln117_1716_fu_1090_p2[0:0] == 1'b1) ? select_ln117_1834_fu_1096_p3 : 5'd21);

assign select_ln117_1836_fu_1124_p3 = ((or_ln117_1717_fu_1104_p2[0:0] == 1'b1) ? select_ln117_1835_fu_1110_p3 : 5'd22);

assign select_ln117_1837_fu_1137_p3 = ((or_ln117_1718_fu_1118_p2[0:0] == 1'b1) ? select_ln117_1836_fu_1124_p3 : 5'd23);

assign select_ln117_1838_fu_1151_p3 = ((or_ln117_1719_fu_1132_p2[0:0] == 1'b1) ? select_ln117_1837_fu_1137_p3 : 5'd28);

assign select_ln117_1839_fu_1165_p3 = ((or_ln117_1720_fu_1145_p2[0:0] == 1'b1) ? select_ln117_1838_fu_1151_p3 : 5'd29);

assign select_ln117_1840_fu_1179_p3 = ((or_ln117_1721_fu_1159_p2[0:0] == 1'b1) ? select_ln117_1839_fu_1165_p3 : 5'd30);

assign select_ln117_fu_740_p3 = ((and_ln102_2109_fu_604_p2[0:0] == 1'b1) ? zext_ln117_fu_730_p1 : 2'd2);

assign tmp_fu_1201_p65 = 'bx;

assign tmp_fu_1201_p66 = ((or_ln117_1722_fu_1173_p2[0:0] == 1'b1) ? select_ln117_1840_fu_1179_p3 : 5'd31);

assign xor_ln104_895_fu_556_p2 = (icmp_ln86_1870_fu_394_p2 ^ 1'd1);

assign xor_ln104_896_fu_574_p2 = (icmp_ln86_1872_fu_406_p2 ^ 1'd1);

assign xor_ln104_897_fu_592_p2 = (icmp_ln86_1873_fu_412_p2 ^ 1'd1);

assign xor_ln104_898_fu_947_p2 = (icmp_ln86_1874_reg_1361 ^ 1'd1);

assign xor_ln104_899_fu_962_p2 = (or_ln104_fu_958_p2 ^ 1'd1);

assign xor_ln104_900_fu_610_p2 = (icmp_ln86_1875_fu_424_p2 ^ 1'd1);

assign xor_ln104_901_fu_622_p2 = (icmp_ln86_1876_fu_430_p2 ^ 1'd1);

assign xor_ln104_902_fu_634_p2 = (icmp_ln86_1877_fu_436_p2 ^ 1'd1);

assign xor_ln104_903_fu_646_p2 = (icmp_ln86_1878_fu_442_p2 ^ 1'd1);

assign xor_ln104_904_fu_973_p2 = (icmp_ln86_1879_reg_1367 ^ 1'd1);

assign xor_ln104_905_fu_983_p2 = (icmp_ln86_1880_reg_1373 ^ 1'd1);

assign xor_ln104_906_fu_993_p2 = (icmp_ln86_1881_reg_1379 ^ 1'd1);

assign xor_ln104_fu_932_p2 = (icmp_ln86_reg_1345 ^ 1'd1);

assign xor_ln117_fu_724_p2 = (1'd1 ^ and_ln102_2116_fu_652_p2);

assign zext_ln117_204_fu_756_p1 = select_ln117_1817_fu_748_p3;

assign zext_ln117_205_fu_810_p1 = select_ln117_1821_fu_802_p3;

assign zext_ln117_206_fu_920_p1 = select_ln117_1829_fu_912_p3;

assign zext_ln117_fu_730_p1 = xor_ln117_fu_724_p2;

endmodule //my_prj_decision_function_105
