// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_39 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_3_val,
        x_7_val,
        x_8_val,
        x_11_val,
        x_14_val,
        x_16_val,
        x_25_val,
        x_33_val,
        x_34_val,
        x_38_val,
        x_40_val,
        x_43_val,
        x_44_val,
        x_45_val,
        x_49_val,
        x_51_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_3_val;
input  [17:0] x_7_val;
input  [17:0] x_8_val;
input  [17:0] x_11_val;
input  [17:0] x_14_val;
input  [17:0] x_16_val;
input  [17:0] x_25_val;
input  [17:0] x_33_val;
input  [17:0] x_34_val;
input  [17:0] x_38_val;
input  [17:0] x_40_val;
input  [17:0] x_43_val;
input  [17:0] x_44_val;
input  [17:0] x_45_val;
input  [17:0] x_49_val;
input  [17:0] x_51_val;
input  [17:0] x_52_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_1022_fu_398_p2;
reg   [0:0] icmp_ln86_1022_reg_1381;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_1027_fu_428_p2;
reg   [0:0] icmp_ln86_1027_reg_1387;
wire   [0:0] icmp_ln86_1029_fu_440_p2;
reg   [0:0] icmp_ln86_1029_reg_1393;
wire   [0:0] icmp_ln86_1030_fu_446_p2;
reg   [0:0] icmp_ln86_1030_reg_1399;
wire   [0:0] icmp_ln86_1037_fu_488_p2;
reg   [0:0] icmp_ln86_1037_reg_1405;
wire   [0:0] icmp_ln86_1038_fu_494_p2;
reg   [0:0] icmp_ln86_1038_reg_1410;
wire   [0:0] icmp_ln86_1039_fu_500_p2;
reg   [0:0] icmp_ln86_1039_reg_1415;
wire   [0:0] icmp_ln86_1040_fu_506_p2;
reg   [0:0] icmp_ln86_1040_reg_1420;
wire   [0:0] icmp_ln86_1041_fu_512_p2;
reg   [0:0] icmp_ln86_1041_reg_1425;
wire   [0:0] icmp_ln86_1042_fu_518_p2;
reg   [0:0] icmp_ln86_1042_reg_1430;
wire   [0:0] icmp_ln86_1043_fu_524_p2;
reg   [0:0] icmp_ln86_1043_reg_1435;
wire   [0:0] and_ln104_197_fu_566_p2;
reg   [0:0] and_ln104_197_reg_1440;
wire   [0:0] and_ln102_981_fu_608_p2;
reg   [0:0] and_ln102_981_reg_1447;
wire   [0:0] and_ln104_203_fu_686_p2;
reg   [0:0] and_ln104_203_reg_1454;
wire   [0:0] or_ln117_939_fu_944_p2;
reg   [0:0] or_ln117_939_reg_1460;
wire   [4:0] select_ln117_997_fu_962_p3;
reg   [4:0] select_ln117_997_reg_1467;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln86_fu_362_p2;
wire   [0:0] icmp_ln86_1017_fu_368_p2;
wire   [0:0] xor_ln104_487_fu_542_p2;
wire   [0:0] icmp_ln86_1018_fu_374_p2;
wire   [0:0] xor_ln104_fu_530_p2;
wire   [0:0] xor_ln104_488_fu_560_p2;
wire   [0:0] icmp_ln86_1019_fu_380_p2;
wire   [0:0] and_ln102_fu_536_p2;
wire   [0:0] xor_ln104_489_fu_578_p2;
wire   [0:0] icmp_ln86_1020_fu_386_p2;
wire   [0:0] and_ln104_fu_548_p2;
wire   [0:0] xor_ln104_490_fu_596_p2;
wire   [0:0] icmp_ln86_1021_fu_392_p2;
wire   [0:0] and_ln102_978_fu_554_p2;
wire   [0:0] xor_ln104_491_fu_614_p2;
wire   [0:0] icmp_ln86_1023_fu_404_p2;
wire   [0:0] icmp_ln86_1024_fu_410_p2;
wire   [0:0] and_ln104_198_fu_584_p2;
wire   [0:0] icmp_ln86_1025_fu_416_p2;
wire   [0:0] and_ln102_980_fu_590_p2;
wire   [0:0] xor_ln104_495_fu_650_p2;
wire   [0:0] icmp_ln86_1026_fu_422_p2;
wire   [0:0] and_ln104_199_fu_602_p2;
wire   [0:0] icmp_ln86_1028_fu_434_p2;
wire   [0:0] and_ln104_200_fu_620_p2;
wire   [0:0] xor_ln104_498_fu_680_p2;
wire   [0:0] and_ln102_979_fu_572_p2;
wire   [0:0] icmp_ln86_1031_fu_452_p2;
wire   [0:0] xor_ln104_493_fu_626_p2;
wire   [0:0] and_ln102_1004_fu_698_p2;
wire   [0:0] icmp_ln86_1032_fu_458_p2;
wire   [0:0] and_ln102_983_fu_632_p2;
wire   [0:0] icmp_ln86_1033_fu_464_p2;
wire   [0:0] xor_ln104_494_fu_638_p2;
wire   [0:0] and_ln102_1005_fu_716_p2;
wire   [0:0] icmp_ln86_1034_fu_470_p2;
wire   [0:0] and_ln104_202_fu_656_p2;
wire   [0:0] icmp_ln86_1035_fu_476_p2;
wire   [0:0] and_ln102_985_fu_662_p2;
wire   [0:0] icmp_ln86_1036_fu_482_p2;
wire   [0:0] xor_ln104_496_fu_668_p2;
wire   [0:0] and_ln102_1006_fu_740_p2;
wire   [0:0] and_ln102_984_fu_644_p2;
wire   [0:0] and_ln102_987_fu_674_p2;
wire   [0:0] xor_ln117_fu_758_p2;
wire   [0:0] or_ln117_fu_752_p2;
wire   [0:0] and_ln102_990_fu_692_p2;
wire   [1:0] zext_ln117_fu_764_p1;
wire   [1:0] select_ln117_fu_774_p3;
wire   [0:0] or_ln117_927_fu_768_p2;
wire   [0:0] and_ln102_991_fu_704_p2;
wire   [2:0] zext_ln117_114_fu_782_p1;
wire   [0:0] or_ln117_928_fu_786_p2;
wire   [2:0] select_ln117_985_fu_792_p3;
wire   [0:0] or_ln117_929_fu_800_p2;
wire   [0:0] and_ln102_992_fu_710_p2;
wire   [2:0] select_ln117_986_fu_806_p3;
wire   [0:0] or_ln117_930_fu_814_p2;
wire   [2:0] select_ln117_987_fu_820_p3;
wire   [2:0] select_ln117_988_fu_834_p3;
wire   [0:0] or_ln117_931_fu_828_p2;
wire   [0:0] and_ln102_993_fu_722_p2;
wire   [3:0] zext_ln117_115_fu_842_p1;
wire   [0:0] or_ln117_932_fu_846_p2;
wire   [3:0] select_ln117_989_fu_852_p3;
wire   [0:0] or_ln117_933_fu_860_p2;
wire   [0:0] and_ln102_994_fu_728_p2;
wire   [3:0] select_ln117_990_fu_866_p3;
wire   [0:0] or_ln117_934_fu_874_p2;
wire   [3:0] select_ln117_991_fu_880_p3;
wire   [0:0] or_ln117_935_fu_888_p2;
wire   [0:0] and_ln102_995_fu_734_p2;
wire   [3:0] select_ln117_992_fu_894_p3;
wire   [0:0] or_ln117_936_fu_902_p2;
wire   [3:0] select_ln117_993_fu_908_p3;
wire   [0:0] or_ln117_937_fu_916_p2;
wire   [0:0] and_ln102_996_fu_746_p2;
wire   [3:0] select_ln117_994_fu_922_p3;
wire   [0:0] or_ln117_938_fu_930_p2;
wire   [3:0] select_ln117_995_fu_936_p3;
wire   [3:0] select_ln117_996_fu_950_p3;
wire   [4:0] zext_ln117_116_fu_958_p1;
wire   [0:0] xor_ln104_492_fu_974_p2;
wire   [0:0] and_ln102_982_fu_970_p2;
wire   [0:0] and_ln104_201_fu_979_p2;
wire   [0:0] and_ln102_986_fu_984_p2;
wire   [0:0] xor_ln104_497_fu_988_p2;
wire   [0:0] and_ln102_1007_fu_1018_p2;
wire   [0:0] and_ln102_988_fu_993_p2;
wire   [0:0] xor_ln104_499_fu_998_p2;
wire   [0:0] and_ln102_1008_fu_1037_p2;
wire   [0:0] and_ln102_989_fu_1003_p2;
wire   [0:0] xor_ln104_500_fu_1008_p2;
wire   [0:0] and_ln102_1009_fu_1053_p2;
wire   [0:0] and_ln102_997_fu_1013_p2;
wire   [0:0] or_ln117_940_fu_1064_p2;
wire   [0:0] or_ln117_941_fu_1069_p2;
wire   [0:0] and_ln102_998_fu_1023_p2;
wire   [4:0] select_ln117_998_fu_1074_p3;
wire   [0:0] or_ln117_942_fu_1081_p2;
wire   [4:0] select_ln117_999_fu_1087_p3;
wire   [0:0] or_ln117_943_fu_1095_p2;
wire   [0:0] and_ln102_999_fu_1028_p2;
wire   [4:0] select_ln117_1000_fu_1099_p3;
wire   [0:0] or_ln117_944_fu_1107_p2;
wire   [4:0] select_ln117_1001_fu_1113_p3;
wire   [0:0] or_ln117_945_fu_1121_p2;
wire   [0:0] and_ln102_1000_fu_1032_p2;
wire   [4:0] select_ln117_1002_fu_1126_p3;
wire   [0:0] or_ln117_946_fu_1134_p2;
wire   [4:0] select_ln117_1003_fu_1140_p3;
wire   [0:0] or_ln117_947_fu_1148_p2;
wire   [0:0] and_ln102_1001_fu_1042_p2;
wire   [4:0] select_ln117_1004_fu_1154_p3;
wire   [0:0] or_ln117_948_fu_1162_p2;
wire   [4:0] select_ln117_1005_fu_1168_p3;
wire   [0:0] or_ln117_949_fu_1176_p2;
wire   [0:0] and_ln102_1002_fu_1048_p2;
wire   [4:0] select_ln117_1006_fu_1182_p3;
wire   [0:0] or_ln117_950_fu_1190_p2;
wire   [4:0] select_ln117_1007_fu_1196_p3;
wire   [0:0] or_ln117_951_fu_1204_p2;
wire   [0:0] and_ln102_1003_fu_1058_p2;
wire   [4:0] select_ln117_1008_fu_1210_p3;
wire   [0:0] or_ln117_952_fu_1218_p2;
wire   [4:0] select_ln117_1009_fu_1224_p3;
wire   [11:0] tmp_fu_1245_p61;
wire   [4:0] tmp_fu_1245_p62;
wire   [0:0] or_ln117_953_fu_1232_p2;
wire   [11:0] tmp_fu_1245_p63;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] tmp_fu_1245_p1;
wire   [4:0] tmp_fu_1245_p3;
wire   [4:0] tmp_fu_1245_p5;
wire   [4:0] tmp_fu_1245_p7;
wire   [4:0] tmp_fu_1245_p9;
wire   [4:0] tmp_fu_1245_p11;
wire   [4:0] tmp_fu_1245_p13;
wire   [4:0] tmp_fu_1245_p15;
wire   [4:0] tmp_fu_1245_p17;
wire   [4:0] tmp_fu_1245_p19;
wire   [4:0] tmp_fu_1245_p21;
wire   [4:0] tmp_fu_1245_p23;
wire   [4:0] tmp_fu_1245_p25;
wire   [4:0] tmp_fu_1245_p27;
wire   [4:0] tmp_fu_1245_p29;
wire   [4:0] tmp_fu_1245_p31;
wire  signed [4:0] tmp_fu_1245_p33;
wire  signed [4:0] tmp_fu_1245_p35;
wire  signed [4:0] tmp_fu_1245_p37;
wire  signed [4:0] tmp_fu_1245_p39;
wire  signed [4:0] tmp_fu_1245_p41;
wire  signed [4:0] tmp_fu_1245_p43;
wire  signed [4:0] tmp_fu_1245_p45;
wire  signed [4:0] tmp_fu_1245_p47;
wire  signed [4:0] tmp_fu_1245_p49;
wire  signed [4:0] tmp_fu_1245_p51;
wire  signed [4:0] tmp_fu_1245_p53;
wire  signed [4:0] tmp_fu_1245_p55;
wire  signed [4:0] tmp_fu_1245_p57;
wire  signed [4:0] tmp_fu_1245_p59;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_61_5_12_1_1_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 12 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 12 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_61_5_12_1_1_x_U1340(
    .din0(12'd2372),
    .din1(12'd1789),
    .din2(12'd0),
    .din3(12'd1510),
    .din4(12'd83),
    .din5(12'd4031),
    .din6(12'd4046),
    .din7(12'd3794),
    .din8(12'd1228),
    .din9(12'd3758),
    .din10(12'd35),
    .din11(12'd3237),
    .din12(12'd4090),
    .din13(12'd4008),
    .din14(12'd1143),
    .din15(12'd97),
    .din16(12'd4092),
    .din17(12'd1714),
    .din18(12'd3893),
    .din19(12'd480),
    .din20(12'd4053),
    .din21(12'd483),
    .din22(12'd126),
    .din23(12'd3916),
    .din24(12'd385),
    .din25(12'd4049),
    .din26(12'd3957),
    .din27(12'd369),
    .din28(12'd3812),
    .din29(12'd929),
    .def(tmp_fu_1245_p61),
    .sel(tmp_fu_1245_p62),
    .dout(tmp_fu_1245_p63)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln102_981_reg_1447 <= and_ln102_981_fu_608_p2;
        and_ln104_197_reg_1440 <= and_ln104_197_fu_566_p2;
        and_ln104_203_reg_1454 <= and_ln104_203_fu_686_p2;
        icmp_ln86_1022_reg_1381 <= icmp_ln86_1022_fu_398_p2;
        icmp_ln86_1027_reg_1387 <= icmp_ln86_1027_fu_428_p2;
        icmp_ln86_1029_reg_1393 <= icmp_ln86_1029_fu_440_p2;
        icmp_ln86_1030_reg_1399 <= icmp_ln86_1030_fu_446_p2;
        icmp_ln86_1037_reg_1405 <= icmp_ln86_1037_fu_488_p2;
        icmp_ln86_1038_reg_1410 <= icmp_ln86_1038_fu_494_p2;
        icmp_ln86_1039_reg_1415 <= icmp_ln86_1039_fu_500_p2;
        icmp_ln86_1040_reg_1420 <= icmp_ln86_1040_fu_506_p2;
        icmp_ln86_1041_reg_1425 <= icmp_ln86_1041_fu_512_p2;
        icmp_ln86_1042_reg_1430 <= icmp_ln86_1042_fu_518_p2;
        icmp_ln86_1043_reg_1435 <= icmp_ln86_1043_fu_524_p2;
        or_ln117_939_reg_1460 <= or_ln117_939_fu_944_p2;
        select_ln117_997_reg_1467 <= select_ln117_997_fu_962_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln102_1000_fu_1032_p2 = (icmp_ln86_1040_reg_1420 & and_ln102_988_fu_993_p2);

assign and_ln102_1001_fu_1042_p2 = (and_ln102_982_fu_970_p2 & and_ln102_1008_fu_1037_p2);

assign and_ln102_1002_fu_1048_p2 = (icmp_ln86_1042_reg_1430 & and_ln102_989_fu_1003_p2);

assign and_ln102_1003_fu_1058_p2 = (and_ln104_201_fu_979_p2 & and_ln102_1009_fu_1053_p2);

assign and_ln102_1004_fu_698_p2 = (xor_ln104_493_fu_626_p2 & icmp_ln86_1031_fu_452_p2);

assign and_ln102_1005_fu_716_p2 = (xor_ln104_494_fu_638_p2 & icmp_ln86_1033_fu_464_p2);

assign and_ln102_1006_fu_740_p2 = (xor_ln104_496_fu_668_p2 & icmp_ln86_1036_fu_482_p2);

assign and_ln102_1007_fu_1018_p2 = (xor_ln104_497_fu_988_p2 & icmp_ln86_1038_reg_1410);

assign and_ln102_1008_fu_1037_p2 = (xor_ln104_499_fu_998_p2 & icmp_ln86_1041_reg_1425);

assign and_ln102_1009_fu_1053_p2 = (xor_ln104_500_fu_1008_p2 & icmp_ln86_1043_reg_1435);

assign and_ln102_978_fu_554_p2 = (xor_ln104_fu_530_p2 & icmp_ln86_1018_fu_374_p2);

assign and_ln102_979_fu_572_p2 = (icmp_ln86_1019_fu_380_p2 & and_ln102_fu_536_p2);

assign and_ln102_980_fu_590_p2 = (icmp_ln86_1020_fu_386_p2 & and_ln104_fu_548_p2);

assign and_ln102_981_fu_608_p2 = (icmp_ln86_1021_fu_392_p2 & and_ln102_978_fu_554_p2);

assign and_ln102_982_fu_970_p2 = (icmp_ln86_1022_reg_1381 & and_ln104_197_reg_1440);

assign and_ln102_983_fu_632_p2 = (icmp_ln86_1024_fu_410_p2 & and_ln104_198_fu_584_p2);

assign and_ln102_984_fu_644_p2 = (icmp_ln86_1025_fu_416_p2 & and_ln102_980_fu_590_p2);

assign and_ln102_985_fu_662_p2 = (icmp_ln86_1026_fu_422_p2 & and_ln104_199_fu_602_p2);

assign and_ln102_986_fu_984_p2 = (icmp_ln86_1027_reg_1387 & and_ln102_981_reg_1447);

assign and_ln102_987_fu_674_p2 = (icmp_ln86_1028_fu_434_p2 & and_ln104_200_fu_620_p2);

assign and_ln102_988_fu_993_p2 = (icmp_ln86_1029_reg_1393 & and_ln102_982_fu_970_p2);

assign and_ln102_989_fu_1003_p2 = (icmp_ln86_1030_reg_1399 & and_ln104_201_fu_979_p2);

assign and_ln102_990_fu_692_p2 = (icmp_ln86_1023_fu_404_p2 & and_ln102_979_fu_572_p2);

assign and_ln102_991_fu_704_p2 = (and_ln102_979_fu_572_p2 & and_ln102_1004_fu_698_p2);

assign and_ln102_992_fu_710_p2 = (icmp_ln86_1032_fu_458_p2 & and_ln102_983_fu_632_p2);

assign and_ln102_993_fu_722_p2 = (and_ln104_198_fu_584_p2 & and_ln102_1005_fu_716_p2);

assign and_ln102_994_fu_728_p2 = (icmp_ln86_1034_fu_470_p2 & and_ln104_202_fu_656_p2);

assign and_ln102_995_fu_734_p2 = (icmp_ln86_1035_fu_476_p2 & and_ln102_985_fu_662_p2);

assign and_ln102_996_fu_746_p2 = (and_ln104_199_fu_602_p2 & and_ln102_1006_fu_740_p2);

assign and_ln102_997_fu_1013_p2 = (icmp_ln86_1037_reg_1405 & and_ln102_986_fu_984_p2);

assign and_ln102_998_fu_1023_p2 = (and_ln102_981_reg_1447 & and_ln102_1007_fu_1018_p2);

assign and_ln102_999_fu_1028_p2 = (icmp_ln86_1039_reg_1415 & and_ln104_203_reg_1454);

assign and_ln102_fu_536_p2 = (icmp_ln86_fu_362_p2 & icmp_ln86_1017_fu_368_p2);

assign and_ln104_197_fu_566_p2 = (xor_ln104_fu_530_p2 & xor_ln104_488_fu_560_p2);

assign and_ln104_198_fu_584_p2 = (xor_ln104_489_fu_578_p2 & and_ln102_fu_536_p2);

assign and_ln104_199_fu_602_p2 = (xor_ln104_490_fu_596_p2 & and_ln104_fu_548_p2);

assign and_ln104_200_fu_620_p2 = (xor_ln104_491_fu_614_p2 & and_ln102_978_fu_554_p2);

assign and_ln104_201_fu_979_p2 = (xor_ln104_492_fu_974_p2 & and_ln104_197_reg_1440);

assign and_ln104_202_fu_656_p2 = (xor_ln104_495_fu_650_p2 & and_ln102_980_fu_590_p2);

assign and_ln104_203_fu_686_p2 = (xor_ln104_498_fu_680_p2 & and_ln104_200_fu_620_p2);

assign and_ln104_fu_548_p2 = (xor_ln104_487_fu_542_p2 & icmp_ln86_fu_362_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((or_ln117_953_fu_1232_p2[0:0] == 1'b1) ? tmp_fu_1245_p63 : 12'd0);

assign icmp_ln86_1017_fu_368_p2 = (($signed(x_11_val) < $signed(18'd758)) ? 1'b1 : 1'b0);

assign icmp_ln86_1018_fu_374_p2 = (($signed(x_3_val) < $signed(18'd42792)) ? 1'b1 : 1'b0);

assign icmp_ln86_1019_fu_380_p2 = (($signed(x_51_val) < $signed(18'd947)) ? 1'b1 : 1'b0);

assign icmp_ln86_1020_fu_386_p2 = (($signed(x_11_val) < $signed(18'd759)) ? 1'b1 : 1'b0);

assign icmp_ln86_1021_fu_392_p2 = (($signed(x_38_val) < $signed(18'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_1022_fu_398_p2 = (($signed(x_25_val) < $signed(18'd351)) ? 1'b1 : 1'b0);

assign icmp_ln86_1023_fu_404_p2 = (($signed(x_33_val) < $signed(18'd548)) ? 1'b1 : 1'b0);

assign icmp_ln86_1024_fu_410_p2 = (($signed(x_1_val) < $signed(18'd74620)) ? 1'b1 : 1'b0);

assign icmp_ln86_1025_fu_416_p2 = (($signed(x_44_val) < $signed(18'd12)) ? 1'b1 : 1'b0);

assign icmp_ln86_1026_fu_422_p2 = (($signed(x_8_val) < $signed(18'd2302)) ? 1'b1 : 1'b0);

assign icmp_ln86_1027_fu_428_p2 = (($signed(x_49_val) < $signed(18'd13724)) ? 1'b1 : 1'b0);

assign icmp_ln86_1028_fu_434_p2 = (($signed(x_14_val) < $signed(18'd10)) ? 1'b1 : 1'b0);

assign icmp_ln86_1029_fu_440_p2 = (($signed(x_45_val) < $signed(18'd349)) ? 1'b1 : 1'b0);

assign icmp_ln86_1030_fu_446_p2 = (($signed(x_43_val) < $signed(18'd124)) ? 1'b1 : 1'b0);

assign icmp_ln86_1031_fu_452_p2 = (($signed(x_7_val) < $signed(18'd8726)) ? 1'b1 : 1'b0);

assign icmp_ln86_1032_fu_458_p2 = (($signed(x_38_val) < $signed(18'd7)) ? 1'b1 : 1'b0);

assign icmp_ln86_1033_fu_464_p2 = (($signed(x_33_val) < $signed(18'd493)) ? 1'b1 : 1'b0);

assign icmp_ln86_1034_fu_470_p2 = (($signed(x_16_val) < $signed(18'd66)) ? 1'b1 : 1'b0);

assign icmp_ln86_1035_fu_476_p2 = (($signed(x_3_val) < $signed(18'd91840)) ? 1'b1 : 1'b0);

assign icmp_ln86_1036_fu_482_p2 = (($signed(x_3_val) < $signed(18'd76674)) ? 1'b1 : 1'b0);

assign icmp_ln86_1037_fu_488_p2 = (($signed(x_52_val) < $signed(18'd54785)) ? 1'b1 : 1'b0);

assign icmp_ln86_1038_fu_494_p2 = (($signed(x_34_val) < $signed(18'd480)) ? 1'b1 : 1'b0);

assign icmp_ln86_1039_fu_500_p2 = (($signed(x_8_val) < $signed(18'd716)) ? 1'b1 : 1'b0);

assign icmp_ln86_1040_fu_506_p2 = (($signed(x_44_val) < $signed(18'd19)) ? 1'b1 : 1'b0);

assign icmp_ln86_1041_fu_512_p2 = (($signed(x_40_val) < $signed(18'd1229)) ? 1'b1 : 1'b0);

assign icmp_ln86_1042_fu_518_p2 = (($signed(x_11_val) < $signed(18'd991)) ? 1'b1 : 1'b0);

assign icmp_ln86_1043_fu_524_p2 = (($signed(x_25_val) < $signed(18'd406)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_362_p2 = (($signed(x_25_val) < $signed(18'd312)) ? 1'b1 : 1'b0);

assign or_ln117_927_fu_768_p2 = (or_ln117_fu_752_p2 | and_ln102_990_fu_692_p2);

assign or_ln117_928_fu_786_p2 = (or_ln117_927_fu_768_p2 | and_ln102_991_fu_704_p2);

assign or_ln117_929_fu_800_p2 = (or_ln117_fu_752_p2 | and_ln102_979_fu_572_p2);

assign or_ln117_930_fu_814_p2 = (or_ln117_929_fu_800_p2 | and_ln102_992_fu_710_p2);

assign or_ln117_931_fu_828_p2 = (or_ln117_929_fu_800_p2 | and_ln102_983_fu_632_p2);

assign or_ln117_932_fu_846_p2 = (or_ln117_931_fu_828_p2 | and_ln102_993_fu_722_p2);

assign or_ln117_933_fu_860_p2 = (or_ln117_fu_752_p2 | and_ln102_fu_536_p2);

assign or_ln117_934_fu_874_p2 = (or_ln117_933_fu_860_p2 | and_ln102_994_fu_728_p2);

assign or_ln117_935_fu_888_p2 = (or_ln117_933_fu_860_p2 | and_ln104_202_fu_656_p2);

assign or_ln117_936_fu_902_p2 = (or_ln117_935_fu_888_p2 | and_ln102_995_fu_734_p2);

assign or_ln117_937_fu_916_p2 = (or_ln117_935_fu_888_p2 | and_ln102_985_fu_662_p2);

assign or_ln117_938_fu_930_p2 = (or_ln117_937_fu_916_p2 | and_ln102_996_fu_746_p2);

assign or_ln117_939_fu_944_p2 = (or_ln117_935_fu_888_p2 | and_ln104_199_fu_602_p2);

assign or_ln117_940_fu_1064_p2 = (or_ln117_939_reg_1460 | and_ln102_997_fu_1013_p2);

assign or_ln117_941_fu_1069_p2 = (or_ln117_939_reg_1460 | and_ln102_986_fu_984_p2);

assign or_ln117_942_fu_1081_p2 = (or_ln117_941_fu_1069_p2 | and_ln102_998_fu_1023_p2);

assign or_ln117_943_fu_1095_p2 = (or_ln117_939_reg_1460 | and_ln102_981_reg_1447);

assign or_ln117_944_fu_1107_p2 = (or_ln117_943_fu_1095_p2 | and_ln102_999_fu_1028_p2);

assign or_ln117_945_fu_1121_p2 = (or_ln117_943_fu_1095_p2 | and_ln104_203_reg_1454);

assign or_ln117_946_fu_1134_p2 = (or_ln117_945_fu_1121_p2 | and_ln102_1000_fu_1032_p2);

assign or_ln117_947_fu_1148_p2 = (or_ln117_945_fu_1121_p2 | and_ln102_988_fu_993_p2);

assign or_ln117_948_fu_1162_p2 = (or_ln117_947_fu_1148_p2 | and_ln102_1001_fu_1042_p2);

assign or_ln117_949_fu_1176_p2 = (or_ln117_945_fu_1121_p2 | and_ln102_982_fu_970_p2);

assign or_ln117_950_fu_1190_p2 = (or_ln117_949_fu_1176_p2 | and_ln102_1002_fu_1048_p2);

assign or_ln117_951_fu_1204_p2 = (or_ln117_949_fu_1176_p2 | and_ln102_989_fu_1003_p2);

assign or_ln117_952_fu_1218_p2 = (or_ln117_951_fu_1204_p2 | and_ln102_1003_fu_1058_p2);

assign or_ln117_953_fu_1232_p2 = (or_ln117_945_fu_1121_p2 | and_ln104_197_reg_1440);

assign or_ln117_fu_752_p2 = (and_ln102_987_fu_674_p2 | and_ln102_984_fu_644_p2);

assign select_ln117_1000_fu_1099_p3 = ((or_ln117_942_fu_1081_p2[0:0] == 1'b1) ? select_ln117_999_fu_1087_p3 : 5'd19);

assign select_ln117_1001_fu_1113_p3 = ((or_ln117_943_fu_1095_p2[0:0] == 1'b1) ? select_ln117_1000_fu_1099_p3 : 5'd20);

assign select_ln117_1002_fu_1126_p3 = ((or_ln117_944_fu_1107_p2[0:0] == 1'b1) ? select_ln117_1001_fu_1113_p3 : 5'd21);

assign select_ln117_1003_fu_1140_p3 = ((or_ln117_945_fu_1121_p2[0:0] == 1'b1) ? select_ln117_1002_fu_1126_p3 : 5'd22);

assign select_ln117_1004_fu_1154_p3 = ((or_ln117_946_fu_1134_p2[0:0] == 1'b1) ? select_ln117_1003_fu_1140_p3 : 5'd23);

assign select_ln117_1005_fu_1168_p3 = ((or_ln117_947_fu_1148_p2[0:0] == 1'b1) ? select_ln117_1004_fu_1154_p3 : 5'd24);

assign select_ln117_1006_fu_1182_p3 = ((or_ln117_948_fu_1162_p2[0:0] == 1'b1) ? select_ln117_1005_fu_1168_p3 : 5'd25);

assign select_ln117_1007_fu_1196_p3 = ((or_ln117_949_fu_1176_p2[0:0] == 1'b1) ? select_ln117_1006_fu_1182_p3 : 5'd26);

assign select_ln117_1008_fu_1210_p3 = ((or_ln117_950_fu_1190_p2[0:0] == 1'b1) ? select_ln117_1007_fu_1196_p3 : 5'd27);

assign select_ln117_1009_fu_1224_p3 = ((or_ln117_951_fu_1204_p2[0:0] == 1'b1) ? select_ln117_1008_fu_1210_p3 : 5'd28);

assign select_ln117_985_fu_792_p3 = ((or_ln117_927_fu_768_p2[0:0] == 1'b1) ? zext_ln117_114_fu_782_p1 : 3'd4);

assign select_ln117_986_fu_806_p3 = ((or_ln117_928_fu_786_p2[0:0] == 1'b1) ? select_ln117_985_fu_792_p3 : 3'd5);

assign select_ln117_987_fu_820_p3 = ((or_ln117_929_fu_800_p2[0:0] == 1'b1) ? select_ln117_986_fu_806_p3 : 3'd6);

assign select_ln117_988_fu_834_p3 = ((or_ln117_930_fu_814_p2[0:0] == 1'b1) ? select_ln117_987_fu_820_p3 : 3'd7);

assign select_ln117_989_fu_852_p3 = ((or_ln117_931_fu_828_p2[0:0] == 1'b1) ? zext_ln117_115_fu_842_p1 : 4'd8);

assign select_ln117_990_fu_866_p3 = ((or_ln117_932_fu_846_p2[0:0] == 1'b1) ? select_ln117_989_fu_852_p3 : 4'd9);

assign select_ln117_991_fu_880_p3 = ((or_ln117_933_fu_860_p2[0:0] == 1'b1) ? select_ln117_990_fu_866_p3 : 4'd10);

assign select_ln117_992_fu_894_p3 = ((or_ln117_934_fu_874_p2[0:0] == 1'b1) ? select_ln117_991_fu_880_p3 : 4'd11);

assign select_ln117_993_fu_908_p3 = ((or_ln117_935_fu_888_p2[0:0] == 1'b1) ? select_ln117_992_fu_894_p3 : 4'd12);

assign select_ln117_994_fu_922_p3 = ((or_ln117_936_fu_902_p2[0:0] == 1'b1) ? select_ln117_993_fu_908_p3 : 4'd13);

assign select_ln117_995_fu_936_p3 = ((or_ln117_937_fu_916_p2[0:0] == 1'b1) ? select_ln117_994_fu_922_p3 : 4'd14);

assign select_ln117_996_fu_950_p3 = ((or_ln117_938_fu_930_p2[0:0] == 1'b1) ? select_ln117_995_fu_936_p3 : 4'd15);

assign select_ln117_997_fu_962_p3 = ((or_ln117_939_fu_944_p2[0:0] == 1'b1) ? zext_ln117_116_fu_958_p1 : 5'd16);

assign select_ln117_998_fu_1074_p3 = ((or_ln117_940_fu_1064_p2[0:0] == 1'b1) ? select_ln117_997_reg_1467 : 5'd17);

assign select_ln117_999_fu_1087_p3 = ((or_ln117_941_fu_1069_p2[0:0] == 1'b1) ? select_ln117_998_fu_1074_p3 : 5'd18);

assign select_ln117_fu_774_p3 = ((or_ln117_fu_752_p2[0:0] == 1'b1) ? zext_ln117_fu_764_p1 : 2'd2);

assign tmp_fu_1245_p61 = 'bx;

assign tmp_fu_1245_p62 = ((or_ln117_952_fu_1218_p2[0:0] == 1'b1) ? select_ln117_1009_fu_1224_p3 : 5'd29);

assign xor_ln104_487_fu_542_p2 = (icmp_ln86_1017_fu_368_p2 ^ 1'd1);

assign xor_ln104_488_fu_560_p2 = (icmp_ln86_1018_fu_374_p2 ^ 1'd1);

assign xor_ln104_489_fu_578_p2 = (icmp_ln86_1019_fu_380_p2 ^ 1'd1);

assign xor_ln104_490_fu_596_p2 = (icmp_ln86_1020_fu_386_p2 ^ 1'd1);

assign xor_ln104_491_fu_614_p2 = (icmp_ln86_1021_fu_392_p2 ^ 1'd1);

assign xor_ln104_492_fu_974_p2 = (icmp_ln86_1022_reg_1381 ^ 1'd1);

assign xor_ln104_493_fu_626_p2 = (icmp_ln86_1023_fu_404_p2 ^ 1'd1);

assign xor_ln104_494_fu_638_p2 = (icmp_ln86_1024_fu_410_p2 ^ 1'd1);

assign xor_ln104_495_fu_650_p2 = (icmp_ln86_1025_fu_416_p2 ^ 1'd1);

assign xor_ln104_496_fu_668_p2 = (icmp_ln86_1026_fu_422_p2 ^ 1'd1);

assign xor_ln104_497_fu_988_p2 = (icmp_ln86_1027_reg_1387 ^ 1'd1);

assign xor_ln104_498_fu_680_p2 = (icmp_ln86_1028_fu_434_p2 ^ 1'd1);

assign xor_ln104_499_fu_998_p2 = (icmp_ln86_1029_reg_1393 ^ 1'd1);

assign xor_ln104_500_fu_1008_p2 = (icmp_ln86_1030_reg_1399 ^ 1'd1);

assign xor_ln104_fu_530_p2 = (icmp_ln86_fu_362_p2 ^ 1'd1);

assign xor_ln117_fu_758_p2 = (1'd1 ^ and_ln102_984_fu_644_p2);

assign zext_ln117_114_fu_782_p1 = select_ln117_fu_774_p3;

assign zext_ln117_115_fu_842_p1 = select_ln117_988_fu_834_p3;

assign zext_ln117_116_fu_958_p1 = select_ln117_996_fu_950_p3;

assign zext_ln117_fu_764_p1 = xor_ln117_fu_758_p2;

endmodule //my_prj_decision_function_39
