// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_115 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_3_val,
        x_9_val,
        x_10_val,
        x_15_val,
        x_17_val,
        x_18_val,
        x_19_val,
        x_25_val,
        x_28_val,
        x_33_val,
        x_35_val,
        x_38_val,
        x_39_val,
        x_40_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_3_val;
input  [17:0] x_9_val;
input  [17:0] x_10_val;
input  [17:0] x_15_val;
input  [17:0] x_17_val;
input  [17:0] x_18_val;
input  [17:0] x_19_val;
input  [17:0] x_25_val;
input  [17:0] x_28_val;
input  [17:0] x_33_val;
input  [17:0] x_35_val;
input  [17:0] x_38_val;
input  [17:0] x_39_val;
input  [17:0] x_40_val;
input  [17:0] x_52_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_1631_fu_364_p2;
reg   [0:0] icmp_ln86_1631_reg_1064;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_1632_fu_370_p2;
reg   [0:0] icmp_ln86_1632_reg_1070;
wire   [0:0] icmp_ln86_1640_fu_418_p2;
reg   [0:0] icmp_ln86_1640_reg_1076;
wire   [0:0] icmp_ln86_1641_fu_424_p2;
reg   [0:0] icmp_ln86_1641_reg_1081;
wire   [0:0] icmp_ln86_1642_fu_430_p2;
reg   [0:0] icmp_ln86_1642_reg_1086;
wire   [0:0] icmp_ln86_1643_fu_436_p2;
reg   [0:0] icmp_ln86_1643_reg_1091;
wire   [0:0] and_ln104_308_fu_496_p2;
reg   [0:0] and_ln104_308_reg_1096;
wire   [0:0] and_ln102_1804_fu_502_p2;
reg   [0:0] and_ln102_1804_reg_1102;
wire   [0:0] or_ln117_1475_fu_786_p2;
reg   [0:0] or_ln117_1475_reg_1108;
wire   [3:0] select_ln117_1586_fu_800_p3;
reg   [3:0] select_ln117_1586_reg_1114;
wire   [0:0] or_ln117_1479_fu_808_p2;
reg   [0:0] or_ln117_1479_reg_1119;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln86_fu_316_p2;
wire   [0:0] icmp_ln86_1624_fu_322_p2;
wire   [0:0] xor_ln104_777_fu_454_p2;
wire   [0:0] icmp_ln86_1625_fu_328_p2;
wire   [0:0] and_ln102_fu_448_p2;
wire   [0:0] xor_ln104_778_fu_472_p2;
wire   [0:0] icmp_ln86_1626_fu_334_p2;
wire   [0:0] and_ln104_fu_460_p2;
wire   [0:0] xor_ln104_779_fu_490_p2;
wire   [0:0] icmp_ln86_1627_fu_340_p2;
wire   [0:0] xor_ln104_fu_442_p2;
wire   [0:0] xor_ln104_780_fu_508_p2;
wire   [0:0] icmp_ln86_1628_fu_346_p2;
wire   [0:0] and_ln102_1802_fu_466_p2;
wire   [0:0] icmp_ln86_1629_fu_352_p2;
wire   [0:0] and_ln104_307_fu_478_p2;
wire   [0:0] icmp_ln86_1630_fu_358_p2;
wire   [0:0] and_ln102_1803_fu_484_p2;
wire   [0:0] icmp_ln86_1633_fu_376_p2;
wire   [0:0] and_ln104_309_fu_514_p2;
wire   [0:0] icmp_ln86_1634_fu_382_p2;
wire   [0:0] and_ln102_1805_fu_520_p2;
wire   [0:0] icmp_ln86_1635_fu_388_p2;
wire   [0:0] xor_ln104_781_fu_526_p2;
wire   [0:0] and_ln102_1812_fu_568_p2;
wire   [0:0] icmp_ln86_1636_fu_394_p2;
wire   [0:0] and_ln102_1806_fu_532_p2;
wire   [0:0] icmp_ln86_1637_fu_400_p2;
wire   [0:0] xor_ln104_782_fu_538_p2;
wire   [0:0] and_ln102_1815_fu_586_p2;
wire   [0:0] icmp_ln86_1638_fu_406_p2;
wire   [0:0] and_ln102_1807_fu_544_p2;
wire   [0:0] icmp_ln86_1639_fu_412_p2;
wire   [0:0] xor_ln104_783_fu_550_p2;
wire   [0:0] and_ln102_1818_fu_604_p2;
wire   [0:0] and_ln102_1810_fu_556_p2;
wire   [0:0] and_ln102_1811_fu_562_p2;
wire   [1:0] select_ln117_fu_616_p3;
wire   [1:0] select_ln117_1574_fu_630_p3;
wire   [0:0] or_ln117_fu_624_p2;
wire   [2:0] zext_ln117_fu_638_p1;
wire   [0:0] or_ln117_1465_fu_642_p2;
wire   [0:0] and_ln102_1813_fu_574_p2;
wire   [2:0] select_ln117_1575_fu_648_p3;
wire   [0:0] or_ln117_1466_fu_656_p2;
wire   [2:0] select_ln117_1576_fu_662_p3;
wire   [0:0] or_ln117_1467_fu_670_p2;
wire   [0:0] and_ln102_1814_fu_580_p2;
wire   [2:0] select_ln117_1577_fu_676_p3;
wire   [2:0] select_ln117_1578_fu_690_p3;
wire   [0:0] or_ln117_1468_fu_684_p2;
wire   [3:0] zext_ln117_175_fu_698_p1;
wire   [0:0] or_ln117_1469_fu_702_p2;
wire   [0:0] and_ln102_1816_fu_592_p2;
wire   [3:0] select_ln117_1579_fu_708_p3;
wire   [0:0] or_ln117_1470_fu_716_p2;
wire   [3:0] select_ln117_1580_fu_722_p3;
wire   [0:0] or_ln117_1471_fu_730_p2;
wire   [0:0] and_ln102_1817_fu_598_p2;
wire   [3:0] select_ln117_1581_fu_736_p3;
wire   [0:0] or_ln117_1472_fu_744_p2;
wire   [3:0] select_ln117_1582_fu_750_p3;
wire   [0:0] or_ln117_1473_fu_758_p2;
wire   [0:0] and_ln102_1819_fu_610_p2;
wire   [3:0] select_ln117_1583_fu_764_p3;
wire   [0:0] or_ln117_1474_fu_772_p2;
wire   [3:0] select_ln117_1584_fu_778_p3;
wire   [3:0] select_ln117_1585_fu_792_p3;
wire   [0:0] and_ln102_1808_fu_814_p2;
wire   [0:0] xor_ln104_784_fu_818_p2;
wire   [0:0] and_ln102_1821_fu_837_p2;
wire   [0:0] and_ln102_1809_fu_823_p2;
wire   [0:0] xor_ln104_785_fu_827_p2;
wire   [0:0] and_ln102_1824_fu_852_p2;
wire   [0:0] and_ln102_1820_fu_832_p2;
wire   [0:0] or_ln117_1476_fu_862_p2;
wire   [4:0] zext_ln117_176_fu_867_p1;
wire   [0:0] or_ln117_1477_fu_870_p2;
wire   [0:0] and_ln102_1822_fu_842_p2;
wire   [4:0] select_ln117_1587_fu_875_p3;
wire   [0:0] or_ln117_1478_fu_883_p2;
wire   [4:0] select_ln117_1588_fu_889_p3;
wire   [0:0] and_ln102_1823_fu_847_p2;
wire   [4:0] select_ln117_1589_fu_897_p3;
wire   [0:0] or_ln117_1480_fu_905_p2;
wire   [4:0] select_ln117_1590_fu_910_p3;
wire   [0:0] or_ln117_1481_fu_917_p2;
wire   [0:0] and_ln102_1825_fu_857_p2;
wire   [4:0] select_ln117_1591_fu_922_p3;
wire   [0:0] or_ln117_1482_fu_930_p2;
wire   [4:0] select_ln117_1592_fu_936_p3;
wire   [11:0] agg_result_fu_952_p53;
wire   [4:0] agg_result_fu_952_p54;
wire   [11:0] agg_result_fu_952_p55;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_952_p1;
wire   [4:0] agg_result_fu_952_p3;
wire   [4:0] agg_result_fu_952_p5;
wire   [4:0] agg_result_fu_952_p7;
wire   [4:0] agg_result_fu_952_p9;
wire   [4:0] agg_result_fu_952_p11;
wire   [4:0] agg_result_fu_952_p13;
wire   [4:0] agg_result_fu_952_p15;
wire   [4:0] agg_result_fu_952_p17;
wire   [4:0] agg_result_fu_952_p19;
wire   [4:0] agg_result_fu_952_p21;
wire   [4:0] agg_result_fu_952_p23;
wire   [4:0] agg_result_fu_952_p25;
wire   [4:0] agg_result_fu_952_p27;
wire   [4:0] agg_result_fu_952_p29;
wire  signed [4:0] agg_result_fu_952_p31;
wire  signed [4:0] agg_result_fu_952_p33;
wire  signed [4:0] agg_result_fu_952_p35;
wire  signed [4:0] agg_result_fu_952_p37;
wire  signed [4:0] agg_result_fu_952_p39;
wire  signed [4:0] agg_result_fu_952_p41;
wire  signed [4:0] agg_result_fu_952_p43;
wire  signed [4:0] agg_result_fu_952_p45;
wire  signed [4:0] agg_result_fu_952_p47;
wire  signed [4:0] agg_result_fu_952_p49;
wire  signed [4:0] agg_result_fu_952_p51;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_53_5_12_1_1_x1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h1 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h2 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h3 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h4 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h5 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h6 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h7 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h8 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h9 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'hA ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hB ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hC ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hD ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hE ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hF ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'h10 ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h11 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h12 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h13 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h14 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h15 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h16 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h17 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h18 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h19 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h1A ),
    .din25_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_53_5_12_1_1_x1_U2233(
    .din0(12'd2899),
    .din1(12'd256),
    .din2(12'd988),
    .din3(12'd3769),
    .din4(12'd4093),
    .din5(12'd683),
    .din6(12'd80),
    .din7(12'd883),
    .din8(12'd1105),
    .din9(12'd4000),
    .din10(12'd3871),
    .din11(12'd28),
    .din12(12'd3762),
    .din13(12'd663),
    .din14(12'd130),
    .din15(12'd4079),
    .din16(12'd10),
    .din17(12'd3869),
    .din18(12'd680),
    .din19(12'd211),
    .din20(12'd288),
    .din21(12'd3359),
    .din22(12'd3400),
    .din23(12'd87),
    .din24(12'd3767),
    .din25(12'd690),
    .def(agg_result_fu_952_p53),
    .sel(agg_result_fu_952_p54),
    .dout(agg_result_fu_952_p55)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln102_1804_reg_1102 <= and_ln102_1804_fu_502_p2;
        and_ln104_308_reg_1096 <= and_ln104_308_fu_496_p2;
        icmp_ln86_1631_reg_1064 <= icmp_ln86_1631_fu_364_p2;
        icmp_ln86_1632_reg_1070 <= icmp_ln86_1632_fu_370_p2;
        icmp_ln86_1640_reg_1076 <= icmp_ln86_1640_fu_418_p2;
        icmp_ln86_1641_reg_1081 <= icmp_ln86_1641_fu_424_p2;
        icmp_ln86_1642_reg_1086 <= icmp_ln86_1642_fu_430_p2;
        icmp_ln86_1643_reg_1091 <= icmp_ln86_1643_fu_436_p2;
        or_ln117_1475_reg_1108 <= or_ln117_1475_fu_786_p2;
        or_ln117_1479_reg_1119 <= or_ln117_1479_fu_808_p2;
        select_ln117_1586_reg_1114 <= select_ln117_1586_fu_800_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_952_p53 = 'bx;

assign agg_result_fu_952_p54 = ((or_ln117_1482_fu_930_p2[0:0] == 1'b1) ? select_ln117_1592_fu_936_p3 : 5'd26);

assign and_ln102_1802_fu_466_p2 = (icmp_ln86_1625_fu_328_p2 & and_ln102_fu_448_p2);

assign and_ln102_1803_fu_484_p2 = (icmp_ln86_1626_fu_334_p2 & and_ln104_fu_460_p2);

assign and_ln102_1804_fu_502_p2 = (xor_ln104_fu_442_p2 & icmp_ln86_1627_fu_340_p2);

assign and_ln102_1805_fu_520_p2 = (icmp_ln86_1628_fu_346_p2 & and_ln102_1802_fu_466_p2);

assign and_ln102_1806_fu_532_p2 = (icmp_ln86_1629_fu_352_p2 & and_ln104_307_fu_478_p2);

assign and_ln102_1807_fu_544_p2 = (icmp_ln86_1630_fu_358_p2 & and_ln102_1803_fu_484_p2);

assign and_ln102_1808_fu_814_p2 = (icmp_ln86_1631_reg_1064 & and_ln104_308_reg_1096);

assign and_ln102_1809_fu_823_p2 = (icmp_ln86_1632_reg_1070 & and_ln102_1804_reg_1102);

assign and_ln102_1810_fu_556_p2 = (icmp_ln86_1633_fu_376_p2 & and_ln104_309_fu_514_p2);

assign and_ln102_1811_fu_562_p2 = (icmp_ln86_1634_fu_382_p2 & and_ln102_1805_fu_520_p2);

assign and_ln102_1812_fu_568_p2 = (xor_ln104_781_fu_526_p2 & icmp_ln86_1635_fu_388_p2);

assign and_ln102_1813_fu_574_p2 = (and_ln102_1812_fu_568_p2 & and_ln102_1802_fu_466_p2);

assign and_ln102_1814_fu_580_p2 = (icmp_ln86_1636_fu_394_p2 & and_ln102_1806_fu_532_p2);

assign and_ln102_1815_fu_586_p2 = (xor_ln104_782_fu_538_p2 & icmp_ln86_1637_fu_400_p2);

assign and_ln102_1816_fu_592_p2 = (and_ln104_307_fu_478_p2 & and_ln102_1815_fu_586_p2);

assign and_ln102_1817_fu_598_p2 = (icmp_ln86_1638_fu_406_p2 & and_ln102_1807_fu_544_p2);

assign and_ln102_1818_fu_604_p2 = (xor_ln104_783_fu_550_p2 & icmp_ln86_1639_fu_412_p2);

assign and_ln102_1819_fu_610_p2 = (and_ln102_1818_fu_604_p2 & and_ln102_1803_fu_484_p2);

assign and_ln102_1820_fu_832_p2 = (icmp_ln86_1640_reg_1076 & and_ln102_1808_fu_814_p2);

assign and_ln102_1821_fu_837_p2 = (xor_ln104_784_fu_818_p2 & icmp_ln86_1641_reg_1081);

assign and_ln102_1822_fu_842_p2 = (and_ln104_308_reg_1096 & and_ln102_1821_fu_837_p2);

assign and_ln102_1823_fu_847_p2 = (icmp_ln86_1642_reg_1086 & and_ln102_1809_fu_823_p2);

assign and_ln102_1824_fu_852_p2 = (xor_ln104_785_fu_827_p2 & icmp_ln86_1643_reg_1091);

assign and_ln102_1825_fu_857_p2 = (and_ln102_1824_fu_852_p2 & and_ln102_1804_reg_1102);

assign and_ln102_fu_448_p2 = (icmp_ln86_fu_316_p2 & icmp_ln86_1624_fu_322_p2);

assign and_ln104_307_fu_478_p2 = (xor_ln104_778_fu_472_p2 & and_ln102_fu_448_p2);

assign and_ln104_308_fu_496_p2 = (xor_ln104_779_fu_490_p2 & and_ln104_fu_460_p2);

assign and_ln104_309_fu_514_p2 = (xor_ln104_fu_442_p2 & xor_ln104_780_fu_508_p2);

assign and_ln104_fu_460_p2 = (xor_ln104_777_fu_454_p2 & icmp_ln86_fu_316_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_952_p55;

assign icmp_ln86_1624_fu_322_p2 = (($signed(x_28_val) < $signed(18'd22092)) ? 1'b1 : 1'b0);

assign icmp_ln86_1625_fu_328_p2 = (($signed(x_3_val) < $signed(18'd143590)) ? 1'b1 : 1'b0);

assign icmp_ln86_1626_fu_334_p2 = (($signed(x_1_val) < $signed(18'd192175)) ? 1'b1 : 1'b0);

assign icmp_ln86_1627_fu_340_p2 = (($signed(x_17_val) < $signed(18'd95)) ? 1'b1 : 1'b0);

assign icmp_ln86_1628_fu_346_p2 = (($signed(x_10_val) < $signed(18'd344)) ? 1'b1 : 1'b0);

assign icmp_ln86_1629_fu_352_p2 = (($signed(x_40_val) < $signed(18'd219)) ? 1'b1 : 1'b0);

assign icmp_ln86_1630_fu_358_p2 = (($signed(x_1_val) < $signed(18'd181239)) ? 1'b1 : 1'b0);

assign icmp_ln86_1631_fu_364_p2 = (($signed(x_1_val) < $signed(18'd6737)) ? 1'b1 : 1'b0);

assign icmp_ln86_1632_fu_370_p2 = (($signed(x_33_val) < $signed(18'd788)) ? 1'b1 : 1'b0);

assign icmp_ln86_1633_fu_376_p2 = (($signed(x_18_val) < $signed(18'd13510)) ? 1'b1 : 1'b0);

assign icmp_ln86_1634_fu_382_p2 = (($signed(x_17_val) < $signed(18'd28)) ? 1'b1 : 1'b0);

assign icmp_ln86_1635_fu_388_p2 = (($signed(x_3_val) < $signed(18'd143334)) ? 1'b1 : 1'b0);

assign icmp_ln86_1636_fu_394_p2 = (($signed(x_39_val) < $signed(18'd747)) ? 1'b1 : 1'b0);

assign icmp_ln86_1637_fu_400_p2 = (($signed(x_38_val) < $signed(18'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_1638_fu_406_p2 = (($signed(x_52_val) < $signed(18'd71169)) ? 1'b1 : 1'b0);

assign icmp_ln86_1639_fu_412_p2 = (($signed(x_9_val) < $signed(18'd5117)) ? 1'b1 : 1'b0);

assign icmp_ln86_1640_fu_418_p2 = (($signed(x_15_val) < $signed(18'd28)) ? 1'b1 : 1'b0);

assign icmp_ln86_1641_fu_424_p2 = (($signed(x_19_val) < $signed(18'd3460)) ? 1'b1 : 1'b0);

assign icmp_ln86_1642_fu_430_p2 = (($signed(x_35_val) < $signed(18'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_1643_fu_436_p2 = (($signed(x_39_val) < $signed(18'd2169)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_316_p2 = (($signed(x_25_val) < $signed(18'd389)) ? 1'b1 : 1'b0);

assign or_ln117_1465_fu_642_p2 = (and_ln104_309_fu_514_p2 | and_ln102_1805_fu_520_p2);

assign or_ln117_1466_fu_656_p2 = (or_ln117_1465_fu_642_p2 | and_ln102_1813_fu_574_p2);

assign or_ln117_1467_fu_670_p2 = (and_ln104_309_fu_514_p2 | and_ln102_1802_fu_466_p2);

assign or_ln117_1468_fu_684_p2 = (or_ln117_1467_fu_670_p2 | and_ln102_1814_fu_580_p2);

assign or_ln117_1469_fu_702_p2 = (or_ln117_1467_fu_670_p2 | and_ln102_1806_fu_532_p2);

assign or_ln117_1470_fu_716_p2 = (or_ln117_1469_fu_702_p2 | and_ln102_1816_fu_592_p2);

assign or_ln117_1471_fu_730_p2 = (and_ln104_309_fu_514_p2 | and_ln102_fu_448_p2);

assign or_ln117_1472_fu_744_p2 = (or_ln117_1471_fu_730_p2 | and_ln102_1817_fu_598_p2);

assign or_ln117_1473_fu_758_p2 = (or_ln117_1471_fu_730_p2 | and_ln102_1807_fu_544_p2);

assign or_ln117_1474_fu_772_p2 = (or_ln117_1473_fu_758_p2 | and_ln102_1819_fu_610_p2);

assign or_ln117_1475_fu_786_p2 = (or_ln117_1471_fu_730_p2 | and_ln102_1803_fu_484_p2);

assign or_ln117_1476_fu_862_p2 = (or_ln117_1475_reg_1108 | and_ln102_1820_fu_832_p2);

assign or_ln117_1477_fu_870_p2 = (or_ln117_1475_reg_1108 | and_ln102_1808_fu_814_p2);

assign or_ln117_1478_fu_883_p2 = (or_ln117_1477_fu_870_p2 | and_ln102_1822_fu_842_p2);

assign or_ln117_1479_fu_808_p2 = (icmp_ln86_fu_316_p2 | and_ln104_309_fu_514_p2);

assign or_ln117_1480_fu_905_p2 = (or_ln117_1479_reg_1119 | and_ln102_1823_fu_847_p2);

assign or_ln117_1481_fu_917_p2 = (or_ln117_1479_reg_1119 | and_ln102_1809_fu_823_p2);

assign or_ln117_1482_fu_930_p2 = (or_ln117_1481_fu_917_p2 | and_ln102_1825_fu_857_p2);

assign or_ln117_fu_624_p2 = (and_ln104_309_fu_514_p2 | and_ln102_1811_fu_562_p2);

assign select_ln117_1574_fu_630_p3 = ((and_ln104_309_fu_514_p2[0:0] == 1'b1) ? select_ln117_fu_616_p3 : 2'd3);

assign select_ln117_1575_fu_648_p3 = ((or_ln117_fu_624_p2[0:0] == 1'b1) ? zext_ln117_fu_638_p1 : 3'd4);

assign select_ln117_1576_fu_662_p3 = ((or_ln117_1465_fu_642_p2[0:0] == 1'b1) ? select_ln117_1575_fu_648_p3 : 3'd5);

assign select_ln117_1577_fu_676_p3 = ((or_ln117_1466_fu_656_p2[0:0] == 1'b1) ? select_ln117_1576_fu_662_p3 : 3'd6);

assign select_ln117_1578_fu_690_p3 = ((or_ln117_1467_fu_670_p2[0:0] == 1'b1) ? select_ln117_1577_fu_676_p3 : 3'd7);

assign select_ln117_1579_fu_708_p3 = ((or_ln117_1468_fu_684_p2[0:0] == 1'b1) ? zext_ln117_175_fu_698_p1 : 4'd8);

assign select_ln117_1580_fu_722_p3 = ((or_ln117_1469_fu_702_p2[0:0] == 1'b1) ? select_ln117_1579_fu_708_p3 : 4'd9);

assign select_ln117_1581_fu_736_p3 = ((or_ln117_1470_fu_716_p2[0:0] == 1'b1) ? select_ln117_1580_fu_722_p3 : 4'd10);

assign select_ln117_1582_fu_750_p3 = ((or_ln117_1471_fu_730_p2[0:0] == 1'b1) ? select_ln117_1581_fu_736_p3 : 4'd11);

assign select_ln117_1583_fu_764_p3 = ((or_ln117_1472_fu_744_p2[0:0] == 1'b1) ? select_ln117_1582_fu_750_p3 : 4'd12);

assign select_ln117_1584_fu_778_p3 = ((or_ln117_1473_fu_758_p2[0:0] == 1'b1) ? select_ln117_1583_fu_764_p3 : 4'd13);

assign select_ln117_1585_fu_792_p3 = ((or_ln117_1474_fu_772_p2[0:0] == 1'b1) ? select_ln117_1584_fu_778_p3 : 4'd14);

assign select_ln117_1586_fu_800_p3 = ((or_ln117_1475_fu_786_p2[0:0] == 1'b1) ? select_ln117_1585_fu_792_p3 : 4'd15);

assign select_ln117_1587_fu_875_p3 = ((or_ln117_1476_fu_862_p2[0:0] == 1'b1) ? zext_ln117_176_fu_867_p1 : 5'd16);

assign select_ln117_1588_fu_889_p3 = ((or_ln117_1477_fu_870_p2[0:0] == 1'b1) ? select_ln117_1587_fu_875_p3 : 5'd17);

assign select_ln117_1589_fu_897_p3 = ((or_ln117_1478_fu_883_p2[0:0] == 1'b1) ? select_ln117_1588_fu_889_p3 : 5'd18);

assign select_ln117_1590_fu_910_p3 = ((or_ln117_1479_reg_1119[0:0] == 1'b1) ? select_ln117_1589_fu_897_p3 : 5'd23);

assign select_ln117_1591_fu_922_p3 = ((or_ln117_1480_fu_905_p2[0:0] == 1'b1) ? select_ln117_1590_fu_910_p3 : 5'd24);

assign select_ln117_1592_fu_936_p3 = ((or_ln117_1481_fu_917_p2[0:0] == 1'b1) ? select_ln117_1591_fu_922_p3 : 5'd25);

assign select_ln117_fu_616_p3 = ((and_ln102_1810_fu_556_p2[0:0] == 1'b1) ? 2'd1 : 2'd2);

assign xor_ln104_777_fu_454_p2 = (icmp_ln86_1624_fu_322_p2 ^ 1'd1);

assign xor_ln104_778_fu_472_p2 = (icmp_ln86_1625_fu_328_p2 ^ 1'd1);

assign xor_ln104_779_fu_490_p2 = (icmp_ln86_1626_fu_334_p2 ^ 1'd1);

assign xor_ln104_780_fu_508_p2 = (icmp_ln86_1627_fu_340_p2 ^ 1'd1);

assign xor_ln104_781_fu_526_p2 = (icmp_ln86_1628_fu_346_p2 ^ 1'd1);

assign xor_ln104_782_fu_538_p2 = (icmp_ln86_1629_fu_352_p2 ^ 1'd1);

assign xor_ln104_783_fu_550_p2 = (icmp_ln86_1630_fu_358_p2 ^ 1'd1);

assign xor_ln104_784_fu_818_p2 = (icmp_ln86_1631_reg_1064 ^ 1'd1);

assign xor_ln104_785_fu_827_p2 = (icmp_ln86_1632_reg_1070 ^ 1'd1);

assign xor_ln104_fu_442_p2 = (icmp_ln86_fu_316_p2 ^ 1'd1);

assign zext_ln117_175_fu_698_p1 = select_ln117_1578_fu_690_p3;

assign zext_ln117_176_fu_867_p1 = select_ln117_1586_reg_1114;

assign zext_ln117_fu_638_p1 = select_ln117_1574_fu_630_p3;

endmodule //my_prj_decision_function_115
