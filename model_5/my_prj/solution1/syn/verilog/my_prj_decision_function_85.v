// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_85 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_2_val,
        x_3_val,
        x_5_val,
        x_9_val,
        x_10_val,
        x_11_val,
        x_13_val,
        x_16_val,
        x_17_val,
        x_19_val,
        x_21_val,
        x_25_val,
        x_29_val,
        x_33_val,
        x_38_val,
        x_45_val,
        x_46_val,
        x_49_val,
        x_50_val,
        x_51_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_2_val;
input  [17:0] x_3_val;
input  [17:0] x_5_val;
input  [17:0] x_9_val;
input  [17:0] x_10_val;
input  [17:0] x_11_val;
input  [17:0] x_13_val;
input  [17:0] x_16_val;
input  [17:0] x_17_val;
input  [17:0] x_19_val;
input  [17:0] x_21_val;
input  [17:0] x_25_val;
input  [17:0] x_29_val;
input  [17:0] x_33_val;
input  [17:0] x_38_val;
input  [17:0] x_45_val;
input  [17:0] x_46_val;
input  [17:0] x_49_val;
input  [17:0] x_50_val;
input  [17:0] x_51_val;
input  [17:0] x_52_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_412_p2;
reg   [0:0] icmp_ln86_reg_1491;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_391_fu_424_p2;
reg   [0:0] icmp_ln86_391_reg_1496;
wire   [0:0] icmp_ln86_394_fu_442_p2;
reg   [0:0] icmp_ln86_394_reg_1502;
wire   [0:0] icmp_ln86_395_fu_448_p2;
reg   [0:0] icmp_ln86_395_reg_1508;
wire   [0:0] icmp_ln86_400_fu_478_p2;
reg   [0:0] icmp_ln86_400_reg_1514;
wire   [0:0] icmp_ln86_401_fu_484_p2;
reg   [0:0] icmp_ln86_401_reg_1520;
wire   [0:0] icmp_ln86_402_fu_490_p2;
reg   [0:0] icmp_ln86_402_reg_1526;
wire   [0:0] icmp_ln86_403_fu_496_p2;
reg   [0:0] icmp_ln86_403_reg_1532;
wire   [0:0] icmp_ln86_412_fu_550_p2;
reg   [0:0] icmp_ln86_412_reg_1538;
wire   [0:0] icmp_ln86_413_fu_556_p2;
reg   [0:0] icmp_ln86_413_reg_1543;
wire   [0:0] icmp_ln86_414_fu_562_p2;
reg   [0:0] icmp_ln86_414_reg_1548;
wire   [0:0] icmp_ln86_415_fu_568_p2;
reg   [0:0] icmp_ln86_415_reg_1553;
wire   [0:0] icmp_ln86_416_fu_574_p2;
reg   [0:0] icmp_ln86_416_reg_1558;
wire   [0:0] icmp_ln86_417_fu_580_p2;
reg   [0:0] icmp_ln86_417_reg_1563;
wire   [0:0] icmp_ln86_418_fu_586_p2;
reg   [0:0] icmp_ln86_418_reg_1568;
wire   [0:0] icmp_ln86_419_fu_592_p2;
reg   [0:0] icmp_ln86_419_reg_1573;
wire   [0:0] or_ln117_351_fu_954_p2;
reg   [0:0] or_ln117_351_reg_1578;
wire   [4:0] select_ln117_392_fu_972_p3;
reg   [4:0] select_ln117_392_reg_1587;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln86_390_fu_418_p2;
wire   [0:0] xor_ln104_184_fu_598_p2;
wire   [0:0] icmp_ln86_392_fu_430_p2;
wire   [0:0] xor_ln104_186_fu_616_p2;
wire   [0:0] icmp_ln86_393_fu_436_p2;
wire   [0:0] and_ln104_fu_604_p2;
wire   [0:0] xor_ln104_187_fu_634_p2;
wire   [0:0] icmp_ln86_396_fu_454_p2;
wire   [0:0] and_ln102_480_fu_610_p2;
wire   [0:0] icmp_ln86_397_fu_460_p2;
wire   [0:0] and_ln104_70_fu_622_p2;
wire   [0:0] icmp_ln86_398_fu_466_p2;
wire   [0:0] and_ln102_481_fu_628_p2;
wire   [0:0] icmp_ln86_399_fu_472_p2;
wire   [0:0] and_ln104_71_fu_640_p2;
wire   [0:0] icmp_ln86_404_fu_502_p2;
wire   [0:0] and_ln102_484_fu_646_p2;
wire   [0:0] icmp_ln86_405_fu_508_p2;
wire   [0:0] xor_ln104_190_fu_652_p2;
wire   [0:0] and_ln102_493_fu_700_p2;
wire   [0:0] icmp_ln86_406_fu_514_p2;
wire   [0:0] and_ln102_485_fu_658_p2;
wire   [0:0] icmp_ln86_407_fu_520_p2;
wire   [0:0] xor_ln104_191_fu_664_p2;
wire   [0:0] and_ln102_496_fu_718_p2;
wire   [0:0] icmp_ln86_408_fu_526_p2;
wire   [0:0] and_ln102_486_fu_670_p2;
wire   [0:0] icmp_ln86_409_fu_532_p2;
wire   [0:0] xor_ln104_192_fu_676_p2;
wire   [0:0] and_ln102_499_fu_736_p2;
wire   [0:0] icmp_ln86_410_fu_538_p2;
wire   [0:0] and_ln102_487_fu_682_p2;
wire   [0:0] icmp_ln86_411_fu_544_p2;
wire   [0:0] xor_ln104_193_fu_688_p2;
wire   [0:0] and_ln102_502_fu_754_p2;
wire   [0:0] and_ln102_492_fu_694_p2;
wire   [0:0] xor_ln117_fu_766_p2;
wire   [0:0] and_ln102_494_fu_706_p2;
wire   [1:0] zext_ln117_fu_772_p1;
wire   [0:0] or_ln117_fu_776_p2;
wire   [1:0] select_ln117_fu_782_p3;
wire   [1:0] select_ln117_379_fu_790_p3;
wire   [0:0] and_ln102_495_fu_712_p2;
wire   [2:0] zext_ln117_43_fu_798_p1;
wire   [0:0] or_ln117_341_fu_802_p2;
wire   [2:0] select_ln117_380_fu_808_p3;
wire   [0:0] or_ln117_342_fu_816_p2;
wire   [0:0] and_ln102_497_fu_724_p2;
wire   [2:0] select_ln117_381_fu_822_p3;
wire   [0:0] or_ln117_343_fu_830_p2;
wire   [2:0] select_ln117_382_fu_836_p3;
wire   [2:0] select_ln117_383_fu_844_p3;
wire   [0:0] and_ln102_498_fu_730_p2;
wire   [3:0] zext_ln117_44_fu_852_p1;
wire   [0:0] or_ln117_344_fu_856_p2;
wire   [3:0] select_ln117_384_fu_862_p3;
wire   [0:0] or_ln117_345_fu_870_p2;
wire   [0:0] and_ln102_500_fu_742_p2;
wire   [3:0] select_ln117_385_fu_876_p3;
wire   [0:0] or_ln117_346_fu_884_p2;
wire   [3:0] select_ln117_386_fu_890_p3;
wire   [0:0] or_ln117_347_fu_898_p2;
wire   [0:0] and_ln102_501_fu_748_p2;
wire   [3:0] select_ln117_387_fu_904_p3;
wire   [0:0] or_ln117_348_fu_912_p2;
wire   [3:0] select_ln117_388_fu_918_p3;
wire   [0:0] or_ln117_349_fu_926_p2;
wire   [0:0] and_ln102_503_fu_760_p2;
wire   [3:0] select_ln117_389_fu_932_p3;
wire   [0:0] or_ln117_350_fu_940_p2;
wire   [3:0] select_ln117_390_fu_946_p3;
wire   [3:0] select_ln117_391_fu_960_p3;
wire   [4:0] zext_ln117_45_fu_968_p1;
wire   [0:0] xor_ln104_fu_980_p2;
wire   [0:0] xor_ln104_185_fu_990_p2;
wire   [0:0] and_ln102_fu_985_p2;
wire   [0:0] xor_ln104_188_fu_1006_p2;
wire   [0:0] and_ln104_69_fu_995_p2;
wire   [0:0] xor_ln104_189_fu_1022_p2;
wire   [0:0] and_ln102_482_fu_1001_p2;
wire   [0:0] and_ln104_72_fu_1011_p2;
wire   [0:0] and_ln102_483_fu_1017_p2;
wire   [0:0] and_ln104_73_fu_1027_p2;
wire   [0:0] and_ln102_488_fu_1033_p2;
wire   [0:0] xor_ln104_194_fu_1038_p2;
wire   [0:0] and_ln102_505_fu_1078_p2;
wire   [0:0] and_ln102_489_fu_1043_p2;
wire   [0:0] xor_ln104_195_fu_1048_p2;
wire   [0:0] and_ln102_508_fu_1094_p2;
wire   [0:0] and_ln102_490_fu_1053_p2;
wire   [0:0] xor_ln104_196_fu_1058_p2;
wire   [0:0] and_ln102_511_fu_1110_p2;
wire   [0:0] and_ln102_491_fu_1063_p2;
wire   [0:0] xor_ln104_197_fu_1068_p2;
wire   [0:0] and_ln102_514_fu_1126_p2;
wire   [0:0] and_ln102_504_fu_1073_p2;
wire   [0:0] or_ln117_352_fu_1137_p2;
wire   [0:0] or_ln117_353_fu_1142_p2;
wire   [0:0] and_ln102_506_fu_1083_p2;
wire   [4:0] select_ln117_393_fu_1147_p3;
wire   [0:0] or_ln117_354_fu_1154_p2;
wire   [4:0] select_ln117_394_fu_1160_p3;
wire   [0:0] or_ln117_355_fu_1168_p2;
wire   [0:0] and_ln102_507_fu_1089_p2;
wire   [4:0] select_ln117_395_fu_1173_p3;
wire   [0:0] or_ln117_356_fu_1181_p2;
wire   [4:0] select_ln117_396_fu_1187_p3;
wire   [0:0] or_ln117_357_fu_1195_p2;
wire   [0:0] and_ln102_509_fu_1099_p2;
wire   [4:0] select_ln117_397_fu_1201_p3;
wire   [0:0] or_ln117_358_fu_1209_p2;
wire   [4:0] select_ln117_398_fu_1215_p3;
wire   [0:0] or_ln117_359_fu_1223_p2;
wire   [0:0] and_ln102_510_fu_1105_p2;
wire   [4:0] select_ln117_399_fu_1228_p3;
wire   [0:0] or_ln117_360_fu_1236_p2;
wire   [4:0] select_ln117_400_fu_1242_p3;
wire   [0:0] or_ln117_361_fu_1250_p2;
wire   [0:0] and_ln102_512_fu_1115_p2;
wire   [4:0] select_ln117_401_fu_1256_p3;
wire   [0:0] or_ln117_362_fu_1264_p2;
wire   [4:0] select_ln117_402_fu_1270_p3;
wire   [0:0] or_ln117_363_fu_1278_p2;
wire   [0:0] and_ln102_513_fu_1121_p2;
wire   [4:0] select_ln117_403_fu_1284_p3;
wire   [0:0] or_ln117_364_fu_1292_p2;
wire   [4:0] select_ln117_404_fu_1298_p3;
wire   [0:0] or_ln117_365_fu_1306_p2;
wire   [0:0] and_ln102_515_fu_1131_p2;
wire   [4:0] select_ln117_405_fu_1312_p3;
wire   [0:0] or_ln117_366_fu_1320_p2;
wire   [4:0] select_ln117_406_fu_1326_p3;
wire   [11:0] tmp_fu_1347_p65;
wire   [4:0] tmp_fu_1347_p66;
wire   [0:0] or_ln117_367_fu_1334_p2;
wire   [11:0] tmp_fu_1347_p67;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] tmp_fu_1347_p1;
wire   [4:0] tmp_fu_1347_p3;
wire   [4:0] tmp_fu_1347_p5;
wire   [4:0] tmp_fu_1347_p7;
wire   [4:0] tmp_fu_1347_p9;
wire   [4:0] tmp_fu_1347_p11;
wire   [4:0] tmp_fu_1347_p13;
wire   [4:0] tmp_fu_1347_p15;
wire   [4:0] tmp_fu_1347_p17;
wire   [4:0] tmp_fu_1347_p19;
wire   [4:0] tmp_fu_1347_p21;
wire   [4:0] tmp_fu_1347_p23;
wire   [4:0] tmp_fu_1347_p25;
wire   [4:0] tmp_fu_1347_p27;
wire   [4:0] tmp_fu_1347_p29;
wire   [4:0] tmp_fu_1347_p31;
wire  signed [4:0] tmp_fu_1347_p33;
wire  signed [4:0] tmp_fu_1347_p35;
wire  signed [4:0] tmp_fu_1347_p37;
wire  signed [4:0] tmp_fu_1347_p39;
wire  signed [4:0] tmp_fu_1347_p41;
wire  signed [4:0] tmp_fu_1347_p43;
wire  signed [4:0] tmp_fu_1347_p45;
wire  signed [4:0] tmp_fu_1347_p47;
wire  signed [4:0] tmp_fu_1347_p49;
wire  signed [4:0] tmp_fu_1347_p51;
wire  signed [4:0] tmp_fu_1347_p53;
wire  signed [4:0] tmp_fu_1347_p55;
wire  signed [4:0] tmp_fu_1347_p57;
wire  signed [4:0] tmp_fu_1347_p59;
wire  signed [4:0] tmp_fu_1347_p61;
wire  signed [4:0] tmp_fu_1347_p63;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_65_5_12_1_1_x7 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 12 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 12 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 12 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 12 ),
    .CASE31( 5'h1F ),
    .din31_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_65_5_12_1_1_x7_U405(
    .din0(12'd237),
    .din1(12'd47),
    .din2(12'd81),
    .din3(12'd446),
    .din4(12'd842),
    .din5(12'd3447),
    .din6(12'd388),
    .din7(12'd3834),
    .din8(12'd147),
    .din9(12'd20),
    .din10(12'd873),
    .din11(12'd3750),
    .din12(12'd182),
    .din13(12'd3855),
    .din14(12'd2513),
    .din15(12'd3574),
    .din16(12'd4042),
    .din17(12'd3849),
    .din18(12'd500),
    .din19(12'd4081),
    .din20(12'd3950),
    .din21(12'd54),
    .din22(12'd4043),
    .din23(12'd414),
    .din24(12'd4045),
    .din25(12'd130),
    .din26(12'd3678),
    .din27(12'd110),
    .din28(12'd161),
    .din29(12'd1031),
    .din30(12'd673),
    .din31(12'd3521),
    .def(tmp_fu_1347_p65),
    .sel(tmp_fu_1347_p66),
    .dout(tmp_fu_1347_p67)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_391_reg_1496 <= icmp_ln86_391_fu_424_p2;
        icmp_ln86_394_reg_1502 <= icmp_ln86_394_fu_442_p2;
        icmp_ln86_395_reg_1508 <= icmp_ln86_395_fu_448_p2;
        icmp_ln86_400_reg_1514 <= icmp_ln86_400_fu_478_p2;
        icmp_ln86_401_reg_1520 <= icmp_ln86_401_fu_484_p2;
        icmp_ln86_402_reg_1526 <= icmp_ln86_402_fu_490_p2;
        icmp_ln86_403_reg_1532 <= icmp_ln86_403_fu_496_p2;
        icmp_ln86_412_reg_1538 <= icmp_ln86_412_fu_550_p2;
        icmp_ln86_413_reg_1543 <= icmp_ln86_413_fu_556_p2;
        icmp_ln86_414_reg_1548 <= icmp_ln86_414_fu_562_p2;
        icmp_ln86_415_reg_1553 <= icmp_ln86_415_fu_568_p2;
        icmp_ln86_416_reg_1558 <= icmp_ln86_416_fu_574_p2;
        icmp_ln86_417_reg_1563 <= icmp_ln86_417_fu_580_p2;
        icmp_ln86_418_reg_1568 <= icmp_ln86_418_fu_586_p2;
        icmp_ln86_419_reg_1573 <= icmp_ln86_419_fu_592_p2;
        icmp_ln86_reg_1491 <= icmp_ln86_fu_412_p2;
        or_ln117_351_reg_1578 <= or_ln117_351_fu_954_p2;
        select_ln117_392_reg_1587 <= select_ln117_392_fu_972_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln102_480_fu_610_p2 = (icmp_ln86_392_fu_430_p2 & icmp_ln86_390_fu_418_p2);

assign and_ln102_481_fu_628_p2 = (icmp_ln86_393_fu_436_p2 & and_ln104_fu_604_p2);

assign and_ln102_482_fu_1001_p2 = (icmp_ln86_394_reg_1502 & and_ln102_fu_985_p2);

assign and_ln102_483_fu_1017_p2 = (icmp_ln86_395_reg_1508 & and_ln104_69_fu_995_p2);

assign and_ln102_484_fu_646_p2 = (icmp_ln86_396_fu_454_p2 & and_ln102_480_fu_610_p2);

assign and_ln102_485_fu_658_p2 = (icmp_ln86_397_fu_460_p2 & and_ln104_70_fu_622_p2);

assign and_ln102_486_fu_670_p2 = (icmp_ln86_398_fu_466_p2 & and_ln102_481_fu_628_p2);

assign and_ln102_487_fu_682_p2 = (icmp_ln86_399_fu_472_p2 & and_ln104_71_fu_640_p2);

assign and_ln102_488_fu_1033_p2 = (icmp_ln86_400_reg_1514 & and_ln102_482_fu_1001_p2);

assign and_ln102_489_fu_1043_p2 = (icmp_ln86_401_reg_1520 & and_ln104_72_fu_1011_p2);

assign and_ln102_490_fu_1053_p2 = (icmp_ln86_402_reg_1526 & and_ln102_483_fu_1017_p2);

assign and_ln102_491_fu_1063_p2 = (icmp_ln86_403_reg_1532 & and_ln104_73_fu_1027_p2);

assign and_ln102_492_fu_694_p2 = (icmp_ln86_404_fu_502_p2 & and_ln102_484_fu_646_p2);

assign and_ln102_493_fu_700_p2 = (xor_ln104_190_fu_652_p2 & icmp_ln86_405_fu_508_p2);

assign and_ln102_494_fu_706_p2 = (and_ln102_493_fu_700_p2 & and_ln102_480_fu_610_p2);

assign and_ln102_495_fu_712_p2 = (icmp_ln86_406_fu_514_p2 & and_ln102_485_fu_658_p2);

assign and_ln102_496_fu_718_p2 = (xor_ln104_191_fu_664_p2 & icmp_ln86_407_fu_520_p2);

assign and_ln102_497_fu_724_p2 = (and_ln104_70_fu_622_p2 & and_ln102_496_fu_718_p2);

assign and_ln102_498_fu_730_p2 = (icmp_ln86_408_fu_526_p2 & and_ln102_486_fu_670_p2);

assign and_ln102_499_fu_736_p2 = (xor_ln104_192_fu_676_p2 & icmp_ln86_409_fu_532_p2);

assign and_ln102_500_fu_742_p2 = (and_ln102_499_fu_736_p2 & and_ln102_481_fu_628_p2);

assign and_ln102_501_fu_748_p2 = (icmp_ln86_410_fu_538_p2 & and_ln102_487_fu_682_p2);

assign and_ln102_502_fu_754_p2 = (xor_ln104_193_fu_688_p2 & icmp_ln86_411_fu_544_p2);

assign and_ln102_503_fu_760_p2 = (and_ln104_71_fu_640_p2 & and_ln102_502_fu_754_p2);

assign and_ln102_504_fu_1073_p2 = (icmp_ln86_412_reg_1538 & and_ln102_488_fu_1033_p2);

assign and_ln102_505_fu_1078_p2 = (xor_ln104_194_fu_1038_p2 & icmp_ln86_413_reg_1543);

assign and_ln102_506_fu_1083_p2 = (and_ln102_505_fu_1078_p2 & and_ln102_482_fu_1001_p2);

assign and_ln102_507_fu_1089_p2 = (icmp_ln86_414_reg_1548 & and_ln102_489_fu_1043_p2);

assign and_ln102_508_fu_1094_p2 = (xor_ln104_195_fu_1048_p2 & icmp_ln86_415_reg_1553);

assign and_ln102_509_fu_1099_p2 = (and_ln104_72_fu_1011_p2 & and_ln102_508_fu_1094_p2);

assign and_ln102_510_fu_1105_p2 = (icmp_ln86_416_reg_1558 & and_ln102_490_fu_1053_p2);

assign and_ln102_511_fu_1110_p2 = (xor_ln104_196_fu_1058_p2 & icmp_ln86_417_reg_1563);

assign and_ln102_512_fu_1115_p2 = (and_ln102_511_fu_1110_p2 & and_ln102_483_fu_1017_p2);

assign and_ln102_513_fu_1121_p2 = (icmp_ln86_418_reg_1568 & and_ln102_491_fu_1063_p2);

assign and_ln102_514_fu_1126_p2 = (xor_ln104_197_fu_1068_p2 & icmp_ln86_419_reg_1573);

assign and_ln102_515_fu_1131_p2 = (and_ln104_73_fu_1027_p2 & and_ln102_514_fu_1126_p2);

assign and_ln102_fu_985_p2 = (xor_ln104_fu_980_p2 & icmp_ln86_391_reg_1496);

assign and_ln104_69_fu_995_p2 = (xor_ln104_fu_980_p2 & xor_ln104_185_fu_990_p2);

assign and_ln104_70_fu_622_p2 = (xor_ln104_186_fu_616_p2 & icmp_ln86_390_fu_418_p2);

assign and_ln104_71_fu_640_p2 = (xor_ln104_187_fu_634_p2 & and_ln104_fu_604_p2);

assign and_ln104_72_fu_1011_p2 = (xor_ln104_188_fu_1006_p2 & and_ln102_fu_985_p2);

assign and_ln104_73_fu_1027_p2 = (xor_ln104_189_fu_1022_p2 & and_ln104_69_fu_995_p2);

assign and_ln104_fu_604_p2 = (xor_ln104_184_fu_598_p2 & icmp_ln86_fu_412_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((or_ln117_367_fu_1334_p2[0:0] == 1'b1) ? tmp_fu_1347_p67 : 12'd0);

assign icmp_ln86_390_fu_418_p2 = (($signed(x_2_val) < $signed(18'd260704)) ? 1'b1 : 1'b0);

assign icmp_ln86_391_fu_424_p2 = (($signed(x_2_val) < $signed(18'd743)) ? 1'b1 : 1'b0);

assign icmp_ln86_392_fu_430_p2 = (($signed(x_33_val) < $signed(18'd889)) ? 1'b1 : 1'b0);

assign icmp_ln86_393_fu_436_p2 = (($signed(x_21_val) < $signed(18'd277)) ? 1'b1 : 1'b0);

assign icmp_ln86_394_fu_442_p2 = (($signed(x_45_val) < $signed(18'd214)) ? 1'b1 : 1'b0);

assign icmp_ln86_395_fu_448_p2 = (($signed(x_2_val) < $signed(18'd1451)) ? 1'b1 : 1'b0);

assign icmp_ln86_396_fu_454_p2 = (($signed(x_52_val) < $signed(18'd54785)) ? 1'b1 : 1'b0);

assign icmp_ln86_397_fu_460_p2 = (($signed(x_5_val) < $signed(18'd15401)) ? 1'b1 : 1'b0);

assign icmp_ln86_398_fu_466_p2 = (($signed(x_29_val) < $signed(18'd37923)) ? 1'b1 : 1'b0);

assign icmp_ln86_399_fu_472_p2 = (($signed(x_46_val) < $signed(18'd320)) ? 1'b1 : 1'b0);

assign icmp_ln86_400_fu_478_p2 = (($signed(x_49_val) < $signed(18'd152048)) ? 1'b1 : 1'b0);

assign icmp_ln86_401_fu_484_p2 = (($signed(x_17_val) < $signed(18'd20)) ? 1'b1 : 1'b0);

assign icmp_ln86_402_fu_490_p2 = (($signed(x_52_val) < $signed(18'd38401)) ? 1'b1 : 1'b0);

assign icmp_ln86_403_fu_496_p2 = (($signed(x_1_val) < $signed(18'd89807)) ? 1'b1 : 1'b0);

assign icmp_ln86_404_fu_502_p2 = (($signed(x_49_val) < $signed(18'd32718)) ? 1'b1 : 1'b0);

assign icmp_ln86_405_fu_508_p2 = (($signed(x_10_val) < $signed(18'd635)) ? 1'b1 : 1'b0);

assign icmp_ln86_406_fu_514_p2 = (($signed(x_49_val) < $signed(18'd14635)) ? 1'b1 : 1'b0);

assign icmp_ln86_407_fu_520_p2 = (($signed(x_9_val) < $signed(18'd1336)) ? 1'b1 : 1'b0);

assign icmp_ln86_408_fu_526_p2 = (($signed(x_13_val) < $signed(18'd404)) ? 1'b1 : 1'b0);

assign icmp_ln86_409_fu_532_p2 = (($signed(x_16_val) < $signed(18'd147)) ? 1'b1 : 1'b0);

assign icmp_ln86_410_fu_538_p2 = (($signed(x_52_val) < $signed(18'd102913)) ? 1'b1 : 1'b0);

assign icmp_ln86_411_fu_544_p2 = (($signed(x_3_val) < $signed(18'd34911)) ? 1'b1 : 1'b0);

assign icmp_ln86_412_fu_550_p2 = (($signed(x_13_val) < $signed(18'd413)) ? 1'b1 : 1'b0);

assign icmp_ln86_413_fu_556_p2 = (($signed(x_19_val) < $signed(18'd304)) ? 1'b1 : 1'b0);

assign icmp_ln86_414_fu_562_p2 = (($signed(x_11_val) < $signed(18'd411)) ? 1'b1 : 1'b0);

assign icmp_ln86_415_fu_568_p2 = (($signed(x_51_val) < $signed(18'd190337)) ? 1'b1 : 1'b0);

assign icmp_ln86_416_fu_574_p2 = (($signed(x_25_val) < $signed(18'd346)) ? 1'b1 : 1'b0);

assign icmp_ln86_417_fu_580_p2 = (($signed(x_11_val) < $signed(18'd172)) ? 1'b1 : 1'b0);

assign icmp_ln86_418_fu_586_p2 = (($signed(x_50_val) < $signed(18'd187078)) ? 1'b1 : 1'b0);

assign icmp_ln86_419_fu_592_p2 = (($signed(x_38_val) < $signed(18'd18)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_412_p2 = (($signed(x_2_val) < $signed(18'd261421)) ? 1'b1 : 1'b0);

assign or_ln117_341_fu_802_p2 = (and_ln102_495_fu_712_p2 | and_ln102_480_fu_610_p2);

assign or_ln117_342_fu_816_p2 = (and_ln102_485_fu_658_p2 | and_ln102_480_fu_610_p2);

assign or_ln117_343_fu_830_p2 = (or_ln117_342_fu_816_p2 | and_ln102_497_fu_724_p2);

assign or_ln117_344_fu_856_p2 = (icmp_ln86_390_fu_418_p2 | and_ln102_498_fu_730_p2);

assign or_ln117_345_fu_870_p2 = (icmp_ln86_390_fu_418_p2 | and_ln102_486_fu_670_p2);

assign or_ln117_346_fu_884_p2 = (or_ln117_345_fu_870_p2 | and_ln102_500_fu_742_p2);

assign or_ln117_347_fu_898_p2 = (icmp_ln86_390_fu_418_p2 | and_ln102_481_fu_628_p2);

assign or_ln117_348_fu_912_p2 = (or_ln117_347_fu_898_p2 | and_ln102_501_fu_748_p2);

assign or_ln117_349_fu_926_p2 = (or_ln117_347_fu_898_p2 | and_ln102_487_fu_682_p2);

assign or_ln117_350_fu_940_p2 = (or_ln117_349_fu_926_p2 | and_ln102_503_fu_760_p2);

assign or_ln117_351_fu_954_p2 = (icmp_ln86_390_fu_418_p2 | and_ln104_fu_604_p2);

assign or_ln117_352_fu_1137_p2 = (or_ln117_351_reg_1578 | and_ln102_504_fu_1073_p2);

assign or_ln117_353_fu_1142_p2 = (or_ln117_351_reg_1578 | and_ln102_488_fu_1033_p2);

assign or_ln117_354_fu_1154_p2 = (or_ln117_353_fu_1142_p2 | and_ln102_506_fu_1083_p2);

assign or_ln117_355_fu_1168_p2 = (or_ln117_351_reg_1578 | and_ln102_482_fu_1001_p2);

assign or_ln117_356_fu_1181_p2 = (or_ln117_355_fu_1168_p2 | and_ln102_507_fu_1089_p2);

assign or_ln117_357_fu_1195_p2 = (or_ln117_355_fu_1168_p2 | and_ln102_489_fu_1043_p2);

assign or_ln117_358_fu_1209_p2 = (or_ln117_357_fu_1195_p2 | and_ln102_509_fu_1099_p2);

assign or_ln117_359_fu_1223_p2 = (or_ln117_351_reg_1578 | and_ln102_fu_985_p2);

assign or_ln117_360_fu_1236_p2 = (or_ln117_359_fu_1223_p2 | and_ln102_510_fu_1105_p2);

assign or_ln117_361_fu_1250_p2 = (or_ln117_359_fu_1223_p2 | and_ln102_490_fu_1053_p2);

assign or_ln117_362_fu_1264_p2 = (or_ln117_361_fu_1250_p2 | and_ln102_512_fu_1115_p2);

assign or_ln117_363_fu_1278_p2 = (or_ln117_359_fu_1223_p2 | and_ln102_483_fu_1017_p2);

assign or_ln117_364_fu_1292_p2 = (or_ln117_363_fu_1278_p2 | and_ln102_513_fu_1121_p2);

assign or_ln117_365_fu_1306_p2 = (or_ln117_363_fu_1278_p2 | and_ln102_491_fu_1063_p2);

assign or_ln117_366_fu_1320_p2 = (or_ln117_365_fu_1306_p2 | and_ln102_515_fu_1131_p2);

assign or_ln117_367_fu_1334_p2 = (xor_ln104_fu_980_p2 | or_ln117_351_reg_1578);

assign or_ln117_fu_776_p2 = (and_ln102_494_fu_706_p2 | and_ln102_484_fu_646_p2);

assign select_ln117_379_fu_790_p3 = ((or_ln117_fu_776_p2[0:0] == 1'b1) ? select_ln117_fu_782_p3 : 2'd3);

assign select_ln117_380_fu_808_p3 = ((and_ln102_480_fu_610_p2[0:0] == 1'b1) ? zext_ln117_43_fu_798_p1 : 3'd4);

assign select_ln117_381_fu_822_p3 = ((or_ln117_341_fu_802_p2[0:0] == 1'b1) ? select_ln117_380_fu_808_p3 : 3'd5);

assign select_ln117_382_fu_836_p3 = ((or_ln117_342_fu_816_p2[0:0] == 1'b1) ? select_ln117_381_fu_822_p3 : 3'd6);

assign select_ln117_383_fu_844_p3 = ((or_ln117_343_fu_830_p2[0:0] == 1'b1) ? select_ln117_382_fu_836_p3 : 3'd7);

assign select_ln117_384_fu_862_p3 = ((icmp_ln86_390_fu_418_p2[0:0] == 1'b1) ? zext_ln117_44_fu_852_p1 : 4'd8);

assign select_ln117_385_fu_876_p3 = ((or_ln117_344_fu_856_p2[0:0] == 1'b1) ? select_ln117_384_fu_862_p3 : 4'd9);

assign select_ln117_386_fu_890_p3 = ((or_ln117_345_fu_870_p2[0:0] == 1'b1) ? select_ln117_385_fu_876_p3 : 4'd10);

assign select_ln117_387_fu_904_p3 = ((or_ln117_346_fu_884_p2[0:0] == 1'b1) ? select_ln117_386_fu_890_p3 : 4'd11);

assign select_ln117_388_fu_918_p3 = ((or_ln117_347_fu_898_p2[0:0] == 1'b1) ? select_ln117_387_fu_904_p3 : 4'd12);

assign select_ln117_389_fu_932_p3 = ((or_ln117_348_fu_912_p2[0:0] == 1'b1) ? select_ln117_388_fu_918_p3 : 4'd13);

assign select_ln117_390_fu_946_p3 = ((or_ln117_349_fu_926_p2[0:0] == 1'b1) ? select_ln117_389_fu_932_p3 : 4'd14);

assign select_ln117_391_fu_960_p3 = ((or_ln117_350_fu_940_p2[0:0] == 1'b1) ? select_ln117_390_fu_946_p3 : 4'd15);

assign select_ln117_392_fu_972_p3 = ((or_ln117_351_fu_954_p2[0:0] == 1'b1) ? zext_ln117_45_fu_968_p1 : 5'd16);

assign select_ln117_393_fu_1147_p3 = ((or_ln117_352_fu_1137_p2[0:0] == 1'b1) ? select_ln117_392_reg_1587 : 5'd17);

assign select_ln117_394_fu_1160_p3 = ((or_ln117_353_fu_1142_p2[0:0] == 1'b1) ? select_ln117_393_fu_1147_p3 : 5'd18);

assign select_ln117_395_fu_1173_p3 = ((or_ln117_354_fu_1154_p2[0:0] == 1'b1) ? select_ln117_394_fu_1160_p3 : 5'd19);

assign select_ln117_396_fu_1187_p3 = ((or_ln117_355_fu_1168_p2[0:0] == 1'b1) ? select_ln117_395_fu_1173_p3 : 5'd20);

assign select_ln117_397_fu_1201_p3 = ((or_ln117_356_fu_1181_p2[0:0] == 1'b1) ? select_ln117_396_fu_1187_p3 : 5'd21);

assign select_ln117_398_fu_1215_p3 = ((or_ln117_357_fu_1195_p2[0:0] == 1'b1) ? select_ln117_397_fu_1201_p3 : 5'd22);

assign select_ln117_399_fu_1228_p3 = ((or_ln117_358_fu_1209_p2[0:0] == 1'b1) ? select_ln117_398_fu_1215_p3 : 5'd23);

assign select_ln117_400_fu_1242_p3 = ((or_ln117_359_fu_1223_p2[0:0] == 1'b1) ? select_ln117_399_fu_1228_p3 : 5'd24);

assign select_ln117_401_fu_1256_p3 = ((or_ln117_360_fu_1236_p2[0:0] == 1'b1) ? select_ln117_400_fu_1242_p3 : 5'd25);

assign select_ln117_402_fu_1270_p3 = ((or_ln117_361_fu_1250_p2[0:0] == 1'b1) ? select_ln117_401_fu_1256_p3 : 5'd26);

assign select_ln117_403_fu_1284_p3 = ((or_ln117_362_fu_1264_p2[0:0] == 1'b1) ? select_ln117_402_fu_1270_p3 : 5'd27);

assign select_ln117_404_fu_1298_p3 = ((or_ln117_363_fu_1278_p2[0:0] == 1'b1) ? select_ln117_403_fu_1284_p3 : 5'd28);

assign select_ln117_405_fu_1312_p3 = ((or_ln117_364_fu_1292_p2[0:0] == 1'b1) ? select_ln117_404_fu_1298_p3 : 5'd29);

assign select_ln117_406_fu_1326_p3 = ((or_ln117_365_fu_1306_p2[0:0] == 1'b1) ? select_ln117_405_fu_1312_p3 : 5'd30);

assign select_ln117_fu_782_p3 = ((and_ln102_484_fu_646_p2[0:0] == 1'b1) ? zext_ln117_fu_772_p1 : 2'd2);

assign tmp_fu_1347_p65 = 'bx;

assign tmp_fu_1347_p66 = ((or_ln117_366_fu_1320_p2[0:0] == 1'b1) ? select_ln117_406_fu_1326_p3 : 5'd31);

assign xor_ln104_184_fu_598_p2 = (icmp_ln86_390_fu_418_p2 ^ 1'd1);

assign xor_ln104_185_fu_990_p2 = (icmp_ln86_391_reg_1496 ^ 1'd1);

assign xor_ln104_186_fu_616_p2 = (icmp_ln86_392_fu_430_p2 ^ 1'd1);

assign xor_ln104_187_fu_634_p2 = (icmp_ln86_393_fu_436_p2 ^ 1'd1);

assign xor_ln104_188_fu_1006_p2 = (icmp_ln86_394_reg_1502 ^ 1'd1);

assign xor_ln104_189_fu_1022_p2 = (icmp_ln86_395_reg_1508 ^ 1'd1);

assign xor_ln104_190_fu_652_p2 = (icmp_ln86_396_fu_454_p2 ^ 1'd1);

assign xor_ln104_191_fu_664_p2 = (icmp_ln86_397_fu_460_p2 ^ 1'd1);

assign xor_ln104_192_fu_676_p2 = (icmp_ln86_398_fu_466_p2 ^ 1'd1);

assign xor_ln104_193_fu_688_p2 = (icmp_ln86_399_fu_472_p2 ^ 1'd1);

assign xor_ln104_194_fu_1038_p2 = (icmp_ln86_400_reg_1514 ^ 1'd1);

assign xor_ln104_195_fu_1048_p2 = (icmp_ln86_401_reg_1520 ^ 1'd1);

assign xor_ln104_196_fu_1058_p2 = (icmp_ln86_402_reg_1526 ^ 1'd1);

assign xor_ln104_197_fu_1068_p2 = (icmp_ln86_403_reg_1532 ^ 1'd1);

assign xor_ln104_fu_980_p2 = (icmp_ln86_reg_1491 ^ 1'd1);

assign xor_ln117_fu_766_p2 = (1'd1 ^ and_ln102_492_fu_694_p2);

assign zext_ln117_43_fu_798_p1 = select_ln117_379_fu_790_p3;

assign zext_ln117_44_fu_852_p1 = select_ln117_383_fu_844_p3;

assign zext_ln117_45_fu_968_p1 = select_ln117_391_fu_960_p3;

assign zext_ln117_fu_772_p1 = xor_ln117_fu_766_p2;

endmodule //my_prj_decision_function_85
