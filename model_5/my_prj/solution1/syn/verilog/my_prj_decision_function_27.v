// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_27 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_3_val,
        x_6_val,
        x_7_val,
        x_10_val,
        x_11_val,
        x_14_val,
        x_16_val,
        x_17_val,
        x_18_val,
        x_21_val,
        x_23_val,
        x_25_val,
        x_26_val,
        x_29_val,
        x_31_val,
        x_32_val,
        x_35_val,
        x_36_val,
        x_38_val,
        x_40_val,
        x_42_val,
        x_43_val,
        x_46_val,
        x_47_val,
        x_51_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_3_val;
input  [17:0] x_6_val;
input  [17:0] x_7_val;
input  [17:0] x_10_val;
input  [17:0] x_11_val;
input  [17:0] x_14_val;
input  [17:0] x_16_val;
input  [17:0] x_17_val;
input  [17:0] x_18_val;
input  [17:0] x_21_val;
input  [17:0] x_23_val;
input  [17:0] x_25_val;
input  [17:0] x_26_val;
input  [17:0] x_29_val;
input  [17:0] x_31_val;
input  [17:0] x_32_val;
input  [17:0] x_35_val;
input  [17:0] x_36_val;
input  [17:0] x_38_val;
input  [17:0] x_40_val;
input  [17:0] x_42_val;
input  [17:0] x_43_val;
input  [17:0] x_46_val;
input  [17:0] x_47_val;
input  [17:0] x_51_val;
input  [17:0] x_52_val;
output  [12:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_434_p2;
reg   [0:0] icmp_ln86_reg_1507;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_717_fu_446_p2;
reg   [0:0] icmp_ln86_717_reg_1512;
wire   [0:0] icmp_ln86_720_fu_464_p2;
reg   [0:0] icmp_ln86_720_reg_1518;
wire   [0:0] icmp_ln86_721_fu_470_p2;
reg   [0:0] icmp_ln86_721_reg_1524;
wire   [0:0] icmp_ln86_726_fu_500_p2;
reg   [0:0] icmp_ln86_726_reg_1530;
wire   [0:0] icmp_ln86_727_fu_506_p2;
reg   [0:0] icmp_ln86_727_reg_1536;
wire   [0:0] icmp_ln86_728_fu_512_p2;
reg   [0:0] icmp_ln86_728_reg_1542;
wire   [0:0] icmp_ln86_729_fu_518_p2;
reg   [0:0] icmp_ln86_729_reg_1548;
wire   [0:0] icmp_ln86_737_fu_566_p2;
reg   [0:0] icmp_ln86_737_reg_1554;
wire   [0:0] icmp_ln86_738_fu_572_p2;
reg   [0:0] icmp_ln86_738_reg_1559;
wire   [0:0] icmp_ln86_739_fu_578_p2;
reg   [0:0] icmp_ln86_739_reg_1564;
wire   [0:0] icmp_ln86_740_fu_584_p2;
reg   [0:0] icmp_ln86_740_reg_1569;
wire   [0:0] icmp_ln86_741_fu_590_p2;
reg   [0:0] icmp_ln86_741_reg_1574;
wire   [0:0] icmp_ln86_742_fu_596_p2;
reg   [0:0] icmp_ln86_742_reg_1579;
wire   [0:0] icmp_ln86_743_fu_602_p2;
reg   [0:0] icmp_ln86_743_reg_1584;
wire   [0:0] icmp_ln86_744_fu_608_p2;
reg   [0:0] icmp_ln86_744_reg_1589;
wire   [0:0] or_ln117_667_fu_974_p2;
reg   [0:0] or_ln117_667_reg_1594;
wire   [3:0] select_ln117_707_fu_988_p3;
reg   [3:0] select_ln117_707_reg_1603;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln86_716_fu_440_p2;
wire   [0:0] xor_ln104_344_fu_620_p2;
wire   [0:0] icmp_ln86_718_fu_452_p2;
wire   [0:0] and_ln102_fu_614_p2;
wire   [0:0] xor_ln104_346_fu_638_p2;
wire   [0:0] icmp_ln86_719_fu_458_p2;
wire   [0:0] and_ln104_fu_626_p2;
wire   [0:0] xor_ln104_347_fu_656_p2;
wire   [0:0] icmp_ln86_722_fu_476_p2;
wire   [0:0] and_ln102_689_fu_632_p2;
wire   [0:0] icmp_ln86_723_fu_482_p2;
wire   [0:0] and_ln104_141_fu_644_p2;
wire   [0:0] icmp_ln86_724_fu_488_p2;
wire   [0:0] and_ln102_690_fu_650_p2;
wire   [0:0] icmp_ln86_725_fu_494_p2;
wire   [0:0] and_ln104_142_fu_662_p2;
wire   [0:0] xor_ln104_353_fu_710_p2;
wire   [0:0] icmp_ln86_730_fu_524_p2;
wire   [0:0] and_ln102_693_fu_668_p2;
wire   [0:0] icmp_ln86_731_fu_530_p2;
wire   [0:0] xor_ln104_350_fu_674_p2;
wire   [0:0] and_ln102_716_fu_728_p2;
wire   [0:0] icmp_ln86_732_fu_536_p2;
wire   [0:0] and_ln102_694_fu_680_p2;
wire   [0:0] icmp_ln86_733_fu_542_p2;
wire   [0:0] xor_ln104_351_fu_686_p2;
wire   [0:0] and_ln102_717_fu_746_p2;
wire   [0:0] icmp_ln86_734_fu_548_p2;
wire   [0:0] and_ln102_695_fu_692_p2;
wire   [0:0] icmp_ln86_735_fu_554_p2;
wire   [0:0] xor_ln104_352_fu_698_p2;
wire   [0:0] and_ln102_718_fu_764_p2;
wire   [0:0] icmp_ln86_736_fu_560_p2;
wire   [0:0] and_ln104_145_fu_716_p2;
wire   [0:0] and_ln102_696_fu_704_p2;
wire   [0:0] and_ln102_701_fu_722_p2;
wire   [0:0] xor_ln117_fu_788_p2;
wire   [0:0] or_ln117_fu_782_p2;
wire   [1:0] zext_ln117_fu_794_p1;
wire   [0:0] or_ln117_655_fu_798_p2;
wire   [0:0] and_ln102_702_fu_734_p2;
wire   [1:0] select_ln117_fu_804_p3;
wire   [1:0] select_ln117_695_fu_818_p3;
wire   [0:0] or_ln117_656_fu_812_p2;
wire   [2:0] zext_ln117_78_fu_826_p1;
wire   [0:0] or_ln117_657_fu_830_p2;
wire   [0:0] and_ln102_703_fu_740_p2;
wire   [2:0] select_ln117_696_fu_836_p3;
wire   [0:0] or_ln117_658_fu_844_p2;
wire   [2:0] select_ln117_697_fu_850_p3;
wire   [0:0] or_ln117_659_fu_858_p2;
wire   [0:0] and_ln102_704_fu_752_p2;
wire   [2:0] select_ln117_698_fu_864_p3;
wire   [2:0] select_ln117_699_fu_878_p3;
wire   [0:0] or_ln117_660_fu_872_p2;
wire   [3:0] zext_ln117_79_fu_886_p1;
wire   [0:0] or_ln117_661_fu_890_p2;
wire   [0:0] and_ln102_705_fu_758_p2;
wire   [3:0] select_ln117_700_fu_896_p3;
wire   [0:0] or_ln117_662_fu_904_p2;
wire   [3:0] select_ln117_701_fu_910_p3;
wire   [0:0] or_ln117_663_fu_918_p2;
wire   [0:0] and_ln102_706_fu_770_p2;
wire   [3:0] select_ln117_702_fu_924_p3;
wire   [0:0] or_ln117_664_fu_932_p2;
wire   [3:0] select_ln117_703_fu_938_p3;
wire   [0:0] or_ln117_665_fu_946_p2;
wire   [0:0] and_ln102_707_fu_776_p2;
wire   [3:0] select_ln117_704_fu_952_p3;
wire   [0:0] or_ln117_666_fu_960_p2;
wire   [3:0] select_ln117_705_fu_966_p3;
wire   [3:0] select_ln117_706_fu_980_p3;
wire   [0:0] xor_ln104_fu_996_p2;
wire   [0:0] xor_ln104_345_fu_1006_p2;
wire   [0:0] and_ln102_688_fu_1001_p2;
wire   [0:0] xor_ln104_348_fu_1022_p2;
wire   [0:0] and_ln104_140_fu_1011_p2;
wire   [0:0] xor_ln104_349_fu_1038_p2;
wire   [0:0] and_ln102_691_fu_1017_p2;
wire   [0:0] and_ln104_143_fu_1027_p2;
wire   [0:0] and_ln102_692_fu_1033_p2;
wire   [0:0] and_ln104_144_fu_1043_p2;
wire   [0:0] and_ln102_697_fu_1049_p2;
wire   [0:0] xor_ln104_354_fu_1054_p2;
wire   [0:0] and_ln102_719_fu_1094_p2;
wire   [0:0] and_ln102_698_fu_1059_p2;
wire   [0:0] xor_ln104_355_fu_1064_p2;
wire   [0:0] and_ln102_720_fu_1110_p2;
wire   [0:0] and_ln102_699_fu_1069_p2;
wire   [0:0] xor_ln104_356_fu_1074_p2;
wire   [0:0] and_ln102_721_fu_1126_p2;
wire   [0:0] and_ln102_700_fu_1079_p2;
wire   [0:0] xor_ln104_357_fu_1084_p2;
wire   [0:0] and_ln102_722_fu_1142_p2;
wire   [0:0] and_ln102_708_fu_1089_p2;
wire   [0:0] or_ln117_668_fu_1153_p2;
wire   [4:0] zext_ln117_80_fu_1158_p1;
wire   [0:0] or_ln117_669_fu_1161_p2;
wire   [0:0] and_ln102_709_fu_1099_p2;
wire   [4:0] select_ln117_708_fu_1166_p3;
wire   [0:0] or_ln117_670_fu_1174_p2;
wire   [4:0] select_ln117_709_fu_1180_p3;
wire   [0:0] or_ln117_671_fu_1188_p2;
wire   [0:0] and_ln102_710_fu_1105_p2;
wire   [4:0] select_ln117_710_fu_1193_p3;
wire   [0:0] or_ln117_672_fu_1201_p2;
wire   [4:0] select_ln117_711_fu_1207_p3;
wire   [0:0] or_ln117_673_fu_1215_p2;
wire   [0:0] and_ln102_711_fu_1115_p2;
wire   [4:0] select_ln117_712_fu_1221_p3;
wire   [0:0] or_ln117_674_fu_1229_p2;
wire   [4:0] select_ln117_713_fu_1235_p3;
wire   [0:0] or_ln117_675_fu_1243_p2;
wire   [0:0] and_ln102_712_fu_1121_p2;
wire   [4:0] select_ln117_714_fu_1248_p3;
wire   [0:0] or_ln117_676_fu_1256_p2;
wire   [4:0] select_ln117_715_fu_1262_p3;
wire   [0:0] or_ln117_677_fu_1270_p2;
wire   [0:0] and_ln102_713_fu_1131_p2;
wire   [4:0] select_ln117_716_fu_1276_p3;
wire   [0:0] or_ln117_678_fu_1284_p2;
wire   [4:0] select_ln117_717_fu_1290_p3;
wire   [0:0] or_ln117_679_fu_1298_p2;
wire   [0:0] and_ln102_714_fu_1137_p2;
wire   [4:0] select_ln117_718_fu_1304_p3;
wire   [0:0] or_ln117_680_fu_1312_p2;
wire   [4:0] select_ln117_719_fu_1318_p3;
wire   [0:0] or_ln117_681_fu_1326_p2;
wire   [0:0] and_ln102_715_fu_1147_p2;
wire   [4:0] select_ln117_720_fu_1332_p3;
wire   [0:0] or_ln117_682_fu_1340_p2;
wire   [4:0] select_ln117_721_fu_1346_p3;
wire   [12:0] tmp_fu_1367_p63;
wire   [4:0] tmp_fu_1367_p64;
wire   [0:0] or_ln117_683_fu_1354_p2;
wire   [12:0] tmp_fu_1367_p65;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] tmp_fu_1367_p1;
wire   [4:0] tmp_fu_1367_p3;
wire   [4:0] tmp_fu_1367_p5;
wire   [4:0] tmp_fu_1367_p7;
wire   [4:0] tmp_fu_1367_p9;
wire   [4:0] tmp_fu_1367_p11;
wire   [4:0] tmp_fu_1367_p13;
wire   [4:0] tmp_fu_1367_p15;
wire   [4:0] tmp_fu_1367_p17;
wire   [4:0] tmp_fu_1367_p19;
wire   [4:0] tmp_fu_1367_p21;
wire   [4:0] tmp_fu_1367_p23;
wire   [4:0] tmp_fu_1367_p25;
wire   [4:0] tmp_fu_1367_p27;
wire   [4:0] tmp_fu_1367_p29;
wire   [4:0] tmp_fu_1367_p31;
wire  signed [4:0] tmp_fu_1367_p33;
wire  signed [4:0] tmp_fu_1367_p35;
wire  signed [4:0] tmp_fu_1367_p37;
wire  signed [4:0] tmp_fu_1367_p39;
wire  signed [4:0] tmp_fu_1367_p41;
wire  signed [4:0] tmp_fu_1367_p43;
wire  signed [4:0] tmp_fu_1367_p45;
wire  signed [4:0] tmp_fu_1367_p47;
wire  signed [4:0] tmp_fu_1367_p49;
wire  signed [4:0] tmp_fu_1367_p51;
wire  signed [4:0] tmp_fu_1367_p53;
wire  signed [4:0] tmp_fu_1367_p55;
wire  signed [4:0] tmp_fu_1367_p57;
wire  signed [4:0] tmp_fu_1367_p59;
wire  signed [4:0] tmp_fu_1367_p61;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_63_5_13_1_1_x1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 13 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 13 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 13 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 13 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 13 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 13 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 13 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 13 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 13 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 13 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 13 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 13 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 13 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 13 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 13 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 13 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 13 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 13 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 13 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 13 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 13 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 13 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 13 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 13 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 13 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 13 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 13 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 13 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 13 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 13 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 13 ),
    .def_WIDTH( 13 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 13 ))
sparsemux_63_5_13_1_1_x1_U1563(
    .din0(13'd398),
    .din1(13'd8133),
    .din2(13'd131),
    .din3(13'd10),
    .din4(13'd7949),
    .din5(13'd131),
    .din6(13'd7404),
    .din7(13'd341),
    .din8(13'd74),
    .din9(13'd7941),
    .din10(13'd6534),
    .din11(13'd8166),
    .din12(13'd7542),
    .din13(13'd5663),
    .din14(13'd7861),
    .din15(13'd8081),
    .din16(13'd6872),
    .din17(13'd466),
    .din18(13'd8139),
    .din19(13'd6994),
    .din20(13'd73),
    .din21(13'd367),
    .din22(13'd7514),
    .din23(13'd8007),
    .din24(13'd62),
    .din25(13'd7835),
    .din26(13'd7),
    .din27(13'd490),
    .din28(13'd7855),
    .din29(13'd7905),
    .din30(13'd96),
    .def(tmp_fu_1367_p63),
    .sel(tmp_fu_1367_p64),
    .dout(tmp_fu_1367_p65)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_717_reg_1512 <= icmp_ln86_717_fu_446_p2;
        icmp_ln86_720_reg_1518 <= icmp_ln86_720_fu_464_p2;
        icmp_ln86_721_reg_1524 <= icmp_ln86_721_fu_470_p2;
        icmp_ln86_726_reg_1530 <= icmp_ln86_726_fu_500_p2;
        icmp_ln86_727_reg_1536 <= icmp_ln86_727_fu_506_p2;
        icmp_ln86_728_reg_1542 <= icmp_ln86_728_fu_512_p2;
        icmp_ln86_729_reg_1548 <= icmp_ln86_729_fu_518_p2;
        icmp_ln86_737_reg_1554 <= icmp_ln86_737_fu_566_p2;
        icmp_ln86_738_reg_1559 <= icmp_ln86_738_fu_572_p2;
        icmp_ln86_739_reg_1564 <= icmp_ln86_739_fu_578_p2;
        icmp_ln86_740_reg_1569 <= icmp_ln86_740_fu_584_p2;
        icmp_ln86_741_reg_1574 <= icmp_ln86_741_fu_590_p2;
        icmp_ln86_742_reg_1579 <= icmp_ln86_742_fu_596_p2;
        icmp_ln86_743_reg_1584 <= icmp_ln86_743_fu_602_p2;
        icmp_ln86_744_reg_1589 <= icmp_ln86_744_fu_608_p2;
        icmp_ln86_reg_1507 <= icmp_ln86_fu_434_p2;
        or_ln117_667_reg_1594 <= or_ln117_667_fu_974_p2;
        select_ln117_707_reg_1603 <= select_ln117_707_fu_988_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln102_688_fu_1001_p2 = (xor_ln104_fu_996_p2 & icmp_ln86_717_reg_1512);

assign and_ln102_689_fu_632_p2 = (icmp_ln86_718_fu_452_p2 & and_ln102_fu_614_p2);

assign and_ln102_690_fu_650_p2 = (icmp_ln86_719_fu_458_p2 & and_ln104_fu_626_p2);

assign and_ln102_691_fu_1017_p2 = (icmp_ln86_720_reg_1518 & and_ln102_688_fu_1001_p2);

assign and_ln102_692_fu_1033_p2 = (icmp_ln86_721_reg_1524 & and_ln104_140_fu_1011_p2);

assign and_ln102_693_fu_668_p2 = (icmp_ln86_722_fu_476_p2 & and_ln102_689_fu_632_p2);

assign and_ln102_694_fu_680_p2 = (icmp_ln86_723_fu_482_p2 & and_ln104_141_fu_644_p2);

assign and_ln102_695_fu_692_p2 = (icmp_ln86_724_fu_488_p2 & and_ln102_690_fu_650_p2);

assign and_ln102_696_fu_704_p2 = (icmp_ln86_725_fu_494_p2 & and_ln104_142_fu_662_p2);

assign and_ln102_697_fu_1049_p2 = (icmp_ln86_726_reg_1530 & and_ln102_691_fu_1017_p2);

assign and_ln102_698_fu_1059_p2 = (icmp_ln86_727_reg_1536 & and_ln104_143_fu_1027_p2);

assign and_ln102_699_fu_1069_p2 = (icmp_ln86_728_reg_1542 & and_ln102_692_fu_1033_p2);

assign and_ln102_700_fu_1079_p2 = (icmp_ln86_729_reg_1548 & and_ln104_144_fu_1043_p2);

assign and_ln102_701_fu_722_p2 = (icmp_ln86_730_fu_524_p2 & and_ln102_693_fu_668_p2);

assign and_ln102_702_fu_734_p2 = (and_ln102_716_fu_728_p2 & and_ln102_689_fu_632_p2);

assign and_ln102_703_fu_740_p2 = (icmp_ln86_732_fu_536_p2 & and_ln102_694_fu_680_p2);

assign and_ln102_704_fu_752_p2 = (and_ln104_141_fu_644_p2 & and_ln102_717_fu_746_p2);

assign and_ln102_705_fu_758_p2 = (icmp_ln86_734_fu_548_p2 & and_ln102_695_fu_692_p2);

assign and_ln102_706_fu_770_p2 = (and_ln102_718_fu_764_p2 & and_ln102_690_fu_650_p2);

assign and_ln102_707_fu_776_p2 = (icmp_ln86_736_fu_560_p2 & and_ln104_145_fu_716_p2);

assign and_ln102_708_fu_1089_p2 = (icmp_ln86_737_reg_1554 & and_ln102_697_fu_1049_p2);

assign and_ln102_709_fu_1099_p2 = (and_ln102_719_fu_1094_p2 & and_ln102_691_fu_1017_p2);

assign and_ln102_710_fu_1105_p2 = (icmp_ln86_739_reg_1564 & and_ln102_698_fu_1059_p2);

assign and_ln102_711_fu_1115_p2 = (and_ln104_143_fu_1027_p2 & and_ln102_720_fu_1110_p2);

assign and_ln102_712_fu_1121_p2 = (icmp_ln86_741_reg_1574 & and_ln102_699_fu_1069_p2);

assign and_ln102_713_fu_1131_p2 = (and_ln102_721_fu_1126_p2 & and_ln102_692_fu_1033_p2);

assign and_ln102_714_fu_1137_p2 = (icmp_ln86_743_reg_1584 & and_ln102_700_fu_1079_p2);

assign and_ln102_715_fu_1147_p2 = (and_ln104_144_fu_1043_p2 & and_ln102_722_fu_1142_p2);

assign and_ln102_716_fu_728_p2 = (xor_ln104_350_fu_674_p2 & icmp_ln86_731_fu_530_p2);

assign and_ln102_717_fu_746_p2 = (xor_ln104_351_fu_686_p2 & icmp_ln86_733_fu_542_p2);

assign and_ln102_718_fu_764_p2 = (xor_ln104_352_fu_698_p2 & icmp_ln86_735_fu_554_p2);

assign and_ln102_719_fu_1094_p2 = (xor_ln104_354_fu_1054_p2 & icmp_ln86_738_reg_1559);

assign and_ln102_720_fu_1110_p2 = (xor_ln104_355_fu_1064_p2 & icmp_ln86_740_reg_1569);

assign and_ln102_721_fu_1126_p2 = (xor_ln104_356_fu_1074_p2 & icmp_ln86_742_reg_1579);

assign and_ln102_722_fu_1142_p2 = (xor_ln104_357_fu_1084_p2 & icmp_ln86_744_reg_1589);

assign and_ln102_fu_614_p2 = (icmp_ln86_fu_434_p2 & icmp_ln86_716_fu_440_p2);

assign and_ln104_140_fu_1011_p2 = (xor_ln104_fu_996_p2 & xor_ln104_345_fu_1006_p2);

assign and_ln104_141_fu_644_p2 = (xor_ln104_346_fu_638_p2 & and_ln102_fu_614_p2);

assign and_ln104_142_fu_662_p2 = (xor_ln104_347_fu_656_p2 & and_ln104_fu_626_p2);

assign and_ln104_143_fu_1027_p2 = (xor_ln104_348_fu_1022_p2 & and_ln102_688_fu_1001_p2);

assign and_ln104_144_fu_1043_p2 = (xor_ln104_349_fu_1038_p2 & and_ln104_140_fu_1011_p2);

assign and_ln104_145_fu_716_p2 = (xor_ln104_353_fu_710_p2 & and_ln104_142_fu_662_p2);

assign and_ln104_fu_626_p2 = (xor_ln104_344_fu_620_p2 & icmp_ln86_fu_434_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((or_ln117_683_fu_1354_p2[0:0] == 1'b1) ? tmp_fu_1367_p65 : 13'd0);

assign icmp_ln86_716_fu_440_p2 = (($signed(x_3_val) < $signed(18'd182004)) ? 1'b1 : 1'b0);

assign icmp_ln86_717_fu_446_p2 = (($signed(x_47_val) < $signed(18'd181139)) ? 1'b1 : 1'b0);

assign icmp_ln86_718_fu_452_p2 = (($signed(x_47_val) < $signed(18'd176815)) ? 1'b1 : 1'b0);

assign icmp_ln86_719_fu_458_p2 = (($signed(x_14_val) < $signed(18'd117)) ? 1'b1 : 1'b0);

assign icmp_ln86_720_fu_464_p2 = (($signed(x_47_val) < $signed(18'd173586)) ? 1'b1 : 1'b0);

assign icmp_ln86_721_fu_470_p2 = (($signed(x_42_val) < $signed(18'd261)) ? 1'b1 : 1'b0);

assign icmp_ln86_722_fu_476_p2 = (($signed(x_11_val) < $signed(18'd474)) ? 1'b1 : 1'b0);

assign icmp_ln86_723_fu_482_p2 = (($signed(x_16_val) < $signed(18'd51)) ? 1'b1 : 1'b0);

assign icmp_ln86_724_fu_488_p2 = (($signed(x_21_val) < $signed(18'd233)) ? 1'b1 : 1'b0);

assign icmp_ln86_725_fu_494_p2 = (($signed(x_32_val) < $signed(18'd501)) ? 1'b1 : 1'b0);

assign icmp_ln86_726_fu_500_p2 = (($signed(x_29_val) < $signed(18'd28473)) ? 1'b1 : 1'b0);

assign icmp_ln86_727_fu_506_p2 = (($signed(x_35_val) < $signed(18'd72)) ? 1'b1 : 1'b0);

assign icmp_ln86_728_fu_512_p2 = (($signed(x_18_val) < $signed(18'd1256)) ? 1'b1 : 1'b0);

assign icmp_ln86_729_fu_518_p2 = (($signed(x_52_val) < $signed(18'd93697)) ? 1'b1 : 1'b0);

assign icmp_ln86_730_fu_524_p2 = (($signed(x_36_val) < $signed(18'd27)) ? 1'b1 : 1'b0);

assign icmp_ln86_731_fu_530_p2 = (($signed(x_3_val) < $signed(18'd176213)) ? 1'b1 : 1'b0);

assign icmp_ln86_732_fu_536_p2 = (($signed(x_23_val) < $signed(18'd6)) ? 1'b1 : 1'b0);

assign icmp_ln86_733_fu_542_p2 = (($signed(x_31_val) < $signed(18'd2542)) ? 1'b1 : 1'b0);

assign icmp_ln86_734_fu_548_p2 = (($signed(x_25_val) < $signed(18'd244)) ? 1'b1 : 1'b0);

assign icmp_ln86_735_fu_554_p2 = (($signed(x_38_val) < $signed(18'd72)) ? 1'b1 : 1'b0);

assign icmp_ln86_736_fu_560_p2 = (($signed(x_17_val) < $signed(18'd69)) ? 1'b1 : 1'b0);

assign icmp_ln86_737_fu_566_p2 = (($signed(x_7_val) < $signed(18'd28490)) ? 1'b1 : 1'b0);

assign icmp_ln86_738_fu_572_p2 = (($signed(x_51_val) < $signed(18'd174002)) ? 1'b1 : 1'b0);

assign icmp_ln86_739_fu_578_p2 = (($signed(x_6_val) < $signed(18'd25971)) ? 1'b1 : 1'b0);

assign icmp_ln86_740_fu_584_p2 = (($signed(x_7_val) < $signed(18'd37063)) ? 1'b1 : 1'b0);

assign icmp_ln86_741_fu_590_p2 = (($signed(x_43_val) < $signed(18'd81)) ? 1'b1 : 1'b0);

assign icmp_ln86_742_fu_596_p2 = (($signed(x_40_val) < $signed(18'd1219)) ? 1'b1 : 1'b0);

assign icmp_ln86_743_fu_602_p2 = (($signed(x_10_val) < $signed(18'd685)) ? 1'b1 : 1'b0);

assign icmp_ln86_744_fu_608_p2 = (($signed(x_46_val) < $signed(18'd203)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_434_p2 = (($signed(x_26_val) < $signed(18'd154713)) ? 1'b1 : 1'b0);

assign or_ln117_655_fu_798_p2 = (and_ln102_696_fu_704_p2 | and_ln102_693_fu_668_p2);

assign or_ln117_656_fu_812_p2 = (or_ln117_655_fu_798_p2 | and_ln102_702_fu_734_p2);

assign or_ln117_657_fu_830_p2 = (and_ln102_696_fu_704_p2 | and_ln102_689_fu_632_p2);

assign or_ln117_658_fu_844_p2 = (or_ln117_657_fu_830_p2 | and_ln102_703_fu_740_p2);

assign or_ln117_659_fu_858_p2 = (or_ln117_657_fu_830_p2 | and_ln102_694_fu_680_p2);

assign or_ln117_660_fu_872_p2 = (or_ln117_659_fu_858_p2 | and_ln102_704_fu_752_p2);

assign or_ln117_661_fu_890_p2 = (and_ln102_fu_614_p2 | and_ln102_696_fu_704_p2);

assign or_ln117_662_fu_904_p2 = (or_ln117_661_fu_890_p2 | and_ln102_705_fu_758_p2);

assign or_ln117_663_fu_918_p2 = (or_ln117_661_fu_890_p2 | and_ln102_695_fu_692_p2);

assign or_ln117_664_fu_932_p2 = (or_ln117_663_fu_918_p2 | and_ln102_706_fu_770_p2);

assign or_ln117_665_fu_946_p2 = (or_ln117_661_fu_890_p2 | and_ln102_690_fu_650_p2);

assign or_ln117_666_fu_960_p2 = (or_ln117_665_fu_946_p2 | and_ln102_707_fu_776_p2);

assign or_ln117_667_fu_974_p2 = (or_ln117_665_fu_946_p2 | and_ln104_145_fu_716_p2);

assign or_ln117_668_fu_1153_p2 = (or_ln117_667_reg_1594 | and_ln102_708_fu_1089_p2);

assign or_ln117_669_fu_1161_p2 = (or_ln117_667_reg_1594 | and_ln102_697_fu_1049_p2);

assign or_ln117_670_fu_1174_p2 = (or_ln117_669_fu_1161_p2 | and_ln102_709_fu_1099_p2);

assign or_ln117_671_fu_1188_p2 = (or_ln117_667_reg_1594 | and_ln102_691_fu_1017_p2);

assign or_ln117_672_fu_1201_p2 = (or_ln117_671_fu_1188_p2 | and_ln102_710_fu_1105_p2);

assign or_ln117_673_fu_1215_p2 = (or_ln117_671_fu_1188_p2 | and_ln102_698_fu_1059_p2);

assign or_ln117_674_fu_1229_p2 = (or_ln117_673_fu_1215_p2 | and_ln102_711_fu_1115_p2);

assign or_ln117_675_fu_1243_p2 = (or_ln117_667_reg_1594 | and_ln102_688_fu_1001_p2);

assign or_ln117_676_fu_1256_p2 = (or_ln117_675_fu_1243_p2 | and_ln102_712_fu_1121_p2);

assign or_ln117_677_fu_1270_p2 = (or_ln117_675_fu_1243_p2 | and_ln102_699_fu_1069_p2);

assign or_ln117_678_fu_1284_p2 = (or_ln117_677_fu_1270_p2 | and_ln102_713_fu_1131_p2);

assign or_ln117_679_fu_1298_p2 = (or_ln117_675_fu_1243_p2 | and_ln102_692_fu_1033_p2);

assign or_ln117_680_fu_1312_p2 = (or_ln117_679_fu_1298_p2 | and_ln102_714_fu_1137_p2);

assign or_ln117_681_fu_1326_p2 = (or_ln117_679_fu_1298_p2 | and_ln102_700_fu_1079_p2);

assign or_ln117_682_fu_1340_p2 = (or_ln117_681_fu_1326_p2 | and_ln102_715_fu_1147_p2);

assign or_ln117_683_fu_1354_p2 = (xor_ln104_fu_996_p2 | or_ln117_667_reg_1594);

assign or_ln117_fu_782_p2 = (and_ln102_701_fu_722_p2 | and_ln102_696_fu_704_p2);

assign select_ln117_695_fu_818_p3 = ((or_ln117_655_fu_798_p2[0:0] == 1'b1) ? select_ln117_fu_804_p3 : 2'd3);

assign select_ln117_696_fu_836_p3 = ((or_ln117_656_fu_812_p2[0:0] == 1'b1) ? zext_ln117_78_fu_826_p1 : 3'd4);

assign select_ln117_697_fu_850_p3 = ((or_ln117_657_fu_830_p2[0:0] == 1'b1) ? select_ln117_696_fu_836_p3 : 3'd5);

assign select_ln117_698_fu_864_p3 = ((or_ln117_658_fu_844_p2[0:0] == 1'b1) ? select_ln117_697_fu_850_p3 : 3'd6);

assign select_ln117_699_fu_878_p3 = ((or_ln117_659_fu_858_p2[0:0] == 1'b1) ? select_ln117_698_fu_864_p3 : 3'd7);

assign select_ln117_700_fu_896_p3 = ((or_ln117_660_fu_872_p2[0:0] == 1'b1) ? zext_ln117_79_fu_886_p1 : 4'd8);

assign select_ln117_701_fu_910_p3 = ((or_ln117_661_fu_890_p2[0:0] == 1'b1) ? select_ln117_700_fu_896_p3 : 4'd9);

assign select_ln117_702_fu_924_p3 = ((or_ln117_662_fu_904_p2[0:0] == 1'b1) ? select_ln117_701_fu_910_p3 : 4'd10);

assign select_ln117_703_fu_938_p3 = ((or_ln117_663_fu_918_p2[0:0] == 1'b1) ? select_ln117_702_fu_924_p3 : 4'd11);

assign select_ln117_704_fu_952_p3 = ((or_ln117_664_fu_932_p2[0:0] == 1'b1) ? select_ln117_703_fu_938_p3 : 4'd12);

assign select_ln117_705_fu_966_p3 = ((or_ln117_665_fu_946_p2[0:0] == 1'b1) ? select_ln117_704_fu_952_p3 : 4'd13);

assign select_ln117_706_fu_980_p3 = ((or_ln117_666_fu_960_p2[0:0] == 1'b1) ? select_ln117_705_fu_966_p3 : 4'd14);

assign select_ln117_707_fu_988_p3 = ((or_ln117_667_fu_974_p2[0:0] == 1'b1) ? select_ln117_706_fu_980_p3 : 4'd15);

assign select_ln117_708_fu_1166_p3 = ((or_ln117_668_fu_1153_p2[0:0] == 1'b1) ? zext_ln117_80_fu_1158_p1 : 5'd16);

assign select_ln117_709_fu_1180_p3 = ((or_ln117_669_fu_1161_p2[0:0] == 1'b1) ? select_ln117_708_fu_1166_p3 : 5'd17);

assign select_ln117_710_fu_1193_p3 = ((or_ln117_670_fu_1174_p2[0:0] == 1'b1) ? select_ln117_709_fu_1180_p3 : 5'd18);

assign select_ln117_711_fu_1207_p3 = ((or_ln117_671_fu_1188_p2[0:0] == 1'b1) ? select_ln117_710_fu_1193_p3 : 5'd19);

assign select_ln117_712_fu_1221_p3 = ((or_ln117_672_fu_1201_p2[0:0] == 1'b1) ? select_ln117_711_fu_1207_p3 : 5'd20);

assign select_ln117_713_fu_1235_p3 = ((or_ln117_673_fu_1215_p2[0:0] == 1'b1) ? select_ln117_712_fu_1221_p3 : 5'd21);

assign select_ln117_714_fu_1248_p3 = ((or_ln117_674_fu_1229_p2[0:0] == 1'b1) ? select_ln117_713_fu_1235_p3 : 5'd22);

assign select_ln117_715_fu_1262_p3 = ((or_ln117_675_fu_1243_p2[0:0] == 1'b1) ? select_ln117_714_fu_1248_p3 : 5'd23);

assign select_ln117_716_fu_1276_p3 = ((or_ln117_676_fu_1256_p2[0:0] == 1'b1) ? select_ln117_715_fu_1262_p3 : 5'd24);

assign select_ln117_717_fu_1290_p3 = ((or_ln117_677_fu_1270_p2[0:0] == 1'b1) ? select_ln117_716_fu_1276_p3 : 5'd25);

assign select_ln117_718_fu_1304_p3 = ((or_ln117_678_fu_1284_p2[0:0] == 1'b1) ? select_ln117_717_fu_1290_p3 : 5'd26);

assign select_ln117_719_fu_1318_p3 = ((or_ln117_679_fu_1298_p2[0:0] == 1'b1) ? select_ln117_718_fu_1304_p3 : 5'd27);

assign select_ln117_720_fu_1332_p3 = ((or_ln117_680_fu_1312_p2[0:0] == 1'b1) ? select_ln117_719_fu_1318_p3 : 5'd28);

assign select_ln117_721_fu_1346_p3 = ((or_ln117_681_fu_1326_p2[0:0] == 1'b1) ? select_ln117_720_fu_1332_p3 : 5'd29);

assign select_ln117_fu_804_p3 = ((or_ln117_fu_782_p2[0:0] == 1'b1) ? zext_ln117_fu_794_p1 : 2'd2);

assign tmp_fu_1367_p63 = 'bx;

assign tmp_fu_1367_p64 = ((or_ln117_682_fu_1340_p2[0:0] == 1'b1) ? select_ln117_721_fu_1346_p3 : 5'd30);

assign xor_ln104_344_fu_620_p2 = (icmp_ln86_716_fu_440_p2 ^ 1'd1);

assign xor_ln104_345_fu_1006_p2 = (icmp_ln86_717_reg_1512 ^ 1'd1);

assign xor_ln104_346_fu_638_p2 = (icmp_ln86_718_fu_452_p2 ^ 1'd1);

assign xor_ln104_347_fu_656_p2 = (icmp_ln86_719_fu_458_p2 ^ 1'd1);

assign xor_ln104_348_fu_1022_p2 = (icmp_ln86_720_reg_1518 ^ 1'd1);

assign xor_ln104_349_fu_1038_p2 = (icmp_ln86_721_reg_1524 ^ 1'd1);

assign xor_ln104_350_fu_674_p2 = (icmp_ln86_722_fu_476_p2 ^ 1'd1);

assign xor_ln104_351_fu_686_p2 = (icmp_ln86_723_fu_482_p2 ^ 1'd1);

assign xor_ln104_352_fu_698_p2 = (icmp_ln86_724_fu_488_p2 ^ 1'd1);

assign xor_ln104_353_fu_710_p2 = (icmp_ln86_725_fu_494_p2 ^ 1'd1);

assign xor_ln104_354_fu_1054_p2 = (icmp_ln86_726_reg_1530 ^ 1'd1);

assign xor_ln104_355_fu_1064_p2 = (icmp_ln86_727_reg_1536 ^ 1'd1);

assign xor_ln104_356_fu_1074_p2 = (icmp_ln86_728_reg_1542 ^ 1'd1);

assign xor_ln104_357_fu_1084_p2 = (icmp_ln86_729_reg_1548 ^ 1'd1);

assign xor_ln104_fu_996_p2 = (icmp_ln86_reg_1507 ^ 1'd1);

assign xor_ln117_fu_788_p2 = (1'd1 ^ and_ln102_696_fu_704_p2);

assign zext_ln117_78_fu_826_p1 = select_ln117_695_fu_818_p3;

assign zext_ln117_79_fu_886_p1 = select_ln117_699_fu_878_p3;

assign zext_ln117_80_fu_1158_p1 = select_ln117_707_reg_1603;

assign zext_ln117_fu_794_p1 = xor_ln117_fu_788_p2;

endmodule //my_prj_decision_function_27
