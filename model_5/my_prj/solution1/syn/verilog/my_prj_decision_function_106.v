// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_106 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_2_val,
        x_4_val,
        x_5_val,
        x_11_val,
        x_13_val,
        x_15_val,
        x_16_val,
        x_18_val,
        x_19_val,
        x_21_val,
        x_28_val,
        x_29_val,
        x_32_val,
        x_33_val,
        x_34_val,
        x_36_val,
        x_47_val,
        x_50_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_2_val;
input  [17:0] x_4_val;
input  [17:0] x_5_val;
input  [17:0] x_11_val;
input  [17:0] x_13_val;
input  [17:0] x_15_val;
input  [17:0] x_16_val;
input  [17:0] x_18_val;
input  [17:0] x_19_val;
input  [17:0] x_21_val;
input  [17:0] x_28_val;
input  [17:0] x_29_val;
input  [17:0] x_32_val;
input  [17:0] x_33_val;
input  [17:0] x_34_val;
input  [17:0] x_36_val;
input  [17:0] x_47_val;
input  [17:0] x_50_val;
output  [12:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_388_p2;
reg   [0:0] icmp_ln86_reg_1474;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_1841_fu_400_p2;
reg   [0:0] icmp_ln86_1841_reg_1483;
wire   [0:0] icmp_ln86_1844_fu_418_p2;
reg   [0:0] icmp_ln86_1844_reg_1489;
wire   [0:0] icmp_ln86_1845_fu_424_p2;
reg   [0:0] icmp_ln86_1845_reg_1495;
wire   [0:0] icmp_ln86_1850_fu_464_p2;
reg   [0:0] icmp_ln86_1850_reg_1501;
wire   [0:0] icmp_ln86_1851_fu_470_p2;
reg   [0:0] icmp_ln86_1851_reg_1507;
wire   [0:0] icmp_ln86_1852_fu_476_p2;
reg   [0:0] icmp_ln86_1852_reg_1513;
wire   [0:0] icmp_ln86_1853_fu_482_p2;
reg   [0:0] icmp_ln86_1853_reg_1519;
wire   [0:0] icmp_ln86_1862_fu_546_p2;
reg   [0:0] icmp_ln86_1862_reg_1525;
wire   [0:0] icmp_ln86_1863_fu_552_p2;
reg   [0:0] icmp_ln86_1863_reg_1530;
wire   [0:0] icmp_ln86_1864_fu_558_p2;
reg   [0:0] icmp_ln86_1864_reg_1535;
wire   [0:0] icmp_ln86_1865_fu_564_p2;
reg   [0:0] icmp_ln86_1865_reg_1540;
wire   [0:0] icmp_ln86_1866_fu_570_p2;
reg   [0:0] icmp_ln86_1866_reg_1545;
wire   [0:0] icmp_ln86_1867_fu_576_p2;
reg   [0:0] icmp_ln86_1867_reg_1550;
wire   [0:0] icmp_ln86_1868_fu_582_p2;
reg   [0:0] icmp_ln86_1868_reg_1555;
wire   [0:0] icmp_ln86_1869_fu_588_p2;
reg   [0:0] icmp_ln86_1869_reg_1560;
wire   [4:0] select_ln117_1801_fu_968_p3;
reg   [4:0] select_ln117_1801_reg_1565;
wire    ap_block_pp0_stage0;
wire   [15:0] tmp_fu_448_p4;
wire   [15:0] tmp_34_fu_518_p4;
wire   [0:0] icmp_ln86_1840_fu_394_p2;
wire   [0:0] xor_ln104_881_fu_600_p2;
wire   [0:0] icmp_ln86_1842_fu_406_p2;
wire   [0:0] and_ln102_fu_594_p2;
wire   [0:0] xor_ln104_883_fu_618_p2;
wire   [0:0] icmp_ln86_1843_fu_412_p2;
wire   [0:0] and_ln104_fu_606_p2;
wire   [0:0] xor_ln104_884_fu_636_p2;
wire   [0:0] icmp_ln86_1846_fu_430_p2;
wire   [0:0] and_ln102_2069_fu_612_p2;
wire   [0:0] icmp_ln86_1847_fu_436_p2;
wire   [0:0] and_ln104_351_fu_624_p2;
wire   [0:0] icmp_ln86_1848_fu_442_p2;
wire   [0:0] and_ln102_2070_fu_630_p2;
wire   [0:0] icmp_ln86_1849_fu_458_p2;
wire   [0:0] and_ln104_352_fu_642_p2;
wire   [0:0] icmp_ln86_1854_fu_488_p2;
wire   [0:0] and_ln102_2073_fu_648_p2;
wire   [0:0] icmp_ln86_1855_fu_494_p2;
wire   [0:0] xor_ln104_887_fu_654_p2;
wire   [0:0] and_ln102_2082_fu_702_p2;
wire   [0:0] icmp_ln86_1856_fu_500_p2;
wire   [0:0] and_ln102_2074_fu_660_p2;
wire   [0:0] icmp_ln86_1857_fu_506_p2;
wire   [0:0] xor_ln104_888_fu_666_p2;
wire   [0:0] and_ln102_2085_fu_720_p2;
wire   [0:0] icmp_ln86_1858_fu_512_p2;
wire   [0:0] and_ln102_2075_fu_672_p2;
wire   [0:0] icmp_ln86_1859_fu_528_p2;
wire   [0:0] xor_ln104_889_fu_678_p2;
wire   [0:0] and_ln102_2088_fu_738_p2;
wire   [0:0] icmp_ln86_1860_fu_534_p2;
wire   [0:0] and_ln102_2076_fu_684_p2;
wire   [0:0] icmp_ln86_1861_fu_540_p2;
wire   [0:0] xor_ln104_890_fu_690_p2;
wire   [0:0] and_ln102_2091_fu_756_p2;
wire   [0:0] and_ln102_2081_fu_696_p2;
wire   [0:0] xor_ln117_fu_768_p2;
wire   [0:0] and_ln102_2083_fu_708_p2;
wire   [1:0] zext_ln117_fu_774_p1;
wire   [0:0] or_ln117_fu_778_p2;
wire   [1:0] select_ln117_fu_784_p3;
wire   [1:0] select_ln117_1788_fu_792_p3;
wire   [0:0] and_ln102_2084_fu_714_p2;
wire   [2:0] zext_ln117_201_fu_800_p1;
wire   [0:0] or_ln117_1677_fu_804_p2;
wire   [2:0] select_ln117_1789_fu_810_p3;
wire   [0:0] or_ln117_1678_fu_818_p2;
wire   [0:0] and_ln102_2086_fu_726_p2;
wire   [2:0] select_ln117_1790_fu_824_p3;
wire   [0:0] or_ln117_1679_fu_832_p2;
wire   [2:0] select_ln117_1791_fu_838_p3;
wire   [2:0] select_ln117_1792_fu_846_p3;
wire   [0:0] and_ln102_2087_fu_732_p2;
wire   [3:0] zext_ln117_202_fu_854_p1;
wire   [0:0] or_ln117_1680_fu_858_p2;
wire   [3:0] select_ln117_1793_fu_864_p3;
wire   [0:0] or_ln117_1681_fu_872_p2;
wire   [0:0] and_ln102_2089_fu_744_p2;
wire   [3:0] select_ln117_1794_fu_878_p3;
wire   [0:0] or_ln117_1682_fu_886_p2;
wire   [3:0] select_ln117_1795_fu_892_p3;
wire   [0:0] or_ln117_1683_fu_900_p2;
wire   [0:0] and_ln102_2090_fu_750_p2;
wire   [3:0] select_ln117_1796_fu_906_p3;
wire   [0:0] or_ln117_1684_fu_914_p2;
wire   [3:0] select_ln117_1797_fu_920_p3;
wire   [0:0] or_ln117_1685_fu_928_p2;
wire   [0:0] and_ln102_2092_fu_762_p2;
wire   [3:0] select_ln117_1798_fu_934_p3;
wire   [0:0] or_ln117_1686_fu_942_p2;
wire   [3:0] select_ln117_1799_fu_948_p3;
wire   [3:0] select_ln117_1800_fu_956_p3;
wire   [4:0] zext_ln117_203_fu_964_p1;
wire   [0:0] xor_ln104_fu_976_p2;
wire   [0:0] xor_ln104_882_fu_986_p2;
wire   [0:0] and_ln102_2068_fu_981_p2;
wire   [0:0] xor_ln104_885_fu_1002_p2;
wire   [0:0] and_ln104_350_fu_991_p2;
wire   [0:0] xor_ln104_886_fu_1018_p2;
wire   [0:0] and_ln102_2071_fu_997_p2;
wire   [0:0] and_ln104_353_fu_1007_p2;
wire   [0:0] and_ln102_2072_fu_1013_p2;
wire   [0:0] and_ln104_354_fu_1023_p2;
wire   [0:0] and_ln102_2077_fu_1029_p2;
wire   [0:0] xor_ln104_891_fu_1034_p2;
wire   [0:0] and_ln102_2094_fu_1074_p2;
wire   [0:0] and_ln102_2078_fu_1039_p2;
wire   [0:0] xor_ln104_892_fu_1044_p2;
wire   [0:0] and_ln102_2097_fu_1090_p2;
wire   [0:0] and_ln102_2079_fu_1049_p2;
wire   [0:0] xor_ln104_893_fu_1054_p2;
wire   [0:0] and_ln102_2100_fu_1106_p2;
wire   [0:0] and_ln102_2080_fu_1059_p2;
wire   [0:0] xor_ln104_894_fu_1064_p2;
wire   [0:0] and_ln102_2103_fu_1122_p2;
wire   [0:0] and_ln102_2093_fu_1069_p2;
wire   [0:0] or_ln117_1687_fu_1133_p2;
wire   [0:0] or_ln117_1688_fu_1138_p2;
wire   [0:0] and_ln102_2095_fu_1079_p2;
wire   [4:0] select_ln117_1802_fu_1143_p3;
wire   [0:0] or_ln117_1689_fu_1150_p2;
wire   [4:0] select_ln117_1803_fu_1156_p3;
wire   [0:0] or_ln117_1690_fu_1164_p2;
wire   [0:0] and_ln102_2096_fu_1085_p2;
wire   [4:0] select_ln117_1804_fu_1169_p3;
wire   [0:0] or_ln117_1691_fu_1177_p2;
wire   [4:0] select_ln117_1805_fu_1183_p3;
wire   [0:0] or_ln117_1692_fu_1191_p2;
wire   [0:0] and_ln102_2098_fu_1095_p2;
wire   [4:0] select_ln117_1806_fu_1197_p3;
wire   [0:0] or_ln117_1693_fu_1205_p2;
wire   [4:0] select_ln117_1807_fu_1211_p3;
wire   [0:0] or_ln117_1694_fu_1219_p2;
wire   [0:0] and_ln102_2099_fu_1101_p2;
wire   [4:0] select_ln117_1808_fu_1224_p3;
wire   [0:0] or_ln117_1695_fu_1232_p2;
wire   [4:0] select_ln117_1809_fu_1238_p3;
wire   [0:0] or_ln117_1696_fu_1246_p2;
wire   [0:0] and_ln102_2101_fu_1111_p2;
wire   [4:0] select_ln117_1810_fu_1252_p3;
wire   [0:0] or_ln117_1697_fu_1260_p2;
wire   [4:0] select_ln117_1811_fu_1266_p3;
wire   [0:0] or_ln117_1698_fu_1274_p2;
wire   [0:0] and_ln102_2102_fu_1117_p2;
wire   [4:0] select_ln117_1812_fu_1280_p3;
wire   [0:0] or_ln117_1699_fu_1288_p2;
wire   [4:0] select_ln117_1813_fu_1294_p3;
wire   [0:0] or_ln117_1700_fu_1302_p2;
wire   [0:0] and_ln102_2104_fu_1127_p2;
wire   [4:0] select_ln117_1814_fu_1308_p3;
wire   [0:0] or_ln117_1701_fu_1316_p2;
wire   [4:0] select_ln117_1815_fu_1322_p3;
wire   [12:0] agg_result_fu_1338_p65;
wire   [4:0] agg_result_fu_1338_p66;
wire   [12:0] agg_result_fu_1338_p67;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1338_p1;
wire   [4:0] agg_result_fu_1338_p3;
wire   [4:0] agg_result_fu_1338_p5;
wire   [4:0] agg_result_fu_1338_p7;
wire   [4:0] agg_result_fu_1338_p9;
wire   [4:0] agg_result_fu_1338_p11;
wire   [4:0] agg_result_fu_1338_p13;
wire   [4:0] agg_result_fu_1338_p15;
wire   [4:0] agg_result_fu_1338_p17;
wire   [4:0] agg_result_fu_1338_p19;
wire   [4:0] agg_result_fu_1338_p21;
wire   [4:0] agg_result_fu_1338_p23;
wire   [4:0] agg_result_fu_1338_p25;
wire   [4:0] agg_result_fu_1338_p27;
wire   [4:0] agg_result_fu_1338_p29;
wire   [4:0] agg_result_fu_1338_p31;
wire  signed [4:0] agg_result_fu_1338_p33;
wire  signed [4:0] agg_result_fu_1338_p35;
wire  signed [4:0] agg_result_fu_1338_p37;
wire  signed [4:0] agg_result_fu_1338_p39;
wire  signed [4:0] agg_result_fu_1338_p41;
wire  signed [4:0] agg_result_fu_1338_p43;
wire  signed [4:0] agg_result_fu_1338_p45;
wire  signed [4:0] agg_result_fu_1338_p47;
wire  signed [4:0] agg_result_fu_1338_p49;
wire  signed [4:0] agg_result_fu_1338_p51;
wire  signed [4:0] agg_result_fu_1338_p53;
wire  signed [4:0] agg_result_fu_1338_p55;
wire  signed [4:0] agg_result_fu_1338_p57;
wire  signed [4:0] agg_result_fu_1338_p59;
wire  signed [4:0] agg_result_fu_1338_p61;
wire  signed [4:0] agg_result_fu_1338_p63;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_65_5_13_1_1_x11 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 13 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 13 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 13 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 13 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 13 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 13 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 13 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 13 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 13 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 13 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 13 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 13 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 13 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 13 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 13 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 13 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 13 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 13 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 13 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 13 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 13 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 13 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 13 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 13 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 13 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 13 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 13 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 13 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 13 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 13 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 13 ),
    .CASE31( 5'h1F ),
    .din31_WIDTH( 13 ),
    .def_WIDTH( 13 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 13 ))
sparsemux_65_5_13_1_1_x11_U2400(
    .din0(13'd8157),
    .din1(13'd90),
    .din2(13'd8012),
    .din3(13'd39),
    .din4(13'd239),
    .din5(13'd7793),
    .din6(13'd1868),
    .din7(13'd10),
    .din8(13'd979),
    .din9(13'd8015),
    .din10(13'd1185),
    .din11(13'd13),
    .din12(13'd7767),
    .din13(13'd8042),
    .din14(13'd7963),
    .din15(13'd39),
    .din16(13'd1663),
    .din17(13'd8008),
    .din18(13'd549),
    .din19(13'd8188),
    .din20(13'd8098),
    .din21(13'd569),
    .din22(13'd7912),
    .din23(13'd451),
    .din24(13'd2582),
    .din25(13'd7814),
    .din26(13'd149),
    .din27(13'd1531),
    .din28(13'd8064),
    .din29(13'd1664),
    .din30(13'd56),
    .din31(13'd8173),
    .def(agg_result_fu_1338_p65),
    .sel(agg_result_fu_1338_p66),
    .dout(agg_result_fu_1338_p67)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_1841_reg_1483 <= icmp_ln86_1841_fu_400_p2;
        icmp_ln86_1844_reg_1489 <= icmp_ln86_1844_fu_418_p2;
        icmp_ln86_1845_reg_1495 <= icmp_ln86_1845_fu_424_p2;
        icmp_ln86_1850_reg_1501 <= icmp_ln86_1850_fu_464_p2;
        icmp_ln86_1851_reg_1507 <= icmp_ln86_1851_fu_470_p2;
        icmp_ln86_1852_reg_1513 <= icmp_ln86_1852_fu_476_p2;
        icmp_ln86_1853_reg_1519 <= icmp_ln86_1853_fu_482_p2;
        icmp_ln86_1862_reg_1525 <= icmp_ln86_1862_fu_546_p2;
        icmp_ln86_1863_reg_1530 <= icmp_ln86_1863_fu_552_p2;
        icmp_ln86_1864_reg_1535 <= icmp_ln86_1864_fu_558_p2;
        icmp_ln86_1865_reg_1540 <= icmp_ln86_1865_fu_564_p2;
        icmp_ln86_1866_reg_1545 <= icmp_ln86_1866_fu_570_p2;
        icmp_ln86_1867_reg_1550 <= icmp_ln86_1867_fu_576_p2;
        icmp_ln86_1868_reg_1555 <= icmp_ln86_1868_fu_582_p2;
        icmp_ln86_1869_reg_1560 <= icmp_ln86_1869_fu_588_p2;
        icmp_ln86_reg_1474 <= icmp_ln86_fu_388_p2;
        select_ln117_1801_reg_1565 <= select_ln117_1801_fu_968_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1338_p65 = 'bx;

assign agg_result_fu_1338_p66 = ((or_ln117_1701_fu_1316_p2[0:0] == 1'b1) ? select_ln117_1815_fu_1322_p3 : 5'd31);

assign and_ln102_2068_fu_981_p2 = (xor_ln104_fu_976_p2 & icmp_ln86_1841_reg_1483);

assign and_ln102_2069_fu_612_p2 = (icmp_ln86_1842_fu_406_p2 & and_ln102_fu_594_p2);

assign and_ln102_2070_fu_630_p2 = (icmp_ln86_1843_fu_412_p2 & and_ln104_fu_606_p2);

assign and_ln102_2071_fu_997_p2 = (icmp_ln86_1844_reg_1489 & and_ln102_2068_fu_981_p2);

assign and_ln102_2072_fu_1013_p2 = (icmp_ln86_1845_reg_1495 & and_ln104_350_fu_991_p2);

assign and_ln102_2073_fu_648_p2 = (icmp_ln86_1846_fu_430_p2 & and_ln102_2069_fu_612_p2);

assign and_ln102_2074_fu_660_p2 = (icmp_ln86_1847_fu_436_p2 & and_ln104_351_fu_624_p2);

assign and_ln102_2075_fu_672_p2 = (icmp_ln86_1848_fu_442_p2 & and_ln102_2070_fu_630_p2);

assign and_ln102_2076_fu_684_p2 = (icmp_ln86_1849_fu_458_p2 & and_ln104_352_fu_642_p2);

assign and_ln102_2077_fu_1029_p2 = (icmp_ln86_1850_reg_1501 & and_ln102_2071_fu_997_p2);

assign and_ln102_2078_fu_1039_p2 = (icmp_ln86_1851_reg_1507 & and_ln104_353_fu_1007_p2);

assign and_ln102_2079_fu_1049_p2 = (icmp_ln86_1852_reg_1513 & and_ln102_2072_fu_1013_p2);

assign and_ln102_2080_fu_1059_p2 = (icmp_ln86_1853_reg_1519 & and_ln104_354_fu_1023_p2);

assign and_ln102_2081_fu_696_p2 = (icmp_ln86_1854_fu_488_p2 & and_ln102_2073_fu_648_p2);

assign and_ln102_2082_fu_702_p2 = (xor_ln104_887_fu_654_p2 & icmp_ln86_1855_fu_494_p2);

assign and_ln102_2083_fu_708_p2 = (and_ln102_2082_fu_702_p2 & and_ln102_2069_fu_612_p2);

assign and_ln102_2084_fu_714_p2 = (icmp_ln86_1856_fu_500_p2 & and_ln102_2074_fu_660_p2);

assign and_ln102_2085_fu_720_p2 = (xor_ln104_888_fu_666_p2 & icmp_ln86_1857_fu_506_p2);

assign and_ln102_2086_fu_726_p2 = (and_ln104_351_fu_624_p2 & and_ln102_2085_fu_720_p2);

assign and_ln102_2087_fu_732_p2 = (icmp_ln86_1858_fu_512_p2 & and_ln102_2075_fu_672_p2);

assign and_ln102_2088_fu_738_p2 = (xor_ln104_889_fu_678_p2 & icmp_ln86_1859_fu_528_p2);

assign and_ln102_2089_fu_744_p2 = (and_ln102_2088_fu_738_p2 & and_ln102_2070_fu_630_p2);

assign and_ln102_2090_fu_750_p2 = (icmp_ln86_1860_fu_534_p2 & and_ln102_2076_fu_684_p2);

assign and_ln102_2091_fu_756_p2 = (xor_ln104_890_fu_690_p2 & icmp_ln86_1861_fu_540_p2);

assign and_ln102_2092_fu_762_p2 = (and_ln104_352_fu_642_p2 & and_ln102_2091_fu_756_p2);

assign and_ln102_2093_fu_1069_p2 = (icmp_ln86_1862_reg_1525 & and_ln102_2077_fu_1029_p2);

assign and_ln102_2094_fu_1074_p2 = (xor_ln104_891_fu_1034_p2 & icmp_ln86_1863_reg_1530);

assign and_ln102_2095_fu_1079_p2 = (and_ln102_2094_fu_1074_p2 & and_ln102_2071_fu_997_p2);

assign and_ln102_2096_fu_1085_p2 = (icmp_ln86_1864_reg_1535 & and_ln102_2078_fu_1039_p2);

assign and_ln102_2097_fu_1090_p2 = (xor_ln104_892_fu_1044_p2 & icmp_ln86_1865_reg_1540);

assign and_ln102_2098_fu_1095_p2 = (and_ln104_353_fu_1007_p2 & and_ln102_2097_fu_1090_p2);

assign and_ln102_2099_fu_1101_p2 = (icmp_ln86_1866_reg_1545 & and_ln102_2079_fu_1049_p2);

assign and_ln102_2100_fu_1106_p2 = (xor_ln104_893_fu_1054_p2 & icmp_ln86_1867_reg_1550);

assign and_ln102_2101_fu_1111_p2 = (and_ln102_2100_fu_1106_p2 & and_ln102_2072_fu_1013_p2);

assign and_ln102_2102_fu_1117_p2 = (icmp_ln86_1868_reg_1555 & and_ln102_2080_fu_1059_p2);

assign and_ln102_2103_fu_1122_p2 = (xor_ln104_894_fu_1064_p2 & icmp_ln86_1869_reg_1560);

assign and_ln102_2104_fu_1127_p2 = (and_ln104_354_fu_1023_p2 & and_ln102_2103_fu_1122_p2);

assign and_ln102_fu_594_p2 = (icmp_ln86_fu_388_p2 & icmp_ln86_1840_fu_394_p2);

assign and_ln104_350_fu_991_p2 = (xor_ln104_fu_976_p2 & xor_ln104_882_fu_986_p2);

assign and_ln104_351_fu_624_p2 = (xor_ln104_883_fu_618_p2 & and_ln102_fu_594_p2);

assign and_ln104_352_fu_642_p2 = (xor_ln104_884_fu_636_p2 & and_ln104_fu_606_p2);

assign and_ln104_353_fu_1007_p2 = (xor_ln104_885_fu_1002_p2 & and_ln102_2068_fu_981_p2);

assign and_ln104_354_fu_1023_p2 = (xor_ln104_886_fu_1018_p2 & and_ln104_350_fu_991_p2);

assign and_ln104_fu_606_p2 = (xor_ln104_881_fu_600_p2 & icmp_ln86_fu_388_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1338_p67;

assign icmp_ln86_1840_fu_394_p2 = (($signed(x_4_val) < $signed(18'd49167)) ? 1'b1 : 1'b0);

assign icmp_ln86_1841_fu_400_p2 = (($signed(x_19_val) < $signed(18'd2251)) ? 1'b1 : 1'b0);

assign icmp_ln86_1842_fu_406_p2 = (($signed(x_28_val) < $signed(18'd19766)) ? 1'b1 : 1'b0);

assign icmp_ln86_1843_fu_412_p2 = (($signed(x_32_val) < $signed(18'd668)) ? 1'b1 : 1'b0);

assign icmp_ln86_1844_fu_418_p2 = (($signed(x_18_val) < $signed(18'd2050)) ? 1'b1 : 1'b0);

assign icmp_ln86_1845_fu_424_p2 = (($signed(x_29_val) < $signed(18'd6)) ? 1'b1 : 1'b0);

assign icmp_ln86_1846_fu_430_p2 = (($signed(x_5_val) < $signed(18'd21749)) ? 1'b1 : 1'b0);

assign icmp_ln86_1847_fu_436_p2 = (($signed(x_50_val) < $signed(18'd65829)) ? 1'b1 : 1'b0);

assign icmp_ln86_1848_fu_442_p2 = (($signed(x_13_val) < $signed(18'd444)) ? 1'b1 : 1'b0);

assign icmp_ln86_1849_fu_458_p2 = (($signed(tmp_fu_448_p4) < $signed(16'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_1850_fu_464_p2 = (($signed(x_47_val) < $signed(18'd79399)) ? 1'b1 : 1'b0);

assign icmp_ln86_1851_fu_470_p2 = (($signed(x_16_val) < $signed(18'd81)) ? 1'b1 : 1'b0);

assign icmp_ln86_1852_fu_476_p2 = (($signed(x_16_val) < $signed(18'd97)) ? 1'b1 : 1'b0);

assign icmp_ln86_1853_fu_482_p2 = (($signed(x_47_val) < $signed(18'd79444)) ? 1'b1 : 1'b0);

assign icmp_ln86_1854_fu_488_p2 = (($signed(x_34_val) < $signed(18'd459)) ? 1'b1 : 1'b0);

assign icmp_ln86_1855_fu_494_p2 = (($signed(x_21_val) < $signed(18'd293)) ? 1'b1 : 1'b0);

assign icmp_ln86_1856_fu_500_p2 = (($signed(x_16_val) < $signed(18'd67)) ? 1'b1 : 1'b0);

assign icmp_ln86_1857_fu_506_p2 = (($signed(x_18_val) < $signed(18'd2353)) ? 1'b1 : 1'b0);

assign icmp_ln86_1858_fu_512_p2 = (($signed(x_32_val) < $signed(18'd632)) ? 1'b1 : 1'b0);

assign icmp_ln86_1859_fu_528_p2 = (($signed(tmp_34_fu_518_p4) < $signed(16'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_1860_fu_534_p2 = (($signed(x_4_val) < $signed(18'd59336)) ? 1'b1 : 1'b0);

assign icmp_ln86_1861_fu_540_p2 = (($signed(x_1_val) < $signed(18'd213002)) ? 1'b1 : 1'b0);

assign icmp_ln86_1862_fu_546_p2 = (($signed(x_50_val) < $signed(18'd79291)) ? 1'b1 : 1'b0);

assign icmp_ln86_1863_fu_552_p2 = (($signed(x_29_val) < $signed(18'd2912)) ? 1'b1 : 1'b0);

assign icmp_ln86_1864_fu_558_p2 = (($signed(x_13_val) < $signed(18'd460)) ? 1'b1 : 1'b0);

assign icmp_ln86_1865_fu_564_p2 = (($signed(x_4_val) < $signed(18'd87226)) ? 1'b1 : 1'b0);

assign icmp_ln86_1866_fu_570_p2 = (($signed(x_50_val) < $signed(18'd88494)) ? 1'b1 : 1'b0);

assign icmp_ln86_1867_fu_576_p2 = (($signed(x_33_val) < $signed(18'd712)) ? 1'b1 : 1'b0);

assign icmp_ln86_1868_fu_582_p2 = (($signed(x_11_val) < $signed(18'd693)) ? 1'b1 : 1'b0);

assign icmp_ln86_1869_fu_588_p2 = (($signed(x_2_val) < $signed(18'd506)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_388_p2 = (($signed(x_47_val) < $signed(18'd79376)) ? 1'b1 : 1'b0);

assign or_ln117_1677_fu_804_p2 = (and_ln102_2084_fu_714_p2 | and_ln102_2069_fu_612_p2);

assign or_ln117_1678_fu_818_p2 = (and_ln102_2074_fu_660_p2 | and_ln102_2069_fu_612_p2);

assign or_ln117_1679_fu_832_p2 = (or_ln117_1678_fu_818_p2 | and_ln102_2086_fu_726_p2);

assign or_ln117_1680_fu_858_p2 = (and_ln102_fu_594_p2 | and_ln102_2087_fu_732_p2);

assign or_ln117_1681_fu_872_p2 = (and_ln102_fu_594_p2 | and_ln102_2075_fu_672_p2);

assign or_ln117_1682_fu_886_p2 = (or_ln117_1681_fu_872_p2 | and_ln102_2089_fu_744_p2);

assign or_ln117_1683_fu_900_p2 = (and_ln102_fu_594_p2 | and_ln102_2070_fu_630_p2);

assign or_ln117_1684_fu_914_p2 = (or_ln117_1683_fu_900_p2 | and_ln102_2090_fu_750_p2);

assign or_ln117_1685_fu_928_p2 = (or_ln117_1683_fu_900_p2 | and_ln102_2076_fu_684_p2);

assign or_ln117_1686_fu_942_p2 = (or_ln117_1685_fu_928_p2 | and_ln102_2092_fu_762_p2);

assign or_ln117_1687_fu_1133_p2 = (icmp_ln86_reg_1474 | and_ln102_2093_fu_1069_p2);

assign or_ln117_1688_fu_1138_p2 = (icmp_ln86_reg_1474 | and_ln102_2077_fu_1029_p2);

assign or_ln117_1689_fu_1150_p2 = (or_ln117_1688_fu_1138_p2 | and_ln102_2095_fu_1079_p2);

assign or_ln117_1690_fu_1164_p2 = (icmp_ln86_reg_1474 | and_ln102_2071_fu_997_p2);

assign or_ln117_1691_fu_1177_p2 = (or_ln117_1690_fu_1164_p2 | and_ln102_2096_fu_1085_p2);

assign or_ln117_1692_fu_1191_p2 = (or_ln117_1690_fu_1164_p2 | and_ln102_2078_fu_1039_p2);

assign or_ln117_1693_fu_1205_p2 = (or_ln117_1692_fu_1191_p2 | and_ln102_2098_fu_1095_p2);

assign or_ln117_1694_fu_1219_p2 = (icmp_ln86_reg_1474 | and_ln102_2068_fu_981_p2);

assign or_ln117_1695_fu_1232_p2 = (or_ln117_1694_fu_1219_p2 | and_ln102_2099_fu_1101_p2);

assign or_ln117_1696_fu_1246_p2 = (or_ln117_1694_fu_1219_p2 | and_ln102_2079_fu_1049_p2);

assign or_ln117_1697_fu_1260_p2 = (or_ln117_1696_fu_1246_p2 | and_ln102_2101_fu_1111_p2);

assign or_ln117_1698_fu_1274_p2 = (or_ln117_1694_fu_1219_p2 | and_ln102_2072_fu_1013_p2);

assign or_ln117_1699_fu_1288_p2 = (or_ln117_1698_fu_1274_p2 | and_ln102_2102_fu_1117_p2);

assign or_ln117_1700_fu_1302_p2 = (or_ln117_1698_fu_1274_p2 | and_ln102_2080_fu_1059_p2);

assign or_ln117_1701_fu_1316_p2 = (or_ln117_1700_fu_1302_p2 | and_ln102_2104_fu_1127_p2);

assign or_ln117_fu_778_p2 = (and_ln102_2083_fu_708_p2 | and_ln102_2073_fu_648_p2);

assign select_ln117_1788_fu_792_p3 = ((or_ln117_fu_778_p2[0:0] == 1'b1) ? select_ln117_fu_784_p3 : 2'd3);

assign select_ln117_1789_fu_810_p3 = ((and_ln102_2069_fu_612_p2[0:0] == 1'b1) ? zext_ln117_201_fu_800_p1 : 3'd4);

assign select_ln117_1790_fu_824_p3 = ((or_ln117_1677_fu_804_p2[0:0] == 1'b1) ? select_ln117_1789_fu_810_p3 : 3'd5);

assign select_ln117_1791_fu_838_p3 = ((or_ln117_1678_fu_818_p2[0:0] == 1'b1) ? select_ln117_1790_fu_824_p3 : 3'd6);

assign select_ln117_1792_fu_846_p3 = ((or_ln117_1679_fu_832_p2[0:0] == 1'b1) ? select_ln117_1791_fu_838_p3 : 3'd7);

assign select_ln117_1793_fu_864_p3 = ((and_ln102_fu_594_p2[0:0] == 1'b1) ? zext_ln117_202_fu_854_p1 : 4'd8);

assign select_ln117_1794_fu_878_p3 = ((or_ln117_1680_fu_858_p2[0:0] == 1'b1) ? select_ln117_1793_fu_864_p3 : 4'd9);

assign select_ln117_1795_fu_892_p3 = ((or_ln117_1681_fu_872_p2[0:0] == 1'b1) ? select_ln117_1794_fu_878_p3 : 4'd10);

assign select_ln117_1796_fu_906_p3 = ((or_ln117_1682_fu_886_p2[0:0] == 1'b1) ? select_ln117_1795_fu_892_p3 : 4'd11);

assign select_ln117_1797_fu_920_p3 = ((or_ln117_1683_fu_900_p2[0:0] == 1'b1) ? select_ln117_1796_fu_906_p3 : 4'd12);

assign select_ln117_1798_fu_934_p3 = ((or_ln117_1684_fu_914_p2[0:0] == 1'b1) ? select_ln117_1797_fu_920_p3 : 4'd13);

assign select_ln117_1799_fu_948_p3 = ((or_ln117_1685_fu_928_p2[0:0] == 1'b1) ? select_ln117_1798_fu_934_p3 : 4'd14);

assign select_ln117_1800_fu_956_p3 = ((or_ln117_1686_fu_942_p2[0:0] == 1'b1) ? select_ln117_1799_fu_948_p3 : 4'd15);

assign select_ln117_1801_fu_968_p3 = ((icmp_ln86_fu_388_p2[0:0] == 1'b1) ? zext_ln117_203_fu_964_p1 : 5'd16);

assign select_ln117_1802_fu_1143_p3 = ((or_ln117_1687_fu_1133_p2[0:0] == 1'b1) ? select_ln117_1801_reg_1565 : 5'd17);

assign select_ln117_1803_fu_1156_p3 = ((or_ln117_1688_fu_1138_p2[0:0] == 1'b1) ? select_ln117_1802_fu_1143_p3 : 5'd18);

assign select_ln117_1804_fu_1169_p3 = ((or_ln117_1689_fu_1150_p2[0:0] == 1'b1) ? select_ln117_1803_fu_1156_p3 : 5'd19);

assign select_ln117_1805_fu_1183_p3 = ((or_ln117_1690_fu_1164_p2[0:0] == 1'b1) ? select_ln117_1804_fu_1169_p3 : 5'd20);

assign select_ln117_1806_fu_1197_p3 = ((or_ln117_1691_fu_1177_p2[0:0] == 1'b1) ? select_ln117_1805_fu_1183_p3 : 5'd21);

assign select_ln117_1807_fu_1211_p3 = ((or_ln117_1692_fu_1191_p2[0:0] == 1'b1) ? select_ln117_1806_fu_1197_p3 : 5'd22);

assign select_ln117_1808_fu_1224_p3 = ((or_ln117_1693_fu_1205_p2[0:0] == 1'b1) ? select_ln117_1807_fu_1211_p3 : 5'd23);

assign select_ln117_1809_fu_1238_p3 = ((or_ln117_1694_fu_1219_p2[0:0] == 1'b1) ? select_ln117_1808_fu_1224_p3 : 5'd24);

assign select_ln117_1810_fu_1252_p3 = ((or_ln117_1695_fu_1232_p2[0:0] == 1'b1) ? select_ln117_1809_fu_1238_p3 : 5'd25);

assign select_ln117_1811_fu_1266_p3 = ((or_ln117_1696_fu_1246_p2[0:0] == 1'b1) ? select_ln117_1810_fu_1252_p3 : 5'd26);

assign select_ln117_1812_fu_1280_p3 = ((or_ln117_1697_fu_1260_p2[0:0] == 1'b1) ? select_ln117_1811_fu_1266_p3 : 5'd27);

assign select_ln117_1813_fu_1294_p3 = ((or_ln117_1698_fu_1274_p2[0:0] == 1'b1) ? select_ln117_1812_fu_1280_p3 : 5'd28);

assign select_ln117_1814_fu_1308_p3 = ((or_ln117_1699_fu_1288_p2[0:0] == 1'b1) ? select_ln117_1813_fu_1294_p3 : 5'd29);

assign select_ln117_1815_fu_1322_p3 = ((or_ln117_1700_fu_1302_p2[0:0] == 1'b1) ? select_ln117_1814_fu_1308_p3 : 5'd30);

assign select_ln117_fu_784_p3 = ((and_ln102_2073_fu_648_p2[0:0] == 1'b1) ? zext_ln117_fu_774_p1 : 2'd2);

assign tmp_34_fu_518_p4 = {{x_15_val[17:2]}};

assign tmp_fu_448_p4 = {{x_36_val[17:2]}};

assign xor_ln104_881_fu_600_p2 = (icmp_ln86_1840_fu_394_p2 ^ 1'd1);

assign xor_ln104_882_fu_986_p2 = (icmp_ln86_1841_reg_1483 ^ 1'd1);

assign xor_ln104_883_fu_618_p2 = (icmp_ln86_1842_fu_406_p2 ^ 1'd1);

assign xor_ln104_884_fu_636_p2 = (icmp_ln86_1843_fu_412_p2 ^ 1'd1);

assign xor_ln104_885_fu_1002_p2 = (icmp_ln86_1844_reg_1489 ^ 1'd1);

assign xor_ln104_886_fu_1018_p2 = (icmp_ln86_1845_reg_1495 ^ 1'd1);

assign xor_ln104_887_fu_654_p2 = (icmp_ln86_1846_fu_430_p2 ^ 1'd1);

assign xor_ln104_888_fu_666_p2 = (icmp_ln86_1847_fu_436_p2 ^ 1'd1);

assign xor_ln104_889_fu_678_p2 = (icmp_ln86_1848_fu_442_p2 ^ 1'd1);

assign xor_ln104_890_fu_690_p2 = (icmp_ln86_1849_fu_458_p2 ^ 1'd1);

assign xor_ln104_891_fu_1034_p2 = (icmp_ln86_1850_reg_1501 ^ 1'd1);

assign xor_ln104_892_fu_1044_p2 = (icmp_ln86_1851_reg_1507 ^ 1'd1);

assign xor_ln104_893_fu_1054_p2 = (icmp_ln86_1852_reg_1513 ^ 1'd1);

assign xor_ln104_894_fu_1064_p2 = (icmp_ln86_1853_reg_1519 ^ 1'd1);

assign xor_ln104_fu_976_p2 = (icmp_ln86_reg_1474 ^ 1'd1);

assign xor_ln117_fu_768_p2 = (1'd1 ^ and_ln102_2081_fu_696_p2);

assign zext_ln117_201_fu_800_p1 = select_ln117_1788_fu_792_p3;

assign zext_ln117_202_fu_854_p1 = select_ln117_1792_fu_846_p3;

assign zext_ln117_203_fu_964_p1 = select_ln117_1800_fu_956_p3;

assign zext_ln117_fu_774_p1 = xor_ln117_fu_768_p2;

endmodule //my_prj_decision_function_106
