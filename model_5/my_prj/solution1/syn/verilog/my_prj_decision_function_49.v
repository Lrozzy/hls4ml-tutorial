// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_49 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_3_val,
        x_4_val,
        x_6_val,
        x_9_val,
        x_10_val,
        x_11_val,
        x_13_val,
        x_14_val,
        x_15_val,
        x_17_val,
        x_18_val,
        x_21_val,
        x_23_val,
        x_24_val,
        x_30_val,
        x_32_val,
        x_34_val,
        x_39_val,
        x_46_val,
        x_47_val,
        x_50_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_3_val;
input  [17:0] x_4_val;
input  [17:0] x_6_val;
input  [17:0] x_9_val;
input  [17:0] x_10_val;
input  [17:0] x_11_val;
input  [17:0] x_13_val;
input  [17:0] x_14_val;
input  [17:0] x_15_val;
input  [17:0] x_17_val;
input  [17:0] x_18_val;
input  [17:0] x_21_val;
input  [17:0] x_23_val;
input  [17:0] x_24_val;
input  [17:0] x_30_val;
input  [17:0] x_32_val;
input  [17:0] x_34_val;
input  [17:0] x_39_val;
input  [17:0] x_46_val;
input  [17:0] x_47_val;
input  [17:0] x_50_val;
input  [17:0] x_52_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_420_p2;
reg   [0:0] icmp_ln86_reg_1496;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_1299_fu_432_p2;
reg   [0:0] icmp_ln86_1299_reg_1505;
wire   [0:0] icmp_ln86_1302_fu_450_p2;
reg   [0:0] icmp_ln86_1302_reg_1511;
wire   [0:0] icmp_ln86_1303_fu_456_p2;
reg   [0:0] icmp_ln86_1303_reg_1517;
wire   [0:0] icmp_ln86_1308_fu_486_p2;
reg   [0:0] icmp_ln86_1308_reg_1523;
wire   [0:0] icmp_ln86_1309_fu_492_p2;
reg   [0:0] icmp_ln86_1309_reg_1529;
wire   [0:0] icmp_ln86_1310_fu_498_p2;
reg   [0:0] icmp_ln86_1310_reg_1535;
wire   [0:0] icmp_ln86_1311_fu_504_p2;
reg   [0:0] icmp_ln86_1311_reg_1541;
wire   [0:0] icmp_ln86_1320_fu_568_p2;
reg   [0:0] icmp_ln86_1320_reg_1547;
wire   [0:0] icmp_ln86_1321_fu_574_p2;
reg   [0:0] icmp_ln86_1321_reg_1552;
wire   [0:0] icmp_ln86_1322_fu_580_p2;
reg   [0:0] icmp_ln86_1322_reg_1557;
wire   [0:0] icmp_ln86_1323_fu_586_p2;
reg   [0:0] icmp_ln86_1323_reg_1562;
wire   [0:0] icmp_ln86_1324_fu_592_p2;
reg   [0:0] icmp_ln86_1324_reg_1567;
wire   [0:0] icmp_ln86_1325_fu_598_p2;
reg   [0:0] icmp_ln86_1325_reg_1572;
wire   [0:0] icmp_ln86_1326_fu_604_p2;
reg   [0:0] icmp_ln86_1326_reg_1577;
wire   [0:0] icmp_ln86_1327_fu_610_p2;
reg   [0:0] icmp_ln86_1327_reg_1582;
wire   [4:0] select_ln117_1270_fu_990_p3;
reg   [4:0] select_ln117_1270_reg_1587;
wire    ap_block_pp0_stage0;
wire   [12:0] tmp_fu_528_p4;
wire   [0:0] icmp_ln86_1298_fu_426_p2;
wire   [0:0] xor_ln104_621_fu_622_p2;
wire   [0:0] icmp_ln86_1300_fu_438_p2;
wire   [0:0] and_ln102_fu_616_p2;
wire   [0:0] xor_ln104_623_fu_640_p2;
wire   [0:0] icmp_ln86_1301_fu_444_p2;
wire   [0:0] and_ln104_fu_628_p2;
wire   [0:0] xor_ln104_624_fu_658_p2;
wire   [0:0] icmp_ln86_1304_fu_462_p2;
wire   [0:0] and_ln102_1250_fu_634_p2;
wire   [0:0] icmp_ln86_1305_fu_468_p2;
wire   [0:0] and_ln104_252_fu_646_p2;
wire   [0:0] icmp_ln86_1306_fu_474_p2;
wire   [0:0] and_ln102_1251_fu_652_p2;
wire   [0:0] icmp_ln86_1307_fu_480_p2;
wire   [0:0] and_ln104_253_fu_664_p2;
wire   [0:0] icmp_ln86_1312_fu_510_p2;
wire   [0:0] and_ln102_1254_fu_670_p2;
wire   [0:0] icmp_ln86_1313_fu_516_p2;
wire   [0:0] xor_ln104_627_fu_676_p2;
wire   [0:0] and_ln102_1278_fu_724_p2;
wire   [0:0] icmp_ln86_1314_fu_522_p2;
wire   [0:0] and_ln102_1255_fu_682_p2;
wire   [0:0] icmp_ln86_1384_fu_538_p2;
wire   [0:0] xor_ln104_628_fu_688_p2;
wire   [0:0] and_ln102_1279_fu_742_p2;
wire   [0:0] icmp_ln86_1316_fu_544_p2;
wire   [0:0] and_ln102_1256_fu_694_p2;
wire   [0:0] icmp_ln86_1317_fu_550_p2;
wire   [0:0] xor_ln104_629_fu_700_p2;
wire   [0:0] and_ln102_1280_fu_760_p2;
wire   [0:0] icmp_ln86_1318_fu_556_p2;
wire   [0:0] and_ln102_1257_fu_706_p2;
wire   [0:0] icmp_ln86_1319_fu_562_p2;
wire   [0:0] xor_ln104_630_fu_712_p2;
wire   [0:0] and_ln102_1281_fu_778_p2;
wire   [0:0] and_ln102_1262_fu_718_p2;
wire   [0:0] xor_ln117_fu_790_p2;
wire   [0:0] and_ln102_1263_fu_730_p2;
wire   [1:0] zext_ln117_fu_796_p1;
wire   [0:0] or_ln117_fu_800_p2;
wire   [1:0] select_ln117_fu_806_p3;
wire   [1:0] select_ln117_1257_fu_814_p3;
wire   [0:0] and_ln102_1264_fu_736_p2;
wire   [2:0] zext_ln117_144_fu_822_p1;
wire   [0:0] or_ln117_1178_fu_826_p2;
wire   [2:0] select_ln117_1258_fu_832_p3;
wire   [0:0] or_ln117_1179_fu_840_p2;
wire   [0:0] and_ln102_1265_fu_748_p2;
wire   [2:0] select_ln117_1259_fu_846_p3;
wire   [0:0] or_ln117_1180_fu_854_p2;
wire   [2:0] select_ln117_1260_fu_860_p3;
wire   [2:0] select_ln117_1261_fu_868_p3;
wire   [0:0] and_ln102_1266_fu_754_p2;
wire   [3:0] zext_ln117_145_fu_876_p1;
wire   [0:0] or_ln117_1181_fu_880_p2;
wire   [3:0] select_ln117_1262_fu_886_p3;
wire   [0:0] or_ln117_1182_fu_894_p2;
wire   [0:0] and_ln102_1267_fu_766_p2;
wire   [3:0] select_ln117_1263_fu_900_p3;
wire   [0:0] or_ln117_1183_fu_908_p2;
wire   [3:0] select_ln117_1264_fu_914_p3;
wire   [0:0] or_ln117_1184_fu_922_p2;
wire   [0:0] and_ln102_1268_fu_772_p2;
wire   [3:0] select_ln117_1265_fu_928_p3;
wire   [0:0] or_ln117_1185_fu_936_p2;
wire   [3:0] select_ln117_1266_fu_942_p3;
wire   [0:0] or_ln117_1186_fu_950_p2;
wire   [0:0] and_ln102_1269_fu_784_p2;
wire   [3:0] select_ln117_1267_fu_956_p3;
wire   [0:0] or_ln117_1187_fu_964_p2;
wire   [3:0] select_ln117_1268_fu_970_p3;
wire   [3:0] select_ln117_1269_fu_978_p3;
wire   [4:0] zext_ln117_146_fu_986_p1;
wire   [0:0] xor_ln104_fu_998_p2;
wire   [0:0] xor_ln104_622_fu_1008_p2;
wire   [0:0] and_ln102_1249_fu_1003_p2;
wire   [0:0] xor_ln104_625_fu_1024_p2;
wire   [0:0] and_ln104_251_fu_1013_p2;
wire   [0:0] xor_ln104_626_fu_1040_p2;
wire   [0:0] and_ln102_1252_fu_1019_p2;
wire   [0:0] and_ln104_254_fu_1029_p2;
wire   [0:0] and_ln102_1253_fu_1035_p2;
wire   [0:0] and_ln104_255_fu_1045_p2;
wire   [0:0] and_ln102_1258_fu_1051_p2;
wire   [0:0] xor_ln104_631_fu_1056_p2;
wire   [0:0] and_ln102_1282_fu_1096_p2;
wire   [0:0] and_ln102_1259_fu_1061_p2;
wire   [0:0] xor_ln104_632_fu_1066_p2;
wire   [0:0] and_ln102_1283_fu_1112_p2;
wire   [0:0] and_ln102_1260_fu_1071_p2;
wire   [0:0] xor_ln104_633_fu_1076_p2;
wire   [0:0] and_ln102_1284_fu_1128_p2;
wire   [0:0] and_ln102_1261_fu_1081_p2;
wire   [0:0] xor_ln104_634_fu_1086_p2;
wire   [0:0] and_ln102_1285_fu_1144_p2;
wire   [0:0] and_ln102_1270_fu_1091_p2;
wire   [0:0] or_ln117_1188_fu_1155_p2;
wire   [0:0] or_ln117_1189_fu_1160_p2;
wire   [0:0] and_ln102_1271_fu_1101_p2;
wire   [4:0] select_ln117_1271_fu_1165_p3;
wire   [0:0] or_ln117_1190_fu_1172_p2;
wire   [4:0] select_ln117_1272_fu_1178_p3;
wire   [0:0] or_ln117_1191_fu_1186_p2;
wire   [0:0] and_ln102_1272_fu_1107_p2;
wire   [4:0] select_ln117_1273_fu_1191_p3;
wire   [0:0] or_ln117_1192_fu_1199_p2;
wire   [4:0] select_ln117_1274_fu_1205_p3;
wire   [0:0] or_ln117_1193_fu_1213_p2;
wire   [0:0] and_ln102_1273_fu_1117_p2;
wire   [4:0] select_ln117_1275_fu_1219_p3;
wire   [0:0] or_ln117_1194_fu_1227_p2;
wire   [4:0] select_ln117_1276_fu_1233_p3;
wire   [0:0] or_ln117_1195_fu_1241_p2;
wire   [0:0] and_ln102_1274_fu_1123_p2;
wire   [4:0] select_ln117_1277_fu_1246_p3;
wire   [0:0] or_ln117_1196_fu_1254_p2;
wire   [4:0] select_ln117_1278_fu_1260_p3;
wire   [0:0] or_ln117_1197_fu_1268_p2;
wire   [0:0] and_ln102_1275_fu_1133_p2;
wire   [4:0] select_ln117_1279_fu_1274_p3;
wire   [0:0] or_ln117_1198_fu_1282_p2;
wire   [4:0] select_ln117_1280_fu_1288_p3;
wire   [0:0] or_ln117_1199_fu_1296_p2;
wire   [0:0] and_ln102_1276_fu_1139_p2;
wire   [4:0] select_ln117_1281_fu_1302_p3;
wire   [0:0] or_ln117_1200_fu_1310_p2;
wire   [4:0] select_ln117_1282_fu_1316_p3;
wire   [0:0] or_ln117_1201_fu_1324_p2;
wire   [0:0] and_ln102_1277_fu_1149_p2;
wire   [4:0] select_ln117_1283_fu_1330_p3;
wire   [0:0] or_ln117_1202_fu_1338_p2;
wire   [4:0] select_ln117_1284_fu_1344_p3;
wire   [11:0] agg_result_fu_1360_p65;
wire   [4:0] agg_result_fu_1360_p66;
wire   [11:0] agg_result_fu_1360_p67;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1360_p1;
wire   [4:0] agg_result_fu_1360_p3;
wire   [4:0] agg_result_fu_1360_p5;
wire   [4:0] agg_result_fu_1360_p7;
wire   [4:0] agg_result_fu_1360_p9;
wire   [4:0] agg_result_fu_1360_p11;
wire   [4:0] agg_result_fu_1360_p13;
wire   [4:0] agg_result_fu_1360_p15;
wire   [4:0] agg_result_fu_1360_p17;
wire   [4:0] agg_result_fu_1360_p19;
wire   [4:0] agg_result_fu_1360_p21;
wire   [4:0] agg_result_fu_1360_p23;
wire   [4:0] agg_result_fu_1360_p25;
wire   [4:0] agg_result_fu_1360_p27;
wire   [4:0] agg_result_fu_1360_p29;
wire   [4:0] agg_result_fu_1360_p31;
wire  signed [4:0] agg_result_fu_1360_p33;
wire  signed [4:0] agg_result_fu_1360_p35;
wire  signed [4:0] agg_result_fu_1360_p37;
wire  signed [4:0] agg_result_fu_1360_p39;
wire  signed [4:0] agg_result_fu_1360_p41;
wire  signed [4:0] agg_result_fu_1360_p43;
wire  signed [4:0] agg_result_fu_1360_p45;
wire  signed [4:0] agg_result_fu_1360_p47;
wire  signed [4:0] agg_result_fu_1360_p49;
wire  signed [4:0] agg_result_fu_1360_p51;
wire  signed [4:0] agg_result_fu_1360_p53;
wire  signed [4:0] agg_result_fu_1360_p55;
wire  signed [4:0] agg_result_fu_1360_p57;
wire  signed [4:0] agg_result_fu_1360_p59;
wire  signed [4:0] agg_result_fu_1360_p61;
wire  signed [4:0] agg_result_fu_1360_p63;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_65_5_12_1_1_x21 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 12 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 12 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 12 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 12 ),
    .CASE31( 5'h1F ),
    .din31_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_65_5_12_1_1_x21_U1132(
    .din0(12'd4017),
    .din1(12'd287),
    .din2(12'd3978),
    .din3(12'd3623),
    .din4(12'd27),
    .din5(12'd4020),
    .din6(12'd151),
    .din7(12'd3961),
    .din8(12'd3947),
    .din9(12'd4081),
    .din10(12'd4036),
    .din11(12'd3843),
    .din12(12'd322),
    .din13(12'd83),
    .din14(12'd3234),
    .din15(12'd4069),
    .din16(12'd3743),
    .din17(12'd548),
    .din18(12'd180),
    .din19(12'd3113),
    .din20(12'd83),
    .din21(12'd3713),
    .din22(12'd673),
    .din23(12'd4090),
    .din24(12'd365),
    .din25(12'd134),
    .din26(12'd2770),
    .din27(12'd322),
    .din28(12'd59),
    .din29(12'd582),
    .din30(12'd4033),
    .din31(12'd3648),
    .def(agg_result_fu_1360_p65),
    .sel(agg_result_fu_1360_p66),
    .dout(agg_result_fu_1360_p67)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_1299_reg_1505 <= icmp_ln86_1299_fu_432_p2;
        icmp_ln86_1302_reg_1511 <= icmp_ln86_1302_fu_450_p2;
        icmp_ln86_1303_reg_1517 <= icmp_ln86_1303_fu_456_p2;
        icmp_ln86_1308_reg_1523 <= icmp_ln86_1308_fu_486_p2;
        icmp_ln86_1309_reg_1529 <= icmp_ln86_1309_fu_492_p2;
        icmp_ln86_1310_reg_1535 <= icmp_ln86_1310_fu_498_p2;
        icmp_ln86_1311_reg_1541 <= icmp_ln86_1311_fu_504_p2;
        icmp_ln86_1320_reg_1547 <= icmp_ln86_1320_fu_568_p2;
        icmp_ln86_1321_reg_1552 <= icmp_ln86_1321_fu_574_p2;
        icmp_ln86_1322_reg_1557 <= icmp_ln86_1322_fu_580_p2;
        icmp_ln86_1323_reg_1562 <= icmp_ln86_1323_fu_586_p2;
        icmp_ln86_1324_reg_1567 <= icmp_ln86_1324_fu_592_p2;
        icmp_ln86_1325_reg_1572 <= icmp_ln86_1325_fu_598_p2;
        icmp_ln86_1326_reg_1577 <= icmp_ln86_1326_fu_604_p2;
        icmp_ln86_1327_reg_1582 <= icmp_ln86_1327_fu_610_p2;
        icmp_ln86_reg_1496 <= icmp_ln86_fu_420_p2;
        select_ln117_1270_reg_1587 <= select_ln117_1270_fu_990_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1360_p65 = 'bx;

assign agg_result_fu_1360_p66 = ((or_ln117_1202_fu_1338_p2[0:0] == 1'b1) ? select_ln117_1284_fu_1344_p3 : 5'd31);

assign and_ln102_1249_fu_1003_p2 = (xor_ln104_fu_998_p2 & icmp_ln86_1299_reg_1505);

assign and_ln102_1250_fu_634_p2 = (icmp_ln86_1300_fu_438_p2 & and_ln102_fu_616_p2);

assign and_ln102_1251_fu_652_p2 = (icmp_ln86_1301_fu_444_p2 & and_ln104_fu_628_p2);

assign and_ln102_1252_fu_1019_p2 = (icmp_ln86_1302_reg_1511 & and_ln102_1249_fu_1003_p2);

assign and_ln102_1253_fu_1035_p2 = (icmp_ln86_1303_reg_1517 & and_ln104_251_fu_1013_p2);

assign and_ln102_1254_fu_670_p2 = (icmp_ln86_1304_fu_462_p2 & and_ln102_1250_fu_634_p2);

assign and_ln102_1255_fu_682_p2 = (icmp_ln86_1305_fu_468_p2 & and_ln104_252_fu_646_p2);

assign and_ln102_1256_fu_694_p2 = (icmp_ln86_1306_fu_474_p2 & and_ln102_1251_fu_652_p2);

assign and_ln102_1257_fu_706_p2 = (icmp_ln86_1307_fu_480_p2 & and_ln104_253_fu_664_p2);

assign and_ln102_1258_fu_1051_p2 = (icmp_ln86_1308_reg_1523 & and_ln102_1252_fu_1019_p2);

assign and_ln102_1259_fu_1061_p2 = (icmp_ln86_1309_reg_1529 & and_ln104_254_fu_1029_p2);

assign and_ln102_1260_fu_1071_p2 = (icmp_ln86_1310_reg_1535 & and_ln102_1253_fu_1035_p2);

assign and_ln102_1261_fu_1081_p2 = (icmp_ln86_1311_reg_1541 & and_ln104_255_fu_1045_p2);

assign and_ln102_1262_fu_718_p2 = (icmp_ln86_1312_fu_510_p2 & and_ln102_1254_fu_670_p2);

assign and_ln102_1263_fu_730_p2 = (and_ln102_1278_fu_724_p2 & and_ln102_1250_fu_634_p2);

assign and_ln102_1264_fu_736_p2 = (icmp_ln86_1314_fu_522_p2 & and_ln102_1255_fu_682_p2);

assign and_ln102_1265_fu_748_p2 = (and_ln104_252_fu_646_p2 & and_ln102_1279_fu_742_p2);

assign and_ln102_1266_fu_754_p2 = (icmp_ln86_1316_fu_544_p2 & and_ln102_1256_fu_694_p2);

assign and_ln102_1267_fu_766_p2 = (and_ln102_1280_fu_760_p2 & and_ln102_1251_fu_652_p2);

assign and_ln102_1268_fu_772_p2 = (icmp_ln86_1318_fu_556_p2 & and_ln102_1257_fu_706_p2);

assign and_ln102_1269_fu_784_p2 = (and_ln104_253_fu_664_p2 & and_ln102_1281_fu_778_p2);

assign and_ln102_1270_fu_1091_p2 = (icmp_ln86_1320_reg_1547 & and_ln102_1258_fu_1051_p2);

assign and_ln102_1271_fu_1101_p2 = (and_ln102_1282_fu_1096_p2 & and_ln102_1252_fu_1019_p2);

assign and_ln102_1272_fu_1107_p2 = (icmp_ln86_1322_reg_1557 & and_ln102_1259_fu_1061_p2);

assign and_ln102_1273_fu_1117_p2 = (and_ln104_254_fu_1029_p2 & and_ln102_1283_fu_1112_p2);

assign and_ln102_1274_fu_1123_p2 = (icmp_ln86_1324_reg_1567 & and_ln102_1260_fu_1071_p2);

assign and_ln102_1275_fu_1133_p2 = (and_ln102_1284_fu_1128_p2 & and_ln102_1253_fu_1035_p2);

assign and_ln102_1276_fu_1139_p2 = (icmp_ln86_1326_reg_1577 & and_ln102_1261_fu_1081_p2);

assign and_ln102_1277_fu_1149_p2 = (and_ln104_255_fu_1045_p2 & and_ln102_1285_fu_1144_p2);

assign and_ln102_1278_fu_724_p2 = (xor_ln104_627_fu_676_p2 & icmp_ln86_1313_fu_516_p2);

assign and_ln102_1279_fu_742_p2 = (xor_ln104_628_fu_688_p2 & icmp_ln86_1384_fu_538_p2);

assign and_ln102_1280_fu_760_p2 = (xor_ln104_629_fu_700_p2 & icmp_ln86_1317_fu_550_p2);

assign and_ln102_1281_fu_778_p2 = (xor_ln104_630_fu_712_p2 & icmp_ln86_1319_fu_562_p2);

assign and_ln102_1282_fu_1096_p2 = (xor_ln104_631_fu_1056_p2 & icmp_ln86_1321_reg_1552);

assign and_ln102_1283_fu_1112_p2 = (xor_ln104_632_fu_1066_p2 & icmp_ln86_1323_reg_1562);

assign and_ln102_1284_fu_1128_p2 = (xor_ln104_633_fu_1076_p2 & icmp_ln86_1325_reg_1572);

assign and_ln102_1285_fu_1144_p2 = (xor_ln104_634_fu_1086_p2 & icmp_ln86_1327_reg_1582);

assign and_ln102_fu_616_p2 = (icmp_ln86_fu_420_p2 & icmp_ln86_1298_fu_426_p2);

assign and_ln104_251_fu_1013_p2 = (xor_ln104_fu_998_p2 & xor_ln104_622_fu_1008_p2);

assign and_ln104_252_fu_646_p2 = (xor_ln104_623_fu_640_p2 & and_ln102_fu_616_p2);

assign and_ln104_253_fu_664_p2 = (xor_ln104_624_fu_658_p2 & and_ln104_fu_628_p2);

assign and_ln104_254_fu_1029_p2 = (xor_ln104_625_fu_1024_p2 & and_ln102_1249_fu_1003_p2);

assign and_ln104_255_fu_1045_p2 = (xor_ln104_626_fu_1040_p2 & and_ln104_251_fu_1013_p2);

assign and_ln104_fu_628_p2 = (xor_ln104_621_fu_622_p2 & icmp_ln86_fu_420_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1360_p67;

assign icmp_ln86_1298_fu_426_p2 = (($signed(x_24_val) < $signed(18'd322)) ? 1'b1 : 1'b0);

assign icmp_ln86_1299_fu_432_p2 = (($signed(x_1_val) < $signed(18'd49010)) ? 1'b1 : 1'b0);

assign icmp_ln86_1300_fu_438_p2 = (($signed(x_11_val) < $signed(18'd386)) ? 1'b1 : 1'b0);

assign icmp_ln86_1301_fu_444_p2 = (($signed(x_47_val) < $signed(18'd166154)) ? 1'b1 : 1'b0);

assign icmp_ln86_1302_fu_450_p2 = (($signed(x_11_val) < $signed(18'd447)) ? 1'b1 : 1'b0);

assign icmp_ln86_1303_fu_456_p2 = (($signed(x_1_val) < $signed(18'd179391)) ? 1'b1 : 1'b0);

assign icmp_ln86_1304_fu_462_p2 = (($signed(x_10_val) < $signed(18'd395)) ? 1'b1 : 1'b0);

assign icmp_ln86_1305_fu_468_p2 = (($signed(x_17_val) < $signed(18'd23)) ? 1'b1 : 1'b0);

assign icmp_ln86_1306_fu_474_p2 = (($signed(x_4_val) < $signed(18'd97564)) ? 1'b1 : 1'b0);

assign icmp_ln86_1307_fu_480_p2 = (($signed(x_50_val) < $signed(18'd187528)) ? 1'b1 : 1'b0);

assign icmp_ln86_1308_fu_486_p2 = (($signed(x_34_val) < $signed(18'd485)) ? 1'b1 : 1'b0);

assign icmp_ln86_1309_fu_492_p2 = (($signed(x_39_val) < $signed(18'd1512)) ? 1'b1 : 1'b0);

assign icmp_ln86_1310_fu_498_p2 = (($signed(x_6_val) < $signed(18'd66870)) ? 1'b1 : 1'b0);

assign icmp_ln86_1311_fu_504_p2 = (($signed(x_24_val) < $signed(18'd425)) ? 1'b1 : 1'b0);

assign icmp_ln86_1312_fu_510_p2 = (($signed(x_14_val) < $signed(18'd88)) ? 1'b1 : 1'b0);

assign icmp_ln86_1313_fu_516_p2 = (($signed(x_3_val) < $signed(18'd185281)) ? 1'b1 : 1'b0);

assign icmp_ln86_1314_fu_522_p2 = (($signed(x_32_val) < $signed(18'd890)) ? 1'b1 : 1'b0);

assign icmp_ln86_1316_fu_544_p2 = (($signed(x_23_val) < $signed(18'd31)) ? 1'b1 : 1'b0);

assign icmp_ln86_1317_fu_550_p2 = (($signed(x_1_val) < $signed(18'd214566)) ? 1'b1 : 1'b0);

assign icmp_ln86_1318_fu_556_p2 = (($signed(x_52_val) < $signed(18'd83457)) ? 1'b1 : 1'b0);

assign icmp_ln86_1319_fu_562_p2 = (($signed(x_21_val) < $signed(18'd223)) ? 1'b1 : 1'b0);

assign icmp_ln86_1320_fu_568_p2 = (($signed(x_30_val) < $signed(18'd10931)) ? 1'b1 : 1'b0);

assign icmp_ln86_1321_fu_574_p2 = (($signed(x_11_val) < $signed(18'd198)) ? 1'b1 : 1'b0);

assign icmp_ln86_1322_fu_580_p2 = (($signed(x_18_val) < $signed(18'd1729)) ? 1'b1 : 1'b0);

assign icmp_ln86_1323_fu_586_p2 = (($signed(x_13_val) < $signed(18'd438)) ? 1'b1 : 1'b0);

assign icmp_ln86_1324_fu_592_p2 = (($signed(x_24_val) < $signed(18'd347)) ? 1'b1 : 1'b0);

assign icmp_ln86_1325_fu_598_p2 = (($signed(x_6_val) < $signed(18'd75836)) ? 1'b1 : 1'b0);

assign icmp_ln86_1326_fu_604_p2 = (($signed(x_9_val) < $signed(18'd11491)) ? 1'b1 : 1'b0);

assign icmp_ln86_1327_fu_610_p2 = (($signed(x_46_val) < $signed(18'd306)) ? 1'b1 : 1'b0);

assign icmp_ln86_1384_fu_538_p2 = (($signed(tmp_fu_528_p4) < $signed(13'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_420_p2 = (($signed(x_17_val) < $signed(18'd42)) ? 1'b1 : 1'b0);

assign or_ln117_1178_fu_826_p2 = (and_ln102_1264_fu_736_p2 | and_ln102_1250_fu_634_p2);

assign or_ln117_1179_fu_840_p2 = (and_ln102_1255_fu_682_p2 | and_ln102_1250_fu_634_p2);

assign or_ln117_1180_fu_854_p2 = (or_ln117_1179_fu_840_p2 | and_ln102_1265_fu_748_p2);

assign or_ln117_1181_fu_880_p2 = (and_ln102_fu_616_p2 | and_ln102_1266_fu_754_p2);

assign or_ln117_1182_fu_894_p2 = (and_ln102_fu_616_p2 | and_ln102_1256_fu_694_p2);

assign or_ln117_1183_fu_908_p2 = (or_ln117_1182_fu_894_p2 | and_ln102_1267_fu_766_p2);

assign or_ln117_1184_fu_922_p2 = (and_ln102_fu_616_p2 | and_ln102_1251_fu_652_p2);

assign or_ln117_1185_fu_936_p2 = (or_ln117_1184_fu_922_p2 | and_ln102_1268_fu_772_p2);

assign or_ln117_1186_fu_950_p2 = (or_ln117_1184_fu_922_p2 | and_ln102_1257_fu_706_p2);

assign or_ln117_1187_fu_964_p2 = (or_ln117_1186_fu_950_p2 | and_ln102_1269_fu_784_p2);

assign or_ln117_1188_fu_1155_p2 = (icmp_ln86_reg_1496 | and_ln102_1270_fu_1091_p2);

assign or_ln117_1189_fu_1160_p2 = (icmp_ln86_reg_1496 | and_ln102_1258_fu_1051_p2);

assign or_ln117_1190_fu_1172_p2 = (or_ln117_1189_fu_1160_p2 | and_ln102_1271_fu_1101_p2);

assign or_ln117_1191_fu_1186_p2 = (icmp_ln86_reg_1496 | and_ln102_1252_fu_1019_p2);

assign or_ln117_1192_fu_1199_p2 = (or_ln117_1191_fu_1186_p2 | and_ln102_1272_fu_1107_p2);

assign or_ln117_1193_fu_1213_p2 = (or_ln117_1191_fu_1186_p2 | and_ln102_1259_fu_1061_p2);

assign or_ln117_1194_fu_1227_p2 = (or_ln117_1193_fu_1213_p2 | and_ln102_1273_fu_1117_p2);

assign or_ln117_1195_fu_1241_p2 = (icmp_ln86_reg_1496 | and_ln102_1249_fu_1003_p2);

assign or_ln117_1196_fu_1254_p2 = (or_ln117_1195_fu_1241_p2 | and_ln102_1274_fu_1123_p2);

assign or_ln117_1197_fu_1268_p2 = (or_ln117_1195_fu_1241_p2 | and_ln102_1260_fu_1071_p2);

assign or_ln117_1198_fu_1282_p2 = (or_ln117_1197_fu_1268_p2 | and_ln102_1275_fu_1133_p2);

assign or_ln117_1199_fu_1296_p2 = (or_ln117_1195_fu_1241_p2 | and_ln102_1253_fu_1035_p2);

assign or_ln117_1200_fu_1310_p2 = (or_ln117_1199_fu_1296_p2 | and_ln102_1276_fu_1139_p2);

assign or_ln117_1201_fu_1324_p2 = (or_ln117_1199_fu_1296_p2 | and_ln102_1261_fu_1081_p2);

assign or_ln117_1202_fu_1338_p2 = (or_ln117_1201_fu_1324_p2 | and_ln102_1277_fu_1149_p2);

assign or_ln117_fu_800_p2 = (and_ln102_1263_fu_730_p2 | and_ln102_1254_fu_670_p2);

assign select_ln117_1257_fu_814_p3 = ((or_ln117_fu_800_p2[0:0] == 1'b1) ? select_ln117_fu_806_p3 : 2'd3);

assign select_ln117_1258_fu_832_p3 = ((and_ln102_1250_fu_634_p2[0:0] == 1'b1) ? zext_ln117_144_fu_822_p1 : 3'd4);

assign select_ln117_1259_fu_846_p3 = ((or_ln117_1178_fu_826_p2[0:0] == 1'b1) ? select_ln117_1258_fu_832_p3 : 3'd5);

assign select_ln117_1260_fu_860_p3 = ((or_ln117_1179_fu_840_p2[0:0] == 1'b1) ? select_ln117_1259_fu_846_p3 : 3'd6);

assign select_ln117_1261_fu_868_p3 = ((or_ln117_1180_fu_854_p2[0:0] == 1'b1) ? select_ln117_1260_fu_860_p3 : 3'd7);

assign select_ln117_1262_fu_886_p3 = ((and_ln102_fu_616_p2[0:0] == 1'b1) ? zext_ln117_145_fu_876_p1 : 4'd8);

assign select_ln117_1263_fu_900_p3 = ((or_ln117_1181_fu_880_p2[0:0] == 1'b1) ? select_ln117_1262_fu_886_p3 : 4'd9);

assign select_ln117_1264_fu_914_p3 = ((or_ln117_1182_fu_894_p2[0:0] == 1'b1) ? select_ln117_1263_fu_900_p3 : 4'd10);

assign select_ln117_1265_fu_928_p3 = ((or_ln117_1183_fu_908_p2[0:0] == 1'b1) ? select_ln117_1264_fu_914_p3 : 4'd11);

assign select_ln117_1266_fu_942_p3 = ((or_ln117_1184_fu_922_p2[0:0] == 1'b1) ? select_ln117_1265_fu_928_p3 : 4'd12);

assign select_ln117_1267_fu_956_p3 = ((or_ln117_1185_fu_936_p2[0:0] == 1'b1) ? select_ln117_1266_fu_942_p3 : 4'd13);

assign select_ln117_1268_fu_970_p3 = ((or_ln117_1186_fu_950_p2[0:0] == 1'b1) ? select_ln117_1267_fu_956_p3 : 4'd14);

assign select_ln117_1269_fu_978_p3 = ((or_ln117_1187_fu_964_p2[0:0] == 1'b1) ? select_ln117_1268_fu_970_p3 : 4'd15);

assign select_ln117_1270_fu_990_p3 = ((icmp_ln86_fu_420_p2[0:0] == 1'b1) ? zext_ln117_146_fu_986_p1 : 5'd16);

assign select_ln117_1271_fu_1165_p3 = ((or_ln117_1188_fu_1155_p2[0:0] == 1'b1) ? select_ln117_1270_reg_1587 : 5'd17);

assign select_ln117_1272_fu_1178_p3 = ((or_ln117_1189_fu_1160_p2[0:0] == 1'b1) ? select_ln117_1271_fu_1165_p3 : 5'd18);

assign select_ln117_1273_fu_1191_p3 = ((or_ln117_1190_fu_1172_p2[0:0] == 1'b1) ? select_ln117_1272_fu_1178_p3 : 5'd19);

assign select_ln117_1274_fu_1205_p3 = ((or_ln117_1191_fu_1186_p2[0:0] == 1'b1) ? select_ln117_1273_fu_1191_p3 : 5'd20);

assign select_ln117_1275_fu_1219_p3 = ((or_ln117_1192_fu_1199_p2[0:0] == 1'b1) ? select_ln117_1274_fu_1205_p3 : 5'd21);

assign select_ln117_1276_fu_1233_p3 = ((or_ln117_1193_fu_1213_p2[0:0] == 1'b1) ? select_ln117_1275_fu_1219_p3 : 5'd22);

assign select_ln117_1277_fu_1246_p3 = ((or_ln117_1194_fu_1227_p2[0:0] == 1'b1) ? select_ln117_1276_fu_1233_p3 : 5'd23);

assign select_ln117_1278_fu_1260_p3 = ((or_ln117_1195_fu_1241_p2[0:0] == 1'b1) ? select_ln117_1277_fu_1246_p3 : 5'd24);

assign select_ln117_1279_fu_1274_p3 = ((or_ln117_1196_fu_1254_p2[0:0] == 1'b1) ? select_ln117_1278_fu_1260_p3 : 5'd25);

assign select_ln117_1280_fu_1288_p3 = ((or_ln117_1197_fu_1268_p2[0:0] == 1'b1) ? select_ln117_1279_fu_1274_p3 : 5'd26);

assign select_ln117_1281_fu_1302_p3 = ((or_ln117_1198_fu_1282_p2[0:0] == 1'b1) ? select_ln117_1280_fu_1288_p3 : 5'd27);

assign select_ln117_1282_fu_1316_p3 = ((or_ln117_1199_fu_1296_p2[0:0] == 1'b1) ? select_ln117_1281_fu_1302_p3 : 5'd28);

assign select_ln117_1283_fu_1330_p3 = ((or_ln117_1200_fu_1310_p2[0:0] == 1'b1) ? select_ln117_1282_fu_1316_p3 : 5'd29);

assign select_ln117_1284_fu_1344_p3 = ((or_ln117_1201_fu_1324_p2[0:0] == 1'b1) ? select_ln117_1283_fu_1330_p3 : 5'd30);

assign select_ln117_fu_806_p3 = ((and_ln102_1254_fu_670_p2[0:0] == 1'b1) ? zext_ln117_fu_796_p1 : 2'd2);

assign tmp_fu_528_p4 = {{x_15_val[17:5]}};

assign xor_ln104_621_fu_622_p2 = (icmp_ln86_1298_fu_426_p2 ^ 1'd1);

assign xor_ln104_622_fu_1008_p2 = (icmp_ln86_1299_reg_1505 ^ 1'd1);

assign xor_ln104_623_fu_640_p2 = (icmp_ln86_1300_fu_438_p2 ^ 1'd1);

assign xor_ln104_624_fu_658_p2 = (icmp_ln86_1301_fu_444_p2 ^ 1'd1);

assign xor_ln104_625_fu_1024_p2 = (icmp_ln86_1302_reg_1511 ^ 1'd1);

assign xor_ln104_626_fu_1040_p2 = (icmp_ln86_1303_reg_1517 ^ 1'd1);

assign xor_ln104_627_fu_676_p2 = (icmp_ln86_1304_fu_462_p2 ^ 1'd1);

assign xor_ln104_628_fu_688_p2 = (icmp_ln86_1305_fu_468_p2 ^ 1'd1);

assign xor_ln104_629_fu_700_p2 = (icmp_ln86_1306_fu_474_p2 ^ 1'd1);

assign xor_ln104_630_fu_712_p2 = (icmp_ln86_1307_fu_480_p2 ^ 1'd1);

assign xor_ln104_631_fu_1056_p2 = (icmp_ln86_1308_reg_1523 ^ 1'd1);

assign xor_ln104_632_fu_1066_p2 = (icmp_ln86_1309_reg_1529 ^ 1'd1);

assign xor_ln104_633_fu_1076_p2 = (icmp_ln86_1310_reg_1535 ^ 1'd1);

assign xor_ln104_634_fu_1086_p2 = (icmp_ln86_1311_reg_1541 ^ 1'd1);

assign xor_ln104_fu_998_p2 = (icmp_ln86_reg_1496 ^ 1'd1);

assign xor_ln117_fu_790_p2 = (1'd1 ^ and_ln102_1262_fu_718_p2);

assign zext_ln117_144_fu_822_p1 = select_ln117_1257_fu_814_p3;

assign zext_ln117_145_fu_876_p1 = select_ln117_1261_fu_868_p3;

assign zext_ln117_146_fu_986_p1 = select_ln117_1269_fu_978_p3;

assign zext_ln117_fu_796_p1 = xor_ln117_fu_790_p2;

endmodule //my_prj_decision_function_49
