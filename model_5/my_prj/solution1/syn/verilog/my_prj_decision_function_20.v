// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_20 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_2_val,
        x_5_val,
        x_9_val,
        x_10_val,
        x_12_val,
        x_14_val,
        x_15_val,
        x_16_val,
        x_17_val,
        x_18_val,
        x_23_val,
        x_26_val,
        x_28_val,
        x_42_val,
        x_44_val,
        x_47_val,
        x_49_val,
        x_50_val,
        x_51_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_2_val;
input  [17:0] x_5_val;
input  [17:0] x_9_val;
input  [17:0] x_10_val;
input  [17:0] x_12_val;
input  [17:0] x_14_val;
input  [17:0] x_15_val;
input  [17:0] x_16_val;
input  [17:0] x_17_val;
input  [17:0] x_18_val;
input  [17:0] x_23_val;
input  [17:0] x_26_val;
input  [17:0] x_28_val;
input  [17:0] x_42_val;
input  [17:0] x_44_val;
input  [17:0] x_47_val;
input  [17:0] x_49_val;
input  [17:0] x_50_val;
input  [17:0] x_51_val;
input  [17:0] x_52_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_519_fu_428_p2;
reg   [0:0] icmp_ln86_519_reg_1439;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_523_fu_452_p2;
reg   [0:0] icmp_ln86_523_reg_1445;
wire   [0:0] icmp_ln86_526_fu_470_p2;
reg   [0:0] icmp_ln86_526_reg_1451;
wire   [0:0] icmp_ln86_527_fu_476_p2;
reg   [0:0] icmp_ln86_527_reg_1457;
wire   [0:0] icmp_ln86_534_fu_518_p2;
reg   [0:0] icmp_ln86_534_reg_1463;
wire   [0:0] icmp_ln86_535_fu_524_p2;
reg   [0:0] icmp_ln86_535_reg_1468;
wire   [0:0] icmp_ln86_536_fu_530_p2;
reg   [0:0] icmp_ln86_536_reg_1473;
wire   [0:0] icmp_ln86_537_fu_536_p2;
reg   [0:0] icmp_ln86_537_reg_1478;
wire   [0:0] icmp_ln86_538_fu_542_p2;
reg   [0:0] icmp_ln86_538_reg_1483;
wire   [0:0] icmp_ln86_539_fu_548_p2;
reg   [0:0] icmp_ln86_539_reg_1488;
wire   [0:0] icmp_ln86_540_fu_554_p2;
reg   [0:0] icmp_ln86_540_reg_1493;
wire   [0:0] icmp_ln86_541_fu_560_p2;
reg   [0:0] icmp_ln86_541_reg_1498;
wire   [0:0] and_ln104_101_fu_602_p2;
reg   [0:0] and_ln104_101_reg_1503;
wire   [0:0] and_ln104_103_fu_638_p2;
reg   [0:0] and_ln104_103_reg_1510;
wire   [0:0] and_ln102_503_fu_698_p2;
reg   [0:0] and_ln102_503_reg_1516;
wire   [0:0] and_ln102_504_fu_716_p2;
reg   [0:0] and_ln102_504_reg_1522;
wire   [0:0] or_ln117_489_fu_972_p2;
reg   [0:0] or_ln117_489_reg_1528;
wire   [3:0] select_ln117_511_fu_986_p3;
reg   [3:0] select_ln117_511_reg_1534;
wire   [0:0] or_ln117_493_fu_994_p2;
reg   [0:0] or_ln117_493_reg_1539;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln86_fu_392_p2;
wire   [0:0] icmp_ln86_514_fu_398_p2;
wire   [0:0] xor_ln104_248_fu_578_p2;
wire   [0:0] icmp_ln86_515_fu_404_p2;
wire   [0:0] xor_ln104_fu_566_p2;
wire   [0:0] xor_ln104_249_fu_596_p2;
wire   [0:0] icmp_ln86_516_fu_410_p2;
wire   [0:0] and_ln102_fu_572_p2;
wire   [0:0] xor_ln104_250_fu_614_p2;
wire   [0:0] icmp_ln86_517_fu_416_p2;
wire   [0:0] and_ln104_fu_584_p2;
wire   [0:0] xor_ln104_251_fu_632_p2;
wire   [0:0] icmp_ln86_518_fu_422_p2;
wire   [0:0] and_ln102_494_fu_590_p2;
wire   [0:0] xor_ln104_252_fu_650_p2;
wire   [0:0] icmp_ln86_520_fu_434_p2;
wire   [0:0] and_ln102_495_fu_608_p2;
wire   [0:0] icmp_ln86_521_fu_440_p2;
wire   [0:0] and_ln104_102_fu_620_p2;
wire   [0:0] icmp_ln86_522_fu_446_p2;
wire   [0:0] and_ln102_496_fu_626_p2;
wire   [0:0] icmp_ln86_524_fu_458_p2;
wire   [0:0] and_ln102_497_fu_644_p2;
wire   [0:0] xor_ln104_258_fu_704_p2;
wire   [0:0] icmp_ln86_525_fu_464_p2;
wire   [0:0] and_ln104_104_fu_656_p2;
wire   [0:0] xor_ln104_259_fu_722_p2;
wire   [0:0] icmp_ln86_528_fu_482_p2;
wire   [0:0] and_ln102_499_fu_662_p2;
wire   [0:0] icmp_ln86_529_fu_488_p2;
wire   [0:0] xor_ln104_254_fu_668_p2;
wire   [0:0] and_ln102_521_fu_740_p2;
wire   [0:0] icmp_ln86_530_fu_494_p2;
wire   [0:0] and_ln102_500_fu_674_p2;
wire   [0:0] icmp_ln86_531_fu_500_p2;
wire   [0:0] xor_ln104_255_fu_680_p2;
wire   [0:0] and_ln102_522_fu_758_p2;
wire   [0:0] icmp_ln86_532_fu_506_p2;
wire   [0:0] and_ln102_501_fu_686_p2;
wire   [0:0] icmp_ln86_533_fu_512_p2;
wire   [0:0] xor_ln104_256_fu_692_p2;
wire   [0:0] and_ln102_523_fu_776_p2;
wire   [0:0] and_ln104_106_fu_710_p2;
wire   [0:0] and_ln104_107_fu_728_p2;
wire   [0:0] xor_ln117_fu_794_p2;
wire   [0:0] or_ln117_506_fu_800_p2;
wire   [0:0] or_ln117_fu_788_p2;
wire   [0:0] and_ln102_507_fu_734_p2;
wire   [1:0] zext_ln117_fu_806_p1;
wire   [0:0] or_ln117_478_fu_810_p2;
wire   [1:0] select_ln117_fu_816_p3;
wire   [1:0] select_ln117_500_fu_830_p3;
wire   [0:0] or_ln117_479_fu_824_p2;
wire   [0:0] and_ln102_508_fu_746_p2;
wire   [2:0] zext_ln117_57_fu_838_p1;
wire   [0:0] or_ln117_480_fu_842_p2;
wire   [2:0] select_ln117_501_fu_848_p3;
wire   [0:0] or_ln117_481_fu_856_p2;
wire   [0:0] and_ln102_509_fu_752_p2;
wire   [2:0] select_ln117_502_fu_862_p3;
wire   [0:0] or_ln117_482_fu_870_p2;
wire   [2:0] select_ln117_503_fu_876_p3;
wire   [2:0] select_ln117_504_fu_890_p3;
wire   [0:0] or_ln117_483_fu_884_p2;
wire   [0:0] and_ln102_510_fu_764_p2;
wire   [3:0] zext_ln117_58_fu_898_p1;
wire   [0:0] or_ln117_484_fu_902_p2;
wire   [3:0] select_ln117_505_fu_908_p3;
wire   [0:0] or_ln117_485_fu_916_p2;
wire   [0:0] and_ln102_511_fu_770_p2;
wire   [3:0] select_ln117_506_fu_922_p3;
wire   [0:0] or_ln117_486_fu_930_p2;
wire   [3:0] select_ln117_507_fu_936_p3;
wire   [0:0] or_ln117_487_fu_944_p2;
wire   [0:0] and_ln102_512_fu_782_p2;
wire   [3:0] select_ln117_508_fu_950_p3;
wire   [0:0] or_ln117_488_fu_958_p2;
wire   [3:0] select_ln117_509_fu_964_p3;
wire   [3:0] select_ln117_510_fu_978_p3;
wire   [0:0] xor_ln104_253_fu_1004_p2;
wire   [0:0] and_ln102_498_fu_1000_p2;
wire   [0:0] and_ln104_105_fu_1009_p2;
wire   [0:0] and_ln102_502_fu_1014_p2;
wire   [0:0] xor_ln104_257_fu_1018_p2;
wire   [0:0] and_ln102_524_fu_1048_p2;
wire   [0:0] and_ln102_505_fu_1023_p2;
wire   [0:0] xor_ln104_260_fu_1028_p2;
wire   [0:0] and_ln102_525_fu_1071_p2;
wire   [0:0] and_ln102_506_fu_1033_p2;
wire   [0:0] xor_ln104_261_fu_1038_p2;
wire   [0:0] and_ln102_526_fu_1087_p2;
wire   [0:0] and_ln102_513_fu_1043_p2;
wire   [0:0] or_ln117_490_fu_1098_p2;
wire   [3:0] select_ln117_512_fu_1108_p3;
wire   [0:0] or_ln117_491_fu_1103_p2;
wire   [0:0] and_ln102_514_fu_1053_p2;
wire   [4:0] zext_ln117_59_fu_1115_p1;
wire   [0:0] or_ln117_492_fu_1119_p2;
wire   [4:0] select_ln117_513_fu_1125_p3;
wire   [0:0] and_ln102_515_fu_1058_p2;
wire   [4:0] select_ln117_514_fu_1133_p3;
wire   [0:0] or_ln117_494_fu_1141_p2;
wire   [4:0] select_ln117_515_fu_1146_p3;
wire   [0:0] or_ln117_495_fu_1153_p2;
wire   [0:0] and_ln102_516_fu_1062_p2;
wire   [4:0] select_ln117_516_fu_1157_p3;
wire   [0:0] or_ln117_496_fu_1165_p2;
wire   [4:0] select_ln117_517_fu_1171_p3;
wire   [0:0] or_ln117_497_fu_1179_p2;
wire   [0:0] and_ln102_517_fu_1066_p2;
wire   [4:0] select_ln117_518_fu_1184_p3;
wire   [0:0] or_ln117_498_fu_1192_p2;
wire   [4:0] select_ln117_519_fu_1198_p3;
wire   [0:0] or_ln117_499_fu_1206_p2;
wire   [0:0] and_ln102_518_fu_1076_p2;
wire   [4:0] select_ln117_520_fu_1212_p3;
wire   [0:0] or_ln117_500_fu_1220_p2;
wire   [4:0] select_ln117_521_fu_1226_p3;
wire   [0:0] or_ln117_501_fu_1234_p2;
wire   [0:0] and_ln102_519_fu_1082_p2;
wire   [4:0] select_ln117_522_fu_1240_p3;
wire   [0:0] or_ln117_502_fu_1248_p2;
wire   [4:0] select_ln117_523_fu_1254_p3;
wire   [0:0] or_ln117_503_fu_1262_p2;
wire   [0:0] and_ln102_520_fu_1092_p2;
wire   [4:0] select_ln117_524_fu_1268_p3;
wire   [0:0] or_ln117_504_fu_1276_p2;
wire   [4:0] select_ln117_525_fu_1282_p3;
wire   [11:0] tmp_fu_1303_p61;
wire   [4:0] tmp_fu_1303_p62;
wire   [0:0] or_ln117_505_fu_1290_p2;
wire   [11:0] tmp_fu_1303_p63;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] tmp_fu_1303_p1;
wire   [4:0] tmp_fu_1303_p3;
wire   [4:0] tmp_fu_1303_p5;
wire   [4:0] tmp_fu_1303_p7;
wire   [4:0] tmp_fu_1303_p9;
wire   [4:0] tmp_fu_1303_p11;
wire   [4:0] tmp_fu_1303_p13;
wire   [4:0] tmp_fu_1303_p15;
wire   [4:0] tmp_fu_1303_p17;
wire   [4:0] tmp_fu_1303_p19;
wire   [4:0] tmp_fu_1303_p21;
wire   [4:0] tmp_fu_1303_p23;
wire   [4:0] tmp_fu_1303_p25;
wire   [4:0] tmp_fu_1303_p27;
wire   [4:0] tmp_fu_1303_p29;
wire   [4:0] tmp_fu_1303_p31;
wire  signed [4:0] tmp_fu_1303_p33;
wire  signed [4:0] tmp_fu_1303_p35;
wire  signed [4:0] tmp_fu_1303_p37;
wire  signed [4:0] tmp_fu_1303_p39;
wire  signed [4:0] tmp_fu_1303_p41;
wire  signed [4:0] tmp_fu_1303_p43;
wire  signed [4:0] tmp_fu_1303_p45;
wire  signed [4:0] tmp_fu_1303_p47;
wire  signed [4:0] tmp_fu_1303_p49;
wire  signed [4:0] tmp_fu_1303_p51;
wire  signed [4:0] tmp_fu_1303_p53;
wire  signed [4:0] tmp_fu_1303_p55;
wire  signed [4:0] tmp_fu_1303_p57;
wire  signed [4:0] tmp_fu_1303_p59;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_61_5_12_1_1_x0 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 12 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 12 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_61_5_12_1_1_x0_U1701(
    .din0(12'd1410),
    .din1(12'd3167),
    .din2(12'd4050),
    .din3(12'd3879),
    .din4(12'd4088),
    .din5(12'd108),
    .din6(12'd13),
    .din7(12'd3340),
    .din8(12'd195),
    .din9(12'd20),
    .din10(12'd712),
    .din11(12'd4009),
    .din12(12'd184),
    .din13(12'd3847),
    .din14(12'd7),
    .din15(12'd242),
    .din16(12'd3540),
    .din17(12'd4057),
    .din18(12'd618),
    .din19(12'd96),
    .din20(12'd3901),
    .din21(12'd646),
    .din22(12'd3632),
    .din23(12'd439),
    .din24(12'd3138),
    .din25(12'd178),
    .din26(12'd61),
    .din27(12'd2632),
    .din28(12'd223),
    .din29(12'd3861),
    .def(tmp_fu_1303_p61),
    .sel(tmp_fu_1303_p62),
    .dout(tmp_fu_1303_p63)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln102_503_reg_1516 <= and_ln102_503_fu_698_p2;
        and_ln102_504_reg_1522 <= and_ln102_504_fu_716_p2;
        and_ln104_101_reg_1503 <= and_ln104_101_fu_602_p2;
        and_ln104_103_reg_1510 <= and_ln104_103_fu_638_p2;
        icmp_ln86_519_reg_1439 <= icmp_ln86_519_fu_428_p2;
        icmp_ln86_523_reg_1445 <= icmp_ln86_523_fu_452_p2;
        icmp_ln86_526_reg_1451 <= icmp_ln86_526_fu_470_p2;
        icmp_ln86_527_reg_1457 <= icmp_ln86_527_fu_476_p2;
        icmp_ln86_534_reg_1463 <= icmp_ln86_534_fu_518_p2;
        icmp_ln86_535_reg_1468 <= icmp_ln86_535_fu_524_p2;
        icmp_ln86_536_reg_1473 <= icmp_ln86_536_fu_530_p2;
        icmp_ln86_537_reg_1478 <= icmp_ln86_537_fu_536_p2;
        icmp_ln86_538_reg_1483 <= icmp_ln86_538_fu_542_p2;
        icmp_ln86_539_reg_1488 <= icmp_ln86_539_fu_548_p2;
        icmp_ln86_540_reg_1493 <= icmp_ln86_540_fu_554_p2;
        icmp_ln86_541_reg_1498 <= icmp_ln86_541_fu_560_p2;
        or_ln117_489_reg_1528 <= or_ln117_489_fu_972_p2;
        or_ln117_493_reg_1539 <= or_ln117_493_fu_994_p2;
        select_ln117_511_reg_1534 <= select_ln117_511_fu_986_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln102_494_fu_590_p2 = (xor_ln104_fu_566_p2 & icmp_ln86_515_fu_404_p2);

assign and_ln102_495_fu_608_p2 = (icmp_ln86_516_fu_410_p2 & and_ln102_fu_572_p2);

assign and_ln102_496_fu_626_p2 = (icmp_ln86_517_fu_416_p2 & and_ln104_fu_584_p2);

assign and_ln102_497_fu_644_p2 = (icmp_ln86_518_fu_422_p2 & and_ln102_494_fu_590_p2);

assign and_ln102_498_fu_1000_p2 = (icmp_ln86_519_reg_1439 & and_ln104_101_reg_1503);

assign and_ln102_499_fu_662_p2 = (icmp_ln86_520_fu_434_p2 & and_ln102_495_fu_608_p2);

assign and_ln102_500_fu_674_p2 = (icmp_ln86_521_fu_440_p2 & and_ln104_102_fu_620_p2);

assign and_ln102_501_fu_686_p2 = (icmp_ln86_522_fu_446_p2 & and_ln102_496_fu_626_p2);

assign and_ln102_502_fu_1014_p2 = (icmp_ln86_523_reg_1445 & and_ln104_103_reg_1510);

assign and_ln102_503_fu_698_p2 = (icmp_ln86_524_fu_458_p2 & and_ln102_497_fu_644_p2);

assign and_ln102_504_fu_716_p2 = (icmp_ln86_525_fu_464_p2 & and_ln104_104_fu_656_p2);

assign and_ln102_505_fu_1023_p2 = (icmp_ln86_526_reg_1451 & and_ln102_498_fu_1000_p2);

assign and_ln102_506_fu_1033_p2 = (icmp_ln86_527_reg_1457 & and_ln104_105_fu_1009_p2);

assign and_ln102_507_fu_734_p2 = (icmp_ln86_528_fu_482_p2 & and_ln102_499_fu_662_p2);

assign and_ln102_508_fu_746_p2 = (and_ln102_521_fu_740_p2 & and_ln102_495_fu_608_p2);

assign and_ln102_509_fu_752_p2 = (icmp_ln86_530_fu_494_p2 & and_ln102_500_fu_674_p2);

assign and_ln102_510_fu_764_p2 = (and_ln104_102_fu_620_p2 & and_ln102_522_fu_758_p2);

assign and_ln102_511_fu_770_p2 = (icmp_ln86_532_fu_506_p2 & and_ln102_501_fu_686_p2);

assign and_ln102_512_fu_782_p2 = (and_ln102_523_fu_776_p2 & and_ln102_496_fu_626_p2);

assign and_ln102_513_fu_1043_p2 = (icmp_ln86_534_reg_1463 & and_ln102_502_fu_1014_p2);

assign and_ln102_514_fu_1053_p2 = (and_ln104_103_reg_1510 & and_ln102_524_fu_1048_p2);

assign and_ln102_515_fu_1058_p2 = (icmp_ln86_536_reg_1473 & and_ln102_503_reg_1516);

assign and_ln102_516_fu_1062_p2 = (icmp_ln86_537_reg_1478 & and_ln102_504_reg_1522);

assign and_ln102_517_fu_1066_p2 = (icmp_ln86_538_reg_1483 & and_ln102_505_fu_1023_p2);

assign and_ln102_518_fu_1076_p2 = (and_ln102_525_fu_1071_p2 & and_ln102_498_fu_1000_p2);

assign and_ln102_519_fu_1082_p2 = (icmp_ln86_540_reg_1493 & and_ln102_506_fu_1033_p2);

assign and_ln102_520_fu_1092_p2 = (and_ln104_105_fu_1009_p2 & and_ln102_526_fu_1087_p2);

assign and_ln102_521_fu_740_p2 = (xor_ln104_254_fu_668_p2 & icmp_ln86_529_fu_488_p2);

assign and_ln102_522_fu_758_p2 = (xor_ln104_255_fu_680_p2 & icmp_ln86_531_fu_500_p2);

assign and_ln102_523_fu_776_p2 = (xor_ln104_256_fu_692_p2 & icmp_ln86_533_fu_512_p2);

assign and_ln102_524_fu_1048_p2 = (xor_ln104_257_fu_1018_p2 & icmp_ln86_535_reg_1468);

assign and_ln102_525_fu_1071_p2 = (xor_ln104_260_fu_1028_p2 & icmp_ln86_539_reg_1488);

assign and_ln102_526_fu_1087_p2 = (xor_ln104_261_fu_1038_p2 & icmp_ln86_541_reg_1498);

assign and_ln102_fu_572_p2 = (icmp_ln86_fu_392_p2 & icmp_ln86_514_fu_398_p2);

assign and_ln104_101_fu_602_p2 = (xor_ln104_fu_566_p2 & xor_ln104_249_fu_596_p2);

assign and_ln104_102_fu_620_p2 = (xor_ln104_250_fu_614_p2 & and_ln102_fu_572_p2);

assign and_ln104_103_fu_638_p2 = (xor_ln104_251_fu_632_p2 & and_ln104_fu_584_p2);

assign and_ln104_104_fu_656_p2 = (xor_ln104_252_fu_650_p2 & and_ln102_494_fu_590_p2);

assign and_ln104_105_fu_1009_p2 = (xor_ln104_253_fu_1004_p2 & and_ln104_101_reg_1503);

assign and_ln104_106_fu_710_p2 = (xor_ln104_258_fu_704_p2 & and_ln102_497_fu_644_p2);

assign and_ln104_107_fu_728_p2 = (xor_ln104_259_fu_722_p2 & and_ln104_104_fu_656_p2);

assign and_ln104_fu_584_p2 = (xor_ln104_248_fu_578_p2 & icmp_ln86_fu_392_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((or_ln117_505_fu_1290_p2[0:0] == 1'b1) ? tmp_fu_1303_p63 : 12'd0);

assign icmp_ln86_514_fu_398_p2 = (($signed(x_1_val) < $signed(18'd80975)) ? 1'b1 : 1'b0);

assign icmp_ln86_515_fu_404_p2 = (($signed(x_2_val) < $signed(18'd261716)) ? 1'b1 : 1'b0);

assign icmp_ln86_516_fu_410_p2 = (($signed(x_1_val) < $signed(18'd57474)) ? 1'b1 : 1'b0);

assign icmp_ln86_517_fu_416_p2 = (($signed(x_1_val) < $signed(18'd92279)) ? 1'b1 : 1'b0);

assign icmp_ln86_518_fu_422_p2 = (($signed(x_42_val) < $signed(18'd310)) ? 1'b1 : 1'b0);

assign icmp_ln86_519_fu_428_p2 = (($signed(x_12_val) < $signed(18'd257813)) ? 1'b1 : 1'b0);

assign icmp_ln86_520_fu_434_p2 = (($signed(x_52_val) < $signed(18'd37377)) ? 1'b1 : 1'b0);

assign icmp_ln86_521_fu_440_p2 = (($signed(x_47_val) < $signed(18'd42004)) ? 1'b1 : 1'b0);

assign icmp_ln86_522_fu_446_p2 = (($signed(x_5_val) < $signed(18'd8682)) ? 1'b1 : 1'b0);

assign icmp_ln86_523_fu_452_p2 = (($signed(x_52_val) < $signed(18'd51713)) ? 1'b1 : 1'b0);

assign icmp_ln86_524_fu_458_p2 = (($signed(x_23_val) < $signed(18'd91)) ? 1'b1 : 1'b0);

assign icmp_ln86_525_fu_464_p2 = (($signed(x_51_val) < $signed(18'd65506)) ? 1'b1 : 1'b0);

assign icmp_ln86_526_fu_470_p2 = (($signed(x_44_val) < $signed(18'd100)) ? 1'b1 : 1'b0);

assign icmp_ln86_527_fu_476_p2 = (($signed(x_2_val) < $signed(18'd261804)) ? 1'b1 : 1'b0);

assign icmp_ln86_528_fu_482_p2 = (($signed(x_50_val) < $signed(18'd63466)) ? 1'b1 : 1'b0);

assign icmp_ln86_529_fu_488_p2 = (($signed(x_18_val) < $signed(18'd5618)) ? 1'b1 : 1'b0);

assign icmp_ln86_530_fu_494_p2 = (($signed(x_9_val) < $signed(18'd1364)) ? 1'b1 : 1'b0);

assign icmp_ln86_531_fu_500_p2 = (($signed(x_17_val) < $signed(18'd42)) ? 1'b1 : 1'b0);

assign icmp_ln86_532_fu_506_p2 = (($signed(x_26_val) < $signed(18'd3422)) ? 1'b1 : 1'b0);

assign icmp_ln86_533_fu_512_p2 = (($signed(x_16_val) < $signed(18'd49)) ? 1'b1 : 1'b0);

assign icmp_ln86_534_fu_518_p2 = (($signed(x_14_val) < $signed(18'd30)) ? 1'b1 : 1'b0);

assign icmp_ln86_535_fu_524_p2 = (($signed(x_49_val) < $signed(18'd13091)) ? 1'b1 : 1'b0);

assign icmp_ln86_536_fu_530_p2 = (($signed(x_15_val) < $signed(18'd52)) ? 1'b1 : 1'b0);

assign icmp_ln86_537_fu_536_p2 = (($signed(x_23_val) < $signed(18'd88)) ? 1'b1 : 1'b0);

assign icmp_ln86_538_fu_542_p2 = (($signed(x_10_val) < $signed(18'd522)) ? 1'b1 : 1'b0);

assign icmp_ln86_539_fu_548_p2 = (($signed(x_23_val) < $signed(18'd103)) ? 1'b1 : 1'b0);

assign icmp_ln86_540_fu_554_p2 = (($signed(x_28_val) < $signed(18'd48861)) ? 1'b1 : 1'b0);

assign icmp_ln86_541_fu_560_p2 = (($signed(x_42_val) < $signed(18'd294)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_392_p2 = (($signed(x_52_val) < $signed(18'd136705)) ? 1'b1 : 1'b0);

assign or_ln117_478_fu_810_p2 = (or_ln117_fu_788_p2 | and_ln102_507_fu_734_p2);

assign or_ln117_479_fu_824_p2 = (or_ln117_fu_788_p2 | and_ln102_499_fu_662_p2);

assign or_ln117_480_fu_842_p2 = (or_ln117_479_fu_824_p2 | and_ln102_508_fu_746_p2);

assign or_ln117_481_fu_856_p2 = (or_ln117_fu_788_p2 | and_ln102_495_fu_608_p2);

assign or_ln117_482_fu_870_p2 = (or_ln117_481_fu_856_p2 | and_ln102_509_fu_752_p2);

assign or_ln117_483_fu_884_p2 = (or_ln117_481_fu_856_p2 | and_ln102_500_fu_674_p2);

assign or_ln117_484_fu_902_p2 = (or_ln117_483_fu_884_p2 | and_ln102_510_fu_764_p2);

assign or_ln117_485_fu_916_p2 = (or_ln117_fu_788_p2 | and_ln102_fu_572_p2);

assign or_ln117_486_fu_930_p2 = (or_ln117_485_fu_916_p2 | and_ln102_511_fu_770_p2);

assign or_ln117_487_fu_944_p2 = (or_ln117_485_fu_916_p2 | and_ln102_501_fu_686_p2);

assign or_ln117_488_fu_958_p2 = (or_ln117_487_fu_944_p2 | and_ln102_512_fu_782_p2);

assign or_ln117_489_fu_972_p2 = (or_ln117_485_fu_916_p2 | and_ln102_496_fu_626_p2);

assign or_ln117_490_fu_1098_p2 = (or_ln117_489_reg_1528 | and_ln102_513_fu_1043_p2);

assign or_ln117_491_fu_1103_p2 = (or_ln117_489_reg_1528 | and_ln102_502_fu_1014_p2);

assign or_ln117_492_fu_1119_p2 = (or_ln117_491_fu_1103_p2 | and_ln102_514_fu_1053_p2);

assign or_ln117_493_fu_994_p2 = (or_ln117_fu_788_p2 | icmp_ln86_fu_392_p2);

assign or_ln117_494_fu_1141_p2 = (or_ln117_493_reg_1539 | and_ln102_515_fu_1058_p2);

assign or_ln117_495_fu_1153_p2 = (or_ln117_493_reg_1539 | and_ln102_503_reg_1516);

assign or_ln117_496_fu_1165_p2 = (or_ln117_495_fu_1153_p2 | and_ln102_516_fu_1062_p2);

assign or_ln117_497_fu_1179_p2 = (or_ln117_495_fu_1153_p2 | and_ln102_504_reg_1522);

assign or_ln117_498_fu_1192_p2 = (or_ln117_497_fu_1179_p2 | and_ln102_517_fu_1066_p2);

assign or_ln117_499_fu_1206_p2 = (or_ln117_497_fu_1179_p2 | and_ln102_505_fu_1023_p2);

assign or_ln117_500_fu_1220_p2 = (or_ln117_499_fu_1206_p2 | and_ln102_518_fu_1076_p2);

assign or_ln117_501_fu_1234_p2 = (or_ln117_497_fu_1179_p2 | and_ln102_498_fu_1000_p2);

assign or_ln117_502_fu_1248_p2 = (or_ln117_501_fu_1234_p2 | and_ln102_519_fu_1082_p2);

assign or_ln117_503_fu_1262_p2 = (or_ln117_501_fu_1234_p2 | and_ln102_506_fu_1033_p2);

assign or_ln117_504_fu_1276_p2 = (or_ln117_503_fu_1262_p2 | and_ln102_520_fu_1092_p2);

assign or_ln117_505_fu_1290_p2 = (or_ln117_497_fu_1179_p2 | and_ln104_101_reg_1503);

assign or_ln117_506_fu_800_p2 = (xor_ln117_fu_794_p2 | icmp_ln86_524_fu_458_p2);

assign or_ln117_fu_788_p2 = (and_ln104_107_fu_728_p2 | and_ln104_106_fu_710_p2);

assign select_ln117_500_fu_830_p3 = ((or_ln117_478_fu_810_p2[0:0] == 1'b1) ? select_ln117_fu_816_p3 : 2'd3);

assign select_ln117_501_fu_848_p3 = ((or_ln117_479_fu_824_p2[0:0] == 1'b1) ? zext_ln117_57_fu_838_p1 : 3'd4);

assign select_ln117_502_fu_862_p3 = ((or_ln117_480_fu_842_p2[0:0] == 1'b1) ? select_ln117_501_fu_848_p3 : 3'd5);

assign select_ln117_503_fu_876_p3 = ((or_ln117_481_fu_856_p2[0:0] == 1'b1) ? select_ln117_502_fu_862_p3 : 3'd6);

assign select_ln117_504_fu_890_p3 = ((or_ln117_482_fu_870_p2[0:0] == 1'b1) ? select_ln117_503_fu_876_p3 : 3'd7);

assign select_ln117_505_fu_908_p3 = ((or_ln117_483_fu_884_p2[0:0] == 1'b1) ? zext_ln117_58_fu_898_p1 : 4'd8);

assign select_ln117_506_fu_922_p3 = ((or_ln117_484_fu_902_p2[0:0] == 1'b1) ? select_ln117_505_fu_908_p3 : 4'd9);

assign select_ln117_507_fu_936_p3 = ((or_ln117_485_fu_916_p2[0:0] == 1'b1) ? select_ln117_506_fu_922_p3 : 4'd10);

assign select_ln117_508_fu_950_p3 = ((or_ln117_486_fu_930_p2[0:0] == 1'b1) ? select_ln117_507_fu_936_p3 : 4'd11);

assign select_ln117_509_fu_964_p3 = ((or_ln117_487_fu_944_p2[0:0] == 1'b1) ? select_ln117_508_fu_950_p3 : 4'd12);

assign select_ln117_510_fu_978_p3 = ((or_ln117_488_fu_958_p2[0:0] == 1'b1) ? select_ln117_509_fu_964_p3 : 4'd13);

assign select_ln117_511_fu_986_p3 = ((or_ln117_489_fu_972_p2[0:0] == 1'b1) ? select_ln117_510_fu_978_p3 : 4'd14);

assign select_ln117_512_fu_1108_p3 = ((or_ln117_490_fu_1098_p2[0:0] == 1'b1) ? select_ln117_511_reg_1534 : 4'd15);

assign select_ln117_513_fu_1125_p3 = ((or_ln117_491_fu_1103_p2[0:0] == 1'b1) ? zext_ln117_59_fu_1115_p1 : 5'd16);

assign select_ln117_514_fu_1133_p3 = ((or_ln117_492_fu_1119_p2[0:0] == 1'b1) ? select_ln117_513_fu_1125_p3 : 5'd17);

assign select_ln117_515_fu_1146_p3 = ((or_ln117_493_reg_1539[0:0] == 1'b1) ? select_ln117_514_fu_1133_p3 : 5'd18);

assign select_ln117_516_fu_1157_p3 = ((or_ln117_494_fu_1141_p2[0:0] == 1'b1) ? select_ln117_515_fu_1146_p3 : 5'd19);

assign select_ln117_517_fu_1171_p3 = ((or_ln117_495_fu_1153_p2[0:0] == 1'b1) ? select_ln117_516_fu_1157_p3 : 5'd20);

assign select_ln117_518_fu_1184_p3 = ((or_ln117_496_fu_1165_p2[0:0] == 1'b1) ? select_ln117_517_fu_1171_p3 : 5'd21);

assign select_ln117_519_fu_1198_p3 = ((or_ln117_497_fu_1179_p2[0:0] == 1'b1) ? select_ln117_518_fu_1184_p3 : 5'd22);

assign select_ln117_520_fu_1212_p3 = ((or_ln117_498_fu_1192_p2[0:0] == 1'b1) ? select_ln117_519_fu_1198_p3 : 5'd23);

assign select_ln117_521_fu_1226_p3 = ((or_ln117_499_fu_1206_p2[0:0] == 1'b1) ? select_ln117_520_fu_1212_p3 : 5'd24);

assign select_ln117_522_fu_1240_p3 = ((or_ln117_500_fu_1220_p2[0:0] == 1'b1) ? select_ln117_521_fu_1226_p3 : 5'd25);

assign select_ln117_523_fu_1254_p3 = ((or_ln117_501_fu_1234_p2[0:0] == 1'b1) ? select_ln117_522_fu_1240_p3 : 5'd26);

assign select_ln117_524_fu_1268_p3 = ((or_ln117_502_fu_1248_p2[0:0] == 1'b1) ? select_ln117_523_fu_1254_p3 : 5'd27);

assign select_ln117_525_fu_1282_p3 = ((or_ln117_503_fu_1262_p2[0:0] == 1'b1) ? select_ln117_524_fu_1268_p3 : 5'd28);

assign select_ln117_fu_816_p3 = ((or_ln117_fu_788_p2[0:0] == 1'b1) ? zext_ln117_fu_806_p1 : 2'd2);

assign tmp_fu_1303_p61 = 'bx;

assign tmp_fu_1303_p62 = ((or_ln117_504_fu_1276_p2[0:0] == 1'b1) ? select_ln117_525_fu_1282_p3 : 5'd29);

assign xor_ln104_248_fu_578_p2 = (icmp_ln86_514_fu_398_p2 ^ 1'd1);

assign xor_ln104_249_fu_596_p2 = (icmp_ln86_515_fu_404_p2 ^ 1'd1);

assign xor_ln104_250_fu_614_p2 = (icmp_ln86_516_fu_410_p2 ^ 1'd1);

assign xor_ln104_251_fu_632_p2 = (icmp_ln86_517_fu_416_p2 ^ 1'd1);

assign xor_ln104_252_fu_650_p2 = (icmp_ln86_518_fu_422_p2 ^ 1'd1);

assign xor_ln104_253_fu_1004_p2 = (icmp_ln86_519_reg_1439 ^ 1'd1);

assign xor_ln104_254_fu_668_p2 = (icmp_ln86_520_fu_434_p2 ^ 1'd1);

assign xor_ln104_255_fu_680_p2 = (icmp_ln86_521_fu_440_p2 ^ 1'd1);

assign xor_ln104_256_fu_692_p2 = (icmp_ln86_522_fu_446_p2 ^ 1'd1);

assign xor_ln104_257_fu_1018_p2 = (icmp_ln86_523_reg_1445 ^ 1'd1);

assign xor_ln104_258_fu_704_p2 = (icmp_ln86_524_fu_458_p2 ^ 1'd1);

assign xor_ln104_259_fu_722_p2 = (icmp_ln86_525_fu_464_p2 ^ 1'd1);

assign xor_ln104_260_fu_1028_p2 = (icmp_ln86_526_reg_1451 ^ 1'd1);

assign xor_ln104_261_fu_1038_p2 = (icmp_ln86_527_reg_1457 ^ 1'd1);

assign xor_ln104_fu_566_p2 = (icmp_ln86_fu_392_p2 ^ 1'd1);

assign xor_ln117_fu_794_p2 = (1'd1 ^ and_ln102_497_fu_644_p2);

assign zext_ln117_57_fu_838_p1 = select_ln117_500_fu_830_p3;

assign zext_ln117_58_fu_898_p1 = select_ln117_504_fu_890_p3;

assign zext_ln117_59_fu_1115_p1 = select_ln117_512_fu_1108_p3;

assign zext_ln117_fu_806_p1 = or_ln117_506_fu_800_p2;

endmodule //my_prj_decision_function_20
