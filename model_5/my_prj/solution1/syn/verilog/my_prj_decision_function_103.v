// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_103 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_2_val,
        x_3_val,
        x_5_val,
        x_8_val,
        x_10_val,
        x_13_val,
        x_15_val,
        x_18_val,
        x_19_val,
        x_21_val,
        x_25_val,
        x_28_val,
        x_31_val,
        x_32_val,
        x_33_val,
        x_37_val,
        x_38_val,
        x_45_val,
        x_46_val,
        x_47_val,
        x_49_val,
        x_50_val,
        x_51_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_2_val;
input  [17:0] x_3_val;
input  [17:0] x_5_val;
input  [17:0] x_8_val;
input  [17:0] x_10_val;
input  [17:0] x_13_val;
input  [17:0] x_15_val;
input  [17:0] x_18_val;
input  [17:0] x_19_val;
input  [17:0] x_21_val;
input  [17:0] x_25_val;
input  [17:0] x_28_val;
input  [17:0] x_31_val;
input  [17:0] x_32_val;
input  [17:0] x_33_val;
input  [17:0] x_37_val;
input  [17:0] x_38_val;
input  [17:0] x_45_val;
input  [17:0] x_46_val;
input  [17:0] x_47_val;
input  [17:0] x_49_val;
input  [17:0] x_50_val;
input  [17:0] x_51_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_1921_fu_450_p2;
reg   [0:0] icmp_ln86_1921_reg_1484;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_1925_fu_474_p2;
reg   [0:0] icmp_ln86_1925_reg_1490;
wire   [0:0] icmp_ln86_1926_fu_480_p2;
reg   [0:0] icmp_ln86_1926_reg_1495;
wire   [0:0] icmp_ln86_1928_fu_492_p2;
reg   [0:0] icmp_ln86_1928_reg_1501;
wire   [0:0] icmp_ln86_1929_fu_498_p2;
reg   [0:0] icmp_ln86_1929_reg_1507;
wire   [0:0] icmp_ln86_1937_fu_546_p2;
reg   [0:0] icmp_ln86_1937_reg_1513;
wire   [0:0] icmp_ln86_1938_fu_552_p2;
reg   [0:0] icmp_ln86_1938_reg_1518;
wire   [0:0] icmp_ln86_1939_fu_558_p2;
reg   [0:0] icmp_ln86_1939_reg_1523;
wire   [0:0] icmp_ln86_1940_fu_564_p2;
reg   [0:0] icmp_ln86_1940_reg_1528;
wire   [0:0] icmp_ln86_1941_fu_570_p2;
reg   [0:0] icmp_ln86_1941_reg_1533;
wire   [0:0] icmp_ln86_1942_fu_576_p2;
reg   [0:0] icmp_ln86_1942_reg_1538;
wire   [0:0] icmp_ln86_1943_fu_582_p2;
reg   [0:0] icmp_ln86_1943_reg_1543;
wire   [0:0] icmp_ln86_1944_fu_588_p2;
reg   [0:0] icmp_ln86_1944_reg_1548;
wire   [0:0] and_ln104_362_fu_630_p2;
reg   [0:0] and_ln104_362_reg_1553;
wire   [0:0] and_ln104_364_fu_666_p2;
reg   [0:0] and_ln104_364_reg_1560;
wire   [0:0] and_ln102_2165_fu_672_p2;
reg   [0:0] and_ln102_2165_reg_1565;
wire   [0:0] and_ln104_367_fu_744_p2;
reg   [0:0] and_ln104_367_reg_1572;
wire   [0:0] or_ln117_1756_fu_1002_p2;
reg   [0:0] or_ln117_1756_reg_1578;
wire   [3:0] select_ln117_1875_fu_1016_p3;
reg   [3:0] select_ln117_1875_reg_1583;
wire   [0:0] or_ln117_1758_fu_1024_p2;
reg   [0:0] or_ln117_1758_reg_1588;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln86_fu_414_p2;
wire   [0:0] icmp_ln86_1916_fu_420_p2;
wire   [0:0] xor_ln104_917_fu_606_p2;
wire   [0:0] icmp_ln86_1917_fu_426_p2;
wire   [0:0] xor_ln104_fu_594_p2;
wire   [0:0] xor_ln104_918_fu_624_p2;
wire   [0:0] icmp_ln86_1918_fu_432_p2;
wire   [0:0] and_ln102_fu_600_p2;
wire   [0:0] xor_ln104_919_fu_642_p2;
wire   [0:0] icmp_ln86_1919_fu_438_p2;
wire   [0:0] and_ln104_fu_612_p2;
wire   [0:0] xor_ln104_920_fu_660_p2;
wire   [0:0] icmp_ln86_1920_fu_444_p2;
wire   [0:0] and_ln102_2162_fu_618_p2;
wire   [0:0] xor_ln104_921_fu_678_p2;
wire   [0:0] icmp_ln86_1922_fu_456_p2;
wire   [0:0] and_ln102_2163_fu_636_p2;
wire   [0:0] icmp_ln86_1923_fu_462_p2;
wire   [0:0] and_ln104_363_fu_648_p2;
wire   [0:0] icmp_ln86_1924_fu_468_p2;
wire   [0:0] and_ln102_2164_fu_654_p2;
wire   [0:0] icmp_ln86_1927_fu_486_p2;
wire   [0:0] and_ln104_365_fu_684_p2;
wire   [0:0] xor_ln104_928_fu_738_p2;
wire   [0:0] icmp_ln86_1930_fu_504_p2;
wire   [0:0] and_ln102_2167_fu_690_p2;
wire   [0:0] icmp_ln86_1931_fu_510_p2;
wire   [0:0] xor_ln104_923_fu_696_p2;
wire   [0:0] and_ln102_2176_fu_756_p2;
wire   [0:0] icmp_ln86_1932_fu_516_p2;
wire   [0:0] and_ln102_2168_fu_702_p2;
wire   [0:0] icmp_ln86_1933_fu_522_p2;
wire   [0:0] xor_ln104_924_fu_708_p2;
wire   [0:0] and_ln102_2179_fu_774_p2;
wire   [0:0] icmp_ln86_1934_fu_528_p2;
wire   [0:0] and_ln102_2169_fu_714_p2;
wire   [0:0] icmp_ln86_1935_fu_534_p2;
wire   [0:0] xor_ln104_925_fu_720_p2;
wire   [0:0] and_ln102_2182_fu_792_p2;
wire   [0:0] icmp_ln86_1936_fu_540_p2;
wire   [0:0] and_ln102_2170_fu_726_p2;
wire   [0:0] and_ln102_2172_fu_732_p2;
wire   [0:0] and_ln102_2175_fu_750_p2;
wire   [0:0] xor_ln117_fu_816_p2;
wire   [0:0] or_ln117_fu_810_p2;
wire   [1:0] zext_ln117_fu_822_p1;
wire   [0:0] or_ln117_1744_fu_826_p2;
wire   [0:0] and_ln102_2177_fu_762_p2;
wire   [1:0] select_ln117_fu_832_p3;
wire   [1:0] select_ln117_1863_fu_846_p3;
wire   [0:0] or_ln117_1745_fu_840_p2;
wire   [2:0] zext_ln117_208_fu_854_p1;
wire   [0:0] or_ln117_1746_fu_858_p2;
wire   [0:0] and_ln102_2178_fu_768_p2;
wire   [2:0] select_ln117_1864_fu_864_p3;
wire   [0:0] or_ln117_1747_fu_872_p2;
wire   [2:0] select_ln117_1865_fu_878_p3;
wire   [0:0] or_ln117_1748_fu_886_p2;
wire   [0:0] and_ln102_2180_fu_780_p2;
wire   [2:0] select_ln117_1866_fu_892_p3;
wire   [2:0] select_ln117_1867_fu_906_p3;
wire   [0:0] or_ln117_1749_fu_900_p2;
wire   [3:0] zext_ln117_209_fu_914_p1;
wire   [0:0] or_ln117_1750_fu_918_p2;
wire   [0:0] and_ln102_2181_fu_786_p2;
wire   [3:0] select_ln117_1868_fu_924_p3;
wire   [0:0] or_ln117_1751_fu_932_p2;
wire   [3:0] select_ln117_1869_fu_938_p3;
wire   [0:0] or_ln117_1752_fu_946_p2;
wire   [0:0] and_ln102_2183_fu_798_p2;
wire   [3:0] select_ln117_1870_fu_952_p3;
wire   [0:0] or_ln117_1753_fu_960_p2;
wire   [3:0] select_ln117_1871_fu_966_p3;
wire   [0:0] or_ln117_1754_fu_974_p2;
wire   [0:0] and_ln102_2184_fu_804_p2;
wire   [3:0] select_ln117_1872_fu_980_p3;
wire   [0:0] or_ln117_1755_fu_988_p2;
wire   [3:0] select_ln117_1873_fu_994_p3;
wire   [3:0] select_ln117_1874_fu_1008_p3;
wire   [0:0] xor_ln104_922_fu_1034_p2;
wire   [0:0] and_ln102_2166_fu_1030_p2;
wire   [0:0] and_ln104_366_fu_1039_p2;
wire   [0:0] xor_ln104_926_fu_1044_p2;
wire   [0:0] and_ln102_2185_fu_1078_p2;
wire   [0:0] and_ln102_2171_fu_1049_p2;
wire   [0:0] xor_ln104_927_fu_1053_p2;
wire   [0:0] and_ln102_2188_fu_1093_p2;
wire   [0:0] and_ln102_2173_fu_1058_p2;
wire   [0:0] xor_ln104_929_fu_1063_p2;
wire   [0:0] and_ln102_2192_fu_1112_p2;
wire   [0:0] and_ln102_2174_fu_1068_p2;
wire   [0:0] xor_ln104_930_fu_1073_p2;
wire   [0:0] and_ln102_2195_fu_1128_p2;
wire   [0:0] and_ln102_2186_fu_1083_p2;
wire   [0:0] or_ln117_1757_fu_1139_p2;
wire   [4:0] zext_ln117_210_fu_1144_p1;
wire   [0:0] and_ln102_2187_fu_1088_p2;
wire   [4:0] select_ln117_1876_fu_1147_p3;
wire   [0:0] or_ln117_1759_fu_1155_p2;
wire   [4:0] select_ln117_1877_fu_1160_p3;
wire   [0:0] or_ln117_1760_fu_1167_p2;
wire   [0:0] and_ln102_2189_fu_1098_p2;
wire   [4:0] select_ln117_1878_fu_1172_p3;
wire   [0:0] or_ln117_1761_fu_1180_p2;
wire   [4:0] select_ln117_1879_fu_1186_p3;
wire   [0:0] or_ln117_1762_fu_1194_p2;
wire   [0:0] and_ln102_2190_fu_1103_p2;
wire   [4:0] select_ln117_1880_fu_1198_p3;
wire   [0:0] or_ln117_1763_fu_1206_p2;
wire   [4:0] select_ln117_1881_fu_1212_p3;
wire   [0:0] or_ln117_1764_fu_1220_p2;
wire   [0:0] and_ln102_2191_fu_1107_p2;
wire   [4:0] select_ln117_1882_fu_1225_p3;
wire   [0:0] or_ln117_1765_fu_1233_p2;
wire   [4:0] select_ln117_1883_fu_1239_p3;
wire   [0:0] or_ln117_1766_fu_1247_p2;
wire   [0:0] and_ln102_2193_fu_1117_p2;
wire   [4:0] select_ln117_1884_fu_1253_p3;
wire   [0:0] or_ln117_1767_fu_1261_p2;
wire   [4:0] select_ln117_1885_fu_1267_p3;
wire   [0:0] or_ln117_1768_fu_1275_p2;
wire   [0:0] and_ln102_2194_fu_1123_p2;
wire   [4:0] select_ln117_1886_fu_1281_p3;
wire   [0:0] or_ln117_1769_fu_1289_p2;
wire   [4:0] select_ln117_1887_fu_1295_p3;
wire   [0:0] or_ln117_1770_fu_1303_p2;
wire   [0:0] and_ln102_2196_fu_1133_p2;
wire   [4:0] select_ln117_1888_fu_1309_p3;
wire   [0:0] or_ln117_1771_fu_1317_p2;
wire   [4:0] select_ln117_1889_fu_1323_p3;
wire   [11:0] tmp_fu_1344_p63;
wire   [4:0] tmp_fu_1344_p64;
wire   [0:0] or_ln117_1772_fu_1331_p2;
wire   [11:0] tmp_fu_1344_p65;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] tmp_fu_1344_p1;
wire   [4:0] tmp_fu_1344_p3;
wire   [4:0] tmp_fu_1344_p5;
wire   [4:0] tmp_fu_1344_p7;
wire   [4:0] tmp_fu_1344_p9;
wire   [4:0] tmp_fu_1344_p11;
wire   [4:0] tmp_fu_1344_p13;
wire   [4:0] tmp_fu_1344_p15;
wire   [4:0] tmp_fu_1344_p17;
wire   [4:0] tmp_fu_1344_p19;
wire   [4:0] tmp_fu_1344_p21;
wire   [4:0] tmp_fu_1344_p23;
wire   [4:0] tmp_fu_1344_p25;
wire   [4:0] tmp_fu_1344_p27;
wire   [4:0] tmp_fu_1344_p29;
wire   [4:0] tmp_fu_1344_p31;
wire  signed [4:0] tmp_fu_1344_p33;
wire  signed [4:0] tmp_fu_1344_p35;
wire  signed [4:0] tmp_fu_1344_p37;
wire  signed [4:0] tmp_fu_1344_p39;
wire  signed [4:0] tmp_fu_1344_p41;
wire  signed [4:0] tmp_fu_1344_p43;
wire  signed [4:0] tmp_fu_1344_p45;
wire  signed [4:0] tmp_fu_1344_p47;
wire  signed [4:0] tmp_fu_1344_p49;
wire  signed [4:0] tmp_fu_1344_p51;
wire  signed [4:0] tmp_fu_1344_p53;
wire  signed [4:0] tmp_fu_1344_p55;
wire  signed [4:0] tmp_fu_1344_p57;
wire  signed [4:0] tmp_fu_1344_p59;
wire  signed [4:0] tmp_fu_1344_p61;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_63_5_12_1_1_x5 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 12 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 12 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 12 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_63_5_12_1_1_x5_U2463(
    .din0(12'd2130),
    .din1(12'd5),
    .din2(12'd3926),
    .din3(12'd148),
    .din4(12'd4009),
    .din5(12'd4020),
    .din6(12'd1325),
    .din7(12'd3626),
    .din8(12'd34),
    .din9(12'd322),
    .din10(12'd3647),
    .din11(12'd496),
    .din12(12'd1768),
    .din13(12'd964),
    .din14(12'd1),
    .din15(12'd3538),
    .din16(12'd19),
    .din17(12'd3115),
    .din18(12'd125),
    .din19(12'd605),
    .din20(12'd3661),
    .din21(12'd45),
    .din22(12'd3506),
    .din23(12'd191),
    .din24(12'd1046),
    .din25(12'd287),
    .din26(12'd3315),
    .din27(12'd3978),
    .din28(12'd3520),
    .din29(12'd189),
    .din30(12'd4063),
    .def(tmp_fu_1344_p63),
    .sel(tmp_fu_1344_p64),
    .dout(tmp_fu_1344_p65)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln102_2165_reg_1565 <= and_ln102_2165_fu_672_p2;
        and_ln104_362_reg_1553 <= and_ln104_362_fu_630_p2;
        and_ln104_364_reg_1560 <= and_ln104_364_fu_666_p2;
        and_ln104_367_reg_1572 <= and_ln104_367_fu_744_p2;
        icmp_ln86_1921_reg_1484 <= icmp_ln86_1921_fu_450_p2;
        icmp_ln86_1925_reg_1490 <= icmp_ln86_1925_fu_474_p2;
        icmp_ln86_1926_reg_1495 <= icmp_ln86_1926_fu_480_p2;
        icmp_ln86_1928_reg_1501 <= icmp_ln86_1928_fu_492_p2;
        icmp_ln86_1929_reg_1507 <= icmp_ln86_1929_fu_498_p2;
        icmp_ln86_1937_reg_1513 <= icmp_ln86_1937_fu_546_p2;
        icmp_ln86_1938_reg_1518 <= icmp_ln86_1938_fu_552_p2;
        icmp_ln86_1939_reg_1523 <= icmp_ln86_1939_fu_558_p2;
        icmp_ln86_1940_reg_1528 <= icmp_ln86_1940_fu_564_p2;
        icmp_ln86_1941_reg_1533 <= icmp_ln86_1941_fu_570_p2;
        icmp_ln86_1942_reg_1538 <= icmp_ln86_1942_fu_576_p2;
        icmp_ln86_1943_reg_1543 <= icmp_ln86_1943_fu_582_p2;
        icmp_ln86_1944_reg_1548 <= icmp_ln86_1944_fu_588_p2;
        or_ln117_1756_reg_1578 <= or_ln117_1756_fu_1002_p2;
        or_ln117_1758_reg_1588 <= or_ln117_1758_fu_1024_p2;
        select_ln117_1875_reg_1583 <= select_ln117_1875_fu_1016_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln102_2162_fu_618_p2 = (xor_ln104_fu_594_p2 & icmp_ln86_1917_fu_426_p2);

assign and_ln102_2163_fu_636_p2 = (icmp_ln86_1918_fu_432_p2 & and_ln102_fu_600_p2);

assign and_ln102_2164_fu_654_p2 = (icmp_ln86_1919_fu_438_p2 & and_ln104_fu_612_p2);

assign and_ln102_2165_fu_672_p2 = (icmp_ln86_1920_fu_444_p2 & and_ln102_2162_fu_618_p2);

assign and_ln102_2166_fu_1030_p2 = (icmp_ln86_1921_reg_1484 & and_ln104_362_reg_1553);

assign and_ln102_2167_fu_690_p2 = (icmp_ln86_1922_fu_456_p2 & and_ln102_2163_fu_636_p2);

assign and_ln102_2168_fu_702_p2 = (icmp_ln86_1923_fu_462_p2 & and_ln104_363_fu_648_p2);

assign and_ln102_2169_fu_714_p2 = (icmp_ln86_1924_fu_468_p2 & and_ln102_2164_fu_654_p2);

assign and_ln102_2170_fu_726_p2 = (icmp_ln86_1925_fu_474_p2 & and_ln104_364_fu_666_p2);

assign and_ln102_2171_fu_1049_p2 = (icmp_ln86_1926_reg_1495 & and_ln102_2165_reg_1565);

assign and_ln102_2172_fu_732_p2 = (icmp_ln86_1927_fu_486_p2 & and_ln104_365_fu_684_p2);

assign and_ln102_2173_fu_1058_p2 = (icmp_ln86_1928_reg_1501 & and_ln102_2166_fu_1030_p2);

assign and_ln102_2174_fu_1068_p2 = (icmp_ln86_1929_reg_1507 & and_ln104_366_fu_1039_p2);

assign and_ln102_2175_fu_750_p2 = (icmp_ln86_1930_fu_504_p2 & and_ln102_2167_fu_690_p2);

assign and_ln102_2176_fu_756_p2 = (xor_ln104_923_fu_696_p2 & icmp_ln86_1931_fu_510_p2);

assign and_ln102_2177_fu_762_p2 = (and_ln102_2176_fu_756_p2 & and_ln102_2163_fu_636_p2);

assign and_ln102_2178_fu_768_p2 = (icmp_ln86_1932_fu_516_p2 & and_ln102_2168_fu_702_p2);

assign and_ln102_2179_fu_774_p2 = (xor_ln104_924_fu_708_p2 & icmp_ln86_1933_fu_522_p2);

assign and_ln102_2180_fu_780_p2 = (and_ln104_363_fu_648_p2 & and_ln102_2179_fu_774_p2);

assign and_ln102_2181_fu_786_p2 = (icmp_ln86_1934_fu_528_p2 & and_ln102_2169_fu_714_p2);

assign and_ln102_2182_fu_792_p2 = (xor_ln104_925_fu_720_p2 & icmp_ln86_1935_fu_534_p2);

assign and_ln102_2183_fu_798_p2 = (and_ln102_2182_fu_792_p2 & and_ln102_2164_fu_654_p2);

assign and_ln102_2184_fu_804_p2 = (icmp_ln86_1936_fu_540_p2 & and_ln102_2170_fu_726_p2);

assign and_ln102_2185_fu_1078_p2 = (xor_ln104_926_fu_1044_p2 & icmp_ln86_1937_reg_1513);

assign and_ln102_2186_fu_1083_p2 = (and_ln104_364_reg_1560 & and_ln102_2185_fu_1078_p2);

assign and_ln102_2187_fu_1088_p2 = (icmp_ln86_1938_reg_1518 & and_ln102_2171_fu_1049_p2);

assign and_ln102_2188_fu_1093_p2 = (xor_ln104_927_fu_1053_p2 & icmp_ln86_1939_reg_1523);

assign and_ln102_2189_fu_1098_p2 = (and_ln102_2188_fu_1093_p2 & and_ln102_2165_reg_1565);

assign and_ln102_2190_fu_1103_p2 = (icmp_ln86_1940_reg_1528 & and_ln104_367_reg_1572);

assign and_ln102_2191_fu_1107_p2 = (icmp_ln86_1941_reg_1533 & and_ln102_2173_fu_1058_p2);

assign and_ln102_2192_fu_1112_p2 = (xor_ln104_929_fu_1063_p2 & icmp_ln86_1942_reg_1538);

assign and_ln102_2193_fu_1117_p2 = (and_ln102_2192_fu_1112_p2 & and_ln102_2166_fu_1030_p2);

assign and_ln102_2194_fu_1123_p2 = (icmp_ln86_1943_reg_1543 & and_ln102_2174_fu_1068_p2);

assign and_ln102_2195_fu_1128_p2 = (xor_ln104_930_fu_1073_p2 & icmp_ln86_1944_reg_1548);

assign and_ln102_2196_fu_1133_p2 = (and_ln104_366_fu_1039_p2 & and_ln102_2195_fu_1128_p2);

assign and_ln102_fu_600_p2 = (icmp_ln86_fu_414_p2 & icmp_ln86_1916_fu_420_p2);

assign and_ln104_362_fu_630_p2 = (xor_ln104_fu_594_p2 & xor_ln104_918_fu_624_p2);

assign and_ln104_363_fu_648_p2 = (xor_ln104_919_fu_642_p2 & and_ln102_fu_600_p2);

assign and_ln104_364_fu_666_p2 = (xor_ln104_920_fu_660_p2 & and_ln104_fu_612_p2);

assign and_ln104_365_fu_684_p2 = (xor_ln104_921_fu_678_p2 & and_ln102_2162_fu_618_p2);

assign and_ln104_366_fu_1039_p2 = (xor_ln104_922_fu_1034_p2 & and_ln104_362_reg_1553);

assign and_ln104_367_fu_744_p2 = (xor_ln104_928_fu_738_p2 & and_ln104_365_fu_684_p2);

assign and_ln104_fu_612_p2 = (xor_ln104_917_fu_606_p2 & icmp_ln86_fu_414_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((or_ln117_1772_fu_1331_p2[0:0] == 1'b1) ? tmp_fu_1344_p65 : 12'd0);

assign icmp_ln86_1916_fu_420_p2 = (($signed(x_50_val) < $signed(18'd119052)) ? 1'b1 : 1'b0);

assign icmp_ln86_1917_fu_426_p2 = (($signed(x_28_val) < $signed(18'd6980)) ? 1'b1 : 1'b0);

assign icmp_ln86_1918_fu_432_p2 = (($signed(x_8_val) < $signed(18'd4892)) ? 1'b1 : 1'b0);

assign icmp_ln86_1919_fu_438_p2 = (($signed(x_15_val) < $signed(18'd15)) ? 1'b1 : 1'b0);

assign icmp_ln86_1920_fu_444_p2 = (($signed(x_28_val) < $signed(18'd6784)) ? 1'b1 : 1'b0);

assign icmp_ln86_1921_fu_450_p2 = (($signed(x_5_val) < $signed(18'd11136)) ? 1'b1 : 1'b0);

assign icmp_ln86_1922_fu_456_p2 = (($signed(x_32_val) < $signed(18'd896)) ? 1'b1 : 1'b0);

assign icmp_ln86_1923_fu_462_p2 = (($signed(x_32_val) < $signed(18'd662)) ? 1'b1 : 1'b0);

assign icmp_ln86_1924_fu_468_p2 = (($signed(x_8_val) < $signed(18'd3460)) ? 1'b1 : 1'b0);

assign icmp_ln86_1925_fu_474_p2 = (($signed(x_2_val) < $signed(18'd261674)) ? 1'b1 : 1'b0);

assign icmp_ln86_1926_fu_480_p2 = (($signed(x_31_val) < $signed(18'd355)) ? 1'b1 : 1'b0);

assign icmp_ln86_1927_fu_486_p2 = (($signed(x_13_val) < $signed(18'd346)) ? 1'b1 : 1'b0);

assign icmp_ln86_1928_fu_492_p2 = (($signed(x_25_val) < $signed(18'd121)) ? 1'b1 : 1'b0);

assign icmp_ln86_1929_fu_498_p2 = (($signed(x_21_val) < $signed(18'd141)) ? 1'b1 : 1'b0);

assign icmp_ln86_1930_fu_504_p2 = (($signed(x_47_val) < $signed(18'd95721)) ? 1'b1 : 1'b0);

assign icmp_ln86_1931_fu_510_p2 = (($signed(x_3_val) < $signed(18'd86808)) ? 1'b1 : 1'b0);

assign icmp_ln86_1932_fu_516_p2 = (($signed(x_15_val) < $signed(18'd12)) ? 1'b1 : 1'b0);

assign icmp_ln86_1933_fu_522_p2 = (($signed(x_49_val) < $signed(18'd80631)) ? 1'b1 : 1'b0);

assign icmp_ln86_1934_fu_528_p2 = (($signed(x_10_val) < $signed(18'd636)) ? 1'b1 : 1'b0);

assign icmp_ln86_1935_fu_534_p2 = (($signed(x_45_val) < $signed(18'd299)) ? 1'b1 : 1'b0);

assign icmp_ln86_1936_fu_540_p2 = (($signed(x_10_val) < $signed(18'd481)) ? 1'b1 : 1'b0);

assign icmp_ln86_1937_fu_546_p2 = (($signed(x_37_val) < $signed(18'd40)) ? 1'b1 : 1'b0);

assign icmp_ln86_1938_fu_552_p2 = (($signed(x_46_val) < $signed(18'd91)) ? 1'b1 : 1'b0);

assign icmp_ln86_1939_fu_558_p2 = (($signed(x_19_val) < $signed(18'd2363)) ? 1'b1 : 1'b0);

assign icmp_ln86_1940_fu_564_p2 = (($signed(x_18_val) < $signed(18'd1736)) ? 1'b1 : 1'b0);

assign icmp_ln86_1941_fu_570_p2 = (($signed(x_5_val) < $signed(18'd10542)) ? 1'b1 : 1'b0);

assign icmp_ln86_1942_fu_576_p2 = (($signed(x_33_val) < $signed(18'd687)) ? 1'b1 : 1'b0);

assign icmp_ln86_1943_fu_582_p2 = (($signed(x_51_val) < $signed(18'd145)) ? 1'b1 : 1'b0);

assign icmp_ln86_1944_fu_588_p2 = (($signed(x_5_val) < $signed(18'd15151)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_414_p2 = (($signed(x_38_val) < $signed(18'd6)) ? 1'b1 : 1'b0);

assign or_ln117_1744_fu_826_p2 = (and_ln102_2172_fu_732_p2 | and_ln102_2167_fu_690_p2);

assign or_ln117_1745_fu_840_p2 = (or_ln117_1744_fu_826_p2 | and_ln102_2177_fu_762_p2);

assign or_ln117_1746_fu_858_p2 = (and_ln102_2172_fu_732_p2 | and_ln102_2163_fu_636_p2);

assign or_ln117_1747_fu_872_p2 = (or_ln117_1746_fu_858_p2 | and_ln102_2178_fu_768_p2);

assign or_ln117_1748_fu_886_p2 = (or_ln117_1746_fu_858_p2 | and_ln102_2168_fu_702_p2);

assign or_ln117_1749_fu_900_p2 = (or_ln117_1748_fu_886_p2 | and_ln102_2180_fu_780_p2);

assign or_ln117_1750_fu_918_p2 = (and_ln102_fu_600_p2 | and_ln102_2172_fu_732_p2);

assign or_ln117_1751_fu_932_p2 = (or_ln117_1750_fu_918_p2 | and_ln102_2181_fu_786_p2);

assign or_ln117_1752_fu_946_p2 = (or_ln117_1750_fu_918_p2 | and_ln102_2169_fu_714_p2);

assign or_ln117_1753_fu_960_p2 = (or_ln117_1752_fu_946_p2 | and_ln102_2183_fu_798_p2);

assign or_ln117_1754_fu_974_p2 = (or_ln117_1750_fu_918_p2 | and_ln102_2164_fu_654_p2);

assign or_ln117_1755_fu_988_p2 = (or_ln117_1754_fu_974_p2 | and_ln102_2184_fu_804_p2);

assign or_ln117_1756_fu_1002_p2 = (or_ln117_1754_fu_974_p2 | and_ln102_2170_fu_726_p2);

assign or_ln117_1757_fu_1139_p2 = (or_ln117_1756_reg_1578 | and_ln102_2186_fu_1083_p2);

assign or_ln117_1758_fu_1024_p2 = (icmp_ln86_fu_414_p2 | and_ln102_2172_fu_732_p2);

assign or_ln117_1759_fu_1155_p2 = (or_ln117_1758_reg_1588 | and_ln102_2187_fu_1088_p2);

assign or_ln117_1760_fu_1167_p2 = (or_ln117_1758_reg_1588 | and_ln102_2171_fu_1049_p2);

assign or_ln117_1761_fu_1180_p2 = (or_ln117_1760_fu_1167_p2 | and_ln102_2189_fu_1098_p2);

assign or_ln117_1762_fu_1194_p2 = (or_ln117_1758_reg_1588 | and_ln102_2165_reg_1565);

assign or_ln117_1763_fu_1206_p2 = (or_ln117_1762_fu_1194_p2 | and_ln102_2190_fu_1103_p2);

assign or_ln117_1764_fu_1220_p2 = (or_ln117_1762_fu_1194_p2 | and_ln104_367_reg_1572);

assign or_ln117_1765_fu_1233_p2 = (or_ln117_1764_fu_1220_p2 | and_ln102_2191_fu_1107_p2);

assign or_ln117_1766_fu_1247_p2 = (or_ln117_1764_fu_1220_p2 | and_ln102_2173_fu_1058_p2);

assign or_ln117_1767_fu_1261_p2 = (or_ln117_1766_fu_1247_p2 | and_ln102_2193_fu_1117_p2);

assign or_ln117_1768_fu_1275_p2 = (or_ln117_1764_fu_1220_p2 | and_ln102_2166_fu_1030_p2);

assign or_ln117_1769_fu_1289_p2 = (or_ln117_1768_fu_1275_p2 | and_ln102_2194_fu_1123_p2);

assign or_ln117_1770_fu_1303_p2 = (or_ln117_1768_fu_1275_p2 | and_ln102_2174_fu_1068_p2);

assign or_ln117_1771_fu_1317_p2 = (or_ln117_1770_fu_1303_p2 | and_ln102_2196_fu_1133_p2);

assign or_ln117_1772_fu_1331_p2 = (or_ln117_1764_fu_1220_p2 | and_ln104_362_reg_1553);

assign or_ln117_fu_810_p2 = (and_ln102_2175_fu_750_p2 | and_ln102_2172_fu_732_p2);

assign select_ln117_1863_fu_846_p3 = ((or_ln117_1744_fu_826_p2[0:0] == 1'b1) ? select_ln117_fu_832_p3 : 2'd3);

assign select_ln117_1864_fu_864_p3 = ((or_ln117_1745_fu_840_p2[0:0] == 1'b1) ? zext_ln117_208_fu_854_p1 : 3'd4);

assign select_ln117_1865_fu_878_p3 = ((or_ln117_1746_fu_858_p2[0:0] == 1'b1) ? select_ln117_1864_fu_864_p3 : 3'd5);

assign select_ln117_1866_fu_892_p3 = ((or_ln117_1747_fu_872_p2[0:0] == 1'b1) ? select_ln117_1865_fu_878_p3 : 3'd6);

assign select_ln117_1867_fu_906_p3 = ((or_ln117_1748_fu_886_p2[0:0] == 1'b1) ? select_ln117_1866_fu_892_p3 : 3'd7);

assign select_ln117_1868_fu_924_p3 = ((or_ln117_1749_fu_900_p2[0:0] == 1'b1) ? zext_ln117_209_fu_914_p1 : 4'd8);

assign select_ln117_1869_fu_938_p3 = ((or_ln117_1750_fu_918_p2[0:0] == 1'b1) ? select_ln117_1868_fu_924_p3 : 4'd9);

assign select_ln117_1870_fu_952_p3 = ((or_ln117_1751_fu_932_p2[0:0] == 1'b1) ? select_ln117_1869_fu_938_p3 : 4'd10);

assign select_ln117_1871_fu_966_p3 = ((or_ln117_1752_fu_946_p2[0:0] == 1'b1) ? select_ln117_1870_fu_952_p3 : 4'd11);

assign select_ln117_1872_fu_980_p3 = ((or_ln117_1753_fu_960_p2[0:0] == 1'b1) ? select_ln117_1871_fu_966_p3 : 4'd12);

assign select_ln117_1873_fu_994_p3 = ((or_ln117_1754_fu_974_p2[0:0] == 1'b1) ? select_ln117_1872_fu_980_p3 : 4'd13);

assign select_ln117_1874_fu_1008_p3 = ((or_ln117_1755_fu_988_p2[0:0] == 1'b1) ? select_ln117_1873_fu_994_p3 : 4'd14);

assign select_ln117_1875_fu_1016_p3 = ((or_ln117_1756_fu_1002_p2[0:0] == 1'b1) ? select_ln117_1874_fu_1008_p3 : 4'd15);

assign select_ln117_1876_fu_1147_p3 = ((or_ln117_1757_fu_1139_p2[0:0] == 1'b1) ? zext_ln117_210_fu_1144_p1 : 5'd16);

assign select_ln117_1877_fu_1160_p3 = ((or_ln117_1758_reg_1588[0:0] == 1'b1) ? select_ln117_1876_fu_1147_p3 : 5'd17);

assign select_ln117_1878_fu_1172_p3 = ((or_ln117_1759_fu_1155_p2[0:0] == 1'b1) ? select_ln117_1877_fu_1160_p3 : 5'd18);

assign select_ln117_1879_fu_1186_p3 = ((or_ln117_1760_fu_1167_p2[0:0] == 1'b1) ? select_ln117_1878_fu_1172_p3 : 5'd19);

assign select_ln117_1880_fu_1198_p3 = ((or_ln117_1761_fu_1180_p2[0:0] == 1'b1) ? select_ln117_1879_fu_1186_p3 : 5'd20);

assign select_ln117_1881_fu_1212_p3 = ((or_ln117_1762_fu_1194_p2[0:0] == 1'b1) ? select_ln117_1880_fu_1198_p3 : 5'd21);

assign select_ln117_1882_fu_1225_p3 = ((or_ln117_1763_fu_1206_p2[0:0] == 1'b1) ? select_ln117_1881_fu_1212_p3 : 5'd22);

assign select_ln117_1883_fu_1239_p3 = ((or_ln117_1764_fu_1220_p2[0:0] == 1'b1) ? select_ln117_1882_fu_1225_p3 : 5'd23);

assign select_ln117_1884_fu_1253_p3 = ((or_ln117_1765_fu_1233_p2[0:0] == 1'b1) ? select_ln117_1883_fu_1239_p3 : 5'd24);

assign select_ln117_1885_fu_1267_p3 = ((or_ln117_1766_fu_1247_p2[0:0] == 1'b1) ? select_ln117_1884_fu_1253_p3 : 5'd25);

assign select_ln117_1886_fu_1281_p3 = ((or_ln117_1767_fu_1261_p2[0:0] == 1'b1) ? select_ln117_1885_fu_1267_p3 : 5'd26);

assign select_ln117_1887_fu_1295_p3 = ((or_ln117_1768_fu_1275_p2[0:0] == 1'b1) ? select_ln117_1886_fu_1281_p3 : 5'd27);

assign select_ln117_1888_fu_1309_p3 = ((or_ln117_1769_fu_1289_p2[0:0] == 1'b1) ? select_ln117_1887_fu_1295_p3 : 5'd28);

assign select_ln117_1889_fu_1323_p3 = ((or_ln117_1770_fu_1303_p2[0:0] == 1'b1) ? select_ln117_1888_fu_1309_p3 : 5'd29);

assign select_ln117_fu_832_p3 = ((or_ln117_fu_810_p2[0:0] == 1'b1) ? zext_ln117_fu_822_p1 : 2'd2);

assign tmp_fu_1344_p63 = 'bx;

assign tmp_fu_1344_p64 = ((or_ln117_1771_fu_1317_p2[0:0] == 1'b1) ? select_ln117_1889_fu_1323_p3 : 5'd30);

assign xor_ln104_917_fu_606_p2 = (icmp_ln86_1916_fu_420_p2 ^ 1'd1);

assign xor_ln104_918_fu_624_p2 = (icmp_ln86_1917_fu_426_p2 ^ 1'd1);

assign xor_ln104_919_fu_642_p2 = (icmp_ln86_1918_fu_432_p2 ^ 1'd1);

assign xor_ln104_920_fu_660_p2 = (icmp_ln86_1919_fu_438_p2 ^ 1'd1);

assign xor_ln104_921_fu_678_p2 = (icmp_ln86_1920_fu_444_p2 ^ 1'd1);

assign xor_ln104_922_fu_1034_p2 = (icmp_ln86_1921_reg_1484 ^ 1'd1);

assign xor_ln104_923_fu_696_p2 = (icmp_ln86_1922_fu_456_p2 ^ 1'd1);

assign xor_ln104_924_fu_708_p2 = (icmp_ln86_1923_fu_462_p2 ^ 1'd1);

assign xor_ln104_925_fu_720_p2 = (icmp_ln86_1924_fu_468_p2 ^ 1'd1);

assign xor_ln104_926_fu_1044_p2 = (icmp_ln86_1925_reg_1490 ^ 1'd1);

assign xor_ln104_927_fu_1053_p2 = (icmp_ln86_1926_reg_1495 ^ 1'd1);

assign xor_ln104_928_fu_738_p2 = (icmp_ln86_1927_fu_486_p2 ^ 1'd1);

assign xor_ln104_929_fu_1063_p2 = (icmp_ln86_1928_reg_1501 ^ 1'd1);

assign xor_ln104_930_fu_1073_p2 = (icmp_ln86_1929_reg_1507 ^ 1'd1);

assign xor_ln104_fu_594_p2 = (icmp_ln86_fu_414_p2 ^ 1'd1);

assign xor_ln117_fu_816_p2 = (1'd1 ^ and_ln102_2172_fu_732_p2);

assign zext_ln117_208_fu_854_p1 = select_ln117_1863_fu_846_p3;

assign zext_ln117_209_fu_914_p1 = select_ln117_1867_fu_906_p3;

assign zext_ln117_210_fu_1144_p1 = select_ln117_1875_reg_1583;

assign zext_ln117_fu_822_p1 = xor_ln117_fu_816_p2;

endmodule //my_prj_decision_function_103
