// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_50 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_3_val,
        x_7_val,
        x_8_val,
        x_9_val,
        x_10_val,
        x_11_val,
        x_15_val,
        x_17_val,
        x_18_val,
        x_19_val,
        x_21_val,
        x_24_val,
        x_25_val,
        x_36_val,
        x_47_val,
        x_48_val,
        x_49_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_3_val;
input  [17:0] x_7_val;
input  [17:0] x_8_val;
input  [17:0] x_9_val;
input  [17:0] x_10_val;
input  [17:0] x_11_val;
input  [17:0] x_15_val;
input  [17:0] x_17_val;
input  [17:0] x_18_val;
input  [17:0] x_19_val;
input  [17:0] x_21_val;
input  [17:0] x_24_val;
input  [17:0] x_25_val;
input  [17:0] x_36_val;
input  [17:0] x_47_val;
input  [17:0] x_48_val;
input  [17:0] x_49_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_378_p2;
reg   [0:0] icmp_ln86_reg_1442;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_1329_fu_390_p2;
reg   [0:0] icmp_ln86_1329_reg_1451;
wire   [0:0] icmp_ln86_1332_fu_408_p2;
reg   [0:0] icmp_ln86_1332_reg_1457;
wire   [0:0] icmp_ln86_1333_fu_414_p2;
reg   [0:0] icmp_ln86_1333_reg_1463;
wire   [0:0] icmp_ln86_1338_fu_444_p2;
reg   [0:0] icmp_ln86_1338_reg_1469;
wire   [0:0] icmp_ln86_1339_fu_450_p2;
reg   [0:0] icmp_ln86_1339_reg_1475;
wire   [0:0] icmp_ln86_1340_fu_456_p2;
reg   [0:0] icmp_ln86_1340_reg_1481;
wire   [0:0] icmp_ln86_1341_fu_462_p2;
reg   [0:0] icmp_ln86_1341_reg_1487;
wire   [0:0] icmp_ln86_1349_fu_520_p2;
reg   [0:0] icmp_ln86_1349_reg_1493;
wire   [0:0] icmp_ln86_1350_fu_526_p2;
reg   [0:0] icmp_ln86_1350_reg_1498;
wire   [0:0] icmp_ln86_1351_fu_532_p2;
reg   [0:0] icmp_ln86_1351_reg_1503;
wire   [0:0] icmp_ln86_1352_fu_538_p2;
reg   [0:0] icmp_ln86_1352_reg_1508;
wire   [0:0] icmp_ln86_1353_fu_544_p2;
reg   [0:0] icmp_ln86_1353_reg_1513;
wire   [0:0] icmp_ln86_1354_fu_550_p2;
reg   [0:0] icmp_ln86_1354_reg_1518;
wire   [0:0] icmp_ln86_1355_fu_556_p2;
reg   [0:0] icmp_ln86_1355_reg_1523;
wire   [0:0] icmp_ln86_1356_fu_562_p2;
reg   [0:0] icmp_ln86_1356_reg_1528;
wire   [3:0] select_ln117_1298_fu_936_p3;
reg   [3:0] select_ln117_1298_reg_1533;
wire    ap_block_pp0_stage0;
wire   [10:0] tmp_fu_498_p4;
wire   [0:0] icmp_ln86_1328_fu_384_p2;
wire   [0:0] xor_ln104_635_fu_574_p2;
wire   [0:0] icmp_ln86_1330_fu_396_p2;
wire   [0:0] and_ln102_fu_568_p2;
wire   [0:0] xor_ln104_637_fu_592_p2;
wire   [0:0] icmp_ln86_1331_fu_402_p2;
wire   [0:0] and_ln104_fu_580_p2;
wire   [0:0] xor_ln104_638_fu_610_p2;
wire   [0:0] icmp_ln86_1334_fu_420_p2;
wire   [0:0] and_ln102_1279_fu_586_p2;
wire   [0:0] icmp_ln86_1335_fu_426_p2;
wire   [0:0] and_ln104_256_fu_598_p2;
wire   [0:0] icmp_ln86_1336_fu_432_p2;
wire   [0:0] and_ln102_1280_fu_604_p2;
wire   [0:0] icmp_ln86_1337_fu_438_p2;
wire   [0:0] and_ln104_257_fu_616_p2;
wire   [0:0] icmp_ln86_1342_fu_468_p2;
wire   [0:0] and_ln102_1283_fu_622_p2;
wire   [0:0] icmp_ln86_1343_fu_474_p2;
wire   [0:0] xor_ln104_641_fu_628_p2;
wire   [0:0] and_ln102_1306_fu_676_p2;
wire   [0:0] icmp_ln86_1344_fu_480_p2;
wire   [0:0] and_ln102_1284_fu_634_p2;
wire   [0:0] icmp_ln86_1345_fu_486_p2;
wire   [0:0] xor_ln104_642_fu_640_p2;
wire   [0:0] and_ln102_1307_fu_694_p2;
wire   [0:0] icmp_ln86_1346_fu_492_p2;
wire   [0:0] xor_ln104_643_fu_652_p2;
wire   [0:0] and_ln102_1308_fu_706_p2;
wire   [0:0] icmp_ln86_1383_fu_508_p2;
wire   [0:0] and_ln102_1286_fu_658_p2;
wire   [0:0] icmp_ln86_1348_fu_514_p2;
wire   [0:0] xor_ln104_644_fu_664_p2;
wire   [0:0] and_ln102_1309_fu_724_p2;
wire   [0:0] and_ln102_1285_fu_646_p2;
wire   [0:0] and_ln102_1291_fu_670_p2;
wire   [0:0] xor_ln117_fu_742_p2;
wire   [0:0] or_ln117_fu_736_p2;
wire   [1:0] zext_ln117_fu_748_p1;
wire   [0:0] or_ln117_1203_fu_752_p2;
wire   [0:0] and_ln102_1292_fu_682_p2;
wire   [1:0] select_ln117_fu_758_p3;
wire   [1:0] select_ln117_1286_fu_772_p3;
wire   [0:0] or_ln117_1204_fu_766_p2;
wire   [2:0] zext_ln117_147_fu_780_p1;
wire   [0:0] or_ln117_1205_fu_784_p2;
wire   [0:0] and_ln102_1293_fu_688_p2;
wire   [2:0] select_ln117_1287_fu_790_p3;
wire   [0:0] or_ln117_1206_fu_798_p2;
wire   [2:0] select_ln117_1288_fu_804_p3;
wire   [0:0] or_ln117_1207_fu_812_p2;
wire   [0:0] and_ln102_1294_fu_700_p2;
wire   [2:0] select_ln117_1289_fu_818_p3;
wire   [2:0] select_ln117_1290_fu_832_p3;
wire   [0:0] or_ln117_1208_fu_826_p2;
wire   [3:0] zext_ln117_148_fu_840_p1;
wire   [0:0] or_ln117_1209_fu_844_p2;
wire   [0:0] and_ln102_1295_fu_712_p2;
wire   [3:0] select_ln117_1291_fu_850_p3;
wire   [0:0] or_ln117_1210_fu_858_p2;
wire   [3:0] select_ln117_1292_fu_864_p3;
wire   [0:0] or_ln117_1211_fu_872_p2;
wire   [0:0] and_ln102_1296_fu_718_p2;
wire   [3:0] select_ln117_1293_fu_878_p3;
wire   [0:0] or_ln117_1212_fu_886_p2;
wire   [3:0] select_ln117_1294_fu_892_p3;
wire   [0:0] or_ln117_1213_fu_900_p2;
wire   [0:0] and_ln102_1297_fu_730_p2;
wire   [3:0] select_ln117_1295_fu_906_p3;
wire   [0:0] or_ln117_1214_fu_914_p2;
wire   [3:0] select_ln117_1296_fu_920_p3;
wire   [3:0] select_ln117_1297_fu_928_p3;
wire   [0:0] xor_ln104_fu_944_p2;
wire   [0:0] xor_ln104_636_fu_954_p2;
wire   [0:0] and_ln102_1278_fu_949_p2;
wire   [0:0] xor_ln104_639_fu_970_p2;
wire   [0:0] and_ln104_255_fu_959_p2;
wire   [0:0] xor_ln104_640_fu_986_p2;
wire   [0:0] and_ln102_1281_fu_965_p2;
wire   [0:0] and_ln104_258_fu_975_p2;
wire   [0:0] and_ln102_1282_fu_981_p2;
wire   [0:0] and_ln104_259_fu_991_p2;
wire   [0:0] and_ln102_1287_fu_997_p2;
wire   [0:0] xor_ln104_645_fu_1002_p2;
wire   [0:0] and_ln102_1310_fu_1042_p2;
wire   [0:0] and_ln102_1288_fu_1007_p2;
wire   [0:0] xor_ln104_646_fu_1012_p2;
wire   [0:0] and_ln102_1311_fu_1058_p2;
wire   [0:0] and_ln102_1289_fu_1017_p2;
wire   [0:0] xor_ln104_647_fu_1022_p2;
wire   [0:0] and_ln102_1312_fu_1074_p2;
wire   [0:0] and_ln102_1290_fu_1027_p2;
wire   [0:0] xor_ln104_648_fu_1032_p2;
wire   [0:0] and_ln102_1313_fu_1090_p2;
wire   [0:0] and_ln102_1298_fu_1037_p2;
wire   [0:0] or_ln117_1215_fu_1101_p2;
wire   [4:0] zext_ln117_149_fu_1106_p1;
wire   [0:0] or_ln117_1216_fu_1109_p2;
wire   [0:0] and_ln102_1299_fu_1047_p2;
wire   [4:0] select_ln117_1299_fu_1114_p3;
wire   [0:0] or_ln117_1217_fu_1122_p2;
wire   [4:0] select_ln117_1300_fu_1128_p3;
wire   [0:0] or_ln117_1218_fu_1136_p2;
wire   [0:0] and_ln102_1300_fu_1053_p2;
wire   [4:0] select_ln117_1301_fu_1141_p3;
wire   [0:0] or_ln117_1219_fu_1149_p2;
wire   [4:0] select_ln117_1302_fu_1155_p3;
wire   [0:0] or_ln117_1220_fu_1163_p2;
wire   [0:0] and_ln102_1301_fu_1063_p2;
wire   [4:0] select_ln117_1303_fu_1169_p3;
wire   [0:0] or_ln117_1221_fu_1177_p2;
wire   [4:0] select_ln117_1304_fu_1183_p3;
wire   [0:0] or_ln117_1222_fu_1191_p2;
wire   [0:0] and_ln102_1302_fu_1069_p2;
wire   [4:0] select_ln117_1305_fu_1196_p3;
wire   [0:0] or_ln117_1223_fu_1204_p2;
wire   [4:0] select_ln117_1306_fu_1210_p3;
wire   [0:0] or_ln117_1224_fu_1218_p2;
wire   [0:0] and_ln102_1303_fu_1079_p2;
wire   [4:0] select_ln117_1307_fu_1224_p3;
wire   [0:0] or_ln117_1225_fu_1232_p2;
wire   [4:0] select_ln117_1308_fu_1238_p3;
wire   [0:0] or_ln117_1226_fu_1246_p2;
wire   [0:0] and_ln102_1304_fu_1085_p2;
wire   [4:0] select_ln117_1309_fu_1252_p3;
wire   [0:0] or_ln117_1227_fu_1260_p2;
wire   [4:0] select_ln117_1310_fu_1266_p3;
wire   [0:0] or_ln117_1228_fu_1274_p2;
wire   [0:0] and_ln102_1305_fu_1095_p2;
wire   [4:0] select_ln117_1311_fu_1280_p3;
wire   [0:0] or_ln117_1229_fu_1288_p2;
wire   [4:0] select_ln117_1312_fu_1294_p3;
wire   [11:0] agg_result_fu_1310_p63;
wire   [4:0] agg_result_fu_1310_p64;
wire   [11:0] agg_result_fu_1310_p65;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1310_p1;
wire   [4:0] agg_result_fu_1310_p3;
wire   [4:0] agg_result_fu_1310_p5;
wire   [4:0] agg_result_fu_1310_p7;
wire   [4:0] agg_result_fu_1310_p9;
wire   [4:0] agg_result_fu_1310_p11;
wire   [4:0] agg_result_fu_1310_p13;
wire   [4:0] agg_result_fu_1310_p15;
wire   [4:0] agg_result_fu_1310_p17;
wire   [4:0] agg_result_fu_1310_p19;
wire   [4:0] agg_result_fu_1310_p21;
wire   [4:0] agg_result_fu_1310_p23;
wire   [4:0] agg_result_fu_1310_p25;
wire   [4:0] agg_result_fu_1310_p27;
wire   [4:0] agg_result_fu_1310_p29;
wire   [4:0] agg_result_fu_1310_p31;
wire  signed [4:0] agg_result_fu_1310_p33;
wire  signed [4:0] agg_result_fu_1310_p35;
wire  signed [4:0] agg_result_fu_1310_p37;
wire  signed [4:0] agg_result_fu_1310_p39;
wire  signed [4:0] agg_result_fu_1310_p41;
wire  signed [4:0] agg_result_fu_1310_p43;
wire  signed [4:0] agg_result_fu_1310_p45;
wire  signed [4:0] agg_result_fu_1310_p47;
wire  signed [4:0] agg_result_fu_1310_p49;
wire  signed [4:0] agg_result_fu_1310_p51;
wire  signed [4:0] agg_result_fu_1310_p53;
wire  signed [4:0] agg_result_fu_1310_p55;
wire  signed [4:0] agg_result_fu_1310_p57;
wire  signed [4:0] agg_result_fu_1310_p59;
wire  signed [4:0] agg_result_fu_1310_p61;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_63_5_12_1_1_x1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 12 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 12 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 12 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_63_5_12_1_1_x1_U1112(
    .din0(12'd3571),
    .din1(12'd275),
    .din2(12'd1861),
    .din3(12'd4074),
    .din4(12'd1073),
    .din5(12'd159),
    .din6(12'd3512),
    .din7(12'd1234),
    .din8(12'd3933),
    .din9(12'd52),
    .din10(12'd3685),
    .din11(12'd447),
    .din12(12'd3700),
    .din13(12'd4054),
    .din14(12'd3872),
    .din15(12'd3879),
    .din16(12'd3289),
    .din17(12'd122),
    .din18(12'd3850),
    .din19(12'd54),
    .din20(12'd3871),
    .din21(12'd241),
    .din22(12'd56),
    .din23(12'd4072),
    .din24(12'd161),
    .din25(12'd3888),
    .din26(12'd232),
    .din27(12'd272),
    .din28(12'd4071),
    .din29(12'd3849),
    .din30(12'd4009),
    .def(agg_result_fu_1310_p63),
    .sel(agg_result_fu_1310_p64),
    .dout(agg_result_fu_1310_p65)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_1329_reg_1451 <= icmp_ln86_1329_fu_390_p2;
        icmp_ln86_1332_reg_1457 <= icmp_ln86_1332_fu_408_p2;
        icmp_ln86_1333_reg_1463 <= icmp_ln86_1333_fu_414_p2;
        icmp_ln86_1338_reg_1469 <= icmp_ln86_1338_fu_444_p2;
        icmp_ln86_1339_reg_1475 <= icmp_ln86_1339_fu_450_p2;
        icmp_ln86_1340_reg_1481 <= icmp_ln86_1340_fu_456_p2;
        icmp_ln86_1341_reg_1487 <= icmp_ln86_1341_fu_462_p2;
        icmp_ln86_1349_reg_1493 <= icmp_ln86_1349_fu_520_p2;
        icmp_ln86_1350_reg_1498 <= icmp_ln86_1350_fu_526_p2;
        icmp_ln86_1351_reg_1503 <= icmp_ln86_1351_fu_532_p2;
        icmp_ln86_1352_reg_1508 <= icmp_ln86_1352_fu_538_p2;
        icmp_ln86_1353_reg_1513 <= icmp_ln86_1353_fu_544_p2;
        icmp_ln86_1354_reg_1518 <= icmp_ln86_1354_fu_550_p2;
        icmp_ln86_1355_reg_1523 <= icmp_ln86_1355_fu_556_p2;
        icmp_ln86_1356_reg_1528 <= icmp_ln86_1356_fu_562_p2;
        icmp_ln86_reg_1442 <= icmp_ln86_fu_378_p2;
        select_ln117_1298_reg_1533 <= select_ln117_1298_fu_936_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1310_p63 = 'bx;

assign agg_result_fu_1310_p64 = ((or_ln117_1229_fu_1288_p2[0:0] == 1'b1) ? select_ln117_1312_fu_1294_p3 : 5'd30);

assign and_ln102_1278_fu_949_p2 = (xor_ln104_fu_944_p2 & icmp_ln86_1329_reg_1451);

assign and_ln102_1279_fu_586_p2 = (icmp_ln86_1330_fu_396_p2 & and_ln102_fu_568_p2);

assign and_ln102_1280_fu_604_p2 = (icmp_ln86_1331_fu_402_p2 & and_ln104_fu_580_p2);

assign and_ln102_1281_fu_965_p2 = (icmp_ln86_1332_reg_1457 & and_ln102_1278_fu_949_p2);

assign and_ln102_1282_fu_981_p2 = (icmp_ln86_1333_reg_1463 & and_ln104_255_fu_959_p2);

assign and_ln102_1283_fu_622_p2 = (icmp_ln86_1334_fu_420_p2 & and_ln102_1279_fu_586_p2);

assign and_ln102_1284_fu_634_p2 = (icmp_ln86_1335_fu_426_p2 & and_ln104_256_fu_598_p2);

assign and_ln102_1285_fu_646_p2 = (icmp_ln86_1336_fu_432_p2 & and_ln102_1280_fu_604_p2);

assign and_ln102_1286_fu_658_p2 = (icmp_ln86_1337_fu_438_p2 & and_ln104_257_fu_616_p2);

assign and_ln102_1287_fu_997_p2 = (icmp_ln86_1338_reg_1469 & and_ln102_1281_fu_965_p2);

assign and_ln102_1288_fu_1007_p2 = (icmp_ln86_1339_reg_1475 & and_ln104_258_fu_975_p2);

assign and_ln102_1289_fu_1017_p2 = (icmp_ln86_1340_reg_1481 & and_ln102_1282_fu_981_p2);

assign and_ln102_1290_fu_1027_p2 = (icmp_ln86_1341_reg_1487 & and_ln104_259_fu_991_p2);

assign and_ln102_1291_fu_670_p2 = (icmp_ln86_1342_fu_468_p2 & and_ln102_1283_fu_622_p2);

assign and_ln102_1292_fu_682_p2 = (and_ln102_1306_fu_676_p2 & and_ln102_1279_fu_586_p2);

assign and_ln102_1293_fu_688_p2 = (icmp_ln86_1344_fu_480_p2 & and_ln102_1284_fu_634_p2);

assign and_ln102_1294_fu_700_p2 = (and_ln104_256_fu_598_p2 & and_ln102_1307_fu_694_p2);

assign and_ln102_1295_fu_712_p2 = (and_ln102_1308_fu_706_p2 & and_ln102_1280_fu_604_p2);

assign and_ln102_1296_fu_718_p2 = (icmp_ln86_1383_fu_508_p2 & and_ln102_1286_fu_658_p2);

assign and_ln102_1297_fu_730_p2 = (and_ln104_257_fu_616_p2 & and_ln102_1309_fu_724_p2);

assign and_ln102_1298_fu_1037_p2 = (icmp_ln86_1349_reg_1493 & and_ln102_1287_fu_997_p2);

assign and_ln102_1299_fu_1047_p2 = (and_ln102_1310_fu_1042_p2 & and_ln102_1281_fu_965_p2);

assign and_ln102_1300_fu_1053_p2 = (icmp_ln86_1351_reg_1503 & and_ln102_1288_fu_1007_p2);

assign and_ln102_1301_fu_1063_p2 = (and_ln104_258_fu_975_p2 & and_ln102_1311_fu_1058_p2);

assign and_ln102_1302_fu_1069_p2 = (icmp_ln86_1353_reg_1513 & and_ln102_1289_fu_1017_p2);

assign and_ln102_1303_fu_1079_p2 = (and_ln102_1312_fu_1074_p2 & and_ln102_1282_fu_981_p2);

assign and_ln102_1304_fu_1085_p2 = (icmp_ln86_1355_reg_1523 & and_ln102_1290_fu_1027_p2);

assign and_ln102_1305_fu_1095_p2 = (and_ln104_259_fu_991_p2 & and_ln102_1313_fu_1090_p2);

assign and_ln102_1306_fu_676_p2 = (xor_ln104_641_fu_628_p2 & icmp_ln86_1343_fu_474_p2);

assign and_ln102_1307_fu_694_p2 = (xor_ln104_642_fu_640_p2 & icmp_ln86_1345_fu_486_p2);

assign and_ln102_1308_fu_706_p2 = (xor_ln104_643_fu_652_p2 & icmp_ln86_1346_fu_492_p2);

assign and_ln102_1309_fu_724_p2 = (xor_ln104_644_fu_664_p2 & icmp_ln86_1348_fu_514_p2);

assign and_ln102_1310_fu_1042_p2 = (xor_ln104_645_fu_1002_p2 & icmp_ln86_1350_reg_1498);

assign and_ln102_1311_fu_1058_p2 = (xor_ln104_646_fu_1012_p2 & icmp_ln86_1352_reg_1508);

assign and_ln102_1312_fu_1074_p2 = (xor_ln104_647_fu_1022_p2 & icmp_ln86_1354_reg_1518);

assign and_ln102_1313_fu_1090_p2 = (xor_ln104_648_fu_1032_p2 & icmp_ln86_1356_reg_1528);

assign and_ln102_fu_568_p2 = (icmp_ln86_fu_378_p2 & icmp_ln86_1328_fu_384_p2);

assign and_ln104_255_fu_959_p2 = (xor_ln104_fu_944_p2 & xor_ln104_636_fu_954_p2);

assign and_ln104_256_fu_598_p2 = (xor_ln104_637_fu_592_p2 & and_ln102_fu_568_p2);

assign and_ln104_257_fu_616_p2 = (xor_ln104_638_fu_610_p2 & and_ln104_fu_580_p2);

assign and_ln104_258_fu_975_p2 = (xor_ln104_639_fu_970_p2 & and_ln102_1278_fu_949_p2);

assign and_ln104_259_fu_991_p2 = (xor_ln104_640_fu_986_p2 & and_ln104_255_fu_959_p2);

assign and_ln104_fu_580_p2 = (xor_ln104_635_fu_574_p2 & icmp_ln86_fu_378_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1310_p65;

assign icmp_ln86_1328_fu_384_p2 = (($signed(x_17_val) < $signed(18'd27)) ? 1'b1 : 1'b0);

assign icmp_ln86_1329_fu_390_p2 = (($signed(x_1_val) < $signed(18'd33465)) ? 1'b1 : 1'b0);

assign icmp_ln86_1330_fu_396_p2 = (($signed(x_48_val) < $signed(18'd96757)) ? 1'b1 : 1'b0);

assign icmp_ln86_1331_fu_402_p2 = (($signed(x_9_val) < $signed(18'd491)) ? 1'b1 : 1'b0);

assign icmp_ln86_1332_fu_408_p2 = (($signed(x_18_val) < $signed(18'd1015)) ? 1'b1 : 1'b0);

assign icmp_ln86_1333_fu_414_p2 = (($signed(x_19_val) < $signed(18'd3197)) ? 1'b1 : 1'b0);

assign icmp_ln86_1334_fu_420_p2 = (($signed(x_19_val) < $signed(18'd343)) ? 1'b1 : 1'b0);

assign icmp_ln86_1335_fu_426_p2 = (($signed(x_19_val) < $signed(18'd1424)) ? 1'b1 : 1'b0);

assign icmp_ln86_1336_fu_432_p2 = (($signed(x_49_val) < $signed(18'd4682)) ? 1'b1 : 1'b0);

assign icmp_ln86_1337_fu_438_p2 = (($signed(x_1_val) < $signed(18'd180984)) ? 1'b1 : 1'b0);

assign icmp_ln86_1338_fu_444_p2 = (($signed(x_36_val) < $signed(18'd7)) ? 1'b1 : 1'b0);

assign icmp_ln86_1339_fu_450_p2 = (($signed(x_7_val) < $signed(18'd7698)) ? 1'b1 : 1'b0);

assign icmp_ln86_1340_fu_456_p2 = (($signed(x_7_val) < $signed(18'd8171)) ? 1'b1 : 1'b0);

assign icmp_ln86_1341_fu_462_p2 = (($signed(x_47_val) < $signed(18'd40598)) ? 1'b1 : 1'b0);

assign icmp_ln86_1342_fu_468_p2 = (($signed(x_10_val) < $signed(18'd933)) ? 1'b1 : 1'b0);

assign icmp_ln86_1343_fu_474_p2 = (($signed(x_49_val) < $signed(18'd94511)) ? 1'b1 : 1'b0);

assign icmp_ln86_1344_fu_480_p2 = (($signed(x_15_val) < $signed(18'd10)) ? 1'b1 : 1'b0);

assign icmp_ln86_1345_fu_486_p2 = (($signed(x_17_val) < $signed(18'd15)) ? 1'b1 : 1'b0);

assign icmp_ln86_1346_fu_492_p2 = (($signed(x_24_val) < $signed(18'd456)) ? 1'b1 : 1'b0);

assign icmp_ln86_1348_fu_514_p2 = (($signed(x_11_val) < $signed(18'd508)) ? 1'b1 : 1'b0);

assign icmp_ln86_1349_fu_520_p2 = (($signed(x_48_val) < $signed(18'd87809)) ? 1'b1 : 1'b0);

assign icmp_ln86_1350_fu_526_p2 = (($signed(x_36_val) < $signed(18'd9)) ? 1'b1 : 1'b0);

assign icmp_ln86_1351_fu_532_p2 = (($signed(x_3_val) < $signed(18'd89908)) ? 1'b1 : 1'b0);

assign icmp_ln86_1352_fu_538_p2 = (($signed(x_3_val) < $signed(18'd94317)) ? 1'b1 : 1'b0);

assign icmp_ln86_1353_fu_544_p2 = (($signed(x_24_val) < $signed(18'd252)) ? 1'b1 : 1'b0);

assign icmp_ln86_1354_fu_550_p2 = (($signed(x_17_val) < $signed(18'd28)) ? 1'b1 : 1'b0);

assign icmp_ln86_1355_fu_556_p2 = (($signed(x_21_val) < $signed(18'd146)) ? 1'b1 : 1'b0);

assign icmp_ln86_1356_fu_562_p2 = (($signed(x_8_val) < $signed(18'd1288)) ? 1'b1 : 1'b0);

assign icmp_ln86_1383_fu_508_p2 = (($signed(tmp_fu_498_p4) < $signed(11'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_378_p2 = (($signed(x_1_val) < $signed(18'd226964)) ? 1'b1 : 1'b0);

assign or_ln117_1203_fu_752_p2 = (and_ln102_1285_fu_646_p2 | and_ln102_1283_fu_622_p2);

assign or_ln117_1204_fu_766_p2 = (or_ln117_1203_fu_752_p2 | and_ln102_1292_fu_682_p2);

assign or_ln117_1205_fu_784_p2 = (and_ln102_1285_fu_646_p2 | and_ln102_1279_fu_586_p2);

assign or_ln117_1206_fu_798_p2 = (or_ln117_1205_fu_784_p2 | and_ln102_1293_fu_688_p2);

assign or_ln117_1207_fu_812_p2 = (or_ln117_1205_fu_784_p2 | and_ln102_1284_fu_634_p2);

assign or_ln117_1208_fu_826_p2 = (or_ln117_1207_fu_812_p2 | and_ln102_1294_fu_700_p2);

assign or_ln117_1209_fu_844_p2 = (and_ln102_fu_568_p2 | and_ln102_1285_fu_646_p2);

assign or_ln117_1210_fu_858_p2 = (or_ln117_1209_fu_844_p2 | and_ln102_1295_fu_712_p2);

assign or_ln117_1211_fu_872_p2 = (and_ln102_fu_568_p2 | and_ln102_1280_fu_604_p2);

assign or_ln117_1212_fu_886_p2 = (or_ln117_1211_fu_872_p2 | and_ln102_1296_fu_718_p2);

assign or_ln117_1213_fu_900_p2 = (or_ln117_1211_fu_872_p2 | and_ln102_1286_fu_658_p2);

assign or_ln117_1214_fu_914_p2 = (or_ln117_1213_fu_900_p2 | and_ln102_1297_fu_730_p2);

assign or_ln117_1215_fu_1101_p2 = (icmp_ln86_reg_1442 | and_ln102_1298_fu_1037_p2);

assign or_ln117_1216_fu_1109_p2 = (icmp_ln86_reg_1442 | and_ln102_1287_fu_997_p2);

assign or_ln117_1217_fu_1122_p2 = (or_ln117_1216_fu_1109_p2 | and_ln102_1299_fu_1047_p2);

assign or_ln117_1218_fu_1136_p2 = (icmp_ln86_reg_1442 | and_ln102_1281_fu_965_p2);

assign or_ln117_1219_fu_1149_p2 = (or_ln117_1218_fu_1136_p2 | and_ln102_1300_fu_1053_p2);

assign or_ln117_1220_fu_1163_p2 = (or_ln117_1218_fu_1136_p2 | and_ln102_1288_fu_1007_p2);

assign or_ln117_1221_fu_1177_p2 = (or_ln117_1220_fu_1163_p2 | and_ln102_1301_fu_1063_p2);

assign or_ln117_1222_fu_1191_p2 = (icmp_ln86_reg_1442 | and_ln102_1278_fu_949_p2);

assign or_ln117_1223_fu_1204_p2 = (or_ln117_1222_fu_1191_p2 | and_ln102_1302_fu_1069_p2);

assign or_ln117_1224_fu_1218_p2 = (or_ln117_1222_fu_1191_p2 | and_ln102_1289_fu_1017_p2);

assign or_ln117_1225_fu_1232_p2 = (or_ln117_1224_fu_1218_p2 | and_ln102_1303_fu_1079_p2);

assign or_ln117_1226_fu_1246_p2 = (or_ln117_1222_fu_1191_p2 | and_ln102_1282_fu_981_p2);

assign or_ln117_1227_fu_1260_p2 = (or_ln117_1226_fu_1246_p2 | and_ln102_1304_fu_1085_p2);

assign or_ln117_1228_fu_1274_p2 = (or_ln117_1226_fu_1246_p2 | and_ln102_1290_fu_1027_p2);

assign or_ln117_1229_fu_1288_p2 = (or_ln117_1228_fu_1274_p2 | and_ln102_1305_fu_1095_p2);

assign or_ln117_fu_736_p2 = (and_ln102_1291_fu_670_p2 | and_ln102_1285_fu_646_p2);

assign select_ln117_1286_fu_772_p3 = ((or_ln117_1203_fu_752_p2[0:0] == 1'b1) ? select_ln117_fu_758_p3 : 2'd3);

assign select_ln117_1287_fu_790_p3 = ((or_ln117_1204_fu_766_p2[0:0] == 1'b1) ? zext_ln117_147_fu_780_p1 : 3'd4);

assign select_ln117_1288_fu_804_p3 = ((or_ln117_1205_fu_784_p2[0:0] == 1'b1) ? select_ln117_1287_fu_790_p3 : 3'd5);

assign select_ln117_1289_fu_818_p3 = ((or_ln117_1206_fu_798_p2[0:0] == 1'b1) ? select_ln117_1288_fu_804_p3 : 3'd6);

assign select_ln117_1290_fu_832_p3 = ((or_ln117_1207_fu_812_p2[0:0] == 1'b1) ? select_ln117_1289_fu_818_p3 : 3'd7);

assign select_ln117_1291_fu_850_p3 = ((or_ln117_1208_fu_826_p2[0:0] == 1'b1) ? zext_ln117_148_fu_840_p1 : 4'd8);

assign select_ln117_1292_fu_864_p3 = ((or_ln117_1209_fu_844_p2[0:0] == 1'b1) ? select_ln117_1291_fu_850_p3 : 4'd9);

assign select_ln117_1293_fu_878_p3 = ((or_ln117_1210_fu_858_p2[0:0] == 1'b1) ? select_ln117_1292_fu_864_p3 : 4'd10);

assign select_ln117_1294_fu_892_p3 = ((or_ln117_1211_fu_872_p2[0:0] == 1'b1) ? select_ln117_1293_fu_878_p3 : 4'd11);

assign select_ln117_1295_fu_906_p3 = ((or_ln117_1212_fu_886_p2[0:0] == 1'b1) ? select_ln117_1294_fu_892_p3 : 4'd12);

assign select_ln117_1296_fu_920_p3 = ((or_ln117_1213_fu_900_p2[0:0] == 1'b1) ? select_ln117_1295_fu_906_p3 : 4'd13);

assign select_ln117_1297_fu_928_p3 = ((or_ln117_1214_fu_914_p2[0:0] == 1'b1) ? select_ln117_1296_fu_920_p3 : 4'd14);

assign select_ln117_1298_fu_936_p3 = ((icmp_ln86_fu_378_p2[0:0] == 1'b1) ? select_ln117_1297_fu_928_p3 : 4'd15);

assign select_ln117_1299_fu_1114_p3 = ((or_ln117_1215_fu_1101_p2[0:0] == 1'b1) ? zext_ln117_149_fu_1106_p1 : 5'd16);

assign select_ln117_1300_fu_1128_p3 = ((or_ln117_1216_fu_1109_p2[0:0] == 1'b1) ? select_ln117_1299_fu_1114_p3 : 5'd17);

assign select_ln117_1301_fu_1141_p3 = ((or_ln117_1217_fu_1122_p2[0:0] == 1'b1) ? select_ln117_1300_fu_1128_p3 : 5'd18);

assign select_ln117_1302_fu_1155_p3 = ((or_ln117_1218_fu_1136_p2[0:0] == 1'b1) ? select_ln117_1301_fu_1141_p3 : 5'd19);

assign select_ln117_1303_fu_1169_p3 = ((or_ln117_1219_fu_1149_p2[0:0] == 1'b1) ? select_ln117_1302_fu_1155_p3 : 5'd20);

assign select_ln117_1304_fu_1183_p3 = ((or_ln117_1220_fu_1163_p2[0:0] == 1'b1) ? select_ln117_1303_fu_1169_p3 : 5'd21);

assign select_ln117_1305_fu_1196_p3 = ((or_ln117_1221_fu_1177_p2[0:0] == 1'b1) ? select_ln117_1304_fu_1183_p3 : 5'd22);

assign select_ln117_1306_fu_1210_p3 = ((or_ln117_1222_fu_1191_p2[0:0] == 1'b1) ? select_ln117_1305_fu_1196_p3 : 5'd23);

assign select_ln117_1307_fu_1224_p3 = ((or_ln117_1223_fu_1204_p2[0:0] == 1'b1) ? select_ln117_1306_fu_1210_p3 : 5'd24);

assign select_ln117_1308_fu_1238_p3 = ((or_ln117_1224_fu_1218_p2[0:0] == 1'b1) ? select_ln117_1307_fu_1224_p3 : 5'd25);

assign select_ln117_1309_fu_1252_p3 = ((or_ln117_1225_fu_1232_p2[0:0] == 1'b1) ? select_ln117_1308_fu_1238_p3 : 5'd26);

assign select_ln117_1310_fu_1266_p3 = ((or_ln117_1226_fu_1246_p2[0:0] == 1'b1) ? select_ln117_1309_fu_1252_p3 : 5'd27);

assign select_ln117_1311_fu_1280_p3 = ((or_ln117_1227_fu_1260_p2[0:0] == 1'b1) ? select_ln117_1310_fu_1266_p3 : 5'd28);

assign select_ln117_1312_fu_1294_p3 = ((or_ln117_1228_fu_1274_p2[0:0] == 1'b1) ? select_ln117_1311_fu_1280_p3 : 5'd29);

assign select_ln117_fu_758_p3 = ((or_ln117_fu_736_p2[0:0] == 1'b1) ? zext_ln117_fu_748_p1 : 2'd2);

assign tmp_fu_498_p4 = {{x_25_val[17:7]}};

assign xor_ln104_635_fu_574_p2 = (icmp_ln86_1328_fu_384_p2 ^ 1'd1);

assign xor_ln104_636_fu_954_p2 = (icmp_ln86_1329_reg_1451 ^ 1'd1);

assign xor_ln104_637_fu_592_p2 = (icmp_ln86_1330_fu_396_p2 ^ 1'd1);

assign xor_ln104_638_fu_610_p2 = (icmp_ln86_1331_fu_402_p2 ^ 1'd1);

assign xor_ln104_639_fu_970_p2 = (icmp_ln86_1332_reg_1457 ^ 1'd1);

assign xor_ln104_640_fu_986_p2 = (icmp_ln86_1333_reg_1463 ^ 1'd1);

assign xor_ln104_641_fu_628_p2 = (icmp_ln86_1334_fu_420_p2 ^ 1'd1);

assign xor_ln104_642_fu_640_p2 = (icmp_ln86_1335_fu_426_p2 ^ 1'd1);

assign xor_ln104_643_fu_652_p2 = (icmp_ln86_1336_fu_432_p2 ^ 1'd1);

assign xor_ln104_644_fu_664_p2 = (icmp_ln86_1337_fu_438_p2 ^ 1'd1);

assign xor_ln104_645_fu_1002_p2 = (icmp_ln86_1338_reg_1469 ^ 1'd1);

assign xor_ln104_646_fu_1012_p2 = (icmp_ln86_1339_reg_1475 ^ 1'd1);

assign xor_ln104_647_fu_1022_p2 = (icmp_ln86_1340_reg_1481 ^ 1'd1);

assign xor_ln104_648_fu_1032_p2 = (icmp_ln86_1341_reg_1487 ^ 1'd1);

assign xor_ln104_fu_944_p2 = (icmp_ln86_reg_1442 ^ 1'd1);

assign xor_ln117_fu_742_p2 = (1'd1 ^ and_ln102_1285_fu_646_p2);

assign zext_ln117_147_fu_780_p1 = select_ln117_1286_fu_772_p3;

assign zext_ln117_148_fu_840_p1 = select_ln117_1290_fu_832_p3;

assign zext_ln117_149_fu_1106_p1 = select_ln117_1298_reg_1533;

assign zext_ln117_fu_748_p1 = xor_ln117_fu_742_p2;

endmodule //my_prj_decision_function_50
