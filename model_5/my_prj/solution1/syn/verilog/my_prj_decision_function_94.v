// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_94 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_3_val,
        x_7_val,
        x_10_val,
        x_12_val,
        x_15_val,
        x_16_val,
        x_24_val,
        x_31_val,
        x_33_val,
        x_36_val,
        x_39_val,
        x_40_val,
        x_47_val,
        x_48_val,
        x_49_val,
        x_50_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_3_val;
input  [17:0] x_7_val;
input  [17:0] x_10_val;
input  [17:0] x_12_val;
input  [17:0] x_15_val;
input  [17:0] x_16_val;
input  [17:0] x_24_val;
input  [17:0] x_31_val;
input  [17:0] x_33_val;
input  [17:0] x_36_val;
input  [17:0] x_39_val;
input  [17:0] x_40_val;
input  [17:0] x_47_val;
input  [17:0] x_48_val;
input  [17:0] x_49_val;
input  [17:0] x_50_val;
input  [17:0] x_52_val;
output  [10:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_378_p2;
reg   [0:0] icmp_ln86_reg_1444;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_130_fu_390_p2;
reg   [0:0] icmp_ln86_130_reg_1453;
wire   [0:0] icmp_ln86_133_fu_408_p2;
reg   [0:0] icmp_ln86_133_reg_1459;
wire   [0:0] icmp_ln86_134_fu_414_p2;
reg   [0:0] icmp_ln86_134_reg_1465;
wire   [0:0] icmp_ln86_139_fu_444_p2;
reg   [0:0] icmp_ln86_139_reg_1471;
wire   [0:0] icmp_ln86_140_fu_450_p2;
reg   [0:0] icmp_ln86_140_reg_1477;
wire   [0:0] icmp_ln86_141_fu_456_p2;
reg   [0:0] icmp_ln86_141_reg_1483;
wire   [0:0] icmp_ln86_142_fu_462_p2;
reg   [0:0] icmp_ln86_142_reg_1489;
wire   [0:0] icmp_ln86_151_fu_516_p2;
reg   [0:0] icmp_ln86_151_reg_1495;
wire   [0:0] icmp_ln86_152_fu_522_p2;
reg   [0:0] icmp_ln86_152_reg_1500;
wire   [0:0] icmp_ln86_153_fu_528_p2;
reg   [0:0] icmp_ln86_153_reg_1505;
wire   [0:0] icmp_ln86_154_fu_534_p2;
reg   [0:0] icmp_ln86_154_reg_1510;
wire   [0:0] icmp_ln86_155_fu_540_p2;
reg   [0:0] icmp_ln86_155_reg_1515;
wire   [0:0] icmp_ln86_156_fu_546_p2;
reg   [0:0] icmp_ln86_156_reg_1520;
wire   [0:0] icmp_ln86_157_fu_552_p2;
reg   [0:0] icmp_ln86_157_reg_1525;
wire   [0:0] icmp_ln86_158_fu_558_p2;
reg   [0:0] icmp_ln86_158_reg_1530;
wire   [4:0] select_ln117_139_fu_938_p3;
reg   [4:0] select_ln117_139_reg_1535;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln86_129_fu_384_p2;
wire   [0:0] xor_ln104_62_fu_570_p2;
wire   [0:0] icmp_ln86_131_fu_396_p2;
wire   [0:0] and_ln102_fu_564_p2;
wire   [0:0] xor_ln104_64_fu_588_p2;
wire   [0:0] icmp_ln86_132_fu_402_p2;
wire   [0:0] and_ln104_fu_576_p2;
wire   [0:0] xor_ln104_65_fu_606_p2;
wire   [0:0] icmp_ln86_135_fu_420_p2;
wire   [0:0] and_ln102_158_fu_582_p2;
wire   [0:0] icmp_ln86_136_fu_426_p2;
wire   [0:0] and_ln104_27_fu_594_p2;
wire   [0:0] icmp_ln86_137_fu_432_p2;
wire   [0:0] and_ln102_159_fu_600_p2;
wire   [0:0] icmp_ln86_138_fu_438_p2;
wire   [0:0] and_ln104_28_fu_612_p2;
wire   [0:0] icmp_ln86_143_fu_468_p2;
wire   [0:0] and_ln102_162_fu_618_p2;
wire   [0:0] icmp_ln86_144_fu_474_p2;
wire   [0:0] xor_ln104_68_fu_624_p2;
wire   [0:0] and_ln102_171_fu_672_p2;
wire   [0:0] icmp_ln86_145_fu_480_p2;
wire   [0:0] and_ln102_163_fu_630_p2;
wire   [0:0] icmp_ln86_146_fu_486_p2;
wire   [0:0] xor_ln104_69_fu_636_p2;
wire   [0:0] and_ln102_174_fu_690_p2;
wire   [0:0] icmp_ln86_147_fu_492_p2;
wire   [0:0] and_ln102_164_fu_642_p2;
wire   [0:0] icmp_ln86_148_fu_498_p2;
wire   [0:0] xor_ln104_70_fu_648_p2;
wire   [0:0] and_ln102_177_fu_708_p2;
wire   [0:0] icmp_ln86_149_fu_504_p2;
wire   [0:0] and_ln102_165_fu_654_p2;
wire   [0:0] icmp_ln86_150_fu_510_p2;
wire   [0:0] xor_ln104_71_fu_660_p2;
wire   [0:0] and_ln102_180_fu_726_p2;
wire   [0:0] and_ln102_170_fu_666_p2;
wire   [0:0] xor_ln117_fu_738_p2;
wire   [0:0] and_ln102_172_fu_678_p2;
wire   [1:0] zext_ln117_fu_744_p1;
wire   [0:0] or_ln117_fu_748_p2;
wire   [1:0] select_ln117_fu_754_p3;
wire   [1:0] select_ln117_126_fu_762_p3;
wire   [0:0] and_ln102_173_fu_684_p2;
wire   [2:0] zext_ln117_16_fu_770_p1;
wire   [0:0] or_ln117_123_fu_774_p2;
wire   [2:0] select_ln117_127_fu_780_p3;
wire   [0:0] or_ln117_124_fu_788_p2;
wire   [0:0] and_ln102_175_fu_696_p2;
wire   [2:0] select_ln117_128_fu_794_p3;
wire   [0:0] or_ln117_125_fu_802_p2;
wire   [2:0] select_ln117_129_fu_808_p3;
wire   [2:0] select_ln117_130_fu_816_p3;
wire   [0:0] and_ln102_176_fu_702_p2;
wire   [3:0] zext_ln117_17_fu_824_p1;
wire   [0:0] or_ln117_126_fu_828_p2;
wire   [3:0] select_ln117_131_fu_834_p3;
wire   [0:0] or_ln117_127_fu_842_p2;
wire   [0:0] and_ln102_178_fu_714_p2;
wire   [3:0] select_ln117_132_fu_848_p3;
wire   [0:0] or_ln117_128_fu_856_p2;
wire   [3:0] select_ln117_133_fu_862_p3;
wire   [0:0] or_ln117_129_fu_870_p2;
wire   [0:0] and_ln102_179_fu_720_p2;
wire   [3:0] select_ln117_134_fu_876_p3;
wire   [0:0] or_ln117_130_fu_884_p2;
wire   [3:0] select_ln117_135_fu_890_p3;
wire   [0:0] or_ln117_131_fu_898_p2;
wire   [0:0] and_ln102_181_fu_732_p2;
wire   [3:0] select_ln117_136_fu_904_p3;
wire   [0:0] or_ln117_132_fu_912_p2;
wire   [3:0] select_ln117_137_fu_918_p3;
wire   [3:0] select_ln117_138_fu_926_p3;
wire   [4:0] zext_ln117_18_fu_934_p1;
wire   [0:0] xor_ln104_fu_946_p2;
wire   [0:0] xor_ln104_63_fu_956_p2;
wire   [0:0] and_ln102_157_fu_951_p2;
wire   [0:0] xor_ln104_66_fu_972_p2;
wire   [0:0] and_ln104_26_fu_961_p2;
wire   [0:0] xor_ln104_67_fu_988_p2;
wire   [0:0] and_ln102_160_fu_967_p2;
wire   [0:0] and_ln104_29_fu_977_p2;
wire   [0:0] and_ln102_161_fu_983_p2;
wire   [0:0] and_ln104_30_fu_993_p2;
wire   [0:0] and_ln102_166_fu_999_p2;
wire   [0:0] xor_ln104_72_fu_1004_p2;
wire   [0:0] and_ln102_183_fu_1044_p2;
wire   [0:0] and_ln102_167_fu_1009_p2;
wire   [0:0] xor_ln104_73_fu_1014_p2;
wire   [0:0] and_ln102_186_fu_1060_p2;
wire   [0:0] and_ln102_168_fu_1019_p2;
wire   [0:0] xor_ln104_74_fu_1024_p2;
wire   [0:0] and_ln102_189_fu_1076_p2;
wire   [0:0] and_ln102_169_fu_1029_p2;
wire   [0:0] xor_ln104_75_fu_1034_p2;
wire   [0:0] and_ln102_192_fu_1092_p2;
wire   [0:0] and_ln102_182_fu_1039_p2;
wire   [0:0] or_ln117_133_fu_1103_p2;
wire   [0:0] or_ln117_134_fu_1108_p2;
wire   [0:0] and_ln102_184_fu_1049_p2;
wire   [4:0] select_ln117_140_fu_1113_p3;
wire   [0:0] or_ln117_135_fu_1120_p2;
wire   [4:0] select_ln117_141_fu_1126_p3;
wire   [0:0] or_ln117_136_fu_1134_p2;
wire   [0:0] and_ln102_185_fu_1055_p2;
wire   [4:0] select_ln117_142_fu_1139_p3;
wire   [0:0] or_ln117_137_fu_1147_p2;
wire   [4:0] select_ln117_143_fu_1153_p3;
wire   [0:0] or_ln117_138_fu_1161_p2;
wire   [0:0] and_ln102_187_fu_1065_p2;
wire   [4:0] select_ln117_144_fu_1167_p3;
wire   [0:0] or_ln117_139_fu_1175_p2;
wire   [4:0] select_ln117_145_fu_1181_p3;
wire   [0:0] or_ln117_140_fu_1189_p2;
wire   [0:0] and_ln102_188_fu_1071_p2;
wire   [4:0] select_ln117_146_fu_1194_p3;
wire   [0:0] or_ln117_141_fu_1202_p2;
wire   [4:0] select_ln117_147_fu_1208_p3;
wire   [0:0] or_ln117_142_fu_1216_p2;
wire   [0:0] and_ln102_190_fu_1081_p2;
wire   [4:0] select_ln117_148_fu_1222_p3;
wire   [0:0] or_ln117_143_fu_1230_p2;
wire   [4:0] select_ln117_149_fu_1236_p3;
wire   [0:0] or_ln117_144_fu_1244_p2;
wire   [0:0] and_ln102_191_fu_1087_p2;
wire   [4:0] select_ln117_150_fu_1250_p3;
wire   [0:0] or_ln117_145_fu_1258_p2;
wire   [4:0] select_ln117_151_fu_1264_p3;
wire   [0:0] or_ln117_146_fu_1272_p2;
wire   [0:0] and_ln102_193_fu_1097_p2;
wire   [4:0] select_ln117_152_fu_1278_p3;
wire   [0:0] or_ln117_147_fu_1286_p2;
wire   [4:0] select_ln117_153_fu_1292_p3;
wire   [10:0] agg_result_fu_1308_p65;
wire   [4:0] agg_result_fu_1308_p66;
wire   [10:0] agg_result_fu_1308_p67;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1308_p1;
wire   [4:0] agg_result_fu_1308_p3;
wire   [4:0] agg_result_fu_1308_p5;
wire   [4:0] agg_result_fu_1308_p7;
wire   [4:0] agg_result_fu_1308_p9;
wire   [4:0] agg_result_fu_1308_p11;
wire   [4:0] agg_result_fu_1308_p13;
wire   [4:0] agg_result_fu_1308_p15;
wire   [4:0] agg_result_fu_1308_p17;
wire   [4:0] agg_result_fu_1308_p19;
wire   [4:0] agg_result_fu_1308_p21;
wire   [4:0] agg_result_fu_1308_p23;
wire   [4:0] agg_result_fu_1308_p25;
wire   [4:0] agg_result_fu_1308_p27;
wire   [4:0] agg_result_fu_1308_p29;
wire   [4:0] agg_result_fu_1308_p31;
wire  signed [4:0] agg_result_fu_1308_p33;
wire  signed [4:0] agg_result_fu_1308_p35;
wire  signed [4:0] agg_result_fu_1308_p37;
wire  signed [4:0] agg_result_fu_1308_p39;
wire  signed [4:0] agg_result_fu_1308_p41;
wire  signed [4:0] agg_result_fu_1308_p43;
wire  signed [4:0] agg_result_fu_1308_p45;
wire  signed [4:0] agg_result_fu_1308_p47;
wire  signed [4:0] agg_result_fu_1308_p49;
wire  signed [4:0] agg_result_fu_1308_p51;
wire  signed [4:0] agg_result_fu_1308_p53;
wire  signed [4:0] agg_result_fu_1308_p55;
wire  signed [4:0] agg_result_fu_1308_p57;
wire  signed [4:0] agg_result_fu_1308_p59;
wire  signed [4:0] agg_result_fu_1308_p61;
wire  signed [4:0] agg_result_fu_1308_p63;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_65_5_11_1_1_x0 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 11 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 11 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 11 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 11 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 11 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 11 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 11 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 11 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 11 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 11 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 11 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 11 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 11 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 11 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 11 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 11 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 11 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 11 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 11 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 11 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 11 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 11 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 11 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 11 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 11 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 11 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 11 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 11 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 11 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 11 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 11 ),
    .CASE31( 5'h1F ),
    .din31_WIDTH( 11 ),
    .def_WIDTH( 11 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 11 ))
sparsemux_65_5_11_1_1_x0_U236(
    .din0(11'd59),
    .din1(11'd1671),
    .din2(11'd1798),
    .din3(11'd1605),
    .din4(11'd383),
    .din5(11'd25),
    .din6(11'd1967),
    .din7(11'd1658),
    .din8(11'd1347),
    .din9(11'd110),
    .din10(11'd503),
    .din11(11'd323),
    .din12(11'd388),
    .din13(11'd1959),
    .din14(11'd1928),
    .din15(11'd1490),
    .din16(11'd1505),
    .din17(11'd733),
    .din18(11'd520),
    .din19(11'd1650),
    .din20(11'd1852),
    .din21(11'd527),
    .din22(11'd1645),
    .din23(11'd73),
    .din24(11'd1735),
    .din25(11'd632),
    .din26(11'd250),
    .din27(11'd1531),
    .din28(11'd661),
    .din29(11'd1703),
    .din30(11'd1530),
    .din31(11'd1607),
    .def(agg_result_fu_1308_p65),
    .sel(agg_result_fu_1308_p66),
    .dout(agg_result_fu_1308_p67)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_130_reg_1453 <= icmp_ln86_130_fu_390_p2;
        icmp_ln86_133_reg_1459 <= icmp_ln86_133_fu_408_p2;
        icmp_ln86_134_reg_1465 <= icmp_ln86_134_fu_414_p2;
        icmp_ln86_139_reg_1471 <= icmp_ln86_139_fu_444_p2;
        icmp_ln86_140_reg_1477 <= icmp_ln86_140_fu_450_p2;
        icmp_ln86_141_reg_1483 <= icmp_ln86_141_fu_456_p2;
        icmp_ln86_142_reg_1489 <= icmp_ln86_142_fu_462_p2;
        icmp_ln86_151_reg_1495 <= icmp_ln86_151_fu_516_p2;
        icmp_ln86_152_reg_1500 <= icmp_ln86_152_fu_522_p2;
        icmp_ln86_153_reg_1505 <= icmp_ln86_153_fu_528_p2;
        icmp_ln86_154_reg_1510 <= icmp_ln86_154_fu_534_p2;
        icmp_ln86_155_reg_1515 <= icmp_ln86_155_fu_540_p2;
        icmp_ln86_156_reg_1520 <= icmp_ln86_156_fu_546_p2;
        icmp_ln86_157_reg_1525 <= icmp_ln86_157_fu_552_p2;
        icmp_ln86_158_reg_1530 <= icmp_ln86_158_fu_558_p2;
        icmp_ln86_reg_1444 <= icmp_ln86_fu_378_p2;
        select_ln117_139_reg_1535 <= select_ln117_139_fu_938_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1308_p65 = 'bx;

assign agg_result_fu_1308_p66 = ((or_ln117_147_fu_1286_p2[0:0] == 1'b1) ? select_ln117_153_fu_1292_p3 : 5'd31);

assign and_ln102_157_fu_951_p2 = (xor_ln104_fu_946_p2 & icmp_ln86_130_reg_1453);

assign and_ln102_158_fu_582_p2 = (icmp_ln86_131_fu_396_p2 & and_ln102_fu_564_p2);

assign and_ln102_159_fu_600_p2 = (icmp_ln86_132_fu_402_p2 & and_ln104_fu_576_p2);

assign and_ln102_160_fu_967_p2 = (icmp_ln86_133_reg_1459 & and_ln102_157_fu_951_p2);

assign and_ln102_161_fu_983_p2 = (icmp_ln86_134_reg_1465 & and_ln104_26_fu_961_p2);

assign and_ln102_162_fu_618_p2 = (icmp_ln86_135_fu_420_p2 & and_ln102_158_fu_582_p2);

assign and_ln102_163_fu_630_p2 = (icmp_ln86_136_fu_426_p2 & and_ln104_27_fu_594_p2);

assign and_ln102_164_fu_642_p2 = (icmp_ln86_137_fu_432_p2 & and_ln102_159_fu_600_p2);

assign and_ln102_165_fu_654_p2 = (icmp_ln86_138_fu_438_p2 & and_ln104_28_fu_612_p2);

assign and_ln102_166_fu_999_p2 = (icmp_ln86_139_reg_1471 & and_ln102_160_fu_967_p2);

assign and_ln102_167_fu_1009_p2 = (icmp_ln86_140_reg_1477 & and_ln104_29_fu_977_p2);

assign and_ln102_168_fu_1019_p2 = (icmp_ln86_141_reg_1483 & and_ln102_161_fu_983_p2);

assign and_ln102_169_fu_1029_p2 = (icmp_ln86_142_reg_1489 & and_ln104_30_fu_993_p2);

assign and_ln102_170_fu_666_p2 = (icmp_ln86_143_fu_468_p2 & and_ln102_162_fu_618_p2);

assign and_ln102_171_fu_672_p2 = (xor_ln104_68_fu_624_p2 & icmp_ln86_144_fu_474_p2);

assign and_ln102_172_fu_678_p2 = (and_ln102_171_fu_672_p2 & and_ln102_158_fu_582_p2);

assign and_ln102_173_fu_684_p2 = (icmp_ln86_145_fu_480_p2 & and_ln102_163_fu_630_p2);

assign and_ln102_174_fu_690_p2 = (xor_ln104_69_fu_636_p2 & icmp_ln86_146_fu_486_p2);

assign and_ln102_175_fu_696_p2 = (and_ln104_27_fu_594_p2 & and_ln102_174_fu_690_p2);

assign and_ln102_176_fu_702_p2 = (icmp_ln86_147_fu_492_p2 & and_ln102_164_fu_642_p2);

assign and_ln102_177_fu_708_p2 = (xor_ln104_70_fu_648_p2 & icmp_ln86_148_fu_498_p2);

assign and_ln102_178_fu_714_p2 = (and_ln102_177_fu_708_p2 & and_ln102_159_fu_600_p2);

assign and_ln102_179_fu_720_p2 = (icmp_ln86_149_fu_504_p2 & and_ln102_165_fu_654_p2);

assign and_ln102_180_fu_726_p2 = (xor_ln104_71_fu_660_p2 & icmp_ln86_150_fu_510_p2);

assign and_ln102_181_fu_732_p2 = (and_ln104_28_fu_612_p2 & and_ln102_180_fu_726_p2);

assign and_ln102_182_fu_1039_p2 = (icmp_ln86_151_reg_1495 & and_ln102_166_fu_999_p2);

assign and_ln102_183_fu_1044_p2 = (xor_ln104_72_fu_1004_p2 & icmp_ln86_152_reg_1500);

assign and_ln102_184_fu_1049_p2 = (and_ln102_183_fu_1044_p2 & and_ln102_160_fu_967_p2);

assign and_ln102_185_fu_1055_p2 = (icmp_ln86_153_reg_1505 & and_ln102_167_fu_1009_p2);

assign and_ln102_186_fu_1060_p2 = (xor_ln104_73_fu_1014_p2 & icmp_ln86_154_reg_1510);

assign and_ln102_187_fu_1065_p2 = (and_ln104_29_fu_977_p2 & and_ln102_186_fu_1060_p2);

assign and_ln102_188_fu_1071_p2 = (icmp_ln86_155_reg_1515 & and_ln102_168_fu_1019_p2);

assign and_ln102_189_fu_1076_p2 = (xor_ln104_74_fu_1024_p2 & icmp_ln86_156_reg_1520);

assign and_ln102_190_fu_1081_p2 = (and_ln102_189_fu_1076_p2 & and_ln102_161_fu_983_p2);

assign and_ln102_191_fu_1087_p2 = (icmp_ln86_157_reg_1525 & and_ln102_169_fu_1029_p2);

assign and_ln102_192_fu_1092_p2 = (xor_ln104_75_fu_1034_p2 & icmp_ln86_158_reg_1530);

assign and_ln102_193_fu_1097_p2 = (and_ln104_30_fu_993_p2 & and_ln102_192_fu_1092_p2);

assign and_ln102_fu_564_p2 = (icmp_ln86_fu_378_p2 & icmp_ln86_129_fu_384_p2);

assign and_ln104_26_fu_961_p2 = (xor_ln104_fu_946_p2 & xor_ln104_63_fu_956_p2);

assign and_ln104_27_fu_594_p2 = (xor_ln104_64_fu_588_p2 & and_ln102_fu_564_p2);

assign and_ln104_28_fu_612_p2 = (xor_ln104_65_fu_606_p2 & and_ln104_fu_576_p2);

assign and_ln104_29_fu_977_p2 = (xor_ln104_66_fu_972_p2 & and_ln102_157_fu_951_p2);

assign and_ln104_30_fu_993_p2 = (xor_ln104_67_fu_988_p2 & and_ln104_26_fu_961_p2);

assign and_ln104_fu_576_p2 = (xor_ln104_62_fu_570_p2 & icmp_ln86_fu_378_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1308_p67;

assign icmp_ln86_129_fu_384_p2 = (($signed(x_49_val) < $signed(18'd88061)) ? 1'b1 : 1'b0);

assign icmp_ln86_130_fu_390_p2 = (($signed(x_36_val) < $signed(18'd11)) ? 1'b1 : 1'b0);

assign icmp_ln86_131_fu_396_p2 = (($signed(x_7_val) < $signed(18'd6626)) ? 1'b1 : 1'b0);

assign icmp_ln86_132_fu_402_p2 = (($signed(x_47_val) < $signed(18'd98013)) ? 1'b1 : 1'b0);

assign icmp_ln86_133_fu_408_p2 = (($signed(x_48_val) < $signed(18'd91465)) ? 1'b1 : 1'b0);

assign icmp_ln86_134_fu_414_p2 = (($signed(x_1_val) < $signed(18'd5339)) ? 1'b1 : 1'b0);

assign icmp_ln86_135_fu_420_p2 = (($signed(x_52_val) < $signed(18'd45569)) ? 1'b1 : 1'b0);

assign icmp_ln86_136_fu_426_p2 = (($signed(x_3_val) < $signed(18'd96306)) ? 1'b1 : 1'b0);

assign icmp_ln86_137_fu_432_p2 = (($signed(x_50_val) < $signed(18'd89454)) ? 1'b1 : 1'b0);

assign icmp_ln86_138_fu_438_p2 = (($signed(x_52_val) < $signed(18'd49665)) ? 1'b1 : 1'b0);

assign icmp_ln86_139_fu_444_p2 = (($signed(x_1_val) < $signed(18'd245742)) ? 1'b1 : 1'b0);

assign icmp_ln86_140_fu_450_p2 = (($signed(x_48_val) < $signed(18'd98228)) ? 1'b1 : 1'b0);

assign icmp_ln86_141_fu_456_p2 = (($signed(x_52_val) < $signed(18'd22017)) ? 1'b1 : 1'b0);

assign icmp_ln86_142_fu_462_p2 = (($signed(x_33_val) < $signed(18'd359)) ? 1'b1 : 1'b0);

assign icmp_ln86_143_fu_468_p2 = (($signed(x_48_val) < $signed(18'd78010)) ? 1'b1 : 1'b0);

assign icmp_ln86_144_fu_474_p2 = (($signed(x_24_val) < $signed(18'd446)) ? 1'b1 : 1'b0);

assign icmp_ln86_145_fu_480_p2 = (($signed(x_36_val) < $signed(18'd6)) ? 1'b1 : 1'b0);

assign icmp_ln86_146_fu_486_p2 = (($signed(x_10_val) < $signed(18'd772)) ? 1'b1 : 1'b0);

assign icmp_ln86_147_fu_492_p2 = (($signed(x_39_val) < $signed(18'd778)) ? 1'b1 : 1'b0);

assign icmp_ln86_148_fu_498_p2 = (($signed(x_3_val) < $signed(18'd96596)) ? 1'b1 : 1'b0);

assign icmp_ln86_149_fu_504_p2 = (($signed(x_1_val) < $signed(18'd97367)) ? 1'b1 : 1'b0);

assign icmp_ln86_150_fu_510_p2 = (($signed(x_1_val) < $signed(18'd53812)) ? 1'b1 : 1'b0);

assign icmp_ln86_151_fu_516_p2 = (($signed(x_33_val) < $signed(18'd985)) ? 1'b1 : 1'b0);

assign icmp_ln86_152_fu_522_p2 = (($signed(x_31_val) < $signed(18'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_153_fu_528_p2 = (($signed(x_1_val) < $signed(18'd239558)) ? 1'b1 : 1'b0);

assign icmp_ln86_154_fu_534_p2 = (($signed(x_12_val) < $signed(18'd259400)) ? 1'b1 : 1'b0);

assign icmp_ln86_155_fu_540_p2 = (($signed(x_16_val) < $signed(18'd31)) ? 1'b1 : 1'b0);

assign icmp_ln86_156_fu_546_p2 = (($signed(x_33_val) < $signed(18'd40)) ? 1'b1 : 1'b0);

assign icmp_ln86_157_fu_552_p2 = (($signed(x_49_val) < $signed(18'd99896)) ? 1'b1 : 1'b0);

assign icmp_ln86_158_fu_558_p2 = (($signed(x_40_val) < $signed(18'd966)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_378_p2 = (($signed(x_15_val) < $signed(18'd10)) ? 1'b1 : 1'b0);

assign or_ln117_123_fu_774_p2 = (and_ln102_173_fu_684_p2 | and_ln102_158_fu_582_p2);

assign or_ln117_124_fu_788_p2 = (and_ln102_163_fu_630_p2 | and_ln102_158_fu_582_p2);

assign or_ln117_125_fu_802_p2 = (or_ln117_124_fu_788_p2 | and_ln102_175_fu_696_p2);

assign or_ln117_126_fu_828_p2 = (and_ln102_fu_564_p2 | and_ln102_176_fu_702_p2);

assign or_ln117_127_fu_842_p2 = (and_ln102_fu_564_p2 | and_ln102_164_fu_642_p2);

assign or_ln117_128_fu_856_p2 = (or_ln117_127_fu_842_p2 | and_ln102_178_fu_714_p2);

assign or_ln117_129_fu_870_p2 = (and_ln102_fu_564_p2 | and_ln102_159_fu_600_p2);

assign or_ln117_130_fu_884_p2 = (or_ln117_129_fu_870_p2 | and_ln102_179_fu_720_p2);

assign or_ln117_131_fu_898_p2 = (or_ln117_129_fu_870_p2 | and_ln102_165_fu_654_p2);

assign or_ln117_132_fu_912_p2 = (or_ln117_131_fu_898_p2 | and_ln102_181_fu_732_p2);

assign or_ln117_133_fu_1103_p2 = (icmp_ln86_reg_1444 | and_ln102_182_fu_1039_p2);

assign or_ln117_134_fu_1108_p2 = (icmp_ln86_reg_1444 | and_ln102_166_fu_999_p2);

assign or_ln117_135_fu_1120_p2 = (or_ln117_134_fu_1108_p2 | and_ln102_184_fu_1049_p2);

assign or_ln117_136_fu_1134_p2 = (icmp_ln86_reg_1444 | and_ln102_160_fu_967_p2);

assign or_ln117_137_fu_1147_p2 = (or_ln117_136_fu_1134_p2 | and_ln102_185_fu_1055_p2);

assign or_ln117_138_fu_1161_p2 = (or_ln117_136_fu_1134_p2 | and_ln102_167_fu_1009_p2);

assign or_ln117_139_fu_1175_p2 = (or_ln117_138_fu_1161_p2 | and_ln102_187_fu_1065_p2);

assign or_ln117_140_fu_1189_p2 = (icmp_ln86_reg_1444 | and_ln102_157_fu_951_p2);

assign or_ln117_141_fu_1202_p2 = (or_ln117_140_fu_1189_p2 | and_ln102_188_fu_1071_p2);

assign or_ln117_142_fu_1216_p2 = (or_ln117_140_fu_1189_p2 | and_ln102_168_fu_1019_p2);

assign or_ln117_143_fu_1230_p2 = (or_ln117_142_fu_1216_p2 | and_ln102_190_fu_1081_p2);

assign or_ln117_144_fu_1244_p2 = (or_ln117_140_fu_1189_p2 | and_ln102_161_fu_983_p2);

assign or_ln117_145_fu_1258_p2 = (or_ln117_144_fu_1244_p2 | and_ln102_191_fu_1087_p2);

assign or_ln117_146_fu_1272_p2 = (or_ln117_144_fu_1244_p2 | and_ln102_169_fu_1029_p2);

assign or_ln117_147_fu_1286_p2 = (or_ln117_146_fu_1272_p2 | and_ln102_193_fu_1097_p2);

assign or_ln117_fu_748_p2 = (and_ln102_172_fu_678_p2 | and_ln102_162_fu_618_p2);

assign select_ln117_126_fu_762_p3 = ((or_ln117_fu_748_p2[0:0] == 1'b1) ? select_ln117_fu_754_p3 : 2'd3);

assign select_ln117_127_fu_780_p3 = ((and_ln102_158_fu_582_p2[0:0] == 1'b1) ? zext_ln117_16_fu_770_p1 : 3'd4);

assign select_ln117_128_fu_794_p3 = ((or_ln117_123_fu_774_p2[0:0] == 1'b1) ? select_ln117_127_fu_780_p3 : 3'd5);

assign select_ln117_129_fu_808_p3 = ((or_ln117_124_fu_788_p2[0:0] == 1'b1) ? select_ln117_128_fu_794_p3 : 3'd6);

assign select_ln117_130_fu_816_p3 = ((or_ln117_125_fu_802_p2[0:0] == 1'b1) ? select_ln117_129_fu_808_p3 : 3'd7);

assign select_ln117_131_fu_834_p3 = ((and_ln102_fu_564_p2[0:0] == 1'b1) ? zext_ln117_17_fu_824_p1 : 4'd8);

assign select_ln117_132_fu_848_p3 = ((or_ln117_126_fu_828_p2[0:0] == 1'b1) ? select_ln117_131_fu_834_p3 : 4'd9);

assign select_ln117_133_fu_862_p3 = ((or_ln117_127_fu_842_p2[0:0] == 1'b1) ? select_ln117_132_fu_848_p3 : 4'd10);

assign select_ln117_134_fu_876_p3 = ((or_ln117_128_fu_856_p2[0:0] == 1'b1) ? select_ln117_133_fu_862_p3 : 4'd11);

assign select_ln117_135_fu_890_p3 = ((or_ln117_129_fu_870_p2[0:0] == 1'b1) ? select_ln117_134_fu_876_p3 : 4'd12);

assign select_ln117_136_fu_904_p3 = ((or_ln117_130_fu_884_p2[0:0] == 1'b1) ? select_ln117_135_fu_890_p3 : 4'd13);

assign select_ln117_137_fu_918_p3 = ((or_ln117_131_fu_898_p2[0:0] == 1'b1) ? select_ln117_136_fu_904_p3 : 4'd14);

assign select_ln117_138_fu_926_p3 = ((or_ln117_132_fu_912_p2[0:0] == 1'b1) ? select_ln117_137_fu_918_p3 : 4'd15);

assign select_ln117_139_fu_938_p3 = ((icmp_ln86_fu_378_p2[0:0] == 1'b1) ? zext_ln117_18_fu_934_p1 : 5'd16);

assign select_ln117_140_fu_1113_p3 = ((or_ln117_133_fu_1103_p2[0:0] == 1'b1) ? select_ln117_139_reg_1535 : 5'd17);

assign select_ln117_141_fu_1126_p3 = ((or_ln117_134_fu_1108_p2[0:0] == 1'b1) ? select_ln117_140_fu_1113_p3 : 5'd18);

assign select_ln117_142_fu_1139_p3 = ((or_ln117_135_fu_1120_p2[0:0] == 1'b1) ? select_ln117_141_fu_1126_p3 : 5'd19);

assign select_ln117_143_fu_1153_p3 = ((or_ln117_136_fu_1134_p2[0:0] == 1'b1) ? select_ln117_142_fu_1139_p3 : 5'd20);

assign select_ln117_144_fu_1167_p3 = ((or_ln117_137_fu_1147_p2[0:0] == 1'b1) ? select_ln117_143_fu_1153_p3 : 5'd21);

assign select_ln117_145_fu_1181_p3 = ((or_ln117_138_fu_1161_p2[0:0] == 1'b1) ? select_ln117_144_fu_1167_p3 : 5'd22);

assign select_ln117_146_fu_1194_p3 = ((or_ln117_139_fu_1175_p2[0:0] == 1'b1) ? select_ln117_145_fu_1181_p3 : 5'd23);

assign select_ln117_147_fu_1208_p3 = ((or_ln117_140_fu_1189_p2[0:0] == 1'b1) ? select_ln117_146_fu_1194_p3 : 5'd24);

assign select_ln117_148_fu_1222_p3 = ((or_ln117_141_fu_1202_p2[0:0] == 1'b1) ? select_ln117_147_fu_1208_p3 : 5'd25);

assign select_ln117_149_fu_1236_p3 = ((or_ln117_142_fu_1216_p2[0:0] == 1'b1) ? select_ln117_148_fu_1222_p3 : 5'd26);

assign select_ln117_150_fu_1250_p3 = ((or_ln117_143_fu_1230_p2[0:0] == 1'b1) ? select_ln117_149_fu_1236_p3 : 5'd27);

assign select_ln117_151_fu_1264_p3 = ((or_ln117_144_fu_1244_p2[0:0] == 1'b1) ? select_ln117_150_fu_1250_p3 : 5'd28);

assign select_ln117_152_fu_1278_p3 = ((or_ln117_145_fu_1258_p2[0:0] == 1'b1) ? select_ln117_151_fu_1264_p3 : 5'd29);

assign select_ln117_153_fu_1292_p3 = ((or_ln117_146_fu_1272_p2[0:0] == 1'b1) ? select_ln117_152_fu_1278_p3 : 5'd30);

assign select_ln117_fu_754_p3 = ((and_ln102_162_fu_618_p2[0:0] == 1'b1) ? zext_ln117_fu_744_p1 : 2'd2);

assign xor_ln104_62_fu_570_p2 = (icmp_ln86_129_fu_384_p2 ^ 1'd1);

assign xor_ln104_63_fu_956_p2 = (icmp_ln86_130_reg_1453 ^ 1'd1);

assign xor_ln104_64_fu_588_p2 = (icmp_ln86_131_fu_396_p2 ^ 1'd1);

assign xor_ln104_65_fu_606_p2 = (icmp_ln86_132_fu_402_p2 ^ 1'd1);

assign xor_ln104_66_fu_972_p2 = (icmp_ln86_133_reg_1459 ^ 1'd1);

assign xor_ln104_67_fu_988_p2 = (icmp_ln86_134_reg_1465 ^ 1'd1);

assign xor_ln104_68_fu_624_p2 = (icmp_ln86_135_fu_420_p2 ^ 1'd1);

assign xor_ln104_69_fu_636_p2 = (icmp_ln86_136_fu_426_p2 ^ 1'd1);

assign xor_ln104_70_fu_648_p2 = (icmp_ln86_137_fu_432_p2 ^ 1'd1);

assign xor_ln104_71_fu_660_p2 = (icmp_ln86_138_fu_438_p2 ^ 1'd1);

assign xor_ln104_72_fu_1004_p2 = (icmp_ln86_139_reg_1471 ^ 1'd1);

assign xor_ln104_73_fu_1014_p2 = (icmp_ln86_140_reg_1477 ^ 1'd1);

assign xor_ln104_74_fu_1024_p2 = (icmp_ln86_141_reg_1483 ^ 1'd1);

assign xor_ln104_75_fu_1034_p2 = (icmp_ln86_142_reg_1489 ^ 1'd1);

assign xor_ln104_fu_946_p2 = (icmp_ln86_reg_1444 ^ 1'd1);

assign xor_ln117_fu_738_p2 = (1'd1 ^ and_ln102_170_fu_666_p2);

assign zext_ln117_16_fu_770_p1 = select_ln117_126_fu_762_p3;

assign zext_ln117_17_fu_824_p1 = select_ln117_130_fu_816_p3;

assign zext_ln117_18_fu_934_p1 = select_ln117_138_fu_926_p3;

assign zext_ln117_fu_744_p1 = xor_ln117_fu_738_p2;

endmodule //my_prj_decision_function_94
