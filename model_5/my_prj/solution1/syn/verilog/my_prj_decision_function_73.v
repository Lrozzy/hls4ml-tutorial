// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_73 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_2_val,
        x_3_val,
        x_5_val,
        x_6_val,
        x_7_val,
        x_9_val,
        x_12_val,
        x_14_val,
        x_17_val,
        x_19_val,
        x_25_val,
        x_28_val,
        x_29_val,
        x_30_val,
        x_31_val,
        x_33_val,
        x_39_val,
        x_48_val,
        x_49_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_2_val;
input  [17:0] x_3_val;
input  [17:0] x_5_val;
input  [17:0] x_6_val;
input  [17:0] x_7_val;
input  [17:0] x_9_val;
input  [17:0] x_12_val;
input  [17:0] x_14_val;
input  [17:0] x_17_val;
input  [17:0] x_19_val;
input  [17:0] x_25_val;
input  [17:0] x_28_val;
input  [17:0] x_29_val;
input  [17:0] x_30_val;
input  [17:0] x_31_val;
input  [17:0] x_33_val;
input  [17:0] x_39_val;
input  [17:0] x_48_val;
input  [17:0] x_49_val;
input  [17:0] x_52_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_408_p2;
reg   [0:0] icmp_ln86_reg_1484;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_745_fu_420_p2;
reg   [0:0] icmp_ln86_745_reg_1493;
wire   [0:0] icmp_ln86_748_fu_438_p2;
reg   [0:0] icmp_ln86_748_reg_1499;
wire   [0:0] icmp_ln86_749_fu_444_p2;
reg   [0:0] icmp_ln86_749_reg_1505;
wire   [0:0] icmp_ln86_754_fu_474_p2;
reg   [0:0] icmp_ln86_754_reg_1511;
wire   [0:0] icmp_ln86_755_fu_480_p2;
reg   [0:0] icmp_ln86_755_reg_1517;
wire   [0:0] icmp_ln86_756_fu_486_p2;
reg   [0:0] icmp_ln86_756_reg_1523;
wire   [0:0] icmp_ln86_757_fu_492_p2;
reg   [0:0] icmp_ln86_757_reg_1529;
wire   [0:0] icmp_ln86_766_fu_556_p2;
reg   [0:0] icmp_ln86_766_reg_1535;
wire   [0:0] icmp_ln86_767_fu_562_p2;
reg   [0:0] icmp_ln86_767_reg_1540;
wire   [0:0] icmp_ln86_768_fu_568_p2;
reg   [0:0] icmp_ln86_768_reg_1545;
wire   [0:0] icmp_ln86_769_fu_574_p2;
reg   [0:0] icmp_ln86_769_reg_1550;
wire   [0:0] icmp_ln86_770_fu_580_p2;
reg   [0:0] icmp_ln86_770_reg_1555;
wire   [0:0] icmp_ln86_771_fu_586_p2;
reg   [0:0] icmp_ln86_771_reg_1560;
wire   [0:0] icmp_ln86_772_fu_592_p2;
reg   [0:0] icmp_ln86_772_reg_1565;
wire   [0:0] icmp_ln86_773_fu_598_p2;
reg   [0:0] icmp_ln86_773_reg_1570;
wire   [4:0] select_ln117_735_fu_978_p3;
reg   [4:0] select_ln117_735_reg_1575;
wire    ap_block_pp0_stage0;
wire   [15:0] tmp_fu_504_p4;
wire   [0:0] icmp_ln86_744_fu_414_p2;
wire   [0:0] xor_ln104_351_fu_610_p2;
wire   [0:0] icmp_ln86_746_fu_426_p2;
wire   [0:0] and_ln102_fu_604_p2;
wire   [0:0] xor_ln104_353_fu_628_p2;
wire   [0:0] icmp_ln86_747_fu_432_p2;
wire   [0:0] and_ln104_fu_616_p2;
wire   [0:0] xor_ln104_354_fu_646_p2;
wire   [0:0] icmp_ln86_750_fu_450_p2;
wire   [0:0] and_ln102_916_fu_622_p2;
wire   [0:0] icmp_ln86_751_fu_456_p2;
wire   [0:0] and_ln104_132_fu_634_p2;
wire   [0:0] icmp_ln86_752_fu_462_p2;
wire   [0:0] and_ln102_917_fu_640_p2;
wire   [0:0] icmp_ln86_753_fu_468_p2;
wire   [0:0] and_ln104_133_fu_652_p2;
wire   [0:0] icmp_ln86_758_fu_498_p2;
wire   [0:0] and_ln102_920_fu_658_p2;
wire   [0:0] icmp_ln86_759_fu_514_p2;
wire   [0:0] xor_ln104_357_fu_664_p2;
wire   [0:0] and_ln102_929_fu_712_p2;
wire   [0:0] icmp_ln86_760_fu_520_p2;
wire   [0:0] and_ln102_921_fu_670_p2;
wire   [0:0] icmp_ln86_761_fu_526_p2;
wire   [0:0] xor_ln104_358_fu_676_p2;
wire   [0:0] and_ln102_932_fu_730_p2;
wire   [0:0] icmp_ln86_762_fu_532_p2;
wire   [0:0] and_ln102_922_fu_682_p2;
wire   [0:0] icmp_ln86_763_fu_538_p2;
wire   [0:0] xor_ln104_359_fu_688_p2;
wire   [0:0] and_ln102_935_fu_748_p2;
wire   [0:0] icmp_ln86_764_fu_544_p2;
wire   [0:0] and_ln102_923_fu_694_p2;
wire   [0:0] icmp_ln86_765_fu_550_p2;
wire   [0:0] xor_ln104_360_fu_700_p2;
wire   [0:0] and_ln102_938_fu_766_p2;
wire   [0:0] and_ln102_928_fu_706_p2;
wire   [0:0] xor_ln117_fu_778_p2;
wire   [0:0] and_ln102_930_fu_718_p2;
wire   [1:0] zext_ln117_fu_784_p1;
wire   [0:0] or_ln117_fu_788_p2;
wire   [1:0] select_ln117_fu_794_p3;
wire   [1:0] select_ln117_722_fu_802_p3;
wire   [0:0] and_ln102_931_fu_724_p2;
wire   [2:0] zext_ln117_79_fu_810_p1;
wire   [0:0] or_ln117_651_fu_814_p2;
wire   [2:0] select_ln117_723_fu_820_p3;
wire   [0:0] or_ln117_652_fu_828_p2;
wire   [0:0] and_ln102_933_fu_736_p2;
wire   [2:0] select_ln117_724_fu_834_p3;
wire   [0:0] or_ln117_653_fu_842_p2;
wire   [2:0] select_ln117_725_fu_848_p3;
wire   [2:0] select_ln117_726_fu_856_p3;
wire   [0:0] and_ln102_934_fu_742_p2;
wire   [3:0] zext_ln117_80_fu_864_p1;
wire   [0:0] or_ln117_654_fu_868_p2;
wire   [3:0] select_ln117_727_fu_874_p3;
wire   [0:0] or_ln117_655_fu_882_p2;
wire   [0:0] and_ln102_936_fu_754_p2;
wire   [3:0] select_ln117_728_fu_888_p3;
wire   [0:0] or_ln117_656_fu_896_p2;
wire   [3:0] select_ln117_729_fu_902_p3;
wire   [0:0] or_ln117_657_fu_910_p2;
wire   [0:0] and_ln102_937_fu_760_p2;
wire   [3:0] select_ln117_730_fu_916_p3;
wire   [0:0] or_ln117_658_fu_924_p2;
wire   [3:0] select_ln117_731_fu_930_p3;
wire   [0:0] or_ln117_659_fu_938_p2;
wire   [0:0] and_ln102_939_fu_772_p2;
wire   [3:0] select_ln117_732_fu_944_p3;
wire   [0:0] or_ln117_660_fu_952_p2;
wire   [3:0] select_ln117_733_fu_958_p3;
wire   [3:0] select_ln117_734_fu_966_p3;
wire   [4:0] zext_ln117_81_fu_974_p1;
wire   [0:0] xor_ln104_fu_986_p2;
wire   [0:0] xor_ln104_352_fu_996_p2;
wire   [0:0] and_ln102_915_fu_991_p2;
wire   [0:0] xor_ln104_355_fu_1012_p2;
wire   [0:0] and_ln104_131_fu_1001_p2;
wire   [0:0] xor_ln104_356_fu_1028_p2;
wire   [0:0] and_ln102_918_fu_1007_p2;
wire   [0:0] and_ln104_134_fu_1017_p2;
wire   [0:0] and_ln102_919_fu_1023_p2;
wire   [0:0] and_ln104_135_fu_1033_p2;
wire   [0:0] and_ln102_924_fu_1039_p2;
wire   [0:0] xor_ln104_361_fu_1044_p2;
wire   [0:0] and_ln102_941_fu_1084_p2;
wire   [0:0] and_ln102_925_fu_1049_p2;
wire   [0:0] xor_ln104_362_fu_1054_p2;
wire   [0:0] and_ln102_944_fu_1100_p2;
wire   [0:0] and_ln102_926_fu_1059_p2;
wire   [0:0] xor_ln104_363_fu_1064_p2;
wire   [0:0] and_ln102_947_fu_1116_p2;
wire   [0:0] and_ln102_927_fu_1069_p2;
wire   [0:0] xor_ln104_364_fu_1074_p2;
wire   [0:0] and_ln102_950_fu_1132_p2;
wire   [0:0] and_ln102_940_fu_1079_p2;
wire   [0:0] or_ln117_661_fu_1143_p2;
wire   [0:0] or_ln117_662_fu_1148_p2;
wire   [0:0] and_ln102_942_fu_1089_p2;
wire   [4:0] select_ln117_736_fu_1153_p3;
wire   [0:0] or_ln117_663_fu_1160_p2;
wire   [4:0] select_ln117_737_fu_1166_p3;
wire   [0:0] or_ln117_664_fu_1174_p2;
wire   [0:0] and_ln102_943_fu_1095_p2;
wire   [4:0] select_ln117_738_fu_1179_p3;
wire   [0:0] or_ln117_665_fu_1187_p2;
wire   [4:0] select_ln117_739_fu_1193_p3;
wire   [0:0] or_ln117_666_fu_1201_p2;
wire   [0:0] and_ln102_945_fu_1105_p2;
wire   [4:0] select_ln117_740_fu_1207_p3;
wire   [0:0] or_ln117_667_fu_1215_p2;
wire   [4:0] select_ln117_741_fu_1221_p3;
wire   [0:0] or_ln117_668_fu_1229_p2;
wire   [0:0] and_ln102_946_fu_1111_p2;
wire   [4:0] select_ln117_742_fu_1234_p3;
wire   [0:0] or_ln117_669_fu_1242_p2;
wire   [4:0] select_ln117_743_fu_1248_p3;
wire   [0:0] or_ln117_670_fu_1256_p2;
wire   [0:0] and_ln102_948_fu_1121_p2;
wire   [4:0] select_ln117_744_fu_1262_p3;
wire   [0:0] or_ln117_671_fu_1270_p2;
wire   [4:0] select_ln117_745_fu_1276_p3;
wire   [0:0] or_ln117_672_fu_1284_p2;
wire   [0:0] and_ln102_949_fu_1127_p2;
wire   [4:0] select_ln117_746_fu_1290_p3;
wire   [0:0] or_ln117_673_fu_1298_p2;
wire   [4:0] select_ln117_747_fu_1304_p3;
wire   [0:0] or_ln117_674_fu_1312_p2;
wire   [0:0] and_ln102_951_fu_1137_p2;
wire   [4:0] select_ln117_748_fu_1318_p3;
wire   [0:0] or_ln117_675_fu_1326_p2;
wire   [4:0] select_ln117_749_fu_1332_p3;
wire   [11:0] agg_result_fu_1348_p65;
wire   [4:0] agg_result_fu_1348_p66;
wire   [11:0] agg_result_fu_1348_p67;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1348_p1;
wire   [4:0] agg_result_fu_1348_p3;
wire   [4:0] agg_result_fu_1348_p5;
wire   [4:0] agg_result_fu_1348_p7;
wire   [4:0] agg_result_fu_1348_p9;
wire   [4:0] agg_result_fu_1348_p11;
wire   [4:0] agg_result_fu_1348_p13;
wire   [4:0] agg_result_fu_1348_p15;
wire   [4:0] agg_result_fu_1348_p17;
wire   [4:0] agg_result_fu_1348_p19;
wire   [4:0] agg_result_fu_1348_p21;
wire   [4:0] agg_result_fu_1348_p23;
wire   [4:0] agg_result_fu_1348_p25;
wire   [4:0] agg_result_fu_1348_p27;
wire   [4:0] agg_result_fu_1348_p29;
wire   [4:0] agg_result_fu_1348_p31;
wire  signed [4:0] agg_result_fu_1348_p33;
wire  signed [4:0] agg_result_fu_1348_p35;
wire  signed [4:0] agg_result_fu_1348_p37;
wire  signed [4:0] agg_result_fu_1348_p39;
wire  signed [4:0] agg_result_fu_1348_p41;
wire  signed [4:0] agg_result_fu_1348_p43;
wire  signed [4:0] agg_result_fu_1348_p45;
wire  signed [4:0] agg_result_fu_1348_p47;
wire  signed [4:0] agg_result_fu_1348_p49;
wire  signed [4:0] agg_result_fu_1348_p51;
wire  signed [4:0] agg_result_fu_1348_p53;
wire  signed [4:0] agg_result_fu_1348_p55;
wire  signed [4:0] agg_result_fu_1348_p57;
wire  signed [4:0] agg_result_fu_1348_p59;
wire  signed [4:0] agg_result_fu_1348_p61;
wire  signed [4:0] agg_result_fu_1348_p63;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_65_5_12_1_1_x14 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 12 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 12 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 12 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 12 ),
    .CASE31( 5'h1F ),
    .din31_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_65_5_12_1_1_x14_U653(
    .din0(12'd4002),
    .din1(12'd728),
    .din2(12'd3900),
    .din3(12'd1483),
    .din4(12'd3814),
    .din5(12'd589),
    .din6(12'd3663),
    .din7(12'd19),
    .din8(12'd13),
    .din9(12'd235),
    .din10(12'd121),
    .din11(12'd1160),
    .din12(12'd3972),
    .din13(12'd3808),
    .din14(12'd136),
    .din15(12'd3988),
    .din16(12'd3583),
    .din17(12'd3878),
    .din18(12'd759),
    .din19(12'd3747),
    .din20(12'd3714),
    .din21(12'd4070),
    .din22(12'd3790),
    .din23(12'd1321),
    .din24(12'd4093),
    .din25(12'd1630),
    .din26(12'd3873),
    .din27(12'd174),
    .din28(12'd3805),
    .din29(12'd574),
    .din30(12'd3746),
    .din31(12'd911),
    .def(agg_result_fu_1348_p65),
    .sel(agg_result_fu_1348_p66),
    .dout(agg_result_fu_1348_p67)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_745_reg_1493 <= icmp_ln86_745_fu_420_p2;
        icmp_ln86_748_reg_1499 <= icmp_ln86_748_fu_438_p2;
        icmp_ln86_749_reg_1505 <= icmp_ln86_749_fu_444_p2;
        icmp_ln86_754_reg_1511 <= icmp_ln86_754_fu_474_p2;
        icmp_ln86_755_reg_1517 <= icmp_ln86_755_fu_480_p2;
        icmp_ln86_756_reg_1523 <= icmp_ln86_756_fu_486_p2;
        icmp_ln86_757_reg_1529 <= icmp_ln86_757_fu_492_p2;
        icmp_ln86_766_reg_1535 <= icmp_ln86_766_fu_556_p2;
        icmp_ln86_767_reg_1540 <= icmp_ln86_767_fu_562_p2;
        icmp_ln86_768_reg_1545 <= icmp_ln86_768_fu_568_p2;
        icmp_ln86_769_reg_1550 <= icmp_ln86_769_fu_574_p2;
        icmp_ln86_770_reg_1555 <= icmp_ln86_770_fu_580_p2;
        icmp_ln86_771_reg_1560 <= icmp_ln86_771_fu_586_p2;
        icmp_ln86_772_reg_1565 <= icmp_ln86_772_fu_592_p2;
        icmp_ln86_773_reg_1570 <= icmp_ln86_773_fu_598_p2;
        icmp_ln86_reg_1484 <= icmp_ln86_fu_408_p2;
        select_ln117_735_reg_1575 <= select_ln117_735_fu_978_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1348_p65 = 'bx;

assign agg_result_fu_1348_p66 = ((or_ln117_675_fu_1326_p2[0:0] == 1'b1) ? select_ln117_749_fu_1332_p3 : 5'd31);

assign and_ln102_915_fu_991_p2 = (xor_ln104_fu_986_p2 & icmp_ln86_745_reg_1493);

assign and_ln102_916_fu_622_p2 = (icmp_ln86_746_fu_426_p2 & and_ln102_fu_604_p2);

assign and_ln102_917_fu_640_p2 = (icmp_ln86_747_fu_432_p2 & and_ln104_fu_616_p2);

assign and_ln102_918_fu_1007_p2 = (icmp_ln86_748_reg_1499 & and_ln102_915_fu_991_p2);

assign and_ln102_919_fu_1023_p2 = (icmp_ln86_749_reg_1505 & and_ln104_131_fu_1001_p2);

assign and_ln102_920_fu_658_p2 = (icmp_ln86_750_fu_450_p2 & and_ln102_916_fu_622_p2);

assign and_ln102_921_fu_670_p2 = (icmp_ln86_751_fu_456_p2 & and_ln104_132_fu_634_p2);

assign and_ln102_922_fu_682_p2 = (icmp_ln86_752_fu_462_p2 & and_ln102_917_fu_640_p2);

assign and_ln102_923_fu_694_p2 = (icmp_ln86_753_fu_468_p2 & and_ln104_133_fu_652_p2);

assign and_ln102_924_fu_1039_p2 = (icmp_ln86_754_reg_1511 & and_ln102_918_fu_1007_p2);

assign and_ln102_925_fu_1049_p2 = (icmp_ln86_755_reg_1517 & and_ln104_134_fu_1017_p2);

assign and_ln102_926_fu_1059_p2 = (icmp_ln86_756_reg_1523 & and_ln102_919_fu_1023_p2);

assign and_ln102_927_fu_1069_p2 = (icmp_ln86_757_reg_1529 & and_ln104_135_fu_1033_p2);

assign and_ln102_928_fu_706_p2 = (icmp_ln86_758_fu_498_p2 & and_ln102_920_fu_658_p2);

assign and_ln102_929_fu_712_p2 = (xor_ln104_357_fu_664_p2 & icmp_ln86_759_fu_514_p2);

assign and_ln102_930_fu_718_p2 = (and_ln102_929_fu_712_p2 & and_ln102_916_fu_622_p2);

assign and_ln102_931_fu_724_p2 = (icmp_ln86_760_fu_520_p2 & and_ln102_921_fu_670_p2);

assign and_ln102_932_fu_730_p2 = (xor_ln104_358_fu_676_p2 & icmp_ln86_761_fu_526_p2);

assign and_ln102_933_fu_736_p2 = (and_ln104_132_fu_634_p2 & and_ln102_932_fu_730_p2);

assign and_ln102_934_fu_742_p2 = (icmp_ln86_762_fu_532_p2 & and_ln102_922_fu_682_p2);

assign and_ln102_935_fu_748_p2 = (xor_ln104_359_fu_688_p2 & icmp_ln86_763_fu_538_p2);

assign and_ln102_936_fu_754_p2 = (and_ln102_935_fu_748_p2 & and_ln102_917_fu_640_p2);

assign and_ln102_937_fu_760_p2 = (icmp_ln86_764_fu_544_p2 & and_ln102_923_fu_694_p2);

assign and_ln102_938_fu_766_p2 = (xor_ln104_360_fu_700_p2 & icmp_ln86_765_fu_550_p2);

assign and_ln102_939_fu_772_p2 = (and_ln104_133_fu_652_p2 & and_ln102_938_fu_766_p2);

assign and_ln102_940_fu_1079_p2 = (icmp_ln86_766_reg_1535 & and_ln102_924_fu_1039_p2);

assign and_ln102_941_fu_1084_p2 = (xor_ln104_361_fu_1044_p2 & icmp_ln86_767_reg_1540);

assign and_ln102_942_fu_1089_p2 = (and_ln102_941_fu_1084_p2 & and_ln102_918_fu_1007_p2);

assign and_ln102_943_fu_1095_p2 = (icmp_ln86_768_reg_1545 & and_ln102_925_fu_1049_p2);

assign and_ln102_944_fu_1100_p2 = (xor_ln104_362_fu_1054_p2 & icmp_ln86_769_reg_1550);

assign and_ln102_945_fu_1105_p2 = (and_ln104_134_fu_1017_p2 & and_ln102_944_fu_1100_p2);

assign and_ln102_946_fu_1111_p2 = (icmp_ln86_770_reg_1555 & and_ln102_926_fu_1059_p2);

assign and_ln102_947_fu_1116_p2 = (xor_ln104_363_fu_1064_p2 & icmp_ln86_771_reg_1560);

assign and_ln102_948_fu_1121_p2 = (and_ln102_947_fu_1116_p2 & and_ln102_919_fu_1023_p2);

assign and_ln102_949_fu_1127_p2 = (icmp_ln86_772_reg_1565 & and_ln102_927_fu_1069_p2);

assign and_ln102_950_fu_1132_p2 = (xor_ln104_364_fu_1074_p2 & icmp_ln86_773_reg_1570);

assign and_ln102_951_fu_1137_p2 = (and_ln104_135_fu_1033_p2 & and_ln102_950_fu_1132_p2);

assign and_ln102_fu_604_p2 = (icmp_ln86_fu_408_p2 & icmp_ln86_744_fu_414_p2);

assign and_ln104_131_fu_1001_p2 = (xor_ln104_fu_986_p2 & xor_ln104_352_fu_996_p2);

assign and_ln104_132_fu_634_p2 = (xor_ln104_353_fu_628_p2 & and_ln102_fu_604_p2);

assign and_ln104_133_fu_652_p2 = (xor_ln104_354_fu_646_p2 & and_ln104_fu_616_p2);

assign and_ln104_134_fu_1017_p2 = (xor_ln104_355_fu_1012_p2 & and_ln102_915_fu_991_p2);

assign and_ln104_135_fu_1033_p2 = (xor_ln104_356_fu_1028_p2 & and_ln104_131_fu_1001_p2);

assign and_ln104_fu_616_p2 = (xor_ln104_351_fu_610_p2 & icmp_ln86_fu_408_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1348_p67;

assign icmp_ln86_744_fu_414_p2 = (($signed(x_1_val) < $signed(18'd171450)) ? 1'b1 : 1'b0);

assign icmp_ln86_745_fu_420_p2 = (($signed(x_1_val) < $signed(18'd22621)) ? 1'b1 : 1'b0);

assign icmp_ln86_746_fu_426_p2 = (($signed(x_17_val) < $signed(18'd12)) ? 1'b1 : 1'b0);

assign icmp_ln86_747_fu_432_p2 = (($signed(x_52_val) < $signed(18'd53761)) ? 1'b1 : 1'b0);

assign icmp_ln86_748_fu_438_p2 = (($signed(x_19_val) < $signed(18'd1350)) ? 1'b1 : 1'b0);

assign icmp_ln86_749_fu_444_p2 = (($signed(x_33_val) < $signed(18'd430)) ? 1'b1 : 1'b0);

assign icmp_ln86_750_fu_450_p2 = (($signed(x_49_val) < $signed(18'd81215)) ? 1'b1 : 1'b0);

assign icmp_ln86_751_fu_456_p2 = (($signed(x_39_val) < $signed(18'd1031)) ? 1'b1 : 1'b0);

assign icmp_ln86_752_fu_462_p2 = (($signed(x_5_val) < $signed(18'd19807)) ? 1'b1 : 1'b0);

assign icmp_ln86_753_fu_468_p2 = (($signed(x_7_val) < $signed(18'd4622)) ? 1'b1 : 1'b0);

assign icmp_ln86_754_fu_474_p2 = (($signed(x_12_val) < $signed(18'd260319)) ? 1'b1 : 1'b0);

assign icmp_ln86_755_fu_480_p2 = (($signed(x_33_val) < $signed(18'd973)) ? 1'b1 : 1'b0);

assign icmp_ln86_756_fu_486_p2 = (($signed(x_28_val) < $signed(18'd13476)) ? 1'b1 : 1'b0);

assign icmp_ln86_757_fu_492_p2 = (($signed(x_48_val) < $signed(18'd110582)) ? 1'b1 : 1'b0);

assign icmp_ln86_758_fu_498_p2 = (($signed(x_2_val) < $signed(18'd1179)) ? 1'b1 : 1'b0);

assign icmp_ln86_759_fu_514_p2 = (($signed(tmp_fu_504_p4) < $signed(16'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_760_fu_520_p2 = (($signed(x_6_val) < $signed(18'd16721)) ? 1'b1 : 1'b0);

assign icmp_ln86_761_fu_526_p2 = (($signed(x_30_val) < $signed(18'd2179)) ? 1'b1 : 1'b0);

assign icmp_ln86_762_fu_532_p2 = (($signed(x_48_val) < $signed(18'd87887)) ? 1'b1 : 1'b0);

assign icmp_ln86_763_fu_538_p2 = (($signed(x_14_val) < $signed(18'd59)) ? 1'b1 : 1'b0);

assign icmp_ln86_764_fu_544_p2 = (($signed(x_52_val) < $signed(18'd57857)) ? 1'b1 : 1'b0);

assign icmp_ln86_765_fu_550_p2 = (($signed(x_3_val) < $signed(18'd83591)) ? 1'b1 : 1'b0);

assign icmp_ln86_766_fu_556_p2 = (($signed(x_31_val) < $signed(18'd5242)) ? 1'b1 : 1'b0);

assign icmp_ln86_767_fu_562_p2 = (($signed(x_12_val) < $signed(18'd260450)) ? 1'b1 : 1'b0);

assign icmp_ln86_768_fu_568_p2 = (($signed(x_1_val) < $signed(18'd12672)) ? 1'b1 : 1'b0);

assign icmp_ln86_769_fu_574_p2 = (($signed(x_2_val) < $signed(18'd262128)) ? 1'b1 : 1'b0);

assign icmp_ln86_770_fu_580_p2 = (($signed(x_9_val) < $signed(18'd868)) ? 1'b1 : 1'b0);

assign icmp_ln86_771_fu_586_p2 = (($signed(x_28_val) < $signed(18'd22539)) ? 1'b1 : 1'b0);

assign icmp_ln86_772_fu_592_p2 = (($signed(x_6_val) < $signed(18'd21623)) ? 1'b1 : 1'b0);

assign icmp_ln86_773_fu_598_p2 = (($signed(x_25_val) < $signed(18'd302)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_408_p2 = (($signed(x_29_val) < $signed(18'd7996)) ? 1'b1 : 1'b0);

assign or_ln117_651_fu_814_p2 = (and_ln102_931_fu_724_p2 | and_ln102_916_fu_622_p2);

assign or_ln117_652_fu_828_p2 = (and_ln102_921_fu_670_p2 | and_ln102_916_fu_622_p2);

assign or_ln117_653_fu_842_p2 = (or_ln117_652_fu_828_p2 | and_ln102_933_fu_736_p2);

assign or_ln117_654_fu_868_p2 = (and_ln102_fu_604_p2 | and_ln102_934_fu_742_p2);

assign or_ln117_655_fu_882_p2 = (and_ln102_fu_604_p2 | and_ln102_922_fu_682_p2);

assign or_ln117_656_fu_896_p2 = (or_ln117_655_fu_882_p2 | and_ln102_936_fu_754_p2);

assign or_ln117_657_fu_910_p2 = (and_ln102_fu_604_p2 | and_ln102_917_fu_640_p2);

assign or_ln117_658_fu_924_p2 = (or_ln117_657_fu_910_p2 | and_ln102_937_fu_760_p2);

assign or_ln117_659_fu_938_p2 = (or_ln117_657_fu_910_p2 | and_ln102_923_fu_694_p2);

assign or_ln117_660_fu_952_p2 = (or_ln117_659_fu_938_p2 | and_ln102_939_fu_772_p2);

assign or_ln117_661_fu_1143_p2 = (icmp_ln86_reg_1484 | and_ln102_940_fu_1079_p2);

assign or_ln117_662_fu_1148_p2 = (icmp_ln86_reg_1484 | and_ln102_924_fu_1039_p2);

assign or_ln117_663_fu_1160_p2 = (or_ln117_662_fu_1148_p2 | and_ln102_942_fu_1089_p2);

assign or_ln117_664_fu_1174_p2 = (icmp_ln86_reg_1484 | and_ln102_918_fu_1007_p2);

assign or_ln117_665_fu_1187_p2 = (or_ln117_664_fu_1174_p2 | and_ln102_943_fu_1095_p2);

assign or_ln117_666_fu_1201_p2 = (or_ln117_664_fu_1174_p2 | and_ln102_925_fu_1049_p2);

assign or_ln117_667_fu_1215_p2 = (or_ln117_666_fu_1201_p2 | and_ln102_945_fu_1105_p2);

assign or_ln117_668_fu_1229_p2 = (icmp_ln86_reg_1484 | and_ln102_915_fu_991_p2);

assign or_ln117_669_fu_1242_p2 = (or_ln117_668_fu_1229_p2 | and_ln102_946_fu_1111_p2);

assign or_ln117_670_fu_1256_p2 = (or_ln117_668_fu_1229_p2 | and_ln102_926_fu_1059_p2);

assign or_ln117_671_fu_1270_p2 = (or_ln117_670_fu_1256_p2 | and_ln102_948_fu_1121_p2);

assign or_ln117_672_fu_1284_p2 = (or_ln117_668_fu_1229_p2 | and_ln102_919_fu_1023_p2);

assign or_ln117_673_fu_1298_p2 = (or_ln117_672_fu_1284_p2 | and_ln102_949_fu_1127_p2);

assign or_ln117_674_fu_1312_p2 = (or_ln117_672_fu_1284_p2 | and_ln102_927_fu_1069_p2);

assign or_ln117_675_fu_1326_p2 = (or_ln117_674_fu_1312_p2 | and_ln102_951_fu_1137_p2);

assign or_ln117_fu_788_p2 = (and_ln102_930_fu_718_p2 | and_ln102_920_fu_658_p2);

assign select_ln117_722_fu_802_p3 = ((or_ln117_fu_788_p2[0:0] == 1'b1) ? select_ln117_fu_794_p3 : 2'd3);

assign select_ln117_723_fu_820_p3 = ((and_ln102_916_fu_622_p2[0:0] == 1'b1) ? zext_ln117_79_fu_810_p1 : 3'd4);

assign select_ln117_724_fu_834_p3 = ((or_ln117_651_fu_814_p2[0:0] == 1'b1) ? select_ln117_723_fu_820_p3 : 3'd5);

assign select_ln117_725_fu_848_p3 = ((or_ln117_652_fu_828_p2[0:0] == 1'b1) ? select_ln117_724_fu_834_p3 : 3'd6);

assign select_ln117_726_fu_856_p3 = ((or_ln117_653_fu_842_p2[0:0] == 1'b1) ? select_ln117_725_fu_848_p3 : 3'd7);

assign select_ln117_727_fu_874_p3 = ((and_ln102_fu_604_p2[0:0] == 1'b1) ? zext_ln117_80_fu_864_p1 : 4'd8);

assign select_ln117_728_fu_888_p3 = ((or_ln117_654_fu_868_p2[0:0] == 1'b1) ? select_ln117_727_fu_874_p3 : 4'd9);

assign select_ln117_729_fu_902_p3 = ((or_ln117_655_fu_882_p2[0:0] == 1'b1) ? select_ln117_728_fu_888_p3 : 4'd10);

assign select_ln117_730_fu_916_p3 = ((or_ln117_656_fu_896_p2[0:0] == 1'b1) ? select_ln117_729_fu_902_p3 : 4'd11);

assign select_ln117_731_fu_930_p3 = ((or_ln117_657_fu_910_p2[0:0] == 1'b1) ? select_ln117_730_fu_916_p3 : 4'd12);

assign select_ln117_732_fu_944_p3 = ((or_ln117_658_fu_924_p2[0:0] == 1'b1) ? select_ln117_731_fu_930_p3 : 4'd13);

assign select_ln117_733_fu_958_p3 = ((or_ln117_659_fu_938_p2[0:0] == 1'b1) ? select_ln117_732_fu_944_p3 : 4'd14);

assign select_ln117_734_fu_966_p3 = ((or_ln117_660_fu_952_p2[0:0] == 1'b1) ? select_ln117_733_fu_958_p3 : 4'd15);

assign select_ln117_735_fu_978_p3 = ((icmp_ln86_fu_408_p2[0:0] == 1'b1) ? zext_ln117_81_fu_974_p1 : 5'd16);

assign select_ln117_736_fu_1153_p3 = ((or_ln117_661_fu_1143_p2[0:0] == 1'b1) ? select_ln117_735_reg_1575 : 5'd17);

assign select_ln117_737_fu_1166_p3 = ((or_ln117_662_fu_1148_p2[0:0] == 1'b1) ? select_ln117_736_fu_1153_p3 : 5'd18);

assign select_ln117_738_fu_1179_p3 = ((or_ln117_663_fu_1160_p2[0:0] == 1'b1) ? select_ln117_737_fu_1166_p3 : 5'd19);

assign select_ln117_739_fu_1193_p3 = ((or_ln117_664_fu_1174_p2[0:0] == 1'b1) ? select_ln117_738_fu_1179_p3 : 5'd20);

assign select_ln117_740_fu_1207_p3 = ((or_ln117_665_fu_1187_p2[0:0] == 1'b1) ? select_ln117_739_fu_1193_p3 : 5'd21);

assign select_ln117_741_fu_1221_p3 = ((or_ln117_666_fu_1201_p2[0:0] == 1'b1) ? select_ln117_740_fu_1207_p3 : 5'd22);

assign select_ln117_742_fu_1234_p3 = ((or_ln117_667_fu_1215_p2[0:0] == 1'b1) ? select_ln117_741_fu_1221_p3 : 5'd23);

assign select_ln117_743_fu_1248_p3 = ((or_ln117_668_fu_1229_p2[0:0] == 1'b1) ? select_ln117_742_fu_1234_p3 : 5'd24);

assign select_ln117_744_fu_1262_p3 = ((or_ln117_669_fu_1242_p2[0:0] == 1'b1) ? select_ln117_743_fu_1248_p3 : 5'd25);

assign select_ln117_745_fu_1276_p3 = ((or_ln117_670_fu_1256_p2[0:0] == 1'b1) ? select_ln117_744_fu_1262_p3 : 5'd26);

assign select_ln117_746_fu_1290_p3 = ((or_ln117_671_fu_1270_p2[0:0] == 1'b1) ? select_ln117_745_fu_1276_p3 : 5'd27);

assign select_ln117_747_fu_1304_p3 = ((or_ln117_672_fu_1284_p2[0:0] == 1'b1) ? select_ln117_746_fu_1290_p3 : 5'd28);

assign select_ln117_748_fu_1318_p3 = ((or_ln117_673_fu_1298_p2[0:0] == 1'b1) ? select_ln117_747_fu_1304_p3 : 5'd29);

assign select_ln117_749_fu_1332_p3 = ((or_ln117_674_fu_1312_p2[0:0] == 1'b1) ? select_ln117_748_fu_1318_p3 : 5'd30);

assign select_ln117_fu_794_p3 = ((and_ln102_920_fu_658_p2[0:0] == 1'b1) ? zext_ln117_fu_784_p1 : 2'd2);

assign tmp_fu_504_p4 = {{x_17_val[17:2]}};

assign xor_ln104_351_fu_610_p2 = (icmp_ln86_744_fu_414_p2 ^ 1'd1);

assign xor_ln104_352_fu_996_p2 = (icmp_ln86_745_reg_1493 ^ 1'd1);

assign xor_ln104_353_fu_628_p2 = (icmp_ln86_746_fu_426_p2 ^ 1'd1);

assign xor_ln104_354_fu_646_p2 = (icmp_ln86_747_fu_432_p2 ^ 1'd1);

assign xor_ln104_355_fu_1012_p2 = (icmp_ln86_748_reg_1499 ^ 1'd1);

assign xor_ln104_356_fu_1028_p2 = (icmp_ln86_749_reg_1505 ^ 1'd1);

assign xor_ln104_357_fu_664_p2 = (icmp_ln86_750_fu_450_p2 ^ 1'd1);

assign xor_ln104_358_fu_676_p2 = (icmp_ln86_751_fu_456_p2 ^ 1'd1);

assign xor_ln104_359_fu_688_p2 = (icmp_ln86_752_fu_462_p2 ^ 1'd1);

assign xor_ln104_360_fu_700_p2 = (icmp_ln86_753_fu_468_p2 ^ 1'd1);

assign xor_ln104_361_fu_1044_p2 = (icmp_ln86_754_reg_1511 ^ 1'd1);

assign xor_ln104_362_fu_1054_p2 = (icmp_ln86_755_reg_1517 ^ 1'd1);

assign xor_ln104_363_fu_1064_p2 = (icmp_ln86_756_reg_1523 ^ 1'd1);

assign xor_ln104_364_fu_1074_p2 = (icmp_ln86_757_reg_1529 ^ 1'd1);

assign xor_ln104_fu_986_p2 = (icmp_ln86_reg_1484 ^ 1'd1);

assign xor_ln117_fu_778_p2 = (1'd1 ^ and_ln102_928_fu_706_p2);

assign zext_ln117_79_fu_810_p1 = select_ln117_722_fu_802_p3;

assign zext_ln117_80_fu_864_p1 = select_ln117_726_fu_856_p3;

assign zext_ln117_81_fu_974_p1 = select_ln117_734_fu_966_p3;

assign zext_ln117_fu_784_p1 = xor_ln117_fu_778_p2;

endmodule //my_prj_decision_function_73
