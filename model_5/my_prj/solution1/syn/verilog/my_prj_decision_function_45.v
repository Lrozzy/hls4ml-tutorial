// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_45 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_2_val,
        x_9_val,
        x_16_val,
        x_17_val,
        x_18_val,
        x_24_val,
        x_25_val,
        x_37_val,
        x_38_val,
        x_39_val,
        x_42_val,
        x_44_val,
        x_45_val,
        x_46_val,
        x_47_val,
        x_50_val,
        x_51_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_2_val;
input  [17:0] x_9_val;
input  [17:0] x_16_val;
input  [17:0] x_17_val;
input  [17:0] x_18_val;
input  [17:0] x_24_val;
input  [17:0] x_25_val;
input  [17:0] x_37_val;
input  [17:0] x_38_val;
input  [17:0] x_39_val;
input  [17:0] x_42_val;
input  [17:0] x_44_val;
input  [17:0] x_45_val;
input  [17:0] x_46_val;
input  [17:0] x_47_val;
input  [17:0] x_50_val;
input  [17:0] x_51_val;
input  [17:0] x_52_val;
output  [12:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
reg   [17:0] x_51_val_read_reg_1320;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_1196_fu_398_p2;
reg   [0:0] icmp_ln86_1196_reg_1325;
wire   [0:0] icmp_ln86_1200_fu_422_p2;
reg   [0:0] icmp_ln86_1200_reg_1331;
wire   [0:0] icmp_ln86_1201_fu_428_p2;
reg   [0:0] icmp_ln86_1201_reg_1337;
wire   [0:0] icmp_ln86_1202_fu_434_p2;
reg   [0:0] icmp_ln86_1202_reg_1342;
wire   [0:0] icmp_ln86_1203_fu_440_p2;
reg   [0:0] icmp_ln86_1203_reg_1348;
wire   [0:0] icmp_ln86_1211_fu_482_p2;
reg   [0:0] icmp_ln86_1211_reg_1354;
wire   [0:0] icmp_ln86_1212_fu_488_p2;
reg   [0:0] icmp_ln86_1212_reg_1359;
wire   [0:0] icmp_ln86_1213_fu_494_p2;
reg   [0:0] icmp_ln86_1213_reg_1364;
wire   [0:0] icmp_ln86_1214_fu_500_p2;
reg   [0:0] icmp_ln86_1214_reg_1369;
wire   [0:0] icmp_ln86_1215_fu_506_p2;
reg   [0:0] icmp_ln86_1215_reg_1374;
wire   [0:0] icmp_ln86_1216_fu_512_p2;
reg   [0:0] icmp_ln86_1216_reg_1379;
wire   [0:0] and_ln104_229_fu_554_p2;
reg   [0:0] and_ln104_229_reg_1384;
wire   [0:0] and_ln104_231_fu_590_p2;
reg   [0:0] and_ln104_231_reg_1390;
wire   [0:0] and_ln104_232_fu_608_p2;
reg   [0:0] and_ln104_232_reg_1396;
wire   [0:0] or_ln117_1089_fu_888_p2;
reg   [0:0] or_ln117_1089_reg_1401;
wire   [3:0] select_ln117_1164_fu_902_p3;
reg   [3:0] select_ln117_1164_reg_1407;
wire   [0:0] or_ln117_1093_fu_910_p2;
reg   [0:0] or_ln117_1093_reg_1412;
wire   [0:0] or_ln117_1095_fu_916_p2;
reg   [0:0] or_ln117_1095_reg_1418;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln86_fu_362_p2;
wire   [0:0] icmp_ln86_1191_fu_368_p2;
wire   [0:0] xor_ln104_569_fu_530_p2;
wire   [0:0] icmp_ln86_1192_fu_374_p2;
wire   [0:0] xor_ln104_fu_518_p2;
wire   [0:0] xor_ln104_570_fu_548_p2;
wire   [0:0] icmp_ln86_1193_fu_380_p2;
wire   [0:0] and_ln102_fu_524_p2;
wire   [0:0] xor_ln104_571_fu_566_p2;
wire   [0:0] icmp_ln86_1194_fu_386_p2;
wire   [0:0] and_ln104_fu_536_p2;
wire   [0:0] xor_ln104_572_fu_584_p2;
wire   [0:0] icmp_ln86_1195_fu_392_p2;
wire   [0:0] and_ln102_1146_fu_542_p2;
wire   [0:0] xor_ln104_573_fu_602_p2;
wire   [0:0] icmp_ln86_1197_fu_404_p2;
wire   [0:0] and_ln102_1147_fu_560_p2;
wire   [0:0] icmp_ln86_1198_fu_410_p2;
wire   [0:0] and_ln104_230_fu_572_p2;
wire   [0:0] icmp_ln86_1199_fu_416_p2;
wire   [0:0] and_ln102_1148_fu_578_p2;
wire   [0:0] icmp_ln86_1204_fu_446_p2;
wire   [0:0] and_ln102_1151_fu_614_p2;
wire   [0:0] icmp_ln86_1205_fu_452_p2;
wire   [0:0] xor_ln104_575_fu_620_p2;
wire   [0:0] and_ln102_1171_fu_662_p2;
wire   [0:0] icmp_ln86_1206_fu_458_p2;
wire   [0:0] and_ln102_1152_fu_626_p2;
wire   [0:0] icmp_ln86_1207_fu_464_p2;
wire   [0:0] xor_ln104_576_fu_632_p2;
wire   [0:0] and_ln102_1172_fu_680_p2;
wire   [0:0] icmp_ln86_1208_fu_470_p2;
wire   [0:0] and_ln102_1153_fu_638_p2;
wire   [0:0] icmp_ln86_1209_fu_476_p2;
wire   [0:0] xor_ln104_577_fu_644_p2;
wire   [0:0] and_ln102_1173_fu_698_p2;
wire   [0:0] and_ln102_1149_fu_596_p2;
wire   [0:0] and_ln102_1155_fu_650_p2;
wire   [0:0] xor_ln117_fu_716_p2;
wire   [0:0] or_ln117_fu_710_p2;
wire   [0:0] and_ln102_1158_fu_656_p2;
wire   [1:0] zext_ln117_fu_722_p1;
wire   [0:0] or_ln117_1078_fu_726_p2;
wire   [1:0] select_ln117_fu_732_p3;
wire   [1:0] select_ln117_1153_fu_746_p3;
wire   [0:0] or_ln117_1079_fu_740_p2;
wire   [0:0] and_ln102_1159_fu_668_p2;
wire   [2:0] zext_ln117_132_fu_754_p1;
wire   [0:0] or_ln117_1080_fu_758_p2;
wire   [2:0] select_ln117_1154_fu_764_p3;
wire   [0:0] or_ln117_1081_fu_772_p2;
wire   [0:0] and_ln102_1160_fu_674_p2;
wire   [2:0] select_ln117_1155_fu_778_p3;
wire   [0:0] or_ln117_1082_fu_786_p2;
wire   [2:0] select_ln117_1156_fu_792_p3;
wire   [2:0] select_ln117_1157_fu_806_p3;
wire   [0:0] or_ln117_1083_fu_800_p2;
wire   [0:0] and_ln102_1161_fu_686_p2;
wire   [3:0] zext_ln117_133_fu_814_p1;
wire   [0:0] or_ln117_1084_fu_818_p2;
wire   [3:0] select_ln117_1158_fu_824_p3;
wire   [0:0] or_ln117_1085_fu_832_p2;
wire   [0:0] and_ln102_1162_fu_692_p2;
wire   [3:0] select_ln117_1159_fu_838_p3;
wire   [0:0] or_ln117_1086_fu_846_p2;
wire   [3:0] select_ln117_1160_fu_852_p3;
wire   [0:0] or_ln117_1087_fu_860_p2;
wire   [0:0] and_ln102_1163_fu_704_p2;
wire   [3:0] select_ln117_1161_fu_866_p3;
wire   [0:0] or_ln117_1088_fu_874_p2;
wire   [3:0] select_ln117_1162_fu_880_p3;
wire   [3:0] select_ln117_1163_fu_894_p3;
wire   [0:0] xor_ln104_574_fu_933_p2;
wire   [0:0] and_ln102_1150_fu_929_p2;
wire   [0:0] and_ln104_233_fu_938_p2;
wire   [0:0] tmp_fu_922_p3;
wire   [0:0] and_ln102_1154_fu_943_p2;
wire   [0:0] xor_ln104_578_fu_947_p2;
wire   [0:0] and_ln102_1174_fu_983_p2;
wire   [0:0] xor_ln104_579_fu_952_p2;
wire   [0:0] and_ln102_1175_fu_993_p2;
wire   [0:0] and_ln102_1156_fu_957_p2;
wire   [0:0] xor_ln104_580_fu_962_p2;
wire   [0:0] and_ln102_1176_fu_1008_p2;
wire   [0:0] and_ln102_1157_fu_967_p2;
wire   [0:0] xor_ln104_581_fu_972_p2;
wire   [0:0] and_ln102_1177_fu_1024_p2;
wire   [0:0] and_ln102_1164_fu_977_p2;
wire   [0:0] or_ln117_1090_fu_1035_p2;
wire   [3:0] select_ln117_1165_fu_1045_p3;
wire   [0:0] or_ln117_1091_fu_1040_p2;
wire   [0:0] and_ln102_1165_fu_988_p2;
wire   [4:0] zext_ln117_134_fu_1052_p1;
wire   [0:0] or_ln117_1092_fu_1056_p2;
wire   [4:0] select_ln117_1166_fu_1062_p3;
wire   [0:0] and_ln102_1166_fu_998_p2;
wire   [4:0] select_ln117_1167_fu_1070_p3;
wire   [0:0] or_ln117_1094_fu_1078_p2;
wire   [4:0] select_ln117_1168_fu_1083_p3;
wire   [0:0] and_ln102_1167_fu_1003_p2;
wire   [4:0] select_ln117_1169_fu_1090_p3;
wire   [0:0] or_ln117_1096_fu_1098_p2;
wire   [4:0] select_ln117_1170_fu_1103_p3;
wire   [0:0] or_ln117_1097_fu_1110_p2;
wire   [0:0] and_ln102_1168_fu_1013_p2;
wire   [4:0] select_ln117_1171_fu_1115_p3;
wire   [0:0] or_ln117_1098_fu_1123_p2;
wire   [4:0] select_ln117_1172_fu_1129_p3;
wire   [0:0] or_ln117_1099_fu_1137_p2;
wire   [0:0] and_ln102_1169_fu_1019_p2;
wire   [4:0] select_ln117_1173_fu_1142_p3;
wire   [0:0] or_ln117_1100_fu_1150_p2;
wire   [4:0] select_ln117_1174_fu_1156_p3;
wire   [0:0] or_ln117_1101_fu_1164_p2;
wire   [0:0] and_ln102_1170_fu_1029_p2;
wire   [4:0] select_ln117_1175_fu_1170_p3;
wire   [0:0] or_ln117_1102_fu_1178_p2;
wire   [4:0] select_ln117_1176_fu_1184_p3;
wire   [12:0] agg_result_fu_1200_p57;
wire   [4:0] agg_result_fu_1200_p58;
wire   [12:0] agg_result_fu_1200_p59;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1200_p1;
wire   [4:0] agg_result_fu_1200_p3;
wire   [4:0] agg_result_fu_1200_p5;
wire   [4:0] agg_result_fu_1200_p7;
wire   [4:0] agg_result_fu_1200_p9;
wire   [4:0] agg_result_fu_1200_p11;
wire   [4:0] agg_result_fu_1200_p13;
wire   [4:0] agg_result_fu_1200_p15;
wire   [4:0] agg_result_fu_1200_p17;
wire   [4:0] agg_result_fu_1200_p19;
wire   [4:0] agg_result_fu_1200_p21;
wire   [4:0] agg_result_fu_1200_p23;
wire   [4:0] agg_result_fu_1200_p25;
wire   [4:0] agg_result_fu_1200_p27;
wire   [4:0] agg_result_fu_1200_p29;
wire   [4:0] agg_result_fu_1200_p31;
wire  signed [4:0] agg_result_fu_1200_p33;
wire  signed [4:0] agg_result_fu_1200_p35;
wire  signed [4:0] agg_result_fu_1200_p37;
wire  signed [4:0] agg_result_fu_1200_p39;
wire  signed [4:0] agg_result_fu_1200_p41;
wire  signed [4:0] agg_result_fu_1200_p43;
wire  signed [4:0] agg_result_fu_1200_p45;
wire  signed [4:0] agg_result_fu_1200_p47;
wire  signed [4:0] agg_result_fu_1200_p49;
wire  signed [4:0] agg_result_fu_1200_p51;
wire  signed [4:0] agg_result_fu_1200_p53;
wire  signed [4:0] agg_result_fu_1200_p55;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_57_5_13_1_1_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 13 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 13 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 13 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 13 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 13 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 13 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 13 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 13 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 13 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 13 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 13 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 13 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 13 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 13 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 13 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 13 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 13 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 13 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 13 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 13 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 13 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 13 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 13 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 13 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 13 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 13 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 13 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 13 ),
    .def_WIDTH( 13 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 13 ))
sparsemux_57_5_13_1_1_x_U1222(
    .din0(13'd7837),
    .din1(13'd7899),
    .din2(13'd71),
    .din3(13'd3),
    .din4(13'd440),
    .din5(13'd7978),
    .din6(13'd259),
    .din7(13'd1590),
    .din8(13'd1216),
    .din9(13'd33),
    .din10(13'd7878),
    .din11(13'd8159),
    .din12(13'd7986),
    .din13(13'd298),
    .din14(13'd683),
    .din15(13'd7737),
    .din16(13'd72),
    .din17(13'd8041),
    .din18(13'd98),
    .din19(13'd2225),
    .din20(13'd8020),
    .din21(13'd456),
    .din22(13'd8095),
    .din23(13'd7881),
    .din24(13'd8047),
    .din25(13'd7688),
    .din26(13'd1745),
    .din27(13'd7973),
    .def(agg_result_fu_1200_p57),
    .sel(agg_result_fu_1200_p58),
    .dout(agg_result_fu_1200_p59)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln104_229_reg_1384 <= and_ln104_229_fu_554_p2;
        and_ln104_231_reg_1390 <= and_ln104_231_fu_590_p2;
        and_ln104_232_reg_1396 <= and_ln104_232_fu_608_p2;
        icmp_ln86_1196_reg_1325 <= icmp_ln86_1196_fu_398_p2;
        icmp_ln86_1200_reg_1331 <= icmp_ln86_1200_fu_422_p2;
        icmp_ln86_1201_reg_1337 <= icmp_ln86_1201_fu_428_p2;
        icmp_ln86_1202_reg_1342 <= icmp_ln86_1202_fu_434_p2;
        icmp_ln86_1203_reg_1348 <= icmp_ln86_1203_fu_440_p2;
        icmp_ln86_1211_reg_1354 <= icmp_ln86_1211_fu_482_p2;
        icmp_ln86_1212_reg_1359 <= icmp_ln86_1212_fu_488_p2;
        icmp_ln86_1213_reg_1364 <= icmp_ln86_1213_fu_494_p2;
        icmp_ln86_1214_reg_1369 <= icmp_ln86_1214_fu_500_p2;
        icmp_ln86_1215_reg_1374 <= icmp_ln86_1215_fu_506_p2;
        icmp_ln86_1216_reg_1379 <= icmp_ln86_1216_fu_512_p2;
        or_ln117_1089_reg_1401 <= or_ln117_1089_fu_888_p2;
        or_ln117_1093_reg_1412 <= or_ln117_1093_fu_910_p2;
        or_ln117_1095_reg_1418 <= or_ln117_1095_fu_916_p2;
        select_ln117_1164_reg_1407 <= select_ln117_1164_fu_902_p3;
        x_51_val_read_reg_1320 <= x_51_val;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1200_p57 = 'bx;

assign agg_result_fu_1200_p58 = ((or_ln117_1102_fu_1178_p2[0:0] == 1'b1) ? select_ln117_1176_fu_1184_p3 : 5'd27);

assign and_ln102_1146_fu_542_p2 = (xor_ln104_fu_518_p2 & icmp_ln86_1192_fu_374_p2);

assign and_ln102_1147_fu_560_p2 = (icmp_ln86_1193_fu_380_p2 & and_ln102_fu_524_p2);

assign and_ln102_1148_fu_578_p2 = (icmp_ln86_1194_fu_386_p2 & and_ln104_fu_536_p2);

assign and_ln102_1149_fu_596_p2 = (icmp_ln86_1195_fu_392_p2 & and_ln102_1146_fu_542_p2);

assign and_ln102_1150_fu_929_p2 = (icmp_ln86_1196_reg_1325 & and_ln104_229_reg_1384);

assign and_ln102_1151_fu_614_p2 = (icmp_ln86_1197_fu_404_p2 & and_ln102_1147_fu_560_p2);

assign and_ln102_1152_fu_626_p2 = (icmp_ln86_1198_fu_410_p2 & and_ln104_230_fu_572_p2);

assign and_ln102_1153_fu_638_p2 = (icmp_ln86_1199_fu_416_p2 & and_ln102_1148_fu_578_p2);

assign and_ln102_1154_fu_943_p2 = (icmp_ln86_1200_reg_1331 & and_ln104_231_reg_1390);

assign and_ln102_1155_fu_650_p2 = (icmp_ln86_1201_fu_428_p2 & and_ln104_232_fu_608_p2);

assign and_ln102_1156_fu_957_p2 = (icmp_ln86_1202_reg_1342 & and_ln102_1150_fu_929_p2);

assign and_ln102_1157_fu_967_p2 = (icmp_ln86_1203_reg_1348 & and_ln104_233_fu_938_p2);

assign and_ln102_1158_fu_656_p2 = (icmp_ln86_1204_fu_446_p2 & and_ln102_1151_fu_614_p2);

assign and_ln102_1159_fu_668_p2 = (and_ln102_1171_fu_662_p2 & and_ln102_1147_fu_560_p2);

assign and_ln102_1160_fu_674_p2 = (icmp_ln86_1206_fu_458_p2 & and_ln102_1152_fu_626_p2);

assign and_ln102_1161_fu_686_p2 = (and_ln104_230_fu_572_p2 & and_ln102_1172_fu_680_p2);

assign and_ln102_1162_fu_692_p2 = (icmp_ln86_1208_fu_470_p2 & and_ln102_1153_fu_638_p2);

assign and_ln102_1163_fu_704_p2 = (and_ln102_1173_fu_698_p2 & and_ln102_1148_fu_578_p2);

assign and_ln102_1164_fu_977_p2 = (tmp_fu_922_p3 & and_ln102_1154_fu_943_p2);

assign and_ln102_1165_fu_988_p2 = (and_ln104_231_reg_1390 & and_ln102_1174_fu_983_p2);

assign and_ln102_1166_fu_998_p2 = (and_ln104_232_reg_1396 & and_ln102_1175_fu_993_p2);

assign and_ln102_1167_fu_1003_p2 = (icmp_ln86_1213_reg_1364 & and_ln102_1156_fu_957_p2);

assign and_ln102_1168_fu_1013_p2 = (and_ln102_1176_fu_1008_p2 & and_ln102_1150_fu_929_p2);

assign and_ln102_1169_fu_1019_p2 = (icmp_ln86_1215_reg_1374 & and_ln102_1157_fu_967_p2);

assign and_ln102_1170_fu_1029_p2 = (and_ln104_233_fu_938_p2 & and_ln102_1177_fu_1024_p2);

assign and_ln102_1171_fu_662_p2 = (xor_ln104_575_fu_620_p2 & icmp_ln86_1205_fu_452_p2);

assign and_ln102_1172_fu_680_p2 = (xor_ln104_576_fu_632_p2 & icmp_ln86_1207_fu_464_p2);

assign and_ln102_1173_fu_698_p2 = (xor_ln104_577_fu_644_p2 & icmp_ln86_1209_fu_476_p2);

assign and_ln102_1174_fu_983_p2 = (xor_ln104_578_fu_947_p2 & icmp_ln86_1211_reg_1354);

assign and_ln102_1175_fu_993_p2 = (xor_ln104_579_fu_952_p2 & icmp_ln86_1212_reg_1359);

assign and_ln102_1176_fu_1008_p2 = (xor_ln104_580_fu_962_p2 & icmp_ln86_1214_reg_1369);

assign and_ln102_1177_fu_1024_p2 = (xor_ln104_581_fu_972_p2 & icmp_ln86_1216_reg_1379);

assign and_ln102_fu_524_p2 = (icmp_ln86_fu_362_p2 & icmp_ln86_1191_fu_368_p2);

assign and_ln104_229_fu_554_p2 = (xor_ln104_fu_518_p2 & xor_ln104_570_fu_548_p2);

assign and_ln104_230_fu_572_p2 = (xor_ln104_571_fu_566_p2 & and_ln102_fu_524_p2);

assign and_ln104_231_fu_590_p2 = (xor_ln104_572_fu_584_p2 & and_ln104_fu_536_p2);

assign and_ln104_232_fu_608_p2 = (xor_ln104_573_fu_602_p2 & and_ln102_1146_fu_542_p2);

assign and_ln104_233_fu_938_p2 = (xor_ln104_574_fu_933_p2 & and_ln104_229_reg_1384);

assign and_ln104_fu_536_p2 = (xor_ln104_569_fu_530_p2 & icmp_ln86_fu_362_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1200_p59;

assign icmp_ln86_1191_fu_368_p2 = (($signed(x_52_val) < $signed(18'd54785)) ? 1'b1 : 1'b0);

assign icmp_ln86_1192_fu_374_p2 = (($signed(x_38_val) < $signed(18'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_1193_fu_380_p2 = (($signed(x_9_val) < $signed(18'd1366)) ? 1'b1 : 1'b0);

assign icmp_ln86_1194_fu_386_p2 = (($signed(x_9_val) < $signed(18'd1427)) ? 1'b1 : 1'b0);

assign icmp_ln86_1195_fu_392_p2 = (($signed(x_25_val) < $signed(18'd317)) ? 1'b1 : 1'b0);

assign icmp_ln86_1196_fu_398_p2 = (($signed(x_16_val) < $signed(18'd150)) ? 1'b1 : 1'b0);

assign icmp_ln86_1197_fu_404_p2 = (($signed(x_25_val) < $signed(18'd384)) ? 1'b1 : 1'b0);

assign icmp_ln86_1198_fu_410_p2 = (($signed(x_44_val) < $signed(18'd37)) ? 1'b1 : 1'b0);

assign icmp_ln86_1199_fu_416_p2 = (($signed(x_9_val) < $signed(18'd1170)) ? 1'b1 : 1'b0);

assign icmp_ln86_1200_fu_422_p2 = (($signed(x_1_val) < $signed(18'd194769)) ? 1'b1 : 1'b0);

assign icmp_ln86_1201_fu_428_p2 = (($signed(x_52_val) < $signed(18'd22017)) ? 1'b1 : 1'b0);

assign icmp_ln86_1202_fu_434_p2 = (($signed(x_45_val) < $signed(18'd212)) ? 1'b1 : 1'b0);

assign icmp_ln86_1203_fu_440_p2 = (($signed(x_9_val) < $signed(18'd3379)) ? 1'b1 : 1'b0);

assign icmp_ln86_1204_fu_446_p2 = (($signed(x_50_val) < $signed(18'd37767)) ? 1'b1 : 1'b0);

assign icmp_ln86_1205_fu_452_p2 = (($signed(x_39_val) < $signed(18'd883)) ? 1'b1 : 1'b0);

assign icmp_ln86_1206_fu_458_p2 = (($signed(x_42_val) < $signed(18'd231)) ? 1'b1 : 1'b0);

assign icmp_ln86_1207_fu_464_p2 = (($signed(x_2_val) < $signed(18'd260575)) ? 1'b1 : 1'b0);

assign icmp_ln86_1208_fu_470_p2 = (($signed(x_24_val) < $signed(18'd233)) ? 1'b1 : 1'b0);

assign icmp_ln86_1209_fu_476_p2 = (($signed(x_47_val) < $signed(18'd103354)) ? 1'b1 : 1'b0);

assign icmp_ln86_1211_fu_482_p2 = (($signed(x_52_val) < $signed(18'd86529)) ? 1'b1 : 1'b0);

assign icmp_ln86_1212_fu_488_p2 = (($signed(x_37_val) < $signed(18'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_1213_fu_494_p2 = (($signed(x_46_val) < $signed(18'd73)) ? 1'b1 : 1'b0);

assign icmp_ln86_1214_fu_500_p2 = (($signed(x_18_val) < $signed(18'd14856)) ? 1'b1 : 1'b0);

assign icmp_ln86_1215_fu_506_p2 = (($signed(x_52_val) < $signed(18'd39425)) ? 1'b1 : 1'b0);

assign icmp_ln86_1216_fu_512_p2 = (($signed(x_9_val) < $signed(18'd3623)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_362_p2 = (($signed(x_17_val) < $signed(18'd58)) ? 1'b1 : 1'b0);

assign or_ln117_1078_fu_726_p2 = (or_ln117_fu_710_p2 | and_ln102_1158_fu_656_p2);

assign or_ln117_1079_fu_740_p2 = (or_ln117_fu_710_p2 | and_ln102_1151_fu_614_p2);

assign or_ln117_1080_fu_758_p2 = (or_ln117_1079_fu_740_p2 | and_ln102_1159_fu_668_p2);

assign or_ln117_1081_fu_772_p2 = (or_ln117_fu_710_p2 | and_ln102_1147_fu_560_p2);

assign or_ln117_1082_fu_786_p2 = (or_ln117_1081_fu_772_p2 | and_ln102_1160_fu_674_p2);

assign or_ln117_1083_fu_800_p2 = (or_ln117_1081_fu_772_p2 | and_ln102_1152_fu_626_p2);

assign or_ln117_1084_fu_818_p2 = (or_ln117_1083_fu_800_p2 | and_ln102_1161_fu_686_p2);

assign or_ln117_1085_fu_832_p2 = (or_ln117_fu_710_p2 | and_ln102_fu_524_p2);

assign or_ln117_1086_fu_846_p2 = (or_ln117_1085_fu_832_p2 | and_ln102_1162_fu_692_p2);

assign or_ln117_1087_fu_860_p2 = (or_ln117_1085_fu_832_p2 | and_ln102_1153_fu_638_p2);

assign or_ln117_1088_fu_874_p2 = (or_ln117_1087_fu_860_p2 | and_ln102_1163_fu_704_p2);

assign or_ln117_1089_fu_888_p2 = (or_ln117_1085_fu_832_p2 | and_ln102_1148_fu_578_p2);

assign or_ln117_1090_fu_1035_p2 = (or_ln117_1089_reg_1401 | and_ln102_1164_fu_977_p2);

assign or_ln117_1091_fu_1040_p2 = (or_ln117_1089_reg_1401 | and_ln102_1154_fu_943_p2);

assign or_ln117_1092_fu_1056_p2 = (or_ln117_1091_fu_1040_p2 | and_ln102_1165_fu_988_p2);

assign or_ln117_1093_fu_910_p2 = (or_ln117_fu_710_p2 | icmp_ln86_fu_362_p2);

assign or_ln117_1094_fu_1078_p2 = (or_ln117_1093_reg_1412 | and_ln102_1166_fu_998_p2);

assign or_ln117_1095_fu_916_p2 = (icmp_ln86_fu_362_p2 | and_ln102_1146_fu_542_p2);

assign or_ln117_1096_fu_1098_p2 = (or_ln117_1095_reg_1418 | and_ln102_1167_fu_1003_p2);

assign or_ln117_1097_fu_1110_p2 = (or_ln117_1095_reg_1418 | and_ln102_1156_fu_957_p2);

assign or_ln117_1098_fu_1123_p2 = (or_ln117_1097_fu_1110_p2 | and_ln102_1168_fu_1013_p2);

assign or_ln117_1099_fu_1137_p2 = (or_ln117_1095_reg_1418 | and_ln102_1150_fu_929_p2);

assign or_ln117_1100_fu_1150_p2 = (or_ln117_1099_fu_1137_p2 | and_ln102_1169_fu_1019_p2);

assign or_ln117_1101_fu_1164_p2 = (or_ln117_1099_fu_1137_p2 | and_ln102_1157_fu_967_p2);

assign or_ln117_1102_fu_1178_p2 = (or_ln117_1101_fu_1164_p2 | and_ln102_1170_fu_1029_p2);

assign or_ln117_fu_710_p2 = (and_ln102_1155_fu_650_p2 | and_ln102_1149_fu_596_p2);

assign select_ln117_1153_fu_746_p3 = ((or_ln117_1078_fu_726_p2[0:0] == 1'b1) ? select_ln117_fu_732_p3 : 2'd3);

assign select_ln117_1154_fu_764_p3 = ((or_ln117_1079_fu_740_p2[0:0] == 1'b1) ? zext_ln117_132_fu_754_p1 : 3'd4);

assign select_ln117_1155_fu_778_p3 = ((or_ln117_1080_fu_758_p2[0:0] == 1'b1) ? select_ln117_1154_fu_764_p3 : 3'd5);

assign select_ln117_1156_fu_792_p3 = ((or_ln117_1081_fu_772_p2[0:0] == 1'b1) ? select_ln117_1155_fu_778_p3 : 3'd6);

assign select_ln117_1157_fu_806_p3 = ((or_ln117_1082_fu_786_p2[0:0] == 1'b1) ? select_ln117_1156_fu_792_p3 : 3'd7);

assign select_ln117_1158_fu_824_p3 = ((or_ln117_1083_fu_800_p2[0:0] == 1'b1) ? zext_ln117_133_fu_814_p1 : 4'd8);

assign select_ln117_1159_fu_838_p3 = ((or_ln117_1084_fu_818_p2[0:0] == 1'b1) ? select_ln117_1158_fu_824_p3 : 4'd9);

assign select_ln117_1160_fu_852_p3 = ((or_ln117_1085_fu_832_p2[0:0] == 1'b1) ? select_ln117_1159_fu_838_p3 : 4'd10);

assign select_ln117_1161_fu_866_p3 = ((or_ln117_1086_fu_846_p2[0:0] == 1'b1) ? select_ln117_1160_fu_852_p3 : 4'd11);

assign select_ln117_1162_fu_880_p3 = ((or_ln117_1087_fu_860_p2[0:0] == 1'b1) ? select_ln117_1161_fu_866_p3 : 4'd12);

assign select_ln117_1163_fu_894_p3 = ((or_ln117_1088_fu_874_p2[0:0] == 1'b1) ? select_ln117_1162_fu_880_p3 : 4'd13);

assign select_ln117_1164_fu_902_p3 = ((or_ln117_1089_fu_888_p2[0:0] == 1'b1) ? select_ln117_1163_fu_894_p3 : 4'd14);

assign select_ln117_1165_fu_1045_p3 = ((or_ln117_1090_fu_1035_p2[0:0] == 1'b1) ? select_ln117_1164_reg_1407 : 4'd15);

assign select_ln117_1166_fu_1062_p3 = ((or_ln117_1091_fu_1040_p2[0:0] == 1'b1) ? zext_ln117_134_fu_1052_p1 : 5'd16);

assign select_ln117_1167_fu_1070_p3 = ((or_ln117_1092_fu_1056_p2[0:0] == 1'b1) ? select_ln117_1166_fu_1062_p3 : 5'd17);

assign select_ln117_1168_fu_1083_p3 = ((or_ln117_1093_reg_1412[0:0] == 1'b1) ? select_ln117_1167_fu_1070_p3 : 5'd18);

assign select_ln117_1169_fu_1090_p3 = ((or_ln117_1094_fu_1078_p2[0:0] == 1'b1) ? select_ln117_1168_fu_1083_p3 : 5'd19);

assign select_ln117_1170_fu_1103_p3 = ((or_ln117_1095_reg_1418[0:0] == 1'b1) ? select_ln117_1169_fu_1090_p3 : 5'd20);

assign select_ln117_1171_fu_1115_p3 = ((or_ln117_1096_fu_1098_p2[0:0] == 1'b1) ? select_ln117_1170_fu_1103_p3 : 5'd21);

assign select_ln117_1172_fu_1129_p3 = ((or_ln117_1097_fu_1110_p2[0:0] == 1'b1) ? select_ln117_1171_fu_1115_p3 : 5'd22);

assign select_ln117_1173_fu_1142_p3 = ((or_ln117_1098_fu_1123_p2[0:0] == 1'b1) ? select_ln117_1172_fu_1129_p3 : 5'd23);

assign select_ln117_1174_fu_1156_p3 = ((or_ln117_1099_fu_1137_p2[0:0] == 1'b1) ? select_ln117_1173_fu_1142_p3 : 5'd24);

assign select_ln117_1175_fu_1170_p3 = ((or_ln117_1100_fu_1150_p2[0:0] == 1'b1) ? select_ln117_1174_fu_1156_p3 : 5'd25);

assign select_ln117_1176_fu_1184_p3 = ((or_ln117_1101_fu_1164_p2[0:0] == 1'b1) ? select_ln117_1175_fu_1170_p3 : 5'd26);

assign select_ln117_fu_732_p3 = ((or_ln117_fu_710_p2[0:0] == 1'b1) ? zext_ln117_fu_722_p1 : 2'd2);

assign tmp_fu_922_p3 = x_51_val_read_reg_1320[32'd17];

assign xor_ln104_569_fu_530_p2 = (icmp_ln86_1191_fu_368_p2 ^ 1'd1);

assign xor_ln104_570_fu_548_p2 = (icmp_ln86_1192_fu_374_p2 ^ 1'd1);

assign xor_ln104_571_fu_566_p2 = (icmp_ln86_1193_fu_380_p2 ^ 1'd1);

assign xor_ln104_572_fu_584_p2 = (icmp_ln86_1194_fu_386_p2 ^ 1'd1);

assign xor_ln104_573_fu_602_p2 = (icmp_ln86_1195_fu_392_p2 ^ 1'd1);

assign xor_ln104_574_fu_933_p2 = (icmp_ln86_1196_reg_1325 ^ 1'd1);

assign xor_ln104_575_fu_620_p2 = (icmp_ln86_1197_fu_404_p2 ^ 1'd1);

assign xor_ln104_576_fu_632_p2 = (icmp_ln86_1198_fu_410_p2 ^ 1'd1);

assign xor_ln104_577_fu_644_p2 = (icmp_ln86_1199_fu_416_p2 ^ 1'd1);

assign xor_ln104_578_fu_947_p2 = (icmp_ln86_1200_reg_1331 ^ 1'd1);

assign xor_ln104_579_fu_952_p2 = (icmp_ln86_1201_reg_1337 ^ 1'd1);

assign xor_ln104_580_fu_962_p2 = (icmp_ln86_1202_reg_1342 ^ 1'd1);

assign xor_ln104_581_fu_972_p2 = (icmp_ln86_1203_reg_1348 ^ 1'd1);

assign xor_ln104_fu_518_p2 = (icmp_ln86_fu_362_p2 ^ 1'd1);

assign xor_ln117_fu_716_p2 = (1'd1 ^ and_ln102_1149_fu_596_p2);

assign zext_ln117_132_fu_754_p1 = select_ln117_1153_fu_746_p3;

assign zext_ln117_133_fu_814_p1 = select_ln117_1157_fu_806_p3;

assign zext_ln117_134_fu_1052_p1 = select_ln117_1165_fu_1045_p3;

assign zext_ln117_fu_722_p1 = xor_ln117_fu_716_p2;

endmodule //my_prj_decision_function_45
