// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_112 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_3_val,
        x_5_val,
        x_6_val,
        x_10_val,
        x_11_val,
        x_13_val,
        x_14_val,
        x_16_val,
        x_19_val,
        x_23_val,
        x_26_val,
        x_27_val,
        x_30_val,
        x_32_val,
        x_33_val,
        x_34_val,
        x_35_val,
        x_39_val,
        x_43_val,
        x_45_val,
        x_46_val,
        x_47_val,
        x_49_val,
        x_50_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_3_val;
input  [17:0] x_5_val;
input  [17:0] x_6_val;
input  [17:0] x_10_val;
input  [17:0] x_11_val;
input  [17:0] x_13_val;
input  [17:0] x_14_val;
input  [17:0] x_16_val;
input  [17:0] x_19_val;
input  [17:0] x_23_val;
input  [17:0] x_26_val;
input  [17:0] x_27_val;
input  [17:0] x_30_val;
input  [17:0] x_32_val;
input  [17:0] x_33_val;
input  [17:0] x_34_val;
input  [17:0] x_35_val;
input  [17:0] x_39_val;
input  [17:0] x_43_val;
input  [17:0] x_45_val;
input  [17:0] x_46_val;
input  [17:0] x_47_val;
input  [17:0] x_49_val;
input  [17:0] x_50_val;
input  [17:0] x_52_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_1702_fu_460_p2;
reg   [0:0] icmp_ln86_1702_reg_1505;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_1707_fu_490_p2;
reg   [0:0] icmp_ln86_1707_reg_1511;
wire   [0:0] icmp_ln86_1708_fu_496_p2;
reg   [0:0] icmp_ln86_1708_reg_1516;
wire   [0:0] icmp_ln86_1709_fu_502_p2;
reg   [0:0] icmp_ln86_1709_reg_1522;
wire   [0:0] icmp_ln86_1711_fu_514_p2;
reg   [0:0] icmp_ln86_1711_reg_1528;
wire   [0:0] icmp_ln86_1719_fu_562_p2;
reg   [0:0] icmp_ln86_1719_reg_1534;
wire   [0:0] icmp_ln86_1720_fu_568_p2;
reg   [0:0] icmp_ln86_1720_reg_1539;
wire   [0:0] icmp_ln86_1721_fu_574_p2;
reg   [0:0] icmp_ln86_1721_reg_1544;
wire   [0:0] icmp_ln86_1722_fu_580_p2;
reg   [0:0] icmp_ln86_1722_reg_1549;
wire   [0:0] icmp_ln86_1723_fu_586_p2;
reg   [0:0] icmp_ln86_1723_reg_1554;
wire   [0:0] icmp_ln86_1724_fu_592_p2;
reg   [0:0] icmp_ln86_1724_reg_1559;
wire   [0:0] icmp_ln86_1725_fu_598_p2;
reg   [0:0] icmp_ln86_1725_reg_1564;
wire   [0:0] icmp_ln86_1726_fu_604_p2;
reg   [0:0] icmp_ln86_1726_reg_1569;
wire   [0:0] and_ln102_1891_fu_634_p2;
reg   [0:0] and_ln102_1891_reg_1574;
wire   [0:0] and_ln104_323_fu_682_p2;
reg   [0:0] and_ln104_323_reg_1581;
wire   [0:0] and_ln104_325_fu_700_p2;
reg   [0:0] and_ln104_325_reg_1586;
wire   [0:0] and_ln102_1902_fu_748_p2;
reg   [0:0] and_ln102_1902_reg_1593;
wire   [0:0] or_ln117_1547_fu_1024_p2;
reg   [0:0] or_ln117_1547_reg_1599;
wire   [3:0] select_ln117_1658_fu_1038_p3;
reg   [3:0] select_ln117_1658_reg_1604;
wire   [0:0] or_ln117_1549_fu_1046_p2;
reg   [0:0] or_ln117_1549_reg_1609;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln86_fu_430_p2;
wire   [0:0] icmp_ln86_1698_fu_436_p2;
wire   [0:0] xor_ln104_812_fu_622_p2;
wire   [0:0] icmp_ln86_1699_fu_442_p2;
wire   [0:0] xor_ln104_fu_610_p2;
wire   [0:0] xor_ln104_813_fu_640_p2;
wire   [0:0] icmp_ln86_1700_fu_448_p2;
wire   [0:0] and_ln102_fu_616_p2;
wire   [0:0] xor_ln104_814_fu_658_p2;
wire   [0:0] icmp_ln86_1701_fu_454_p2;
wire   [0:0] and_ln104_fu_628_p2;
wire   [0:0] xor_ln104_815_fu_676_p2;
wire   [0:0] icmp_ln86_1703_fu_466_p2;
wire   [0:0] and_ln104_321_fu_646_p2;
wire   [0:0] xor_ln104_817_fu_694_p2;
wire   [0:0] icmp_ln86_1704_fu_472_p2;
wire   [0:0] and_ln102_1892_fu_652_p2;
wire   [0:0] icmp_ln86_1705_fu_478_p2;
wire   [0:0] and_ln104_322_fu_664_p2;
wire   [0:0] icmp_ln86_1706_fu_484_p2;
wire   [0:0] and_ln102_1893_fu_670_p2;
wire   [0:0] icmp_ln86_1710_fu_508_p2;
wire   [0:0] and_ln102_1895_fu_688_p2;
wire   [0:0] xor_ln104_824_fu_754_p2;
wire   [0:0] icmp_ln86_1712_fu_520_p2;
wire   [0:0] and_ln102_1896_fu_706_p2;
wire   [0:0] icmp_ln86_1713_fu_526_p2;
wire   [0:0] xor_ln104_818_fu_712_p2;
wire   [0:0] and_ln102_1905_fu_772_p2;
wire   [0:0] icmp_ln86_1714_fu_532_p2;
wire   [0:0] and_ln102_1897_fu_718_p2;
wire   [0:0] icmp_ln86_1715_fu_538_p2;
wire   [0:0] xor_ln104_819_fu_724_p2;
wire   [0:0] and_ln102_1908_fu_790_p2;
wire   [0:0] icmp_ln86_1716_fu_544_p2;
wire   [0:0] and_ln102_1898_fu_730_p2;
wire   [0:0] icmp_ln86_1717_fu_550_p2;
wire   [0:0] xor_ln104_820_fu_736_p2;
wire   [0:0] and_ln102_1911_fu_808_p2;
wire   [0:0] icmp_ln86_1718_fu_556_p2;
wire   [0:0] and_ln102_1899_fu_742_p2;
wire   [0:0] and_ln104_326_fu_760_p2;
wire   [0:0] and_ln102_1904_fu_766_p2;
wire   [0:0] xor_ln117_fu_832_p2;
wire   [0:0] or_ln117_1534_fu_838_p2;
wire   [0:0] or_ln117_fu_826_p2;
wire   [1:0] zext_ln117_fu_844_p1;
wire   [0:0] or_ln117_1535_fu_848_p2;
wire   [0:0] and_ln102_1906_fu_778_p2;
wire   [1:0] select_ln117_fu_854_p3;
wire   [1:0] select_ln117_1646_fu_868_p3;
wire   [0:0] or_ln117_1536_fu_862_p2;
wire   [2:0] zext_ln117_183_fu_876_p1;
wire   [0:0] or_ln117_1537_fu_880_p2;
wire   [0:0] and_ln102_1907_fu_784_p2;
wire   [2:0] select_ln117_1647_fu_886_p3;
wire   [0:0] or_ln117_1538_fu_894_p2;
wire   [2:0] select_ln117_1648_fu_900_p3;
wire   [0:0] or_ln117_1539_fu_908_p2;
wire   [0:0] and_ln102_1909_fu_796_p2;
wire   [2:0] select_ln117_1649_fu_914_p3;
wire   [2:0] select_ln117_1650_fu_928_p3;
wire   [0:0] or_ln117_1540_fu_922_p2;
wire   [3:0] zext_ln117_184_fu_936_p1;
wire   [0:0] or_ln117_1541_fu_940_p2;
wire   [0:0] and_ln102_1910_fu_802_p2;
wire   [3:0] select_ln117_1651_fu_946_p3;
wire   [0:0] or_ln117_1542_fu_954_p2;
wire   [3:0] select_ln117_1652_fu_960_p3;
wire   [0:0] or_ln117_1543_fu_968_p2;
wire   [0:0] and_ln102_1912_fu_814_p2;
wire   [3:0] select_ln117_1653_fu_974_p3;
wire   [0:0] or_ln117_1544_fu_982_p2;
wire   [3:0] select_ln117_1654_fu_988_p3;
wire   [0:0] or_ln117_1545_fu_996_p2;
wire   [0:0] and_ln102_1913_fu_820_p2;
wire   [3:0] select_ln117_1655_fu_1002_p3;
wire   [0:0] or_ln117_1546_fu_1010_p2;
wire   [3:0] select_ln117_1656_fu_1016_p3;
wire   [3:0] select_ln117_1657_fu_1030_p3;
wire   [0:0] xor_ln104_816_fu_1056_p2;
wire   [0:0] and_ln102_1894_fu_1052_p2;
wire   [0:0] and_ln104_324_fu_1061_p2;
wire   [0:0] xor_ln104_821_fu_1066_p2;
wire   [0:0] and_ln102_1914_fu_1100_p2;
wire   [0:0] and_ln102_1900_fu_1071_p2;
wire   [0:0] xor_ln104_822_fu_1076_p2;
wire   [0:0] and_ln102_1917_fu_1115_p2;
wire   [0:0] and_ln102_1901_fu_1081_p2;
wire   [0:0] xor_ln104_823_fu_1086_p2;
wire   [0:0] and_ln102_1920_fu_1131_p2;
wire   [0:0] and_ln102_1903_fu_1091_p2;
wire   [0:0] xor_ln104_825_fu_1095_p2;
wire   [0:0] and_ln102_1924_fu_1151_p2;
wire   [0:0] and_ln102_1915_fu_1105_p2;
wire   [0:0] or_ln117_1548_fu_1161_p2;
wire   [4:0] zext_ln117_185_fu_1166_p1;
wire   [0:0] and_ln102_1916_fu_1110_p2;
wire   [4:0] select_ln117_1659_fu_1169_p3;
wire   [0:0] or_ln117_1550_fu_1177_p2;
wire   [4:0] select_ln117_1660_fu_1182_p3;
wire   [0:0] or_ln117_1551_fu_1189_p2;
wire   [0:0] and_ln102_1918_fu_1120_p2;
wire   [4:0] select_ln117_1661_fu_1194_p3;
wire   [0:0] or_ln117_1552_fu_1202_p2;
wire   [4:0] select_ln117_1662_fu_1208_p3;
wire   [0:0] or_ln117_1553_fu_1216_p2;
wire   [0:0] and_ln102_1919_fu_1126_p2;
wire   [4:0] select_ln117_1663_fu_1221_p3;
wire   [0:0] or_ln117_1554_fu_1229_p2;
wire   [4:0] select_ln117_1664_fu_1235_p3;
wire   [0:0] or_ln117_1555_fu_1243_p2;
wire   [0:0] and_ln102_1921_fu_1136_p2;
wire   [4:0] select_ln117_1665_fu_1249_p3;
wire   [0:0] or_ln117_1556_fu_1257_p2;
wire   [4:0] select_ln117_1666_fu_1263_p3;
wire   [0:0] or_ln117_1557_fu_1271_p2;
wire   [0:0] and_ln102_1922_fu_1142_p2;
wire   [4:0] select_ln117_1667_fu_1275_p3;
wire   [0:0] or_ln117_1558_fu_1283_p2;
wire   [4:0] select_ln117_1668_fu_1289_p3;
wire   [0:0] or_ln117_1559_fu_1297_p2;
wire   [0:0] and_ln102_1923_fu_1146_p2;
wire   [4:0] select_ln117_1669_fu_1302_p3;
wire   [0:0] or_ln117_1560_fu_1310_p2;
wire   [4:0] select_ln117_1670_fu_1316_p3;
wire   [0:0] or_ln117_1561_fu_1324_p2;
wire   [0:0] and_ln102_1925_fu_1156_p2;
wire   [4:0] select_ln117_1671_fu_1330_p3;
wire   [0:0] or_ln117_1562_fu_1338_p2;
wire   [4:0] select_ln117_1672_fu_1344_p3;
wire   [11:0] tmp_fu_1365_p63;
wire   [4:0] tmp_fu_1365_p64;
wire   [0:0] or_ln117_1563_fu_1352_p2;
wire   [11:0] tmp_fu_1365_p65;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] tmp_fu_1365_p1;
wire   [4:0] tmp_fu_1365_p3;
wire   [4:0] tmp_fu_1365_p5;
wire   [4:0] tmp_fu_1365_p7;
wire   [4:0] tmp_fu_1365_p9;
wire   [4:0] tmp_fu_1365_p11;
wire   [4:0] tmp_fu_1365_p13;
wire   [4:0] tmp_fu_1365_p15;
wire   [4:0] tmp_fu_1365_p17;
wire   [4:0] tmp_fu_1365_p19;
wire   [4:0] tmp_fu_1365_p21;
wire   [4:0] tmp_fu_1365_p23;
wire   [4:0] tmp_fu_1365_p25;
wire   [4:0] tmp_fu_1365_p27;
wire   [4:0] tmp_fu_1365_p29;
wire   [4:0] tmp_fu_1365_p31;
wire  signed [4:0] tmp_fu_1365_p33;
wire  signed [4:0] tmp_fu_1365_p35;
wire  signed [4:0] tmp_fu_1365_p37;
wire  signed [4:0] tmp_fu_1365_p39;
wire  signed [4:0] tmp_fu_1365_p41;
wire  signed [4:0] tmp_fu_1365_p43;
wire  signed [4:0] tmp_fu_1365_p45;
wire  signed [4:0] tmp_fu_1365_p47;
wire  signed [4:0] tmp_fu_1365_p49;
wire  signed [4:0] tmp_fu_1365_p51;
wire  signed [4:0] tmp_fu_1365_p53;
wire  signed [4:0] tmp_fu_1365_p55;
wire  signed [4:0] tmp_fu_1365_p57;
wire  signed [4:0] tmp_fu_1365_p59;
wire  signed [4:0] tmp_fu_1365_p61;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_63_5_12_1_1_x4 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 12 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 12 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 12 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_63_5_12_1_1_x4_U2295(
    .din0(12'd381),
    .din1(12'd41),
    .din2(12'd4093),
    .din3(12'd4040),
    .din4(12'd3677),
    .din5(12'd322),
    .din6(12'd3850),
    .din7(12'd1238),
    .din8(12'd3933),
    .din9(12'd3686),
    .din10(12'd203),
    .din11(12'd1693),
    .din12(12'd3778),
    .din13(12'd4091),
    .din14(12'd3825),
    .din15(12'd113),
    .din16(12'd3852),
    .din17(12'd4042),
    .din18(12'd90),
    .din19(12'd3982),
    .din20(12'd3669),
    .din21(12'd151),
    .din22(12'd1147),
    .din23(12'd4045),
    .din24(12'd968),
    .din25(12'd193),
    .din26(12'd3394),
    .din27(12'd3902),
    .din28(12'd486),
    .din29(12'd3832),
    .din30(12'd585),
    .def(tmp_fu_1365_p63),
    .sel(tmp_fu_1365_p64),
    .dout(tmp_fu_1365_p65)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln102_1891_reg_1574 <= and_ln102_1891_fu_634_p2;
        and_ln102_1902_reg_1593 <= and_ln102_1902_fu_748_p2;
        and_ln104_323_reg_1581 <= and_ln104_323_fu_682_p2;
        and_ln104_325_reg_1586 <= and_ln104_325_fu_700_p2;
        icmp_ln86_1702_reg_1505 <= icmp_ln86_1702_fu_460_p2;
        icmp_ln86_1707_reg_1511 <= icmp_ln86_1707_fu_490_p2;
        icmp_ln86_1708_reg_1516 <= icmp_ln86_1708_fu_496_p2;
        icmp_ln86_1709_reg_1522 <= icmp_ln86_1709_fu_502_p2;
        icmp_ln86_1711_reg_1528 <= icmp_ln86_1711_fu_514_p2;
        icmp_ln86_1719_reg_1534 <= icmp_ln86_1719_fu_562_p2;
        icmp_ln86_1720_reg_1539 <= icmp_ln86_1720_fu_568_p2;
        icmp_ln86_1721_reg_1544 <= icmp_ln86_1721_fu_574_p2;
        icmp_ln86_1722_reg_1549 <= icmp_ln86_1722_fu_580_p2;
        icmp_ln86_1723_reg_1554 <= icmp_ln86_1723_fu_586_p2;
        icmp_ln86_1724_reg_1559 <= icmp_ln86_1724_fu_592_p2;
        icmp_ln86_1725_reg_1564 <= icmp_ln86_1725_fu_598_p2;
        icmp_ln86_1726_reg_1569 <= icmp_ln86_1726_fu_604_p2;
        or_ln117_1547_reg_1599 <= or_ln117_1547_fu_1024_p2;
        or_ln117_1549_reg_1609 <= or_ln117_1549_fu_1046_p2;
        select_ln117_1658_reg_1604 <= select_ln117_1658_fu_1038_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln102_1891_fu_634_p2 = (xor_ln104_fu_610_p2 & icmp_ln86_1699_fu_442_p2);

assign and_ln102_1892_fu_652_p2 = (icmp_ln86_1700_fu_448_p2 & and_ln102_fu_616_p2);

assign and_ln102_1893_fu_670_p2 = (icmp_ln86_1701_fu_454_p2 & and_ln104_fu_628_p2);

assign and_ln102_1894_fu_1052_p2 = (icmp_ln86_1702_reg_1505 & and_ln102_1891_reg_1574);

assign and_ln102_1895_fu_688_p2 = (icmp_ln86_1703_fu_466_p2 & and_ln104_321_fu_646_p2);

assign and_ln102_1896_fu_706_p2 = (icmp_ln86_1704_fu_472_p2 & and_ln102_1892_fu_652_p2);

assign and_ln102_1897_fu_718_p2 = (icmp_ln86_1705_fu_478_p2 & and_ln104_322_fu_664_p2);

assign and_ln102_1898_fu_730_p2 = (icmp_ln86_1706_fu_484_p2 & and_ln102_1893_fu_670_p2);

assign and_ln102_1899_fu_742_p2 = (icmp_ln86_1707_fu_490_p2 & and_ln104_323_fu_682_p2);

assign and_ln102_1900_fu_1071_p2 = (icmp_ln86_1708_reg_1516 & and_ln102_1894_fu_1052_p2);

assign and_ln102_1901_fu_1081_p2 = (icmp_ln86_1709_reg_1522 & and_ln104_324_fu_1061_p2);

assign and_ln102_1902_fu_748_p2 = (icmp_ln86_1710_fu_508_p2 & and_ln102_1895_fu_688_p2);

assign and_ln102_1903_fu_1091_p2 = (icmp_ln86_1711_reg_1528 & and_ln104_325_reg_1586);

assign and_ln102_1904_fu_766_p2 = (icmp_ln86_1712_fu_520_p2 & and_ln102_1896_fu_706_p2);

assign and_ln102_1905_fu_772_p2 = (xor_ln104_818_fu_712_p2 & icmp_ln86_1713_fu_526_p2);

assign and_ln102_1906_fu_778_p2 = (and_ln102_1905_fu_772_p2 & and_ln102_1892_fu_652_p2);

assign and_ln102_1907_fu_784_p2 = (icmp_ln86_1714_fu_532_p2 & and_ln102_1897_fu_718_p2);

assign and_ln102_1908_fu_790_p2 = (xor_ln104_819_fu_724_p2 & icmp_ln86_1715_fu_538_p2);

assign and_ln102_1909_fu_796_p2 = (and_ln104_322_fu_664_p2 & and_ln102_1908_fu_790_p2);

assign and_ln102_1910_fu_802_p2 = (icmp_ln86_1716_fu_544_p2 & and_ln102_1898_fu_730_p2);

assign and_ln102_1911_fu_808_p2 = (xor_ln104_820_fu_736_p2 & icmp_ln86_1717_fu_550_p2);

assign and_ln102_1912_fu_814_p2 = (and_ln102_1911_fu_808_p2 & and_ln102_1893_fu_670_p2);

assign and_ln102_1913_fu_820_p2 = (icmp_ln86_1718_fu_556_p2 & and_ln102_1899_fu_742_p2);

assign and_ln102_1914_fu_1100_p2 = (xor_ln104_821_fu_1066_p2 & icmp_ln86_1719_reg_1534);

assign and_ln102_1915_fu_1105_p2 = (and_ln104_323_reg_1581 & and_ln102_1914_fu_1100_p2);

assign and_ln102_1916_fu_1110_p2 = (icmp_ln86_1720_reg_1539 & and_ln102_1900_fu_1071_p2);

assign and_ln102_1917_fu_1115_p2 = (xor_ln104_822_fu_1076_p2 & icmp_ln86_1721_reg_1544);

assign and_ln102_1918_fu_1120_p2 = (and_ln102_1917_fu_1115_p2 & and_ln102_1894_fu_1052_p2);

assign and_ln102_1919_fu_1126_p2 = (icmp_ln86_1722_reg_1549 & and_ln102_1901_fu_1081_p2);

assign and_ln102_1920_fu_1131_p2 = (xor_ln104_823_fu_1086_p2 & icmp_ln86_1723_reg_1554);

assign and_ln102_1921_fu_1136_p2 = (and_ln104_324_fu_1061_p2 & and_ln102_1920_fu_1131_p2);

assign and_ln102_1922_fu_1142_p2 = (icmp_ln86_1724_reg_1559 & and_ln102_1902_reg_1593);

assign and_ln102_1923_fu_1146_p2 = (icmp_ln86_1725_reg_1564 & and_ln102_1903_fu_1091_p2);

assign and_ln102_1924_fu_1151_p2 = (xor_ln104_825_fu_1095_p2 & icmp_ln86_1726_reg_1569);

assign and_ln102_1925_fu_1156_p2 = (and_ln104_325_reg_1586 & and_ln102_1924_fu_1151_p2);

assign and_ln102_fu_616_p2 = (icmp_ln86_fu_430_p2 & icmp_ln86_1698_fu_436_p2);

assign and_ln104_321_fu_646_p2 = (xor_ln104_fu_610_p2 & xor_ln104_813_fu_640_p2);

assign and_ln104_322_fu_664_p2 = (xor_ln104_814_fu_658_p2 & and_ln102_fu_616_p2);

assign and_ln104_323_fu_682_p2 = (xor_ln104_815_fu_676_p2 & and_ln104_fu_628_p2);

assign and_ln104_324_fu_1061_p2 = (xor_ln104_816_fu_1056_p2 & and_ln102_1891_reg_1574);

assign and_ln104_325_fu_700_p2 = (xor_ln104_817_fu_694_p2 & and_ln104_321_fu_646_p2);

assign and_ln104_326_fu_760_p2 = (xor_ln104_824_fu_754_p2 & and_ln102_1895_fu_688_p2);

assign and_ln104_fu_628_p2 = (xor_ln104_812_fu_622_p2 & icmp_ln86_fu_430_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((or_ln117_1563_fu_1352_p2[0:0] == 1'b1) ? tmp_fu_1365_p65 : 12'd0);

assign icmp_ln86_1698_fu_436_p2 = (($signed(x_10_val) < $signed(18'd875)) ? 1'b1 : 1'b0);

assign icmp_ln86_1699_fu_442_p2 = (($signed(x_49_val) < $signed(18'd160497)) ? 1'b1 : 1'b0);

assign icmp_ln86_1700_fu_448_p2 = (($signed(x_23_val) < $signed(18'd95)) ? 1'b1 : 1'b0);

assign icmp_ln86_1701_fu_454_p2 = (($signed(x_11_val) < $signed(18'd718)) ? 1'b1 : 1'b0);

assign icmp_ln86_1702_fu_460_p2 = (($signed(x_35_val) < $signed(18'd62)) ? 1'b1 : 1'b0);

assign icmp_ln86_1703_fu_466_p2 = (($signed(x_43_val) < $signed(18'd49)) ? 1'b1 : 1'b0);

assign icmp_ln86_1704_fu_472_p2 = (($signed(x_45_val) < $signed(18'd388)) ? 1'b1 : 1'b0);

assign icmp_ln86_1705_fu_478_p2 = (($signed(x_46_val) < $signed(18'd292)) ? 1'b1 : 1'b0);

assign icmp_ln86_1706_fu_484_p2 = (($signed(x_19_val) < $signed(18'd71035)) ? 1'b1 : 1'b0);

assign icmp_ln86_1707_fu_490_p2 = (($signed(x_34_val) < $signed(18'd438)) ? 1'b1 : 1'b0);

assign icmp_ln86_1708_fu_496_p2 = (($signed(x_26_val) < $signed(18'd66387)) ? 1'b1 : 1'b0);

assign icmp_ln86_1709_fu_502_p2 = (($signed(x_30_val) < $signed(18'd1743)) ? 1'b1 : 1'b0);

assign icmp_ln86_1710_fu_508_p2 = (($signed(x_5_val) < $signed(18'd24091)) ? 1'b1 : 1'b0);

assign icmp_ln86_1711_fu_514_p2 = (($signed(x_52_val) < $signed(18'd75265)) ? 1'b1 : 1'b0);

assign icmp_ln86_1712_fu_520_p2 = (($signed(x_50_val) < $signed(18'd83108)) ? 1'b1 : 1'b0);

assign icmp_ln86_1713_fu_526_p2 = (($signed(x_43_val) < $signed(18'd172)) ? 1'b1 : 1'b0);

assign icmp_ln86_1714_fu_532_p2 = (($signed(x_39_val) < $signed(18'd1484)) ? 1'b1 : 1'b0);

assign icmp_ln86_1715_fu_538_p2 = (($signed(x_14_val) < $signed(18'd47)) ? 1'b1 : 1'b0);

assign icmp_ln86_1716_fu_544_p2 = (($signed(x_3_val) < $signed(18'd48315)) ? 1'b1 : 1'b0);

assign icmp_ln86_1717_fu_550_p2 = (($signed(x_46_val) < $signed(18'd253)) ? 1'b1 : 1'b0);

assign icmp_ln86_1718_fu_556_p2 = (($signed(x_33_val) < $signed(18'd566)) ? 1'b1 : 1'b0);

assign icmp_ln86_1719_fu_562_p2 = (($signed(x_6_val) < $signed(18'd27566)) ? 1'b1 : 1'b0);

assign icmp_ln86_1720_fu_568_p2 = (($signed(x_13_val) < $signed(18'd480)) ? 1'b1 : 1'b0);

assign icmp_ln86_1721_fu_574_p2 = (($signed(x_23_val) < $signed(18'd56)) ? 1'b1 : 1'b0);

assign icmp_ln86_1722_fu_580_p2 = (($signed(x_27_val) < $signed(18'd25611)) ? 1'b1 : 1'b0);

assign icmp_ln86_1723_fu_586_p2 = (($signed(x_49_val) < $signed(18'd159954)) ? 1'b1 : 1'b0);

assign icmp_ln86_1724_fu_592_p2 = (($signed(x_47_val) < $signed(18'd162934)) ? 1'b1 : 1'b0);

assign icmp_ln86_1725_fu_598_p2 = (($signed(x_16_val) < $signed(18'd65)) ? 1'b1 : 1'b0);

assign icmp_ln86_1726_fu_604_p2 = (($signed(x_14_val) < $signed(18'd119)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_430_p2 = (($signed(x_32_val) < $signed(18'd863)) ? 1'b1 : 1'b0);

assign or_ln117_1534_fu_838_p2 = (xor_ln117_fu_832_p2 | icmp_ln86_1710_fu_508_p2);

assign or_ln117_1535_fu_848_p2 = (and_ln104_326_fu_760_p2 | and_ln102_1896_fu_706_p2);

assign or_ln117_1536_fu_862_p2 = (or_ln117_1535_fu_848_p2 | and_ln102_1906_fu_778_p2);

assign or_ln117_1537_fu_880_p2 = (and_ln104_326_fu_760_p2 | and_ln102_1892_fu_652_p2);

assign or_ln117_1538_fu_894_p2 = (or_ln117_1537_fu_880_p2 | and_ln102_1907_fu_784_p2);

assign or_ln117_1539_fu_908_p2 = (or_ln117_1537_fu_880_p2 | and_ln102_1897_fu_718_p2);

assign or_ln117_1540_fu_922_p2 = (or_ln117_1539_fu_908_p2 | and_ln102_1909_fu_796_p2);

assign or_ln117_1541_fu_940_p2 = (and_ln104_326_fu_760_p2 | and_ln102_fu_616_p2);

assign or_ln117_1542_fu_954_p2 = (or_ln117_1541_fu_940_p2 | and_ln102_1910_fu_802_p2);

assign or_ln117_1543_fu_968_p2 = (or_ln117_1541_fu_940_p2 | and_ln102_1898_fu_730_p2);

assign or_ln117_1544_fu_982_p2 = (or_ln117_1543_fu_968_p2 | and_ln102_1912_fu_814_p2);

assign or_ln117_1545_fu_996_p2 = (or_ln117_1541_fu_940_p2 | and_ln102_1893_fu_670_p2);

assign or_ln117_1546_fu_1010_p2 = (or_ln117_1545_fu_996_p2 | and_ln102_1913_fu_820_p2);

assign or_ln117_1547_fu_1024_p2 = (or_ln117_1545_fu_996_p2 | and_ln102_1899_fu_742_p2);

assign or_ln117_1548_fu_1161_p2 = (or_ln117_1547_reg_1599 | and_ln102_1915_fu_1105_p2);

assign or_ln117_1549_fu_1046_p2 = (icmp_ln86_fu_430_p2 | and_ln104_326_fu_760_p2);

assign or_ln117_1550_fu_1177_p2 = (or_ln117_1549_reg_1609 | and_ln102_1916_fu_1110_p2);

assign or_ln117_1551_fu_1189_p2 = (or_ln117_1549_reg_1609 | and_ln102_1900_fu_1071_p2);

assign or_ln117_1552_fu_1202_p2 = (or_ln117_1551_fu_1189_p2 | and_ln102_1918_fu_1120_p2);

assign or_ln117_1553_fu_1216_p2 = (or_ln117_1549_reg_1609 | and_ln102_1894_fu_1052_p2);

assign or_ln117_1554_fu_1229_p2 = (or_ln117_1553_fu_1216_p2 | and_ln102_1919_fu_1126_p2);

assign or_ln117_1555_fu_1243_p2 = (or_ln117_1553_fu_1216_p2 | and_ln102_1901_fu_1081_p2);

assign or_ln117_1556_fu_1257_p2 = (or_ln117_1555_fu_1243_p2 | and_ln102_1921_fu_1136_p2);

assign or_ln117_1557_fu_1271_p2 = (or_ln117_1549_reg_1609 | and_ln102_1891_reg_1574);

assign or_ln117_1558_fu_1283_p2 = (or_ln117_1557_fu_1271_p2 | and_ln102_1922_fu_1142_p2);

assign or_ln117_1559_fu_1297_p2 = (or_ln117_1557_fu_1271_p2 | and_ln102_1902_reg_1593);

assign or_ln117_1560_fu_1310_p2 = (or_ln117_1559_fu_1297_p2 | and_ln102_1923_fu_1146_p2);

assign or_ln117_1561_fu_1324_p2 = (or_ln117_1559_fu_1297_p2 | and_ln102_1903_fu_1091_p2);

assign or_ln117_1562_fu_1338_p2 = (or_ln117_1561_fu_1324_p2 | and_ln102_1925_fu_1156_p2);

assign or_ln117_1563_fu_1352_p2 = (or_ln117_1559_fu_1297_p2 | and_ln104_325_reg_1586);

assign or_ln117_fu_826_p2 = (and_ln104_326_fu_760_p2 | and_ln102_1904_fu_766_p2);

assign select_ln117_1646_fu_868_p3 = ((or_ln117_1535_fu_848_p2[0:0] == 1'b1) ? select_ln117_fu_854_p3 : 2'd3);

assign select_ln117_1647_fu_886_p3 = ((or_ln117_1536_fu_862_p2[0:0] == 1'b1) ? zext_ln117_183_fu_876_p1 : 3'd4);

assign select_ln117_1648_fu_900_p3 = ((or_ln117_1537_fu_880_p2[0:0] == 1'b1) ? select_ln117_1647_fu_886_p3 : 3'd5);

assign select_ln117_1649_fu_914_p3 = ((or_ln117_1538_fu_894_p2[0:0] == 1'b1) ? select_ln117_1648_fu_900_p3 : 3'd6);

assign select_ln117_1650_fu_928_p3 = ((or_ln117_1539_fu_908_p2[0:0] == 1'b1) ? select_ln117_1649_fu_914_p3 : 3'd7);

assign select_ln117_1651_fu_946_p3 = ((or_ln117_1540_fu_922_p2[0:0] == 1'b1) ? zext_ln117_184_fu_936_p1 : 4'd8);

assign select_ln117_1652_fu_960_p3 = ((or_ln117_1541_fu_940_p2[0:0] == 1'b1) ? select_ln117_1651_fu_946_p3 : 4'd9);

assign select_ln117_1653_fu_974_p3 = ((or_ln117_1542_fu_954_p2[0:0] == 1'b1) ? select_ln117_1652_fu_960_p3 : 4'd10);

assign select_ln117_1654_fu_988_p3 = ((or_ln117_1543_fu_968_p2[0:0] == 1'b1) ? select_ln117_1653_fu_974_p3 : 4'd11);

assign select_ln117_1655_fu_1002_p3 = ((or_ln117_1544_fu_982_p2[0:0] == 1'b1) ? select_ln117_1654_fu_988_p3 : 4'd12);

assign select_ln117_1656_fu_1016_p3 = ((or_ln117_1545_fu_996_p2[0:0] == 1'b1) ? select_ln117_1655_fu_1002_p3 : 4'd13);

assign select_ln117_1657_fu_1030_p3 = ((or_ln117_1546_fu_1010_p2[0:0] == 1'b1) ? select_ln117_1656_fu_1016_p3 : 4'd14);

assign select_ln117_1658_fu_1038_p3 = ((or_ln117_1547_fu_1024_p2[0:0] == 1'b1) ? select_ln117_1657_fu_1030_p3 : 4'd15);

assign select_ln117_1659_fu_1169_p3 = ((or_ln117_1548_fu_1161_p2[0:0] == 1'b1) ? zext_ln117_185_fu_1166_p1 : 5'd16);

assign select_ln117_1660_fu_1182_p3 = ((or_ln117_1549_reg_1609[0:0] == 1'b1) ? select_ln117_1659_fu_1169_p3 : 5'd17);

assign select_ln117_1661_fu_1194_p3 = ((or_ln117_1550_fu_1177_p2[0:0] == 1'b1) ? select_ln117_1660_fu_1182_p3 : 5'd18);

assign select_ln117_1662_fu_1208_p3 = ((or_ln117_1551_fu_1189_p2[0:0] == 1'b1) ? select_ln117_1661_fu_1194_p3 : 5'd19);

assign select_ln117_1663_fu_1221_p3 = ((or_ln117_1552_fu_1202_p2[0:0] == 1'b1) ? select_ln117_1662_fu_1208_p3 : 5'd20);

assign select_ln117_1664_fu_1235_p3 = ((or_ln117_1553_fu_1216_p2[0:0] == 1'b1) ? select_ln117_1663_fu_1221_p3 : 5'd21);

assign select_ln117_1665_fu_1249_p3 = ((or_ln117_1554_fu_1229_p2[0:0] == 1'b1) ? select_ln117_1664_fu_1235_p3 : 5'd22);

assign select_ln117_1666_fu_1263_p3 = ((or_ln117_1555_fu_1243_p2[0:0] == 1'b1) ? select_ln117_1665_fu_1249_p3 : 5'd23);

assign select_ln117_1667_fu_1275_p3 = ((or_ln117_1556_fu_1257_p2[0:0] == 1'b1) ? select_ln117_1666_fu_1263_p3 : 5'd24);

assign select_ln117_1668_fu_1289_p3 = ((or_ln117_1557_fu_1271_p2[0:0] == 1'b1) ? select_ln117_1667_fu_1275_p3 : 5'd25);

assign select_ln117_1669_fu_1302_p3 = ((or_ln117_1558_fu_1283_p2[0:0] == 1'b1) ? select_ln117_1668_fu_1289_p3 : 5'd26);

assign select_ln117_1670_fu_1316_p3 = ((or_ln117_1559_fu_1297_p2[0:0] == 1'b1) ? select_ln117_1669_fu_1302_p3 : 5'd27);

assign select_ln117_1671_fu_1330_p3 = ((or_ln117_1560_fu_1310_p2[0:0] == 1'b1) ? select_ln117_1670_fu_1316_p3 : 5'd28);

assign select_ln117_1672_fu_1344_p3 = ((or_ln117_1561_fu_1324_p2[0:0] == 1'b1) ? select_ln117_1671_fu_1330_p3 : 5'd29);

assign select_ln117_fu_854_p3 = ((or_ln117_fu_826_p2[0:0] == 1'b1) ? zext_ln117_fu_844_p1 : 2'd2);

assign tmp_fu_1365_p63 = 'bx;

assign tmp_fu_1365_p64 = ((or_ln117_1562_fu_1338_p2[0:0] == 1'b1) ? select_ln117_1672_fu_1344_p3 : 5'd30);

assign xor_ln104_812_fu_622_p2 = (icmp_ln86_1698_fu_436_p2 ^ 1'd1);

assign xor_ln104_813_fu_640_p2 = (icmp_ln86_1699_fu_442_p2 ^ 1'd1);

assign xor_ln104_814_fu_658_p2 = (icmp_ln86_1700_fu_448_p2 ^ 1'd1);

assign xor_ln104_815_fu_676_p2 = (icmp_ln86_1701_fu_454_p2 ^ 1'd1);

assign xor_ln104_816_fu_1056_p2 = (icmp_ln86_1702_reg_1505 ^ 1'd1);

assign xor_ln104_817_fu_694_p2 = (icmp_ln86_1703_fu_466_p2 ^ 1'd1);

assign xor_ln104_818_fu_712_p2 = (icmp_ln86_1704_fu_472_p2 ^ 1'd1);

assign xor_ln104_819_fu_724_p2 = (icmp_ln86_1705_fu_478_p2 ^ 1'd1);

assign xor_ln104_820_fu_736_p2 = (icmp_ln86_1706_fu_484_p2 ^ 1'd1);

assign xor_ln104_821_fu_1066_p2 = (icmp_ln86_1707_reg_1511 ^ 1'd1);

assign xor_ln104_822_fu_1076_p2 = (icmp_ln86_1708_reg_1516 ^ 1'd1);

assign xor_ln104_823_fu_1086_p2 = (icmp_ln86_1709_reg_1522 ^ 1'd1);

assign xor_ln104_824_fu_754_p2 = (icmp_ln86_1710_fu_508_p2 ^ 1'd1);

assign xor_ln104_825_fu_1095_p2 = (icmp_ln86_1711_reg_1528 ^ 1'd1);

assign xor_ln104_fu_610_p2 = (icmp_ln86_fu_430_p2 ^ 1'd1);

assign xor_ln117_fu_832_p2 = (1'd1 ^ and_ln102_1895_fu_688_p2);

assign zext_ln117_183_fu_876_p1 = select_ln117_1646_fu_868_p3;

assign zext_ln117_184_fu_936_p1 = select_ln117_1650_fu_928_p3;

assign zext_ln117_185_fu_1166_p1 = select_ln117_1658_reg_1604;

assign zext_ln117_fu_844_p1 = or_ln117_1534_fu_838_p2;

endmodule //my_prj_decision_function_112
