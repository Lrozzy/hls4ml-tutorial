// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_25 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_5_val,
        x_11_val,
        x_13_val,
        x_16_val,
        x_17_val,
        x_19_val,
        x_21_val,
        x_25_val,
        x_26_val,
        x_28_val,
        x_32_val,
        x_33_val,
        x_35_val,
        x_39_val,
        x_45_val,
        x_46_val,
        x_48_val,
        x_49_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_5_val;
input  [17:0] x_11_val;
input  [17:0] x_13_val;
input  [17:0] x_16_val;
input  [17:0] x_17_val;
input  [17:0] x_19_val;
input  [17:0] x_21_val;
input  [17:0] x_25_val;
input  [17:0] x_26_val;
input  [17:0] x_28_val;
input  [17:0] x_32_val;
input  [17:0] x_33_val;
input  [17:0] x_35_val;
input  [17:0] x_39_val;
input  [17:0] x_45_val;
input  [17:0] x_46_val;
input  [17:0] x_48_val;
input  [17:0] x_49_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_360_p2;
reg   [0:0] icmp_ln86_reg_1342;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_661_fu_372_p2;
reg   [0:0] icmp_ln86_661_reg_1351;
wire   [0:0] icmp_ln86_664_fu_390_p2;
reg   [0:0] icmp_ln86_664_reg_1357;
wire   [0:0] icmp_ln86_665_fu_396_p2;
reg   [0:0] icmp_ln86_665_reg_1363;
wire   [0:0] icmp_ln86_669_fu_420_p2;
reg   [0:0] icmp_ln86_669_reg_1369;
wire   [0:0] icmp_ln86_670_fu_426_p2;
reg   [0:0] icmp_ln86_670_reg_1375;
wire   [0:0] icmp_ln86_671_fu_432_p2;
reg   [0:0] icmp_ln86_671_reg_1381;
wire   [0:0] icmp_ln86_672_fu_438_p2;
reg   [0:0] icmp_ln86_672_reg_1387;
wire   [0:0] icmp_ln86_679_fu_480_p2;
reg   [0:0] icmp_ln86_679_reg_1393;
wire   [0:0] icmp_ln86_680_fu_486_p2;
reg   [0:0] icmp_ln86_680_reg_1398;
wire   [0:0] icmp_ln86_681_fu_492_p2;
reg   [0:0] icmp_ln86_681_reg_1403;
wire   [0:0] icmp_ln86_682_fu_498_p2;
reg   [0:0] icmp_ln86_682_reg_1408;
wire   [0:0] icmp_ln86_683_fu_504_p2;
reg   [0:0] icmp_ln86_683_reg_1413;
wire   [0:0] icmp_ln86_684_fu_510_p2;
reg   [0:0] icmp_ln86_684_reg_1418;
wire   [0:0] icmp_ln86_685_fu_516_p2;
reg   [0:0] icmp_ln86_685_reg_1423;
wire   [0:0] icmp_ln86_686_fu_522_p2;
reg   [0:0] icmp_ln86_686_reg_1428;
wire   [3:0] select_ln117_651_fu_844_p3;
reg   [3:0] select_ln117_651_reg_1433;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln86_660_fu_366_p2;
wire   [0:0] xor_ln104_317_fu_534_p2;
wire   [0:0] icmp_ln86_662_fu_378_p2;
wire   [0:0] and_ln102_fu_528_p2;
wire   [0:0] xor_ln104_319_fu_552_p2;
wire   [0:0] icmp_ln86_663_fu_384_p2;
wire   [0:0] and_ln104_fu_540_p2;
wire   [0:0] xor_ln104_320_fu_570_p2;
wire   [0:0] icmp_ln86_666_fu_402_p2;
wire   [0:0] and_ln102_635_fu_546_p2;
wire   [0:0] icmp_ln86_667_fu_408_p2;
wire   [0:0] and_ln104_130_fu_558_p2;
wire   [0:0] icmp_ln86_668_fu_414_p2;
wire   [0:0] and_ln104_131_fu_576_p2;
wire   [0:0] icmp_ln86_673_fu_444_p2;
wire   [0:0] and_ln102_639_fu_582_p2;
wire   [0:0] icmp_ln86_674_fu_450_p2;
wire   [0:0] xor_ln104_323_fu_588_p2;
wire   [0:0] and_ln102_660_fu_624_p2;
wire   [0:0] icmp_ln86_675_fu_456_p2;
wire   [0:0] and_ln102_640_fu_594_p2;
wire   [0:0] icmp_ln86_676_fu_462_p2;
wire   [0:0] xor_ln104_324_fu_600_p2;
wire   [0:0] and_ln102_661_fu_642_p2;
wire   [0:0] icmp_ln86_677_fu_468_p2;
wire   [0:0] and_ln102_641_fu_606_p2;
wire   [0:0] icmp_ln86_678_fu_474_p2;
wire   [0:0] xor_ln104_325_fu_612_p2;
wire   [0:0] and_ln102_662_fu_660_p2;
wire   [0:0] and_ln102_636_fu_564_p2;
wire   [0:0] and_ln102_646_fu_618_p2;
wire   [0:0] xor_ln117_fu_678_p2;
wire   [0:0] or_ln117_fu_672_p2;
wire   [1:0] zext_ln117_fu_684_p1;
wire   [0:0] or_ln117_604_fu_688_p2;
wire   [0:0] and_ln102_647_fu_630_p2;
wire   [1:0] select_ln117_fu_694_p3;
wire   [1:0] select_ln117_641_fu_708_p3;
wire   [0:0] or_ln117_605_fu_702_p2;
wire   [2:0] zext_ln117_72_fu_716_p1;
wire   [0:0] or_ln117_606_fu_720_p2;
wire   [0:0] and_ln102_648_fu_636_p2;
wire   [2:0] select_ln117_642_fu_726_p3;
wire   [0:0] or_ln117_607_fu_734_p2;
wire   [2:0] select_ln117_643_fu_740_p3;
wire   [0:0] or_ln117_608_fu_748_p2;
wire   [0:0] and_ln102_649_fu_648_p2;
wire   [2:0] select_ln117_644_fu_754_p3;
wire   [2:0] select_ln117_645_fu_768_p3;
wire   [0:0] or_ln117_609_fu_762_p2;
wire   [3:0] zext_ln117_73_fu_776_p1;
wire   [0:0] or_ln117_610_fu_780_p2;
wire   [0:0] and_ln102_650_fu_654_p2;
wire   [3:0] select_ln117_646_fu_786_p3;
wire   [0:0] or_ln117_611_fu_794_p2;
wire   [3:0] select_ln117_647_fu_800_p3;
wire   [0:0] or_ln117_612_fu_808_p2;
wire   [0:0] and_ln102_651_fu_666_p2;
wire   [3:0] select_ln117_648_fu_814_p3;
wire   [0:0] or_ln117_613_fu_822_p2;
wire   [3:0] select_ln117_649_fu_828_p3;
wire   [3:0] select_ln117_650_fu_836_p3;
wire   [0:0] xor_ln104_fu_852_p2;
wire   [0:0] xor_ln104_318_fu_862_p2;
wire   [0:0] and_ln102_634_fu_857_p2;
wire   [0:0] xor_ln104_321_fu_878_p2;
wire   [0:0] and_ln104_129_fu_867_p2;
wire   [0:0] xor_ln104_322_fu_894_p2;
wire   [0:0] and_ln102_637_fu_873_p2;
wire   [0:0] and_ln104_132_fu_883_p2;
wire   [0:0] and_ln102_638_fu_889_p2;
wire   [0:0] and_ln104_133_fu_899_p2;
wire   [0:0] and_ln102_642_fu_905_p2;
wire   [0:0] xor_ln104_326_fu_910_p2;
wire   [0:0] and_ln102_663_fu_950_p2;
wire   [0:0] and_ln102_643_fu_915_p2;
wire   [0:0] xor_ln104_327_fu_920_p2;
wire   [0:0] and_ln102_664_fu_966_p2;
wire   [0:0] and_ln102_644_fu_925_p2;
wire   [0:0] xor_ln104_328_fu_930_p2;
wire   [0:0] and_ln102_665_fu_982_p2;
wire   [0:0] and_ln102_645_fu_935_p2;
wire   [0:0] xor_ln104_329_fu_940_p2;
wire   [0:0] and_ln102_666_fu_998_p2;
wire   [0:0] and_ln102_652_fu_945_p2;
wire   [0:0] or_ln117_614_fu_1009_p2;
wire   [0:0] or_ln117_615_fu_1014_p2;
wire   [0:0] and_ln102_653_fu_955_p2;
wire   [3:0] select_ln117_652_fu_1019_p3;
wire   [3:0] select_ln117_653_fu_1032_p3;
wire   [0:0] or_ln117_616_fu_1026_p2;
wire   [4:0] zext_ln117_74_fu_1040_p1;
wire   [0:0] or_ln117_617_fu_1044_p2;
wire   [0:0] and_ln102_654_fu_961_p2;
wire   [4:0] select_ln117_654_fu_1049_p3;
wire   [0:0] or_ln117_618_fu_1057_p2;
wire   [4:0] select_ln117_655_fu_1063_p3;
wire   [0:0] or_ln117_619_fu_1071_p2;
wire   [0:0] and_ln102_655_fu_971_p2;
wire   [4:0] select_ln117_656_fu_1077_p3;
wire   [0:0] or_ln117_620_fu_1085_p2;
wire   [4:0] select_ln117_657_fu_1091_p3;
wire   [0:0] or_ln117_621_fu_1099_p2;
wire   [0:0] and_ln102_656_fu_977_p2;
wire   [4:0] select_ln117_658_fu_1104_p3;
wire   [0:0] or_ln117_622_fu_1112_p2;
wire   [4:0] select_ln117_659_fu_1118_p3;
wire   [0:0] or_ln117_623_fu_1126_p2;
wire   [0:0] and_ln102_657_fu_987_p2;
wire   [4:0] select_ln117_660_fu_1132_p3;
wire   [0:0] or_ln117_624_fu_1140_p2;
wire   [4:0] select_ln117_661_fu_1146_p3;
wire   [0:0] or_ln117_625_fu_1154_p2;
wire   [0:0] and_ln102_658_fu_993_p2;
wire   [4:0] select_ln117_662_fu_1160_p3;
wire   [0:0] or_ln117_626_fu_1168_p2;
wire   [4:0] select_ln117_663_fu_1174_p3;
wire   [0:0] or_ln117_627_fu_1182_p2;
wire   [0:0] and_ln102_659_fu_1003_p2;
wire   [4:0] select_ln117_664_fu_1188_p3;
wire   [0:0] or_ln117_628_fu_1196_p2;
wire   [4:0] select_ln117_665_fu_1202_p3;
wire   [11:0] agg_result_fu_1218_p59;
wire   [4:0] agg_result_fu_1218_p60;
wire   [11:0] agg_result_fu_1218_p61;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1218_p1;
wire   [4:0] agg_result_fu_1218_p3;
wire   [4:0] agg_result_fu_1218_p5;
wire   [4:0] agg_result_fu_1218_p7;
wire   [4:0] agg_result_fu_1218_p9;
wire   [4:0] agg_result_fu_1218_p11;
wire   [4:0] agg_result_fu_1218_p13;
wire   [4:0] agg_result_fu_1218_p15;
wire   [4:0] agg_result_fu_1218_p17;
wire   [4:0] agg_result_fu_1218_p19;
wire   [4:0] agg_result_fu_1218_p21;
wire   [4:0] agg_result_fu_1218_p23;
wire   [4:0] agg_result_fu_1218_p25;
wire   [4:0] agg_result_fu_1218_p27;
wire   [4:0] agg_result_fu_1218_p29;
wire   [4:0] agg_result_fu_1218_p31;
wire  signed [4:0] agg_result_fu_1218_p33;
wire  signed [4:0] agg_result_fu_1218_p35;
wire  signed [4:0] agg_result_fu_1218_p37;
wire  signed [4:0] agg_result_fu_1218_p39;
wire  signed [4:0] agg_result_fu_1218_p41;
wire  signed [4:0] agg_result_fu_1218_p43;
wire  signed [4:0] agg_result_fu_1218_p45;
wire  signed [4:0] agg_result_fu_1218_p47;
wire  signed [4:0] agg_result_fu_1218_p49;
wire  signed [4:0] agg_result_fu_1218_p51;
wire  signed [4:0] agg_result_fu_1218_p53;
wire  signed [4:0] agg_result_fu_1218_p55;
wire  signed [4:0] agg_result_fu_1218_p57;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_59_5_12_1_1_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 12 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_59_5_12_1_1_x_U1611(
    .din0(12'd3513),
    .din1(12'd26),
    .din2(12'd3985),
    .din3(12'd4046),
    .din4(12'd145),
    .din5(12'd4025),
    .din6(12'd148),
    .din7(12'd1244),
    .din8(12'd37),
    .din9(12'd4019),
    .din10(12'd1296),
    .din11(12'd4078),
    .din12(12'd734),
    .din13(12'd508),
    .din14(12'd4016),
    .din15(12'd91),
    .din16(12'd533),
    .din17(12'd208),
    .din18(12'd3369),
    .din19(12'd46),
    .din20(12'd4010),
    .din21(12'd461),
    .din22(12'd3835),
    .din23(12'd1078),
    .din24(12'd245),
    .din25(12'd3930),
    .din26(12'd67),
    .din27(12'd202),
    .din28(12'd4088),
    .def(agg_result_fu_1218_p59),
    .sel(agg_result_fu_1218_p60),
    .dout(agg_result_fu_1218_p61)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_661_reg_1351 <= icmp_ln86_661_fu_372_p2;
        icmp_ln86_664_reg_1357 <= icmp_ln86_664_fu_390_p2;
        icmp_ln86_665_reg_1363 <= icmp_ln86_665_fu_396_p2;
        icmp_ln86_669_reg_1369 <= icmp_ln86_669_fu_420_p2;
        icmp_ln86_670_reg_1375 <= icmp_ln86_670_fu_426_p2;
        icmp_ln86_671_reg_1381 <= icmp_ln86_671_fu_432_p2;
        icmp_ln86_672_reg_1387 <= icmp_ln86_672_fu_438_p2;
        icmp_ln86_679_reg_1393 <= icmp_ln86_679_fu_480_p2;
        icmp_ln86_680_reg_1398 <= icmp_ln86_680_fu_486_p2;
        icmp_ln86_681_reg_1403 <= icmp_ln86_681_fu_492_p2;
        icmp_ln86_682_reg_1408 <= icmp_ln86_682_fu_498_p2;
        icmp_ln86_683_reg_1413 <= icmp_ln86_683_fu_504_p2;
        icmp_ln86_684_reg_1418 <= icmp_ln86_684_fu_510_p2;
        icmp_ln86_685_reg_1423 <= icmp_ln86_685_fu_516_p2;
        icmp_ln86_686_reg_1428 <= icmp_ln86_686_fu_522_p2;
        icmp_ln86_reg_1342 <= icmp_ln86_fu_360_p2;
        select_ln117_651_reg_1433 <= select_ln117_651_fu_844_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1218_p59 = 'bx;

assign agg_result_fu_1218_p60 = ((or_ln117_628_fu_1196_p2[0:0] == 1'b1) ? select_ln117_665_fu_1202_p3 : 5'd28);

assign and_ln102_634_fu_857_p2 = (xor_ln104_fu_852_p2 & icmp_ln86_661_reg_1351);

assign and_ln102_635_fu_546_p2 = (icmp_ln86_662_fu_378_p2 & and_ln102_fu_528_p2);

assign and_ln102_636_fu_564_p2 = (icmp_ln86_663_fu_384_p2 & and_ln104_fu_540_p2);

assign and_ln102_637_fu_873_p2 = (icmp_ln86_664_reg_1357 & and_ln102_634_fu_857_p2);

assign and_ln102_638_fu_889_p2 = (icmp_ln86_665_reg_1363 & and_ln104_129_fu_867_p2);

assign and_ln102_639_fu_582_p2 = (icmp_ln86_666_fu_402_p2 & and_ln102_635_fu_546_p2);

assign and_ln102_640_fu_594_p2 = (icmp_ln86_667_fu_408_p2 & and_ln104_130_fu_558_p2);

assign and_ln102_641_fu_606_p2 = (icmp_ln86_668_fu_414_p2 & and_ln104_131_fu_576_p2);

assign and_ln102_642_fu_905_p2 = (icmp_ln86_669_reg_1369 & and_ln102_637_fu_873_p2);

assign and_ln102_643_fu_915_p2 = (icmp_ln86_670_reg_1375 & and_ln104_132_fu_883_p2);

assign and_ln102_644_fu_925_p2 = (icmp_ln86_671_reg_1381 & and_ln102_638_fu_889_p2);

assign and_ln102_645_fu_935_p2 = (icmp_ln86_672_reg_1387 & and_ln104_133_fu_899_p2);

assign and_ln102_646_fu_618_p2 = (icmp_ln86_673_fu_444_p2 & and_ln102_639_fu_582_p2);

assign and_ln102_647_fu_630_p2 = (and_ln102_660_fu_624_p2 & and_ln102_635_fu_546_p2);

assign and_ln102_648_fu_636_p2 = (icmp_ln86_675_fu_456_p2 & and_ln102_640_fu_594_p2);

assign and_ln102_649_fu_648_p2 = (and_ln104_130_fu_558_p2 & and_ln102_661_fu_642_p2);

assign and_ln102_650_fu_654_p2 = (icmp_ln86_677_fu_468_p2 & and_ln102_641_fu_606_p2);

assign and_ln102_651_fu_666_p2 = (and_ln104_131_fu_576_p2 & and_ln102_662_fu_660_p2);

assign and_ln102_652_fu_945_p2 = (icmp_ln86_679_reg_1393 & and_ln102_642_fu_905_p2);

assign and_ln102_653_fu_955_p2 = (and_ln102_663_fu_950_p2 & and_ln102_637_fu_873_p2);

assign and_ln102_654_fu_961_p2 = (icmp_ln86_681_reg_1403 & and_ln102_643_fu_915_p2);

assign and_ln102_655_fu_971_p2 = (and_ln104_132_fu_883_p2 & and_ln102_664_fu_966_p2);

assign and_ln102_656_fu_977_p2 = (icmp_ln86_683_reg_1413 & and_ln102_644_fu_925_p2);

assign and_ln102_657_fu_987_p2 = (and_ln102_665_fu_982_p2 & and_ln102_638_fu_889_p2);

assign and_ln102_658_fu_993_p2 = (icmp_ln86_685_reg_1423 & and_ln102_645_fu_935_p2);

assign and_ln102_659_fu_1003_p2 = (and_ln104_133_fu_899_p2 & and_ln102_666_fu_998_p2);

assign and_ln102_660_fu_624_p2 = (xor_ln104_323_fu_588_p2 & icmp_ln86_674_fu_450_p2);

assign and_ln102_661_fu_642_p2 = (xor_ln104_324_fu_600_p2 & icmp_ln86_676_fu_462_p2);

assign and_ln102_662_fu_660_p2 = (xor_ln104_325_fu_612_p2 & icmp_ln86_678_fu_474_p2);

assign and_ln102_663_fu_950_p2 = (xor_ln104_326_fu_910_p2 & icmp_ln86_680_reg_1398);

assign and_ln102_664_fu_966_p2 = (xor_ln104_327_fu_920_p2 & icmp_ln86_682_reg_1408);

assign and_ln102_665_fu_982_p2 = (xor_ln104_328_fu_930_p2 & icmp_ln86_684_reg_1418);

assign and_ln102_666_fu_998_p2 = (xor_ln104_329_fu_940_p2 & icmp_ln86_686_reg_1428);

assign and_ln102_fu_528_p2 = (icmp_ln86_fu_360_p2 & icmp_ln86_660_fu_366_p2);

assign and_ln104_129_fu_867_p2 = (xor_ln104_fu_852_p2 & xor_ln104_318_fu_862_p2);

assign and_ln104_130_fu_558_p2 = (xor_ln104_319_fu_552_p2 & and_ln102_fu_528_p2);

assign and_ln104_131_fu_576_p2 = (xor_ln104_320_fu_570_p2 & and_ln104_fu_540_p2);

assign and_ln104_132_fu_883_p2 = (xor_ln104_321_fu_878_p2 & and_ln102_634_fu_857_p2);

assign and_ln104_133_fu_899_p2 = (xor_ln104_322_fu_894_p2 & and_ln104_129_fu_867_p2);

assign and_ln104_fu_540_p2 = (xor_ln104_317_fu_534_p2 & icmp_ln86_fu_360_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1218_p61;

assign icmp_ln86_660_fu_366_p2 = (($signed(x_16_val) < $signed(18'd113)) ? 1'b1 : 1'b0);

assign icmp_ln86_661_fu_372_p2 = (($signed(x_25_val) < $signed(18'd211)) ? 1'b1 : 1'b0);

assign icmp_ln86_662_fu_378_p2 = (($signed(x_33_val) < $signed(18'd785)) ? 1'b1 : 1'b0);

assign icmp_ln86_663_fu_384_p2 = (($signed(x_25_val) < $signed(18'd96)) ? 1'b1 : 1'b0);

assign icmp_ln86_664_fu_390_p2 = (($signed(x_19_val) < $signed(18'd1175)) ? 1'b1 : 1'b0);

assign icmp_ln86_665_fu_396_p2 = (($signed(x_25_val) < $signed(18'd212)) ? 1'b1 : 1'b0);

assign icmp_ln86_666_fu_402_p2 = (($signed(x_32_val) < $signed(18'd845)) ? 1'b1 : 1'b0);

assign icmp_ln86_667_fu_408_p2 = (($signed(x_32_val) < $signed(18'd888)) ? 1'b1 : 1'b0);

assign icmp_ln86_668_fu_414_p2 = (($signed(x_17_val) < $signed(18'd19)) ? 1'b1 : 1'b0);

assign icmp_ln86_669_fu_420_p2 = (($signed(x_46_val) < $signed(18'd135)) ? 1'b1 : 1'b0);

assign icmp_ln86_670_fu_426_p2 = (($signed(x_13_val) < $signed(18'd258)) ? 1'b1 : 1'b0);

assign icmp_ln86_671_fu_432_p2 = (($signed(x_28_val) < $signed(18'd7800)) ? 1'b1 : 1'b0);

assign icmp_ln86_672_fu_438_p2 = (($signed(x_49_val) < $signed(18'd6444)) ? 1'b1 : 1'b0);

assign icmp_ln86_673_fu_444_p2 = (($signed(x_26_val) < $signed(18'd137272)) ? 1'b1 : 1'b0);

assign icmp_ln86_674_fu_450_p2 = (($signed(x_11_val) < $signed(18'd651)) ? 1'b1 : 1'b0);

assign icmp_ln86_675_fu_456_p2 = (($signed(x_39_val) < $signed(18'd2303)) ? 1'b1 : 1'b0);

assign icmp_ln86_676_fu_462_p2 = (($signed(x_11_val) < $signed(18'd250)) ? 1'b1 : 1'b0);

assign icmp_ln86_677_fu_468_p2 = (($signed(x_45_val) < $signed(18'd320)) ? 1'b1 : 1'b0);

assign icmp_ln86_678_fu_474_p2 = (($signed(x_21_val) < $signed(18'd181)) ? 1'b1 : 1'b0);

assign icmp_ln86_679_fu_480_p2 = (($signed(x_48_val) < $signed(18'd139265)) ? 1'b1 : 1'b0);

assign icmp_ln86_680_fu_486_p2 = (($signed(x_32_val) < $signed(18'd775)) ? 1'b1 : 1'b0);

assign icmp_ln86_681_fu_492_p2 = (($signed(x_17_val) < $signed(18'd23)) ? 1'b1 : 1'b0);

assign icmp_ln86_682_fu_498_p2 = (($signed(x_5_val) < $signed(18'd10173)) ? 1'b1 : 1'b0);

assign icmp_ln86_683_fu_504_p2 = (($signed(x_35_val) < $signed(18'd3)) ? 1'b1 : 1'b0);

assign icmp_ln86_684_fu_510_p2 = (($signed(x_49_val) < $signed(18'd63859)) ? 1'b1 : 1'b0);

assign icmp_ln86_685_fu_516_p2 = (($signed(x_17_val) < $signed(18'd24)) ? 1'b1 : 1'b0);

assign icmp_ln86_686_fu_522_p2 = (($signed(x_13_val) < $signed(18'd259)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_360_p2 = (($signed(x_17_val) < $signed(18'd21)) ? 1'b1 : 1'b0);

assign or_ln117_604_fu_688_p2 = (and_ln102_639_fu_582_p2 | and_ln102_636_fu_564_p2);

assign or_ln117_605_fu_702_p2 = (or_ln117_604_fu_688_p2 | and_ln102_647_fu_630_p2);

assign or_ln117_606_fu_720_p2 = (and_ln102_636_fu_564_p2 | and_ln102_635_fu_546_p2);

assign or_ln117_607_fu_734_p2 = (or_ln117_606_fu_720_p2 | and_ln102_648_fu_636_p2);

assign or_ln117_608_fu_748_p2 = (or_ln117_606_fu_720_p2 | and_ln102_640_fu_594_p2);

assign or_ln117_609_fu_762_p2 = (or_ln117_608_fu_748_p2 | and_ln102_649_fu_648_p2);

assign or_ln117_610_fu_780_p2 = (and_ln102_fu_528_p2 | and_ln102_636_fu_564_p2);

assign or_ln117_611_fu_794_p2 = (or_ln117_610_fu_780_p2 | and_ln102_650_fu_654_p2);

assign or_ln117_612_fu_808_p2 = (or_ln117_610_fu_780_p2 | and_ln102_641_fu_606_p2);

assign or_ln117_613_fu_822_p2 = (or_ln117_612_fu_808_p2 | and_ln102_651_fu_666_p2);

assign or_ln117_614_fu_1009_p2 = (icmp_ln86_reg_1342 | and_ln102_652_fu_945_p2);

assign or_ln117_615_fu_1014_p2 = (icmp_ln86_reg_1342 | and_ln102_642_fu_905_p2);

assign or_ln117_616_fu_1026_p2 = (or_ln117_615_fu_1014_p2 | and_ln102_653_fu_955_p2);

assign or_ln117_617_fu_1044_p2 = (icmp_ln86_reg_1342 | and_ln102_637_fu_873_p2);

assign or_ln117_618_fu_1057_p2 = (or_ln117_617_fu_1044_p2 | and_ln102_654_fu_961_p2);

assign or_ln117_619_fu_1071_p2 = (or_ln117_617_fu_1044_p2 | and_ln102_643_fu_915_p2);

assign or_ln117_620_fu_1085_p2 = (or_ln117_619_fu_1071_p2 | and_ln102_655_fu_971_p2);

assign or_ln117_621_fu_1099_p2 = (icmp_ln86_reg_1342 | and_ln102_634_fu_857_p2);

assign or_ln117_622_fu_1112_p2 = (or_ln117_621_fu_1099_p2 | and_ln102_656_fu_977_p2);

assign or_ln117_623_fu_1126_p2 = (or_ln117_621_fu_1099_p2 | and_ln102_644_fu_925_p2);

assign or_ln117_624_fu_1140_p2 = (or_ln117_623_fu_1126_p2 | and_ln102_657_fu_987_p2);

assign or_ln117_625_fu_1154_p2 = (or_ln117_621_fu_1099_p2 | and_ln102_638_fu_889_p2);

assign or_ln117_626_fu_1168_p2 = (or_ln117_625_fu_1154_p2 | and_ln102_658_fu_993_p2);

assign or_ln117_627_fu_1182_p2 = (or_ln117_625_fu_1154_p2 | and_ln102_645_fu_935_p2);

assign or_ln117_628_fu_1196_p2 = (or_ln117_627_fu_1182_p2 | and_ln102_659_fu_1003_p2);

assign or_ln117_fu_672_p2 = (and_ln102_646_fu_618_p2 | and_ln102_636_fu_564_p2);

assign select_ln117_641_fu_708_p3 = ((or_ln117_604_fu_688_p2[0:0] == 1'b1) ? select_ln117_fu_694_p3 : 2'd3);

assign select_ln117_642_fu_726_p3 = ((or_ln117_605_fu_702_p2[0:0] == 1'b1) ? zext_ln117_72_fu_716_p1 : 3'd4);

assign select_ln117_643_fu_740_p3 = ((or_ln117_606_fu_720_p2[0:0] == 1'b1) ? select_ln117_642_fu_726_p3 : 3'd5);

assign select_ln117_644_fu_754_p3 = ((or_ln117_607_fu_734_p2[0:0] == 1'b1) ? select_ln117_643_fu_740_p3 : 3'd6);

assign select_ln117_645_fu_768_p3 = ((or_ln117_608_fu_748_p2[0:0] == 1'b1) ? select_ln117_644_fu_754_p3 : 3'd7);

assign select_ln117_646_fu_786_p3 = ((or_ln117_609_fu_762_p2[0:0] == 1'b1) ? zext_ln117_73_fu_776_p1 : 4'd8);

assign select_ln117_647_fu_800_p3 = ((or_ln117_610_fu_780_p2[0:0] == 1'b1) ? select_ln117_646_fu_786_p3 : 4'd9);

assign select_ln117_648_fu_814_p3 = ((or_ln117_611_fu_794_p2[0:0] == 1'b1) ? select_ln117_647_fu_800_p3 : 4'd10);

assign select_ln117_649_fu_828_p3 = ((or_ln117_612_fu_808_p2[0:0] == 1'b1) ? select_ln117_648_fu_814_p3 : 4'd11);

assign select_ln117_650_fu_836_p3 = ((or_ln117_613_fu_822_p2[0:0] == 1'b1) ? select_ln117_649_fu_828_p3 : 4'd12);

assign select_ln117_651_fu_844_p3 = ((icmp_ln86_fu_360_p2[0:0] == 1'b1) ? select_ln117_650_fu_836_p3 : 4'd13);

assign select_ln117_652_fu_1019_p3 = ((or_ln117_614_fu_1009_p2[0:0] == 1'b1) ? select_ln117_651_reg_1433 : 4'd14);

assign select_ln117_653_fu_1032_p3 = ((or_ln117_615_fu_1014_p2[0:0] == 1'b1) ? select_ln117_652_fu_1019_p3 : 4'd15);

assign select_ln117_654_fu_1049_p3 = ((or_ln117_616_fu_1026_p2[0:0] == 1'b1) ? zext_ln117_74_fu_1040_p1 : 5'd16);

assign select_ln117_655_fu_1063_p3 = ((or_ln117_617_fu_1044_p2[0:0] == 1'b1) ? select_ln117_654_fu_1049_p3 : 5'd17);

assign select_ln117_656_fu_1077_p3 = ((or_ln117_618_fu_1057_p2[0:0] == 1'b1) ? select_ln117_655_fu_1063_p3 : 5'd18);

assign select_ln117_657_fu_1091_p3 = ((or_ln117_619_fu_1071_p2[0:0] == 1'b1) ? select_ln117_656_fu_1077_p3 : 5'd19);

assign select_ln117_658_fu_1104_p3 = ((or_ln117_620_fu_1085_p2[0:0] == 1'b1) ? select_ln117_657_fu_1091_p3 : 5'd20);

assign select_ln117_659_fu_1118_p3 = ((or_ln117_621_fu_1099_p2[0:0] == 1'b1) ? select_ln117_658_fu_1104_p3 : 5'd21);

assign select_ln117_660_fu_1132_p3 = ((or_ln117_622_fu_1112_p2[0:0] == 1'b1) ? select_ln117_659_fu_1118_p3 : 5'd22);

assign select_ln117_661_fu_1146_p3 = ((or_ln117_623_fu_1126_p2[0:0] == 1'b1) ? select_ln117_660_fu_1132_p3 : 5'd23);

assign select_ln117_662_fu_1160_p3 = ((or_ln117_624_fu_1140_p2[0:0] == 1'b1) ? select_ln117_661_fu_1146_p3 : 5'd24);

assign select_ln117_663_fu_1174_p3 = ((or_ln117_625_fu_1154_p2[0:0] == 1'b1) ? select_ln117_662_fu_1160_p3 : 5'd25);

assign select_ln117_664_fu_1188_p3 = ((or_ln117_626_fu_1168_p2[0:0] == 1'b1) ? select_ln117_663_fu_1174_p3 : 5'd26);

assign select_ln117_665_fu_1202_p3 = ((or_ln117_627_fu_1182_p2[0:0] == 1'b1) ? select_ln117_664_fu_1188_p3 : 5'd27);

assign select_ln117_fu_694_p3 = ((or_ln117_fu_672_p2[0:0] == 1'b1) ? zext_ln117_fu_684_p1 : 2'd2);

assign xor_ln104_317_fu_534_p2 = (icmp_ln86_660_fu_366_p2 ^ 1'd1);

assign xor_ln104_318_fu_862_p2 = (icmp_ln86_661_reg_1351 ^ 1'd1);

assign xor_ln104_319_fu_552_p2 = (icmp_ln86_662_fu_378_p2 ^ 1'd1);

assign xor_ln104_320_fu_570_p2 = (icmp_ln86_663_fu_384_p2 ^ 1'd1);

assign xor_ln104_321_fu_878_p2 = (icmp_ln86_664_reg_1357 ^ 1'd1);

assign xor_ln104_322_fu_894_p2 = (icmp_ln86_665_reg_1363 ^ 1'd1);

assign xor_ln104_323_fu_588_p2 = (icmp_ln86_666_fu_402_p2 ^ 1'd1);

assign xor_ln104_324_fu_600_p2 = (icmp_ln86_667_fu_408_p2 ^ 1'd1);

assign xor_ln104_325_fu_612_p2 = (icmp_ln86_668_fu_414_p2 ^ 1'd1);

assign xor_ln104_326_fu_910_p2 = (icmp_ln86_669_reg_1369 ^ 1'd1);

assign xor_ln104_327_fu_920_p2 = (icmp_ln86_670_reg_1375 ^ 1'd1);

assign xor_ln104_328_fu_930_p2 = (icmp_ln86_671_reg_1381 ^ 1'd1);

assign xor_ln104_329_fu_940_p2 = (icmp_ln86_672_reg_1387 ^ 1'd1);

assign xor_ln104_fu_852_p2 = (icmp_ln86_reg_1342 ^ 1'd1);

assign xor_ln117_fu_678_p2 = (1'd1 ^ and_ln102_636_fu_564_p2);

assign zext_ln117_72_fu_716_p1 = select_ln117_641_fu_708_p3;

assign zext_ln117_73_fu_776_p1 = select_ln117_645_fu_768_p3;

assign zext_ln117_74_fu_1040_p1 = select_ln117_653_fu_1032_p3;

assign zext_ln117_fu_684_p1 = xor_ln117_fu_678_p2;

endmodule //my_prj_decision_function_25
