// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_9 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_2_val,
        x_3_val,
        x_7_val,
        x_10_val,
        x_13_val,
        x_14_val,
        x_21_val,
        x_24_val,
        x_25_val,
        x_34_val,
        x_37_val,
        x_39_val,
        x_40_val,
        x_43_val,
        x_45_val,
        x_46_val,
        x_48_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_2_val;
input  [17:0] x_3_val;
input  [17:0] x_7_val;
input  [17:0] x_10_val;
input  [17:0] x_13_val;
input  [17:0] x_14_val;
input  [17:0] x_21_val;
input  [17:0] x_24_val;
input  [17:0] x_25_val;
input  [17:0] x_34_val;
input  [17:0] x_37_val;
input  [17:0] x_39_val;
input  [17:0] x_40_val;
input  [17:0] x_43_val;
input  [17:0] x_45_val;
input  [17:0] x_46_val;
input  [17:0] x_48_val;
input  [17:0] x_52_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_382_p2;
reg   [0:0] icmp_ln86_reg_1436;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_229_fu_394_p2;
reg   [0:0] icmp_ln86_229_reg_1445;
wire   [0:0] icmp_ln86_232_fu_412_p2;
reg   [0:0] icmp_ln86_232_reg_1451;
wire   [0:0] icmp_ln86_233_fu_418_p2;
reg   [0:0] icmp_ln86_233_reg_1457;
wire   [0:0] icmp_ln86_238_fu_448_p2;
reg   [0:0] icmp_ln86_238_reg_1463;
wire   [0:0] icmp_ln86_239_fu_454_p2;
reg   [0:0] icmp_ln86_239_reg_1469;
wire   [0:0] icmp_ln86_240_fu_460_p2;
reg   [0:0] icmp_ln86_240_reg_1476;
wire   [0:0] icmp_ln86_241_fu_466_p2;
reg   [0:0] icmp_ln86_241_reg_1482;
wire   [0:0] icmp_ln86_249_fu_514_p2;
reg   [0:0] icmp_ln86_249_reg_1488;
wire   [0:0] icmp_ln86_250_fu_520_p2;
reg   [0:0] icmp_ln86_250_reg_1493;
wire   [0:0] icmp_ln86_251_fu_526_p2;
reg   [0:0] icmp_ln86_251_reg_1498;
wire   [0:0] icmp_ln86_252_fu_532_p2;
reg   [0:0] icmp_ln86_252_reg_1503;
wire   [0:0] icmp_ln86_253_fu_538_p2;
reg   [0:0] icmp_ln86_253_reg_1508;
wire   [0:0] icmp_ln86_254_fu_544_p2;
reg   [0:0] icmp_ln86_254_reg_1513;
wire   [0:0] icmp_ln86_255_fu_550_p2;
reg   [0:0] icmp_ln86_255_reg_1518;
wire   [4:0] select_ln117_234_fu_930_p3;
reg   [4:0] select_ln117_234_reg_1523;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln86_228_fu_388_p2;
wire   [0:0] xor_ln104_109_fu_562_p2;
wire   [0:0] icmp_ln86_230_fu_400_p2;
wire   [0:0] and_ln102_fu_556_p2;
wire   [0:0] xor_ln104_111_fu_580_p2;
wire   [0:0] icmp_ln86_231_fu_406_p2;
wire   [0:0] and_ln104_fu_568_p2;
wire   [0:0] xor_ln104_112_fu_598_p2;
wire   [0:0] icmp_ln86_234_fu_424_p2;
wire   [0:0] and_ln102_217_fu_574_p2;
wire   [0:0] icmp_ln86_235_fu_430_p2;
wire   [0:0] and_ln104_45_fu_586_p2;
wire   [0:0] icmp_ln86_236_fu_436_p2;
wire   [0:0] and_ln102_218_fu_592_p2;
wire   [0:0] icmp_ln86_237_fu_442_p2;
wire   [0:0] and_ln104_46_fu_604_p2;
wire   [0:0] icmp_ln86_242_fu_472_p2;
wire   [0:0] and_ln102_221_fu_610_p2;
wire   [0:0] xor_ln104_115_fu_616_p2;
wire   [0:0] and_ln102_245_fu_664_p2;
wire   [0:0] icmp_ln86_243_fu_478_p2;
wire   [0:0] and_ln102_222_fu_622_p2;
wire   [0:0] icmp_ln86_244_fu_484_p2;
wire   [0:0] xor_ln104_116_fu_628_p2;
wire   [0:0] and_ln102_246_fu_682_p2;
wire   [0:0] icmp_ln86_245_fu_490_p2;
wire   [0:0] and_ln102_223_fu_634_p2;
wire   [0:0] icmp_ln86_246_fu_496_p2;
wire   [0:0] xor_ln104_117_fu_640_p2;
wire   [0:0] and_ln102_247_fu_700_p2;
wire   [0:0] icmp_ln86_247_fu_502_p2;
wire   [0:0] and_ln102_224_fu_646_p2;
wire   [0:0] icmp_ln86_248_fu_508_p2;
wire   [0:0] xor_ln104_118_fu_652_p2;
wire   [0:0] and_ln102_248_fu_718_p2;
wire   [0:0] and_ln102_229_fu_658_p2;
wire   [0:0] xor_ln117_fu_730_p2;
wire   [0:0] and_ln102_230_fu_670_p2;
wire   [1:0] zext_ln117_fu_736_p1;
wire   [0:0] or_ln117_fu_740_p2;
wire   [1:0] select_ln117_fu_746_p3;
wire   [1:0] select_ln117_221_fu_754_p3;
wire   [0:0] and_ln102_231_fu_676_p2;
wire   [2:0] zext_ln117_24_fu_762_p1;
wire   [0:0] or_ln117_216_fu_766_p2;
wire   [2:0] select_ln117_222_fu_772_p3;
wire   [0:0] or_ln117_217_fu_780_p2;
wire   [0:0] and_ln102_232_fu_688_p2;
wire   [2:0] select_ln117_223_fu_786_p3;
wire   [0:0] or_ln117_218_fu_794_p2;
wire   [2:0] select_ln117_224_fu_800_p3;
wire   [2:0] select_ln117_225_fu_808_p3;
wire   [0:0] and_ln102_233_fu_694_p2;
wire   [3:0] zext_ln117_25_fu_816_p1;
wire   [0:0] or_ln117_219_fu_820_p2;
wire   [3:0] select_ln117_226_fu_826_p3;
wire   [0:0] or_ln117_220_fu_834_p2;
wire   [0:0] and_ln102_234_fu_706_p2;
wire   [3:0] select_ln117_227_fu_840_p3;
wire   [0:0] or_ln117_221_fu_848_p2;
wire   [3:0] select_ln117_228_fu_854_p3;
wire   [0:0] or_ln117_222_fu_862_p2;
wire   [0:0] and_ln102_235_fu_712_p2;
wire   [3:0] select_ln117_229_fu_868_p3;
wire   [0:0] or_ln117_223_fu_876_p2;
wire   [3:0] select_ln117_230_fu_882_p3;
wire   [0:0] or_ln117_224_fu_890_p2;
wire   [0:0] and_ln102_236_fu_724_p2;
wire   [3:0] select_ln117_231_fu_896_p3;
wire   [0:0] or_ln117_225_fu_904_p2;
wire   [3:0] select_ln117_232_fu_910_p3;
wire   [3:0] select_ln117_233_fu_918_p3;
wire   [4:0] zext_ln117_26_fu_926_p1;
wire   [0:0] xor_ln104_fu_938_p2;
wire   [0:0] xor_ln104_110_fu_948_p2;
wire   [0:0] and_ln102_216_fu_943_p2;
wire   [0:0] xor_ln104_113_fu_964_p2;
wire   [0:0] and_ln104_44_fu_953_p2;
wire   [0:0] xor_ln104_114_fu_980_p2;
wire   [0:0] and_ln102_219_fu_959_p2;
wire   [0:0] and_ln104_47_fu_969_p2;
wire   [0:0] and_ln102_220_fu_975_p2;
wire   [0:0] and_ln104_48_fu_985_p2;
wire   [0:0] and_ln102_225_fu_991_p2;
wire   [0:0] xor_ln104_119_fu_996_p2;
wire   [0:0] and_ln102_249_fu_1036_p2;
wire   [0:0] and_ln102_226_fu_1001_p2;
wire   [0:0] xor_ln104_120_fu_1006_p2;
wire   [0:0] and_ln102_250_fu_1052_p2;
wire   [0:0] and_ln102_227_fu_1011_p2;
wire   [0:0] xor_ln104_121_fu_1016_p2;
wire   [0:0] and_ln102_251_fu_1068_p2;
wire   [0:0] and_ln102_228_fu_1021_p2;
wire   [0:0] xor_ln104_122_fu_1026_p2;
wire   [0:0] and_ln102_252_fu_1084_p2;
wire   [0:0] and_ln102_237_fu_1031_p2;
wire   [0:0] or_ln117_226_fu_1095_p2;
wire   [0:0] or_ln117_227_fu_1100_p2;
wire   [0:0] and_ln102_238_fu_1041_p2;
wire   [4:0] select_ln117_235_fu_1105_p3;
wire   [0:0] or_ln117_228_fu_1112_p2;
wire   [4:0] select_ln117_236_fu_1118_p3;
wire   [0:0] or_ln117_229_fu_1126_p2;
wire   [0:0] and_ln102_239_fu_1047_p2;
wire   [4:0] select_ln117_237_fu_1131_p3;
wire   [0:0] or_ln117_230_fu_1139_p2;
wire   [4:0] select_ln117_238_fu_1145_p3;
wire   [0:0] or_ln117_231_fu_1153_p2;
wire   [0:0] and_ln102_240_fu_1057_p2;
wire   [4:0] select_ln117_239_fu_1159_p3;
wire   [0:0] or_ln117_232_fu_1167_p2;
wire   [4:0] select_ln117_240_fu_1173_p3;
wire   [0:0] or_ln117_233_fu_1181_p2;
wire   [0:0] and_ln102_241_fu_1063_p2;
wire   [4:0] select_ln117_241_fu_1186_p3;
wire   [0:0] or_ln117_234_fu_1194_p2;
wire   [4:0] select_ln117_242_fu_1200_p3;
wire   [0:0] or_ln117_235_fu_1208_p2;
wire   [0:0] and_ln102_242_fu_1073_p2;
wire   [4:0] select_ln117_243_fu_1214_p3;
wire   [0:0] or_ln117_236_fu_1222_p2;
wire   [4:0] select_ln117_244_fu_1228_p3;
wire   [0:0] or_ln117_237_fu_1236_p2;
wire   [0:0] and_ln102_243_fu_1079_p2;
wire   [4:0] select_ln117_245_fu_1242_p3;
wire   [0:0] or_ln117_238_fu_1250_p2;
wire   [4:0] select_ln117_246_fu_1256_p3;
wire   [0:0] or_ln117_239_fu_1264_p2;
wire   [0:0] and_ln102_244_fu_1089_p2;
wire   [4:0] select_ln117_247_fu_1270_p3;
wire   [0:0] or_ln117_240_fu_1278_p2;
wire   [4:0] select_ln117_248_fu_1284_p3;
wire   [11:0] agg_result_fu_1300_p65;
wire   [4:0] agg_result_fu_1300_p66;
wire   [11:0] agg_result_fu_1300_p67;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1300_p1;
wire   [4:0] agg_result_fu_1300_p3;
wire   [4:0] agg_result_fu_1300_p5;
wire   [4:0] agg_result_fu_1300_p7;
wire   [4:0] agg_result_fu_1300_p9;
wire   [4:0] agg_result_fu_1300_p11;
wire   [4:0] agg_result_fu_1300_p13;
wire   [4:0] agg_result_fu_1300_p15;
wire   [4:0] agg_result_fu_1300_p17;
wire   [4:0] agg_result_fu_1300_p19;
wire   [4:0] agg_result_fu_1300_p21;
wire   [4:0] agg_result_fu_1300_p23;
wire   [4:0] agg_result_fu_1300_p25;
wire   [4:0] agg_result_fu_1300_p27;
wire   [4:0] agg_result_fu_1300_p29;
wire   [4:0] agg_result_fu_1300_p31;
wire  signed [4:0] agg_result_fu_1300_p33;
wire  signed [4:0] agg_result_fu_1300_p35;
wire  signed [4:0] agg_result_fu_1300_p37;
wire  signed [4:0] agg_result_fu_1300_p39;
wire  signed [4:0] agg_result_fu_1300_p41;
wire  signed [4:0] agg_result_fu_1300_p43;
wire  signed [4:0] agg_result_fu_1300_p45;
wire  signed [4:0] agg_result_fu_1300_p47;
wire  signed [4:0] agg_result_fu_1300_p49;
wire  signed [4:0] agg_result_fu_1300_p51;
wire  signed [4:0] agg_result_fu_1300_p53;
wire  signed [4:0] agg_result_fu_1300_p55;
wire  signed [4:0] agg_result_fu_1300_p57;
wire  signed [4:0] agg_result_fu_1300_p59;
wire  signed [4:0] agg_result_fu_1300_p61;
wire  signed [4:0] agg_result_fu_1300_p63;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_65_5_12_1_1_x32 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 12 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 12 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 12 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 12 ),
    .CASE31( 5'h1F ),
    .din31_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_65_5_12_1_1_x32_U1912(
    .din0(12'd4063),
    .din1(12'd45),
    .din2(12'd58),
    .din3(12'd4029),
    .din4(12'd3898),
    .din5(12'd3142),
    .din6(12'd3111),
    .din7(12'd71),
    .din8(12'd3884),
    .din9(12'd175),
    .din10(12'd3951),
    .din11(12'd74),
    .din12(12'd355),
    .din13(12'd1818),
    .din14(12'd339),
    .din15(12'd3158),
    .din16(12'd3591),
    .din17(12'd505),
    .din18(12'd3868),
    .din19(12'd698),
    .din20(12'd681),
    .din21(12'd3827),
    .din22(12'd4045),
    .din23(12'd3320),
    .din24(12'd3980),
    .din25(12'd3523),
    .din26(12'd467),
    .din27(12'd3438),
    .din28(12'd4016),
    .din29(12'd1077),
    .din30(12'd4077),
    .din31(12'd54),
    .def(agg_result_fu_1300_p65),
    .sel(agg_result_fu_1300_p66),
    .dout(agg_result_fu_1300_p67)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_229_reg_1445 <= icmp_ln86_229_fu_394_p2;
        icmp_ln86_232_reg_1451 <= icmp_ln86_232_fu_412_p2;
        icmp_ln86_233_reg_1457 <= icmp_ln86_233_fu_418_p2;
        icmp_ln86_238_reg_1463 <= icmp_ln86_238_fu_448_p2;
        icmp_ln86_239_reg_1469 <= icmp_ln86_239_fu_454_p2;
        icmp_ln86_240_reg_1476 <= icmp_ln86_240_fu_460_p2;
        icmp_ln86_241_reg_1482 <= icmp_ln86_241_fu_466_p2;
        icmp_ln86_249_reg_1488 <= icmp_ln86_249_fu_514_p2;
        icmp_ln86_250_reg_1493 <= icmp_ln86_250_fu_520_p2;
        icmp_ln86_251_reg_1498 <= icmp_ln86_251_fu_526_p2;
        icmp_ln86_252_reg_1503 <= icmp_ln86_252_fu_532_p2;
        icmp_ln86_253_reg_1508 <= icmp_ln86_253_fu_538_p2;
        icmp_ln86_254_reg_1513 <= icmp_ln86_254_fu_544_p2;
        icmp_ln86_255_reg_1518 <= icmp_ln86_255_fu_550_p2;
        icmp_ln86_reg_1436 <= icmp_ln86_fu_382_p2;
        select_ln117_234_reg_1523 <= select_ln117_234_fu_930_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1300_p65 = 'bx;

assign agg_result_fu_1300_p66 = ((or_ln117_240_fu_1278_p2[0:0] == 1'b1) ? select_ln117_248_fu_1284_p3 : 5'd31);

assign and_ln102_216_fu_943_p2 = (xor_ln104_fu_938_p2 & icmp_ln86_229_reg_1445);

assign and_ln102_217_fu_574_p2 = (icmp_ln86_230_fu_400_p2 & and_ln102_fu_556_p2);

assign and_ln102_218_fu_592_p2 = (icmp_ln86_231_fu_406_p2 & and_ln104_fu_568_p2);

assign and_ln102_219_fu_959_p2 = (icmp_ln86_232_reg_1451 & and_ln102_216_fu_943_p2);

assign and_ln102_220_fu_975_p2 = (icmp_ln86_233_reg_1457 & and_ln104_44_fu_953_p2);

assign and_ln102_221_fu_610_p2 = (icmp_ln86_234_fu_424_p2 & and_ln102_217_fu_574_p2);

assign and_ln102_222_fu_622_p2 = (icmp_ln86_235_fu_430_p2 & and_ln104_45_fu_586_p2);

assign and_ln102_223_fu_634_p2 = (icmp_ln86_236_fu_436_p2 & and_ln102_218_fu_592_p2);

assign and_ln102_224_fu_646_p2 = (icmp_ln86_237_fu_442_p2 & and_ln104_46_fu_604_p2);

assign and_ln102_225_fu_991_p2 = (icmp_ln86_238_reg_1463 & and_ln102_219_fu_959_p2);

assign and_ln102_226_fu_1001_p2 = (icmp_ln86_239_reg_1469 & and_ln104_47_fu_969_p2);

assign and_ln102_227_fu_1011_p2 = (icmp_ln86_240_reg_1476 & and_ln102_220_fu_975_p2);

assign and_ln102_228_fu_1021_p2 = (icmp_ln86_241_reg_1482 & and_ln104_48_fu_985_p2);

assign and_ln102_229_fu_658_p2 = (icmp_ln86_242_fu_472_p2 & and_ln102_221_fu_610_p2);

assign and_ln102_230_fu_670_p2 = (and_ln102_245_fu_664_p2 & and_ln102_217_fu_574_p2);

assign and_ln102_231_fu_676_p2 = (icmp_ln86_243_fu_478_p2 & and_ln102_222_fu_622_p2);

assign and_ln102_232_fu_688_p2 = (and_ln104_45_fu_586_p2 & and_ln102_246_fu_682_p2);

assign and_ln102_233_fu_694_p2 = (icmp_ln86_245_fu_490_p2 & and_ln102_223_fu_634_p2);

assign and_ln102_234_fu_706_p2 = (and_ln102_247_fu_700_p2 & and_ln102_218_fu_592_p2);

assign and_ln102_235_fu_712_p2 = (icmp_ln86_247_fu_502_p2 & and_ln102_224_fu_646_p2);

assign and_ln102_236_fu_724_p2 = (and_ln104_46_fu_604_p2 & and_ln102_248_fu_718_p2);

assign and_ln102_237_fu_1031_p2 = (icmp_ln86_239_reg_1469 & and_ln102_225_fu_991_p2);

assign and_ln102_238_fu_1041_p2 = (and_ln102_249_fu_1036_p2 & and_ln102_219_fu_959_p2);

assign and_ln102_239_fu_1047_p2 = (icmp_ln86_250_reg_1493 & and_ln102_226_fu_1001_p2);

assign and_ln102_240_fu_1057_p2 = (and_ln104_47_fu_969_p2 & and_ln102_250_fu_1052_p2);

assign and_ln102_241_fu_1063_p2 = (icmp_ln86_252_reg_1503 & and_ln102_227_fu_1011_p2);

assign and_ln102_242_fu_1073_p2 = (and_ln102_251_fu_1068_p2 & and_ln102_220_fu_975_p2);

assign and_ln102_243_fu_1079_p2 = (icmp_ln86_254_reg_1513 & and_ln102_228_fu_1021_p2);

assign and_ln102_244_fu_1089_p2 = (and_ln104_48_fu_985_p2 & and_ln102_252_fu_1084_p2);

assign and_ln102_245_fu_664_p2 = (xor_ln104_115_fu_616_p2 & icmp_ln86_242_fu_472_p2);

assign and_ln102_246_fu_682_p2 = (xor_ln104_116_fu_628_p2 & icmp_ln86_244_fu_484_p2);

assign and_ln102_247_fu_700_p2 = (xor_ln104_117_fu_640_p2 & icmp_ln86_246_fu_496_p2);

assign and_ln102_248_fu_718_p2 = (xor_ln104_118_fu_652_p2 & icmp_ln86_248_fu_508_p2);

assign and_ln102_249_fu_1036_p2 = (xor_ln104_119_fu_996_p2 & icmp_ln86_249_reg_1488);

assign and_ln102_250_fu_1052_p2 = (xor_ln104_120_fu_1006_p2 & icmp_ln86_251_reg_1498);

assign and_ln102_251_fu_1068_p2 = (xor_ln104_121_fu_1016_p2 & icmp_ln86_253_reg_1508);

assign and_ln102_252_fu_1084_p2 = (xor_ln104_122_fu_1026_p2 & icmp_ln86_255_reg_1518);

assign and_ln102_fu_556_p2 = (icmp_ln86_fu_382_p2 & icmp_ln86_228_fu_388_p2);

assign and_ln104_44_fu_953_p2 = (xor_ln104_fu_938_p2 & xor_ln104_110_fu_948_p2);

assign and_ln104_45_fu_586_p2 = (xor_ln104_111_fu_580_p2 & and_ln102_fu_556_p2);

assign and_ln104_46_fu_604_p2 = (xor_ln104_112_fu_598_p2 & and_ln104_fu_568_p2);

assign and_ln104_47_fu_969_p2 = (xor_ln104_113_fu_964_p2 & and_ln102_216_fu_943_p2);

assign and_ln104_48_fu_985_p2 = (xor_ln104_114_fu_980_p2 & and_ln104_44_fu_953_p2);

assign and_ln104_fu_568_p2 = (xor_ln104_109_fu_562_p2 & icmp_ln86_fu_382_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1300_p67;

assign icmp_ln86_228_fu_388_p2 = (($signed(x_21_val) < $signed(18'd302)) ? 1'b1 : 1'b0);

assign icmp_ln86_229_fu_394_p2 = (($signed(x_46_val) < $signed(18'd199)) ? 1'b1 : 1'b0);

assign icmp_ln86_230_fu_400_p2 = (($signed(x_43_val) < $signed(18'd144)) ? 1'b1 : 1'b0);

assign icmp_ln86_231_fu_406_p2 = (($signed(x_25_val) < $signed(18'd395)) ? 1'b1 : 1'b0);

assign icmp_ln86_232_fu_412_p2 = (($signed(x_3_val) < $signed(18'd100610)) ? 1'b1 : 1'b0);

assign icmp_ln86_233_fu_418_p2 = (($signed(x_39_val) < $signed(18'd1150)) ? 1'b1 : 1'b0);

assign icmp_ln86_234_fu_424_p2 = (($signed(x_1_val) < $signed(18'd82636)) ? 1'b1 : 1'b0);

assign icmp_ln86_235_fu_430_p2 = (($signed(x_39_val) < $signed(18'd1318)) ? 1'b1 : 1'b0);

assign icmp_ln86_236_fu_436_p2 = (($signed(x_24_val) < $signed(18'd410)) ? 1'b1 : 1'b0);

assign icmp_ln86_237_fu_442_p2 = (($signed(x_3_val) < $signed(18'd53295)) ? 1'b1 : 1'b0);

assign icmp_ln86_238_fu_448_p2 = (($signed(x_10_val) < $signed(18'd830)) ? 1'b1 : 1'b0);

assign icmp_ln86_239_fu_454_p2 = (($signed(x_14_val) < $signed(18'd52)) ? 1'b1 : 1'b0);

assign icmp_ln86_240_fu_460_p2 = (($signed(x_13_val) < $signed(18'd445)) ? 1'b1 : 1'b0);

assign icmp_ln86_241_fu_466_p2 = (($signed(x_39_val) < $signed(18'd1158)) ? 1'b1 : 1'b0);

assign icmp_ln86_242_fu_472_p2 = (($signed(x_52_val) < $signed(18'd51713)) ? 1'b1 : 1'b0);

assign icmp_ln86_243_fu_478_p2 = (($signed(x_45_val) < $signed(18'd356)) ? 1'b1 : 1'b0);

assign icmp_ln86_244_fu_484_p2 = (($signed(x_21_val) < $signed(18'd200)) ? 1'b1 : 1'b0);

assign icmp_ln86_245_fu_490_p2 = (($signed(x_7_val) < $signed(18'd1259)) ? 1'b1 : 1'b0);

assign icmp_ln86_246_fu_496_p2 = (($signed(x_40_val) < $signed(18'd1103)) ? 1'b1 : 1'b0);

assign icmp_ln86_247_fu_502_p2 = (($signed(x_48_val) < $signed(18'd11494)) ? 1'b1 : 1'b0);

assign icmp_ln86_248_fu_508_p2 = (($signed(x_2_val) < $signed(18'd97)) ? 1'b1 : 1'b0);

assign icmp_ln86_249_fu_514_p2 = (($signed(x_1_val) < $signed(18'd178484)) ? 1'b1 : 1'b0);

assign icmp_ln86_250_fu_520_p2 = (($signed(x_37_val) < $signed(18'd101)) ? 1'b1 : 1'b0);

assign icmp_ln86_251_fu_526_p2 = (($signed(x_24_val) < $signed(18'd398)) ? 1'b1 : 1'b0);

assign icmp_ln86_252_fu_532_p2 = (($signed(x_39_val) < $signed(18'd1080)) ? 1'b1 : 1'b0);

assign icmp_ln86_253_fu_538_p2 = (($signed(x_39_val) < $signed(18'd1129)) ? 1'b1 : 1'b0);

assign icmp_ln86_254_fu_544_p2 = (($signed(x_34_val) < $signed(18'd393)) ? 1'b1 : 1'b0);

assign icmp_ln86_255_fu_550_p2 = (($signed(x_1_val) < $signed(18'd161958)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_382_p2 = (($signed(x_46_val) < $signed(18'd196)) ? 1'b1 : 1'b0);

assign or_ln117_216_fu_766_p2 = (and_ln102_231_fu_676_p2 | and_ln102_217_fu_574_p2);

assign or_ln117_217_fu_780_p2 = (and_ln102_222_fu_622_p2 | and_ln102_217_fu_574_p2);

assign or_ln117_218_fu_794_p2 = (or_ln117_217_fu_780_p2 | and_ln102_232_fu_688_p2);

assign or_ln117_219_fu_820_p2 = (and_ln102_fu_556_p2 | and_ln102_233_fu_694_p2);

assign or_ln117_220_fu_834_p2 = (and_ln102_fu_556_p2 | and_ln102_223_fu_634_p2);

assign or_ln117_221_fu_848_p2 = (or_ln117_220_fu_834_p2 | and_ln102_234_fu_706_p2);

assign or_ln117_222_fu_862_p2 = (and_ln102_fu_556_p2 | and_ln102_218_fu_592_p2);

assign or_ln117_223_fu_876_p2 = (or_ln117_222_fu_862_p2 | and_ln102_235_fu_712_p2);

assign or_ln117_224_fu_890_p2 = (or_ln117_222_fu_862_p2 | and_ln102_224_fu_646_p2);

assign or_ln117_225_fu_904_p2 = (or_ln117_224_fu_890_p2 | and_ln102_236_fu_724_p2);

assign or_ln117_226_fu_1095_p2 = (icmp_ln86_reg_1436 | and_ln102_237_fu_1031_p2);

assign or_ln117_227_fu_1100_p2 = (icmp_ln86_reg_1436 | and_ln102_225_fu_991_p2);

assign or_ln117_228_fu_1112_p2 = (or_ln117_227_fu_1100_p2 | and_ln102_238_fu_1041_p2);

assign or_ln117_229_fu_1126_p2 = (icmp_ln86_reg_1436 | and_ln102_219_fu_959_p2);

assign or_ln117_230_fu_1139_p2 = (or_ln117_229_fu_1126_p2 | and_ln102_239_fu_1047_p2);

assign or_ln117_231_fu_1153_p2 = (or_ln117_229_fu_1126_p2 | and_ln102_226_fu_1001_p2);

assign or_ln117_232_fu_1167_p2 = (or_ln117_231_fu_1153_p2 | and_ln102_240_fu_1057_p2);

assign or_ln117_233_fu_1181_p2 = (icmp_ln86_reg_1436 | and_ln102_216_fu_943_p2);

assign or_ln117_234_fu_1194_p2 = (or_ln117_233_fu_1181_p2 | and_ln102_241_fu_1063_p2);

assign or_ln117_235_fu_1208_p2 = (or_ln117_233_fu_1181_p2 | and_ln102_227_fu_1011_p2);

assign or_ln117_236_fu_1222_p2 = (or_ln117_235_fu_1208_p2 | and_ln102_242_fu_1073_p2);

assign or_ln117_237_fu_1236_p2 = (or_ln117_233_fu_1181_p2 | and_ln102_220_fu_975_p2);

assign or_ln117_238_fu_1250_p2 = (or_ln117_237_fu_1236_p2 | and_ln102_243_fu_1079_p2);

assign or_ln117_239_fu_1264_p2 = (or_ln117_237_fu_1236_p2 | and_ln102_228_fu_1021_p2);

assign or_ln117_240_fu_1278_p2 = (or_ln117_239_fu_1264_p2 | and_ln102_244_fu_1089_p2);

assign or_ln117_fu_740_p2 = (and_ln102_230_fu_670_p2 | and_ln102_221_fu_610_p2);

assign select_ln117_221_fu_754_p3 = ((or_ln117_fu_740_p2[0:0] == 1'b1) ? select_ln117_fu_746_p3 : 2'd3);

assign select_ln117_222_fu_772_p3 = ((and_ln102_217_fu_574_p2[0:0] == 1'b1) ? zext_ln117_24_fu_762_p1 : 3'd4);

assign select_ln117_223_fu_786_p3 = ((or_ln117_216_fu_766_p2[0:0] == 1'b1) ? select_ln117_222_fu_772_p3 : 3'd5);

assign select_ln117_224_fu_800_p3 = ((or_ln117_217_fu_780_p2[0:0] == 1'b1) ? select_ln117_223_fu_786_p3 : 3'd6);

assign select_ln117_225_fu_808_p3 = ((or_ln117_218_fu_794_p2[0:0] == 1'b1) ? select_ln117_224_fu_800_p3 : 3'd7);

assign select_ln117_226_fu_826_p3 = ((and_ln102_fu_556_p2[0:0] == 1'b1) ? zext_ln117_25_fu_816_p1 : 4'd8);

assign select_ln117_227_fu_840_p3 = ((or_ln117_219_fu_820_p2[0:0] == 1'b1) ? select_ln117_226_fu_826_p3 : 4'd9);

assign select_ln117_228_fu_854_p3 = ((or_ln117_220_fu_834_p2[0:0] == 1'b1) ? select_ln117_227_fu_840_p3 : 4'd10);

assign select_ln117_229_fu_868_p3 = ((or_ln117_221_fu_848_p2[0:0] == 1'b1) ? select_ln117_228_fu_854_p3 : 4'd11);

assign select_ln117_230_fu_882_p3 = ((or_ln117_222_fu_862_p2[0:0] == 1'b1) ? select_ln117_229_fu_868_p3 : 4'd12);

assign select_ln117_231_fu_896_p3 = ((or_ln117_223_fu_876_p2[0:0] == 1'b1) ? select_ln117_230_fu_882_p3 : 4'd13);

assign select_ln117_232_fu_910_p3 = ((or_ln117_224_fu_890_p2[0:0] == 1'b1) ? select_ln117_231_fu_896_p3 : 4'd14);

assign select_ln117_233_fu_918_p3 = ((or_ln117_225_fu_904_p2[0:0] == 1'b1) ? select_ln117_232_fu_910_p3 : 4'd15);

assign select_ln117_234_fu_930_p3 = ((icmp_ln86_fu_382_p2[0:0] == 1'b1) ? zext_ln117_26_fu_926_p1 : 5'd16);

assign select_ln117_235_fu_1105_p3 = ((or_ln117_226_fu_1095_p2[0:0] == 1'b1) ? select_ln117_234_reg_1523 : 5'd17);

assign select_ln117_236_fu_1118_p3 = ((or_ln117_227_fu_1100_p2[0:0] == 1'b1) ? select_ln117_235_fu_1105_p3 : 5'd18);

assign select_ln117_237_fu_1131_p3 = ((or_ln117_228_fu_1112_p2[0:0] == 1'b1) ? select_ln117_236_fu_1118_p3 : 5'd19);

assign select_ln117_238_fu_1145_p3 = ((or_ln117_229_fu_1126_p2[0:0] == 1'b1) ? select_ln117_237_fu_1131_p3 : 5'd20);

assign select_ln117_239_fu_1159_p3 = ((or_ln117_230_fu_1139_p2[0:0] == 1'b1) ? select_ln117_238_fu_1145_p3 : 5'd21);

assign select_ln117_240_fu_1173_p3 = ((or_ln117_231_fu_1153_p2[0:0] == 1'b1) ? select_ln117_239_fu_1159_p3 : 5'd22);

assign select_ln117_241_fu_1186_p3 = ((or_ln117_232_fu_1167_p2[0:0] == 1'b1) ? select_ln117_240_fu_1173_p3 : 5'd23);

assign select_ln117_242_fu_1200_p3 = ((or_ln117_233_fu_1181_p2[0:0] == 1'b1) ? select_ln117_241_fu_1186_p3 : 5'd24);

assign select_ln117_243_fu_1214_p3 = ((or_ln117_234_fu_1194_p2[0:0] == 1'b1) ? select_ln117_242_fu_1200_p3 : 5'd25);

assign select_ln117_244_fu_1228_p3 = ((or_ln117_235_fu_1208_p2[0:0] == 1'b1) ? select_ln117_243_fu_1214_p3 : 5'd26);

assign select_ln117_245_fu_1242_p3 = ((or_ln117_236_fu_1222_p2[0:0] == 1'b1) ? select_ln117_244_fu_1228_p3 : 5'd27);

assign select_ln117_246_fu_1256_p3 = ((or_ln117_237_fu_1236_p2[0:0] == 1'b1) ? select_ln117_245_fu_1242_p3 : 5'd28);

assign select_ln117_247_fu_1270_p3 = ((or_ln117_238_fu_1250_p2[0:0] == 1'b1) ? select_ln117_246_fu_1256_p3 : 5'd29);

assign select_ln117_248_fu_1284_p3 = ((or_ln117_239_fu_1264_p2[0:0] == 1'b1) ? select_ln117_247_fu_1270_p3 : 5'd30);

assign select_ln117_fu_746_p3 = ((and_ln102_221_fu_610_p2[0:0] == 1'b1) ? zext_ln117_fu_736_p1 : 2'd2);

assign xor_ln104_109_fu_562_p2 = (icmp_ln86_228_fu_388_p2 ^ 1'd1);

assign xor_ln104_110_fu_948_p2 = (icmp_ln86_229_reg_1445 ^ 1'd1);

assign xor_ln104_111_fu_580_p2 = (icmp_ln86_230_fu_400_p2 ^ 1'd1);

assign xor_ln104_112_fu_598_p2 = (icmp_ln86_231_fu_406_p2 ^ 1'd1);

assign xor_ln104_113_fu_964_p2 = (icmp_ln86_232_reg_1451 ^ 1'd1);

assign xor_ln104_114_fu_980_p2 = (icmp_ln86_233_reg_1457 ^ 1'd1);

assign xor_ln104_115_fu_616_p2 = (icmp_ln86_234_fu_424_p2 ^ 1'd1);

assign xor_ln104_116_fu_628_p2 = (icmp_ln86_235_fu_430_p2 ^ 1'd1);

assign xor_ln104_117_fu_640_p2 = (icmp_ln86_236_fu_436_p2 ^ 1'd1);

assign xor_ln104_118_fu_652_p2 = (icmp_ln86_237_fu_442_p2 ^ 1'd1);

assign xor_ln104_119_fu_996_p2 = (icmp_ln86_238_reg_1463 ^ 1'd1);

assign xor_ln104_120_fu_1006_p2 = (icmp_ln86_239_reg_1469 ^ 1'd1);

assign xor_ln104_121_fu_1016_p2 = (icmp_ln86_240_reg_1476 ^ 1'd1);

assign xor_ln104_122_fu_1026_p2 = (icmp_ln86_241_reg_1482 ^ 1'd1);

assign xor_ln104_fu_938_p2 = (icmp_ln86_reg_1436 ^ 1'd1);

assign xor_ln117_fu_730_p2 = (1'd1 ^ and_ln102_229_fu_658_p2);

assign zext_ln117_24_fu_762_p1 = select_ln117_221_fu_754_p3;

assign zext_ln117_25_fu_816_p1 = select_ln117_225_fu_808_p3;

assign zext_ln117_26_fu_926_p1 = select_ln117_233_fu_918_p3;

assign zext_ln117_fu_736_p1 = xor_ln117_fu_730_p2;

endmodule //my_prj_decision_function_9
