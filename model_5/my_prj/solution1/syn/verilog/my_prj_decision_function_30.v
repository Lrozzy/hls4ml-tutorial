// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_30 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_3_val,
        x_7_val,
        x_10_val,
        x_11_val,
        x_15_val,
        x_18_val,
        x_23_val,
        x_24_val,
        x_28_val,
        x_31_val,
        x_33_val,
        x_39_val,
        x_44_val,
        x_51_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_3_val;
input  [17:0] x_7_val;
input  [17:0] x_10_val;
input  [17:0] x_11_val;
input  [17:0] x_15_val;
input  [17:0] x_18_val;
input  [17:0] x_23_val;
input  [17:0] x_24_val;
input  [17:0] x_28_val;
input  [17:0] x_31_val;
input  [17:0] x_33_val;
input  [17:0] x_39_val;
input  [17:0] x_44_val;
input  [17:0] x_51_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_804_fu_366_p2;
reg   [0:0] icmp_ln86_804_reg_1112;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_805_fu_372_p2;
reg   [0:0] icmp_ln86_805_reg_1118;
wire   [0:0] icmp_ln86_813_fu_420_p2;
reg   [0:0] icmp_ln86_813_reg_1124;
wire   [0:0] icmp_ln86_814_fu_426_p2;
reg   [0:0] icmp_ln86_814_reg_1129;
wire   [0:0] icmp_ln86_815_fu_432_p2;
reg   [0:0] icmp_ln86_815_reg_1134;
wire   [0:0] icmp_ln86_816_fu_438_p2;
reg   [0:0] icmp_ln86_816_reg_1139;
wire   [0:0] and_ln104_159_fu_516_p2;
reg   [0:0] and_ln104_159_reg_1144;
wire   [0:0] and_ln102_768_fu_528_p2;
reg   [0:0] and_ln102_768_reg_1150;
wire   [0:0] or_ln117_744_fu_842_p2;
reg   [0:0] or_ln117_744_reg_1156;
wire   [4:0] select_ln117_784_fu_860_p3;
reg   [4:0] select_ln117_784_reg_1162;
wire   [0:0] or_ln117_748_fu_868_p2;
reg   [0:0] or_ln117_748_reg_1167;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln86_fu_306_p2;
wire   [0:0] icmp_ln86_795_fu_312_p2;
wire   [0:0] xor_ln104_382_fu_456_p2;
wire   [0:0] icmp_ln86_796_fu_318_p2;
wire   [0:0] xor_ln104_fu_444_p2;
wire   [0:0] xor_ln104_383_fu_474_p2;
wire   [0:0] icmp_ln86_797_fu_324_p2;
wire   [0:0] and_ln102_fu_450_p2;
wire   [0:0] xor_ln104_384_fu_492_p2;
wire   [0:0] icmp_ln86_798_fu_330_p2;
wire   [0:0] and_ln104_fu_462_p2;
wire   [0:0] xor_ln104_385_fu_510_p2;
wire   [0:0] icmp_ln86_799_fu_336_p2;
wire   [0:0] and_ln102_764_fu_468_p2;
wire   [0:0] icmp_ln86_800_fu_342_p2;
wire   [0:0] and_ln104_157_fu_480_p2;
wire   [0:0] xor_ln104_386_fu_534_p2;
wire   [0:0] icmp_ln86_801_fu_348_p2;
wire   [0:0] and_ln102_765_fu_486_p2;
wire   [0:0] icmp_ln86_802_fu_354_p2;
wire   [0:0] and_ln104_158_fu_498_p2;
wire   [0:0] icmp_ln86_803_fu_360_p2;
wire   [0:0] and_ln102_766_fu_504_p2;
wire   [0:0] icmp_ln86_806_fu_378_p2;
wire   [0:0] and_ln104_160_fu_540_p2;
wire   [0:0] icmp_ln86_807_fu_384_p2;
wire   [0:0] and_ln102_769_fu_546_p2;
wire   [0:0] icmp_ln86_808_fu_390_p2;
wire   [0:0] xor_ln104_387_fu_552_p2;
wire   [0:0] and_ln102_785_fu_594_p2;
wire   [0:0] icmp_ln86_809_fu_396_p2;
wire   [0:0] and_ln102_770_fu_558_p2;
wire   [0:0] icmp_ln86_810_fu_402_p2;
wire   [0:0] xor_ln104_388_fu_564_p2;
wire   [0:0] and_ln102_786_fu_612_p2;
wire   [0:0] icmp_ln86_811_fu_408_p2;
wire   [0:0] and_ln102_771_fu_570_p2;
wire   [0:0] icmp_ln86_812_fu_414_p2;
wire   [0:0] xor_ln104_389_fu_576_p2;
wire   [0:0] and_ln102_787_fu_630_p2;
wire   [0:0] and_ln102_767_fu_522_p2;
wire   [0:0] xor_ln117_fu_642_p2;
wire   [0:0] and_ln102_774_fu_582_p2;
wire   [1:0] zext_ln117_fu_648_p1;
wire   [0:0] or_ln117_fu_652_p2;
wire   [1:0] select_ln117_fu_658_p3;
wire   [1:0] select_ln117_771_fu_672_p3;
wire   [0:0] or_ln117_732_fu_666_p2;
wire   [0:0] and_ln102_775_fu_588_p2;
wire   [2:0] zext_ln117_87_fu_680_p1;
wire   [0:0] or_ln117_733_fu_684_p2;
wire   [2:0] select_ln117_772_fu_690_p3;
wire   [0:0] or_ln117_734_fu_698_p2;
wire   [0:0] and_ln102_776_fu_600_p2;
wire   [2:0] select_ln117_773_fu_704_p3;
wire   [0:0] or_ln117_735_fu_712_p2;
wire   [2:0] select_ln117_774_fu_718_p3;
wire   [2:0] select_ln117_775_fu_732_p3;
wire   [0:0] or_ln117_736_fu_726_p2;
wire   [0:0] and_ln102_777_fu_606_p2;
wire   [3:0] zext_ln117_88_fu_740_p1;
wire   [0:0] or_ln117_737_fu_744_p2;
wire   [3:0] select_ln117_776_fu_750_p3;
wire   [0:0] or_ln117_738_fu_758_p2;
wire   [0:0] and_ln102_778_fu_618_p2;
wire   [3:0] select_ln117_777_fu_764_p3;
wire   [0:0] or_ln117_739_fu_772_p2;
wire   [3:0] select_ln117_778_fu_778_p3;
wire   [0:0] or_ln117_740_fu_786_p2;
wire   [0:0] and_ln102_779_fu_624_p2;
wire   [3:0] select_ln117_779_fu_792_p3;
wire   [0:0] or_ln117_741_fu_800_p2;
wire   [3:0] select_ln117_780_fu_806_p3;
wire   [0:0] or_ln117_742_fu_814_p2;
wire   [0:0] and_ln102_780_fu_636_p2;
wire   [3:0] select_ln117_781_fu_820_p3;
wire   [0:0] or_ln117_743_fu_828_p2;
wire   [3:0] select_ln117_782_fu_834_p3;
wire   [3:0] select_ln117_783_fu_848_p3;
wire   [4:0] zext_ln117_89_fu_856_p1;
wire   [0:0] and_ln102_772_fu_874_p2;
wire   [0:0] xor_ln104_390_fu_878_p2;
wire   [0:0] and_ln102_788_fu_897_p2;
wire   [0:0] and_ln102_773_fu_883_p2;
wire   [0:0] xor_ln104_391_fu_887_p2;
wire   [0:0] and_ln102_789_fu_912_p2;
wire   [0:0] and_ln102_781_fu_892_p2;
wire   [0:0] or_ln117_745_fu_922_p2;
wire   [0:0] or_ln117_746_fu_927_p2;
wire   [0:0] and_ln102_782_fu_902_p2;
wire   [4:0] select_ln117_785_fu_932_p3;
wire   [0:0] or_ln117_747_fu_939_p2;
wire   [4:0] select_ln117_786_fu_945_p3;
wire   [0:0] and_ln102_783_fu_907_p2;
wire   [4:0] select_ln117_787_fu_953_p3;
wire   [0:0] or_ln117_749_fu_961_p2;
wire   [4:0] select_ln117_788_fu_966_p3;
wire   [0:0] or_ln117_750_fu_973_p2;
wire   [0:0] and_ln102_784_fu_917_p2;
wire   [4:0] select_ln117_789_fu_978_p3;
wire   [0:0] or_ln117_751_fu_986_p2;
wire   [4:0] select_ln117_790_fu_992_p3;
wire   [11:0] agg_result_fu_1008_p49;
wire   [4:0] agg_result_fu_1008_p50;
wire   [11:0] agg_result_fu_1008_p51;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1008_p1;
wire   [4:0] agg_result_fu_1008_p3;
wire   [4:0] agg_result_fu_1008_p5;
wire   [4:0] agg_result_fu_1008_p7;
wire   [4:0] agg_result_fu_1008_p9;
wire   [4:0] agg_result_fu_1008_p11;
wire   [4:0] agg_result_fu_1008_p13;
wire   [4:0] agg_result_fu_1008_p15;
wire   [4:0] agg_result_fu_1008_p17;
wire   [4:0] agg_result_fu_1008_p19;
wire   [4:0] agg_result_fu_1008_p21;
wire   [4:0] agg_result_fu_1008_p23;
wire   [4:0] agg_result_fu_1008_p25;
wire   [4:0] agg_result_fu_1008_p27;
wire   [4:0] agg_result_fu_1008_p29;
wire   [4:0] agg_result_fu_1008_p31;
wire  signed [4:0] agg_result_fu_1008_p33;
wire  signed [4:0] agg_result_fu_1008_p35;
wire  signed [4:0] agg_result_fu_1008_p37;
wire  signed [4:0] agg_result_fu_1008_p39;
wire  signed [4:0] agg_result_fu_1008_p41;
wire  signed [4:0] agg_result_fu_1008_p43;
wire  signed [4:0] agg_result_fu_1008_p45;
wire  signed [4:0] agg_result_fu_1008_p47;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_49_5_12_1_1_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_49_5_12_1_1_x_U1498(
    .din0(12'd655),
    .din1(12'd1724),
    .din2(12'd1974),
    .din3(12'd3959),
    .din4(12'd42),
    .din5(12'd3978),
    .din6(12'd85),
    .din7(12'd349),
    .din8(12'd3869),
    .din9(12'd962),
    .din10(12'd4067),
    .din11(12'd1228),
    .din12(12'd4080),
    .din13(12'd22),
    .din14(12'd3947),
    .din15(12'd69),
    .din16(12'd820),
    .din17(12'd3981),
    .din18(12'd3917),
    .din19(12'd11),
    .din20(12'd78),
    .din21(12'd874),
    .din22(12'd3459),
    .din23(12'd239),
    .def(agg_result_fu_1008_p49),
    .sel(agg_result_fu_1008_p50),
    .dout(agg_result_fu_1008_p51)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln102_768_reg_1150 <= and_ln102_768_fu_528_p2;
        and_ln104_159_reg_1144 <= and_ln104_159_fu_516_p2;
        icmp_ln86_804_reg_1112 <= icmp_ln86_804_fu_366_p2;
        icmp_ln86_805_reg_1118 <= icmp_ln86_805_fu_372_p2;
        icmp_ln86_813_reg_1124 <= icmp_ln86_813_fu_420_p2;
        icmp_ln86_814_reg_1129 <= icmp_ln86_814_fu_426_p2;
        icmp_ln86_815_reg_1134 <= icmp_ln86_815_fu_432_p2;
        icmp_ln86_816_reg_1139 <= icmp_ln86_816_fu_438_p2;
        or_ln117_744_reg_1156 <= or_ln117_744_fu_842_p2;
        or_ln117_748_reg_1167 <= or_ln117_748_fu_868_p2;
        select_ln117_784_reg_1162 <= select_ln117_784_fu_860_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1008_p49 = 'bx;

assign agg_result_fu_1008_p50 = ((or_ln117_751_fu_986_p2[0:0] == 1'b1) ? select_ln117_790_fu_992_p3 : 5'd23);

assign and_ln102_764_fu_468_p2 = (xor_ln104_fu_444_p2 & icmp_ln86_796_fu_318_p2);

assign and_ln102_765_fu_486_p2 = (icmp_ln86_797_fu_324_p2 & and_ln102_fu_450_p2);

assign and_ln102_766_fu_504_p2 = (icmp_ln86_798_fu_330_p2 & and_ln104_fu_462_p2);

assign and_ln102_767_fu_522_p2 = (icmp_ln86_799_fu_336_p2 & and_ln102_764_fu_468_p2);

assign and_ln102_768_fu_528_p2 = (icmp_ln86_800_fu_342_p2 & and_ln104_157_fu_480_p2);

assign and_ln102_769_fu_546_p2 = (icmp_ln86_801_fu_348_p2 & and_ln102_765_fu_486_p2);

assign and_ln102_770_fu_558_p2 = (icmp_ln86_802_fu_354_p2 & and_ln104_158_fu_498_p2);

assign and_ln102_771_fu_570_p2 = (icmp_ln86_803_fu_360_p2 & and_ln102_766_fu_504_p2);

assign and_ln102_772_fu_874_p2 = (icmp_ln86_804_reg_1112 & and_ln104_159_reg_1144);

assign and_ln102_773_fu_883_p2 = (icmp_ln86_805_reg_1118 & and_ln102_768_reg_1150);

assign and_ln102_774_fu_582_p2 = (icmp_ln86_806_fu_378_p2 & and_ln104_160_fu_540_p2);

assign and_ln102_775_fu_588_p2 = (icmp_ln86_807_fu_384_p2 & and_ln102_769_fu_546_p2);

assign and_ln102_776_fu_600_p2 = (and_ln102_785_fu_594_p2 & and_ln102_765_fu_486_p2);

assign and_ln102_777_fu_606_p2 = (icmp_ln86_809_fu_396_p2 & and_ln102_770_fu_558_p2);

assign and_ln102_778_fu_618_p2 = (and_ln104_158_fu_498_p2 & and_ln102_786_fu_612_p2);

assign and_ln102_779_fu_624_p2 = (icmp_ln86_811_fu_408_p2 & and_ln102_771_fu_570_p2);

assign and_ln102_780_fu_636_p2 = (and_ln102_787_fu_630_p2 & and_ln102_766_fu_504_p2);

assign and_ln102_781_fu_892_p2 = (icmp_ln86_813_reg_1124 & and_ln102_772_fu_874_p2);

assign and_ln102_782_fu_902_p2 = (and_ln104_159_reg_1144 & and_ln102_788_fu_897_p2);

assign and_ln102_783_fu_907_p2 = (icmp_ln86_815_reg_1134 & and_ln102_773_fu_883_p2);

assign and_ln102_784_fu_917_p2 = (and_ln102_789_fu_912_p2 & and_ln102_768_reg_1150);

assign and_ln102_785_fu_594_p2 = (xor_ln104_387_fu_552_p2 & icmp_ln86_808_fu_390_p2);

assign and_ln102_786_fu_612_p2 = (xor_ln104_388_fu_564_p2 & icmp_ln86_810_fu_402_p2);

assign and_ln102_787_fu_630_p2 = (xor_ln104_389_fu_576_p2 & icmp_ln86_812_fu_414_p2);

assign and_ln102_788_fu_897_p2 = (xor_ln104_390_fu_878_p2 & icmp_ln86_814_reg_1129);

assign and_ln102_789_fu_912_p2 = (xor_ln104_391_fu_887_p2 & icmp_ln86_816_reg_1139);

assign and_ln102_fu_450_p2 = (icmp_ln86_fu_306_p2 & icmp_ln86_795_fu_312_p2);

assign and_ln104_157_fu_480_p2 = (xor_ln104_fu_444_p2 & xor_ln104_383_fu_474_p2);

assign and_ln104_158_fu_498_p2 = (xor_ln104_384_fu_492_p2 & and_ln102_fu_450_p2);

assign and_ln104_159_fu_516_p2 = (xor_ln104_385_fu_510_p2 & and_ln104_fu_462_p2);

assign and_ln104_160_fu_540_p2 = (xor_ln104_386_fu_534_p2 & and_ln104_157_fu_480_p2);

assign and_ln104_fu_462_p2 = (xor_ln104_382_fu_456_p2 & icmp_ln86_fu_306_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1008_p51;

assign icmp_ln86_795_fu_312_p2 = (($signed(x_11_val) < $signed(18'd377)) ? 1'b1 : 1'b0);

assign icmp_ln86_796_fu_318_p2 = (($signed(x_28_val) < $signed(18'd10752)) ? 1'b1 : 1'b0);

assign icmp_ln86_797_fu_324_p2 = (($signed(x_44_val) < $signed(18'd105)) ? 1'b1 : 1'b0);

assign icmp_ln86_798_fu_330_p2 = (($signed(x_51_val) < $signed(18'd186)) ? 1'b1 : 1'b0);

assign icmp_ln86_799_fu_336_p2 = (($signed(x_3_val) < $signed(18'd70919)) ? 1'b1 : 1'b0);

assign icmp_ln86_800_fu_342_p2 = (($signed(x_39_val) < $signed(18'd1802)) ? 1'b1 : 1'b0);

assign icmp_ln86_801_fu_348_p2 = (($signed(x_18_val) < $signed(18'd9493)) ? 1'b1 : 1'b0);

assign icmp_ln86_802_fu_354_p2 = (($signed(x_1_val) < $signed(18'd255394)) ? 1'b1 : 1'b0);

assign icmp_ln86_803_fu_360_p2 = (($signed(x_51_val) < $signed(18'd147)) ? 1'b1 : 1'b0);

assign icmp_ln86_804_fu_366_p2 = (($signed(x_51_val) < $signed(18'd513)) ? 1'b1 : 1'b0);

assign icmp_ln86_805_fu_372_p2 = (($signed(x_10_val) < $signed(18'd839)) ? 1'b1 : 1'b0);

assign icmp_ln86_806_fu_378_p2 = (($signed(x_3_val) < $signed(18'd130279)) ? 1'b1 : 1'b0);

assign icmp_ln86_807_fu_384_p2 = (($signed(x_18_val) < $signed(18'd4716)) ? 1'b1 : 1'b0);

assign icmp_ln86_808_fu_390_p2 = (($signed(x_3_val) < $signed(18'd43987)) ? 1'b1 : 1'b0);

assign icmp_ln86_809_fu_396_p2 = (($signed(x_15_val) < $signed(18'd9)) ? 1'b1 : 1'b0);

assign icmp_ln86_810_fu_402_p2 = (($signed(x_31_val) < $signed(18'd3)) ? 1'b1 : 1'b0);

assign icmp_ln86_811_fu_408_p2 = (($signed(x_10_val) < $signed(18'd869)) ? 1'b1 : 1'b0);

assign icmp_ln86_812_fu_414_p2 = (($signed(x_7_val) < $signed(18'd742)) ? 1'b1 : 1'b0);

assign icmp_ln86_813_fu_420_p2 = (($signed(x_1_val) < $signed(18'd83340)) ? 1'b1 : 1'b0);

assign icmp_ln86_814_fu_426_p2 = (($signed(x_23_val) < $signed(18'd12)) ? 1'b1 : 1'b0);

assign icmp_ln86_815_fu_432_p2 = (($signed(x_33_val) < $signed(18'd707)) ? 1'b1 : 1'b0);

assign icmp_ln86_816_fu_438_p2 = (($signed(x_24_val) < $signed(18'd455)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_306_p2 = (($signed(x_23_val) < $signed(18'd83)) ? 1'b1 : 1'b0);

assign or_ln117_732_fu_666_p2 = (and_ln104_160_fu_540_p2 | and_ln102_764_fu_468_p2);

assign or_ln117_733_fu_684_p2 = (or_ln117_732_fu_666_p2 | and_ln102_775_fu_588_p2);

assign or_ln117_734_fu_698_p2 = (or_ln117_732_fu_666_p2 | and_ln102_769_fu_546_p2);

assign or_ln117_735_fu_712_p2 = (or_ln117_734_fu_698_p2 | and_ln102_776_fu_600_p2);

assign or_ln117_736_fu_726_p2 = (or_ln117_732_fu_666_p2 | and_ln102_765_fu_486_p2);

assign or_ln117_737_fu_744_p2 = (or_ln117_736_fu_726_p2 | and_ln102_777_fu_606_p2);

assign or_ln117_738_fu_758_p2 = (or_ln117_736_fu_726_p2 | and_ln102_770_fu_558_p2);

assign or_ln117_739_fu_772_p2 = (or_ln117_738_fu_758_p2 | and_ln102_778_fu_618_p2);

assign or_ln117_740_fu_786_p2 = (or_ln117_732_fu_666_p2 | and_ln102_fu_450_p2);

assign or_ln117_741_fu_800_p2 = (or_ln117_740_fu_786_p2 | and_ln102_779_fu_624_p2);

assign or_ln117_742_fu_814_p2 = (or_ln117_740_fu_786_p2 | and_ln102_771_fu_570_p2);

assign or_ln117_743_fu_828_p2 = (or_ln117_742_fu_814_p2 | and_ln102_780_fu_636_p2);

assign or_ln117_744_fu_842_p2 = (or_ln117_740_fu_786_p2 | and_ln102_766_fu_504_p2);

assign or_ln117_745_fu_922_p2 = (or_ln117_744_reg_1156 | and_ln102_781_fu_892_p2);

assign or_ln117_746_fu_927_p2 = (or_ln117_744_reg_1156 | and_ln102_772_fu_874_p2);

assign or_ln117_747_fu_939_p2 = (or_ln117_746_fu_927_p2 | and_ln102_782_fu_902_p2);

assign or_ln117_748_fu_868_p2 = (or_ln117_732_fu_666_p2 | icmp_ln86_fu_306_p2);

assign or_ln117_749_fu_961_p2 = (or_ln117_748_reg_1167 | and_ln102_783_fu_907_p2);

assign or_ln117_750_fu_973_p2 = (or_ln117_748_reg_1167 | and_ln102_773_fu_883_p2);

assign or_ln117_751_fu_986_p2 = (or_ln117_750_fu_973_p2 | and_ln102_784_fu_917_p2);

assign or_ln117_fu_652_p2 = (and_ln102_774_fu_582_p2 | and_ln102_764_fu_468_p2);

assign select_ln117_771_fu_672_p3 = ((or_ln117_fu_652_p2[0:0] == 1'b1) ? select_ln117_fu_658_p3 : 2'd3);

assign select_ln117_772_fu_690_p3 = ((or_ln117_732_fu_666_p2[0:0] == 1'b1) ? zext_ln117_87_fu_680_p1 : 3'd4);

assign select_ln117_773_fu_704_p3 = ((or_ln117_733_fu_684_p2[0:0] == 1'b1) ? select_ln117_772_fu_690_p3 : 3'd5);

assign select_ln117_774_fu_718_p3 = ((or_ln117_734_fu_698_p2[0:0] == 1'b1) ? select_ln117_773_fu_704_p3 : 3'd6);

assign select_ln117_775_fu_732_p3 = ((or_ln117_735_fu_712_p2[0:0] == 1'b1) ? select_ln117_774_fu_718_p3 : 3'd7);

assign select_ln117_776_fu_750_p3 = ((or_ln117_736_fu_726_p2[0:0] == 1'b1) ? zext_ln117_88_fu_740_p1 : 4'd8);

assign select_ln117_777_fu_764_p3 = ((or_ln117_737_fu_744_p2[0:0] == 1'b1) ? select_ln117_776_fu_750_p3 : 4'd9);

assign select_ln117_778_fu_778_p3 = ((or_ln117_738_fu_758_p2[0:0] == 1'b1) ? select_ln117_777_fu_764_p3 : 4'd10);

assign select_ln117_779_fu_792_p3 = ((or_ln117_739_fu_772_p2[0:0] == 1'b1) ? select_ln117_778_fu_778_p3 : 4'd11);

assign select_ln117_780_fu_806_p3 = ((or_ln117_740_fu_786_p2[0:0] == 1'b1) ? select_ln117_779_fu_792_p3 : 4'd12);

assign select_ln117_781_fu_820_p3 = ((or_ln117_741_fu_800_p2[0:0] == 1'b1) ? select_ln117_780_fu_806_p3 : 4'd13);

assign select_ln117_782_fu_834_p3 = ((or_ln117_742_fu_814_p2[0:0] == 1'b1) ? select_ln117_781_fu_820_p3 : 4'd14);

assign select_ln117_783_fu_848_p3 = ((or_ln117_743_fu_828_p2[0:0] == 1'b1) ? select_ln117_782_fu_834_p3 : 4'd15);

assign select_ln117_784_fu_860_p3 = ((or_ln117_744_fu_842_p2[0:0] == 1'b1) ? zext_ln117_89_fu_856_p1 : 5'd16);

assign select_ln117_785_fu_932_p3 = ((or_ln117_745_fu_922_p2[0:0] == 1'b1) ? select_ln117_784_reg_1162 : 5'd17);

assign select_ln117_786_fu_945_p3 = ((or_ln117_746_fu_927_p2[0:0] == 1'b1) ? select_ln117_785_fu_932_p3 : 5'd18);

assign select_ln117_787_fu_953_p3 = ((or_ln117_747_fu_939_p2[0:0] == 1'b1) ? select_ln117_786_fu_945_p3 : 5'd19);

assign select_ln117_788_fu_966_p3 = ((or_ln117_748_reg_1167[0:0] == 1'b1) ? select_ln117_787_fu_953_p3 : 5'd20);

assign select_ln117_789_fu_978_p3 = ((or_ln117_749_fu_961_p2[0:0] == 1'b1) ? select_ln117_788_fu_966_p3 : 5'd21);

assign select_ln117_790_fu_992_p3 = ((or_ln117_750_fu_973_p2[0:0] == 1'b1) ? select_ln117_789_fu_978_p3 : 5'd22);

assign select_ln117_fu_658_p3 = ((and_ln102_764_fu_468_p2[0:0] == 1'b1) ? zext_ln117_fu_648_p1 : 2'd2);

assign xor_ln104_382_fu_456_p2 = (icmp_ln86_795_fu_312_p2 ^ 1'd1);

assign xor_ln104_383_fu_474_p2 = (icmp_ln86_796_fu_318_p2 ^ 1'd1);

assign xor_ln104_384_fu_492_p2 = (icmp_ln86_797_fu_324_p2 ^ 1'd1);

assign xor_ln104_385_fu_510_p2 = (icmp_ln86_798_fu_330_p2 ^ 1'd1);

assign xor_ln104_386_fu_534_p2 = (icmp_ln86_800_fu_342_p2 ^ 1'd1);

assign xor_ln104_387_fu_552_p2 = (icmp_ln86_801_fu_348_p2 ^ 1'd1);

assign xor_ln104_388_fu_564_p2 = (icmp_ln86_802_fu_354_p2 ^ 1'd1);

assign xor_ln104_389_fu_576_p2 = (icmp_ln86_803_fu_360_p2 ^ 1'd1);

assign xor_ln104_390_fu_878_p2 = (icmp_ln86_804_reg_1112 ^ 1'd1);

assign xor_ln104_391_fu_887_p2 = (icmp_ln86_805_reg_1118 ^ 1'd1);

assign xor_ln104_fu_444_p2 = (icmp_ln86_fu_306_p2 ^ 1'd1);

assign xor_ln117_fu_642_p2 = (1'd1 ^ and_ln102_767_fu_522_p2);

assign zext_ln117_87_fu_680_p1 = select_ln117_771_fu_672_p3;

assign zext_ln117_88_fu_740_p1 = select_ln117_775_fu_732_p3;

assign zext_ln117_89_fu_856_p1 = select_ln117_783_fu_848_p3;

assign zext_ln117_fu_648_p1 = xor_ln117_fu_642_p2;

endmodule //my_prj_decision_function_30
