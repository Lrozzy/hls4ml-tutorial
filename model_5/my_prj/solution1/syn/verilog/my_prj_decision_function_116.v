// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_116 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_2_val,
        x_10_val,
        x_11_val,
        x_13_val,
        x_14_val,
        x_16_val,
        x_17_val,
        x_21_val,
        x_23_val,
        x_26_val,
        x_27_val,
        x_30_val,
        x_33_val,
        x_34_val,
        x_37_val,
        x_38_val,
        x_39_val,
        x_42_val,
        x_43_val,
        x_44_val,
        x_45_val,
        x_46_val,
        x_48_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_2_val;
input  [17:0] x_10_val;
input  [17:0] x_11_val;
input  [17:0] x_13_val;
input  [17:0] x_14_val;
input  [17:0] x_16_val;
input  [17:0] x_17_val;
input  [17:0] x_21_val;
input  [17:0] x_23_val;
input  [17:0] x_26_val;
input  [17:0] x_27_val;
input  [17:0] x_30_val;
input  [17:0] x_33_val;
input  [17:0] x_34_val;
input  [17:0] x_37_val;
input  [17:0] x_38_val;
input  [17:0] x_39_val;
input  [17:0] x_42_val;
input  [17:0] x_43_val;
input  [17:0] x_44_val;
input  [17:0] x_45_val;
input  [17:0] x_46_val;
input  [17:0] x_48_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_422_p2;
reg   [0:0] icmp_ln86_reg_1498;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_1595_fu_434_p2;
reg   [0:0] icmp_ln86_1595_reg_1507;
wire   [0:0] icmp_ln86_1598_fu_452_p2;
reg   [0:0] icmp_ln86_1598_reg_1513;
wire   [0:0] icmp_ln86_1599_fu_458_p2;
reg   [0:0] icmp_ln86_1599_reg_1519;
wire   [0:0] icmp_ln86_1604_fu_488_p2;
reg   [0:0] icmp_ln86_1604_reg_1525;
wire   [0:0] icmp_ln86_1605_fu_504_p2;
reg   [0:0] icmp_ln86_1605_reg_1531;
wire   [0:0] icmp_ln86_1606_fu_510_p2;
reg   [0:0] icmp_ln86_1606_reg_1537;
wire   [0:0] icmp_ln86_1607_fu_516_p2;
reg   [0:0] icmp_ln86_1607_reg_1543;
wire   [0:0] icmp_ln86_1616_fu_570_p2;
reg   [0:0] icmp_ln86_1616_reg_1549;
wire   [0:0] icmp_ln86_1617_fu_576_p2;
reg   [0:0] icmp_ln86_1617_reg_1554;
wire   [0:0] icmp_ln86_1618_fu_582_p2;
reg   [0:0] icmp_ln86_1618_reg_1559;
wire   [0:0] icmp_ln86_1619_fu_588_p2;
reg   [0:0] icmp_ln86_1619_reg_1564;
wire   [0:0] icmp_ln86_1620_fu_594_p2;
reg   [0:0] icmp_ln86_1620_reg_1569;
wire   [0:0] icmp_ln86_1621_fu_600_p2;
reg   [0:0] icmp_ln86_1621_reg_1574;
wire   [0:0] icmp_ln86_1622_fu_606_p2;
reg   [0:0] icmp_ln86_1622_reg_1579;
wire   [0:0] icmp_ln86_1623_fu_612_p2;
reg   [0:0] icmp_ln86_1623_reg_1584;
wire   [4:0] select_ln117_1558_fu_992_p3;
reg   [4:0] select_ln117_1558_reg_1589;
wire    ap_block_pp0_stage0;
wire   [12:0] tmp_fu_494_p4;
wire   [0:0] icmp_ln86_1594_fu_428_p2;
wire   [0:0] xor_ln104_763_fu_624_p2;
wire   [0:0] icmp_ln86_1596_fu_440_p2;
wire   [0:0] and_ln102_fu_618_p2;
wire   [0:0] xor_ln104_765_fu_642_p2;
wire   [0:0] icmp_ln86_1597_fu_446_p2;
wire   [0:0] and_ln104_fu_630_p2;
wire   [0:0] xor_ln104_766_fu_660_p2;
wire   [0:0] icmp_ln86_1600_fu_464_p2;
wire   [0:0] and_ln102_1766_fu_636_p2;
wire   [0:0] icmp_ln86_1601_fu_470_p2;
wire   [0:0] and_ln104_303_fu_648_p2;
wire   [0:0] icmp_ln86_1602_fu_476_p2;
wire   [0:0] and_ln102_1767_fu_654_p2;
wire   [0:0] icmp_ln86_1603_fu_482_p2;
wire   [0:0] and_ln104_304_fu_666_p2;
wire   [0:0] icmp_ln86_1608_fu_522_p2;
wire   [0:0] and_ln102_1770_fu_672_p2;
wire   [0:0] icmp_ln86_1609_fu_528_p2;
wire   [0:0] xor_ln104_769_fu_678_p2;
wire   [0:0] and_ln102_1779_fu_726_p2;
wire   [0:0] icmp_ln86_1610_fu_534_p2;
wire   [0:0] and_ln102_1771_fu_684_p2;
wire   [0:0] icmp_ln86_1611_fu_540_p2;
wire   [0:0] xor_ln104_770_fu_690_p2;
wire   [0:0] and_ln102_1782_fu_744_p2;
wire   [0:0] icmp_ln86_1612_fu_546_p2;
wire   [0:0] and_ln102_1772_fu_696_p2;
wire   [0:0] icmp_ln86_1613_fu_552_p2;
wire   [0:0] xor_ln104_771_fu_702_p2;
wire   [0:0] and_ln102_1785_fu_762_p2;
wire   [0:0] icmp_ln86_1614_fu_558_p2;
wire   [0:0] and_ln102_1773_fu_708_p2;
wire   [0:0] icmp_ln86_1615_fu_564_p2;
wire   [0:0] xor_ln104_772_fu_714_p2;
wire   [0:0] and_ln102_1788_fu_780_p2;
wire   [0:0] and_ln102_1778_fu_720_p2;
wire   [0:0] xor_ln117_fu_792_p2;
wire   [0:0] and_ln102_1780_fu_732_p2;
wire   [1:0] zext_ln117_fu_798_p1;
wire   [0:0] or_ln117_fu_802_p2;
wire   [1:0] select_ln117_fu_808_p3;
wire   [1:0] select_ln117_1545_fu_816_p3;
wire   [0:0] and_ln102_1781_fu_738_p2;
wire   [2:0] zext_ln117_172_fu_824_p1;
wire   [0:0] or_ln117_1440_fu_828_p2;
wire   [2:0] select_ln117_1546_fu_834_p3;
wire   [0:0] or_ln117_1441_fu_842_p2;
wire   [0:0] and_ln102_1783_fu_750_p2;
wire   [2:0] select_ln117_1547_fu_848_p3;
wire   [0:0] or_ln117_1442_fu_856_p2;
wire   [2:0] select_ln117_1548_fu_862_p3;
wire   [2:0] select_ln117_1549_fu_870_p3;
wire   [0:0] and_ln102_1784_fu_756_p2;
wire   [3:0] zext_ln117_173_fu_878_p1;
wire   [0:0] or_ln117_1443_fu_882_p2;
wire   [3:0] select_ln117_1550_fu_888_p3;
wire   [0:0] or_ln117_1444_fu_896_p2;
wire   [0:0] and_ln102_1786_fu_768_p2;
wire   [3:0] select_ln117_1551_fu_902_p3;
wire   [0:0] or_ln117_1445_fu_910_p2;
wire   [3:0] select_ln117_1552_fu_916_p3;
wire   [0:0] or_ln117_1446_fu_924_p2;
wire   [0:0] and_ln102_1787_fu_774_p2;
wire   [3:0] select_ln117_1553_fu_930_p3;
wire   [0:0] or_ln117_1447_fu_938_p2;
wire   [3:0] select_ln117_1554_fu_944_p3;
wire   [0:0] or_ln117_1448_fu_952_p2;
wire   [0:0] and_ln102_1789_fu_786_p2;
wire   [3:0] select_ln117_1555_fu_958_p3;
wire   [0:0] or_ln117_1449_fu_966_p2;
wire   [3:0] select_ln117_1556_fu_972_p3;
wire   [3:0] select_ln117_1557_fu_980_p3;
wire   [4:0] zext_ln117_174_fu_988_p1;
wire   [0:0] xor_ln104_fu_1000_p2;
wire   [0:0] xor_ln104_764_fu_1010_p2;
wire   [0:0] and_ln102_1765_fu_1005_p2;
wire   [0:0] xor_ln104_767_fu_1026_p2;
wire   [0:0] and_ln104_302_fu_1015_p2;
wire   [0:0] xor_ln104_768_fu_1042_p2;
wire   [0:0] and_ln102_1768_fu_1021_p2;
wire   [0:0] and_ln104_305_fu_1031_p2;
wire   [0:0] and_ln102_1769_fu_1037_p2;
wire   [0:0] and_ln104_306_fu_1047_p2;
wire   [0:0] and_ln102_1774_fu_1053_p2;
wire   [0:0] xor_ln104_773_fu_1058_p2;
wire   [0:0] and_ln102_1791_fu_1098_p2;
wire   [0:0] and_ln102_1775_fu_1063_p2;
wire   [0:0] xor_ln104_774_fu_1068_p2;
wire   [0:0] and_ln102_1794_fu_1114_p2;
wire   [0:0] and_ln102_1776_fu_1073_p2;
wire   [0:0] xor_ln104_775_fu_1078_p2;
wire   [0:0] and_ln102_1797_fu_1130_p2;
wire   [0:0] and_ln102_1777_fu_1083_p2;
wire   [0:0] xor_ln104_776_fu_1088_p2;
wire   [0:0] and_ln102_1800_fu_1146_p2;
wire   [0:0] and_ln102_1790_fu_1093_p2;
wire   [0:0] or_ln117_1450_fu_1157_p2;
wire   [0:0] or_ln117_1451_fu_1162_p2;
wire   [0:0] and_ln102_1792_fu_1103_p2;
wire   [4:0] select_ln117_1559_fu_1167_p3;
wire   [0:0] or_ln117_1452_fu_1174_p2;
wire   [4:0] select_ln117_1560_fu_1180_p3;
wire   [0:0] or_ln117_1453_fu_1188_p2;
wire   [0:0] and_ln102_1793_fu_1109_p2;
wire   [4:0] select_ln117_1561_fu_1193_p3;
wire   [0:0] or_ln117_1454_fu_1201_p2;
wire   [4:0] select_ln117_1562_fu_1207_p3;
wire   [0:0] or_ln117_1455_fu_1215_p2;
wire   [0:0] and_ln102_1795_fu_1119_p2;
wire   [4:0] select_ln117_1563_fu_1221_p3;
wire   [0:0] or_ln117_1456_fu_1229_p2;
wire   [4:0] select_ln117_1564_fu_1235_p3;
wire   [0:0] or_ln117_1457_fu_1243_p2;
wire   [0:0] and_ln102_1796_fu_1125_p2;
wire   [4:0] select_ln117_1565_fu_1248_p3;
wire   [0:0] or_ln117_1458_fu_1256_p2;
wire   [4:0] select_ln117_1566_fu_1262_p3;
wire   [0:0] or_ln117_1459_fu_1270_p2;
wire   [0:0] and_ln102_1798_fu_1135_p2;
wire   [4:0] select_ln117_1567_fu_1276_p3;
wire   [0:0] or_ln117_1460_fu_1284_p2;
wire   [4:0] select_ln117_1568_fu_1290_p3;
wire   [0:0] or_ln117_1461_fu_1298_p2;
wire   [0:0] and_ln102_1799_fu_1141_p2;
wire   [4:0] select_ln117_1569_fu_1304_p3;
wire   [0:0] or_ln117_1462_fu_1312_p2;
wire   [4:0] select_ln117_1570_fu_1318_p3;
wire   [0:0] or_ln117_1463_fu_1326_p2;
wire   [0:0] and_ln102_1801_fu_1151_p2;
wire   [4:0] select_ln117_1571_fu_1332_p3;
wire   [0:0] or_ln117_1464_fu_1340_p2;
wire   [4:0] select_ln117_1572_fu_1346_p3;
wire   [11:0] agg_result_fu_1362_p65;
wire   [4:0] agg_result_fu_1362_p66;
wire   [11:0] agg_result_fu_1362_p67;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1362_p1;
wire   [4:0] agg_result_fu_1362_p3;
wire   [4:0] agg_result_fu_1362_p5;
wire   [4:0] agg_result_fu_1362_p7;
wire   [4:0] agg_result_fu_1362_p9;
wire   [4:0] agg_result_fu_1362_p11;
wire   [4:0] agg_result_fu_1362_p13;
wire   [4:0] agg_result_fu_1362_p15;
wire   [4:0] agg_result_fu_1362_p17;
wire   [4:0] agg_result_fu_1362_p19;
wire   [4:0] agg_result_fu_1362_p21;
wire   [4:0] agg_result_fu_1362_p23;
wire   [4:0] agg_result_fu_1362_p25;
wire   [4:0] agg_result_fu_1362_p27;
wire   [4:0] agg_result_fu_1362_p29;
wire   [4:0] agg_result_fu_1362_p31;
wire  signed [4:0] agg_result_fu_1362_p33;
wire  signed [4:0] agg_result_fu_1362_p35;
wire  signed [4:0] agg_result_fu_1362_p37;
wire  signed [4:0] agg_result_fu_1362_p39;
wire  signed [4:0] agg_result_fu_1362_p41;
wire  signed [4:0] agg_result_fu_1362_p43;
wire  signed [4:0] agg_result_fu_1362_p45;
wire  signed [4:0] agg_result_fu_1362_p47;
wire  signed [4:0] agg_result_fu_1362_p49;
wire  signed [4:0] agg_result_fu_1362_p51;
wire  signed [4:0] agg_result_fu_1362_p53;
wire  signed [4:0] agg_result_fu_1362_p55;
wire  signed [4:0] agg_result_fu_1362_p57;
wire  signed [4:0] agg_result_fu_1362_p59;
wire  signed [4:0] agg_result_fu_1362_p61;
wire  signed [4:0] agg_result_fu_1362_p63;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_65_5_12_1_1_x34 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 12 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 12 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 12 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 12 ),
    .CASE31( 5'h1F ),
    .din31_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_65_5_12_1_1_x34_U2208(
    .din0(12'd4079),
    .din1(12'd410),
    .din2(12'd4027),
    .din3(12'd606),
    .din4(12'd3487),
    .din5(12'd4081),
    .din6(12'd488),
    .din7(12'd3708),
    .din8(12'd1597),
    .din9(12'd375),
    .din10(12'd577),
    .din11(12'd146),
    .din12(12'd4063),
    .din13(12'd1339),
    .din14(12'd172),
    .din15(12'd677),
    .din16(12'd1177),
    .din17(12'd4043),
    .din18(12'd353),
    .din19(12'd1719),
    .din20(12'd3959),
    .din21(12'd1255),
    .din22(12'd3318),
    .din23(12'd4022),
    .din24(12'd47),
    .din25(12'd245),
    .din26(12'd3709),
    .din27(12'd146),
    .din28(12'd3928),
    .din29(12'd120),
    .din30(12'd3887),
    .din31(12'd4093),
    .def(agg_result_fu_1362_p65),
    .sel(agg_result_fu_1362_p66),
    .dout(agg_result_fu_1362_p67)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_1595_reg_1507 <= icmp_ln86_1595_fu_434_p2;
        icmp_ln86_1598_reg_1513 <= icmp_ln86_1598_fu_452_p2;
        icmp_ln86_1599_reg_1519 <= icmp_ln86_1599_fu_458_p2;
        icmp_ln86_1604_reg_1525 <= icmp_ln86_1604_fu_488_p2;
        icmp_ln86_1605_reg_1531 <= icmp_ln86_1605_fu_504_p2;
        icmp_ln86_1606_reg_1537 <= icmp_ln86_1606_fu_510_p2;
        icmp_ln86_1607_reg_1543 <= icmp_ln86_1607_fu_516_p2;
        icmp_ln86_1616_reg_1549 <= icmp_ln86_1616_fu_570_p2;
        icmp_ln86_1617_reg_1554 <= icmp_ln86_1617_fu_576_p2;
        icmp_ln86_1618_reg_1559 <= icmp_ln86_1618_fu_582_p2;
        icmp_ln86_1619_reg_1564 <= icmp_ln86_1619_fu_588_p2;
        icmp_ln86_1620_reg_1569 <= icmp_ln86_1620_fu_594_p2;
        icmp_ln86_1621_reg_1574 <= icmp_ln86_1621_fu_600_p2;
        icmp_ln86_1622_reg_1579 <= icmp_ln86_1622_fu_606_p2;
        icmp_ln86_1623_reg_1584 <= icmp_ln86_1623_fu_612_p2;
        icmp_ln86_reg_1498 <= icmp_ln86_fu_422_p2;
        select_ln117_1558_reg_1589 <= select_ln117_1558_fu_992_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1362_p65 = 'bx;

assign agg_result_fu_1362_p66 = ((or_ln117_1464_fu_1340_p2[0:0] == 1'b1) ? select_ln117_1572_fu_1346_p3 : 5'd31);

assign and_ln102_1765_fu_1005_p2 = (xor_ln104_fu_1000_p2 & icmp_ln86_1595_reg_1507);

assign and_ln102_1766_fu_636_p2 = (icmp_ln86_1596_fu_440_p2 & and_ln102_fu_618_p2);

assign and_ln102_1767_fu_654_p2 = (icmp_ln86_1597_fu_446_p2 & and_ln104_fu_630_p2);

assign and_ln102_1768_fu_1021_p2 = (icmp_ln86_1598_reg_1513 & and_ln102_1765_fu_1005_p2);

assign and_ln102_1769_fu_1037_p2 = (icmp_ln86_1599_reg_1519 & and_ln104_302_fu_1015_p2);

assign and_ln102_1770_fu_672_p2 = (icmp_ln86_1600_fu_464_p2 & and_ln102_1766_fu_636_p2);

assign and_ln102_1771_fu_684_p2 = (icmp_ln86_1601_fu_470_p2 & and_ln104_303_fu_648_p2);

assign and_ln102_1772_fu_696_p2 = (icmp_ln86_1602_fu_476_p2 & and_ln102_1767_fu_654_p2);

assign and_ln102_1773_fu_708_p2 = (icmp_ln86_1603_fu_482_p2 & and_ln104_304_fu_666_p2);

assign and_ln102_1774_fu_1053_p2 = (icmp_ln86_1604_reg_1525 & and_ln102_1768_fu_1021_p2);

assign and_ln102_1775_fu_1063_p2 = (icmp_ln86_1605_reg_1531 & and_ln104_305_fu_1031_p2);

assign and_ln102_1776_fu_1073_p2 = (icmp_ln86_1606_reg_1537 & and_ln102_1769_fu_1037_p2);

assign and_ln102_1777_fu_1083_p2 = (icmp_ln86_1607_reg_1543 & and_ln104_306_fu_1047_p2);

assign and_ln102_1778_fu_720_p2 = (icmp_ln86_1608_fu_522_p2 & and_ln102_1770_fu_672_p2);

assign and_ln102_1779_fu_726_p2 = (xor_ln104_769_fu_678_p2 & icmp_ln86_1609_fu_528_p2);

assign and_ln102_1780_fu_732_p2 = (and_ln102_1779_fu_726_p2 & and_ln102_1766_fu_636_p2);

assign and_ln102_1781_fu_738_p2 = (icmp_ln86_1610_fu_534_p2 & and_ln102_1771_fu_684_p2);

assign and_ln102_1782_fu_744_p2 = (xor_ln104_770_fu_690_p2 & icmp_ln86_1611_fu_540_p2);

assign and_ln102_1783_fu_750_p2 = (and_ln104_303_fu_648_p2 & and_ln102_1782_fu_744_p2);

assign and_ln102_1784_fu_756_p2 = (icmp_ln86_1612_fu_546_p2 & and_ln102_1772_fu_696_p2);

assign and_ln102_1785_fu_762_p2 = (xor_ln104_771_fu_702_p2 & icmp_ln86_1613_fu_552_p2);

assign and_ln102_1786_fu_768_p2 = (and_ln102_1785_fu_762_p2 & and_ln102_1767_fu_654_p2);

assign and_ln102_1787_fu_774_p2 = (icmp_ln86_1614_fu_558_p2 & and_ln102_1773_fu_708_p2);

assign and_ln102_1788_fu_780_p2 = (xor_ln104_772_fu_714_p2 & icmp_ln86_1615_fu_564_p2);

assign and_ln102_1789_fu_786_p2 = (and_ln104_304_fu_666_p2 & and_ln102_1788_fu_780_p2);

assign and_ln102_1790_fu_1093_p2 = (icmp_ln86_1616_reg_1549 & and_ln102_1774_fu_1053_p2);

assign and_ln102_1791_fu_1098_p2 = (xor_ln104_773_fu_1058_p2 & icmp_ln86_1617_reg_1554);

assign and_ln102_1792_fu_1103_p2 = (and_ln102_1791_fu_1098_p2 & and_ln102_1768_fu_1021_p2);

assign and_ln102_1793_fu_1109_p2 = (icmp_ln86_1618_reg_1559 & and_ln102_1775_fu_1063_p2);

assign and_ln102_1794_fu_1114_p2 = (xor_ln104_774_fu_1068_p2 & icmp_ln86_1619_reg_1564);

assign and_ln102_1795_fu_1119_p2 = (and_ln104_305_fu_1031_p2 & and_ln102_1794_fu_1114_p2);

assign and_ln102_1796_fu_1125_p2 = (icmp_ln86_1620_reg_1569 & and_ln102_1776_fu_1073_p2);

assign and_ln102_1797_fu_1130_p2 = (xor_ln104_775_fu_1078_p2 & icmp_ln86_1621_reg_1574);

assign and_ln102_1798_fu_1135_p2 = (and_ln102_1797_fu_1130_p2 & and_ln102_1769_fu_1037_p2);

assign and_ln102_1799_fu_1141_p2 = (icmp_ln86_1622_reg_1579 & and_ln102_1777_fu_1083_p2);

assign and_ln102_1800_fu_1146_p2 = (xor_ln104_776_fu_1088_p2 & icmp_ln86_1623_reg_1584);

assign and_ln102_1801_fu_1151_p2 = (and_ln104_306_fu_1047_p2 & and_ln102_1800_fu_1146_p2);

assign and_ln102_fu_618_p2 = (icmp_ln86_fu_422_p2 & icmp_ln86_1594_fu_428_p2);

assign and_ln104_302_fu_1015_p2 = (xor_ln104_fu_1000_p2 & xor_ln104_764_fu_1010_p2);

assign and_ln104_303_fu_648_p2 = (xor_ln104_765_fu_642_p2 & and_ln102_fu_618_p2);

assign and_ln104_304_fu_666_p2 = (xor_ln104_766_fu_660_p2 & and_ln104_fu_630_p2);

assign and_ln104_305_fu_1031_p2 = (xor_ln104_767_fu_1026_p2 & and_ln102_1765_fu_1005_p2);

assign and_ln104_306_fu_1047_p2 = (xor_ln104_768_fu_1042_p2 & and_ln104_302_fu_1015_p2);

assign and_ln104_fu_630_p2 = (xor_ln104_763_fu_624_p2 & icmp_ln86_fu_422_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1362_p67;

assign icmp_ln86_1594_fu_428_p2 = (($signed(x_42_val) < $signed(18'd101)) ? 1'b1 : 1'b0);

assign icmp_ln86_1595_fu_434_p2 = (($signed(x_13_val) < $signed(18'd357)) ? 1'b1 : 1'b0);

assign icmp_ln86_1596_fu_440_p2 = (($signed(x_27_val) < $signed(18'd10256)) ? 1'b1 : 1'b0);

assign icmp_ln86_1597_fu_446_p2 = (($signed(x_45_val) < $signed(18'd206)) ? 1'b1 : 1'b0);

assign icmp_ln86_1598_fu_452_p2 = (($signed(x_10_val) < $signed(18'd701)) ? 1'b1 : 1'b0);

assign icmp_ln86_1599_fu_458_p2 = (($signed(x_34_val) < $signed(18'd369)) ? 1'b1 : 1'b0);

assign icmp_ln86_1600_fu_464_p2 = (($signed(x_26_val) < $signed(18'd79569)) ? 1'b1 : 1'b0);

assign icmp_ln86_1601_fu_470_p2 = (($signed(x_21_val) < $signed(18'd121)) ? 1'b1 : 1'b0);

assign icmp_ln86_1602_fu_476_p2 = (($signed(x_16_val) < $signed(18'd42)) ? 1'b1 : 1'b0);

assign icmp_ln86_1603_fu_482_p2 = (($signed(x_33_val) < $signed(18'd937)) ? 1'b1 : 1'b0);

assign icmp_ln86_1604_fu_488_p2 = (($signed(x_46_val) < $signed(18'd200)) ? 1'b1 : 1'b0);

assign icmp_ln86_1605_fu_504_p2 = (($signed(tmp_fu_494_p4) < $signed(13'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_1606_fu_510_p2 = (($signed(x_39_val) < $signed(18'd2300)) ? 1'b1 : 1'b0);

assign icmp_ln86_1607_fu_516_p2 = (($signed(x_42_val) < $signed(18'd127)) ? 1'b1 : 1'b0);

assign icmp_ln86_1608_fu_522_p2 = (($signed(x_38_val) < $signed(18'd5)) ? 1'b1 : 1'b0);

assign icmp_ln86_1609_fu_528_p2 = (($signed(x_46_val) < $signed(18'd23)) ? 1'b1 : 1'b0);

assign icmp_ln86_1610_fu_534_p2 = (($signed(x_30_val) < $signed(18'd393)) ? 1'b1 : 1'b0);

assign icmp_ln86_1611_fu_540_p2 = (($signed(x_11_val) < $signed(18'd134)) ? 1'b1 : 1'b0);

assign icmp_ln86_1612_fu_546_p2 = (($signed(x_43_val) < $signed(18'd49)) ? 1'b1 : 1'b0);

assign icmp_ln86_1613_fu_552_p2 = (($signed(x_44_val) < $signed(18'd12)) ? 1'b1 : 1'b0);

assign icmp_ln86_1614_fu_558_p2 = (($signed(x_14_val) < $signed(18'd75)) ? 1'b1 : 1'b0);

assign icmp_ln86_1615_fu_564_p2 = (($signed(x_2_val) < $signed(18'd493)) ? 1'b1 : 1'b0);

assign icmp_ln86_1616_fu_570_p2 = (($signed(x_17_val) < $signed(18'd9)) ? 1'b1 : 1'b0);

assign icmp_ln86_1617_fu_576_p2 = (($signed(x_10_val) < $signed(18'd691)) ? 1'b1 : 1'b0);

assign icmp_ln86_1618_fu_582_p2 = (($signed(x_39_val) < $signed(18'd3020)) ? 1'b1 : 1'b0);

assign icmp_ln86_1619_fu_588_p2 = (($signed(x_13_val) < $signed(18'd353)) ? 1'b1 : 1'b0);

assign icmp_ln86_1620_fu_594_p2 = (($signed(x_48_val) < $signed(18'd7992)) ? 1'b1 : 1'b0);

assign icmp_ln86_1621_fu_600_p2 = (($signed(x_17_val) < $signed(18'd48)) ? 1'b1 : 1'b0);

assign icmp_ln86_1622_fu_606_p2 = (($signed(x_37_val) < $signed(18'd68)) ? 1'b1 : 1'b0);

assign icmp_ln86_1623_fu_612_p2 = (($signed(x_48_val) < $signed(18'd2374)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_422_p2 = (($signed(x_43_val) < $signed(18'd55)) ? 1'b1 : 1'b0);

assign or_ln117_1440_fu_828_p2 = (and_ln102_1781_fu_738_p2 | and_ln102_1766_fu_636_p2);

assign or_ln117_1441_fu_842_p2 = (and_ln102_1771_fu_684_p2 | and_ln102_1766_fu_636_p2);

assign or_ln117_1442_fu_856_p2 = (or_ln117_1441_fu_842_p2 | and_ln102_1783_fu_750_p2);

assign or_ln117_1443_fu_882_p2 = (and_ln102_fu_618_p2 | and_ln102_1784_fu_756_p2);

assign or_ln117_1444_fu_896_p2 = (and_ln102_fu_618_p2 | and_ln102_1772_fu_696_p2);

assign or_ln117_1445_fu_910_p2 = (or_ln117_1444_fu_896_p2 | and_ln102_1786_fu_768_p2);

assign or_ln117_1446_fu_924_p2 = (and_ln102_fu_618_p2 | and_ln102_1767_fu_654_p2);

assign or_ln117_1447_fu_938_p2 = (or_ln117_1446_fu_924_p2 | and_ln102_1787_fu_774_p2);

assign or_ln117_1448_fu_952_p2 = (or_ln117_1446_fu_924_p2 | and_ln102_1773_fu_708_p2);

assign or_ln117_1449_fu_966_p2 = (or_ln117_1448_fu_952_p2 | and_ln102_1789_fu_786_p2);

assign or_ln117_1450_fu_1157_p2 = (icmp_ln86_reg_1498 | and_ln102_1790_fu_1093_p2);

assign or_ln117_1451_fu_1162_p2 = (icmp_ln86_reg_1498 | and_ln102_1774_fu_1053_p2);

assign or_ln117_1452_fu_1174_p2 = (or_ln117_1451_fu_1162_p2 | and_ln102_1792_fu_1103_p2);

assign or_ln117_1453_fu_1188_p2 = (icmp_ln86_reg_1498 | and_ln102_1768_fu_1021_p2);

assign or_ln117_1454_fu_1201_p2 = (or_ln117_1453_fu_1188_p2 | and_ln102_1793_fu_1109_p2);

assign or_ln117_1455_fu_1215_p2 = (or_ln117_1453_fu_1188_p2 | and_ln102_1775_fu_1063_p2);

assign or_ln117_1456_fu_1229_p2 = (or_ln117_1455_fu_1215_p2 | and_ln102_1795_fu_1119_p2);

assign or_ln117_1457_fu_1243_p2 = (icmp_ln86_reg_1498 | and_ln102_1765_fu_1005_p2);

assign or_ln117_1458_fu_1256_p2 = (or_ln117_1457_fu_1243_p2 | and_ln102_1796_fu_1125_p2);

assign or_ln117_1459_fu_1270_p2 = (or_ln117_1457_fu_1243_p2 | and_ln102_1776_fu_1073_p2);

assign or_ln117_1460_fu_1284_p2 = (or_ln117_1459_fu_1270_p2 | and_ln102_1798_fu_1135_p2);

assign or_ln117_1461_fu_1298_p2 = (or_ln117_1457_fu_1243_p2 | and_ln102_1769_fu_1037_p2);

assign or_ln117_1462_fu_1312_p2 = (or_ln117_1461_fu_1298_p2 | and_ln102_1799_fu_1141_p2);

assign or_ln117_1463_fu_1326_p2 = (or_ln117_1461_fu_1298_p2 | and_ln102_1777_fu_1083_p2);

assign or_ln117_1464_fu_1340_p2 = (or_ln117_1463_fu_1326_p2 | and_ln102_1801_fu_1151_p2);

assign or_ln117_fu_802_p2 = (and_ln102_1780_fu_732_p2 | and_ln102_1770_fu_672_p2);

assign select_ln117_1545_fu_816_p3 = ((or_ln117_fu_802_p2[0:0] == 1'b1) ? select_ln117_fu_808_p3 : 2'd3);

assign select_ln117_1546_fu_834_p3 = ((and_ln102_1766_fu_636_p2[0:0] == 1'b1) ? zext_ln117_172_fu_824_p1 : 3'd4);

assign select_ln117_1547_fu_848_p3 = ((or_ln117_1440_fu_828_p2[0:0] == 1'b1) ? select_ln117_1546_fu_834_p3 : 3'd5);

assign select_ln117_1548_fu_862_p3 = ((or_ln117_1441_fu_842_p2[0:0] == 1'b1) ? select_ln117_1547_fu_848_p3 : 3'd6);

assign select_ln117_1549_fu_870_p3 = ((or_ln117_1442_fu_856_p2[0:0] == 1'b1) ? select_ln117_1548_fu_862_p3 : 3'd7);

assign select_ln117_1550_fu_888_p3 = ((and_ln102_fu_618_p2[0:0] == 1'b1) ? zext_ln117_173_fu_878_p1 : 4'd8);

assign select_ln117_1551_fu_902_p3 = ((or_ln117_1443_fu_882_p2[0:0] == 1'b1) ? select_ln117_1550_fu_888_p3 : 4'd9);

assign select_ln117_1552_fu_916_p3 = ((or_ln117_1444_fu_896_p2[0:0] == 1'b1) ? select_ln117_1551_fu_902_p3 : 4'd10);

assign select_ln117_1553_fu_930_p3 = ((or_ln117_1445_fu_910_p2[0:0] == 1'b1) ? select_ln117_1552_fu_916_p3 : 4'd11);

assign select_ln117_1554_fu_944_p3 = ((or_ln117_1446_fu_924_p2[0:0] == 1'b1) ? select_ln117_1553_fu_930_p3 : 4'd12);

assign select_ln117_1555_fu_958_p3 = ((or_ln117_1447_fu_938_p2[0:0] == 1'b1) ? select_ln117_1554_fu_944_p3 : 4'd13);

assign select_ln117_1556_fu_972_p3 = ((or_ln117_1448_fu_952_p2[0:0] == 1'b1) ? select_ln117_1555_fu_958_p3 : 4'd14);

assign select_ln117_1557_fu_980_p3 = ((or_ln117_1449_fu_966_p2[0:0] == 1'b1) ? select_ln117_1556_fu_972_p3 : 4'd15);

assign select_ln117_1558_fu_992_p3 = ((icmp_ln86_fu_422_p2[0:0] == 1'b1) ? zext_ln117_174_fu_988_p1 : 5'd16);

assign select_ln117_1559_fu_1167_p3 = ((or_ln117_1450_fu_1157_p2[0:0] == 1'b1) ? select_ln117_1558_reg_1589 : 5'd17);

assign select_ln117_1560_fu_1180_p3 = ((or_ln117_1451_fu_1162_p2[0:0] == 1'b1) ? select_ln117_1559_fu_1167_p3 : 5'd18);

assign select_ln117_1561_fu_1193_p3 = ((or_ln117_1452_fu_1174_p2[0:0] == 1'b1) ? select_ln117_1560_fu_1180_p3 : 5'd19);

assign select_ln117_1562_fu_1207_p3 = ((or_ln117_1453_fu_1188_p2[0:0] == 1'b1) ? select_ln117_1561_fu_1193_p3 : 5'd20);

assign select_ln117_1563_fu_1221_p3 = ((or_ln117_1454_fu_1201_p2[0:0] == 1'b1) ? select_ln117_1562_fu_1207_p3 : 5'd21);

assign select_ln117_1564_fu_1235_p3 = ((or_ln117_1455_fu_1215_p2[0:0] == 1'b1) ? select_ln117_1563_fu_1221_p3 : 5'd22);

assign select_ln117_1565_fu_1248_p3 = ((or_ln117_1456_fu_1229_p2[0:0] == 1'b1) ? select_ln117_1564_fu_1235_p3 : 5'd23);

assign select_ln117_1566_fu_1262_p3 = ((or_ln117_1457_fu_1243_p2[0:0] == 1'b1) ? select_ln117_1565_fu_1248_p3 : 5'd24);

assign select_ln117_1567_fu_1276_p3 = ((or_ln117_1458_fu_1256_p2[0:0] == 1'b1) ? select_ln117_1566_fu_1262_p3 : 5'd25);

assign select_ln117_1568_fu_1290_p3 = ((or_ln117_1459_fu_1270_p2[0:0] == 1'b1) ? select_ln117_1567_fu_1276_p3 : 5'd26);

assign select_ln117_1569_fu_1304_p3 = ((or_ln117_1460_fu_1284_p2[0:0] == 1'b1) ? select_ln117_1568_fu_1290_p3 : 5'd27);

assign select_ln117_1570_fu_1318_p3 = ((or_ln117_1461_fu_1298_p2[0:0] == 1'b1) ? select_ln117_1569_fu_1304_p3 : 5'd28);

assign select_ln117_1571_fu_1332_p3 = ((or_ln117_1462_fu_1312_p2[0:0] == 1'b1) ? select_ln117_1570_fu_1318_p3 : 5'd29);

assign select_ln117_1572_fu_1346_p3 = ((or_ln117_1463_fu_1326_p2[0:0] == 1'b1) ? select_ln117_1571_fu_1332_p3 : 5'd30);

assign select_ln117_fu_808_p3 = ((and_ln102_1770_fu_672_p2[0:0] == 1'b1) ? zext_ln117_fu_798_p1 : 2'd2);

assign tmp_fu_494_p4 = {{x_23_val[17:5]}};

assign xor_ln104_763_fu_624_p2 = (icmp_ln86_1594_fu_428_p2 ^ 1'd1);

assign xor_ln104_764_fu_1010_p2 = (icmp_ln86_1595_reg_1507 ^ 1'd1);

assign xor_ln104_765_fu_642_p2 = (icmp_ln86_1596_fu_440_p2 ^ 1'd1);

assign xor_ln104_766_fu_660_p2 = (icmp_ln86_1597_fu_446_p2 ^ 1'd1);

assign xor_ln104_767_fu_1026_p2 = (icmp_ln86_1598_reg_1513 ^ 1'd1);

assign xor_ln104_768_fu_1042_p2 = (icmp_ln86_1599_reg_1519 ^ 1'd1);

assign xor_ln104_769_fu_678_p2 = (icmp_ln86_1600_fu_464_p2 ^ 1'd1);

assign xor_ln104_770_fu_690_p2 = (icmp_ln86_1601_fu_470_p2 ^ 1'd1);

assign xor_ln104_771_fu_702_p2 = (icmp_ln86_1602_fu_476_p2 ^ 1'd1);

assign xor_ln104_772_fu_714_p2 = (icmp_ln86_1603_fu_482_p2 ^ 1'd1);

assign xor_ln104_773_fu_1058_p2 = (icmp_ln86_1604_reg_1525 ^ 1'd1);

assign xor_ln104_774_fu_1068_p2 = (icmp_ln86_1605_reg_1531 ^ 1'd1);

assign xor_ln104_775_fu_1078_p2 = (icmp_ln86_1606_reg_1537 ^ 1'd1);

assign xor_ln104_776_fu_1088_p2 = (icmp_ln86_1607_reg_1543 ^ 1'd1);

assign xor_ln104_fu_1000_p2 = (icmp_ln86_reg_1498 ^ 1'd1);

assign xor_ln117_fu_792_p2 = (1'd1 ^ and_ln102_1778_fu_720_p2);

assign zext_ln117_172_fu_824_p1 = select_ln117_1545_fu_816_p3;

assign zext_ln117_173_fu_878_p1 = select_ln117_1549_fu_870_p3;

assign zext_ln117_174_fu_988_p1 = select_ln117_1557_fu_980_p3;

assign zext_ln117_fu_798_p1 = xor_ln117_fu_792_p2;

endmodule //my_prj_decision_function_116
