// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_57 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_2_val,
        x_3_val,
        x_7_val,
        x_10_val,
        x_11_val,
        x_12_val,
        x_13_val,
        x_17_val,
        x_22_val,
        x_23_val,
        x_24_val,
        x_25_val,
        x_27_val,
        x_35_val,
        x_36_val,
        x_40_val,
        x_47_val,
        x_50_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_2_val;
input  [17:0] x_3_val;
input  [17:0] x_7_val;
input  [17:0] x_10_val;
input  [17:0] x_11_val;
input  [17:0] x_12_val;
input  [17:0] x_13_val;
input  [17:0] x_17_val;
input  [17:0] x_22_val;
input  [17:0] x_23_val;
input  [17:0] x_24_val;
input  [17:0] x_25_val;
input  [17:0] x_27_val;
input  [17:0] x_35_val;
input  [17:0] x_36_val;
input  [17:0] x_40_val;
input  [17:0] x_47_val;
input  [17:0] x_50_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_386_p2;
reg   [0:0] icmp_ln86_reg_1452;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_1210_fu_398_p2;
reg   [0:0] icmp_ln86_1210_reg_1461;
wire   [0:0] icmp_ln86_1213_fu_416_p2;
reg   [0:0] icmp_ln86_1213_reg_1467;
wire   [0:0] icmp_ln86_1214_fu_422_p2;
reg   [0:0] icmp_ln86_1214_reg_1473;
wire   [0:0] icmp_ln86_1219_fu_452_p2;
reg   [0:0] icmp_ln86_1219_reg_1479;
wire   [0:0] icmp_ln86_1220_fu_458_p2;
reg   [0:0] icmp_ln86_1220_reg_1485;
wire   [0:0] icmp_ln86_1221_fu_464_p2;
reg   [0:0] icmp_ln86_1221_reg_1491;
wire   [0:0] icmp_ln86_1222_fu_470_p2;
reg   [0:0] icmp_ln86_1222_reg_1497;
wire   [0:0] icmp_ln86_1231_fu_524_p2;
reg   [0:0] icmp_ln86_1231_reg_1503;
wire   [0:0] icmp_ln86_1232_fu_530_p2;
reg   [0:0] icmp_ln86_1232_reg_1508;
wire   [0:0] icmp_ln86_1233_fu_536_p2;
reg   [0:0] icmp_ln86_1233_reg_1513;
wire   [0:0] icmp_ln86_1234_fu_542_p2;
reg   [0:0] icmp_ln86_1234_reg_1518;
wire   [0:0] icmp_ln86_1235_fu_548_p2;
reg   [0:0] icmp_ln86_1235_reg_1523;
wire   [0:0] icmp_ln86_1236_fu_554_p2;
reg   [0:0] icmp_ln86_1236_reg_1528;
wire   [0:0] icmp_ln86_1237_fu_560_p2;
reg   [0:0] icmp_ln86_1237_reg_1533;
wire   [0:0] icmp_ln86_1238_fu_566_p2;
reg   [0:0] icmp_ln86_1238_reg_1538;
wire   [4:0] select_ln117_1182_fu_946_p3;
reg   [4:0] select_ln117_1182_reg_1543;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln86_1209_fu_392_p2;
wire   [0:0] xor_ln104_572_fu_578_p2;
wire   [0:0] icmp_ln86_1211_fu_404_p2;
wire   [0:0] and_ln102_fu_572_p2;
wire   [0:0] xor_ln104_574_fu_596_p2;
wire   [0:0] icmp_ln86_1212_fu_410_p2;
wire   [0:0] and_ln104_fu_584_p2;
wire   [0:0] xor_ln104_575_fu_614_p2;
wire   [0:0] icmp_ln86_1215_fu_428_p2;
wire   [0:0] and_ln102_1473_fu_590_p2;
wire   [0:0] icmp_ln86_1216_fu_434_p2;
wire   [0:0] and_ln104_219_fu_602_p2;
wire   [0:0] icmp_ln86_1217_fu_440_p2;
wire   [0:0] and_ln102_1474_fu_608_p2;
wire   [0:0] icmp_ln86_1218_fu_446_p2;
wire   [0:0] and_ln104_220_fu_620_p2;
wire   [0:0] icmp_ln86_1223_fu_476_p2;
wire   [0:0] and_ln102_1477_fu_626_p2;
wire   [0:0] icmp_ln86_1224_fu_482_p2;
wire   [0:0] xor_ln104_578_fu_632_p2;
wire   [0:0] and_ln102_1501_fu_680_p2;
wire   [0:0] icmp_ln86_1225_fu_488_p2;
wire   [0:0] and_ln102_1478_fu_638_p2;
wire   [0:0] icmp_ln86_1226_fu_494_p2;
wire   [0:0] xor_ln104_579_fu_644_p2;
wire   [0:0] and_ln102_1502_fu_698_p2;
wire   [0:0] icmp_ln86_1227_fu_500_p2;
wire   [0:0] and_ln102_1479_fu_650_p2;
wire   [0:0] icmp_ln86_1228_fu_506_p2;
wire   [0:0] xor_ln104_580_fu_656_p2;
wire   [0:0] and_ln102_1503_fu_716_p2;
wire   [0:0] icmp_ln86_1229_fu_512_p2;
wire   [0:0] and_ln102_1480_fu_662_p2;
wire   [0:0] icmp_ln86_1230_fu_518_p2;
wire   [0:0] xor_ln104_581_fu_668_p2;
wire   [0:0] and_ln102_1504_fu_734_p2;
wire   [0:0] and_ln102_1485_fu_674_p2;
wire   [0:0] xor_ln117_fu_746_p2;
wire   [0:0] and_ln102_1486_fu_686_p2;
wire   [1:0] zext_ln117_fu_752_p1;
wire   [0:0] or_ln117_fu_756_p2;
wire   [1:0] select_ln117_fu_762_p3;
wire   [1:0] select_ln117_1169_fu_770_p3;
wire   [0:0] and_ln102_1487_fu_692_p2;
wire   [2:0] zext_ln117_127_fu_778_p1;
wire   [0:0] or_ln117_1069_fu_782_p2;
wire   [2:0] select_ln117_1170_fu_788_p3;
wire   [0:0] or_ln117_1070_fu_796_p2;
wire   [0:0] and_ln102_1488_fu_704_p2;
wire   [2:0] select_ln117_1171_fu_802_p3;
wire   [0:0] or_ln117_1071_fu_810_p2;
wire   [2:0] select_ln117_1172_fu_816_p3;
wire   [2:0] select_ln117_1173_fu_824_p3;
wire   [0:0] and_ln102_1489_fu_710_p2;
wire   [3:0] zext_ln117_128_fu_832_p1;
wire   [0:0] or_ln117_1072_fu_836_p2;
wire   [3:0] select_ln117_1174_fu_842_p3;
wire   [0:0] or_ln117_1073_fu_850_p2;
wire   [0:0] and_ln102_1490_fu_722_p2;
wire   [3:0] select_ln117_1175_fu_856_p3;
wire   [0:0] or_ln117_1074_fu_864_p2;
wire   [3:0] select_ln117_1176_fu_870_p3;
wire   [0:0] or_ln117_1075_fu_878_p2;
wire   [0:0] and_ln102_1491_fu_728_p2;
wire   [3:0] select_ln117_1177_fu_884_p3;
wire   [0:0] or_ln117_1076_fu_892_p2;
wire   [3:0] select_ln117_1178_fu_898_p3;
wire   [0:0] or_ln117_1077_fu_906_p2;
wire   [0:0] and_ln102_1492_fu_740_p2;
wire   [3:0] select_ln117_1179_fu_912_p3;
wire   [0:0] or_ln117_1078_fu_920_p2;
wire   [3:0] select_ln117_1180_fu_926_p3;
wire   [3:0] select_ln117_1181_fu_934_p3;
wire   [4:0] zext_ln117_129_fu_942_p1;
wire   [0:0] xor_ln104_fu_954_p2;
wire   [0:0] xor_ln104_573_fu_964_p2;
wire   [0:0] and_ln102_1472_fu_959_p2;
wire   [0:0] xor_ln104_576_fu_980_p2;
wire   [0:0] and_ln104_218_fu_969_p2;
wire   [0:0] xor_ln104_577_fu_996_p2;
wire   [0:0] and_ln102_1475_fu_975_p2;
wire   [0:0] and_ln104_221_fu_985_p2;
wire   [0:0] and_ln102_1476_fu_991_p2;
wire   [0:0] and_ln104_222_fu_1001_p2;
wire   [0:0] and_ln102_1481_fu_1007_p2;
wire   [0:0] xor_ln104_582_fu_1012_p2;
wire   [0:0] and_ln102_1505_fu_1052_p2;
wire   [0:0] and_ln102_1482_fu_1017_p2;
wire   [0:0] xor_ln104_583_fu_1022_p2;
wire   [0:0] and_ln102_1506_fu_1068_p2;
wire   [0:0] and_ln102_1483_fu_1027_p2;
wire   [0:0] xor_ln104_584_fu_1032_p2;
wire   [0:0] and_ln102_1507_fu_1084_p2;
wire   [0:0] and_ln102_1484_fu_1037_p2;
wire   [0:0] xor_ln104_585_fu_1042_p2;
wire   [0:0] and_ln102_1508_fu_1100_p2;
wire   [0:0] and_ln102_1493_fu_1047_p2;
wire   [0:0] or_ln117_1079_fu_1111_p2;
wire   [0:0] or_ln117_1080_fu_1116_p2;
wire   [0:0] and_ln102_1494_fu_1057_p2;
wire   [4:0] select_ln117_1183_fu_1121_p3;
wire   [0:0] or_ln117_1081_fu_1128_p2;
wire   [4:0] select_ln117_1184_fu_1134_p3;
wire   [0:0] or_ln117_1082_fu_1142_p2;
wire   [0:0] and_ln102_1495_fu_1063_p2;
wire   [4:0] select_ln117_1185_fu_1147_p3;
wire   [0:0] or_ln117_1083_fu_1155_p2;
wire   [4:0] select_ln117_1186_fu_1161_p3;
wire   [0:0] or_ln117_1084_fu_1169_p2;
wire   [0:0] and_ln102_1496_fu_1073_p2;
wire   [4:0] select_ln117_1187_fu_1175_p3;
wire   [0:0] or_ln117_1085_fu_1183_p2;
wire   [4:0] select_ln117_1188_fu_1189_p3;
wire   [0:0] or_ln117_1086_fu_1197_p2;
wire   [0:0] and_ln102_1497_fu_1079_p2;
wire   [4:0] select_ln117_1189_fu_1202_p3;
wire   [0:0] or_ln117_1087_fu_1210_p2;
wire   [4:0] select_ln117_1190_fu_1216_p3;
wire   [0:0] or_ln117_1088_fu_1224_p2;
wire   [0:0] and_ln102_1498_fu_1089_p2;
wire   [4:0] select_ln117_1191_fu_1230_p3;
wire   [0:0] or_ln117_1089_fu_1238_p2;
wire   [4:0] select_ln117_1192_fu_1244_p3;
wire   [0:0] or_ln117_1090_fu_1252_p2;
wire   [0:0] and_ln102_1499_fu_1095_p2;
wire   [4:0] select_ln117_1193_fu_1258_p3;
wire   [0:0] or_ln117_1091_fu_1266_p2;
wire   [4:0] select_ln117_1194_fu_1272_p3;
wire   [0:0] or_ln117_1092_fu_1280_p2;
wire   [0:0] and_ln102_1500_fu_1105_p2;
wire   [4:0] select_ln117_1195_fu_1286_p3;
wire   [0:0] or_ln117_1093_fu_1294_p2;
wire   [4:0] select_ln117_1196_fu_1300_p3;
wire   [11:0] agg_result_fu_1316_p65;
wire   [4:0] agg_result_fu_1316_p66;
wire   [11:0] agg_result_fu_1316_p67;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1316_p1;
wire   [4:0] agg_result_fu_1316_p3;
wire   [4:0] agg_result_fu_1316_p5;
wire   [4:0] agg_result_fu_1316_p7;
wire   [4:0] agg_result_fu_1316_p9;
wire   [4:0] agg_result_fu_1316_p11;
wire   [4:0] agg_result_fu_1316_p13;
wire   [4:0] agg_result_fu_1316_p15;
wire   [4:0] agg_result_fu_1316_p17;
wire   [4:0] agg_result_fu_1316_p19;
wire   [4:0] agg_result_fu_1316_p21;
wire   [4:0] agg_result_fu_1316_p23;
wire   [4:0] agg_result_fu_1316_p25;
wire   [4:0] agg_result_fu_1316_p27;
wire   [4:0] agg_result_fu_1316_p29;
wire   [4:0] agg_result_fu_1316_p31;
wire  signed [4:0] agg_result_fu_1316_p33;
wire  signed [4:0] agg_result_fu_1316_p35;
wire  signed [4:0] agg_result_fu_1316_p37;
wire  signed [4:0] agg_result_fu_1316_p39;
wire  signed [4:0] agg_result_fu_1316_p41;
wire  signed [4:0] agg_result_fu_1316_p43;
wire  signed [4:0] agg_result_fu_1316_p45;
wire  signed [4:0] agg_result_fu_1316_p47;
wire  signed [4:0] agg_result_fu_1316_p49;
wire  signed [4:0] agg_result_fu_1316_p51;
wire  signed [4:0] agg_result_fu_1316_p53;
wire  signed [4:0] agg_result_fu_1316_p55;
wire  signed [4:0] agg_result_fu_1316_p57;
wire  signed [4:0] agg_result_fu_1316_p59;
wire  signed [4:0] agg_result_fu_1316_p61;
wire  signed [4:0] agg_result_fu_1316_p63;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_65_5_12_1_1_x19 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 12 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 12 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 12 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 12 ),
    .CASE31( 5'h1F ),
    .din31_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_65_5_12_1_1_x19_U977(
    .din0(12'd3918),
    .din1(12'd1263),
    .din2(12'd445),
    .din3(12'd3871),
    .din4(12'd3436),
    .din5(12'd288),
    .din6(12'd1299),
    .din7(12'd3703),
    .din8(12'd337),
    .din9(12'd3759),
    .din10(12'd3596),
    .din11(12'd186),
    .din12(12'd3722),
    .din13(12'd1014),
    .din14(12'd3576),
    .din15(12'd3748),
    .din16(12'd4),
    .din17(12'd3933),
    .din18(12'd119),
    .din19(12'd4081),
    .din20(12'd3763),
    .din21(12'd1227),
    .din22(12'd3966),
    .din23(12'd137),
    .din24(12'd222),
    .din25(12'd3723),
    .din26(12'd177),
    .din27(12'd3806),
    .din28(12'd164),
    .din29(12'd4025),
    .din30(12'd3735),
    .din31(12'd4023),
    .def(agg_result_fu_1316_p65),
    .sel(agg_result_fu_1316_p66),
    .dout(agg_result_fu_1316_p67)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_1210_reg_1461 <= icmp_ln86_1210_fu_398_p2;
        icmp_ln86_1213_reg_1467 <= icmp_ln86_1213_fu_416_p2;
        icmp_ln86_1214_reg_1473 <= icmp_ln86_1214_fu_422_p2;
        icmp_ln86_1219_reg_1479 <= icmp_ln86_1219_fu_452_p2;
        icmp_ln86_1220_reg_1485 <= icmp_ln86_1220_fu_458_p2;
        icmp_ln86_1221_reg_1491 <= icmp_ln86_1221_fu_464_p2;
        icmp_ln86_1222_reg_1497 <= icmp_ln86_1222_fu_470_p2;
        icmp_ln86_1231_reg_1503 <= icmp_ln86_1231_fu_524_p2;
        icmp_ln86_1232_reg_1508 <= icmp_ln86_1232_fu_530_p2;
        icmp_ln86_1233_reg_1513 <= icmp_ln86_1233_fu_536_p2;
        icmp_ln86_1234_reg_1518 <= icmp_ln86_1234_fu_542_p2;
        icmp_ln86_1235_reg_1523 <= icmp_ln86_1235_fu_548_p2;
        icmp_ln86_1236_reg_1528 <= icmp_ln86_1236_fu_554_p2;
        icmp_ln86_1237_reg_1533 <= icmp_ln86_1237_fu_560_p2;
        icmp_ln86_1238_reg_1538 <= icmp_ln86_1238_fu_566_p2;
        icmp_ln86_reg_1452 <= icmp_ln86_fu_386_p2;
        select_ln117_1182_reg_1543 <= select_ln117_1182_fu_946_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1316_p65 = 'bx;

assign agg_result_fu_1316_p66 = ((or_ln117_1093_fu_1294_p2[0:0] == 1'b1) ? select_ln117_1196_fu_1300_p3 : 5'd31);

assign and_ln102_1472_fu_959_p2 = (xor_ln104_fu_954_p2 & icmp_ln86_1210_reg_1461);

assign and_ln102_1473_fu_590_p2 = (icmp_ln86_1211_fu_404_p2 & and_ln102_fu_572_p2);

assign and_ln102_1474_fu_608_p2 = (icmp_ln86_1212_fu_410_p2 & and_ln104_fu_584_p2);

assign and_ln102_1475_fu_975_p2 = (icmp_ln86_1213_reg_1467 & and_ln102_1472_fu_959_p2);

assign and_ln102_1476_fu_991_p2 = (icmp_ln86_1214_reg_1473 & and_ln104_218_fu_969_p2);

assign and_ln102_1477_fu_626_p2 = (icmp_ln86_1215_fu_428_p2 & and_ln102_1473_fu_590_p2);

assign and_ln102_1478_fu_638_p2 = (icmp_ln86_1216_fu_434_p2 & and_ln104_219_fu_602_p2);

assign and_ln102_1479_fu_650_p2 = (icmp_ln86_1217_fu_440_p2 & and_ln102_1474_fu_608_p2);

assign and_ln102_1480_fu_662_p2 = (icmp_ln86_1218_fu_446_p2 & and_ln104_220_fu_620_p2);

assign and_ln102_1481_fu_1007_p2 = (icmp_ln86_1219_reg_1479 & and_ln102_1475_fu_975_p2);

assign and_ln102_1482_fu_1017_p2 = (icmp_ln86_1220_reg_1485 & and_ln104_221_fu_985_p2);

assign and_ln102_1483_fu_1027_p2 = (icmp_ln86_1221_reg_1491 & and_ln102_1476_fu_991_p2);

assign and_ln102_1484_fu_1037_p2 = (icmp_ln86_1222_reg_1497 & and_ln104_222_fu_1001_p2);

assign and_ln102_1485_fu_674_p2 = (icmp_ln86_1223_fu_476_p2 & and_ln102_1477_fu_626_p2);

assign and_ln102_1486_fu_686_p2 = (and_ln102_1501_fu_680_p2 & and_ln102_1473_fu_590_p2);

assign and_ln102_1487_fu_692_p2 = (icmp_ln86_1225_fu_488_p2 & and_ln102_1478_fu_638_p2);

assign and_ln102_1488_fu_704_p2 = (and_ln104_219_fu_602_p2 & and_ln102_1502_fu_698_p2);

assign and_ln102_1489_fu_710_p2 = (icmp_ln86_1227_fu_500_p2 & and_ln102_1479_fu_650_p2);

assign and_ln102_1490_fu_722_p2 = (and_ln102_1503_fu_716_p2 & and_ln102_1474_fu_608_p2);

assign and_ln102_1491_fu_728_p2 = (icmp_ln86_1229_fu_512_p2 & and_ln102_1480_fu_662_p2);

assign and_ln102_1492_fu_740_p2 = (and_ln104_220_fu_620_p2 & and_ln102_1504_fu_734_p2);

assign and_ln102_1493_fu_1047_p2 = (icmp_ln86_1231_reg_1503 & and_ln102_1481_fu_1007_p2);

assign and_ln102_1494_fu_1057_p2 = (and_ln102_1505_fu_1052_p2 & and_ln102_1475_fu_975_p2);

assign and_ln102_1495_fu_1063_p2 = (icmp_ln86_1233_reg_1513 & and_ln102_1482_fu_1017_p2);

assign and_ln102_1496_fu_1073_p2 = (and_ln104_221_fu_985_p2 & and_ln102_1506_fu_1068_p2);

assign and_ln102_1497_fu_1079_p2 = (icmp_ln86_1235_reg_1523 & and_ln102_1483_fu_1027_p2);

assign and_ln102_1498_fu_1089_p2 = (and_ln102_1507_fu_1084_p2 & and_ln102_1476_fu_991_p2);

assign and_ln102_1499_fu_1095_p2 = (icmp_ln86_1237_reg_1533 & and_ln102_1484_fu_1037_p2);

assign and_ln102_1500_fu_1105_p2 = (and_ln104_222_fu_1001_p2 & and_ln102_1508_fu_1100_p2);

assign and_ln102_1501_fu_680_p2 = (xor_ln104_578_fu_632_p2 & icmp_ln86_1224_fu_482_p2);

assign and_ln102_1502_fu_698_p2 = (xor_ln104_579_fu_644_p2 & icmp_ln86_1226_fu_494_p2);

assign and_ln102_1503_fu_716_p2 = (xor_ln104_580_fu_656_p2 & icmp_ln86_1228_fu_506_p2);

assign and_ln102_1504_fu_734_p2 = (xor_ln104_581_fu_668_p2 & icmp_ln86_1230_fu_518_p2);

assign and_ln102_1505_fu_1052_p2 = (xor_ln104_582_fu_1012_p2 & icmp_ln86_1232_reg_1508);

assign and_ln102_1506_fu_1068_p2 = (xor_ln104_583_fu_1022_p2 & icmp_ln86_1234_reg_1518);

assign and_ln102_1507_fu_1084_p2 = (xor_ln104_584_fu_1032_p2 & icmp_ln86_1236_reg_1528);

assign and_ln102_1508_fu_1100_p2 = (xor_ln104_585_fu_1042_p2 & icmp_ln86_1238_reg_1538);

assign and_ln102_fu_572_p2 = (icmp_ln86_fu_386_p2 & icmp_ln86_1209_fu_392_p2);

assign and_ln104_218_fu_969_p2 = (xor_ln104_fu_954_p2 & xor_ln104_573_fu_964_p2);

assign and_ln104_219_fu_602_p2 = (xor_ln104_574_fu_596_p2 & and_ln102_fu_572_p2);

assign and_ln104_220_fu_620_p2 = (xor_ln104_575_fu_614_p2 & and_ln104_fu_584_p2);

assign and_ln104_221_fu_985_p2 = (xor_ln104_576_fu_980_p2 & and_ln102_1472_fu_959_p2);

assign and_ln104_222_fu_1001_p2 = (xor_ln104_577_fu_996_p2 & and_ln104_218_fu_969_p2);

assign and_ln104_fu_584_p2 = (xor_ln104_572_fu_578_p2 & icmp_ln86_fu_386_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1316_p67;

assign icmp_ln86_1209_fu_392_p2 = (($signed(x_25_val) < $signed(18'd89)) ? 1'b1 : 1'b0);

assign icmp_ln86_1210_fu_398_p2 = (($signed(x_24_val) < $signed(18'd449)) ? 1'b1 : 1'b0);

assign icmp_ln86_1211_fu_404_p2 = (($signed(x_35_val) < $signed(18'd45)) ? 1'b1 : 1'b0);

assign icmp_ln86_1212_fu_410_p2 = (($signed(x_10_val) < $signed(18'd674)) ? 1'b1 : 1'b0);

assign icmp_ln86_1213_fu_416_p2 = (($signed(x_47_val) < $signed(18'd95725)) ? 1'b1 : 1'b0);

assign icmp_ln86_1214_fu_422_p2 = (($signed(x_11_val) < $signed(18'd656)) ? 1'b1 : 1'b0);

assign icmp_ln86_1215_fu_428_p2 = (($signed(x_2_val) < $signed(18'd261605)) ? 1'b1 : 1'b0);

assign icmp_ln86_1216_fu_434_p2 = (($signed(x_3_val) < $signed(18'd86164)) ? 1'b1 : 1'b0);

assign icmp_ln86_1217_fu_440_p2 = (($signed(x_17_val) < $signed(18'd26)) ? 1'b1 : 1'b0);

assign icmp_ln86_1218_fu_446_p2 = (($signed(x_40_val) < $signed(18'd223)) ? 1'b1 : 1'b0);

assign icmp_ln86_1219_fu_452_p2 = (($signed(x_47_val) < $signed(18'd79656)) ? 1'b1 : 1'b0);

assign icmp_ln86_1220_fu_458_p2 = (($signed(x_23_val) < $signed(18'd29)) ? 1'b1 : 1'b0);

assign icmp_ln86_1221_fu_464_p2 = (($signed(x_22_val) < $signed(18'd87)) ? 1'b1 : 1'b0);

assign icmp_ln86_1222_fu_470_p2 = (($signed(x_25_val) < $signed(18'd375)) ? 1'b1 : 1'b0);

assign icmp_ln86_1223_fu_476_p2 = (($signed(x_7_val) < $signed(18'd5643)) ? 1'b1 : 1'b0);

assign icmp_ln86_1224_fu_482_p2 = (($signed(x_50_val) < $signed(18'd75215)) ? 1'b1 : 1'b0);

assign icmp_ln86_1225_fu_488_p2 = (($signed(x_36_val) < $signed(18'd9)) ? 1'b1 : 1'b0);

assign icmp_ln86_1226_fu_494_p2 = (($signed(x_7_val) < $signed(18'd7555)) ? 1'b1 : 1'b0);

assign icmp_ln86_1227_fu_500_p2 = (($signed(x_13_val) < $signed(18'd478)) ? 1'b1 : 1'b0);

assign icmp_ln86_1228_fu_506_p2 = (($signed(x_25_val) < $signed(18'd289)) ? 1'b1 : 1'b0);

assign icmp_ln86_1229_fu_512_p2 = (($signed(x_40_val) < $signed(18'd197)) ? 1'b1 : 1'b0);

assign icmp_ln86_1230_fu_518_p2 = (($signed(x_1_val) < $signed(18'd73323)) ? 1'b1 : 1'b0);

assign icmp_ln86_1231_fu_524_p2 = (($signed(x_3_val) < $signed(18'd82153)) ? 1'b1 : 1'b0);

assign icmp_ln86_1232_fu_530_p2 = (($signed(x_47_val) < $signed(18'd83594)) ? 1'b1 : 1'b0);

assign icmp_ln86_1233_fu_536_p2 = (($signed(x_27_val) < $signed(18'd57334)) ? 1'b1 : 1'b0);

assign icmp_ln86_1234_fu_542_p2 = (($signed(x_12_val) < $signed(18'd258918)) ? 1'b1 : 1'b0);

assign icmp_ln86_1235_fu_548_p2 = (($signed(x_22_val) < $signed(18'd49)) ? 1'b1 : 1'b0);

assign icmp_ln86_1236_fu_554_p2 = (($signed(x_2_val) < $signed(18'd261857)) ? 1'b1 : 1'b0);

assign icmp_ln86_1237_fu_560_p2 = (($signed(x_10_val) < $signed(18'd841)) ? 1'b1 : 1'b0);

assign icmp_ln86_1238_fu_566_p2 = (($signed(x_12_val) < $signed(18'd259589)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_386_p2 = (($signed(x_1_val) < $signed(18'd155926)) ? 1'b1 : 1'b0);

assign or_ln117_1069_fu_782_p2 = (and_ln102_1487_fu_692_p2 | and_ln102_1473_fu_590_p2);

assign or_ln117_1070_fu_796_p2 = (and_ln102_1478_fu_638_p2 | and_ln102_1473_fu_590_p2);

assign or_ln117_1071_fu_810_p2 = (or_ln117_1070_fu_796_p2 | and_ln102_1488_fu_704_p2);

assign or_ln117_1072_fu_836_p2 = (and_ln102_fu_572_p2 | and_ln102_1489_fu_710_p2);

assign or_ln117_1073_fu_850_p2 = (and_ln102_fu_572_p2 | and_ln102_1479_fu_650_p2);

assign or_ln117_1074_fu_864_p2 = (or_ln117_1073_fu_850_p2 | and_ln102_1490_fu_722_p2);

assign or_ln117_1075_fu_878_p2 = (and_ln102_fu_572_p2 | and_ln102_1474_fu_608_p2);

assign or_ln117_1076_fu_892_p2 = (or_ln117_1075_fu_878_p2 | and_ln102_1491_fu_728_p2);

assign or_ln117_1077_fu_906_p2 = (or_ln117_1075_fu_878_p2 | and_ln102_1480_fu_662_p2);

assign or_ln117_1078_fu_920_p2 = (or_ln117_1077_fu_906_p2 | and_ln102_1492_fu_740_p2);

assign or_ln117_1079_fu_1111_p2 = (icmp_ln86_reg_1452 | and_ln102_1493_fu_1047_p2);

assign or_ln117_1080_fu_1116_p2 = (icmp_ln86_reg_1452 | and_ln102_1481_fu_1007_p2);

assign or_ln117_1081_fu_1128_p2 = (or_ln117_1080_fu_1116_p2 | and_ln102_1494_fu_1057_p2);

assign or_ln117_1082_fu_1142_p2 = (icmp_ln86_reg_1452 | and_ln102_1475_fu_975_p2);

assign or_ln117_1083_fu_1155_p2 = (or_ln117_1082_fu_1142_p2 | and_ln102_1495_fu_1063_p2);

assign or_ln117_1084_fu_1169_p2 = (or_ln117_1082_fu_1142_p2 | and_ln102_1482_fu_1017_p2);

assign or_ln117_1085_fu_1183_p2 = (or_ln117_1084_fu_1169_p2 | and_ln102_1496_fu_1073_p2);

assign or_ln117_1086_fu_1197_p2 = (icmp_ln86_reg_1452 | and_ln102_1472_fu_959_p2);

assign or_ln117_1087_fu_1210_p2 = (or_ln117_1086_fu_1197_p2 | and_ln102_1497_fu_1079_p2);

assign or_ln117_1088_fu_1224_p2 = (or_ln117_1086_fu_1197_p2 | and_ln102_1483_fu_1027_p2);

assign or_ln117_1089_fu_1238_p2 = (or_ln117_1088_fu_1224_p2 | and_ln102_1498_fu_1089_p2);

assign or_ln117_1090_fu_1252_p2 = (or_ln117_1086_fu_1197_p2 | and_ln102_1476_fu_991_p2);

assign or_ln117_1091_fu_1266_p2 = (or_ln117_1090_fu_1252_p2 | and_ln102_1499_fu_1095_p2);

assign or_ln117_1092_fu_1280_p2 = (or_ln117_1090_fu_1252_p2 | and_ln102_1484_fu_1037_p2);

assign or_ln117_1093_fu_1294_p2 = (or_ln117_1092_fu_1280_p2 | and_ln102_1500_fu_1105_p2);

assign or_ln117_fu_756_p2 = (and_ln102_1486_fu_686_p2 | and_ln102_1477_fu_626_p2);

assign select_ln117_1169_fu_770_p3 = ((or_ln117_fu_756_p2[0:0] == 1'b1) ? select_ln117_fu_762_p3 : 2'd3);

assign select_ln117_1170_fu_788_p3 = ((and_ln102_1473_fu_590_p2[0:0] == 1'b1) ? zext_ln117_127_fu_778_p1 : 3'd4);

assign select_ln117_1171_fu_802_p3 = ((or_ln117_1069_fu_782_p2[0:0] == 1'b1) ? select_ln117_1170_fu_788_p3 : 3'd5);

assign select_ln117_1172_fu_816_p3 = ((or_ln117_1070_fu_796_p2[0:0] == 1'b1) ? select_ln117_1171_fu_802_p3 : 3'd6);

assign select_ln117_1173_fu_824_p3 = ((or_ln117_1071_fu_810_p2[0:0] == 1'b1) ? select_ln117_1172_fu_816_p3 : 3'd7);

assign select_ln117_1174_fu_842_p3 = ((and_ln102_fu_572_p2[0:0] == 1'b1) ? zext_ln117_128_fu_832_p1 : 4'd8);

assign select_ln117_1175_fu_856_p3 = ((or_ln117_1072_fu_836_p2[0:0] == 1'b1) ? select_ln117_1174_fu_842_p3 : 4'd9);

assign select_ln117_1176_fu_870_p3 = ((or_ln117_1073_fu_850_p2[0:0] == 1'b1) ? select_ln117_1175_fu_856_p3 : 4'd10);

assign select_ln117_1177_fu_884_p3 = ((or_ln117_1074_fu_864_p2[0:0] == 1'b1) ? select_ln117_1176_fu_870_p3 : 4'd11);

assign select_ln117_1178_fu_898_p3 = ((or_ln117_1075_fu_878_p2[0:0] == 1'b1) ? select_ln117_1177_fu_884_p3 : 4'd12);

assign select_ln117_1179_fu_912_p3 = ((or_ln117_1076_fu_892_p2[0:0] == 1'b1) ? select_ln117_1178_fu_898_p3 : 4'd13);

assign select_ln117_1180_fu_926_p3 = ((or_ln117_1077_fu_906_p2[0:0] == 1'b1) ? select_ln117_1179_fu_912_p3 : 4'd14);

assign select_ln117_1181_fu_934_p3 = ((or_ln117_1078_fu_920_p2[0:0] == 1'b1) ? select_ln117_1180_fu_926_p3 : 4'd15);

assign select_ln117_1182_fu_946_p3 = ((icmp_ln86_fu_386_p2[0:0] == 1'b1) ? zext_ln117_129_fu_942_p1 : 5'd16);

assign select_ln117_1183_fu_1121_p3 = ((or_ln117_1079_fu_1111_p2[0:0] == 1'b1) ? select_ln117_1182_reg_1543 : 5'd17);

assign select_ln117_1184_fu_1134_p3 = ((or_ln117_1080_fu_1116_p2[0:0] == 1'b1) ? select_ln117_1183_fu_1121_p3 : 5'd18);

assign select_ln117_1185_fu_1147_p3 = ((or_ln117_1081_fu_1128_p2[0:0] == 1'b1) ? select_ln117_1184_fu_1134_p3 : 5'd19);

assign select_ln117_1186_fu_1161_p3 = ((or_ln117_1082_fu_1142_p2[0:0] == 1'b1) ? select_ln117_1185_fu_1147_p3 : 5'd20);

assign select_ln117_1187_fu_1175_p3 = ((or_ln117_1083_fu_1155_p2[0:0] == 1'b1) ? select_ln117_1186_fu_1161_p3 : 5'd21);

assign select_ln117_1188_fu_1189_p3 = ((or_ln117_1084_fu_1169_p2[0:0] == 1'b1) ? select_ln117_1187_fu_1175_p3 : 5'd22);

assign select_ln117_1189_fu_1202_p3 = ((or_ln117_1085_fu_1183_p2[0:0] == 1'b1) ? select_ln117_1188_fu_1189_p3 : 5'd23);

assign select_ln117_1190_fu_1216_p3 = ((or_ln117_1086_fu_1197_p2[0:0] == 1'b1) ? select_ln117_1189_fu_1202_p3 : 5'd24);

assign select_ln117_1191_fu_1230_p3 = ((or_ln117_1087_fu_1210_p2[0:0] == 1'b1) ? select_ln117_1190_fu_1216_p3 : 5'd25);

assign select_ln117_1192_fu_1244_p3 = ((or_ln117_1088_fu_1224_p2[0:0] == 1'b1) ? select_ln117_1191_fu_1230_p3 : 5'd26);

assign select_ln117_1193_fu_1258_p3 = ((or_ln117_1089_fu_1238_p2[0:0] == 1'b1) ? select_ln117_1192_fu_1244_p3 : 5'd27);

assign select_ln117_1194_fu_1272_p3 = ((or_ln117_1090_fu_1252_p2[0:0] == 1'b1) ? select_ln117_1193_fu_1258_p3 : 5'd28);

assign select_ln117_1195_fu_1286_p3 = ((or_ln117_1091_fu_1266_p2[0:0] == 1'b1) ? select_ln117_1194_fu_1272_p3 : 5'd29);

assign select_ln117_1196_fu_1300_p3 = ((or_ln117_1092_fu_1280_p2[0:0] == 1'b1) ? select_ln117_1195_fu_1286_p3 : 5'd30);

assign select_ln117_fu_762_p3 = ((and_ln102_1477_fu_626_p2[0:0] == 1'b1) ? zext_ln117_fu_752_p1 : 2'd2);

assign xor_ln104_572_fu_578_p2 = (icmp_ln86_1209_fu_392_p2 ^ 1'd1);

assign xor_ln104_573_fu_964_p2 = (icmp_ln86_1210_reg_1461 ^ 1'd1);

assign xor_ln104_574_fu_596_p2 = (icmp_ln86_1211_fu_404_p2 ^ 1'd1);

assign xor_ln104_575_fu_614_p2 = (icmp_ln86_1212_fu_410_p2 ^ 1'd1);

assign xor_ln104_576_fu_980_p2 = (icmp_ln86_1213_reg_1467 ^ 1'd1);

assign xor_ln104_577_fu_996_p2 = (icmp_ln86_1214_reg_1473 ^ 1'd1);

assign xor_ln104_578_fu_632_p2 = (icmp_ln86_1215_fu_428_p2 ^ 1'd1);

assign xor_ln104_579_fu_644_p2 = (icmp_ln86_1216_fu_434_p2 ^ 1'd1);

assign xor_ln104_580_fu_656_p2 = (icmp_ln86_1217_fu_440_p2 ^ 1'd1);

assign xor_ln104_581_fu_668_p2 = (icmp_ln86_1218_fu_446_p2 ^ 1'd1);

assign xor_ln104_582_fu_1012_p2 = (icmp_ln86_1219_reg_1479 ^ 1'd1);

assign xor_ln104_583_fu_1022_p2 = (icmp_ln86_1220_reg_1485 ^ 1'd1);

assign xor_ln104_584_fu_1032_p2 = (icmp_ln86_1221_reg_1491 ^ 1'd1);

assign xor_ln104_585_fu_1042_p2 = (icmp_ln86_1222_reg_1497 ^ 1'd1);

assign xor_ln104_fu_954_p2 = (icmp_ln86_reg_1452 ^ 1'd1);

assign xor_ln117_fu_746_p2 = (1'd1 ^ and_ln102_1485_fu_674_p2);

assign zext_ln117_127_fu_778_p1 = select_ln117_1169_fu_770_p3;

assign zext_ln117_128_fu_832_p1 = select_ln117_1173_fu_824_p3;

assign zext_ln117_129_fu_942_p1 = select_ln117_1181_fu_934_p3;

assign zext_ln117_fu_752_p1 = xor_ln117_fu_746_p2;

endmodule //my_prj_decision_function_57
