// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_51 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_3_val,
        x_5_val,
        x_6_val,
        x_7_val,
        x_8_val,
        x_9_val,
        x_10_val,
        x_11_val,
        x_15_val,
        x_16_val,
        x_18_val,
        x_24_val,
        x_34_val,
        x_39_val,
        x_45_val,
        x_50_val,
        x_51_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_3_val;
input  [17:0] x_5_val;
input  [17:0] x_6_val;
input  [17:0] x_7_val;
input  [17:0] x_8_val;
input  [17:0] x_9_val;
input  [17:0] x_10_val;
input  [17:0] x_11_val;
input  [17:0] x_15_val;
input  [17:0] x_16_val;
input  [17:0] x_18_val;
input  [17:0] x_24_val;
input  [17:0] x_34_val;
input  [17:0] x_39_val;
input  [17:0] x_45_val;
input  [17:0] x_50_val;
input  [17:0] x_51_val;
input  [17:0] x_52_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_1362_fu_400_p2;
reg   [0:0] icmp_ln86_1362_reg_1307;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_1368_fu_436_p2;
reg   [0:0] icmp_ln86_1368_reg_1313;
wire   [0:0] icmp_ln86_1369_fu_442_p2;
reg   [0:0] icmp_ln86_1369_reg_1318;
wire   [0:0] icmp_ln86_1370_fu_448_p2;
reg   [0:0] icmp_ln86_1370_reg_1324;
wire   [0:0] icmp_ln86_1378_fu_498_p2;
reg   [0:0] icmp_ln86_1378_reg_1330;
wire   [0:0] icmp_ln86_1379_fu_504_p2;
reg   [0:0] icmp_ln86_1379_reg_1335;
wire   [0:0] icmp_ln86_1380_fu_510_p2;
reg   [0:0] icmp_ln86_1380_reg_1340;
wire   [0:0] icmp_ln86_1381_fu_516_p2;
reg   [0:0] icmp_ln86_1381_reg_1345;
wire   [0:0] icmp_ln86_1382_fu_522_p2;
reg   [0:0] icmp_ln86_1382_reg_1350;
wire   [0:0] and_ln104_250_fu_564_p2;
reg   [0:0] and_ln104_250_reg_1355;
wire   [0:0] and_ln104_253_fu_618_p2;
reg   [0:0] and_ln104_253_reg_1361;
wire   [0:0] or_ln117_1238_fu_964_p2;
reg   [0:0] or_ln117_1238_reg_1366;
wire   [4:0] select_ln117_1329_fu_978_p3;
reg   [4:0] select_ln117_1329_reg_1371;
wire   [0:0] or_ln117_1240_fu_986_p2;
reg   [0:0] or_ln117_1240_reg_1376;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln86_fu_364_p2;
wire   [0:0] icmp_ln86_1357_fu_370_p2;
wire   [0:0] xor_ln104_649_fu_540_p2;
wire   [0:0] icmp_ln86_1358_fu_376_p2;
wire   [0:0] xor_ln104_fu_528_p2;
wire   [0:0] xor_ln104_650_fu_558_p2;
wire   [0:0] icmp_ln86_1359_fu_382_p2;
wire   [0:0] and_ln102_fu_534_p2;
wire   [0:0] xor_ln104_651_fu_576_p2;
wire   [0:0] icmp_ln86_1360_fu_388_p2;
wire   [0:0] and_ln104_fu_546_p2;
wire   [0:0] xor_ln104_652_fu_594_p2;
wire   [0:0] icmp_ln86_1361_fu_394_p2;
wire   [0:0] and_ln102_1306_fu_552_p2;
wire   [0:0] xor_ln104_653_fu_612_p2;
wire   [0:0] icmp_ln86_1363_fu_406_p2;
wire   [0:0] and_ln102_1307_fu_570_p2;
wire   [0:0] icmp_ln86_1364_fu_412_p2;
wire   [0:0] and_ln104_251_fu_582_p2;
wire   [0:0] icmp_ln86_1365_fu_418_p2;
wire   [0:0] and_ln102_1308_fu_588_p2;
wire   [0:0] icmp_ln86_1366_fu_424_p2;
wire   [0:0] and_ln104_252_fu_600_p2;
wire   [0:0] icmp_ln86_1367_fu_430_p2;
wire   [0:0] and_ln102_1309_fu_606_p2;
wire   [0:0] icmp_ln86_1371_fu_454_p2;
wire   [0:0] and_ln102_1311_fu_624_p2;
wire   [0:0] icmp_ln86_1372_fu_460_p2;
wire   [0:0] xor_ln104_655_fu_630_p2;
wire   [0:0] and_ln102_1331_fu_684_p2;
wire   [0:0] icmp_ln86_1373_fu_466_p2;
wire   [0:0] and_ln102_1314_fu_648_p2;
wire   [0:0] tmp_fu_472_p3;
wire   [0:0] xor_ln104_656_fu_654_p2;
wire   [0:0] and_ln102_1332_fu_702_p2;
wire   [0:0] icmp_ln86_1375_fu_480_p2;
wire   [0:0] and_ln102_1315_fu_660_p2;
wire   [0:0] icmp_ln86_1376_fu_486_p2;
wire   [0:0] xor_ln104_657_fu_666_p2;
wire   [0:0] and_ln102_1333_fu_720_p2;
wire   [0:0] icmp_ln86_1377_fu_492_p2;
wire   [0:0] and_ln102_1316_fu_672_p2;
wire   [0:0] and_ln102_1312_fu_636_p2;
wire   [0:0] xor_ln117_fu_738_p2;
wire   [0:0] and_ln102_1313_fu_642_p2;
wire   [1:0] zext_ln117_fu_744_p1;
wire   [0:0] or_ln117_fu_748_p2;
wire   [1:0] select_ln117_fu_754_p3;
wire   [1:0] select_ln117_1314_fu_768_p3;
wire   [0:0] or_ln117_1225_fu_762_p2;
wire   [0:0] and_ln102_1319_fu_678_p2;
wire   [2:0] zext_ln117_145_fu_776_p1;
wire   [0:0] or_ln117_1226_fu_780_p2;
wire   [2:0] select_ln117_1315_fu_786_p3;
wire   [0:0] or_ln117_1227_fu_794_p2;
wire   [0:0] and_ln102_1320_fu_690_p2;
wire   [2:0] select_ln117_1316_fu_800_p3;
wire   [0:0] or_ln117_1228_fu_808_p2;
wire   [2:0] select_ln117_1317_fu_814_p3;
wire   [2:0] select_ln117_1318_fu_828_p3;
wire   [0:0] or_ln117_1229_fu_822_p2;
wire   [0:0] and_ln102_1321_fu_696_p2;
wire   [3:0] zext_ln117_146_fu_836_p1;
wire   [0:0] or_ln117_1230_fu_840_p2;
wire   [3:0] select_ln117_1319_fu_846_p3;
wire   [0:0] or_ln117_1231_fu_854_p2;
wire   [0:0] and_ln102_1322_fu_708_p2;
wire   [3:0] select_ln117_1320_fu_860_p3;
wire   [0:0] or_ln117_1232_fu_868_p2;
wire   [3:0] select_ln117_1321_fu_874_p3;
wire   [0:0] and_ln102_1323_fu_714_p2;
wire   [3:0] select_ln117_1322_fu_882_p3;
wire   [0:0] or_ln117_1233_fu_890_p2;
wire   [3:0] select_ln117_1323_fu_896_p3;
wire   [0:0] or_ln117_1234_fu_904_p2;
wire   [0:0] and_ln102_1324_fu_726_p2;
wire   [3:0] select_ln117_1324_fu_910_p3;
wire   [0:0] or_ln117_1235_fu_918_p2;
wire   [3:0] select_ln117_1325_fu_924_p3;
wire   [3:0] select_ln117_1326_fu_938_p3;
wire   [0:0] or_ln117_1236_fu_932_p2;
wire   [0:0] and_ln102_1325_fu_732_p2;
wire   [4:0] zext_ln117_147_fu_946_p1;
wire   [0:0] or_ln117_1237_fu_950_p2;
wire   [4:0] select_ln117_1327_fu_956_p3;
wire   [4:0] select_ln117_1328_fu_970_p3;
wire   [0:0] xor_ln104_654_fu_996_p2;
wire   [0:0] and_ln102_1310_fu_992_p2;
wire   [0:0] and_ln104_254_fu_1001_p2;
wire   [0:0] xor_ln104_658_fu_1006_p2;
wire   [0:0] and_ln102_1334_fu_1031_p2;
wire   [0:0] and_ln102_1317_fu_1011_p2;
wire   [0:0] xor_ln104_659_fu_1016_p2;
wire   [0:0] and_ln102_1335_fu_1046_p2;
wire   [0:0] and_ln102_1318_fu_1021_p2;
wire   [0:0] xor_ln104_660_fu_1026_p2;
wire   [0:0] and_ln102_1336_fu_1062_p2;
wire   [0:0] and_ln102_1326_fu_1036_p2;
wire   [0:0] or_ln117_1239_fu_1073_p2;
wire   [0:0] and_ln102_1327_fu_1041_p2;
wire   [4:0] select_ln117_1330_fu_1078_p3;
wire   [0:0] or_ln117_1241_fu_1085_p2;
wire   [4:0] select_ln117_1331_fu_1090_p3;
wire   [0:0] or_ln117_1242_fu_1097_p2;
wire   [0:0] and_ln102_1328_fu_1051_p2;
wire   [4:0] select_ln117_1332_fu_1102_p3;
wire   [0:0] or_ln117_1243_fu_1110_p2;
wire   [4:0] select_ln117_1333_fu_1116_p3;
wire   [0:0] or_ln117_1244_fu_1124_p2;
wire   [0:0] and_ln102_1329_fu_1057_p2;
wire   [4:0] select_ln117_1334_fu_1129_p3;
wire   [0:0] or_ln117_1245_fu_1137_p2;
wire   [4:0] select_ln117_1335_fu_1143_p3;
wire   [0:0] or_ln117_1246_fu_1151_p2;
wire   [0:0] and_ln102_1330_fu_1067_p2;
wire   [4:0] select_ln117_1336_fu_1157_p3;
wire   [0:0] or_ln117_1247_fu_1165_p2;
wire   [4:0] select_ln117_1337_fu_1171_p3;
wire   [11:0] agg_result_fu_1187_p57;
wire   [4:0] agg_result_fu_1187_p58;
wire   [11:0] agg_result_fu_1187_p59;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1187_p1;
wire   [4:0] agg_result_fu_1187_p3;
wire   [4:0] agg_result_fu_1187_p5;
wire   [4:0] agg_result_fu_1187_p7;
wire   [4:0] agg_result_fu_1187_p9;
wire   [4:0] agg_result_fu_1187_p11;
wire   [4:0] agg_result_fu_1187_p13;
wire   [4:0] agg_result_fu_1187_p15;
wire   [4:0] agg_result_fu_1187_p17;
wire   [4:0] agg_result_fu_1187_p19;
wire   [4:0] agg_result_fu_1187_p21;
wire   [4:0] agg_result_fu_1187_p23;
wire   [4:0] agg_result_fu_1187_p25;
wire   [4:0] agg_result_fu_1187_p27;
wire   [4:0] agg_result_fu_1187_p29;
wire   [4:0] agg_result_fu_1187_p31;
wire  signed [4:0] agg_result_fu_1187_p33;
wire  signed [4:0] agg_result_fu_1187_p35;
wire  signed [4:0] agg_result_fu_1187_p37;
wire  signed [4:0] agg_result_fu_1187_p39;
wire  signed [4:0] agg_result_fu_1187_p41;
wire  signed [4:0] agg_result_fu_1187_p43;
wire  signed [4:0] agg_result_fu_1187_p45;
wire  signed [4:0] agg_result_fu_1187_p47;
wire  signed [4:0] agg_result_fu_1187_p49;
wire  signed [4:0] agg_result_fu_1187_p51;
wire  signed [4:0] agg_result_fu_1187_p53;
wire  signed [4:0] agg_result_fu_1187_p55;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_57_5_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_57_5_12_1_1_U1091(
    .din0(12'd3768),
    .din1(12'd1441),
    .din2(12'd1181),
    .din3(12'd3685),
    .din4(12'd3782),
    .din5(12'd401),
    .din6(12'd3619),
    .din7(12'd129),
    .din8(12'd3760),
    .din9(12'd658),
    .din10(12'd216),
    .din11(12'd3612),
    .din12(12'd4094),
    .din13(12'd84),
    .din14(12'd3877),
    .din15(12'd4073),
    .din16(12'd71),
    .din17(12'd389),
    .din18(12'd4088),
    .din19(12'd3733),
    .din20(12'd4061),
    .din21(12'd3748),
    .din22(12'd3706),
    .din23(12'd917),
    .din24(12'd116),
    .din25(12'd1916),
    .din26(12'd634),
    .din27(12'd3992),
    .def(agg_result_fu_1187_p57),
    .sel(agg_result_fu_1187_p58),
    .dout(agg_result_fu_1187_p59)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln104_250_reg_1355 <= and_ln104_250_fu_564_p2;
        and_ln104_253_reg_1361 <= and_ln104_253_fu_618_p2;
        icmp_ln86_1362_reg_1307 <= icmp_ln86_1362_fu_400_p2;
        icmp_ln86_1368_reg_1313 <= icmp_ln86_1368_fu_436_p2;
        icmp_ln86_1369_reg_1318 <= icmp_ln86_1369_fu_442_p2;
        icmp_ln86_1370_reg_1324 <= icmp_ln86_1370_fu_448_p2;
        icmp_ln86_1378_reg_1330 <= icmp_ln86_1378_fu_498_p2;
        icmp_ln86_1379_reg_1335 <= icmp_ln86_1379_fu_504_p2;
        icmp_ln86_1380_reg_1340 <= icmp_ln86_1380_fu_510_p2;
        icmp_ln86_1381_reg_1345 <= icmp_ln86_1381_fu_516_p2;
        icmp_ln86_1382_reg_1350 <= icmp_ln86_1382_fu_522_p2;
        or_ln117_1238_reg_1366 <= or_ln117_1238_fu_964_p2;
        or_ln117_1240_reg_1376 <= or_ln117_1240_fu_986_p2;
        select_ln117_1329_reg_1371 <= select_ln117_1329_fu_978_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1187_p57 = 'bx;

assign agg_result_fu_1187_p58 = ((or_ln117_1247_fu_1165_p2[0:0] == 1'b1) ? select_ln117_1337_fu_1171_p3 : 5'd27);

assign and_ln102_1306_fu_552_p2 = (xor_ln104_fu_528_p2 & icmp_ln86_1358_fu_376_p2);

assign and_ln102_1307_fu_570_p2 = (icmp_ln86_1359_fu_382_p2 & and_ln102_fu_534_p2);

assign and_ln102_1308_fu_588_p2 = (icmp_ln86_1360_fu_388_p2 & and_ln104_fu_546_p2);

assign and_ln102_1309_fu_606_p2 = (icmp_ln86_1361_fu_394_p2 & and_ln102_1306_fu_552_p2);

assign and_ln102_1310_fu_992_p2 = (icmp_ln86_1362_reg_1307 & and_ln104_250_reg_1355);

assign and_ln102_1311_fu_624_p2 = (icmp_ln86_1363_fu_406_p2 & and_ln102_1307_fu_570_p2);

assign and_ln102_1312_fu_636_p2 = (icmp_ln86_1364_fu_412_p2 & and_ln104_251_fu_582_p2);

assign and_ln102_1313_fu_642_p2 = (icmp_ln86_1365_fu_418_p2 & and_ln102_1308_fu_588_p2);

assign and_ln102_1314_fu_648_p2 = (icmp_ln86_1366_fu_424_p2 & and_ln104_252_fu_600_p2);

assign and_ln102_1315_fu_660_p2 = (icmp_ln86_1367_fu_430_p2 & and_ln102_1309_fu_606_p2);

assign and_ln102_1316_fu_672_p2 = (icmp_ln86_1368_fu_436_p2 & and_ln104_253_fu_618_p2);

assign and_ln102_1317_fu_1011_p2 = (icmp_ln86_1369_reg_1318 & and_ln102_1310_fu_992_p2);

assign and_ln102_1318_fu_1021_p2 = (icmp_ln86_1370_reg_1324 & and_ln104_254_fu_1001_p2);

assign and_ln102_1319_fu_678_p2 = (icmp_ln86_1371_fu_454_p2 & and_ln102_1311_fu_624_p2);

assign and_ln102_1320_fu_690_p2 = (and_ln102_1331_fu_684_p2 & and_ln102_1307_fu_570_p2);

assign and_ln102_1321_fu_696_p2 = (icmp_ln86_1373_fu_466_p2 & and_ln102_1314_fu_648_p2);

assign and_ln102_1322_fu_708_p2 = (and_ln104_252_fu_600_p2 & and_ln102_1332_fu_702_p2);

assign and_ln102_1323_fu_714_p2 = (icmp_ln86_1375_fu_480_p2 & and_ln102_1315_fu_660_p2);

assign and_ln102_1324_fu_726_p2 = (and_ln102_1333_fu_720_p2 & and_ln102_1309_fu_606_p2);

assign and_ln102_1325_fu_732_p2 = (icmp_ln86_1377_fu_492_p2 & and_ln102_1316_fu_672_p2);

assign and_ln102_1326_fu_1036_p2 = (and_ln104_253_reg_1361 & and_ln102_1334_fu_1031_p2);

assign and_ln102_1327_fu_1041_p2 = (icmp_ln86_1379_reg_1335 & and_ln102_1317_fu_1011_p2);

assign and_ln102_1328_fu_1051_p2 = (and_ln102_1335_fu_1046_p2 & and_ln102_1310_fu_992_p2);

assign and_ln102_1329_fu_1057_p2 = (icmp_ln86_1381_reg_1345 & and_ln102_1318_fu_1021_p2);

assign and_ln102_1330_fu_1067_p2 = (and_ln104_254_fu_1001_p2 & and_ln102_1336_fu_1062_p2);

assign and_ln102_1331_fu_684_p2 = (xor_ln104_655_fu_630_p2 & icmp_ln86_1372_fu_460_p2);

assign and_ln102_1332_fu_702_p2 = (xor_ln104_656_fu_654_p2 & tmp_fu_472_p3);

assign and_ln102_1333_fu_720_p2 = (xor_ln104_657_fu_666_p2 & icmp_ln86_1376_fu_486_p2);

assign and_ln102_1334_fu_1031_p2 = (xor_ln104_658_fu_1006_p2 & icmp_ln86_1378_reg_1330);

assign and_ln102_1335_fu_1046_p2 = (xor_ln104_659_fu_1016_p2 & icmp_ln86_1380_reg_1340);

assign and_ln102_1336_fu_1062_p2 = (xor_ln104_660_fu_1026_p2 & icmp_ln86_1382_reg_1350);

assign and_ln102_fu_534_p2 = (icmp_ln86_fu_364_p2 & icmp_ln86_1357_fu_370_p2);

assign and_ln104_250_fu_564_p2 = (xor_ln104_fu_528_p2 & xor_ln104_650_fu_558_p2);

assign and_ln104_251_fu_582_p2 = (xor_ln104_651_fu_576_p2 & and_ln102_fu_534_p2);

assign and_ln104_252_fu_600_p2 = (xor_ln104_652_fu_594_p2 & and_ln104_fu_546_p2);

assign and_ln104_253_fu_618_p2 = (xor_ln104_653_fu_612_p2 & and_ln102_1306_fu_552_p2);

assign and_ln104_254_fu_1001_p2 = (xor_ln104_654_fu_996_p2 & and_ln104_250_reg_1355);

assign and_ln104_fu_546_p2 = (xor_ln104_649_fu_540_p2 & icmp_ln86_fu_364_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1187_p59;

assign icmp_ln86_1357_fu_370_p2 = (($signed(x_24_val) < $signed(18'd273)) ? 1'b1 : 1'b0);

assign icmp_ln86_1358_fu_376_p2 = (($signed(x_52_val) < $signed(18'd79361)) ? 1'b1 : 1'b0);

assign icmp_ln86_1359_fu_382_p2 = (($signed(x_39_val) < $signed(18'd1742)) ? 1'b1 : 1'b0);

assign icmp_ln86_1360_fu_388_p2 = (($signed(x_11_val) < $signed(18'd309)) ? 1'b1 : 1'b0);

assign icmp_ln86_1361_fu_394_p2 = (($signed(x_6_val) < $signed(18'd20563)) ? 1'b1 : 1'b0);

assign icmp_ln86_1362_fu_400_p2 = (($signed(x_6_val) < $signed(18'd29220)) ? 1'b1 : 1'b0);

assign icmp_ln86_1363_fu_406_p2 = (($signed(x_9_val) < $signed(18'd426)) ? 1'b1 : 1'b0);

assign icmp_ln86_1364_fu_412_p2 = (($signed(x_1_val) < $signed(18'd71711)) ? 1'b1 : 1'b0);

assign icmp_ln86_1365_fu_418_p2 = (($signed(x_16_val) < $signed(18'd94)) ? 1'b1 : 1'b0);

assign icmp_ln86_1366_fu_424_p2 = (($signed(x_10_val) < $signed(18'd569)) ? 1'b1 : 1'b0);

assign icmp_ln86_1367_fu_430_p2 = (($signed(x_52_val) < $signed(18'd59905)) ? 1'b1 : 1'b0);

assign icmp_ln86_1368_fu_436_p2 = (($signed(x_7_val) < $signed(18'd6436)) ? 1'b1 : 1'b0);

assign icmp_ln86_1369_fu_442_p2 = (($signed(x_1_val) < $signed(18'd26406)) ? 1'b1 : 1'b0);

assign icmp_ln86_1370_fu_448_p2 = (($signed(x_34_val) < $signed(18'd447)) ? 1'b1 : 1'b0);

assign icmp_ln86_1371_fu_454_p2 = (($signed(x_8_val) < $signed(18'd414)) ? 1'b1 : 1'b0);

assign icmp_ln86_1372_fu_460_p2 = (($signed(x_5_val) < $signed(18'd24915)) ? 1'b1 : 1'b0);

assign icmp_ln86_1373_fu_466_p2 = (($signed(x_45_val) < $signed(18'd356)) ? 1'b1 : 1'b0);

assign icmp_ln86_1375_fu_480_p2 = (($signed(x_15_val) < $signed(18'd7)) ? 1'b1 : 1'b0);

assign icmp_ln86_1376_fu_486_p2 = (($signed(x_15_val) < $signed(18'd6)) ? 1'b1 : 1'b0);

assign icmp_ln86_1377_fu_492_p2 = (($signed(x_50_val) < $signed(18'd78510)) ? 1'b1 : 1'b0);

assign icmp_ln86_1378_fu_498_p2 = (($signed(x_18_val) < $signed(18'd2745)) ? 1'b1 : 1'b0);

assign icmp_ln86_1379_fu_504_p2 = (($signed(x_7_val) < $signed(18'd6848)) ? 1'b1 : 1'b0);

assign icmp_ln86_1380_fu_510_p2 = (($signed(x_51_val) < $signed(18'd204471)) ? 1'b1 : 1'b0);

assign icmp_ln86_1381_fu_516_p2 = (($signed(x_1_val) < $signed(18'd76092)) ? 1'b1 : 1'b0);

assign icmp_ln86_1382_fu_522_p2 = (($signed(x_3_val) < $signed(18'd83193)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_364_p2 = (($signed(x_1_val) < $signed(18'd119730)) ? 1'b1 : 1'b0);

assign or_ln117_1225_fu_762_p2 = (and_ln104_251_fu_582_p2 | and_ln102_1308_fu_588_p2);

assign or_ln117_1226_fu_780_p2 = (or_ln117_1225_fu_762_p2 | and_ln102_1319_fu_678_p2);

assign or_ln117_1227_fu_794_p2 = (or_ln117_1225_fu_762_p2 | and_ln102_1311_fu_624_p2);

assign or_ln117_1228_fu_808_p2 = (or_ln117_1227_fu_794_p2 | and_ln102_1320_fu_690_p2);

assign or_ln117_1229_fu_822_p2 = (and_ln102_fu_534_p2 | and_ln102_1308_fu_588_p2);

assign or_ln117_1230_fu_840_p2 = (or_ln117_1229_fu_822_p2 | and_ln102_1321_fu_696_p2);

assign or_ln117_1231_fu_854_p2 = (or_ln117_1229_fu_822_p2 | and_ln102_1314_fu_648_p2);

assign or_ln117_1232_fu_868_p2 = (or_ln117_1231_fu_854_p2 | and_ln102_1322_fu_708_p2);

assign or_ln117_1233_fu_890_p2 = (icmp_ln86_fu_364_p2 | and_ln102_1323_fu_714_p2);

assign or_ln117_1234_fu_904_p2 = (icmp_ln86_fu_364_p2 | and_ln102_1315_fu_660_p2);

assign or_ln117_1235_fu_918_p2 = (or_ln117_1234_fu_904_p2 | and_ln102_1324_fu_726_p2);

assign or_ln117_1236_fu_932_p2 = (icmp_ln86_fu_364_p2 | and_ln102_1309_fu_606_p2);

assign or_ln117_1237_fu_950_p2 = (or_ln117_1236_fu_932_p2 | and_ln102_1325_fu_732_p2);

assign or_ln117_1238_fu_964_p2 = (or_ln117_1236_fu_932_p2 | and_ln102_1316_fu_672_p2);

assign or_ln117_1239_fu_1073_p2 = (or_ln117_1238_reg_1366 | and_ln102_1326_fu_1036_p2);

assign or_ln117_1240_fu_986_p2 = (icmp_ln86_fu_364_p2 | and_ln102_1306_fu_552_p2);

assign or_ln117_1241_fu_1085_p2 = (or_ln117_1240_reg_1376 | and_ln102_1327_fu_1041_p2);

assign or_ln117_1242_fu_1097_p2 = (or_ln117_1240_reg_1376 | and_ln102_1317_fu_1011_p2);

assign or_ln117_1243_fu_1110_p2 = (or_ln117_1242_fu_1097_p2 | and_ln102_1328_fu_1051_p2);

assign or_ln117_1244_fu_1124_p2 = (or_ln117_1240_reg_1376 | and_ln102_1310_fu_992_p2);

assign or_ln117_1245_fu_1137_p2 = (or_ln117_1244_fu_1124_p2 | and_ln102_1329_fu_1057_p2);

assign or_ln117_1246_fu_1151_p2 = (or_ln117_1244_fu_1124_p2 | and_ln102_1318_fu_1021_p2);

assign or_ln117_1247_fu_1165_p2 = (or_ln117_1246_fu_1151_p2 | and_ln102_1330_fu_1067_p2);

assign or_ln117_fu_748_p2 = (and_ln104_251_fu_582_p2 | and_ln102_1313_fu_642_p2);

assign select_ln117_1314_fu_768_p3 = ((or_ln117_fu_748_p2[0:0] == 1'b1) ? select_ln117_fu_754_p3 : 2'd3);

assign select_ln117_1315_fu_786_p3 = ((or_ln117_1225_fu_762_p2[0:0] == 1'b1) ? zext_ln117_145_fu_776_p1 : 3'd4);

assign select_ln117_1316_fu_800_p3 = ((or_ln117_1226_fu_780_p2[0:0] == 1'b1) ? select_ln117_1315_fu_786_p3 : 3'd5);

assign select_ln117_1317_fu_814_p3 = ((or_ln117_1227_fu_794_p2[0:0] == 1'b1) ? select_ln117_1316_fu_800_p3 : 3'd6);

assign select_ln117_1318_fu_828_p3 = ((or_ln117_1228_fu_808_p2[0:0] == 1'b1) ? select_ln117_1317_fu_814_p3 : 3'd7);

assign select_ln117_1319_fu_846_p3 = ((or_ln117_1229_fu_822_p2[0:0] == 1'b1) ? zext_ln117_146_fu_836_p1 : 4'd8);

assign select_ln117_1320_fu_860_p3 = ((or_ln117_1230_fu_840_p2[0:0] == 1'b1) ? select_ln117_1319_fu_846_p3 : 4'd9);

assign select_ln117_1321_fu_874_p3 = ((or_ln117_1231_fu_854_p2[0:0] == 1'b1) ? select_ln117_1320_fu_860_p3 : 4'd10);

assign select_ln117_1322_fu_882_p3 = ((or_ln117_1232_fu_868_p2[0:0] == 1'b1) ? select_ln117_1321_fu_874_p3 : 4'd11);

assign select_ln117_1323_fu_896_p3 = ((icmp_ln86_fu_364_p2[0:0] == 1'b1) ? select_ln117_1322_fu_882_p3 : 4'd12);

assign select_ln117_1324_fu_910_p3 = ((or_ln117_1233_fu_890_p2[0:0] == 1'b1) ? select_ln117_1323_fu_896_p3 : 4'd13);

assign select_ln117_1325_fu_924_p3 = ((or_ln117_1234_fu_904_p2[0:0] == 1'b1) ? select_ln117_1324_fu_910_p3 : 4'd14);

assign select_ln117_1326_fu_938_p3 = ((or_ln117_1235_fu_918_p2[0:0] == 1'b1) ? select_ln117_1325_fu_924_p3 : 4'd15);

assign select_ln117_1327_fu_956_p3 = ((or_ln117_1236_fu_932_p2[0:0] == 1'b1) ? zext_ln117_147_fu_946_p1 : 5'd16);

assign select_ln117_1328_fu_970_p3 = ((or_ln117_1237_fu_950_p2[0:0] == 1'b1) ? select_ln117_1327_fu_956_p3 : 5'd17);

assign select_ln117_1329_fu_978_p3 = ((or_ln117_1238_fu_964_p2[0:0] == 1'b1) ? select_ln117_1328_fu_970_p3 : 5'd18);

assign select_ln117_1330_fu_1078_p3 = ((or_ln117_1239_fu_1073_p2[0:0] == 1'b1) ? select_ln117_1329_reg_1371 : 5'd19);

assign select_ln117_1331_fu_1090_p3 = ((or_ln117_1240_reg_1376[0:0] == 1'b1) ? select_ln117_1330_fu_1078_p3 : 5'd20);

assign select_ln117_1332_fu_1102_p3 = ((or_ln117_1241_fu_1085_p2[0:0] == 1'b1) ? select_ln117_1331_fu_1090_p3 : 5'd21);

assign select_ln117_1333_fu_1116_p3 = ((or_ln117_1242_fu_1097_p2[0:0] == 1'b1) ? select_ln117_1332_fu_1102_p3 : 5'd22);

assign select_ln117_1334_fu_1129_p3 = ((or_ln117_1243_fu_1110_p2[0:0] == 1'b1) ? select_ln117_1333_fu_1116_p3 : 5'd23);

assign select_ln117_1335_fu_1143_p3 = ((or_ln117_1244_fu_1124_p2[0:0] == 1'b1) ? select_ln117_1334_fu_1129_p3 : 5'd24);

assign select_ln117_1336_fu_1157_p3 = ((or_ln117_1245_fu_1137_p2[0:0] == 1'b1) ? select_ln117_1335_fu_1143_p3 : 5'd25);

assign select_ln117_1337_fu_1171_p3 = ((or_ln117_1246_fu_1151_p2[0:0] == 1'b1) ? select_ln117_1336_fu_1157_p3 : 5'd26);

assign select_ln117_fu_754_p3 = ((and_ln104_251_fu_582_p2[0:0] == 1'b1) ? zext_ln117_fu_744_p1 : 2'd2);

assign tmp_fu_472_p3 = x_51_val[32'd17];

assign xor_ln104_649_fu_540_p2 = (icmp_ln86_1357_fu_370_p2 ^ 1'd1);

assign xor_ln104_650_fu_558_p2 = (icmp_ln86_1358_fu_376_p2 ^ 1'd1);

assign xor_ln104_651_fu_576_p2 = (icmp_ln86_1359_fu_382_p2 ^ 1'd1);

assign xor_ln104_652_fu_594_p2 = (icmp_ln86_1360_fu_388_p2 ^ 1'd1);

assign xor_ln104_653_fu_612_p2 = (icmp_ln86_1361_fu_394_p2 ^ 1'd1);

assign xor_ln104_654_fu_996_p2 = (icmp_ln86_1362_reg_1307 ^ 1'd1);

assign xor_ln104_655_fu_630_p2 = (icmp_ln86_1363_fu_406_p2 ^ 1'd1);

assign xor_ln104_656_fu_654_p2 = (icmp_ln86_1366_fu_424_p2 ^ 1'd1);

assign xor_ln104_657_fu_666_p2 = (icmp_ln86_1367_fu_430_p2 ^ 1'd1);

assign xor_ln104_658_fu_1006_p2 = (icmp_ln86_1368_reg_1313 ^ 1'd1);

assign xor_ln104_659_fu_1016_p2 = (icmp_ln86_1369_reg_1318 ^ 1'd1);

assign xor_ln104_660_fu_1026_p2 = (icmp_ln86_1370_reg_1324 ^ 1'd1);

assign xor_ln104_fu_528_p2 = (icmp_ln86_fu_364_p2 ^ 1'd1);

assign xor_ln117_fu_738_p2 = (1'd1 ^ and_ln102_1312_fu_636_p2);

assign zext_ln117_145_fu_776_p1 = select_ln117_1314_fu_768_p3;

assign zext_ln117_146_fu_836_p1 = select_ln117_1318_fu_828_p3;

assign zext_ln117_147_fu_946_p1 = select_ln117_1326_fu_938_p3;

assign zext_ln117_fu_744_p1 = xor_ln117_fu_738_p2;

endmodule //my_prj_decision_function_51
