// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_69 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_2_val,
        x_5_val,
        x_9_val,
        x_10_val,
        x_11_val,
        x_16_val,
        x_18_val,
        x_26_val,
        x_29_val,
        x_32_val,
        x_33_val,
        x_38_val,
        x_39_val,
        x_44_val,
        x_48_val,
        x_49_val,
        x_50_val,
        x_51_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_2_val;
input  [17:0] x_5_val;
input  [17:0] x_9_val;
input  [17:0] x_10_val;
input  [17:0] x_11_val;
input  [17:0] x_16_val;
input  [17:0] x_18_val;
input  [17:0] x_26_val;
input  [17:0] x_29_val;
input  [17:0] x_32_val;
input  [17:0] x_33_val;
input  [17:0] x_38_val;
input  [17:0] x_39_val;
input  [17:0] x_44_val;
input  [17:0] x_48_val;
input  [17:0] x_49_val;
input  [17:0] x_50_val;
input  [17:0] x_51_val;
input  [17:0] x_52_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_865_fu_414_p2;
reg   [0:0] icmp_ln86_865_reg_1425;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_870_fu_444_p2;
reg   [0:0] icmp_ln86_870_reg_1431;
wire   [0:0] icmp_ln86_871_fu_450_p2;
reg   [0:0] icmp_ln86_871_reg_1437;
wire   [0:0] icmp_ln86_872_fu_456_p2;
reg   [0:0] icmp_ln86_872_reg_1443;
wire   [0:0] icmp_ln86_880_fu_512_p2;
reg   [0:0] icmp_ln86_880_reg_1449;
wire   [0:0] icmp_ln86_881_fu_518_p2;
reg   [0:0] icmp_ln86_881_reg_1454;
wire   [0:0] icmp_ln86_882_fu_524_p2;
reg   [0:0] icmp_ln86_882_reg_1459;
wire   [0:0] icmp_ln86_883_fu_530_p2;
reg   [0:0] icmp_ln86_883_reg_1464;
wire   [0:0] icmp_ln86_884_fu_536_p2;
reg   [0:0] icmp_ln86_884_reg_1469;
wire   [0:0] icmp_ln86_885_fu_542_p2;
reg   [0:0] icmp_ln86_885_reg_1474;
wire   [0:0] icmp_ln86_886_fu_548_p2;
reg   [0:0] icmp_ln86_886_reg_1479;
wire   [0:0] icmp_ln86_887_fu_554_p2;
reg   [0:0] icmp_ln86_887_reg_1484;
wire   [0:0] and_ln102_fu_578_p2;
reg   [0:0] and_ln102_reg_1489;
wire   [0:0] and_ln104_156_fu_626_p2;
reg   [0:0] and_ln104_156_reg_1496;
wire   [0:0] and_ln102_1066_fu_686_p2;
reg   [0:0] and_ln102_1066_reg_1502;
wire   [0:0] and_ln104_160_fu_716_p2;
reg   [0:0] and_ln104_160_reg_1508;
wire   [0:0] or_ln117_770_fu_960_p2;
reg   [0:0] or_ln117_770_reg_1514;
wire   [3:0] select_ln117_845_fu_974_p3;
reg   [3:0] select_ln117_845_reg_1520;
wire   [0:0] or_ln117_774_fu_982_p2;
reg   [0:0] or_ln117_774_reg_1525;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln86_fu_384_p2;
wire   [0:0] icmp_ln86_861_fu_390_p2;
wire   [0:0] xor_ln104_407_fu_566_p2;
wire   [0:0] icmp_ln86_862_fu_396_p2;
wire   [0:0] xor_ln104_fu_560_p2;
wire   [0:0] xor_ln104_408_fu_584_p2;
wire   [0:0] icmp_ln86_863_fu_402_p2;
wire   [0:0] xor_ln104_409_fu_602_p2;
wire   [0:0] icmp_ln86_864_fu_408_p2;
wire   [0:0] and_ln104_fu_572_p2;
wire   [0:0] xor_ln104_410_fu_620_p2;
wire   [0:0] icmp_ln86_866_fu_420_p2;
wire   [0:0] and_ln104_154_fu_590_p2;
wire   [0:0] xor_ln104_412_fu_638_p2;
wire   [0:0] icmp_ln86_867_fu_426_p2;
wire   [0:0] and_ln102_1056_fu_596_p2;
wire   [0:0] icmp_ln86_868_fu_432_p2;
wire   [0:0] and_ln104_155_fu_608_p2;
wire   [0:0] icmp_ln86_869_fu_438_p2;
wire   [0:0] and_ln102_1057_fu_614_p2;
wire   [0:0] icmp_ln86_873_fu_462_p2;
wire   [0:0] and_ln102_1059_fu_632_p2;
wire   [0:0] xor_ln104_419_fu_692_p2;
wire   [0:0] icmp_ln86_874_fu_468_p2;
wire   [0:0] and_ln104_158_fu_644_p2;
wire   [0:0] xor_ln104_420_fu_710_p2;
wire   [0:0] icmp_ln86_875_fu_474_p2;
wire   [0:0] and_ln102_1060_fu_650_p2;
wire   [0:0] icmp_ln86_876_fu_480_p2;
wire   [0:0] xor_ln104_413_fu_656_p2;
wire   [0:0] and_ln102_1069_fu_728_p2;
wire   [0:0] tmp_12_fu_486_p3;
wire   [0:0] and_ln102_1061_fu_662_p2;
wire   [0:0] icmp_ln86_877_fu_494_p2;
wire   [0:0] xor_ln104_414_fu_668_p2;
wire   [0:0] and_ln102_1072_fu_746_p2;
wire   [0:0] icmp_ln86_878_fu_500_p2;
wire   [0:0] and_ln102_1062_fu_674_p2;
wire   [0:0] icmp_ln86_879_fu_506_p2;
wire   [0:0] xor_ln104_415_fu_680_p2;
wire   [0:0] and_ln102_1075_fu_764_p2;
wire   [0:0] and_ln104_159_fu_698_p2;
wire   [0:0] and_ln102_1067_fu_704_p2;
wire   [0:0] xor_ln117_fu_782_p2;
wire   [0:0] or_ln117_758_fu_788_p2;
wire   [0:0] or_ln117_fu_776_p2;
wire   [0:0] and_ln102_1068_fu_722_p2;
wire   [1:0] zext_ln117_fu_794_p1;
wire   [0:0] or_ln117_759_fu_798_p2;
wire   [1:0] select_ln117_fu_804_p3;
wire   [1:0] select_ln117_834_fu_818_p3;
wire   [0:0] or_ln117_760_fu_812_p2;
wire   [0:0] and_ln102_1070_fu_734_p2;
wire   [2:0] zext_ln117_91_fu_826_p1;
wire   [0:0] or_ln117_761_fu_830_p2;
wire   [2:0] select_ln117_835_fu_836_p3;
wire   [0:0] or_ln117_762_fu_844_p2;
wire   [0:0] and_ln102_1071_fu_740_p2;
wire   [2:0] select_ln117_836_fu_850_p3;
wire   [0:0] or_ln117_763_fu_858_p2;
wire   [2:0] select_ln117_837_fu_864_p3;
wire   [2:0] select_ln117_838_fu_878_p3;
wire   [0:0] or_ln117_764_fu_872_p2;
wire   [0:0] and_ln102_1073_fu_752_p2;
wire   [3:0] zext_ln117_92_fu_886_p1;
wire   [0:0] or_ln117_765_fu_890_p2;
wire   [3:0] select_ln117_839_fu_896_p3;
wire   [0:0] or_ln117_766_fu_904_p2;
wire   [0:0] and_ln102_1074_fu_758_p2;
wire   [3:0] select_ln117_840_fu_910_p3;
wire   [0:0] or_ln117_767_fu_918_p2;
wire   [3:0] select_ln117_841_fu_924_p3;
wire   [0:0] or_ln117_768_fu_932_p2;
wire   [0:0] and_ln102_1076_fu_770_p2;
wire   [3:0] select_ln117_842_fu_938_p3;
wire   [0:0] or_ln117_769_fu_946_p2;
wire   [3:0] select_ln117_843_fu_952_p3;
wire   [3:0] select_ln117_844_fu_966_p3;
wire   [0:0] xor_ln104_411_fu_992_p2;
wire   [0:0] and_ln102_1058_fu_988_p2;
wire   [0:0] and_ln104_157_fu_997_p2;
wire   [0:0] and_ln102_1063_fu_1002_p2;
wire   [0:0] xor_ln104_416_fu_1006_p2;
wire   [0:0] and_ln102_1078_fu_1036_p2;
wire   [0:0] and_ln102_1064_fu_1011_p2;
wire   [0:0] xor_ln104_417_fu_1016_p2;
wire   [0:0] and_ln102_1081_fu_1051_p2;
wire   [0:0] and_ln102_1065_fu_1021_p2;
wire   [0:0] xor_ln104_418_fu_1026_p2;
wire   [0:0] and_ln102_1084_fu_1067_p2;
wire   [0:0] and_ln102_1077_fu_1031_p2;
wire   [0:0] or_ln117_771_fu_1086_p2;
wire   [3:0] select_ln117_846_fu_1096_p3;
wire   [0:0] or_ln117_772_fu_1091_p2;
wire   [0:0] and_ln102_1079_fu_1041_p2;
wire   [4:0] zext_ln117_93_fu_1103_p1;
wire   [0:0] or_ln117_773_fu_1107_p2;
wire   [4:0] select_ln117_847_fu_1113_p3;
wire   [0:0] and_ln102_1080_fu_1046_p2;
wire   [4:0] select_ln117_848_fu_1121_p3;
wire   [0:0] or_ln117_775_fu_1129_p2;
wire   [4:0] select_ln117_849_fu_1134_p3;
wire   [0:0] or_ln117_776_fu_1141_p2;
wire   [0:0] and_ln102_1082_fu_1056_p2;
wire   [4:0] select_ln117_850_fu_1146_p3;
wire   [0:0] or_ln117_777_fu_1154_p2;
wire   [4:0] select_ln117_851_fu_1160_p3;
wire   [0:0] or_ln117_778_fu_1168_p2;
wire   [0:0] and_ln102_1083_fu_1062_p2;
wire   [4:0] select_ln117_852_fu_1173_p3;
wire   [0:0] or_ln117_779_fu_1181_p2;
wire   [4:0] select_ln117_853_fu_1187_p3;
wire   [0:0] or_ln117_780_fu_1195_p2;
wire   [0:0] and_ln102_1085_fu_1072_p2;
wire   [4:0] select_ln117_854_fu_1201_p3;
wire   [0:0] or_ln117_781_fu_1209_p2;
wire   [4:0] select_ln117_855_fu_1215_p3;
wire   [0:0] or_ln117_782_fu_1223_p2;
wire   [0:0] and_ln102_1086_fu_1078_p2;
wire   [4:0] select_ln117_856_fu_1227_p3;
wire   [0:0] or_ln117_783_fu_1235_p2;
wire   [4:0] select_ln117_857_fu_1241_p3;
wire   [0:0] or_ln117_784_fu_1249_p2;
wire   [0:0] and_ln102_1087_fu_1082_p2;
wire   [4:0] select_ln117_858_fu_1254_p3;
wire   [0:0] or_ln117_785_fu_1262_p2;
wire   [4:0] select_ln117_859_fu_1268_p3;
wire   [11:0] tmp_fu_1289_p61;
wire   [4:0] tmp_fu_1289_p62;
wire   [0:0] or_ln117_786_fu_1276_p2;
wire   [11:0] tmp_fu_1289_p63;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] tmp_fu_1289_p1;
wire   [4:0] tmp_fu_1289_p3;
wire   [4:0] tmp_fu_1289_p5;
wire   [4:0] tmp_fu_1289_p7;
wire   [4:0] tmp_fu_1289_p9;
wire   [4:0] tmp_fu_1289_p11;
wire   [4:0] tmp_fu_1289_p13;
wire   [4:0] tmp_fu_1289_p15;
wire   [4:0] tmp_fu_1289_p17;
wire   [4:0] tmp_fu_1289_p19;
wire   [4:0] tmp_fu_1289_p21;
wire   [4:0] tmp_fu_1289_p23;
wire   [4:0] tmp_fu_1289_p25;
wire   [4:0] tmp_fu_1289_p27;
wire   [4:0] tmp_fu_1289_p29;
wire   [4:0] tmp_fu_1289_p31;
wire  signed [4:0] tmp_fu_1289_p33;
wire  signed [4:0] tmp_fu_1289_p35;
wire  signed [4:0] tmp_fu_1289_p37;
wire  signed [4:0] tmp_fu_1289_p39;
wire  signed [4:0] tmp_fu_1289_p41;
wire  signed [4:0] tmp_fu_1289_p43;
wire  signed [4:0] tmp_fu_1289_p45;
wire  signed [4:0] tmp_fu_1289_p47;
wire  signed [4:0] tmp_fu_1289_p49;
wire  signed [4:0] tmp_fu_1289_p51;
wire  signed [4:0] tmp_fu_1289_p53;
wire  signed [4:0] tmp_fu_1289_p55;
wire  signed [4:0] tmp_fu_1289_p57;
wire  signed [4:0] tmp_fu_1289_p59;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_61_5_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 12 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 12 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_61_5_12_1_1_U740(
    .din0(12'd3365),
    .din1(12'd4083),
    .din2(12'd255),
    .din3(12'd3651),
    .din4(12'd3571),
    .din5(12'd37),
    .din6(12'd590),
    .din7(12'd3569),
    .din8(12'd232),
    .din9(12'd857),
    .din10(12'd1244),
    .din11(12'd3657),
    .din12(12'd3767),
    .din13(12'd291),
    .din14(12'd3474),
    .din15(12'd4059),
    .din16(12'd4077),
    .din17(12'd3597),
    .din18(12'd172),
    .din19(12'd3880),
    .din20(12'd4071),
    .din21(12'd461),
    .din22(12'd108),
    .din23(12'd423),
    .din24(12'd4083),
    .din25(12'd66),
    .din26(12'd465),
    .din27(12'd4088),
    .din28(12'd47),
    .din29(12'd850),
    .def(tmp_fu_1289_p61),
    .sel(tmp_fu_1289_p62),
    .dout(tmp_fu_1289_p63)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln102_1066_reg_1502 <= and_ln102_1066_fu_686_p2;
        and_ln102_reg_1489 <= and_ln102_fu_578_p2;
        and_ln104_156_reg_1496 <= and_ln104_156_fu_626_p2;
        and_ln104_160_reg_1508 <= and_ln104_160_fu_716_p2;
        icmp_ln86_865_reg_1425 <= icmp_ln86_865_fu_414_p2;
        icmp_ln86_870_reg_1431 <= icmp_ln86_870_fu_444_p2;
        icmp_ln86_871_reg_1437 <= icmp_ln86_871_fu_450_p2;
        icmp_ln86_872_reg_1443 <= icmp_ln86_872_fu_456_p2;
        icmp_ln86_880_reg_1449 <= icmp_ln86_880_fu_512_p2;
        icmp_ln86_881_reg_1454 <= icmp_ln86_881_fu_518_p2;
        icmp_ln86_882_reg_1459 <= icmp_ln86_882_fu_524_p2;
        icmp_ln86_883_reg_1464 <= icmp_ln86_883_fu_530_p2;
        icmp_ln86_884_reg_1469 <= icmp_ln86_884_fu_536_p2;
        icmp_ln86_885_reg_1474 <= icmp_ln86_885_fu_542_p2;
        icmp_ln86_886_reg_1479 <= icmp_ln86_886_fu_548_p2;
        icmp_ln86_887_reg_1484 <= icmp_ln86_887_fu_554_p2;
        or_ln117_770_reg_1514 <= or_ln117_770_fu_960_p2;
        or_ln117_774_reg_1525 <= or_ln117_774_fu_982_p2;
        select_ln117_845_reg_1520 <= select_ln117_845_fu_974_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln102_1056_fu_596_p2 = (icmp_ln86_863_fu_402_p2 & icmp_ln86_861_fu_390_p2);

assign and_ln102_1057_fu_614_p2 = (icmp_ln86_864_fu_408_p2 & and_ln104_fu_572_p2);

assign and_ln102_1058_fu_988_p2 = (icmp_ln86_865_reg_1425 & and_ln102_reg_1489);

assign and_ln102_1059_fu_632_p2 = (icmp_ln86_866_fu_420_p2 & and_ln104_154_fu_590_p2);

assign and_ln102_1060_fu_650_p2 = (icmp_ln86_867_fu_426_p2 & and_ln102_1056_fu_596_p2);

assign and_ln102_1061_fu_662_p2 = (icmp_ln86_868_fu_432_p2 & and_ln104_155_fu_608_p2);

assign and_ln102_1062_fu_674_p2 = (icmp_ln86_869_fu_438_p2 & and_ln102_1057_fu_614_p2);

assign and_ln102_1063_fu_1002_p2 = (icmp_ln86_870_reg_1431 & and_ln104_156_reg_1496);

assign and_ln102_1064_fu_1011_p2 = (icmp_ln86_871_reg_1437 & and_ln102_1058_fu_988_p2);

assign and_ln102_1065_fu_1021_p2 = (icmp_ln86_872_reg_1443 & and_ln104_157_fu_997_p2);

assign and_ln102_1066_fu_686_p2 = (icmp_ln86_873_fu_462_p2 & and_ln102_1059_fu_632_p2);

assign and_ln102_1067_fu_704_p2 = (icmp_ln86_874_fu_468_p2 & and_ln104_158_fu_644_p2);

assign and_ln102_1068_fu_722_p2 = (icmp_ln86_875_fu_474_p2 & and_ln102_1060_fu_650_p2);

assign and_ln102_1069_fu_728_p2 = (xor_ln104_413_fu_656_p2 & icmp_ln86_876_fu_480_p2);

assign and_ln102_1070_fu_734_p2 = (and_ln102_1069_fu_728_p2 & and_ln102_1056_fu_596_p2);

assign and_ln102_1071_fu_740_p2 = (tmp_12_fu_486_p3 & and_ln102_1061_fu_662_p2);

assign and_ln102_1072_fu_746_p2 = (xor_ln104_414_fu_668_p2 & icmp_ln86_877_fu_494_p2);

assign and_ln102_1073_fu_752_p2 = (and_ln104_155_fu_608_p2 & and_ln102_1072_fu_746_p2);

assign and_ln102_1074_fu_758_p2 = (icmp_ln86_878_fu_500_p2 & and_ln102_1062_fu_674_p2);

assign and_ln102_1075_fu_764_p2 = (xor_ln104_415_fu_680_p2 & icmp_ln86_879_fu_506_p2);

assign and_ln102_1076_fu_770_p2 = (and_ln102_1075_fu_764_p2 & and_ln102_1057_fu_614_p2);

assign and_ln102_1077_fu_1031_p2 = (icmp_ln86_880_reg_1449 & and_ln102_1063_fu_1002_p2);

assign and_ln102_1078_fu_1036_p2 = (xor_ln104_416_fu_1006_p2 & icmp_ln86_881_reg_1454);

assign and_ln102_1079_fu_1041_p2 = (and_ln104_156_reg_1496 & and_ln102_1078_fu_1036_p2);

assign and_ln102_1080_fu_1046_p2 = (icmp_ln86_882_reg_1459 & and_ln102_1064_fu_1011_p2);

assign and_ln102_1081_fu_1051_p2 = (xor_ln104_417_fu_1016_p2 & icmp_ln86_883_reg_1464);

assign and_ln102_1082_fu_1056_p2 = (and_ln102_1081_fu_1051_p2 & and_ln102_1058_fu_988_p2);

assign and_ln102_1083_fu_1062_p2 = (icmp_ln86_884_reg_1469 & and_ln102_1065_fu_1021_p2);

assign and_ln102_1084_fu_1067_p2 = (xor_ln104_418_fu_1026_p2 & icmp_ln86_885_reg_1474);

assign and_ln102_1085_fu_1072_p2 = (and_ln104_157_fu_997_p2 & and_ln102_1084_fu_1067_p2);

assign and_ln102_1086_fu_1078_p2 = (icmp_ln86_886_reg_1479 & and_ln102_1066_reg_1502);

assign and_ln102_1087_fu_1082_p2 = (icmp_ln86_887_reg_1484 & and_ln104_160_reg_1508);

assign and_ln102_fu_578_p2 = (xor_ln104_fu_560_p2 & icmp_ln86_862_fu_396_p2);

assign and_ln104_154_fu_590_p2 = (xor_ln104_fu_560_p2 & xor_ln104_408_fu_584_p2);

assign and_ln104_155_fu_608_p2 = (xor_ln104_409_fu_602_p2 & icmp_ln86_861_fu_390_p2);

assign and_ln104_156_fu_626_p2 = (xor_ln104_410_fu_620_p2 & and_ln104_fu_572_p2);

assign and_ln104_157_fu_997_p2 = (xor_ln104_411_fu_992_p2 & and_ln102_reg_1489);

assign and_ln104_158_fu_644_p2 = (xor_ln104_412_fu_638_p2 & and_ln104_154_fu_590_p2);

assign and_ln104_159_fu_698_p2 = (xor_ln104_419_fu_692_p2 & and_ln102_1059_fu_632_p2);

assign and_ln104_160_fu_716_p2 = (xor_ln104_420_fu_710_p2 & and_ln104_158_fu_644_p2);

assign and_ln104_fu_572_p2 = (xor_ln104_407_fu_566_p2 & icmp_ln86_fu_384_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((or_ln117_786_fu_1276_p2[0:0] == 1'b1) ? tmp_fu_1289_p63 : 12'd0);

assign icmp_ln86_861_fu_390_p2 = (($signed(x_2_val) < $signed(18'd261421)) ? 1'b1 : 1'b0);

assign icmp_ln86_862_fu_396_p2 = (($signed(x_2_val) < $signed(18'd2128)) ? 1'b1 : 1'b0);

assign icmp_ln86_863_fu_402_p2 = (($signed(x_39_val) < $signed(18'd2809)) ? 1'b1 : 1'b0);

assign icmp_ln86_864_fu_408_p2 = (($signed(x_10_val) < $signed(18'd400)) ? 1'b1 : 1'b0);

assign icmp_ln86_865_fu_414_p2 = (($signed(x_16_val) < $signed(18'd48)) ? 1'b1 : 1'b0);

assign icmp_ln86_866_fu_420_p2 = (($signed(x_26_val) < $signed(18'd2748)) ? 1'b1 : 1'b0);

assign icmp_ln86_867_fu_426_p2 = (($signed(x_2_val) < $signed(18'd260346)) ? 1'b1 : 1'b0);

assign icmp_ln86_868_fu_432_p2 = (($signed(x_11_val) < $signed(18'd470)) ? 1'b1 : 1'b0);

assign icmp_ln86_869_fu_438_p2 = (($signed(x_50_val) < $signed(18'd76215)) ? 1'b1 : 1'b0);

assign icmp_ln86_870_fu_444_p2 = (($signed(x_51_val) < $signed(18'd262137)) ? 1'b1 : 1'b0);

assign icmp_ln86_871_fu_450_p2 = (($signed(x_9_val) < $signed(18'd525)) ? 1'b1 : 1'b0);

assign icmp_ln86_872_fu_456_p2 = (($signed(x_48_val) < $signed(18'd3119)) ? 1'b1 : 1'b0);

assign icmp_ln86_873_fu_462_p2 = (($signed(x_5_val) < $signed(18'd10873)) ? 1'b1 : 1'b0);

assign icmp_ln86_874_fu_468_p2 = (($signed(x_11_val) < $signed(18'd406)) ? 1'b1 : 1'b0);

assign icmp_ln86_875_fu_474_p2 = (($signed(x_38_val) < $signed(18'd26)) ? 1'b1 : 1'b0);

assign icmp_ln86_876_fu_480_p2 = (($signed(x_51_val) < $signed(18'd262116)) ? 1'b1 : 1'b0);

assign icmp_ln86_877_fu_494_p2 = (($signed(x_48_val) < $signed(18'd46610)) ? 1'b1 : 1'b0);

assign icmp_ln86_878_fu_500_p2 = (($signed(x_10_val) < $signed(18'd372)) ? 1'b1 : 1'b0);

assign icmp_ln86_879_fu_506_p2 = (($signed(x_49_val) < $signed(18'd211598)) ? 1'b1 : 1'b0);

assign icmp_ln86_880_fu_512_p2 = (($signed(x_18_val) < $signed(18'd5454)) ? 1'b1 : 1'b0);

assign icmp_ln86_881_fu_518_p2 = (($signed(x_1_val) < $signed(18'd184174)) ? 1'b1 : 1'b0);

assign icmp_ln86_882_fu_524_p2 = (($signed(x_29_val) < $signed(18'd5213)) ? 1'b1 : 1'b0);

assign icmp_ln86_883_fu_530_p2 = (($signed(x_44_val) < $signed(18'd13)) ? 1'b1 : 1'b0);

assign icmp_ln86_884_fu_536_p2 = (($signed(x_52_val) < $signed(18'd44545)) ? 1'b1 : 1'b0);

assign icmp_ln86_885_fu_542_p2 = (($signed(x_33_val) < $signed(18'd587)) ? 1'b1 : 1'b0);

assign icmp_ln86_886_fu_548_p2 = (($signed(x_32_val) < $signed(18'd548)) ? 1'b1 : 1'b0);

assign icmp_ln86_887_fu_554_p2 = (($signed(x_39_val) < $signed(18'd982)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_384_p2 = (($signed(x_2_val) < $signed(18'd879)) ? 1'b1 : 1'b0);

assign or_ln117_758_fu_788_p2 = (xor_ln117_fu_782_p2 | icmp_ln86_873_fu_462_p2);

assign or_ln117_759_fu_798_p2 = (or_ln117_fu_776_p2 | and_ln102_1068_fu_722_p2);

assign or_ln117_760_fu_812_p2 = (or_ln117_fu_776_p2 | and_ln102_1060_fu_650_p2);

assign or_ln117_761_fu_830_p2 = (or_ln117_760_fu_812_p2 | and_ln102_1070_fu_734_p2);

assign or_ln117_762_fu_844_p2 = (or_ln117_fu_776_p2 | and_ln102_1056_fu_596_p2);

assign or_ln117_763_fu_858_p2 = (or_ln117_762_fu_844_p2 | and_ln102_1071_fu_740_p2);

assign or_ln117_764_fu_872_p2 = (or_ln117_762_fu_844_p2 | and_ln102_1061_fu_662_p2);

assign or_ln117_765_fu_890_p2 = (or_ln117_764_fu_872_p2 | and_ln102_1073_fu_752_p2);

assign or_ln117_766_fu_904_p2 = (or_ln117_fu_776_p2 | icmp_ln86_861_fu_390_p2);

assign or_ln117_767_fu_918_p2 = (or_ln117_766_fu_904_p2 | and_ln102_1074_fu_758_p2);

assign or_ln117_768_fu_932_p2 = (or_ln117_766_fu_904_p2 | and_ln102_1062_fu_674_p2);

assign or_ln117_769_fu_946_p2 = (or_ln117_768_fu_932_p2 | and_ln102_1076_fu_770_p2);

assign or_ln117_770_fu_960_p2 = (or_ln117_766_fu_904_p2 | and_ln102_1057_fu_614_p2);

assign or_ln117_771_fu_1086_p2 = (or_ln117_770_reg_1514 | and_ln102_1077_fu_1031_p2);

assign or_ln117_772_fu_1091_p2 = (or_ln117_770_reg_1514 | and_ln102_1063_fu_1002_p2);

assign or_ln117_773_fu_1107_p2 = (or_ln117_772_fu_1091_p2 | and_ln102_1079_fu_1041_p2);

assign or_ln117_774_fu_982_p2 = (or_ln117_766_fu_904_p2 | and_ln104_fu_572_p2);

assign or_ln117_775_fu_1129_p2 = (or_ln117_774_reg_1525 | and_ln102_1080_fu_1046_p2);

assign or_ln117_776_fu_1141_p2 = (or_ln117_774_reg_1525 | and_ln102_1064_fu_1011_p2);

assign or_ln117_777_fu_1154_p2 = (or_ln117_776_fu_1141_p2 | and_ln102_1082_fu_1056_p2);

assign or_ln117_778_fu_1168_p2 = (or_ln117_774_reg_1525 | and_ln102_1058_fu_988_p2);

assign or_ln117_779_fu_1181_p2 = (or_ln117_778_fu_1168_p2 | and_ln102_1083_fu_1062_p2);

assign or_ln117_780_fu_1195_p2 = (or_ln117_778_fu_1168_p2 | and_ln102_1065_fu_1021_p2);

assign or_ln117_781_fu_1209_p2 = (or_ln117_780_fu_1195_p2 | and_ln102_1085_fu_1072_p2);

assign or_ln117_782_fu_1223_p2 = (or_ln117_774_reg_1525 | and_ln102_reg_1489);

assign or_ln117_783_fu_1235_p2 = (or_ln117_782_fu_1223_p2 | and_ln102_1086_fu_1078_p2);

assign or_ln117_784_fu_1249_p2 = (or_ln117_782_fu_1223_p2 | and_ln102_1066_reg_1502);

assign or_ln117_785_fu_1262_p2 = (or_ln117_784_fu_1249_p2 | and_ln102_1087_fu_1082_p2);

assign or_ln117_786_fu_1276_p2 = (or_ln117_784_fu_1249_p2 | and_ln104_160_reg_1508);

assign or_ln117_fu_776_p2 = (and_ln104_159_fu_698_p2 | and_ln102_1067_fu_704_p2);

assign select_ln117_834_fu_818_p3 = ((or_ln117_759_fu_798_p2[0:0] == 1'b1) ? select_ln117_fu_804_p3 : 2'd3);

assign select_ln117_835_fu_836_p3 = ((or_ln117_760_fu_812_p2[0:0] == 1'b1) ? zext_ln117_91_fu_826_p1 : 3'd4);

assign select_ln117_836_fu_850_p3 = ((or_ln117_761_fu_830_p2[0:0] == 1'b1) ? select_ln117_835_fu_836_p3 : 3'd5);

assign select_ln117_837_fu_864_p3 = ((or_ln117_762_fu_844_p2[0:0] == 1'b1) ? select_ln117_836_fu_850_p3 : 3'd6);

assign select_ln117_838_fu_878_p3 = ((or_ln117_763_fu_858_p2[0:0] == 1'b1) ? select_ln117_837_fu_864_p3 : 3'd7);

assign select_ln117_839_fu_896_p3 = ((or_ln117_764_fu_872_p2[0:0] == 1'b1) ? zext_ln117_92_fu_886_p1 : 4'd8);

assign select_ln117_840_fu_910_p3 = ((or_ln117_765_fu_890_p2[0:0] == 1'b1) ? select_ln117_839_fu_896_p3 : 4'd9);

assign select_ln117_841_fu_924_p3 = ((or_ln117_766_fu_904_p2[0:0] == 1'b1) ? select_ln117_840_fu_910_p3 : 4'd10);

assign select_ln117_842_fu_938_p3 = ((or_ln117_767_fu_918_p2[0:0] == 1'b1) ? select_ln117_841_fu_924_p3 : 4'd11);

assign select_ln117_843_fu_952_p3 = ((or_ln117_768_fu_932_p2[0:0] == 1'b1) ? select_ln117_842_fu_938_p3 : 4'd12);

assign select_ln117_844_fu_966_p3 = ((or_ln117_769_fu_946_p2[0:0] == 1'b1) ? select_ln117_843_fu_952_p3 : 4'd13);

assign select_ln117_845_fu_974_p3 = ((or_ln117_770_fu_960_p2[0:0] == 1'b1) ? select_ln117_844_fu_966_p3 : 4'd14);

assign select_ln117_846_fu_1096_p3 = ((or_ln117_771_fu_1086_p2[0:0] == 1'b1) ? select_ln117_845_reg_1520 : 4'd15);

assign select_ln117_847_fu_1113_p3 = ((or_ln117_772_fu_1091_p2[0:0] == 1'b1) ? zext_ln117_93_fu_1103_p1 : 5'd16);

assign select_ln117_848_fu_1121_p3 = ((or_ln117_773_fu_1107_p2[0:0] == 1'b1) ? select_ln117_847_fu_1113_p3 : 5'd17);

assign select_ln117_849_fu_1134_p3 = ((or_ln117_774_reg_1525[0:0] == 1'b1) ? select_ln117_848_fu_1121_p3 : 5'd18);

assign select_ln117_850_fu_1146_p3 = ((or_ln117_775_fu_1129_p2[0:0] == 1'b1) ? select_ln117_849_fu_1134_p3 : 5'd19);

assign select_ln117_851_fu_1160_p3 = ((or_ln117_776_fu_1141_p2[0:0] == 1'b1) ? select_ln117_850_fu_1146_p3 : 5'd20);

assign select_ln117_852_fu_1173_p3 = ((or_ln117_777_fu_1154_p2[0:0] == 1'b1) ? select_ln117_851_fu_1160_p3 : 5'd21);

assign select_ln117_853_fu_1187_p3 = ((or_ln117_778_fu_1168_p2[0:0] == 1'b1) ? select_ln117_852_fu_1173_p3 : 5'd22);

assign select_ln117_854_fu_1201_p3 = ((or_ln117_779_fu_1181_p2[0:0] == 1'b1) ? select_ln117_853_fu_1187_p3 : 5'd23);

assign select_ln117_855_fu_1215_p3 = ((or_ln117_780_fu_1195_p2[0:0] == 1'b1) ? select_ln117_854_fu_1201_p3 : 5'd24);

assign select_ln117_856_fu_1227_p3 = ((or_ln117_781_fu_1209_p2[0:0] == 1'b1) ? select_ln117_855_fu_1215_p3 : 5'd25);

assign select_ln117_857_fu_1241_p3 = ((or_ln117_782_fu_1223_p2[0:0] == 1'b1) ? select_ln117_856_fu_1227_p3 : 5'd26);

assign select_ln117_858_fu_1254_p3 = ((or_ln117_783_fu_1235_p2[0:0] == 1'b1) ? select_ln117_857_fu_1241_p3 : 5'd27);

assign select_ln117_859_fu_1268_p3 = ((or_ln117_784_fu_1249_p2[0:0] == 1'b1) ? select_ln117_858_fu_1254_p3 : 5'd28);

assign select_ln117_fu_804_p3 = ((or_ln117_fu_776_p2[0:0] == 1'b1) ? zext_ln117_fu_794_p1 : 2'd2);

assign tmp_12_fu_486_p3 = x_51_val[32'd17];

assign tmp_fu_1289_p61 = 'bx;

assign tmp_fu_1289_p62 = ((or_ln117_785_fu_1262_p2[0:0] == 1'b1) ? select_ln117_859_fu_1268_p3 : 5'd29);

assign xor_ln104_407_fu_566_p2 = (icmp_ln86_861_fu_390_p2 ^ 1'd1);

assign xor_ln104_408_fu_584_p2 = (icmp_ln86_862_fu_396_p2 ^ 1'd1);

assign xor_ln104_409_fu_602_p2 = (icmp_ln86_863_fu_402_p2 ^ 1'd1);

assign xor_ln104_410_fu_620_p2 = (icmp_ln86_864_fu_408_p2 ^ 1'd1);

assign xor_ln104_411_fu_992_p2 = (icmp_ln86_865_reg_1425 ^ 1'd1);

assign xor_ln104_412_fu_638_p2 = (icmp_ln86_866_fu_420_p2 ^ 1'd1);

assign xor_ln104_413_fu_656_p2 = (icmp_ln86_867_fu_426_p2 ^ 1'd1);

assign xor_ln104_414_fu_668_p2 = (icmp_ln86_868_fu_432_p2 ^ 1'd1);

assign xor_ln104_415_fu_680_p2 = (icmp_ln86_869_fu_438_p2 ^ 1'd1);

assign xor_ln104_416_fu_1006_p2 = (icmp_ln86_870_reg_1431 ^ 1'd1);

assign xor_ln104_417_fu_1016_p2 = (icmp_ln86_871_reg_1437 ^ 1'd1);

assign xor_ln104_418_fu_1026_p2 = (icmp_ln86_872_reg_1443 ^ 1'd1);

assign xor_ln104_419_fu_692_p2 = (icmp_ln86_873_fu_462_p2 ^ 1'd1);

assign xor_ln104_420_fu_710_p2 = (icmp_ln86_874_fu_468_p2 ^ 1'd1);

assign xor_ln104_fu_560_p2 = (icmp_ln86_fu_384_p2 ^ 1'd1);

assign xor_ln117_fu_782_p2 = (1'd1 ^ and_ln102_1059_fu_632_p2);

assign zext_ln117_91_fu_826_p1 = select_ln117_834_fu_818_p3;

assign zext_ln117_92_fu_886_p1 = select_ln117_838_fu_878_p3;

assign zext_ln117_93_fu_1103_p1 = select_ln117_846_fu_1096_p3;

assign zext_ln117_fu_794_p1 = or_ln117_758_fu_788_p2;

endmodule //my_prj_decision_function_69
