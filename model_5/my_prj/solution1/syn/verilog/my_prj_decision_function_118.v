// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_118 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_5_val,
        x_7_val,
        x_9_val,
        x_10_val,
        x_11_val,
        x_18_val,
        x_23_val,
        x_39_val,
        x_47_val,
        x_49_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_5_val;
input  [17:0] x_7_val;
input  [17:0] x_9_val;
input  [17:0] x_10_val;
input  [17:0] x_11_val;
input  [17:0] x_18_val;
input  [17:0] x_23_val;
input  [17:0] x_39_val;
input  [17:0] x_47_val;
input  [17:0] x_49_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_1547_fu_290_p2;
reg   [0:0] icmp_ln86_1547_reg_1054;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_1552_fu_320_p2;
reg   [0:0] icmp_ln86_1552_reg_1060;
wire   [0:0] icmp_ln86_1553_fu_326_p2;
reg   [0:0] icmp_ln86_1553_reg_1066;
wire   [0:0] icmp_ln86_1561_fu_384_p2;
reg   [0:0] icmp_ln86_1561_reg_1072;
wire   [0:0] icmp_ln86_1562_fu_390_p2;
reg   [0:0] icmp_ln86_1562_reg_1077;
wire   [0:0] icmp_ln86_1563_fu_396_p2;
reg   [0:0] icmp_ln86_1563_reg_1082;
wire   [0:0] icmp_ln86_1564_fu_402_p2;
reg   [0:0] icmp_ln86_1564_reg_1087;
wire   [0:0] and_ln104_fu_426_p2;
reg   [0:0] and_ln104_reg_1092;
wire   [0:0] or_ln117_1403_fu_772_p2;
reg   [0:0] or_ln117_1403_reg_1098;
wire   [4:0] select_ln117_1509_fu_786_p3;
reg   [4:0] select_ln117_1509_reg_1105;
wire    ap_block_pp0_stage0;
wire   [14:0] tmp_fu_356_p4;
wire   [0:0] icmp_ln86_fu_266_p2;
wire   [0:0] icmp_ln86_1544_fu_272_p2;
wire   [0:0] xor_ln104_fu_408_p2;
wire   [0:0] xor_ln104_739_fu_420_p2;
wire   [0:0] icmp_ln86_1545_fu_278_p2;
wire   [0:0] xor_ln104_740_fu_438_p2;
wire   [0:0] icmp_ln86_1546_fu_284_p2;
wire   [0:0] and_ln102_fu_414_p2;
wire   [0:0] xor_ln104_741_fu_456_p2;
wire   [0:0] icmp_ln86_1548_fu_296_p2;
wire   [0:0] and_ln102_1706_fu_432_p2;
wire   [0:0] icmp_ln86_1549_fu_302_p2;
wire   [0:0] and_ln104_292_fu_444_p2;
wire   [0:0] icmp_ln86_1550_fu_308_p2;
wire   [0:0] and_ln102_1707_fu_450_p2;
wire   [0:0] xor_ln104_745_fu_492_p2;
wire   [0:0] icmp_ln86_1551_fu_314_p2;
wire   [0:0] and_ln104_293_fu_462_p2;
wire   [0:0] icmp_ln86_1554_fu_332_p2;
wire   [0:0] and_ln102_1709_fu_468_p2;
wire   [0:0] icmp_ln86_1555_fu_338_p2;
wire   [0:0] xor_ln104_743_fu_474_p2;
wire   [0:0] and_ln102_1715_fu_522_p2;
wire   [0:0] icmp_ln86_1556_fu_344_p2;
wire   [0:0] and_ln102_1710_fu_480_p2;
wire   [0:0] icmp_ln86_1557_fu_350_p2;
wire   [0:0] xor_ln104_744_fu_486_p2;
wire   [0:0] and_ln102_1718_fu_540_p2;
wire   [0:0] icmp_ln86_1558_fu_366_p2;
wire   [0:0] and_ln102_1720_fu_552_p2;
wire   [0:0] icmp_ln86_1559_fu_372_p2;
wire   [0:0] and_ln102_1711_fu_504_p2;
wire   [0:0] icmp_ln86_1560_fu_378_p2;
wire   [0:0] xor_ln104_746_fu_510_p2;
wire   [0:0] and_ln102_1723_fu_570_p2;
wire   [0:0] and_ln104_295_fu_498_p2;
wire   [0:0] and_ln102_1714_fu_516_p2;
wire   [0:0] or_ln117_fu_582_p2;
wire   [2:0] select_ln117_fu_588_p3;
wire   [0:0] or_ln117_1391_fu_596_p2;
wire   [0:0] and_ln102_1716_fu_528_p2;
wire   [2:0] select_ln117_1496_fu_602_p3;
wire   [0:0] or_ln117_1392_fu_610_p2;
wire   [2:0] select_ln117_1497_fu_616_p3;
wire   [0:0] or_ln117_1393_fu_624_p2;
wire   [0:0] and_ln102_1717_fu_534_p2;
wire   [2:0] select_ln117_1498_fu_630_p3;
wire   [2:0] select_ln117_1499_fu_644_p3;
wire   [0:0] or_ln117_1394_fu_638_p2;
wire   [3:0] zext_ln117_fu_652_p1;
wire   [0:0] or_ln117_1395_fu_656_p2;
wire   [0:0] and_ln102_1719_fu_546_p2;
wire   [3:0] select_ln117_1500_fu_662_p3;
wire   [0:0] or_ln117_1396_fu_670_p2;
wire   [3:0] select_ln117_1501_fu_676_p3;
wire   [0:0] or_ln117_1397_fu_684_p2;
wire   [0:0] and_ln102_1721_fu_558_p2;
wire   [3:0] select_ln117_1502_fu_690_p3;
wire   [0:0] or_ln117_1398_fu_698_p2;
wire   [3:0] select_ln117_1503_fu_704_p3;
wire   [0:0] or_ln117_1399_fu_712_p2;
wire   [0:0] and_ln102_1722_fu_564_p2;
wire   [3:0] select_ln117_1504_fu_718_p3;
wire   [0:0] or_ln117_1400_fu_726_p2;
wire   [3:0] select_ln117_1505_fu_732_p3;
wire   [0:0] or_ln117_1401_fu_740_p2;
wire   [0:0] and_ln102_1724_fu_576_p2;
wire   [3:0] select_ln117_1506_fu_746_p3;
wire   [3:0] select_ln117_1507_fu_760_p3;
wire   [0:0] or_ln117_1402_fu_754_p2;
wire   [4:0] zext_ln117_168_fu_768_p1;
wire   [4:0] select_ln117_1508_fu_778_p3;
wire   [0:0] xor_ln104_742_fu_798_p2;
wire   [0:0] and_ln102_1708_fu_794_p2;
wire   [0:0] and_ln104_294_fu_803_p2;
wire   [0:0] and_ln102_1712_fu_808_p2;
wire   [0:0] xor_ln104_747_fu_813_p2;
wire   [0:0] and_ln102_1726_fu_833_p2;
wire   [0:0] and_ln102_1713_fu_818_p2;
wire   [0:0] xor_ln104_748_fu_823_p2;
wire   [0:0] and_ln102_1729_fu_849_p2;
wire   [0:0] and_ln102_1725_fu_828_p2;
wire   [0:0] or_ln117_1404_fu_860_p2;
wire   [0:0] or_ln117_1405_fu_865_p2;
wire   [0:0] and_ln102_1727_fu_838_p2;
wire   [4:0] select_ln117_1510_fu_870_p3;
wire   [0:0] or_ln117_1406_fu_877_p2;
wire   [4:0] select_ln117_1511_fu_883_p3;
wire   [0:0] or_ln117_1407_fu_891_p2;
wire   [0:0] and_ln102_1728_fu_844_p2;
wire   [4:0] select_ln117_1512_fu_896_p3;
wire   [0:0] or_ln117_1408_fu_904_p2;
wire   [4:0] select_ln117_1513_fu_910_p3;
wire   [0:0] or_ln117_1409_fu_918_p2;
wire   [0:0] and_ln102_1730_fu_854_p2;
wire   [4:0] select_ln117_1514_fu_924_p3;
wire   [0:0] or_ln117_1410_fu_932_p2;
wire   [4:0] select_ln117_1515_fu_938_p3;
wire   [11:0] agg_result_fu_954_p47;
wire   [4:0] agg_result_fu_954_p48;
wire   [11:0] agg_result_fu_954_p49;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_954_p1;
wire   [4:0] agg_result_fu_954_p3;
wire   [4:0] agg_result_fu_954_p5;
wire   [4:0] agg_result_fu_954_p7;
wire   [4:0] agg_result_fu_954_p9;
wire   [4:0] agg_result_fu_954_p11;
wire   [4:0] agg_result_fu_954_p13;
wire   [4:0] agg_result_fu_954_p15;
wire   [4:0] agg_result_fu_954_p17;
wire   [4:0] agg_result_fu_954_p19;
wire   [4:0] agg_result_fu_954_p21;
wire   [4:0] agg_result_fu_954_p23;
wire   [4:0] agg_result_fu_954_p25;
wire   [4:0] agg_result_fu_954_p27;
wire  signed [4:0] agg_result_fu_954_p29;
wire  signed [4:0] agg_result_fu_954_p31;
wire  signed [4:0] agg_result_fu_954_p33;
wire  signed [4:0] agg_result_fu_954_p35;
wire  signed [4:0] agg_result_fu_954_p37;
wire  signed [4:0] agg_result_fu_954_p39;
wire  signed [4:0] agg_result_fu_954_p41;
wire  signed [4:0] agg_result_fu_954_p43;
wire  signed [4:0] agg_result_fu_954_p45;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_47_5_12_1_1_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h2 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h3 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h4 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h5 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h6 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h7 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h8 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h9 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'hA ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'hB ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hC ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hD ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hE ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hF ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'h10 ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'h11 ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h12 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h13 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h14 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h15 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h16 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h17 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h18 ),
    .din22_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_47_5_12_1_1_x_U2176(
    .din0(12'd1606),
    .din1(12'd4048),
    .din2(12'd3882),
    .din3(12'd4090),
    .din4(12'd401),
    .din5(12'd20),
    .din6(12'd215),
    .din7(12'd4037),
    .din8(12'd3669),
    .din9(12'd749),
    .din10(12'd3638),
    .din11(12'd1182),
    .din12(12'd3658),
    .din13(12'd3875),
    .din14(12'd3606),
    .din15(12'd1809),
    .din16(12'd34),
    .din17(12'd3645),
    .din18(12'd4094),
    .din19(12'd3811),
    .din20(12'd4067),
    .din21(12'd73),
    .din22(12'd1558),
    .def(agg_result_fu_954_p47),
    .sel(agg_result_fu_954_p48),
    .dout(agg_result_fu_954_p49)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln104_reg_1092 <= and_ln104_fu_426_p2;
        icmp_ln86_1547_reg_1054 <= icmp_ln86_1547_fu_290_p2;
        icmp_ln86_1552_reg_1060 <= icmp_ln86_1552_fu_320_p2;
        icmp_ln86_1553_reg_1066 <= icmp_ln86_1553_fu_326_p2;
        icmp_ln86_1561_reg_1072 <= icmp_ln86_1561_fu_384_p2;
        icmp_ln86_1562_reg_1077 <= icmp_ln86_1562_fu_390_p2;
        icmp_ln86_1563_reg_1082 <= icmp_ln86_1563_fu_396_p2;
        icmp_ln86_1564_reg_1087 <= icmp_ln86_1564_fu_402_p2;
        or_ln117_1403_reg_1098 <= or_ln117_1403_fu_772_p2;
        select_ln117_1509_reg_1105 <= select_ln117_1509_fu_786_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_954_p47 = 'bx;

assign agg_result_fu_954_p48 = ((or_ln117_1410_fu_932_p2[0:0] == 1'b1) ? select_ln117_1515_fu_938_p3 : 5'd24);

assign and_ln102_1706_fu_432_p2 = (icmp_ln86_fu_266_p2 & icmp_ln86_1545_fu_278_p2);

assign and_ln102_1707_fu_450_p2 = (icmp_ln86_1546_fu_284_p2 & and_ln102_fu_414_p2);

assign and_ln102_1708_fu_794_p2 = (icmp_ln86_1547_reg_1054 & and_ln104_reg_1092);

assign and_ln102_1709_fu_468_p2 = (icmp_ln86_1548_fu_296_p2 & and_ln102_1706_fu_432_p2);

assign and_ln102_1710_fu_480_p2 = (icmp_ln86_1549_fu_302_p2 & and_ln104_292_fu_444_p2);

assign and_ln102_1711_fu_504_p2 = (icmp_ln86_1551_fu_314_p2 & and_ln104_293_fu_462_p2);

assign and_ln102_1712_fu_808_p2 = (icmp_ln86_1552_reg_1060 & and_ln102_1708_fu_794_p2);

assign and_ln102_1713_fu_818_p2 = (icmp_ln86_1553_reg_1066 & and_ln104_294_fu_803_p2);

assign and_ln102_1714_fu_516_p2 = (icmp_ln86_1554_fu_332_p2 & and_ln102_1709_fu_468_p2);

assign and_ln102_1715_fu_522_p2 = (xor_ln104_743_fu_474_p2 & icmp_ln86_1555_fu_338_p2);

assign and_ln102_1716_fu_528_p2 = (and_ln102_1715_fu_522_p2 & and_ln102_1706_fu_432_p2);

assign and_ln102_1717_fu_534_p2 = (icmp_ln86_1556_fu_344_p2 & and_ln102_1710_fu_480_p2);

assign and_ln102_1718_fu_540_p2 = (xor_ln104_744_fu_486_p2 & icmp_ln86_1557_fu_350_p2);

assign and_ln102_1719_fu_546_p2 = (and_ln104_292_fu_444_p2 & and_ln102_1718_fu_540_p2);

assign and_ln102_1720_fu_552_p2 = (icmp_ln86_1558_fu_366_p2 & and_ln102_1707_fu_450_p2);

assign and_ln102_1721_fu_558_p2 = (icmp_ln86_1550_fu_308_p2 & and_ln102_1720_fu_552_p2);

assign and_ln102_1722_fu_564_p2 = (icmp_ln86_1559_fu_372_p2 & and_ln102_1711_fu_504_p2);

assign and_ln102_1723_fu_570_p2 = (xor_ln104_746_fu_510_p2 & icmp_ln86_1560_fu_378_p2);

assign and_ln102_1724_fu_576_p2 = (and_ln104_293_fu_462_p2 & and_ln102_1723_fu_570_p2);

assign and_ln102_1725_fu_828_p2 = (icmp_ln86_1561_reg_1072 & and_ln102_1712_fu_808_p2);

assign and_ln102_1726_fu_833_p2 = (xor_ln104_747_fu_813_p2 & icmp_ln86_1562_reg_1077);

assign and_ln102_1727_fu_838_p2 = (and_ln102_1726_fu_833_p2 & and_ln102_1708_fu_794_p2);

assign and_ln102_1728_fu_844_p2 = (icmp_ln86_1563_reg_1082 & and_ln102_1713_fu_818_p2);

assign and_ln102_1729_fu_849_p2 = (xor_ln104_748_fu_823_p2 & icmp_ln86_1564_reg_1087);

assign and_ln102_1730_fu_854_p2 = (and_ln104_294_fu_803_p2 & and_ln102_1729_fu_849_p2);

assign and_ln102_fu_414_p2 = (xor_ln104_fu_408_p2 & icmp_ln86_1544_fu_272_p2);

assign and_ln104_292_fu_444_p2 = (xor_ln104_740_fu_438_p2 & icmp_ln86_fu_266_p2);

assign and_ln104_293_fu_462_p2 = (xor_ln104_741_fu_456_p2 & and_ln102_fu_414_p2);

assign and_ln104_294_fu_803_p2 = (xor_ln104_742_fu_798_p2 & and_ln104_reg_1092);

assign and_ln104_295_fu_498_p2 = (xor_ln104_745_fu_492_p2 & and_ln102_1707_fu_450_p2);

assign and_ln104_fu_426_p2 = (xor_ln104_fu_408_p2 & xor_ln104_739_fu_420_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_954_p49;

assign icmp_ln86_1544_fu_272_p2 = (($signed(x_49_val) < $signed(18'd6959)) ? 1'b1 : 1'b0);

assign icmp_ln86_1545_fu_278_p2 = (($signed(x_39_val) < $signed(18'd1285)) ? 1'b1 : 1'b0);

assign icmp_ln86_1546_fu_284_p2 = (($signed(x_39_val) < $signed(18'd901)) ? 1'b1 : 1'b0);

assign icmp_ln86_1547_fu_290_p2 = (($signed(x_49_val) < $signed(18'd7158)) ? 1'b1 : 1'b0);

assign icmp_ln86_1548_fu_296_p2 = (($signed(x_10_val) < $signed(18'd619)) ? 1'b1 : 1'b0);

assign icmp_ln86_1549_fu_302_p2 = (($signed(x_18_val) < $signed(18'd11872)) ? 1'b1 : 1'b0);

assign icmp_ln86_1550_fu_308_p2 = (($signed(x_39_val) < $signed(18'd864)) ? 1'b1 : 1'b0);

assign icmp_ln86_1551_fu_314_p2 = (($signed(x_11_val) < $signed(18'd390)) ? 1'b1 : 1'b0);

assign icmp_ln86_1552_fu_320_p2 = (($signed(x_10_val) < $signed(18'd935)) ? 1'b1 : 1'b0);

assign icmp_ln86_1553_fu_326_p2 = (($signed(x_39_val) < $signed(18'd3033)) ? 1'b1 : 1'b0);

assign icmp_ln86_1554_fu_332_p2 = (($signed(x_9_val) < $signed(18'd797)) ? 1'b1 : 1'b0);

assign icmp_ln86_1555_fu_338_p2 = (($signed(x_11_val) < $signed(18'd1006)) ? 1'b1 : 1'b0);

assign icmp_ln86_1556_fu_344_p2 = (($signed(x_18_val) < $signed(18'd10601)) ? 1'b1 : 1'b0);

assign icmp_ln86_1557_fu_350_p2 = (($signed(x_7_val) < $signed(18'd1722)) ? 1'b1 : 1'b0);

assign icmp_ln86_1558_fu_366_p2 = (($signed(tmp_fu_356_p4) < $signed(15'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_1559_fu_372_p2 = (($signed(x_47_val) < $signed(18'd14455)) ? 1'b1 : 1'b0);

assign icmp_ln86_1560_fu_378_p2 = (($signed(x_9_val) < $signed(18'd453)) ? 1'b1 : 1'b0);

assign icmp_ln86_1561_fu_384_p2 = (($signed(x_9_val) < $signed(18'd439)) ? 1'b1 : 1'b0);

assign icmp_ln86_1562_fu_390_p2 = (($signed(x_39_val) < $signed(18'd1589)) ? 1'b1 : 1'b0);

assign icmp_ln86_1563_fu_396_p2 = (($signed(x_10_val) < $signed(18'd908)) ? 1'b1 : 1'b0);

assign icmp_ln86_1564_fu_402_p2 = (($signed(x_5_val) < $signed(18'd16122)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_266_p2 = (($signed(x_10_val) < $signed(18'd906)) ? 1'b1 : 1'b0);

assign or_ln117_1391_fu_596_p2 = (and_ln104_295_fu_498_p2 | and_ln102_1709_fu_468_p2);

assign or_ln117_1392_fu_610_p2 = (or_ln117_1391_fu_596_p2 | and_ln102_1716_fu_528_p2);

assign or_ln117_1393_fu_624_p2 = (and_ln104_295_fu_498_p2 | and_ln102_1706_fu_432_p2);

assign or_ln117_1394_fu_638_p2 = (or_ln117_1393_fu_624_p2 | and_ln102_1717_fu_534_p2);

assign or_ln117_1395_fu_656_p2 = (or_ln117_1393_fu_624_p2 | and_ln102_1710_fu_480_p2);

assign or_ln117_1396_fu_670_p2 = (or_ln117_1395_fu_656_p2 | and_ln102_1719_fu_546_p2);

assign or_ln117_1397_fu_684_p2 = (icmp_ln86_fu_266_p2 | and_ln104_295_fu_498_p2);

assign or_ln117_1398_fu_698_p2 = (or_ln117_1397_fu_684_p2 | and_ln102_1721_fu_558_p2);

assign or_ln117_1399_fu_712_p2 = (icmp_ln86_fu_266_p2 | and_ln102_1707_fu_450_p2);

assign or_ln117_1400_fu_726_p2 = (or_ln117_1399_fu_712_p2 | and_ln102_1722_fu_564_p2);

assign or_ln117_1401_fu_740_p2 = (or_ln117_1399_fu_712_p2 | and_ln102_1711_fu_504_p2);

assign or_ln117_1402_fu_754_p2 = (or_ln117_1401_fu_740_p2 | and_ln102_1724_fu_576_p2);

assign or_ln117_1403_fu_772_p2 = (icmp_ln86_fu_266_p2 | and_ln102_fu_414_p2);

assign or_ln117_1404_fu_860_p2 = (or_ln117_1403_reg_1098 | and_ln102_1725_fu_828_p2);

assign or_ln117_1405_fu_865_p2 = (or_ln117_1403_reg_1098 | and_ln102_1712_fu_808_p2);

assign or_ln117_1406_fu_877_p2 = (or_ln117_1405_fu_865_p2 | and_ln102_1727_fu_838_p2);

assign or_ln117_1407_fu_891_p2 = (or_ln117_1403_reg_1098 | and_ln102_1708_fu_794_p2);

assign or_ln117_1408_fu_904_p2 = (or_ln117_1407_fu_891_p2 | and_ln102_1728_fu_844_p2);

assign or_ln117_1409_fu_918_p2 = (or_ln117_1407_fu_891_p2 | and_ln102_1713_fu_818_p2);

assign or_ln117_1410_fu_932_p2 = (or_ln117_1409_fu_918_p2 | and_ln102_1730_fu_854_p2);

assign or_ln117_fu_582_p2 = (and_ln104_295_fu_498_p2 | and_ln102_1714_fu_516_p2);

assign select_ln117_1496_fu_602_p3 = ((or_ln117_fu_582_p2[0:0] == 1'b1) ? select_ln117_fu_588_p3 : 3'd4);

assign select_ln117_1497_fu_616_p3 = ((or_ln117_1391_fu_596_p2[0:0] == 1'b1) ? select_ln117_1496_fu_602_p3 : 3'd5);

assign select_ln117_1498_fu_630_p3 = ((or_ln117_1392_fu_610_p2[0:0] == 1'b1) ? select_ln117_1497_fu_616_p3 : 3'd6);

assign select_ln117_1499_fu_644_p3 = ((or_ln117_1393_fu_624_p2[0:0] == 1'b1) ? select_ln117_1498_fu_630_p3 : 3'd7);

assign select_ln117_1500_fu_662_p3 = ((or_ln117_1394_fu_638_p2[0:0] == 1'b1) ? zext_ln117_fu_652_p1 : 4'd8);

assign select_ln117_1501_fu_676_p3 = ((or_ln117_1395_fu_656_p2[0:0] == 1'b1) ? select_ln117_1500_fu_662_p3 : 4'd9);

assign select_ln117_1502_fu_690_p3 = ((or_ln117_1396_fu_670_p2[0:0] == 1'b1) ? select_ln117_1501_fu_676_p3 : 4'd10);

assign select_ln117_1503_fu_704_p3 = ((or_ln117_1397_fu_684_p2[0:0] == 1'b1) ? select_ln117_1502_fu_690_p3 : 4'd11);

assign select_ln117_1504_fu_718_p3 = ((or_ln117_1398_fu_698_p2[0:0] == 1'b1) ? select_ln117_1503_fu_704_p3 : 4'd12);

assign select_ln117_1505_fu_732_p3 = ((or_ln117_1399_fu_712_p2[0:0] == 1'b1) ? select_ln117_1504_fu_718_p3 : 4'd13);

assign select_ln117_1506_fu_746_p3 = ((or_ln117_1400_fu_726_p2[0:0] == 1'b1) ? select_ln117_1505_fu_732_p3 : 4'd14);

assign select_ln117_1507_fu_760_p3 = ((or_ln117_1401_fu_740_p2[0:0] == 1'b1) ? select_ln117_1506_fu_746_p3 : 4'd15);

assign select_ln117_1508_fu_778_p3 = ((or_ln117_1402_fu_754_p2[0:0] == 1'b1) ? zext_ln117_168_fu_768_p1 : 5'd16);

assign select_ln117_1509_fu_786_p3 = ((or_ln117_1403_fu_772_p2[0:0] == 1'b1) ? select_ln117_1508_fu_778_p3 : 5'd17);

assign select_ln117_1510_fu_870_p3 = ((or_ln117_1404_fu_860_p2[0:0] == 1'b1) ? select_ln117_1509_reg_1105 : 5'd18);

assign select_ln117_1511_fu_883_p3 = ((or_ln117_1405_fu_865_p2[0:0] == 1'b1) ? select_ln117_1510_fu_870_p3 : 5'd19);

assign select_ln117_1512_fu_896_p3 = ((or_ln117_1406_fu_877_p2[0:0] == 1'b1) ? select_ln117_1511_fu_883_p3 : 5'd20);

assign select_ln117_1513_fu_910_p3 = ((or_ln117_1407_fu_891_p2[0:0] == 1'b1) ? select_ln117_1512_fu_896_p3 : 5'd21);

assign select_ln117_1514_fu_924_p3 = ((or_ln117_1408_fu_904_p2[0:0] == 1'b1) ? select_ln117_1513_fu_910_p3 : 5'd22);

assign select_ln117_1515_fu_938_p3 = ((or_ln117_1409_fu_918_p2[0:0] == 1'b1) ? select_ln117_1514_fu_924_p3 : 5'd23);

assign select_ln117_fu_588_p3 = ((and_ln104_295_fu_498_p2[0:0] == 1'b1) ? 3'd2 : 3'd3);

assign tmp_fu_356_p4 = {{x_23_val[17:3]}};

assign xor_ln104_739_fu_420_p2 = (icmp_ln86_1544_fu_272_p2 ^ 1'd1);

assign xor_ln104_740_fu_438_p2 = (icmp_ln86_1545_fu_278_p2 ^ 1'd1);

assign xor_ln104_741_fu_456_p2 = (icmp_ln86_1546_fu_284_p2 ^ 1'd1);

assign xor_ln104_742_fu_798_p2 = (icmp_ln86_1547_reg_1054 ^ 1'd1);

assign xor_ln104_743_fu_474_p2 = (icmp_ln86_1548_fu_296_p2 ^ 1'd1);

assign xor_ln104_744_fu_486_p2 = (icmp_ln86_1549_fu_302_p2 ^ 1'd1);

assign xor_ln104_745_fu_492_p2 = (icmp_ln86_1550_fu_308_p2 ^ 1'd1);

assign xor_ln104_746_fu_510_p2 = (icmp_ln86_1551_fu_314_p2 ^ 1'd1);

assign xor_ln104_747_fu_813_p2 = (icmp_ln86_1552_reg_1060 ^ 1'd1);

assign xor_ln104_748_fu_823_p2 = (icmp_ln86_1553_reg_1066 ^ 1'd1);

assign xor_ln104_fu_408_p2 = (icmp_ln86_fu_266_p2 ^ 1'd1);

assign zext_ln117_168_fu_768_p1 = select_ln117_1507_fu_760_p3;

assign zext_ln117_fu_652_p1 = select_ln117_1499_fu_644_p3;

endmodule //my_prj_decision_function_118
