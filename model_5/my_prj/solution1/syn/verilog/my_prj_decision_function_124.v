// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_124 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_7_val,
        x_8_val,
        x_9_val,
        x_10_val,
        x_11_val,
        x_15_val,
        x_19_val,
        x_21_val,
        x_24_val,
        x_42_val,
        x_47_val,
        x_50_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_7_val;
input  [17:0] x_8_val;
input  [17:0] x_9_val;
input  [17:0] x_10_val;
input  [17:0] x_11_val;
input  [17:0] x_15_val;
input  [17:0] x_19_val;
input  [17:0] x_21_val;
input  [17:0] x_24_val;
input  [17:0] x_42_val;
input  [17:0] x_47_val;
input  [17:0] x_50_val;
input  [17:0] x_52_val;
output  [12:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_346_p2;
reg   [0:0] icmp_ln86_reg_1412;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_1385_fu_358_p2;
reg   [0:0] icmp_ln86_1385_reg_1421;
wire   [0:0] icmp_ln86_1388_fu_376_p2;
reg   [0:0] icmp_ln86_1388_reg_1427;
wire   [0:0] icmp_ln86_1389_fu_382_p2;
reg   [0:0] icmp_ln86_1389_reg_1433;
wire   [0:0] icmp_ln86_1394_fu_412_p2;
reg   [0:0] icmp_ln86_1394_reg_1439;
wire   [0:0] icmp_ln86_1395_fu_418_p2;
reg   [0:0] icmp_ln86_1395_reg_1445;
wire   [0:0] icmp_ln86_1396_fu_424_p2;
reg   [0:0] icmp_ln86_1396_reg_1451;
wire   [0:0] icmp_ln86_1397_fu_430_p2;
reg   [0:0] icmp_ln86_1397_reg_1457;
wire   [0:0] icmp_ln86_1406_fu_484_p2;
reg   [0:0] icmp_ln86_1406_reg_1463;
wire   [0:0] icmp_ln86_1407_fu_490_p2;
reg   [0:0] icmp_ln86_1407_reg_1468;
wire   [0:0] icmp_ln86_1408_fu_496_p2;
reg   [0:0] icmp_ln86_1408_reg_1473;
wire   [0:0] icmp_ln86_1409_fu_502_p2;
reg   [0:0] icmp_ln86_1409_reg_1478;
wire   [0:0] icmp_ln86_1410_fu_508_p2;
reg   [0:0] icmp_ln86_1410_reg_1483;
wire   [0:0] icmp_ln86_1411_fu_514_p2;
reg   [0:0] icmp_ln86_1411_reg_1488;
wire   [0:0] icmp_ln86_1412_fu_520_p2;
reg   [0:0] icmp_ln86_1412_reg_1493;
wire   [0:0] icmp_ln86_1413_fu_526_p2;
reg   [0:0] icmp_ln86_1413_reg_1498;
wire   [4:0] select_ln117_1352_fu_906_p3;
reg   [4:0] select_ln117_1352_reg_1503;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln86_1384_fu_352_p2;
wire   [0:0] xor_ln104_661_fu_538_p2;
wire   [0:0] icmp_ln86_1386_fu_364_p2;
wire   [0:0] and_ln102_fu_532_p2;
wire   [0:0] xor_ln104_663_fu_556_p2;
wire   [0:0] icmp_ln86_1387_fu_370_p2;
wire   [0:0] and_ln104_fu_544_p2;
wire   [0:0] xor_ln104_664_fu_574_p2;
wire   [0:0] icmp_ln86_1390_fu_388_p2;
wire   [0:0] and_ln102_1510_fu_550_p2;
wire   [0:0] icmp_ln86_1391_fu_394_p2;
wire   [0:0] and_ln104_261_fu_562_p2;
wire   [0:0] icmp_ln86_1392_fu_400_p2;
wire   [0:0] and_ln102_1511_fu_568_p2;
wire   [0:0] icmp_ln86_1393_fu_406_p2;
wire   [0:0] and_ln104_262_fu_580_p2;
wire   [0:0] icmp_ln86_1398_fu_436_p2;
wire   [0:0] and_ln102_1514_fu_586_p2;
wire   [0:0] icmp_ln86_1399_fu_442_p2;
wire   [0:0] xor_ln104_667_fu_592_p2;
wire   [0:0] and_ln102_1523_fu_640_p2;
wire   [0:0] icmp_ln86_1400_fu_448_p2;
wire   [0:0] and_ln102_1515_fu_598_p2;
wire   [0:0] icmp_ln86_1401_fu_454_p2;
wire   [0:0] xor_ln104_668_fu_604_p2;
wire   [0:0] and_ln102_1526_fu_658_p2;
wire   [0:0] icmp_ln86_1402_fu_460_p2;
wire   [0:0] and_ln102_1516_fu_610_p2;
wire   [0:0] icmp_ln86_1403_fu_466_p2;
wire   [0:0] xor_ln104_669_fu_616_p2;
wire   [0:0] and_ln102_1529_fu_676_p2;
wire   [0:0] icmp_ln86_1404_fu_472_p2;
wire   [0:0] and_ln102_1517_fu_622_p2;
wire   [0:0] icmp_ln86_1405_fu_478_p2;
wire   [0:0] xor_ln104_670_fu_628_p2;
wire   [0:0] and_ln102_1532_fu_694_p2;
wire   [0:0] and_ln102_1522_fu_634_p2;
wire   [0:0] xor_ln117_fu_706_p2;
wire   [0:0] and_ln102_1524_fu_646_p2;
wire   [1:0] zext_ln117_fu_712_p1;
wire   [0:0] or_ln117_fu_716_p2;
wire   [1:0] select_ln117_fu_722_p3;
wire   [1:0] select_ln117_1339_fu_730_p3;
wire   [0:0] and_ln102_1525_fu_652_p2;
wire   [2:0] zext_ln117_150_fu_738_p1;
wire   [0:0] or_ln117_1248_fu_742_p2;
wire   [2:0] select_ln117_1340_fu_748_p3;
wire   [0:0] or_ln117_1249_fu_756_p2;
wire   [0:0] and_ln102_1527_fu_664_p2;
wire   [2:0] select_ln117_1341_fu_762_p3;
wire   [0:0] or_ln117_1250_fu_770_p2;
wire   [2:0] select_ln117_1342_fu_776_p3;
wire   [2:0] select_ln117_1343_fu_784_p3;
wire   [0:0] and_ln102_1528_fu_670_p2;
wire   [3:0] zext_ln117_151_fu_792_p1;
wire   [0:0] or_ln117_1251_fu_796_p2;
wire   [3:0] select_ln117_1344_fu_802_p3;
wire   [0:0] or_ln117_1252_fu_810_p2;
wire   [0:0] and_ln102_1530_fu_682_p2;
wire   [3:0] select_ln117_1345_fu_816_p3;
wire   [0:0] or_ln117_1253_fu_824_p2;
wire   [3:0] select_ln117_1346_fu_830_p3;
wire   [0:0] or_ln117_1254_fu_838_p2;
wire   [0:0] and_ln102_1531_fu_688_p2;
wire   [3:0] select_ln117_1347_fu_844_p3;
wire   [0:0] or_ln117_1255_fu_852_p2;
wire   [3:0] select_ln117_1348_fu_858_p3;
wire   [0:0] or_ln117_1256_fu_866_p2;
wire   [0:0] and_ln102_1533_fu_700_p2;
wire   [3:0] select_ln117_1349_fu_872_p3;
wire   [0:0] or_ln117_1257_fu_880_p2;
wire   [3:0] select_ln117_1350_fu_886_p3;
wire   [3:0] select_ln117_1351_fu_894_p3;
wire   [4:0] zext_ln117_152_fu_902_p1;
wire   [0:0] xor_ln104_fu_914_p2;
wire   [0:0] xor_ln104_662_fu_924_p2;
wire   [0:0] and_ln102_1509_fu_919_p2;
wire   [0:0] xor_ln104_665_fu_940_p2;
wire   [0:0] and_ln104_260_fu_929_p2;
wire   [0:0] xor_ln104_666_fu_956_p2;
wire   [0:0] and_ln102_1512_fu_935_p2;
wire   [0:0] and_ln104_263_fu_945_p2;
wire   [0:0] and_ln102_1513_fu_951_p2;
wire   [0:0] and_ln104_264_fu_961_p2;
wire   [0:0] and_ln102_1518_fu_967_p2;
wire   [0:0] xor_ln104_671_fu_972_p2;
wire   [0:0] and_ln102_1535_fu_1012_p2;
wire   [0:0] and_ln102_1519_fu_977_p2;
wire   [0:0] xor_ln104_672_fu_982_p2;
wire   [0:0] and_ln102_1538_fu_1028_p2;
wire   [0:0] and_ln102_1520_fu_987_p2;
wire   [0:0] xor_ln104_673_fu_992_p2;
wire   [0:0] and_ln102_1541_fu_1044_p2;
wire   [0:0] and_ln102_1521_fu_997_p2;
wire   [0:0] xor_ln104_674_fu_1002_p2;
wire   [0:0] and_ln102_1544_fu_1060_p2;
wire   [0:0] and_ln102_1534_fu_1007_p2;
wire   [0:0] or_ln117_1258_fu_1071_p2;
wire   [0:0] or_ln117_1259_fu_1076_p2;
wire   [0:0] and_ln102_1536_fu_1017_p2;
wire   [4:0] select_ln117_1353_fu_1081_p3;
wire   [0:0] or_ln117_1260_fu_1088_p2;
wire   [4:0] select_ln117_1354_fu_1094_p3;
wire   [0:0] or_ln117_1261_fu_1102_p2;
wire   [0:0] and_ln102_1537_fu_1023_p2;
wire   [4:0] select_ln117_1355_fu_1107_p3;
wire   [0:0] or_ln117_1262_fu_1115_p2;
wire   [4:0] select_ln117_1356_fu_1121_p3;
wire   [0:0] or_ln117_1263_fu_1129_p2;
wire   [0:0] and_ln102_1539_fu_1033_p2;
wire   [4:0] select_ln117_1357_fu_1135_p3;
wire   [0:0] or_ln117_1264_fu_1143_p2;
wire   [4:0] select_ln117_1358_fu_1149_p3;
wire   [0:0] or_ln117_1265_fu_1157_p2;
wire   [0:0] and_ln102_1540_fu_1039_p2;
wire   [4:0] select_ln117_1359_fu_1162_p3;
wire   [0:0] or_ln117_1266_fu_1170_p2;
wire   [4:0] select_ln117_1360_fu_1176_p3;
wire   [0:0] or_ln117_1267_fu_1184_p2;
wire   [0:0] and_ln102_1542_fu_1049_p2;
wire   [4:0] select_ln117_1361_fu_1190_p3;
wire   [0:0] or_ln117_1268_fu_1198_p2;
wire   [4:0] select_ln117_1362_fu_1204_p3;
wire   [0:0] or_ln117_1269_fu_1212_p2;
wire   [0:0] and_ln102_1543_fu_1055_p2;
wire   [4:0] select_ln117_1363_fu_1218_p3;
wire   [0:0] or_ln117_1270_fu_1226_p2;
wire   [4:0] select_ln117_1364_fu_1232_p3;
wire   [0:0] or_ln117_1271_fu_1240_p2;
wire   [0:0] and_ln102_1545_fu_1065_p2;
wire   [4:0] select_ln117_1365_fu_1246_p3;
wire   [0:0] or_ln117_1272_fu_1254_p2;
wire   [4:0] select_ln117_1366_fu_1260_p3;
wire   [12:0] agg_result_fu_1276_p65;
wire   [4:0] agg_result_fu_1276_p66;
wire   [12:0] agg_result_fu_1276_p67;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1276_p1;
wire   [4:0] agg_result_fu_1276_p3;
wire   [4:0] agg_result_fu_1276_p5;
wire   [4:0] agg_result_fu_1276_p7;
wire   [4:0] agg_result_fu_1276_p9;
wire   [4:0] agg_result_fu_1276_p11;
wire   [4:0] agg_result_fu_1276_p13;
wire   [4:0] agg_result_fu_1276_p15;
wire   [4:0] agg_result_fu_1276_p17;
wire   [4:0] agg_result_fu_1276_p19;
wire   [4:0] agg_result_fu_1276_p21;
wire   [4:0] agg_result_fu_1276_p23;
wire   [4:0] agg_result_fu_1276_p25;
wire   [4:0] agg_result_fu_1276_p27;
wire   [4:0] agg_result_fu_1276_p29;
wire   [4:0] agg_result_fu_1276_p31;
wire  signed [4:0] agg_result_fu_1276_p33;
wire  signed [4:0] agg_result_fu_1276_p35;
wire  signed [4:0] agg_result_fu_1276_p37;
wire  signed [4:0] agg_result_fu_1276_p39;
wire  signed [4:0] agg_result_fu_1276_p41;
wire  signed [4:0] agg_result_fu_1276_p43;
wire  signed [4:0] agg_result_fu_1276_p45;
wire  signed [4:0] agg_result_fu_1276_p47;
wire  signed [4:0] agg_result_fu_1276_p49;
wire  signed [4:0] agg_result_fu_1276_p51;
wire  signed [4:0] agg_result_fu_1276_p53;
wire  signed [4:0] agg_result_fu_1276_p55;
wire  signed [4:0] agg_result_fu_1276_p57;
wire  signed [4:0] agg_result_fu_1276_p59;
wire  signed [4:0] agg_result_fu_1276_p61;
wire  signed [4:0] agg_result_fu_1276_p63;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_65_5_13_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 13 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 13 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 13 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 13 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 13 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 13 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 13 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 13 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 13 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 13 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 13 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 13 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 13 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 13 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 13 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 13 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 13 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 13 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 13 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 13 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 13 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 13 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 13 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 13 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 13 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 13 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 13 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 13 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 13 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 13 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 13 ),
    .CASE31( 5'h1F ),
    .din31_WIDTH( 13 ),
    .def_WIDTH( 13 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 13 ))
sparsemux_65_5_13_1_1_U1(
    .din0(13'd7721),
    .din1(13'd192),
    .din2(13'd7565),
    .din3(13'd7700),
    .din4(13'd7680),
    .din5(13'd8138),
    .din6(13'd299),
    .din7(13'd1478),
    .din8(13'd7822),
    .din9(13'd190),
    .din10(13'd8005),
    .din11(13'd553),
    .din12(13'd7791),
    .din13(13'd250),
    .din14(13'd899),
    .din15(13'd1685),
    .din16(13'd7965),
    .din17(13'd586),
    .din18(13'd1215),
    .din19(13'd2118),
    .din20(13'd7601),
    .din21(13'd195),
    .din22(13'd1423),
    .din23(13'd7753),
    .din24(13'd941),
    .din25(13'd7981),
    .din26(13'd2155),
    .din27(13'd1121),
    .din28(13'd450),
    .din29(13'd1676),
    .din30(13'd1793),
    .din31(13'd2351),
    .def(agg_result_fu_1276_p65),
    .sel(agg_result_fu_1276_p66),
    .dout(agg_result_fu_1276_p67)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_1385_reg_1421 <= icmp_ln86_1385_fu_358_p2;
        icmp_ln86_1388_reg_1427 <= icmp_ln86_1388_fu_376_p2;
        icmp_ln86_1389_reg_1433 <= icmp_ln86_1389_fu_382_p2;
        icmp_ln86_1394_reg_1439 <= icmp_ln86_1394_fu_412_p2;
        icmp_ln86_1395_reg_1445 <= icmp_ln86_1395_fu_418_p2;
        icmp_ln86_1396_reg_1451 <= icmp_ln86_1396_fu_424_p2;
        icmp_ln86_1397_reg_1457 <= icmp_ln86_1397_fu_430_p2;
        icmp_ln86_1406_reg_1463 <= icmp_ln86_1406_fu_484_p2;
        icmp_ln86_1407_reg_1468 <= icmp_ln86_1407_fu_490_p2;
        icmp_ln86_1408_reg_1473 <= icmp_ln86_1408_fu_496_p2;
        icmp_ln86_1409_reg_1478 <= icmp_ln86_1409_fu_502_p2;
        icmp_ln86_1410_reg_1483 <= icmp_ln86_1410_fu_508_p2;
        icmp_ln86_1411_reg_1488 <= icmp_ln86_1411_fu_514_p2;
        icmp_ln86_1412_reg_1493 <= icmp_ln86_1412_fu_520_p2;
        icmp_ln86_1413_reg_1498 <= icmp_ln86_1413_fu_526_p2;
        icmp_ln86_reg_1412 <= icmp_ln86_fu_346_p2;
        select_ln117_1352_reg_1503 <= select_ln117_1352_fu_906_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1276_p65 = 'bx;

assign agg_result_fu_1276_p66 = ((or_ln117_1272_fu_1254_p2[0:0] == 1'b1) ? select_ln117_1366_fu_1260_p3 : 5'd31);

assign and_ln102_1509_fu_919_p2 = (xor_ln104_fu_914_p2 & icmp_ln86_1385_reg_1421);

assign and_ln102_1510_fu_550_p2 = (icmp_ln86_1386_fu_364_p2 & and_ln102_fu_532_p2);

assign and_ln102_1511_fu_568_p2 = (icmp_ln86_1387_fu_370_p2 & and_ln104_fu_544_p2);

assign and_ln102_1512_fu_935_p2 = (icmp_ln86_1388_reg_1427 & and_ln102_1509_fu_919_p2);

assign and_ln102_1513_fu_951_p2 = (icmp_ln86_1389_reg_1433 & and_ln104_260_fu_929_p2);

assign and_ln102_1514_fu_586_p2 = (icmp_ln86_1390_fu_388_p2 & and_ln102_1510_fu_550_p2);

assign and_ln102_1515_fu_598_p2 = (icmp_ln86_1391_fu_394_p2 & and_ln104_261_fu_562_p2);

assign and_ln102_1516_fu_610_p2 = (icmp_ln86_1392_fu_400_p2 & and_ln102_1511_fu_568_p2);

assign and_ln102_1517_fu_622_p2 = (icmp_ln86_1393_fu_406_p2 & and_ln104_262_fu_580_p2);

assign and_ln102_1518_fu_967_p2 = (icmp_ln86_1394_reg_1439 & and_ln102_1512_fu_935_p2);

assign and_ln102_1519_fu_977_p2 = (icmp_ln86_1395_reg_1445 & and_ln104_263_fu_945_p2);

assign and_ln102_1520_fu_987_p2 = (icmp_ln86_1396_reg_1451 & and_ln102_1513_fu_951_p2);

assign and_ln102_1521_fu_997_p2 = (icmp_ln86_1397_reg_1457 & and_ln104_264_fu_961_p2);

assign and_ln102_1522_fu_634_p2 = (icmp_ln86_1398_fu_436_p2 & and_ln102_1514_fu_586_p2);

assign and_ln102_1523_fu_640_p2 = (xor_ln104_667_fu_592_p2 & icmp_ln86_1399_fu_442_p2);

assign and_ln102_1524_fu_646_p2 = (and_ln102_1523_fu_640_p2 & and_ln102_1510_fu_550_p2);

assign and_ln102_1525_fu_652_p2 = (icmp_ln86_1400_fu_448_p2 & and_ln102_1515_fu_598_p2);

assign and_ln102_1526_fu_658_p2 = (xor_ln104_668_fu_604_p2 & icmp_ln86_1401_fu_454_p2);

assign and_ln102_1527_fu_664_p2 = (and_ln104_261_fu_562_p2 & and_ln102_1526_fu_658_p2);

assign and_ln102_1528_fu_670_p2 = (icmp_ln86_1402_fu_460_p2 & and_ln102_1516_fu_610_p2);

assign and_ln102_1529_fu_676_p2 = (xor_ln104_669_fu_616_p2 & icmp_ln86_1403_fu_466_p2);

assign and_ln102_1530_fu_682_p2 = (and_ln102_1529_fu_676_p2 & and_ln102_1511_fu_568_p2);

assign and_ln102_1531_fu_688_p2 = (icmp_ln86_1404_fu_472_p2 & and_ln102_1517_fu_622_p2);

assign and_ln102_1532_fu_694_p2 = (xor_ln104_670_fu_628_p2 & icmp_ln86_1405_fu_478_p2);

assign and_ln102_1533_fu_700_p2 = (and_ln104_262_fu_580_p2 & and_ln102_1532_fu_694_p2);

assign and_ln102_1534_fu_1007_p2 = (icmp_ln86_1406_reg_1463 & and_ln102_1518_fu_967_p2);

assign and_ln102_1535_fu_1012_p2 = (xor_ln104_671_fu_972_p2 & icmp_ln86_1407_reg_1468);

assign and_ln102_1536_fu_1017_p2 = (and_ln102_1535_fu_1012_p2 & and_ln102_1512_fu_935_p2);

assign and_ln102_1537_fu_1023_p2 = (icmp_ln86_1408_reg_1473 & and_ln102_1519_fu_977_p2);

assign and_ln102_1538_fu_1028_p2 = (xor_ln104_672_fu_982_p2 & icmp_ln86_1409_reg_1478);

assign and_ln102_1539_fu_1033_p2 = (and_ln104_263_fu_945_p2 & and_ln102_1538_fu_1028_p2);

assign and_ln102_1540_fu_1039_p2 = (icmp_ln86_1410_reg_1483 & and_ln102_1520_fu_987_p2);

assign and_ln102_1541_fu_1044_p2 = (xor_ln104_673_fu_992_p2 & icmp_ln86_1411_reg_1488);

assign and_ln102_1542_fu_1049_p2 = (and_ln102_1541_fu_1044_p2 & and_ln102_1513_fu_951_p2);

assign and_ln102_1543_fu_1055_p2 = (icmp_ln86_1412_reg_1493 & and_ln102_1521_fu_997_p2);

assign and_ln102_1544_fu_1060_p2 = (xor_ln104_674_fu_1002_p2 & icmp_ln86_1413_reg_1498);

assign and_ln102_1545_fu_1065_p2 = (and_ln104_264_fu_961_p2 & and_ln102_1544_fu_1060_p2);

assign and_ln102_fu_532_p2 = (icmp_ln86_fu_346_p2 & icmp_ln86_1384_fu_352_p2);

assign and_ln104_260_fu_929_p2 = (xor_ln104_fu_914_p2 & xor_ln104_662_fu_924_p2);

assign and_ln104_261_fu_562_p2 = (xor_ln104_663_fu_556_p2 & and_ln102_fu_532_p2);

assign and_ln104_262_fu_580_p2 = (xor_ln104_664_fu_574_p2 & and_ln104_fu_544_p2);

assign and_ln104_263_fu_945_p2 = (xor_ln104_665_fu_940_p2 & and_ln102_1509_fu_919_p2);

assign and_ln104_264_fu_961_p2 = (xor_ln104_666_fu_956_p2 & and_ln104_260_fu_929_p2);

assign and_ln104_fu_544_p2 = (xor_ln104_661_fu_538_p2 & icmp_ln86_fu_346_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1276_p67;

assign icmp_ln86_1384_fu_352_p2 = (($signed(x_21_val) < $signed(18'd262)) ? 1'b1 : 1'b0);

assign icmp_ln86_1385_fu_358_p2 = (($signed(x_9_val) < $signed(18'd726)) ? 1'b1 : 1'b0);

assign icmp_ln86_1386_fu_364_p2 = (($signed(x_9_val) < $signed(18'd961)) ? 1'b1 : 1'b0);

assign icmp_ln86_1387_fu_370_p2 = (($signed(x_24_val) < $signed(18'd407)) ? 1'b1 : 1'b0);

assign icmp_ln86_1388_fu_376_p2 = (($signed(x_50_val) < $signed(18'd75852)) ? 1'b1 : 1'b0);

assign icmp_ln86_1389_fu_382_p2 = (($signed(x_10_val) < $signed(18'd595)) ? 1'b1 : 1'b0);

assign icmp_ln86_1390_fu_388_p2 = (($signed(x_7_val) < $signed(18'd5441)) ? 1'b1 : 1'b0);

assign icmp_ln86_1391_fu_394_p2 = (($signed(x_42_val) < $signed(18'd263)) ? 1'b1 : 1'b0);

assign icmp_ln86_1392_fu_400_p2 = (($signed(x_11_val) < $signed(18'd515)) ? 1'b1 : 1'b0);

assign icmp_ln86_1393_fu_406_p2 = (($signed(x_52_val) < $signed(18'd46593)) ? 1'b1 : 1'b0);

assign icmp_ln86_1394_fu_412_p2 = (($signed(x_52_val) < $signed(18'd39425)) ? 1'b1 : 1'b0);

assign icmp_ln86_1395_fu_418_p2 = (($signed(x_47_val) < $signed(18'd105141)) ? 1'b1 : 1'b0);

assign icmp_ln86_1396_fu_424_p2 = (($signed(x_52_val) < $signed(18'd87553)) ? 1'b1 : 1'b0);

assign icmp_ln86_1397_fu_430_p2 = (($signed(x_52_val) < $signed(18'd51713)) ? 1'b1 : 1'b0);

assign icmp_ln86_1398_fu_436_p2 = (($signed(x_52_val) < $signed(18'd43521)) ? 1'b1 : 1'b0);

assign icmp_ln86_1399_fu_442_p2 = (($signed(x_15_val) < $signed(18'd10)) ? 1'b1 : 1'b0);

assign icmp_ln86_1400_fu_448_p2 = (($signed(x_11_val) < $signed(18'd459)) ? 1'b1 : 1'b0);

assign icmp_ln86_1401_fu_454_p2 = (($signed(x_52_val) < $signed(18'd54785)) ? 1'b1 : 1'b0);

assign icmp_ln86_1402_fu_460_p2 = (($signed(x_1_val) < $signed(18'd25477)) ? 1'b1 : 1'b0);

assign icmp_ln86_1403_fu_466_p2 = (($signed(x_52_val) < $signed(18'd57857)) ? 1'b1 : 1'b0);

assign icmp_ln86_1404_fu_472_p2 = (($signed(x_52_val) < $signed(18'd38401)) ? 1'b1 : 1'b0);

assign icmp_ln86_1405_fu_478_p2 = (($signed(x_24_val) < $signed(18'd433)) ? 1'b1 : 1'b0);

assign icmp_ln86_1406_fu_484_p2 = (($signed(x_52_val) < $signed(18'd31233)) ? 1'b1 : 1'b0);

assign icmp_ln86_1407_fu_490_p2 = (($signed(x_24_val) < $signed(18'd441)) ? 1'b1 : 1'b0);

assign icmp_ln86_1408_fu_496_p2 = (($signed(x_19_val) < $signed(18'd4220)) ? 1'b1 : 1'b0);

assign icmp_ln86_1409_fu_502_p2 = (($signed(x_8_val) < $signed(18'd1612)) ? 1'b1 : 1'b0);

assign icmp_ln86_1410_fu_508_p2 = (($signed(x_7_val) < $signed(18'd18582)) ? 1'b1 : 1'b0);

assign icmp_ln86_1411_fu_514_p2 = (($signed(x_7_val) < $signed(18'd20695)) ? 1'b1 : 1'b0);

assign icmp_ln86_1412_fu_520_p2 = (($signed(x_19_val) < $signed(18'd10817)) ? 1'b1 : 1'b0);

assign icmp_ln86_1413_fu_526_p2 = (($signed(x_24_val) < $signed(18'd394)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_346_p2 = (($signed(x_1_val) < $signed(18'd81148)) ? 1'b1 : 1'b0);

assign or_ln117_1248_fu_742_p2 = (and_ln102_1525_fu_652_p2 | and_ln102_1510_fu_550_p2);

assign or_ln117_1249_fu_756_p2 = (and_ln102_1515_fu_598_p2 | and_ln102_1510_fu_550_p2);

assign or_ln117_1250_fu_770_p2 = (or_ln117_1249_fu_756_p2 | and_ln102_1527_fu_664_p2);

assign or_ln117_1251_fu_796_p2 = (and_ln102_fu_532_p2 | and_ln102_1528_fu_670_p2);

assign or_ln117_1252_fu_810_p2 = (and_ln102_fu_532_p2 | and_ln102_1516_fu_610_p2);

assign or_ln117_1253_fu_824_p2 = (or_ln117_1252_fu_810_p2 | and_ln102_1530_fu_682_p2);

assign or_ln117_1254_fu_838_p2 = (and_ln102_fu_532_p2 | and_ln102_1511_fu_568_p2);

assign or_ln117_1255_fu_852_p2 = (or_ln117_1254_fu_838_p2 | and_ln102_1531_fu_688_p2);

assign or_ln117_1256_fu_866_p2 = (or_ln117_1254_fu_838_p2 | and_ln102_1517_fu_622_p2);

assign or_ln117_1257_fu_880_p2 = (or_ln117_1256_fu_866_p2 | and_ln102_1533_fu_700_p2);

assign or_ln117_1258_fu_1071_p2 = (icmp_ln86_reg_1412 | and_ln102_1534_fu_1007_p2);

assign or_ln117_1259_fu_1076_p2 = (icmp_ln86_reg_1412 | and_ln102_1518_fu_967_p2);

assign or_ln117_1260_fu_1088_p2 = (or_ln117_1259_fu_1076_p2 | and_ln102_1536_fu_1017_p2);

assign or_ln117_1261_fu_1102_p2 = (icmp_ln86_reg_1412 | and_ln102_1512_fu_935_p2);

assign or_ln117_1262_fu_1115_p2 = (or_ln117_1261_fu_1102_p2 | and_ln102_1537_fu_1023_p2);

assign or_ln117_1263_fu_1129_p2 = (or_ln117_1261_fu_1102_p2 | and_ln102_1519_fu_977_p2);

assign or_ln117_1264_fu_1143_p2 = (or_ln117_1263_fu_1129_p2 | and_ln102_1539_fu_1033_p2);

assign or_ln117_1265_fu_1157_p2 = (icmp_ln86_reg_1412 | and_ln102_1509_fu_919_p2);

assign or_ln117_1266_fu_1170_p2 = (or_ln117_1265_fu_1157_p2 | and_ln102_1540_fu_1039_p2);

assign or_ln117_1267_fu_1184_p2 = (or_ln117_1265_fu_1157_p2 | and_ln102_1520_fu_987_p2);

assign or_ln117_1268_fu_1198_p2 = (or_ln117_1267_fu_1184_p2 | and_ln102_1542_fu_1049_p2);

assign or_ln117_1269_fu_1212_p2 = (or_ln117_1265_fu_1157_p2 | and_ln102_1513_fu_951_p2);

assign or_ln117_1270_fu_1226_p2 = (or_ln117_1269_fu_1212_p2 | and_ln102_1543_fu_1055_p2);

assign or_ln117_1271_fu_1240_p2 = (or_ln117_1269_fu_1212_p2 | and_ln102_1521_fu_997_p2);

assign or_ln117_1272_fu_1254_p2 = (or_ln117_1271_fu_1240_p2 | and_ln102_1545_fu_1065_p2);

assign or_ln117_fu_716_p2 = (and_ln102_1524_fu_646_p2 | and_ln102_1514_fu_586_p2);

assign select_ln117_1339_fu_730_p3 = ((or_ln117_fu_716_p2[0:0] == 1'b1) ? select_ln117_fu_722_p3 : 2'd3);

assign select_ln117_1340_fu_748_p3 = ((and_ln102_1510_fu_550_p2[0:0] == 1'b1) ? zext_ln117_150_fu_738_p1 : 3'd4);

assign select_ln117_1341_fu_762_p3 = ((or_ln117_1248_fu_742_p2[0:0] == 1'b1) ? select_ln117_1340_fu_748_p3 : 3'd5);

assign select_ln117_1342_fu_776_p3 = ((or_ln117_1249_fu_756_p2[0:0] == 1'b1) ? select_ln117_1341_fu_762_p3 : 3'd6);

assign select_ln117_1343_fu_784_p3 = ((or_ln117_1250_fu_770_p2[0:0] == 1'b1) ? select_ln117_1342_fu_776_p3 : 3'd7);

assign select_ln117_1344_fu_802_p3 = ((and_ln102_fu_532_p2[0:0] == 1'b1) ? zext_ln117_151_fu_792_p1 : 4'd8);

assign select_ln117_1345_fu_816_p3 = ((or_ln117_1251_fu_796_p2[0:0] == 1'b1) ? select_ln117_1344_fu_802_p3 : 4'd9);

assign select_ln117_1346_fu_830_p3 = ((or_ln117_1252_fu_810_p2[0:0] == 1'b1) ? select_ln117_1345_fu_816_p3 : 4'd10);

assign select_ln117_1347_fu_844_p3 = ((or_ln117_1253_fu_824_p2[0:0] == 1'b1) ? select_ln117_1346_fu_830_p3 : 4'd11);

assign select_ln117_1348_fu_858_p3 = ((or_ln117_1254_fu_838_p2[0:0] == 1'b1) ? select_ln117_1347_fu_844_p3 : 4'd12);

assign select_ln117_1349_fu_872_p3 = ((or_ln117_1255_fu_852_p2[0:0] == 1'b1) ? select_ln117_1348_fu_858_p3 : 4'd13);

assign select_ln117_1350_fu_886_p3 = ((or_ln117_1256_fu_866_p2[0:0] == 1'b1) ? select_ln117_1349_fu_872_p3 : 4'd14);

assign select_ln117_1351_fu_894_p3 = ((or_ln117_1257_fu_880_p2[0:0] == 1'b1) ? select_ln117_1350_fu_886_p3 : 4'd15);

assign select_ln117_1352_fu_906_p3 = ((icmp_ln86_fu_346_p2[0:0] == 1'b1) ? zext_ln117_152_fu_902_p1 : 5'd16);

assign select_ln117_1353_fu_1081_p3 = ((or_ln117_1258_fu_1071_p2[0:0] == 1'b1) ? select_ln117_1352_reg_1503 : 5'd17);

assign select_ln117_1354_fu_1094_p3 = ((or_ln117_1259_fu_1076_p2[0:0] == 1'b1) ? select_ln117_1353_fu_1081_p3 : 5'd18);

assign select_ln117_1355_fu_1107_p3 = ((or_ln117_1260_fu_1088_p2[0:0] == 1'b1) ? select_ln117_1354_fu_1094_p3 : 5'd19);

assign select_ln117_1356_fu_1121_p3 = ((or_ln117_1261_fu_1102_p2[0:0] == 1'b1) ? select_ln117_1355_fu_1107_p3 : 5'd20);

assign select_ln117_1357_fu_1135_p3 = ((or_ln117_1262_fu_1115_p2[0:0] == 1'b1) ? select_ln117_1356_fu_1121_p3 : 5'd21);

assign select_ln117_1358_fu_1149_p3 = ((or_ln117_1263_fu_1129_p2[0:0] == 1'b1) ? select_ln117_1357_fu_1135_p3 : 5'd22);

assign select_ln117_1359_fu_1162_p3 = ((or_ln117_1264_fu_1143_p2[0:0] == 1'b1) ? select_ln117_1358_fu_1149_p3 : 5'd23);

assign select_ln117_1360_fu_1176_p3 = ((or_ln117_1265_fu_1157_p2[0:0] == 1'b1) ? select_ln117_1359_fu_1162_p3 : 5'd24);

assign select_ln117_1361_fu_1190_p3 = ((or_ln117_1266_fu_1170_p2[0:0] == 1'b1) ? select_ln117_1360_fu_1176_p3 : 5'd25);

assign select_ln117_1362_fu_1204_p3 = ((or_ln117_1267_fu_1184_p2[0:0] == 1'b1) ? select_ln117_1361_fu_1190_p3 : 5'd26);

assign select_ln117_1363_fu_1218_p3 = ((or_ln117_1268_fu_1198_p2[0:0] == 1'b1) ? select_ln117_1362_fu_1204_p3 : 5'd27);

assign select_ln117_1364_fu_1232_p3 = ((or_ln117_1269_fu_1212_p2[0:0] == 1'b1) ? select_ln117_1363_fu_1218_p3 : 5'd28);

assign select_ln117_1365_fu_1246_p3 = ((or_ln117_1270_fu_1226_p2[0:0] == 1'b1) ? select_ln117_1364_fu_1232_p3 : 5'd29);

assign select_ln117_1366_fu_1260_p3 = ((or_ln117_1271_fu_1240_p2[0:0] == 1'b1) ? select_ln117_1365_fu_1246_p3 : 5'd30);

assign select_ln117_fu_722_p3 = ((and_ln102_1514_fu_586_p2[0:0] == 1'b1) ? zext_ln117_fu_712_p1 : 2'd2);

assign xor_ln104_661_fu_538_p2 = (icmp_ln86_1384_fu_352_p2 ^ 1'd1);

assign xor_ln104_662_fu_924_p2 = (icmp_ln86_1385_reg_1421 ^ 1'd1);

assign xor_ln104_663_fu_556_p2 = (icmp_ln86_1386_fu_364_p2 ^ 1'd1);

assign xor_ln104_664_fu_574_p2 = (icmp_ln86_1387_fu_370_p2 ^ 1'd1);

assign xor_ln104_665_fu_940_p2 = (icmp_ln86_1388_reg_1427 ^ 1'd1);

assign xor_ln104_666_fu_956_p2 = (icmp_ln86_1389_reg_1433 ^ 1'd1);

assign xor_ln104_667_fu_592_p2 = (icmp_ln86_1390_fu_388_p2 ^ 1'd1);

assign xor_ln104_668_fu_604_p2 = (icmp_ln86_1391_fu_394_p2 ^ 1'd1);

assign xor_ln104_669_fu_616_p2 = (icmp_ln86_1392_fu_400_p2 ^ 1'd1);

assign xor_ln104_670_fu_628_p2 = (icmp_ln86_1393_fu_406_p2 ^ 1'd1);

assign xor_ln104_671_fu_972_p2 = (icmp_ln86_1394_reg_1439 ^ 1'd1);

assign xor_ln104_672_fu_982_p2 = (icmp_ln86_1395_reg_1445 ^ 1'd1);

assign xor_ln104_673_fu_992_p2 = (icmp_ln86_1396_reg_1451 ^ 1'd1);

assign xor_ln104_674_fu_1002_p2 = (icmp_ln86_1397_reg_1457 ^ 1'd1);

assign xor_ln104_fu_914_p2 = (icmp_ln86_reg_1412 ^ 1'd1);

assign xor_ln117_fu_706_p2 = (1'd1 ^ and_ln102_1522_fu_634_p2);

assign zext_ln117_150_fu_738_p1 = select_ln117_1339_fu_730_p3;

assign zext_ln117_151_fu_792_p1 = select_ln117_1343_fu_784_p3;

assign zext_ln117_152_fu_902_p1 = select_ln117_1351_fu_894_p3;

assign zext_ln117_fu_712_p1 = xor_ln117_fu_706_p2;

endmodule //my_prj_decision_function_124
