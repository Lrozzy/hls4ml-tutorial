// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_68 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_3_val,
        x_11_val,
        x_12_val,
        x_15_val,
        x_16_val,
        x_19_val,
        x_23_val,
        x_25_val,
        x_29_val,
        x_30_val,
        x_31_val,
        x_32_val,
        x_34_val,
        x_36_val,
        x_40_val,
        x_47_val,
        x_48_val,
        x_49_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_3_val;
input  [17:0] x_11_val;
input  [17:0] x_12_val;
input  [17:0] x_15_val;
input  [17:0] x_16_val;
input  [17:0] x_19_val;
input  [17:0] x_23_val;
input  [17:0] x_25_val;
input  [17:0] x_29_val;
input  [17:0] x_30_val;
input  [17:0] x_31_val;
input  [17:0] x_32_val;
input  [17:0] x_34_val;
input  [17:0] x_36_val;
input  [17:0] x_40_val;
input  [17:0] x_47_val;
input  [17:0] x_48_val;
input  [17:0] x_49_val;
input  [17:0] x_52_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_392_p2;
reg   [0:0] icmp_ln86_reg_1458;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_889_fu_404_p2;
reg   [0:0] icmp_ln86_889_reg_1467;
wire   [0:0] icmp_ln86_892_fu_422_p2;
reg   [0:0] icmp_ln86_892_reg_1473;
wire   [0:0] icmp_ln86_893_fu_428_p2;
reg   [0:0] icmp_ln86_893_reg_1479;
wire   [0:0] icmp_ln86_898_fu_458_p2;
reg   [0:0] icmp_ln86_898_reg_1485;
wire   [0:0] icmp_ln86_899_fu_464_p2;
reg   [0:0] icmp_ln86_899_reg_1491;
wire   [0:0] icmp_ln86_900_fu_470_p2;
reg   [0:0] icmp_ln86_900_reg_1497;
wire   [0:0] icmp_ln86_901_fu_476_p2;
reg   [0:0] icmp_ln86_901_reg_1503;
wire   [0:0] icmp_ln86_910_fu_530_p2;
reg   [0:0] icmp_ln86_910_reg_1509;
wire   [0:0] icmp_ln86_911_fu_536_p2;
reg   [0:0] icmp_ln86_911_reg_1514;
wire   [0:0] icmp_ln86_912_fu_542_p2;
reg   [0:0] icmp_ln86_912_reg_1519;
wire   [0:0] icmp_ln86_913_fu_548_p2;
reg   [0:0] icmp_ln86_913_reg_1524;
wire   [0:0] icmp_ln86_914_fu_554_p2;
reg   [0:0] icmp_ln86_914_reg_1529;
wire   [0:0] icmp_ln86_915_fu_560_p2;
reg   [0:0] icmp_ln86_915_reg_1534;
wire   [0:0] icmp_ln86_916_fu_566_p2;
reg   [0:0] icmp_ln86_916_reg_1539;
wire   [0:0] icmp_ln86_917_fu_572_p2;
reg   [0:0] icmp_ln86_917_reg_1544;
wire   [4:0] select_ln117_874_fu_952_p3;
reg   [4:0] select_ln117_874_reg_1549;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln86_888_fu_398_p2;
wire   [0:0] xor_ln104_421_fu_584_p2;
wire   [0:0] icmp_ln86_890_fu_410_p2;
wire   [0:0] and_ln102_fu_578_p2;
wire   [0:0] xor_ln104_423_fu_602_p2;
wire   [0:0] icmp_ln86_891_fu_416_p2;
wire   [0:0] and_ln104_fu_590_p2;
wire   [0:0] xor_ln104_424_fu_620_p2;
wire   [0:0] icmp_ln86_894_fu_434_p2;
wire   [0:0] and_ln102_1089_fu_596_p2;
wire   [0:0] icmp_ln86_895_fu_440_p2;
wire   [0:0] and_ln104_162_fu_608_p2;
wire   [0:0] icmp_ln86_896_fu_446_p2;
wire   [0:0] and_ln102_1090_fu_614_p2;
wire   [0:0] icmp_ln86_897_fu_452_p2;
wire   [0:0] and_ln104_163_fu_626_p2;
wire   [0:0] icmp_ln86_902_fu_482_p2;
wire   [0:0] and_ln102_1093_fu_632_p2;
wire   [0:0] icmp_ln86_903_fu_488_p2;
wire   [0:0] xor_ln104_427_fu_638_p2;
wire   [0:0] and_ln102_1102_fu_686_p2;
wire   [0:0] icmp_ln86_904_fu_494_p2;
wire   [0:0] and_ln102_1094_fu_644_p2;
wire   [0:0] icmp_ln86_905_fu_500_p2;
wire   [0:0] xor_ln104_428_fu_650_p2;
wire   [0:0] and_ln102_1105_fu_704_p2;
wire   [0:0] icmp_ln86_906_fu_506_p2;
wire   [0:0] and_ln102_1095_fu_656_p2;
wire   [0:0] icmp_ln86_907_fu_512_p2;
wire   [0:0] xor_ln104_429_fu_662_p2;
wire   [0:0] and_ln102_1108_fu_722_p2;
wire   [0:0] icmp_ln86_908_fu_518_p2;
wire   [0:0] and_ln102_1096_fu_668_p2;
wire   [0:0] icmp_ln86_909_fu_524_p2;
wire   [0:0] xor_ln104_430_fu_674_p2;
wire   [0:0] and_ln102_1111_fu_740_p2;
wire   [0:0] and_ln102_1101_fu_680_p2;
wire   [0:0] xor_ln117_fu_752_p2;
wire   [0:0] and_ln102_1103_fu_692_p2;
wire   [1:0] zext_ln117_fu_758_p1;
wire   [0:0] or_ln117_fu_762_p2;
wire   [1:0] select_ln117_fu_768_p3;
wire   [1:0] select_ln117_861_fu_776_p3;
wire   [0:0] and_ln102_1104_fu_698_p2;
wire   [2:0] zext_ln117_94_fu_784_p1;
wire   [0:0] or_ln117_787_fu_788_p2;
wire   [2:0] select_ln117_862_fu_794_p3;
wire   [0:0] or_ln117_788_fu_802_p2;
wire   [0:0] and_ln102_1106_fu_710_p2;
wire   [2:0] select_ln117_863_fu_808_p3;
wire   [0:0] or_ln117_789_fu_816_p2;
wire   [2:0] select_ln117_864_fu_822_p3;
wire   [2:0] select_ln117_865_fu_830_p3;
wire   [0:0] and_ln102_1107_fu_716_p2;
wire   [3:0] zext_ln117_95_fu_838_p1;
wire   [0:0] or_ln117_790_fu_842_p2;
wire   [3:0] select_ln117_866_fu_848_p3;
wire   [0:0] or_ln117_791_fu_856_p2;
wire   [0:0] and_ln102_1109_fu_728_p2;
wire   [3:0] select_ln117_867_fu_862_p3;
wire   [0:0] or_ln117_792_fu_870_p2;
wire   [3:0] select_ln117_868_fu_876_p3;
wire   [0:0] or_ln117_793_fu_884_p2;
wire   [0:0] and_ln102_1110_fu_734_p2;
wire   [3:0] select_ln117_869_fu_890_p3;
wire   [0:0] or_ln117_794_fu_898_p2;
wire   [3:0] select_ln117_870_fu_904_p3;
wire   [0:0] or_ln117_795_fu_912_p2;
wire   [0:0] and_ln102_1112_fu_746_p2;
wire   [3:0] select_ln117_871_fu_918_p3;
wire   [0:0] or_ln117_796_fu_926_p2;
wire   [3:0] select_ln117_872_fu_932_p3;
wire   [3:0] select_ln117_873_fu_940_p3;
wire   [4:0] zext_ln117_96_fu_948_p1;
wire   [0:0] xor_ln104_fu_960_p2;
wire   [0:0] xor_ln104_422_fu_970_p2;
wire   [0:0] and_ln102_1088_fu_965_p2;
wire   [0:0] xor_ln104_425_fu_986_p2;
wire   [0:0] and_ln104_161_fu_975_p2;
wire   [0:0] xor_ln104_426_fu_1002_p2;
wire   [0:0] and_ln102_1091_fu_981_p2;
wire   [0:0] and_ln104_164_fu_991_p2;
wire   [0:0] and_ln102_1092_fu_997_p2;
wire   [0:0] and_ln104_165_fu_1007_p2;
wire   [0:0] and_ln102_1097_fu_1013_p2;
wire   [0:0] xor_ln104_431_fu_1018_p2;
wire   [0:0] and_ln102_1114_fu_1058_p2;
wire   [0:0] and_ln102_1098_fu_1023_p2;
wire   [0:0] xor_ln104_432_fu_1028_p2;
wire   [0:0] and_ln102_1117_fu_1074_p2;
wire   [0:0] and_ln102_1099_fu_1033_p2;
wire   [0:0] xor_ln104_433_fu_1038_p2;
wire   [0:0] and_ln102_1120_fu_1090_p2;
wire   [0:0] and_ln102_1100_fu_1043_p2;
wire   [0:0] xor_ln104_434_fu_1048_p2;
wire   [0:0] and_ln102_1123_fu_1106_p2;
wire   [0:0] and_ln102_1113_fu_1053_p2;
wire   [0:0] or_ln117_797_fu_1117_p2;
wire   [0:0] or_ln117_798_fu_1122_p2;
wire   [0:0] and_ln102_1115_fu_1063_p2;
wire   [4:0] select_ln117_875_fu_1127_p3;
wire   [0:0] or_ln117_799_fu_1134_p2;
wire   [4:0] select_ln117_876_fu_1140_p3;
wire   [0:0] or_ln117_800_fu_1148_p2;
wire   [0:0] and_ln102_1116_fu_1069_p2;
wire   [4:0] select_ln117_877_fu_1153_p3;
wire   [0:0] or_ln117_801_fu_1161_p2;
wire   [4:0] select_ln117_878_fu_1167_p3;
wire   [0:0] or_ln117_802_fu_1175_p2;
wire   [0:0] and_ln102_1118_fu_1079_p2;
wire   [4:0] select_ln117_879_fu_1181_p3;
wire   [0:0] or_ln117_803_fu_1189_p2;
wire   [4:0] select_ln117_880_fu_1195_p3;
wire   [0:0] or_ln117_804_fu_1203_p2;
wire   [0:0] and_ln102_1119_fu_1085_p2;
wire   [4:0] select_ln117_881_fu_1208_p3;
wire   [0:0] or_ln117_805_fu_1216_p2;
wire   [4:0] select_ln117_882_fu_1222_p3;
wire   [0:0] or_ln117_806_fu_1230_p2;
wire   [0:0] and_ln102_1121_fu_1095_p2;
wire   [4:0] select_ln117_883_fu_1236_p3;
wire   [0:0] or_ln117_807_fu_1244_p2;
wire   [4:0] select_ln117_884_fu_1250_p3;
wire   [0:0] or_ln117_808_fu_1258_p2;
wire   [0:0] and_ln102_1122_fu_1101_p2;
wire   [4:0] select_ln117_885_fu_1264_p3;
wire   [0:0] or_ln117_809_fu_1272_p2;
wire   [4:0] select_ln117_886_fu_1278_p3;
wire   [0:0] or_ln117_810_fu_1286_p2;
wire   [0:0] and_ln102_1124_fu_1111_p2;
wire   [4:0] select_ln117_887_fu_1292_p3;
wire   [0:0] or_ln117_811_fu_1300_p2;
wire   [4:0] select_ln117_888_fu_1306_p3;
wire   [11:0] agg_result_fu_1322_p65;
wire   [4:0] agg_result_fu_1322_p66;
wire   [11:0] agg_result_fu_1322_p67;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1322_p1;
wire   [4:0] agg_result_fu_1322_p3;
wire   [4:0] agg_result_fu_1322_p5;
wire   [4:0] agg_result_fu_1322_p7;
wire   [4:0] agg_result_fu_1322_p9;
wire   [4:0] agg_result_fu_1322_p11;
wire   [4:0] agg_result_fu_1322_p13;
wire   [4:0] agg_result_fu_1322_p15;
wire   [4:0] agg_result_fu_1322_p17;
wire   [4:0] agg_result_fu_1322_p19;
wire   [4:0] agg_result_fu_1322_p21;
wire   [4:0] agg_result_fu_1322_p23;
wire   [4:0] agg_result_fu_1322_p25;
wire   [4:0] agg_result_fu_1322_p27;
wire   [4:0] agg_result_fu_1322_p29;
wire   [4:0] agg_result_fu_1322_p31;
wire  signed [4:0] agg_result_fu_1322_p33;
wire  signed [4:0] agg_result_fu_1322_p35;
wire  signed [4:0] agg_result_fu_1322_p37;
wire  signed [4:0] agg_result_fu_1322_p39;
wire  signed [4:0] agg_result_fu_1322_p41;
wire  signed [4:0] agg_result_fu_1322_p43;
wire  signed [4:0] agg_result_fu_1322_p45;
wire  signed [4:0] agg_result_fu_1322_p47;
wire  signed [4:0] agg_result_fu_1322_p49;
wire  signed [4:0] agg_result_fu_1322_p51;
wire  signed [4:0] agg_result_fu_1322_p53;
wire  signed [4:0] agg_result_fu_1322_p55;
wire  signed [4:0] agg_result_fu_1322_p57;
wire  signed [4:0] agg_result_fu_1322_p59;
wire  signed [4:0] agg_result_fu_1322_p61;
wire  signed [4:0] agg_result_fu_1322_p63;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_65_5_12_1_1_x15 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 12 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 12 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 12 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 12 ),
    .CASE31( 5'h1F ),
    .din31_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_65_5_12_1_1_x15_U762(
    .din0(12'd274),
    .din1(12'd1081),
    .din2(12'd3919),
    .din3(12'd55),
    .din4(12'd3964),
    .din5(12'd78),
    .din6(12'd3958),
    .din7(12'd18),
    .din8(12'd3884),
    .din9(12'd163),
    .din10(12'd14),
    .din11(12'd380),
    .din12(12'd3820),
    .din13(12'd4081),
    .din14(12'd277),
    .din15(12'd3886),
    .din16(12'd3619),
    .din17(12'd345),
    .din18(12'd3916),
    .din19(12'd835),
    .din20(12'd241),
    .din21(12'd3622),
    .din22(12'd3794),
    .din23(12'd737),
    .din24(12'd4007),
    .din25(12'd850),
    .din26(12'd3708),
    .din27(12'd261),
    .din28(12'd4062),
    .din29(12'd333),
    .din30(12'd1397),
    .din31(12'd3867),
    .def(agg_result_fu_1322_p65),
    .sel(agg_result_fu_1322_p66),
    .dout(agg_result_fu_1322_p67)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_889_reg_1467 <= icmp_ln86_889_fu_404_p2;
        icmp_ln86_892_reg_1473 <= icmp_ln86_892_fu_422_p2;
        icmp_ln86_893_reg_1479 <= icmp_ln86_893_fu_428_p2;
        icmp_ln86_898_reg_1485 <= icmp_ln86_898_fu_458_p2;
        icmp_ln86_899_reg_1491 <= icmp_ln86_899_fu_464_p2;
        icmp_ln86_900_reg_1497 <= icmp_ln86_900_fu_470_p2;
        icmp_ln86_901_reg_1503 <= icmp_ln86_901_fu_476_p2;
        icmp_ln86_910_reg_1509 <= icmp_ln86_910_fu_530_p2;
        icmp_ln86_911_reg_1514 <= icmp_ln86_911_fu_536_p2;
        icmp_ln86_912_reg_1519 <= icmp_ln86_912_fu_542_p2;
        icmp_ln86_913_reg_1524 <= icmp_ln86_913_fu_548_p2;
        icmp_ln86_914_reg_1529 <= icmp_ln86_914_fu_554_p2;
        icmp_ln86_915_reg_1534 <= icmp_ln86_915_fu_560_p2;
        icmp_ln86_916_reg_1539 <= icmp_ln86_916_fu_566_p2;
        icmp_ln86_917_reg_1544 <= icmp_ln86_917_fu_572_p2;
        icmp_ln86_reg_1458 <= icmp_ln86_fu_392_p2;
        select_ln117_874_reg_1549 <= select_ln117_874_fu_952_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1322_p65 = 'bx;

assign agg_result_fu_1322_p66 = ((or_ln117_811_fu_1300_p2[0:0] == 1'b1) ? select_ln117_888_fu_1306_p3 : 5'd31);

assign and_ln102_1088_fu_965_p2 = (xor_ln104_fu_960_p2 & icmp_ln86_889_reg_1467);

assign and_ln102_1089_fu_596_p2 = (icmp_ln86_890_fu_410_p2 & and_ln102_fu_578_p2);

assign and_ln102_1090_fu_614_p2 = (icmp_ln86_891_fu_416_p2 & and_ln104_fu_590_p2);

assign and_ln102_1091_fu_981_p2 = (icmp_ln86_892_reg_1473 & and_ln102_1088_fu_965_p2);

assign and_ln102_1092_fu_997_p2 = (icmp_ln86_893_reg_1479 & and_ln104_161_fu_975_p2);

assign and_ln102_1093_fu_632_p2 = (icmp_ln86_894_fu_434_p2 & and_ln102_1089_fu_596_p2);

assign and_ln102_1094_fu_644_p2 = (icmp_ln86_895_fu_440_p2 & and_ln104_162_fu_608_p2);

assign and_ln102_1095_fu_656_p2 = (icmp_ln86_896_fu_446_p2 & and_ln102_1090_fu_614_p2);

assign and_ln102_1096_fu_668_p2 = (icmp_ln86_897_fu_452_p2 & and_ln104_163_fu_626_p2);

assign and_ln102_1097_fu_1013_p2 = (icmp_ln86_898_reg_1485 & and_ln102_1091_fu_981_p2);

assign and_ln102_1098_fu_1023_p2 = (icmp_ln86_899_reg_1491 & and_ln104_164_fu_991_p2);

assign and_ln102_1099_fu_1033_p2 = (icmp_ln86_900_reg_1497 & and_ln102_1092_fu_997_p2);

assign and_ln102_1100_fu_1043_p2 = (icmp_ln86_901_reg_1503 & and_ln104_165_fu_1007_p2);

assign and_ln102_1101_fu_680_p2 = (icmp_ln86_902_fu_482_p2 & and_ln102_1093_fu_632_p2);

assign and_ln102_1102_fu_686_p2 = (xor_ln104_427_fu_638_p2 & icmp_ln86_903_fu_488_p2);

assign and_ln102_1103_fu_692_p2 = (and_ln102_1102_fu_686_p2 & and_ln102_1089_fu_596_p2);

assign and_ln102_1104_fu_698_p2 = (icmp_ln86_904_fu_494_p2 & and_ln102_1094_fu_644_p2);

assign and_ln102_1105_fu_704_p2 = (xor_ln104_428_fu_650_p2 & icmp_ln86_905_fu_500_p2);

assign and_ln102_1106_fu_710_p2 = (and_ln104_162_fu_608_p2 & and_ln102_1105_fu_704_p2);

assign and_ln102_1107_fu_716_p2 = (icmp_ln86_906_fu_506_p2 & and_ln102_1095_fu_656_p2);

assign and_ln102_1108_fu_722_p2 = (xor_ln104_429_fu_662_p2 & icmp_ln86_907_fu_512_p2);

assign and_ln102_1109_fu_728_p2 = (and_ln102_1108_fu_722_p2 & and_ln102_1090_fu_614_p2);

assign and_ln102_1110_fu_734_p2 = (icmp_ln86_908_fu_518_p2 & and_ln102_1096_fu_668_p2);

assign and_ln102_1111_fu_740_p2 = (xor_ln104_430_fu_674_p2 & icmp_ln86_909_fu_524_p2);

assign and_ln102_1112_fu_746_p2 = (and_ln104_163_fu_626_p2 & and_ln102_1111_fu_740_p2);

assign and_ln102_1113_fu_1053_p2 = (icmp_ln86_910_reg_1509 & and_ln102_1097_fu_1013_p2);

assign and_ln102_1114_fu_1058_p2 = (xor_ln104_431_fu_1018_p2 & icmp_ln86_911_reg_1514);

assign and_ln102_1115_fu_1063_p2 = (and_ln102_1114_fu_1058_p2 & and_ln102_1091_fu_981_p2);

assign and_ln102_1116_fu_1069_p2 = (icmp_ln86_912_reg_1519 & and_ln102_1098_fu_1023_p2);

assign and_ln102_1117_fu_1074_p2 = (xor_ln104_432_fu_1028_p2 & icmp_ln86_913_reg_1524);

assign and_ln102_1118_fu_1079_p2 = (and_ln104_164_fu_991_p2 & and_ln102_1117_fu_1074_p2);

assign and_ln102_1119_fu_1085_p2 = (icmp_ln86_914_reg_1529 & and_ln102_1099_fu_1033_p2);

assign and_ln102_1120_fu_1090_p2 = (xor_ln104_433_fu_1038_p2 & icmp_ln86_915_reg_1534);

assign and_ln102_1121_fu_1095_p2 = (and_ln102_1120_fu_1090_p2 & and_ln102_1092_fu_997_p2);

assign and_ln102_1122_fu_1101_p2 = (icmp_ln86_916_reg_1539 & and_ln102_1100_fu_1043_p2);

assign and_ln102_1123_fu_1106_p2 = (xor_ln104_434_fu_1048_p2 & icmp_ln86_917_reg_1544);

assign and_ln102_1124_fu_1111_p2 = (and_ln104_165_fu_1007_p2 & and_ln102_1123_fu_1106_p2);

assign and_ln102_fu_578_p2 = (icmp_ln86_fu_392_p2 & icmp_ln86_888_fu_398_p2);

assign and_ln104_161_fu_975_p2 = (xor_ln104_fu_960_p2 & xor_ln104_422_fu_970_p2);

assign and_ln104_162_fu_608_p2 = (xor_ln104_423_fu_602_p2 & and_ln102_fu_578_p2);

assign and_ln104_163_fu_626_p2 = (xor_ln104_424_fu_620_p2 & and_ln104_fu_590_p2);

assign and_ln104_164_fu_991_p2 = (xor_ln104_425_fu_986_p2 & and_ln102_1088_fu_965_p2);

assign and_ln104_165_fu_1007_p2 = (xor_ln104_426_fu_1002_p2 & and_ln104_161_fu_975_p2);

assign and_ln104_fu_590_p2 = (xor_ln104_421_fu_584_p2 & icmp_ln86_fu_392_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1322_p67;

assign icmp_ln86_888_fu_398_p2 = (($signed(x_49_val) < $signed(18'd79252)) ? 1'b1 : 1'b0);

assign icmp_ln86_889_fu_404_p2 = (($signed(x_1_val) < $signed(18'd254474)) ? 1'b1 : 1'b0);

assign icmp_ln86_890_fu_410_p2 = (($signed(x_47_val) < $signed(18'd28039)) ? 1'b1 : 1'b0);

assign icmp_ln86_891_fu_416_p2 = (($signed(x_48_val) < $signed(18'd83192)) ? 1'b1 : 1'b0);

assign icmp_ln86_892_fu_422_p2 = (($signed(x_49_val) < $signed(18'd86459)) ? 1'b1 : 1'b0);

assign icmp_ln86_893_fu_428_p2 = (($signed(x_40_val) < $signed(18'd498)) ? 1'b1 : 1'b0);

assign icmp_ln86_894_fu_434_p2 = (($signed(x_25_val) < $signed(18'd202)) ? 1'b1 : 1'b0);

assign icmp_ln86_895_fu_440_p2 = (($signed(x_16_val) < $signed(18'd63)) ? 1'b1 : 1'b0);

assign icmp_ln86_896_fu_446_p2 = (($signed(x_15_val) < $signed(18'd7)) ? 1'b1 : 1'b0);

assign icmp_ln86_897_fu_452_p2 = (($signed(x_3_val) < $signed(18'd91871)) ? 1'b1 : 1'b0);

assign icmp_ln86_898_fu_458_p2 = (($signed(x_12_val) < $signed(18'd259026)) ? 1'b1 : 1'b0);

assign icmp_ln86_899_fu_464_p2 = (($signed(x_11_val) < $signed(18'd992)) ? 1'b1 : 1'b0);

assign icmp_ln86_900_fu_470_p2 = (($signed(x_52_val) < $signed(18'd28161)) ? 1'b1 : 1'b0);

assign icmp_ln86_901_fu_476_p2 = (($signed(x_52_val) < $signed(18'd75265)) ? 1'b1 : 1'b0);

assign icmp_ln86_902_fu_482_p2 = (($signed(x_47_val) < $signed(18'd27386)) ? 1'b1 : 1'b0);

assign icmp_ln86_903_fu_488_p2 = (($signed(x_1_val) < $signed(18'd212530)) ? 1'b1 : 1'b0);

assign icmp_ln86_904_fu_494_p2 = (($signed(x_36_val) < $signed(18'd7)) ? 1'b1 : 1'b0);

assign icmp_ln86_905_fu_500_p2 = (($signed(x_1_val) < $signed(18'd232525)) ? 1'b1 : 1'b0);

assign icmp_ln86_906_fu_506_p2 = (($signed(x_1_val) < $signed(18'd226797)) ? 1'b1 : 1'b0);

assign icmp_ln86_907_fu_512_p2 = (($signed(x_19_val) < $signed(18'd782)) ? 1'b1 : 1'b0);

assign icmp_ln86_908_fu_518_p2 = (($signed(x_1_val) < $signed(18'd250634)) ? 1'b1 : 1'b0);

assign icmp_ln86_909_fu_524_p2 = (($signed(x_1_val) < $signed(18'd181932)) ? 1'b1 : 1'b0);

assign icmp_ln86_910_fu_530_p2 = (($signed(x_34_val) < $signed(18'd494)) ? 1'b1 : 1'b0);

assign icmp_ln86_911_fu_536_p2 = (($signed(x_34_val) < $signed(18'd467)) ? 1'b1 : 1'b0);

assign icmp_ln86_912_fu_542_p2 = (($signed(x_23_val) < $signed(18'd6)) ? 1'b1 : 1'b0);

assign icmp_ln86_913_fu_548_p2 = (($signed(x_32_val) < $signed(18'd923)) ? 1'b1 : 1'b0);

assign icmp_ln86_914_fu_554_p2 = (($signed(x_49_val) < $signed(18'd90582)) ? 1'b1 : 1'b0);

assign icmp_ln86_915_fu_560_p2 = (($signed(x_3_val) < $signed(18'd202648)) ? 1'b1 : 1'b0);

assign icmp_ln86_916_fu_566_p2 = (($signed(x_30_val) < $signed(18'd6632)) ? 1'b1 : 1'b0);

assign icmp_ln86_917_fu_572_p2 = (($signed(x_31_val) < $signed(18'd629)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_392_p2 = (($signed(x_29_val) < $signed(18'd7302)) ? 1'b1 : 1'b0);

assign or_ln117_787_fu_788_p2 = (and_ln102_1104_fu_698_p2 | and_ln102_1089_fu_596_p2);

assign or_ln117_788_fu_802_p2 = (and_ln102_1094_fu_644_p2 | and_ln102_1089_fu_596_p2);

assign or_ln117_789_fu_816_p2 = (or_ln117_788_fu_802_p2 | and_ln102_1106_fu_710_p2);

assign or_ln117_790_fu_842_p2 = (and_ln102_fu_578_p2 | and_ln102_1107_fu_716_p2);

assign or_ln117_791_fu_856_p2 = (and_ln102_fu_578_p2 | and_ln102_1095_fu_656_p2);

assign or_ln117_792_fu_870_p2 = (or_ln117_791_fu_856_p2 | and_ln102_1109_fu_728_p2);

assign or_ln117_793_fu_884_p2 = (and_ln102_fu_578_p2 | and_ln102_1090_fu_614_p2);

assign or_ln117_794_fu_898_p2 = (or_ln117_793_fu_884_p2 | and_ln102_1110_fu_734_p2);

assign or_ln117_795_fu_912_p2 = (or_ln117_793_fu_884_p2 | and_ln102_1096_fu_668_p2);

assign or_ln117_796_fu_926_p2 = (or_ln117_795_fu_912_p2 | and_ln102_1112_fu_746_p2);

assign or_ln117_797_fu_1117_p2 = (icmp_ln86_reg_1458 | and_ln102_1113_fu_1053_p2);

assign or_ln117_798_fu_1122_p2 = (icmp_ln86_reg_1458 | and_ln102_1097_fu_1013_p2);

assign or_ln117_799_fu_1134_p2 = (or_ln117_798_fu_1122_p2 | and_ln102_1115_fu_1063_p2);

assign or_ln117_800_fu_1148_p2 = (icmp_ln86_reg_1458 | and_ln102_1091_fu_981_p2);

assign or_ln117_801_fu_1161_p2 = (or_ln117_800_fu_1148_p2 | and_ln102_1116_fu_1069_p2);

assign or_ln117_802_fu_1175_p2 = (or_ln117_800_fu_1148_p2 | and_ln102_1098_fu_1023_p2);

assign or_ln117_803_fu_1189_p2 = (or_ln117_802_fu_1175_p2 | and_ln102_1118_fu_1079_p2);

assign or_ln117_804_fu_1203_p2 = (icmp_ln86_reg_1458 | and_ln102_1088_fu_965_p2);

assign or_ln117_805_fu_1216_p2 = (or_ln117_804_fu_1203_p2 | and_ln102_1119_fu_1085_p2);

assign or_ln117_806_fu_1230_p2 = (or_ln117_804_fu_1203_p2 | and_ln102_1099_fu_1033_p2);

assign or_ln117_807_fu_1244_p2 = (or_ln117_806_fu_1230_p2 | and_ln102_1121_fu_1095_p2);

assign or_ln117_808_fu_1258_p2 = (or_ln117_804_fu_1203_p2 | and_ln102_1092_fu_997_p2);

assign or_ln117_809_fu_1272_p2 = (or_ln117_808_fu_1258_p2 | and_ln102_1122_fu_1101_p2);

assign or_ln117_810_fu_1286_p2 = (or_ln117_808_fu_1258_p2 | and_ln102_1100_fu_1043_p2);

assign or_ln117_811_fu_1300_p2 = (or_ln117_810_fu_1286_p2 | and_ln102_1124_fu_1111_p2);

assign or_ln117_fu_762_p2 = (and_ln102_1103_fu_692_p2 | and_ln102_1093_fu_632_p2);

assign select_ln117_861_fu_776_p3 = ((or_ln117_fu_762_p2[0:0] == 1'b1) ? select_ln117_fu_768_p3 : 2'd3);

assign select_ln117_862_fu_794_p3 = ((and_ln102_1089_fu_596_p2[0:0] == 1'b1) ? zext_ln117_94_fu_784_p1 : 3'd4);

assign select_ln117_863_fu_808_p3 = ((or_ln117_787_fu_788_p2[0:0] == 1'b1) ? select_ln117_862_fu_794_p3 : 3'd5);

assign select_ln117_864_fu_822_p3 = ((or_ln117_788_fu_802_p2[0:0] == 1'b1) ? select_ln117_863_fu_808_p3 : 3'd6);

assign select_ln117_865_fu_830_p3 = ((or_ln117_789_fu_816_p2[0:0] == 1'b1) ? select_ln117_864_fu_822_p3 : 3'd7);

assign select_ln117_866_fu_848_p3 = ((and_ln102_fu_578_p2[0:0] == 1'b1) ? zext_ln117_95_fu_838_p1 : 4'd8);

assign select_ln117_867_fu_862_p3 = ((or_ln117_790_fu_842_p2[0:0] == 1'b1) ? select_ln117_866_fu_848_p3 : 4'd9);

assign select_ln117_868_fu_876_p3 = ((or_ln117_791_fu_856_p2[0:0] == 1'b1) ? select_ln117_867_fu_862_p3 : 4'd10);

assign select_ln117_869_fu_890_p3 = ((or_ln117_792_fu_870_p2[0:0] == 1'b1) ? select_ln117_868_fu_876_p3 : 4'd11);

assign select_ln117_870_fu_904_p3 = ((or_ln117_793_fu_884_p2[0:0] == 1'b1) ? select_ln117_869_fu_890_p3 : 4'd12);

assign select_ln117_871_fu_918_p3 = ((or_ln117_794_fu_898_p2[0:0] == 1'b1) ? select_ln117_870_fu_904_p3 : 4'd13);

assign select_ln117_872_fu_932_p3 = ((or_ln117_795_fu_912_p2[0:0] == 1'b1) ? select_ln117_871_fu_918_p3 : 4'd14);

assign select_ln117_873_fu_940_p3 = ((or_ln117_796_fu_926_p2[0:0] == 1'b1) ? select_ln117_872_fu_932_p3 : 4'd15);

assign select_ln117_874_fu_952_p3 = ((icmp_ln86_fu_392_p2[0:0] == 1'b1) ? zext_ln117_96_fu_948_p1 : 5'd16);

assign select_ln117_875_fu_1127_p3 = ((or_ln117_797_fu_1117_p2[0:0] == 1'b1) ? select_ln117_874_reg_1549 : 5'd17);

assign select_ln117_876_fu_1140_p3 = ((or_ln117_798_fu_1122_p2[0:0] == 1'b1) ? select_ln117_875_fu_1127_p3 : 5'd18);

assign select_ln117_877_fu_1153_p3 = ((or_ln117_799_fu_1134_p2[0:0] == 1'b1) ? select_ln117_876_fu_1140_p3 : 5'd19);

assign select_ln117_878_fu_1167_p3 = ((or_ln117_800_fu_1148_p2[0:0] == 1'b1) ? select_ln117_877_fu_1153_p3 : 5'd20);

assign select_ln117_879_fu_1181_p3 = ((or_ln117_801_fu_1161_p2[0:0] == 1'b1) ? select_ln117_878_fu_1167_p3 : 5'd21);

assign select_ln117_880_fu_1195_p3 = ((or_ln117_802_fu_1175_p2[0:0] == 1'b1) ? select_ln117_879_fu_1181_p3 : 5'd22);

assign select_ln117_881_fu_1208_p3 = ((or_ln117_803_fu_1189_p2[0:0] == 1'b1) ? select_ln117_880_fu_1195_p3 : 5'd23);

assign select_ln117_882_fu_1222_p3 = ((or_ln117_804_fu_1203_p2[0:0] == 1'b1) ? select_ln117_881_fu_1208_p3 : 5'd24);

assign select_ln117_883_fu_1236_p3 = ((or_ln117_805_fu_1216_p2[0:0] == 1'b1) ? select_ln117_882_fu_1222_p3 : 5'd25);

assign select_ln117_884_fu_1250_p3 = ((or_ln117_806_fu_1230_p2[0:0] == 1'b1) ? select_ln117_883_fu_1236_p3 : 5'd26);

assign select_ln117_885_fu_1264_p3 = ((or_ln117_807_fu_1244_p2[0:0] == 1'b1) ? select_ln117_884_fu_1250_p3 : 5'd27);

assign select_ln117_886_fu_1278_p3 = ((or_ln117_808_fu_1258_p2[0:0] == 1'b1) ? select_ln117_885_fu_1264_p3 : 5'd28);

assign select_ln117_887_fu_1292_p3 = ((or_ln117_809_fu_1272_p2[0:0] == 1'b1) ? select_ln117_886_fu_1278_p3 : 5'd29);

assign select_ln117_888_fu_1306_p3 = ((or_ln117_810_fu_1286_p2[0:0] == 1'b1) ? select_ln117_887_fu_1292_p3 : 5'd30);

assign select_ln117_fu_768_p3 = ((and_ln102_1093_fu_632_p2[0:0] == 1'b1) ? zext_ln117_fu_758_p1 : 2'd2);

assign xor_ln104_421_fu_584_p2 = (icmp_ln86_888_fu_398_p2 ^ 1'd1);

assign xor_ln104_422_fu_970_p2 = (icmp_ln86_889_reg_1467 ^ 1'd1);

assign xor_ln104_423_fu_602_p2 = (icmp_ln86_890_fu_410_p2 ^ 1'd1);

assign xor_ln104_424_fu_620_p2 = (icmp_ln86_891_fu_416_p2 ^ 1'd1);

assign xor_ln104_425_fu_986_p2 = (icmp_ln86_892_reg_1473 ^ 1'd1);

assign xor_ln104_426_fu_1002_p2 = (icmp_ln86_893_reg_1479 ^ 1'd1);

assign xor_ln104_427_fu_638_p2 = (icmp_ln86_894_fu_434_p2 ^ 1'd1);

assign xor_ln104_428_fu_650_p2 = (icmp_ln86_895_fu_440_p2 ^ 1'd1);

assign xor_ln104_429_fu_662_p2 = (icmp_ln86_896_fu_446_p2 ^ 1'd1);

assign xor_ln104_430_fu_674_p2 = (icmp_ln86_897_fu_452_p2 ^ 1'd1);

assign xor_ln104_431_fu_1018_p2 = (icmp_ln86_898_reg_1485 ^ 1'd1);

assign xor_ln104_432_fu_1028_p2 = (icmp_ln86_899_reg_1491 ^ 1'd1);

assign xor_ln104_433_fu_1038_p2 = (icmp_ln86_900_reg_1497 ^ 1'd1);

assign xor_ln104_434_fu_1048_p2 = (icmp_ln86_901_reg_1503 ^ 1'd1);

assign xor_ln104_fu_960_p2 = (icmp_ln86_reg_1458 ^ 1'd1);

assign xor_ln117_fu_752_p2 = (1'd1 ^ and_ln102_1101_fu_680_p2);

assign zext_ln117_94_fu_784_p1 = select_ln117_861_fu_776_p3;

assign zext_ln117_95_fu_838_p1 = select_ln117_865_fu_830_p3;

assign zext_ln117_96_fu_948_p1 = select_ln117_873_fu_940_p3;

assign zext_ln117_fu_758_p1 = xor_ln117_fu_752_p2;

endmodule //my_prj_decision_function_68
