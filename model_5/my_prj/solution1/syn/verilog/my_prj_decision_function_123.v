// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_123 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_3_val,
        x_4_val,
        x_6_val,
        x_7_val,
        x_8_val,
        x_9_val,
        x_12_val,
        x_13_val,
        x_18_val,
        x_23_val,
        x_24_val,
        x_25_val,
        x_43_val,
        x_50_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_3_val;
input  [17:0] x_4_val;
input  [17:0] x_6_val;
input  [17:0] x_7_val;
input  [17:0] x_8_val;
input  [17:0] x_9_val;
input  [17:0] x_12_val;
input  [17:0] x_13_val;
input  [17:0] x_18_val;
input  [17:0] x_23_val;
input  [17:0] x_24_val;
input  [17:0] x_25_val;
input  [17:0] x_43_val;
input  [17:0] x_50_val;
input  [17:0] x_52_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_362_p2;
reg   [0:0] icmp_ln86_reg_1428;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_1415_fu_374_p2;
reg   [0:0] icmp_ln86_1415_reg_1437;
wire   [0:0] icmp_ln86_1418_fu_392_p2;
reg   [0:0] icmp_ln86_1418_reg_1443;
wire   [0:0] icmp_ln86_1419_fu_398_p2;
reg   [0:0] icmp_ln86_1419_reg_1449;
wire   [0:0] icmp_ln86_1424_fu_428_p2;
reg   [0:0] icmp_ln86_1424_reg_1455;
wire   [0:0] icmp_ln86_1425_fu_434_p2;
reg   [0:0] icmp_ln86_1425_reg_1461;
wire   [0:0] icmp_ln86_1426_fu_440_p2;
reg   [0:0] icmp_ln86_1426_reg_1467;
wire   [0:0] icmp_ln86_1427_fu_446_p2;
reg   [0:0] icmp_ln86_1427_reg_1473;
wire   [0:0] icmp_ln86_1436_fu_500_p2;
reg   [0:0] icmp_ln86_1436_reg_1479;
wire   [0:0] icmp_ln86_1437_fu_506_p2;
reg   [0:0] icmp_ln86_1437_reg_1484;
wire   [0:0] icmp_ln86_1438_fu_512_p2;
reg   [0:0] icmp_ln86_1438_reg_1489;
wire   [0:0] icmp_ln86_1439_fu_518_p2;
reg   [0:0] icmp_ln86_1439_reg_1494;
wire   [0:0] icmp_ln86_1440_fu_524_p2;
reg   [0:0] icmp_ln86_1440_reg_1499;
wire   [0:0] icmp_ln86_1441_fu_530_p2;
reg   [0:0] icmp_ln86_1441_reg_1504;
wire   [0:0] icmp_ln86_1442_fu_536_p2;
reg   [0:0] icmp_ln86_1442_reg_1509;
wire   [0:0] icmp_ln86_1443_fu_542_p2;
reg   [0:0] icmp_ln86_1443_reg_1514;
wire   [4:0] select_ln117_1381_fu_922_p3;
reg   [4:0] select_ln117_1381_reg_1519;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln86_1414_fu_368_p2;
wire   [0:0] xor_ln104_675_fu_554_p2;
wire   [0:0] icmp_ln86_1416_fu_380_p2;
wire   [0:0] and_ln102_fu_548_p2;
wire   [0:0] xor_ln104_677_fu_572_p2;
wire   [0:0] icmp_ln86_1417_fu_386_p2;
wire   [0:0] and_ln104_fu_560_p2;
wire   [0:0] xor_ln104_678_fu_590_p2;
wire   [0:0] icmp_ln86_1420_fu_404_p2;
wire   [0:0] and_ln102_1547_fu_566_p2;
wire   [0:0] icmp_ln86_1421_fu_410_p2;
wire   [0:0] and_ln104_266_fu_578_p2;
wire   [0:0] icmp_ln86_1422_fu_416_p2;
wire   [0:0] and_ln102_1548_fu_584_p2;
wire   [0:0] icmp_ln86_1423_fu_422_p2;
wire   [0:0] and_ln104_267_fu_596_p2;
wire   [0:0] icmp_ln86_1428_fu_452_p2;
wire   [0:0] and_ln102_1551_fu_602_p2;
wire   [0:0] icmp_ln86_1429_fu_458_p2;
wire   [0:0] xor_ln104_681_fu_608_p2;
wire   [0:0] and_ln102_1560_fu_656_p2;
wire   [0:0] icmp_ln86_1430_fu_464_p2;
wire   [0:0] and_ln102_1552_fu_614_p2;
wire   [0:0] icmp_ln86_1431_fu_470_p2;
wire   [0:0] xor_ln104_682_fu_620_p2;
wire   [0:0] and_ln102_1563_fu_674_p2;
wire   [0:0] icmp_ln86_1432_fu_476_p2;
wire   [0:0] and_ln102_1553_fu_626_p2;
wire   [0:0] icmp_ln86_1433_fu_482_p2;
wire   [0:0] xor_ln104_683_fu_632_p2;
wire   [0:0] and_ln102_1566_fu_692_p2;
wire   [0:0] icmp_ln86_1434_fu_488_p2;
wire   [0:0] and_ln102_1554_fu_638_p2;
wire   [0:0] icmp_ln86_1435_fu_494_p2;
wire   [0:0] xor_ln104_684_fu_644_p2;
wire   [0:0] and_ln102_1569_fu_710_p2;
wire   [0:0] and_ln102_1559_fu_650_p2;
wire   [0:0] xor_ln117_fu_722_p2;
wire   [0:0] and_ln102_1561_fu_662_p2;
wire   [1:0] zext_ln117_fu_728_p1;
wire   [0:0] or_ln117_fu_732_p2;
wire   [1:0] select_ln117_fu_738_p3;
wire   [1:0] select_ln117_1368_fu_746_p3;
wire   [0:0] and_ln102_1562_fu_668_p2;
wire   [2:0] zext_ln117_153_fu_754_p1;
wire   [0:0] or_ln117_1273_fu_758_p2;
wire   [2:0] select_ln117_1369_fu_764_p3;
wire   [0:0] or_ln117_1274_fu_772_p2;
wire   [0:0] and_ln102_1564_fu_680_p2;
wire   [2:0] select_ln117_1370_fu_778_p3;
wire   [0:0] or_ln117_1275_fu_786_p2;
wire   [2:0] select_ln117_1371_fu_792_p3;
wire   [2:0] select_ln117_1372_fu_800_p3;
wire   [0:0] and_ln102_1565_fu_686_p2;
wire   [3:0] zext_ln117_154_fu_808_p1;
wire   [0:0] or_ln117_1276_fu_812_p2;
wire   [3:0] select_ln117_1373_fu_818_p3;
wire   [0:0] or_ln117_1277_fu_826_p2;
wire   [0:0] and_ln102_1567_fu_698_p2;
wire   [3:0] select_ln117_1374_fu_832_p3;
wire   [0:0] or_ln117_1278_fu_840_p2;
wire   [3:0] select_ln117_1375_fu_846_p3;
wire   [0:0] or_ln117_1279_fu_854_p2;
wire   [0:0] and_ln102_1568_fu_704_p2;
wire   [3:0] select_ln117_1376_fu_860_p3;
wire   [0:0] or_ln117_1280_fu_868_p2;
wire   [3:0] select_ln117_1377_fu_874_p3;
wire   [0:0] or_ln117_1281_fu_882_p2;
wire   [0:0] and_ln102_1570_fu_716_p2;
wire   [3:0] select_ln117_1378_fu_888_p3;
wire   [0:0] or_ln117_1282_fu_896_p2;
wire   [3:0] select_ln117_1379_fu_902_p3;
wire   [3:0] select_ln117_1380_fu_910_p3;
wire   [4:0] zext_ln117_155_fu_918_p1;
wire   [0:0] xor_ln104_fu_930_p2;
wire   [0:0] xor_ln104_676_fu_940_p2;
wire   [0:0] and_ln102_1546_fu_935_p2;
wire   [0:0] xor_ln104_679_fu_956_p2;
wire   [0:0] and_ln104_265_fu_945_p2;
wire   [0:0] xor_ln104_680_fu_972_p2;
wire   [0:0] and_ln102_1549_fu_951_p2;
wire   [0:0] and_ln104_268_fu_961_p2;
wire   [0:0] and_ln102_1550_fu_967_p2;
wire   [0:0] and_ln104_269_fu_977_p2;
wire   [0:0] and_ln102_1555_fu_983_p2;
wire   [0:0] xor_ln104_685_fu_988_p2;
wire   [0:0] and_ln102_1572_fu_1028_p2;
wire   [0:0] and_ln102_1556_fu_993_p2;
wire   [0:0] xor_ln104_686_fu_998_p2;
wire   [0:0] and_ln102_1575_fu_1044_p2;
wire   [0:0] and_ln102_1557_fu_1003_p2;
wire   [0:0] xor_ln104_687_fu_1008_p2;
wire   [0:0] and_ln102_1578_fu_1060_p2;
wire   [0:0] and_ln102_1558_fu_1013_p2;
wire   [0:0] xor_ln104_688_fu_1018_p2;
wire   [0:0] and_ln102_1581_fu_1076_p2;
wire   [0:0] and_ln102_1571_fu_1023_p2;
wire   [0:0] or_ln117_1283_fu_1087_p2;
wire   [0:0] or_ln117_1284_fu_1092_p2;
wire   [0:0] and_ln102_1573_fu_1033_p2;
wire   [4:0] select_ln117_1382_fu_1097_p3;
wire   [0:0] or_ln117_1285_fu_1104_p2;
wire   [4:0] select_ln117_1383_fu_1110_p3;
wire   [0:0] or_ln117_1286_fu_1118_p2;
wire   [0:0] and_ln102_1574_fu_1039_p2;
wire   [4:0] select_ln117_1384_fu_1123_p3;
wire   [0:0] or_ln117_1287_fu_1131_p2;
wire   [4:0] select_ln117_1385_fu_1137_p3;
wire   [0:0] or_ln117_1288_fu_1145_p2;
wire   [0:0] and_ln102_1576_fu_1049_p2;
wire   [4:0] select_ln117_1386_fu_1151_p3;
wire   [0:0] or_ln117_1289_fu_1159_p2;
wire   [4:0] select_ln117_1387_fu_1165_p3;
wire   [0:0] or_ln117_1290_fu_1173_p2;
wire   [0:0] and_ln102_1577_fu_1055_p2;
wire   [4:0] select_ln117_1388_fu_1178_p3;
wire   [0:0] or_ln117_1291_fu_1186_p2;
wire   [4:0] select_ln117_1389_fu_1192_p3;
wire   [0:0] or_ln117_1292_fu_1200_p2;
wire   [0:0] and_ln102_1579_fu_1065_p2;
wire   [4:0] select_ln117_1390_fu_1206_p3;
wire   [0:0] or_ln117_1293_fu_1214_p2;
wire   [4:0] select_ln117_1391_fu_1220_p3;
wire   [0:0] or_ln117_1294_fu_1228_p2;
wire   [0:0] and_ln102_1580_fu_1071_p2;
wire   [4:0] select_ln117_1392_fu_1234_p3;
wire   [0:0] or_ln117_1295_fu_1242_p2;
wire   [4:0] select_ln117_1393_fu_1248_p3;
wire   [0:0] or_ln117_1296_fu_1256_p2;
wire   [0:0] and_ln102_1582_fu_1081_p2;
wire   [4:0] select_ln117_1394_fu_1262_p3;
wire   [0:0] or_ln117_1297_fu_1270_p2;
wire   [4:0] select_ln117_1395_fu_1276_p3;
wire   [11:0] agg_result_fu_1292_p65;
wire   [4:0] agg_result_fu_1292_p66;
wire   [11:0] agg_result_fu_1292_p67;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1292_p1;
wire   [4:0] agg_result_fu_1292_p3;
wire   [4:0] agg_result_fu_1292_p5;
wire   [4:0] agg_result_fu_1292_p7;
wire   [4:0] agg_result_fu_1292_p9;
wire   [4:0] agg_result_fu_1292_p11;
wire   [4:0] agg_result_fu_1292_p13;
wire   [4:0] agg_result_fu_1292_p15;
wire   [4:0] agg_result_fu_1292_p17;
wire   [4:0] agg_result_fu_1292_p19;
wire   [4:0] agg_result_fu_1292_p21;
wire   [4:0] agg_result_fu_1292_p23;
wire   [4:0] agg_result_fu_1292_p25;
wire   [4:0] agg_result_fu_1292_p27;
wire   [4:0] agg_result_fu_1292_p29;
wire   [4:0] agg_result_fu_1292_p31;
wire  signed [4:0] agg_result_fu_1292_p33;
wire  signed [4:0] agg_result_fu_1292_p35;
wire  signed [4:0] agg_result_fu_1292_p37;
wire  signed [4:0] agg_result_fu_1292_p39;
wire  signed [4:0] agg_result_fu_1292_p41;
wire  signed [4:0] agg_result_fu_1292_p43;
wire  signed [4:0] agg_result_fu_1292_p45;
wire  signed [4:0] agg_result_fu_1292_p47;
wire  signed [4:0] agg_result_fu_1292_p49;
wire  signed [4:0] agg_result_fu_1292_p51;
wire  signed [4:0] agg_result_fu_1292_p53;
wire  signed [4:0] agg_result_fu_1292_p55;
wire  signed [4:0] agg_result_fu_1292_p57;
wire  signed [4:0] agg_result_fu_1292_p59;
wire  signed [4:0] agg_result_fu_1292_p61;
wire  signed [4:0] agg_result_fu_1292_p63;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_65_5_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 12 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 12 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 12 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 12 ),
    .CASE31( 5'h1F ),
    .din31_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_65_5_12_1_1_U17(
    .din0(12'd2035),
    .din1(12'd1560),
    .din2(12'd937),
    .din3(12'd1625),
    .din4(12'd1643),
    .din5(12'd1072),
    .din6(12'd869),
    .din7(12'd4077),
    .din8(12'd1320),
    .din9(12'd438),
    .din10(12'd624),
    .din11(12'd4067),
    .din12(12'd571),
    .din13(12'd4025),
    .din14(12'd3974),
    .din15(12'd3647),
    .din16(12'd901),
    .din17(12'd78),
    .din18(12'd3642),
    .din19(12'd200),
    .din20(12'd76),
    .din21(12'd633),
    .din22(12'd3922),
    .din23(12'd3585),
    .din24(12'd3476),
    .din25(12'd3688),
    .din26(12'd507),
    .din27(12'd3740),
    .din28(12'd4060),
    .din29(12'd3763),
    .din30(12'd3720),
    .din31(12'd3511),
    .def(agg_result_fu_1292_p65),
    .sel(agg_result_fu_1292_p66),
    .dout(agg_result_fu_1292_p67)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_1415_reg_1437 <= icmp_ln86_1415_fu_374_p2;
        icmp_ln86_1418_reg_1443 <= icmp_ln86_1418_fu_392_p2;
        icmp_ln86_1419_reg_1449 <= icmp_ln86_1419_fu_398_p2;
        icmp_ln86_1424_reg_1455 <= icmp_ln86_1424_fu_428_p2;
        icmp_ln86_1425_reg_1461 <= icmp_ln86_1425_fu_434_p2;
        icmp_ln86_1426_reg_1467 <= icmp_ln86_1426_fu_440_p2;
        icmp_ln86_1427_reg_1473 <= icmp_ln86_1427_fu_446_p2;
        icmp_ln86_1436_reg_1479 <= icmp_ln86_1436_fu_500_p2;
        icmp_ln86_1437_reg_1484 <= icmp_ln86_1437_fu_506_p2;
        icmp_ln86_1438_reg_1489 <= icmp_ln86_1438_fu_512_p2;
        icmp_ln86_1439_reg_1494 <= icmp_ln86_1439_fu_518_p2;
        icmp_ln86_1440_reg_1499 <= icmp_ln86_1440_fu_524_p2;
        icmp_ln86_1441_reg_1504 <= icmp_ln86_1441_fu_530_p2;
        icmp_ln86_1442_reg_1509 <= icmp_ln86_1442_fu_536_p2;
        icmp_ln86_1443_reg_1514 <= icmp_ln86_1443_fu_542_p2;
        icmp_ln86_reg_1428 <= icmp_ln86_fu_362_p2;
        select_ln117_1381_reg_1519 <= select_ln117_1381_fu_922_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1292_p65 = 'bx;

assign agg_result_fu_1292_p66 = ((or_ln117_1297_fu_1270_p2[0:0] == 1'b1) ? select_ln117_1395_fu_1276_p3 : 5'd31);

assign and_ln102_1546_fu_935_p2 = (xor_ln104_fu_930_p2 & icmp_ln86_1415_reg_1437);

assign and_ln102_1547_fu_566_p2 = (icmp_ln86_1416_fu_380_p2 & and_ln102_fu_548_p2);

assign and_ln102_1548_fu_584_p2 = (icmp_ln86_1417_fu_386_p2 & and_ln104_fu_560_p2);

assign and_ln102_1549_fu_951_p2 = (icmp_ln86_1418_reg_1443 & and_ln102_1546_fu_935_p2);

assign and_ln102_1550_fu_967_p2 = (icmp_ln86_1419_reg_1449 & and_ln104_265_fu_945_p2);

assign and_ln102_1551_fu_602_p2 = (icmp_ln86_1420_fu_404_p2 & and_ln102_1547_fu_566_p2);

assign and_ln102_1552_fu_614_p2 = (icmp_ln86_1421_fu_410_p2 & and_ln104_266_fu_578_p2);

assign and_ln102_1553_fu_626_p2 = (icmp_ln86_1422_fu_416_p2 & and_ln102_1548_fu_584_p2);

assign and_ln102_1554_fu_638_p2 = (icmp_ln86_1423_fu_422_p2 & and_ln104_267_fu_596_p2);

assign and_ln102_1555_fu_983_p2 = (icmp_ln86_1424_reg_1455 & and_ln102_1549_fu_951_p2);

assign and_ln102_1556_fu_993_p2 = (icmp_ln86_1425_reg_1461 & and_ln104_268_fu_961_p2);

assign and_ln102_1557_fu_1003_p2 = (icmp_ln86_1426_reg_1467 & and_ln102_1550_fu_967_p2);

assign and_ln102_1558_fu_1013_p2 = (icmp_ln86_1427_reg_1473 & and_ln104_269_fu_977_p2);

assign and_ln102_1559_fu_650_p2 = (icmp_ln86_1428_fu_452_p2 & and_ln102_1551_fu_602_p2);

assign and_ln102_1560_fu_656_p2 = (xor_ln104_681_fu_608_p2 & icmp_ln86_1429_fu_458_p2);

assign and_ln102_1561_fu_662_p2 = (and_ln102_1560_fu_656_p2 & and_ln102_1547_fu_566_p2);

assign and_ln102_1562_fu_668_p2 = (icmp_ln86_1430_fu_464_p2 & and_ln102_1552_fu_614_p2);

assign and_ln102_1563_fu_674_p2 = (xor_ln104_682_fu_620_p2 & icmp_ln86_1431_fu_470_p2);

assign and_ln102_1564_fu_680_p2 = (and_ln104_266_fu_578_p2 & and_ln102_1563_fu_674_p2);

assign and_ln102_1565_fu_686_p2 = (icmp_ln86_1432_fu_476_p2 & and_ln102_1553_fu_626_p2);

assign and_ln102_1566_fu_692_p2 = (xor_ln104_683_fu_632_p2 & icmp_ln86_1433_fu_482_p2);

assign and_ln102_1567_fu_698_p2 = (and_ln102_1566_fu_692_p2 & and_ln102_1548_fu_584_p2);

assign and_ln102_1568_fu_704_p2 = (icmp_ln86_1434_fu_488_p2 & and_ln102_1554_fu_638_p2);

assign and_ln102_1569_fu_710_p2 = (xor_ln104_684_fu_644_p2 & icmp_ln86_1435_fu_494_p2);

assign and_ln102_1570_fu_716_p2 = (and_ln104_267_fu_596_p2 & and_ln102_1569_fu_710_p2);

assign and_ln102_1571_fu_1023_p2 = (icmp_ln86_1436_reg_1479 & and_ln102_1555_fu_983_p2);

assign and_ln102_1572_fu_1028_p2 = (xor_ln104_685_fu_988_p2 & icmp_ln86_1437_reg_1484);

assign and_ln102_1573_fu_1033_p2 = (and_ln102_1572_fu_1028_p2 & and_ln102_1549_fu_951_p2);

assign and_ln102_1574_fu_1039_p2 = (icmp_ln86_1438_reg_1489 & and_ln102_1556_fu_993_p2);

assign and_ln102_1575_fu_1044_p2 = (xor_ln104_686_fu_998_p2 & icmp_ln86_1439_reg_1494);

assign and_ln102_1576_fu_1049_p2 = (and_ln104_268_fu_961_p2 & and_ln102_1575_fu_1044_p2);

assign and_ln102_1577_fu_1055_p2 = (icmp_ln86_1440_reg_1499 & and_ln102_1557_fu_1003_p2);

assign and_ln102_1578_fu_1060_p2 = (xor_ln104_687_fu_1008_p2 & icmp_ln86_1441_reg_1504);

assign and_ln102_1579_fu_1065_p2 = (and_ln102_1578_fu_1060_p2 & and_ln102_1550_fu_967_p2);

assign and_ln102_1580_fu_1071_p2 = (icmp_ln86_1442_reg_1509 & and_ln102_1558_fu_1013_p2);

assign and_ln102_1581_fu_1076_p2 = (xor_ln104_688_fu_1018_p2 & icmp_ln86_1443_reg_1514);

assign and_ln102_1582_fu_1081_p2 = (and_ln104_269_fu_977_p2 & and_ln102_1581_fu_1076_p2);

assign and_ln102_fu_548_p2 = (icmp_ln86_fu_362_p2 & icmp_ln86_1414_fu_368_p2);

assign and_ln104_265_fu_945_p2 = (xor_ln104_fu_930_p2 & xor_ln104_676_fu_940_p2);

assign and_ln104_266_fu_578_p2 = (xor_ln104_677_fu_572_p2 & and_ln102_fu_548_p2);

assign and_ln104_267_fu_596_p2 = (xor_ln104_678_fu_590_p2 & and_ln104_fu_560_p2);

assign and_ln104_268_fu_961_p2 = (xor_ln104_679_fu_956_p2 & and_ln102_1546_fu_935_p2);

assign and_ln104_269_fu_977_p2 = (xor_ln104_680_fu_972_p2 & and_ln104_265_fu_945_p2);

assign and_ln104_fu_560_p2 = (xor_ln104_675_fu_554_p2 & icmp_ln86_fu_362_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1292_p67;

assign icmp_ln86_1414_fu_368_p2 = (($signed(x_52_val) < $signed(18'd44545)) ? 1'b1 : 1'b0);

assign icmp_ln86_1415_fu_374_p2 = (($signed(x_3_val) < $signed(18'd77633)) ? 1'b1 : 1'b0);

assign icmp_ln86_1416_fu_380_p2 = (($signed(x_6_val) < $signed(18'd8456)) ? 1'b1 : 1'b0);

assign icmp_ln86_1417_fu_386_p2 = (($signed(x_1_val) < $signed(18'd35488)) ? 1'b1 : 1'b0);

assign icmp_ln86_1418_fu_392_p2 = (($signed(x_1_val) < $signed(18'd44750)) ? 1'b1 : 1'b0);

assign icmp_ln86_1419_fu_398_p2 = (($signed(x_9_val) < $signed(18'd698)) ? 1'b1 : 1'b0);

assign icmp_ln86_1420_fu_404_p2 = (($signed(x_7_val) < $signed(18'd1680)) ? 1'b1 : 1'b0);

assign icmp_ln86_1421_fu_410_p2 = (($signed(x_1_val) < $signed(18'd59083)) ? 1'b1 : 1'b0);

assign icmp_ln86_1422_fu_416_p2 = (($signed(x_24_val) < $signed(18'd442)) ? 1'b1 : 1'b0);

assign icmp_ln86_1423_fu_422_p2 = (($signed(x_24_val) < $signed(18'd430)) ? 1'b1 : 1'b0);

assign icmp_ln86_1424_fu_428_p2 = (($signed(x_7_val) < $signed(18'd5009)) ? 1'b1 : 1'b0);

assign icmp_ln86_1425_fu_434_p2 = (($signed(x_52_val) < $signed(18'd52737)) ? 1'b1 : 1'b0);

assign icmp_ln86_1426_fu_440_p2 = (($signed(x_7_val) < $signed(18'd9307)) ? 1'b1 : 1'b0);

assign icmp_ln86_1427_fu_446_p2 = (($signed(x_8_val) < $signed(18'd6231)) ? 1'b1 : 1'b0);

assign icmp_ln86_1428_fu_452_p2 = (($signed(x_1_val) < $signed(18'd104339)) ? 1'b1 : 1'b0);

assign icmp_ln86_1429_fu_458_p2 = (($signed(x_23_val) < $signed(18'd7)) ? 1'b1 : 1'b0);

assign icmp_ln86_1430_fu_464_p2 = (($signed(x_24_val) < $signed(18'd455)) ? 1'b1 : 1'b0);

assign icmp_ln86_1431_fu_470_p2 = (($signed(x_24_val) < $signed(18'd449)) ? 1'b1 : 1'b0);

assign icmp_ln86_1432_fu_476_p2 = (($signed(x_52_val) < $signed(18'd58881)) ? 1'b1 : 1'b0);

assign icmp_ln86_1433_fu_482_p2 = (($signed(x_52_val) < $signed(18'd54785)) ? 1'b1 : 1'b0);

assign icmp_ln86_1434_fu_488_p2 = (($signed(x_52_val) < $signed(18'd51713)) ? 1'b1 : 1'b0);

assign icmp_ln86_1435_fu_494_p2 = (($signed(x_43_val) < $signed(18'd132)) ? 1'b1 : 1'b0);

assign icmp_ln86_1436_fu_500_p2 = (($signed(x_52_val) < $signed(18'd61953)) ? 1'b1 : 1'b0);

assign icmp_ln86_1437_fu_506_p2 = (($signed(x_25_val) < $signed(18'd94)) ? 1'b1 : 1'b0);

assign icmp_ln86_1438_fu_512_p2 = (($signed(x_12_val) < $signed(18'd259805)) ? 1'b1 : 1'b0);

assign icmp_ln86_1439_fu_518_p2 = (($signed(x_24_val) < $signed(18'd396)) ? 1'b1 : 1'b0);

assign icmp_ln86_1440_fu_524_p2 = (($signed(x_18_val) < $signed(18'd2610)) ? 1'b1 : 1'b0);

assign icmp_ln86_1441_fu_530_p2 = (($signed(x_4_val) < $signed(18'd71211)) ? 1'b1 : 1'b0);

assign icmp_ln86_1442_fu_536_p2 = (($signed(x_13_val) < $signed(18'd450)) ? 1'b1 : 1'b0);

assign icmp_ln86_1443_fu_542_p2 = (($signed(x_50_val) < $signed(18'd149869)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_362_p2 = (($signed(x_3_val) < $signed(18'd64580)) ? 1'b1 : 1'b0);

assign or_ln117_1273_fu_758_p2 = (and_ln102_1562_fu_668_p2 | and_ln102_1547_fu_566_p2);

assign or_ln117_1274_fu_772_p2 = (and_ln102_1552_fu_614_p2 | and_ln102_1547_fu_566_p2);

assign or_ln117_1275_fu_786_p2 = (or_ln117_1274_fu_772_p2 | and_ln102_1564_fu_680_p2);

assign or_ln117_1276_fu_812_p2 = (and_ln102_fu_548_p2 | and_ln102_1565_fu_686_p2);

assign or_ln117_1277_fu_826_p2 = (and_ln102_fu_548_p2 | and_ln102_1553_fu_626_p2);

assign or_ln117_1278_fu_840_p2 = (or_ln117_1277_fu_826_p2 | and_ln102_1567_fu_698_p2);

assign or_ln117_1279_fu_854_p2 = (and_ln102_fu_548_p2 | and_ln102_1548_fu_584_p2);

assign or_ln117_1280_fu_868_p2 = (or_ln117_1279_fu_854_p2 | and_ln102_1568_fu_704_p2);

assign or_ln117_1281_fu_882_p2 = (or_ln117_1279_fu_854_p2 | and_ln102_1554_fu_638_p2);

assign or_ln117_1282_fu_896_p2 = (or_ln117_1281_fu_882_p2 | and_ln102_1570_fu_716_p2);

assign or_ln117_1283_fu_1087_p2 = (icmp_ln86_reg_1428 | and_ln102_1571_fu_1023_p2);

assign or_ln117_1284_fu_1092_p2 = (icmp_ln86_reg_1428 | and_ln102_1555_fu_983_p2);

assign or_ln117_1285_fu_1104_p2 = (or_ln117_1284_fu_1092_p2 | and_ln102_1573_fu_1033_p2);

assign or_ln117_1286_fu_1118_p2 = (icmp_ln86_reg_1428 | and_ln102_1549_fu_951_p2);

assign or_ln117_1287_fu_1131_p2 = (or_ln117_1286_fu_1118_p2 | and_ln102_1574_fu_1039_p2);

assign or_ln117_1288_fu_1145_p2 = (or_ln117_1286_fu_1118_p2 | and_ln102_1556_fu_993_p2);

assign or_ln117_1289_fu_1159_p2 = (or_ln117_1288_fu_1145_p2 | and_ln102_1576_fu_1049_p2);

assign or_ln117_1290_fu_1173_p2 = (icmp_ln86_reg_1428 | and_ln102_1546_fu_935_p2);

assign or_ln117_1291_fu_1186_p2 = (or_ln117_1290_fu_1173_p2 | and_ln102_1577_fu_1055_p2);

assign or_ln117_1292_fu_1200_p2 = (or_ln117_1290_fu_1173_p2 | and_ln102_1557_fu_1003_p2);

assign or_ln117_1293_fu_1214_p2 = (or_ln117_1292_fu_1200_p2 | and_ln102_1579_fu_1065_p2);

assign or_ln117_1294_fu_1228_p2 = (or_ln117_1290_fu_1173_p2 | and_ln102_1550_fu_967_p2);

assign or_ln117_1295_fu_1242_p2 = (or_ln117_1294_fu_1228_p2 | and_ln102_1580_fu_1071_p2);

assign or_ln117_1296_fu_1256_p2 = (or_ln117_1294_fu_1228_p2 | and_ln102_1558_fu_1013_p2);

assign or_ln117_1297_fu_1270_p2 = (or_ln117_1296_fu_1256_p2 | and_ln102_1582_fu_1081_p2);

assign or_ln117_fu_732_p2 = (and_ln102_1561_fu_662_p2 | and_ln102_1551_fu_602_p2);

assign select_ln117_1368_fu_746_p3 = ((or_ln117_fu_732_p2[0:0] == 1'b1) ? select_ln117_fu_738_p3 : 2'd3);

assign select_ln117_1369_fu_764_p3 = ((and_ln102_1547_fu_566_p2[0:0] == 1'b1) ? zext_ln117_153_fu_754_p1 : 3'd4);

assign select_ln117_1370_fu_778_p3 = ((or_ln117_1273_fu_758_p2[0:0] == 1'b1) ? select_ln117_1369_fu_764_p3 : 3'd5);

assign select_ln117_1371_fu_792_p3 = ((or_ln117_1274_fu_772_p2[0:0] == 1'b1) ? select_ln117_1370_fu_778_p3 : 3'd6);

assign select_ln117_1372_fu_800_p3 = ((or_ln117_1275_fu_786_p2[0:0] == 1'b1) ? select_ln117_1371_fu_792_p3 : 3'd7);

assign select_ln117_1373_fu_818_p3 = ((and_ln102_fu_548_p2[0:0] == 1'b1) ? zext_ln117_154_fu_808_p1 : 4'd8);

assign select_ln117_1374_fu_832_p3 = ((or_ln117_1276_fu_812_p2[0:0] == 1'b1) ? select_ln117_1373_fu_818_p3 : 4'd9);

assign select_ln117_1375_fu_846_p3 = ((or_ln117_1277_fu_826_p2[0:0] == 1'b1) ? select_ln117_1374_fu_832_p3 : 4'd10);

assign select_ln117_1376_fu_860_p3 = ((or_ln117_1278_fu_840_p2[0:0] == 1'b1) ? select_ln117_1375_fu_846_p3 : 4'd11);

assign select_ln117_1377_fu_874_p3 = ((or_ln117_1279_fu_854_p2[0:0] == 1'b1) ? select_ln117_1376_fu_860_p3 : 4'd12);

assign select_ln117_1378_fu_888_p3 = ((or_ln117_1280_fu_868_p2[0:0] == 1'b1) ? select_ln117_1377_fu_874_p3 : 4'd13);

assign select_ln117_1379_fu_902_p3 = ((or_ln117_1281_fu_882_p2[0:0] == 1'b1) ? select_ln117_1378_fu_888_p3 : 4'd14);

assign select_ln117_1380_fu_910_p3 = ((or_ln117_1282_fu_896_p2[0:0] == 1'b1) ? select_ln117_1379_fu_902_p3 : 4'd15);

assign select_ln117_1381_fu_922_p3 = ((icmp_ln86_fu_362_p2[0:0] == 1'b1) ? zext_ln117_155_fu_918_p1 : 5'd16);

assign select_ln117_1382_fu_1097_p3 = ((or_ln117_1283_fu_1087_p2[0:0] == 1'b1) ? select_ln117_1381_reg_1519 : 5'd17);

assign select_ln117_1383_fu_1110_p3 = ((or_ln117_1284_fu_1092_p2[0:0] == 1'b1) ? select_ln117_1382_fu_1097_p3 : 5'd18);

assign select_ln117_1384_fu_1123_p3 = ((or_ln117_1285_fu_1104_p2[0:0] == 1'b1) ? select_ln117_1383_fu_1110_p3 : 5'd19);

assign select_ln117_1385_fu_1137_p3 = ((or_ln117_1286_fu_1118_p2[0:0] == 1'b1) ? select_ln117_1384_fu_1123_p3 : 5'd20);

assign select_ln117_1386_fu_1151_p3 = ((or_ln117_1287_fu_1131_p2[0:0] == 1'b1) ? select_ln117_1385_fu_1137_p3 : 5'd21);

assign select_ln117_1387_fu_1165_p3 = ((or_ln117_1288_fu_1145_p2[0:0] == 1'b1) ? select_ln117_1386_fu_1151_p3 : 5'd22);

assign select_ln117_1388_fu_1178_p3 = ((or_ln117_1289_fu_1159_p2[0:0] == 1'b1) ? select_ln117_1387_fu_1165_p3 : 5'd23);

assign select_ln117_1389_fu_1192_p3 = ((or_ln117_1290_fu_1173_p2[0:0] == 1'b1) ? select_ln117_1388_fu_1178_p3 : 5'd24);

assign select_ln117_1390_fu_1206_p3 = ((or_ln117_1291_fu_1186_p2[0:0] == 1'b1) ? select_ln117_1389_fu_1192_p3 : 5'd25);

assign select_ln117_1391_fu_1220_p3 = ((or_ln117_1292_fu_1200_p2[0:0] == 1'b1) ? select_ln117_1390_fu_1206_p3 : 5'd26);

assign select_ln117_1392_fu_1234_p3 = ((or_ln117_1293_fu_1214_p2[0:0] == 1'b1) ? select_ln117_1391_fu_1220_p3 : 5'd27);

assign select_ln117_1393_fu_1248_p3 = ((or_ln117_1294_fu_1228_p2[0:0] == 1'b1) ? select_ln117_1392_fu_1234_p3 : 5'd28);

assign select_ln117_1394_fu_1262_p3 = ((or_ln117_1295_fu_1242_p2[0:0] == 1'b1) ? select_ln117_1393_fu_1248_p3 : 5'd29);

assign select_ln117_1395_fu_1276_p3 = ((or_ln117_1296_fu_1256_p2[0:0] == 1'b1) ? select_ln117_1394_fu_1262_p3 : 5'd30);

assign select_ln117_fu_738_p3 = ((and_ln102_1551_fu_602_p2[0:0] == 1'b1) ? zext_ln117_fu_728_p1 : 2'd2);

assign xor_ln104_675_fu_554_p2 = (icmp_ln86_1414_fu_368_p2 ^ 1'd1);

assign xor_ln104_676_fu_940_p2 = (icmp_ln86_1415_reg_1437 ^ 1'd1);

assign xor_ln104_677_fu_572_p2 = (icmp_ln86_1416_fu_380_p2 ^ 1'd1);

assign xor_ln104_678_fu_590_p2 = (icmp_ln86_1417_fu_386_p2 ^ 1'd1);

assign xor_ln104_679_fu_956_p2 = (icmp_ln86_1418_reg_1443 ^ 1'd1);

assign xor_ln104_680_fu_972_p2 = (icmp_ln86_1419_reg_1449 ^ 1'd1);

assign xor_ln104_681_fu_608_p2 = (icmp_ln86_1420_fu_404_p2 ^ 1'd1);

assign xor_ln104_682_fu_620_p2 = (icmp_ln86_1421_fu_410_p2 ^ 1'd1);

assign xor_ln104_683_fu_632_p2 = (icmp_ln86_1422_fu_416_p2 ^ 1'd1);

assign xor_ln104_684_fu_644_p2 = (icmp_ln86_1423_fu_422_p2 ^ 1'd1);

assign xor_ln104_685_fu_988_p2 = (icmp_ln86_1424_reg_1455 ^ 1'd1);

assign xor_ln104_686_fu_998_p2 = (icmp_ln86_1425_reg_1461 ^ 1'd1);

assign xor_ln104_687_fu_1008_p2 = (icmp_ln86_1426_reg_1467 ^ 1'd1);

assign xor_ln104_688_fu_1018_p2 = (icmp_ln86_1427_reg_1473 ^ 1'd1);

assign xor_ln104_fu_930_p2 = (icmp_ln86_reg_1428 ^ 1'd1);

assign xor_ln117_fu_722_p2 = (1'd1 ^ and_ln102_1559_fu_650_p2);

assign zext_ln117_153_fu_754_p1 = select_ln117_1368_fu_746_p3;

assign zext_ln117_154_fu_808_p1 = select_ln117_1372_fu_800_p3;

assign zext_ln117_155_fu_918_p1 = select_ln117_1380_fu_910_p3;

assign zext_ln117_fu_728_p1 = xor_ln117_fu_722_p2;

endmodule //my_prj_decision_function_123
