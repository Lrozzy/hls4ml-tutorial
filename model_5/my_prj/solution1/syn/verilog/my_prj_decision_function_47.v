// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_47 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_5_val,
        x_6_val,
        x_10_val,
        x_11_val,
        x_12_val,
        x_16_val,
        x_17_val,
        x_18_val,
        x_21_val,
        x_22_val,
        x_23_val,
        x_27_val,
        x_35_val,
        x_36_val,
        x_38_val,
        x_40_val,
        x_44_val,
        x_45_val,
        x_47_val,
        x_48_val,
        x_49_val,
        x_50_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_5_val;
input  [17:0] x_6_val;
input  [17:0] x_10_val;
input  [17:0] x_11_val;
input  [17:0] x_12_val;
input  [17:0] x_16_val;
input  [17:0] x_17_val;
input  [17:0] x_18_val;
input  [17:0] x_21_val;
input  [17:0] x_22_val;
input  [17:0] x_23_val;
input  [17:0] x_27_val;
input  [17:0] x_35_val;
input  [17:0] x_36_val;
input  [17:0] x_38_val;
input  [17:0] x_40_val;
input  [17:0] x_44_val;
input  [17:0] x_45_val;
input  [17:0] x_47_val;
input  [17:0] x_48_val;
input  [17:0] x_49_val;
input  [17:0] x_50_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_414_p2;
reg   [0:0] icmp_ln86_reg_1462;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_1245_fu_426_p2;
reg   [0:0] icmp_ln86_1245_reg_1471;
wire   [0:0] icmp_ln86_1248_fu_444_p2;
reg   [0:0] icmp_ln86_1248_reg_1477;
wire   [0:0] icmp_ln86_1385_fu_460_p2;
reg   [0:0] icmp_ln86_1385_reg_1483;
wire   [0:0] icmp_ln86_1254_fu_500_p2;
reg   [0:0] icmp_ln86_1254_reg_1489;
wire   [0:0] icmp_ln86_1255_fu_506_p2;
reg   [0:0] icmp_ln86_1255_reg_1495;
wire   [0:0] icmp_ln86_1256_fu_512_p2;
reg   [0:0] icmp_ln86_1256_reg_1501;
wire   [0:0] icmp_ln86_1257_fu_518_p2;
reg   [0:0] icmp_ln86_1257_reg_1507;
wire   [0:0] icmp_ln86_1265_fu_566_p2;
reg   [0:0] icmp_ln86_1265_reg_1513;
wire   [0:0] icmp_ln86_1266_fu_572_p2;
reg   [0:0] icmp_ln86_1266_reg_1518;
wire   [0:0] icmp_ln86_1267_fu_578_p2;
reg   [0:0] icmp_ln86_1267_reg_1523;
wire   [0:0] icmp_ln86_1268_fu_584_p2;
reg   [0:0] icmp_ln86_1268_reg_1528;
wire   [0:0] icmp_ln86_1269_fu_590_p2;
reg   [0:0] icmp_ln86_1269_reg_1533;
wire   [0:0] icmp_ln86_1270_fu_596_p2;
reg   [0:0] icmp_ln86_1270_reg_1538;
wire   [0:0] icmp_ln86_1271_fu_602_p2;
reg   [0:0] icmp_ln86_1271_reg_1543;
wire   [0:0] icmp_ln86_1272_fu_608_p2;
reg   [0:0] icmp_ln86_1272_reg_1548;
wire   [4:0] select_ln117_1217_fu_956_p3;
reg   [4:0] select_ln117_1217_reg_1553;
wire    ap_block_pp0_stage0;
wire   [13:0] tmp_fu_450_p4;
wire   [14:0] tmp_20_fu_466_p4;
wire   [0:0] icmp_ln86_1244_fu_420_p2;
wire   [0:0] xor_ln104_596_fu_620_p2;
wire   [0:0] icmp_ln86_1246_fu_432_p2;
wire   [0:0] and_ln102_fu_614_p2;
wire   [0:0] xor_ln104_598_fu_638_p2;
wire   [0:0] icmp_ln86_1247_fu_438_p2;
wire   [0:0] and_ln104_fu_626_p2;
wire   [0:0] xor_ln104_599_fu_656_p2;
wire   [0:0] icmp_ln86_1386_fu_476_p2;
wire   [0:0] and_ln102_1199_fu_632_p2;
wire   [0:0] icmp_ln86_1251_fu_482_p2;
wire   [0:0] and_ln104_242_fu_644_p2;
wire   [0:0] icmp_ln86_1252_fu_488_p2;
wire   [0:0] and_ln102_1200_fu_650_p2;
wire   [0:0] icmp_ln86_1253_fu_494_p2;
wire   [0:0] and_ln104_243_fu_662_p2;
wire   [0:0] icmp_ln86_1258_fu_524_p2;
wire   [0:0] and_ln102_1203_fu_668_p2;
wire   [0:0] icmp_ln86_1259_fu_530_p2;
wire   [0:0] xor_ln104_602_fu_674_p2;
wire   [0:0] and_ln102_1226_fu_716_p2;
wire   [0:0] icmp_ln86_1260_fu_536_p2;
wire   [0:0] and_ln102_1204_fu_680_p2;
wire   [0:0] icmp_ln86_1261_fu_542_p2;
wire   [0:0] xor_ln104_603_fu_686_p2;
wire   [0:0] and_ln102_1227_fu_734_p2;
wire   [0:0] icmp_ln86_1262_fu_548_p2;
wire   [0:0] and_ln102_1205_fu_692_p2;
wire   [0:0] icmp_ln86_1263_fu_554_p2;
wire   [0:0] and_ln102_1206_fu_698_p2;
wire   [0:0] icmp_ln86_1264_fu_560_p2;
wire   [0:0] xor_ln104_604_fu_704_p2;
wire   [0:0] and_ln102_1228_fu_758_p2;
wire   [0:0] and_ln102_1211_fu_710_p2;
wire   [0:0] xor_ln117_fu_770_p2;
wire   [0:0] and_ln102_1212_fu_722_p2;
wire   [1:0] zext_ln117_fu_776_p1;
wire   [0:0] or_ln117_fu_780_p2;
wire   [1:0] select_ln117_fu_786_p3;
wire   [1:0] select_ln117_1205_fu_794_p3;
wire   [0:0] and_ln102_1213_fu_728_p2;
wire   [2:0] zext_ln117_138_fu_802_p1;
wire   [0:0] or_ln117_1131_fu_806_p2;
wire   [2:0] select_ln117_1206_fu_812_p3;
wire   [0:0] or_ln117_1132_fu_820_p2;
wire   [0:0] and_ln102_1214_fu_740_p2;
wire   [2:0] select_ln117_1207_fu_826_p3;
wire   [0:0] or_ln117_1133_fu_834_p2;
wire   [2:0] select_ln117_1208_fu_840_p3;
wire   [2:0] select_ln117_1209_fu_848_p3;
wire   [0:0] and_ln102_1215_fu_746_p2;
wire   [3:0] zext_ln117_139_fu_856_p1;
wire   [0:0] or_ln117_1134_fu_860_p2;
wire   [3:0] select_ln117_1210_fu_866_p3;
wire   [0:0] or_ln117_1135_fu_874_p2;
wire   [3:0] select_ln117_1211_fu_880_p3;
wire   [0:0] or_ln117_1136_fu_888_p2;
wire   [0:0] and_ln102_1216_fu_752_p2;
wire   [3:0] select_ln117_1212_fu_894_p3;
wire   [0:0] or_ln117_1137_fu_902_p2;
wire   [3:0] select_ln117_1213_fu_908_p3;
wire   [0:0] or_ln117_1138_fu_916_p2;
wire   [0:0] and_ln102_1217_fu_764_p2;
wire   [3:0] select_ln117_1214_fu_922_p3;
wire   [0:0] or_ln117_1139_fu_930_p2;
wire   [3:0] select_ln117_1215_fu_936_p3;
wire   [3:0] select_ln117_1216_fu_944_p3;
wire   [4:0] zext_ln117_140_fu_952_p1;
wire   [0:0] xor_ln104_fu_964_p2;
wire   [0:0] xor_ln104_597_fu_974_p2;
wire   [0:0] and_ln102_1198_fu_969_p2;
wire   [0:0] xor_ln104_600_fu_990_p2;
wire   [0:0] and_ln104_241_fu_979_p2;
wire   [0:0] xor_ln104_601_fu_1006_p2;
wire   [0:0] and_ln102_1201_fu_985_p2;
wire   [0:0] and_ln104_244_fu_995_p2;
wire   [0:0] and_ln102_1202_fu_1001_p2;
wire   [0:0] and_ln104_245_fu_1011_p2;
wire   [0:0] and_ln102_1207_fu_1017_p2;
wire   [0:0] xor_ln104_605_fu_1022_p2;
wire   [0:0] and_ln102_1229_fu_1062_p2;
wire   [0:0] and_ln102_1208_fu_1027_p2;
wire   [0:0] xor_ln104_606_fu_1032_p2;
wire   [0:0] and_ln102_1230_fu_1078_p2;
wire   [0:0] and_ln102_1209_fu_1037_p2;
wire   [0:0] xor_ln104_607_fu_1042_p2;
wire   [0:0] and_ln102_1231_fu_1094_p2;
wire   [0:0] and_ln102_1210_fu_1047_p2;
wire   [0:0] xor_ln104_608_fu_1052_p2;
wire   [0:0] and_ln102_1232_fu_1110_p2;
wire   [0:0] and_ln102_1218_fu_1057_p2;
wire   [0:0] or_ln117_1140_fu_1121_p2;
wire   [0:0] or_ln117_1141_fu_1126_p2;
wire   [0:0] and_ln102_1219_fu_1067_p2;
wire   [4:0] select_ln117_1218_fu_1131_p3;
wire   [0:0] or_ln117_1142_fu_1138_p2;
wire   [4:0] select_ln117_1219_fu_1144_p3;
wire   [0:0] or_ln117_1143_fu_1152_p2;
wire   [0:0] and_ln102_1220_fu_1073_p2;
wire   [4:0] select_ln117_1220_fu_1157_p3;
wire   [0:0] or_ln117_1144_fu_1165_p2;
wire   [4:0] select_ln117_1221_fu_1171_p3;
wire   [0:0] or_ln117_1145_fu_1179_p2;
wire   [0:0] and_ln102_1221_fu_1083_p2;
wire   [4:0] select_ln117_1222_fu_1185_p3;
wire   [0:0] or_ln117_1146_fu_1193_p2;
wire   [4:0] select_ln117_1223_fu_1199_p3;
wire   [0:0] or_ln117_1147_fu_1207_p2;
wire   [0:0] and_ln102_1222_fu_1089_p2;
wire   [4:0] select_ln117_1224_fu_1212_p3;
wire   [0:0] or_ln117_1148_fu_1220_p2;
wire   [4:0] select_ln117_1225_fu_1226_p3;
wire   [0:0] or_ln117_1149_fu_1234_p2;
wire   [0:0] and_ln102_1223_fu_1099_p2;
wire   [4:0] select_ln117_1226_fu_1240_p3;
wire   [0:0] or_ln117_1150_fu_1248_p2;
wire   [4:0] select_ln117_1227_fu_1254_p3;
wire   [0:0] or_ln117_1151_fu_1262_p2;
wire   [0:0] and_ln102_1224_fu_1105_p2;
wire   [4:0] select_ln117_1228_fu_1268_p3;
wire   [0:0] or_ln117_1152_fu_1276_p2;
wire   [4:0] select_ln117_1229_fu_1282_p3;
wire   [0:0] or_ln117_1153_fu_1290_p2;
wire   [0:0] and_ln102_1225_fu_1115_p2;
wire   [4:0] select_ln117_1230_fu_1296_p3;
wire   [0:0] or_ln117_1154_fu_1304_p2;
wire   [4:0] select_ln117_1231_fu_1310_p3;
wire   [11:0] agg_result_fu_1326_p65;
wire   [4:0] agg_result_fu_1326_p66;
wire   [11:0] agg_result_fu_1326_p67;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1326_p1;
wire   [4:0] agg_result_fu_1326_p3;
wire   [4:0] agg_result_fu_1326_p5;
wire   [4:0] agg_result_fu_1326_p7;
wire   [4:0] agg_result_fu_1326_p9;
wire   [4:0] agg_result_fu_1326_p11;
wire   [4:0] agg_result_fu_1326_p13;
wire   [4:0] agg_result_fu_1326_p15;
wire   [4:0] agg_result_fu_1326_p17;
wire   [4:0] agg_result_fu_1326_p19;
wire   [4:0] agg_result_fu_1326_p21;
wire   [4:0] agg_result_fu_1326_p23;
wire   [4:0] agg_result_fu_1326_p25;
wire   [4:0] agg_result_fu_1326_p27;
wire   [4:0] agg_result_fu_1326_p29;
wire   [4:0] agg_result_fu_1326_p31;
wire  signed [4:0] agg_result_fu_1326_p33;
wire  signed [4:0] agg_result_fu_1326_p35;
wire  signed [4:0] agg_result_fu_1326_p37;
wire  signed [4:0] agg_result_fu_1326_p39;
wire  signed [4:0] agg_result_fu_1326_p41;
wire  signed [4:0] agg_result_fu_1326_p43;
wire  signed [4:0] agg_result_fu_1326_p45;
wire  signed [4:0] agg_result_fu_1326_p47;
wire  signed [4:0] agg_result_fu_1326_p49;
wire  signed [4:0] agg_result_fu_1326_p51;
wire  signed [4:0] agg_result_fu_1326_p53;
wire  signed [4:0] agg_result_fu_1326_p55;
wire  signed [4:0] agg_result_fu_1326_p57;
wire  signed [4:0] agg_result_fu_1326_p59;
wire  signed [4:0] agg_result_fu_1326_p61;
wire  signed [4:0] agg_result_fu_1326_p63;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_65_5_12_1_1_x22 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 12 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 12 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 12 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 12 ),
    .CASE31( 5'h1F ),
    .din31_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_65_5_12_1_1_x22_U1175(
    .din0(12'd970),
    .din1(12'd4030),
    .din2(12'd113),
    .din3(12'd3646),
    .din4(12'd3837),
    .din5(12'd315),
    .din6(12'd497),
    .din7(12'd3952),
    .din8(12'd9),
    .din9(12'd532),
    .din10(12'd3441),
    .din11(12'd218),
    .din12(12'd4050),
    .din13(12'd565),
    .din14(12'd2111),
    .din15(12'd4076),
    .din16(12'd92),
    .din17(12'd3758),
    .din18(12'd1100),
    .din19(12'd65),
    .din20(12'd4036),
    .din21(12'd480),
    .din22(12'd3864),
    .din23(12'd262),
    .din24(12'd4067),
    .din25(12'd82),
    .din26(12'd4042),
    .din27(12'd3867),
    .din28(12'd21),
    .din29(12'd133),
    .din30(12'd3969),
    .din31(12'd2),
    .def(agg_result_fu_1326_p65),
    .sel(agg_result_fu_1326_p66),
    .dout(agg_result_fu_1326_p67)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_1245_reg_1471 <= icmp_ln86_1245_fu_426_p2;
        icmp_ln86_1248_reg_1477 <= icmp_ln86_1248_fu_444_p2;
        icmp_ln86_1254_reg_1489 <= icmp_ln86_1254_fu_500_p2;
        icmp_ln86_1255_reg_1495 <= icmp_ln86_1255_fu_506_p2;
        icmp_ln86_1256_reg_1501 <= icmp_ln86_1256_fu_512_p2;
        icmp_ln86_1257_reg_1507 <= icmp_ln86_1257_fu_518_p2;
        icmp_ln86_1265_reg_1513 <= icmp_ln86_1265_fu_566_p2;
        icmp_ln86_1266_reg_1518 <= icmp_ln86_1266_fu_572_p2;
        icmp_ln86_1267_reg_1523 <= icmp_ln86_1267_fu_578_p2;
        icmp_ln86_1268_reg_1528 <= icmp_ln86_1268_fu_584_p2;
        icmp_ln86_1269_reg_1533 <= icmp_ln86_1269_fu_590_p2;
        icmp_ln86_1270_reg_1538 <= icmp_ln86_1270_fu_596_p2;
        icmp_ln86_1271_reg_1543 <= icmp_ln86_1271_fu_602_p2;
        icmp_ln86_1272_reg_1548 <= icmp_ln86_1272_fu_608_p2;
        icmp_ln86_1385_reg_1483 <= icmp_ln86_1385_fu_460_p2;
        icmp_ln86_reg_1462 <= icmp_ln86_fu_414_p2;
        select_ln117_1217_reg_1553 <= select_ln117_1217_fu_956_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1326_p65 = 'bx;

assign agg_result_fu_1326_p66 = ((or_ln117_1154_fu_1304_p2[0:0] == 1'b1) ? select_ln117_1231_fu_1310_p3 : 5'd31);

assign and_ln102_1198_fu_969_p2 = (xor_ln104_fu_964_p2 & icmp_ln86_1245_reg_1471);

assign and_ln102_1199_fu_632_p2 = (icmp_ln86_1246_fu_432_p2 & and_ln102_fu_614_p2);

assign and_ln102_1200_fu_650_p2 = (icmp_ln86_1247_fu_438_p2 & and_ln104_fu_626_p2);

assign and_ln102_1201_fu_985_p2 = (icmp_ln86_1248_reg_1477 & and_ln102_1198_fu_969_p2);

assign and_ln102_1202_fu_1001_p2 = (icmp_ln86_1385_reg_1483 & and_ln104_241_fu_979_p2);

assign and_ln102_1203_fu_668_p2 = (icmp_ln86_1386_fu_476_p2 & and_ln102_1199_fu_632_p2);

assign and_ln102_1204_fu_680_p2 = (icmp_ln86_1251_fu_482_p2 & and_ln104_242_fu_644_p2);

assign and_ln102_1205_fu_692_p2 = (icmp_ln86_1252_fu_488_p2 & and_ln102_1200_fu_650_p2);

assign and_ln102_1206_fu_698_p2 = (icmp_ln86_1253_fu_494_p2 & and_ln104_243_fu_662_p2);

assign and_ln102_1207_fu_1017_p2 = (icmp_ln86_1254_reg_1489 & and_ln102_1201_fu_985_p2);

assign and_ln102_1208_fu_1027_p2 = (icmp_ln86_1255_reg_1495 & and_ln104_244_fu_995_p2);

assign and_ln102_1209_fu_1037_p2 = (icmp_ln86_1256_reg_1501 & and_ln102_1202_fu_1001_p2);

assign and_ln102_1210_fu_1047_p2 = (icmp_ln86_1257_reg_1507 & and_ln104_245_fu_1011_p2);

assign and_ln102_1211_fu_710_p2 = (icmp_ln86_1258_fu_524_p2 & and_ln102_1203_fu_668_p2);

assign and_ln102_1212_fu_722_p2 = (and_ln102_1226_fu_716_p2 & and_ln102_1199_fu_632_p2);

assign and_ln102_1213_fu_728_p2 = (icmp_ln86_1260_fu_536_p2 & and_ln102_1204_fu_680_p2);

assign and_ln102_1214_fu_740_p2 = (and_ln104_242_fu_644_p2 & and_ln102_1227_fu_734_p2);

assign and_ln102_1215_fu_746_p2 = (icmp_ln86_1262_fu_548_p2 & and_ln102_1205_fu_692_p2);

assign and_ln102_1216_fu_752_p2 = (icmp_ln86_1263_fu_554_p2 & and_ln102_1206_fu_698_p2);

assign and_ln102_1217_fu_764_p2 = (and_ln104_243_fu_662_p2 & and_ln102_1228_fu_758_p2);

assign and_ln102_1218_fu_1057_p2 = (icmp_ln86_1265_reg_1513 & and_ln102_1207_fu_1017_p2);

assign and_ln102_1219_fu_1067_p2 = (and_ln102_1229_fu_1062_p2 & and_ln102_1201_fu_985_p2);

assign and_ln102_1220_fu_1073_p2 = (icmp_ln86_1267_reg_1523 & and_ln102_1208_fu_1027_p2);

assign and_ln102_1221_fu_1083_p2 = (and_ln104_244_fu_995_p2 & and_ln102_1230_fu_1078_p2);

assign and_ln102_1222_fu_1089_p2 = (icmp_ln86_1269_reg_1533 & and_ln102_1209_fu_1037_p2);

assign and_ln102_1223_fu_1099_p2 = (and_ln102_1231_fu_1094_p2 & and_ln102_1202_fu_1001_p2);

assign and_ln102_1224_fu_1105_p2 = (icmp_ln86_1271_reg_1543 & and_ln102_1210_fu_1047_p2);

assign and_ln102_1225_fu_1115_p2 = (and_ln104_245_fu_1011_p2 & and_ln102_1232_fu_1110_p2);

assign and_ln102_1226_fu_716_p2 = (xor_ln104_602_fu_674_p2 & icmp_ln86_1259_fu_530_p2);

assign and_ln102_1227_fu_734_p2 = (xor_ln104_603_fu_686_p2 & icmp_ln86_1261_fu_542_p2);

assign and_ln102_1228_fu_758_p2 = (xor_ln104_604_fu_704_p2 & icmp_ln86_1264_fu_560_p2);

assign and_ln102_1229_fu_1062_p2 = (xor_ln104_605_fu_1022_p2 & icmp_ln86_1266_reg_1518);

assign and_ln102_1230_fu_1078_p2 = (xor_ln104_606_fu_1032_p2 & icmp_ln86_1268_reg_1528);

assign and_ln102_1231_fu_1094_p2 = (xor_ln104_607_fu_1042_p2 & icmp_ln86_1270_reg_1538);

assign and_ln102_1232_fu_1110_p2 = (xor_ln104_608_fu_1052_p2 & icmp_ln86_1272_reg_1548);

assign and_ln102_fu_614_p2 = (icmp_ln86_fu_414_p2 & icmp_ln86_1244_fu_420_p2);

assign and_ln104_241_fu_979_p2 = (xor_ln104_fu_964_p2 & xor_ln104_597_fu_974_p2);

assign and_ln104_242_fu_644_p2 = (xor_ln104_598_fu_638_p2 & and_ln102_fu_614_p2);

assign and_ln104_243_fu_662_p2 = (xor_ln104_599_fu_656_p2 & and_ln104_fu_626_p2);

assign and_ln104_244_fu_995_p2 = (xor_ln104_600_fu_990_p2 & and_ln102_1198_fu_969_p2);

assign and_ln104_245_fu_1011_p2 = (xor_ln104_601_fu_1006_p2 & and_ln104_241_fu_979_p2);

assign and_ln104_fu_626_p2 = (xor_ln104_596_fu_620_p2 & icmp_ln86_fu_414_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1326_p67;

assign icmp_ln86_1244_fu_420_p2 = (($signed(x_12_val) < $signed(18'd260933)) ? 1'b1 : 1'b0);

assign icmp_ln86_1245_fu_426_p2 = (($signed(x_22_val) < $signed(18'd46)) ? 1'b1 : 1'b0);

assign icmp_ln86_1246_fu_432_p2 = (($signed(x_36_val) < $signed(18'd24)) ? 1'b1 : 1'b0);

assign icmp_ln86_1247_fu_438_p2 = (($signed(x_11_val) < $signed(18'd1000)) ? 1'b1 : 1'b0);

assign icmp_ln86_1248_fu_444_p2 = (($signed(x_27_val) < $signed(18'd9271)) ? 1'b1 : 1'b0);

assign icmp_ln86_1251_fu_482_p2 = (($signed(x_27_val) < $signed(18'd21402)) ? 1'b1 : 1'b0);

assign icmp_ln86_1252_fu_488_p2 = (($signed(x_38_val) < $signed(18'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_1253_fu_494_p2 = (($signed(x_22_val) < $signed(18'd19)) ? 1'b1 : 1'b0);

assign icmp_ln86_1254_fu_500_p2 = (($signed(x_18_val) < $signed(18'd2620)) ? 1'b1 : 1'b0);

assign icmp_ln86_1255_fu_506_p2 = (($signed(x_17_val) < $signed(18'd15)) ? 1'b1 : 1'b0);

assign icmp_ln86_1256_fu_512_p2 = (($signed(x_5_val) < $signed(18'd13423)) ? 1'b1 : 1'b0);

assign icmp_ln86_1257_fu_518_p2 = (($signed(x_21_val) < $signed(18'd220)) ? 1'b1 : 1'b0);

assign icmp_ln86_1258_fu_524_p2 = (($signed(x_21_val) < $signed(18'd44)) ? 1'b1 : 1'b0);

assign icmp_ln86_1259_fu_530_p2 = (($signed(x_10_val) < $signed(18'd761)) ? 1'b1 : 1'b0);

assign icmp_ln86_1260_fu_536_p2 = (($signed(x_50_val) < $signed(18'd155067)) ? 1'b1 : 1'b0);

assign icmp_ln86_1261_fu_542_p2 = (($signed(x_49_val) < $signed(18'd166737)) ? 1'b1 : 1'b0);

assign icmp_ln86_1262_fu_548_p2 = (($signed(x_35_val) < $signed(18'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_1263_fu_554_p2 = (($signed(x_49_val) < $signed(18'd3907)) ? 1'b1 : 1'b0);

assign icmp_ln86_1264_fu_560_p2 = (($signed(x_48_val) < $signed(18'd1967)) ? 1'b1 : 1'b0);

assign icmp_ln86_1265_fu_566_p2 = (($signed(x_6_val) < $signed(18'd6389)) ? 1'b1 : 1'b0);

assign icmp_ln86_1266_fu_572_p2 = (($signed(x_40_val) < $signed(18'd366)) ? 1'b1 : 1'b0);

assign icmp_ln86_1267_fu_578_p2 = (($signed(x_10_val) < $signed(18'd776)) ? 1'b1 : 1'b0);

assign icmp_ln86_1268_fu_584_p2 = (($signed(x_18_val) < $signed(18'd2191)) ? 1'b1 : 1'b0);

assign icmp_ln86_1269_fu_590_p2 = (($signed(x_47_val) < $signed(18'd38254)) ? 1'b1 : 1'b0);

assign icmp_ln86_1270_fu_596_p2 = (($signed(x_40_val) < $signed(18'd1682)) ? 1'b1 : 1'b0);

assign icmp_ln86_1271_fu_602_p2 = (($signed(x_16_val) < $signed(18'd113)) ? 1'b1 : 1'b0);

assign icmp_ln86_1272_fu_608_p2 = (($signed(x_44_val) < $signed(18'd23)) ? 1'b1 : 1'b0);

assign icmp_ln86_1385_fu_460_p2 = (($signed(tmp_fu_450_p4) < $signed(14'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_1386_fu_476_p2 = (($signed(tmp_20_fu_466_p4) < $signed(15'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_414_p2 = (($signed(x_45_val) < $signed(18'd190)) ? 1'b1 : 1'b0);

assign or_ln117_1131_fu_806_p2 = (and_ln102_1213_fu_728_p2 | and_ln102_1199_fu_632_p2);

assign or_ln117_1132_fu_820_p2 = (and_ln102_1204_fu_680_p2 | and_ln102_1199_fu_632_p2);

assign or_ln117_1133_fu_834_p2 = (or_ln117_1132_fu_820_p2 | and_ln102_1214_fu_740_p2);

assign or_ln117_1134_fu_860_p2 = (and_ln102_fu_614_p2 | and_ln102_1215_fu_746_p2);

assign or_ln117_1135_fu_874_p2 = (and_ln102_fu_614_p2 | and_ln102_1205_fu_692_p2);

assign or_ln117_1136_fu_888_p2 = (and_ln102_fu_614_p2 | and_ln102_1200_fu_650_p2);

assign or_ln117_1137_fu_902_p2 = (or_ln117_1136_fu_888_p2 | and_ln102_1216_fu_752_p2);

assign or_ln117_1138_fu_916_p2 = (or_ln117_1136_fu_888_p2 | and_ln102_1206_fu_698_p2);

assign or_ln117_1139_fu_930_p2 = (or_ln117_1138_fu_916_p2 | and_ln102_1217_fu_764_p2);

assign or_ln117_1140_fu_1121_p2 = (icmp_ln86_reg_1462 | and_ln102_1218_fu_1057_p2);

assign or_ln117_1141_fu_1126_p2 = (icmp_ln86_reg_1462 | and_ln102_1207_fu_1017_p2);

assign or_ln117_1142_fu_1138_p2 = (or_ln117_1141_fu_1126_p2 | and_ln102_1219_fu_1067_p2);

assign or_ln117_1143_fu_1152_p2 = (icmp_ln86_reg_1462 | and_ln102_1201_fu_985_p2);

assign or_ln117_1144_fu_1165_p2 = (or_ln117_1143_fu_1152_p2 | and_ln102_1220_fu_1073_p2);

assign or_ln117_1145_fu_1179_p2 = (or_ln117_1143_fu_1152_p2 | and_ln102_1208_fu_1027_p2);

assign or_ln117_1146_fu_1193_p2 = (or_ln117_1145_fu_1179_p2 | and_ln102_1221_fu_1083_p2);

assign or_ln117_1147_fu_1207_p2 = (icmp_ln86_reg_1462 | and_ln102_1198_fu_969_p2);

assign or_ln117_1148_fu_1220_p2 = (or_ln117_1147_fu_1207_p2 | and_ln102_1222_fu_1089_p2);

assign or_ln117_1149_fu_1234_p2 = (or_ln117_1147_fu_1207_p2 | and_ln102_1209_fu_1037_p2);

assign or_ln117_1150_fu_1248_p2 = (or_ln117_1149_fu_1234_p2 | and_ln102_1223_fu_1099_p2);

assign or_ln117_1151_fu_1262_p2 = (or_ln117_1147_fu_1207_p2 | and_ln102_1202_fu_1001_p2);

assign or_ln117_1152_fu_1276_p2 = (or_ln117_1151_fu_1262_p2 | and_ln102_1224_fu_1105_p2);

assign or_ln117_1153_fu_1290_p2 = (or_ln117_1151_fu_1262_p2 | and_ln102_1210_fu_1047_p2);

assign or_ln117_1154_fu_1304_p2 = (or_ln117_1153_fu_1290_p2 | and_ln102_1225_fu_1115_p2);

assign or_ln117_fu_780_p2 = (and_ln102_1212_fu_722_p2 | and_ln102_1203_fu_668_p2);

assign select_ln117_1205_fu_794_p3 = ((or_ln117_fu_780_p2[0:0] == 1'b1) ? select_ln117_fu_786_p3 : 2'd3);

assign select_ln117_1206_fu_812_p3 = ((and_ln102_1199_fu_632_p2[0:0] == 1'b1) ? zext_ln117_138_fu_802_p1 : 3'd4);

assign select_ln117_1207_fu_826_p3 = ((or_ln117_1131_fu_806_p2[0:0] == 1'b1) ? select_ln117_1206_fu_812_p3 : 3'd5);

assign select_ln117_1208_fu_840_p3 = ((or_ln117_1132_fu_820_p2[0:0] == 1'b1) ? select_ln117_1207_fu_826_p3 : 3'd6);

assign select_ln117_1209_fu_848_p3 = ((or_ln117_1133_fu_834_p2[0:0] == 1'b1) ? select_ln117_1208_fu_840_p3 : 3'd7);

assign select_ln117_1210_fu_866_p3 = ((and_ln102_fu_614_p2[0:0] == 1'b1) ? zext_ln117_139_fu_856_p1 : 4'd8);

assign select_ln117_1211_fu_880_p3 = ((or_ln117_1134_fu_860_p2[0:0] == 1'b1) ? select_ln117_1210_fu_866_p3 : 4'd9);

assign select_ln117_1212_fu_894_p3 = ((or_ln117_1135_fu_874_p2[0:0] == 1'b1) ? select_ln117_1211_fu_880_p3 : 4'd11);

assign select_ln117_1213_fu_908_p3 = ((or_ln117_1136_fu_888_p2[0:0] == 1'b1) ? select_ln117_1212_fu_894_p3 : 4'd12);

assign select_ln117_1214_fu_922_p3 = ((or_ln117_1137_fu_902_p2[0:0] == 1'b1) ? select_ln117_1213_fu_908_p3 : 4'd13);

assign select_ln117_1215_fu_936_p3 = ((or_ln117_1138_fu_916_p2[0:0] == 1'b1) ? select_ln117_1214_fu_922_p3 : 4'd14);

assign select_ln117_1216_fu_944_p3 = ((or_ln117_1139_fu_930_p2[0:0] == 1'b1) ? select_ln117_1215_fu_936_p3 : 4'd15);

assign select_ln117_1217_fu_956_p3 = ((icmp_ln86_fu_414_p2[0:0] == 1'b1) ? zext_ln117_140_fu_952_p1 : 5'd16);

assign select_ln117_1218_fu_1131_p3 = ((or_ln117_1140_fu_1121_p2[0:0] == 1'b1) ? select_ln117_1217_reg_1553 : 5'd17);

assign select_ln117_1219_fu_1144_p3 = ((or_ln117_1141_fu_1126_p2[0:0] == 1'b1) ? select_ln117_1218_fu_1131_p3 : 5'd18);

assign select_ln117_1220_fu_1157_p3 = ((or_ln117_1142_fu_1138_p2[0:0] == 1'b1) ? select_ln117_1219_fu_1144_p3 : 5'd19);

assign select_ln117_1221_fu_1171_p3 = ((or_ln117_1143_fu_1152_p2[0:0] == 1'b1) ? select_ln117_1220_fu_1157_p3 : 5'd20);

assign select_ln117_1222_fu_1185_p3 = ((or_ln117_1144_fu_1165_p2[0:0] == 1'b1) ? select_ln117_1221_fu_1171_p3 : 5'd21);

assign select_ln117_1223_fu_1199_p3 = ((or_ln117_1145_fu_1179_p2[0:0] == 1'b1) ? select_ln117_1222_fu_1185_p3 : 5'd22);

assign select_ln117_1224_fu_1212_p3 = ((or_ln117_1146_fu_1193_p2[0:0] == 1'b1) ? select_ln117_1223_fu_1199_p3 : 5'd23);

assign select_ln117_1225_fu_1226_p3 = ((or_ln117_1147_fu_1207_p2[0:0] == 1'b1) ? select_ln117_1224_fu_1212_p3 : 5'd24);

assign select_ln117_1226_fu_1240_p3 = ((or_ln117_1148_fu_1220_p2[0:0] == 1'b1) ? select_ln117_1225_fu_1226_p3 : 5'd25);

assign select_ln117_1227_fu_1254_p3 = ((or_ln117_1149_fu_1234_p2[0:0] == 1'b1) ? select_ln117_1226_fu_1240_p3 : 5'd26);

assign select_ln117_1228_fu_1268_p3 = ((or_ln117_1150_fu_1248_p2[0:0] == 1'b1) ? select_ln117_1227_fu_1254_p3 : 5'd27);

assign select_ln117_1229_fu_1282_p3 = ((or_ln117_1151_fu_1262_p2[0:0] == 1'b1) ? select_ln117_1228_fu_1268_p3 : 5'd28);

assign select_ln117_1230_fu_1296_p3 = ((or_ln117_1152_fu_1276_p2[0:0] == 1'b1) ? select_ln117_1229_fu_1282_p3 : 5'd29);

assign select_ln117_1231_fu_1310_p3 = ((or_ln117_1153_fu_1290_p2[0:0] == 1'b1) ? select_ln117_1230_fu_1296_p3 : 5'd30);

assign select_ln117_fu_786_p3 = ((and_ln102_1203_fu_668_p2[0:0] == 1'b1) ? zext_ln117_fu_776_p1 : 2'd2);

assign tmp_20_fu_466_p4 = {{x_38_val[17:3]}};

assign tmp_fu_450_p4 = {{x_23_val[17:4]}};

assign xor_ln104_596_fu_620_p2 = (icmp_ln86_1244_fu_420_p2 ^ 1'd1);

assign xor_ln104_597_fu_974_p2 = (icmp_ln86_1245_reg_1471 ^ 1'd1);

assign xor_ln104_598_fu_638_p2 = (icmp_ln86_1246_fu_432_p2 ^ 1'd1);

assign xor_ln104_599_fu_656_p2 = (icmp_ln86_1247_fu_438_p2 ^ 1'd1);

assign xor_ln104_600_fu_990_p2 = (icmp_ln86_1248_reg_1477 ^ 1'd1);

assign xor_ln104_601_fu_1006_p2 = (icmp_ln86_1385_reg_1483 ^ 1'd1);

assign xor_ln104_602_fu_674_p2 = (icmp_ln86_1386_fu_476_p2 ^ 1'd1);

assign xor_ln104_603_fu_686_p2 = (icmp_ln86_1251_fu_482_p2 ^ 1'd1);

assign xor_ln104_604_fu_704_p2 = (icmp_ln86_1253_fu_494_p2 ^ 1'd1);

assign xor_ln104_605_fu_1022_p2 = (icmp_ln86_1254_reg_1489 ^ 1'd1);

assign xor_ln104_606_fu_1032_p2 = (icmp_ln86_1255_reg_1495 ^ 1'd1);

assign xor_ln104_607_fu_1042_p2 = (icmp_ln86_1256_reg_1501 ^ 1'd1);

assign xor_ln104_608_fu_1052_p2 = (icmp_ln86_1257_reg_1507 ^ 1'd1);

assign xor_ln104_fu_964_p2 = (icmp_ln86_reg_1462 ^ 1'd1);

assign xor_ln117_fu_770_p2 = (1'd1 ^ and_ln102_1211_fu_710_p2);

assign zext_ln117_138_fu_802_p1 = select_ln117_1205_fu_794_p3;

assign zext_ln117_139_fu_856_p1 = select_ln117_1209_fu_848_p3;

assign zext_ln117_140_fu_952_p1 = select_ln117_1216_fu_944_p3;

assign zext_ln117_fu_776_p1 = xor_ln117_fu_770_p2;

endmodule //my_prj_decision_function_47
