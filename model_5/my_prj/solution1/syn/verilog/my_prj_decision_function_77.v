// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_77 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_4_val,
        x_9_val,
        x_12_val,
        x_13_val,
        x_16_val,
        x_17_val,
        x_18_val,
        x_19_val,
        x_23_val,
        x_24_val,
        x_26_val,
        x_30_val,
        x_31_val,
        x_34_val,
        x_36_val,
        x_39_val,
        x_48_val,
        x_49_val,
        x_50_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_4_val;
input  [17:0] x_9_val;
input  [17:0] x_12_val;
input  [17:0] x_13_val;
input  [17:0] x_16_val;
input  [17:0] x_17_val;
input  [17:0] x_18_val;
input  [17:0] x_19_val;
input  [17:0] x_23_val;
input  [17:0] x_24_val;
input  [17:0] x_26_val;
input  [17:0] x_30_val;
input  [17:0] x_31_val;
input  [17:0] x_34_val;
input  [17:0] x_36_val;
input  [17:0] x_39_val;
input  [17:0] x_48_val;
input  [17:0] x_49_val;
input  [17:0] x_50_val;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_402_p2;
reg   [0:0] icmp_ln86_reg_1472;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_626_fu_414_p2;
reg   [0:0] icmp_ln86_626_reg_1481;
wire   [0:0] icmp_ln86_629_fu_432_p2;
reg   [0:0] icmp_ln86_629_reg_1487;
wire   [0:0] icmp_ln86_630_fu_438_p2;
reg   [0:0] icmp_ln86_630_reg_1493;
wire   [0:0] icmp_ln86_635_fu_468_p2;
reg   [0:0] icmp_ln86_635_reg_1499;
wire   [0:0] icmp_ln86_636_fu_474_p2;
reg   [0:0] icmp_ln86_636_reg_1505;
wire   [0:0] icmp_ln86_637_fu_480_p2;
reg   [0:0] icmp_ln86_637_reg_1511;
wire   [0:0] icmp_ln86_638_fu_486_p2;
reg   [0:0] icmp_ln86_638_reg_1517;
wire   [0:0] icmp_ln86_646_fu_534_p2;
reg   [0:0] icmp_ln86_646_reg_1523;
wire   [0:0] icmp_ln86_647_fu_540_p2;
reg   [0:0] icmp_ln86_647_reg_1528;
wire   [0:0] icmp_ln86_648_fu_556_p2;
reg   [0:0] icmp_ln86_648_reg_1533;
wire   [0:0] icmp_ln86_649_fu_562_p2;
reg   [0:0] icmp_ln86_649_reg_1538;
wire   [0:0] icmp_ln86_650_fu_568_p2;
reg   [0:0] icmp_ln86_650_reg_1543;
wire   [0:0] icmp_ln86_651_fu_574_p2;
reg   [0:0] icmp_ln86_651_reg_1548;
wire   [0:0] icmp_ln86_652_fu_580_p2;
reg   [0:0] icmp_ln86_652_reg_1553;
wire   [0:0] icmp_ln86_653_fu_586_p2;
reg   [0:0] icmp_ln86_653_reg_1558;
wire   [3:0] select_ln117_619_fu_966_p3;
reg   [3:0] select_ln117_619_reg_1563;
wire    ap_block_pp0_stage0;
wire   [15:0] tmp_fu_392_p4;
wire   [15:0] tmp_8_fu_546_p4;
wire   [0:0] icmp_ln86_625_fu_408_p2;
wire   [0:0] xor_ln104_295_fu_598_p2;
wire   [0:0] icmp_ln86_627_fu_420_p2;
wire   [0:0] and_ln102_fu_592_p2;
wire   [0:0] xor_ln104_297_fu_616_p2;
wire   [0:0] icmp_ln86_628_fu_426_p2;
wire   [0:0] and_ln104_fu_604_p2;
wire   [0:0] xor_ln104_298_fu_634_p2;
wire   [0:0] icmp_ln86_631_fu_444_p2;
wire   [0:0] and_ln102_770_fu_610_p2;
wire   [0:0] icmp_ln86_632_fu_450_p2;
wire   [0:0] and_ln104_111_fu_622_p2;
wire   [0:0] icmp_ln86_633_fu_456_p2;
wire   [0:0] and_ln102_771_fu_628_p2;
wire   [0:0] xor_ln104_303_fu_670_p2;
wire   [0:0] icmp_ln86_634_fu_462_p2;
wire   [0:0] and_ln104_112_fu_640_p2;
wire   [0:0] icmp_ln86_639_fu_492_p2;
wire   [0:0] and_ln102_774_fu_646_p2;
wire   [0:0] icmp_ln86_640_fu_498_p2;
wire   [0:0] xor_ln104_301_fu_652_p2;
wire   [0:0] and_ln102_782_fu_700_p2;
wire   [0:0] icmp_ln86_641_fu_504_p2;
wire   [0:0] and_ln102_775_fu_658_p2;
wire   [0:0] icmp_ln86_642_fu_510_p2;
wire   [0:0] xor_ln104_302_fu_664_p2;
wire   [0:0] and_ln102_785_fu_718_p2;
wire   [0:0] icmp_ln86_643_fu_516_p2;
wire   [0:0] and_ln102_787_fu_730_p2;
wire   [0:0] icmp_ln86_644_fu_522_p2;
wire   [0:0] and_ln102_776_fu_682_p2;
wire   [0:0] icmp_ln86_645_fu_528_p2;
wire   [0:0] xor_ln104_304_fu_688_p2;
wire   [0:0] and_ln102_790_fu_748_p2;
wire   [0:0] and_ln104_115_fu_676_p2;
wire   [0:0] and_ln102_781_fu_694_p2;
wire   [0:0] xor_ln117_fu_766_p2;
wire   [0:0] or_ln117_548_fu_772_p2;
wire   [0:0] or_ln117_fu_760_p2;
wire   [1:0] zext_ln117_fu_778_p1;
wire   [0:0] or_ln117_549_fu_782_p2;
wire   [0:0] and_ln102_783_fu_706_p2;
wire   [1:0] select_ln117_fu_788_p3;
wire   [1:0] select_ln117_607_fu_802_p3;
wire   [0:0] or_ln117_550_fu_796_p2;
wire   [2:0] zext_ln117_67_fu_810_p1;
wire   [0:0] or_ln117_551_fu_814_p2;
wire   [0:0] and_ln102_784_fu_712_p2;
wire   [2:0] select_ln117_608_fu_820_p3;
wire   [0:0] or_ln117_552_fu_828_p2;
wire   [2:0] select_ln117_609_fu_834_p3;
wire   [0:0] or_ln117_553_fu_842_p2;
wire   [0:0] and_ln102_786_fu_724_p2;
wire   [2:0] select_ln117_610_fu_848_p3;
wire   [2:0] select_ln117_611_fu_862_p3;
wire   [0:0] or_ln117_554_fu_856_p2;
wire   [3:0] zext_ln117_68_fu_870_p1;
wire   [0:0] or_ln117_555_fu_874_p2;
wire   [0:0] and_ln102_788_fu_736_p2;
wire   [3:0] select_ln117_612_fu_880_p3;
wire   [0:0] or_ln117_556_fu_888_p2;
wire   [3:0] select_ln117_613_fu_894_p3;
wire   [0:0] or_ln117_557_fu_902_p2;
wire   [0:0] and_ln102_789_fu_742_p2;
wire   [3:0] select_ln117_614_fu_908_p3;
wire   [0:0] or_ln117_558_fu_916_p2;
wire   [3:0] select_ln117_615_fu_922_p3;
wire   [0:0] or_ln117_559_fu_930_p2;
wire   [0:0] and_ln102_791_fu_754_p2;
wire   [3:0] select_ln117_616_fu_936_p3;
wire   [0:0] or_ln117_560_fu_944_p2;
wire   [3:0] select_ln117_617_fu_950_p3;
wire   [3:0] select_ln117_618_fu_958_p3;
wire   [0:0] xor_ln104_fu_974_p2;
wire   [0:0] xor_ln104_296_fu_984_p2;
wire   [0:0] and_ln102_769_fu_979_p2;
wire   [0:0] xor_ln104_299_fu_1000_p2;
wire   [0:0] and_ln104_110_fu_989_p2;
wire   [0:0] xor_ln104_300_fu_1016_p2;
wire   [0:0] and_ln102_772_fu_995_p2;
wire   [0:0] and_ln104_113_fu_1005_p2;
wire   [0:0] and_ln102_773_fu_1011_p2;
wire   [0:0] and_ln104_114_fu_1021_p2;
wire   [0:0] and_ln102_777_fu_1027_p2;
wire   [0:0] xor_ln104_305_fu_1032_p2;
wire   [0:0] and_ln102_793_fu_1072_p2;
wire   [0:0] and_ln102_778_fu_1037_p2;
wire   [0:0] xor_ln104_306_fu_1042_p2;
wire   [0:0] and_ln102_796_fu_1088_p2;
wire   [0:0] and_ln102_779_fu_1047_p2;
wire   [0:0] xor_ln104_307_fu_1052_p2;
wire   [0:0] and_ln102_799_fu_1104_p2;
wire   [0:0] and_ln102_780_fu_1057_p2;
wire   [0:0] xor_ln104_308_fu_1062_p2;
wire   [0:0] and_ln102_802_fu_1120_p2;
wire   [0:0] and_ln102_792_fu_1067_p2;
wire   [0:0] or_ln117_561_fu_1131_p2;
wire   [4:0] zext_ln117_69_fu_1136_p1;
wire   [0:0] or_ln117_562_fu_1139_p2;
wire   [0:0] and_ln102_794_fu_1077_p2;
wire   [4:0] select_ln117_620_fu_1144_p3;
wire   [0:0] or_ln117_563_fu_1152_p2;
wire   [4:0] select_ln117_621_fu_1158_p3;
wire   [0:0] or_ln117_564_fu_1166_p2;
wire   [0:0] and_ln102_795_fu_1083_p2;
wire   [4:0] select_ln117_622_fu_1171_p3;
wire   [0:0] or_ln117_565_fu_1179_p2;
wire   [4:0] select_ln117_623_fu_1185_p3;
wire   [0:0] or_ln117_566_fu_1193_p2;
wire   [0:0] and_ln102_797_fu_1093_p2;
wire   [4:0] select_ln117_624_fu_1199_p3;
wire   [0:0] or_ln117_567_fu_1207_p2;
wire   [4:0] select_ln117_625_fu_1213_p3;
wire   [0:0] or_ln117_568_fu_1221_p2;
wire   [0:0] and_ln102_798_fu_1099_p2;
wire   [4:0] select_ln117_626_fu_1226_p3;
wire   [0:0] or_ln117_569_fu_1234_p2;
wire   [4:0] select_ln117_627_fu_1240_p3;
wire   [0:0] or_ln117_570_fu_1248_p2;
wire   [0:0] and_ln102_800_fu_1109_p2;
wire   [4:0] select_ln117_628_fu_1254_p3;
wire   [0:0] or_ln117_571_fu_1262_p2;
wire   [4:0] select_ln117_629_fu_1268_p3;
wire   [0:0] or_ln117_572_fu_1276_p2;
wire   [0:0] and_ln102_801_fu_1115_p2;
wire   [4:0] select_ln117_630_fu_1282_p3;
wire   [0:0] or_ln117_573_fu_1290_p2;
wire   [4:0] select_ln117_631_fu_1296_p3;
wire   [0:0] or_ln117_574_fu_1304_p2;
wire   [0:0] and_ln102_803_fu_1125_p2;
wire   [4:0] select_ln117_632_fu_1310_p3;
wire   [0:0] or_ln117_575_fu_1318_p2;
wire   [4:0] select_ln117_633_fu_1324_p3;
wire   [11:0] agg_result_fu_1340_p63;
wire   [4:0] agg_result_fu_1340_p64;
wire   [11:0] agg_result_fu_1340_p65;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1340_p1;
wire   [4:0] agg_result_fu_1340_p3;
wire   [4:0] agg_result_fu_1340_p5;
wire   [4:0] agg_result_fu_1340_p7;
wire   [4:0] agg_result_fu_1340_p9;
wire   [4:0] agg_result_fu_1340_p11;
wire   [4:0] agg_result_fu_1340_p13;
wire   [4:0] agg_result_fu_1340_p15;
wire   [4:0] agg_result_fu_1340_p17;
wire   [4:0] agg_result_fu_1340_p19;
wire   [4:0] agg_result_fu_1340_p21;
wire   [4:0] agg_result_fu_1340_p23;
wire   [4:0] agg_result_fu_1340_p25;
wire   [4:0] agg_result_fu_1340_p27;
wire   [4:0] agg_result_fu_1340_p29;
wire   [4:0] agg_result_fu_1340_p31;
wire  signed [4:0] agg_result_fu_1340_p33;
wire  signed [4:0] agg_result_fu_1340_p35;
wire  signed [4:0] agg_result_fu_1340_p37;
wire  signed [4:0] agg_result_fu_1340_p39;
wire  signed [4:0] agg_result_fu_1340_p41;
wire  signed [4:0] agg_result_fu_1340_p43;
wire  signed [4:0] agg_result_fu_1340_p45;
wire  signed [4:0] agg_result_fu_1340_p47;
wire  signed [4:0] agg_result_fu_1340_p49;
wire  signed [4:0] agg_result_fu_1340_p51;
wire  signed [4:0] agg_result_fu_1340_p53;
wire  signed [4:0] agg_result_fu_1340_p55;
wire  signed [4:0] agg_result_fu_1340_p57;
wire  signed [4:0] agg_result_fu_1340_p59;
wire  signed [4:0] agg_result_fu_1340_p61;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_63_5_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 12 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 12 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 12 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 12 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 12 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 12 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 12 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 12 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 12 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 12 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 12 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 12 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 12 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 12 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 12 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 12 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 12 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 12 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 12 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 12 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 12 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 12 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 12 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 12 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 12 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 12 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 12 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 12 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 12 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 12 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 12 ),
    .def_WIDTH( 12 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
sparsemux_63_5_12_1_1_U586(
    .din0(12'd1100),
    .din1(12'd3829),
    .din2(12'd3515),
    .din3(12'd3202),
    .din4(12'd336),
    .din5(12'd115),
    .din6(12'd752),
    .din7(12'd3783),
    .din8(12'd4086),
    .din9(12'd3676),
    .din10(12'd3988),
    .din11(12'd3874),
    .din12(12'd319),
    .din13(12'd1945),
    .din14(12'd110),
    .din15(12'd3819),
    .din16(12'd29),
    .din17(12'd175),
    .din18(12'd4049),
    .din19(12'd4039),
    .din20(12'd509),
    .din21(12'd4041),
    .din22(12'd583),
    .din23(12'd4032),
    .din24(12'd3883),
    .din25(12'd123),
    .din26(12'd4044),
    .din27(12'd55),
    .din28(12'd291),
    .din29(12'd3913),
    .din30(12'd341),
    .def(agg_result_fu_1340_p63),
    .sel(agg_result_fu_1340_p64),
    .dout(agg_result_fu_1340_p65)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_626_reg_1481 <= icmp_ln86_626_fu_414_p2;
        icmp_ln86_629_reg_1487 <= icmp_ln86_629_fu_432_p2;
        icmp_ln86_630_reg_1493 <= icmp_ln86_630_fu_438_p2;
        icmp_ln86_635_reg_1499 <= icmp_ln86_635_fu_468_p2;
        icmp_ln86_636_reg_1505 <= icmp_ln86_636_fu_474_p2;
        icmp_ln86_637_reg_1511 <= icmp_ln86_637_fu_480_p2;
        icmp_ln86_638_reg_1517 <= icmp_ln86_638_fu_486_p2;
        icmp_ln86_646_reg_1523 <= icmp_ln86_646_fu_534_p2;
        icmp_ln86_647_reg_1528 <= icmp_ln86_647_fu_540_p2;
        icmp_ln86_648_reg_1533 <= icmp_ln86_648_fu_556_p2;
        icmp_ln86_649_reg_1538 <= icmp_ln86_649_fu_562_p2;
        icmp_ln86_650_reg_1543 <= icmp_ln86_650_fu_568_p2;
        icmp_ln86_651_reg_1548 <= icmp_ln86_651_fu_574_p2;
        icmp_ln86_652_reg_1553 <= icmp_ln86_652_fu_580_p2;
        icmp_ln86_653_reg_1558 <= icmp_ln86_653_fu_586_p2;
        icmp_ln86_reg_1472 <= icmp_ln86_fu_402_p2;
        select_ln117_619_reg_1563 <= select_ln117_619_fu_966_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1340_p63 = 'bx;

assign agg_result_fu_1340_p64 = ((or_ln117_575_fu_1318_p2[0:0] == 1'b1) ? select_ln117_633_fu_1324_p3 : 5'd30);

assign and_ln102_769_fu_979_p2 = (xor_ln104_fu_974_p2 & icmp_ln86_626_reg_1481);

assign and_ln102_770_fu_610_p2 = (icmp_ln86_627_fu_420_p2 & and_ln102_fu_592_p2);

assign and_ln102_771_fu_628_p2 = (icmp_ln86_628_fu_426_p2 & and_ln104_fu_604_p2);

assign and_ln102_772_fu_995_p2 = (icmp_ln86_629_reg_1487 & and_ln102_769_fu_979_p2);

assign and_ln102_773_fu_1011_p2 = (icmp_ln86_630_reg_1493 & and_ln104_110_fu_989_p2);

assign and_ln102_774_fu_646_p2 = (icmp_ln86_631_fu_444_p2 & and_ln102_770_fu_610_p2);

assign and_ln102_775_fu_658_p2 = (icmp_ln86_632_fu_450_p2 & and_ln104_111_fu_622_p2);

assign and_ln102_776_fu_682_p2 = (icmp_ln86_634_fu_462_p2 & and_ln104_112_fu_640_p2);

assign and_ln102_777_fu_1027_p2 = (icmp_ln86_635_reg_1499 & and_ln102_772_fu_995_p2);

assign and_ln102_778_fu_1037_p2 = (icmp_ln86_636_reg_1505 & and_ln104_113_fu_1005_p2);

assign and_ln102_779_fu_1047_p2 = (icmp_ln86_637_reg_1511 & and_ln102_773_fu_1011_p2);

assign and_ln102_780_fu_1057_p2 = (icmp_ln86_638_reg_1517 & and_ln104_114_fu_1021_p2);

assign and_ln102_781_fu_694_p2 = (icmp_ln86_639_fu_492_p2 & and_ln102_774_fu_646_p2);

assign and_ln102_782_fu_700_p2 = (xor_ln104_301_fu_652_p2 & icmp_ln86_640_fu_498_p2);

assign and_ln102_783_fu_706_p2 = (and_ln102_782_fu_700_p2 & and_ln102_770_fu_610_p2);

assign and_ln102_784_fu_712_p2 = (icmp_ln86_641_fu_504_p2 & and_ln102_775_fu_658_p2);

assign and_ln102_785_fu_718_p2 = (xor_ln104_302_fu_664_p2 & icmp_ln86_642_fu_510_p2);

assign and_ln102_786_fu_724_p2 = (and_ln104_111_fu_622_p2 & and_ln102_785_fu_718_p2);

assign and_ln102_787_fu_730_p2 = (icmp_ln86_643_fu_516_p2 & and_ln102_771_fu_628_p2);

assign and_ln102_788_fu_736_p2 = (icmp_ln86_633_fu_456_p2 & and_ln102_787_fu_730_p2);

assign and_ln102_789_fu_742_p2 = (icmp_ln86_644_fu_522_p2 & and_ln102_776_fu_682_p2);

assign and_ln102_790_fu_748_p2 = (xor_ln104_304_fu_688_p2 & icmp_ln86_645_fu_528_p2);

assign and_ln102_791_fu_754_p2 = (and_ln104_112_fu_640_p2 & and_ln102_790_fu_748_p2);

assign and_ln102_792_fu_1067_p2 = (icmp_ln86_646_reg_1523 & and_ln102_777_fu_1027_p2);

assign and_ln102_793_fu_1072_p2 = (xor_ln104_305_fu_1032_p2 & icmp_ln86_647_reg_1528);

assign and_ln102_794_fu_1077_p2 = (and_ln102_793_fu_1072_p2 & and_ln102_772_fu_995_p2);

assign and_ln102_795_fu_1083_p2 = (icmp_ln86_648_reg_1533 & and_ln102_778_fu_1037_p2);

assign and_ln102_796_fu_1088_p2 = (xor_ln104_306_fu_1042_p2 & icmp_ln86_649_reg_1538);

assign and_ln102_797_fu_1093_p2 = (and_ln104_113_fu_1005_p2 & and_ln102_796_fu_1088_p2);

assign and_ln102_798_fu_1099_p2 = (icmp_ln86_650_reg_1543 & and_ln102_779_fu_1047_p2);

assign and_ln102_799_fu_1104_p2 = (xor_ln104_307_fu_1052_p2 & icmp_ln86_651_reg_1548);

assign and_ln102_800_fu_1109_p2 = (and_ln102_799_fu_1104_p2 & and_ln102_773_fu_1011_p2);

assign and_ln102_801_fu_1115_p2 = (icmp_ln86_652_reg_1553 & and_ln102_780_fu_1057_p2);

assign and_ln102_802_fu_1120_p2 = (xor_ln104_308_fu_1062_p2 & icmp_ln86_653_reg_1558);

assign and_ln102_803_fu_1125_p2 = (and_ln104_114_fu_1021_p2 & and_ln102_802_fu_1120_p2);

assign and_ln102_fu_592_p2 = (icmp_ln86_fu_402_p2 & icmp_ln86_625_fu_408_p2);

assign and_ln104_110_fu_989_p2 = (xor_ln104_fu_974_p2 & xor_ln104_296_fu_984_p2);

assign and_ln104_111_fu_622_p2 = (xor_ln104_297_fu_616_p2 & and_ln102_fu_592_p2);

assign and_ln104_112_fu_640_p2 = (xor_ln104_298_fu_634_p2 & and_ln104_fu_604_p2);

assign and_ln104_113_fu_1005_p2 = (xor_ln104_299_fu_1000_p2 & and_ln102_769_fu_979_p2);

assign and_ln104_114_fu_1021_p2 = (xor_ln104_300_fu_1016_p2 & and_ln104_110_fu_989_p2);

assign and_ln104_115_fu_676_p2 = (xor_ln104_303_fu_670_p2 & and_ln102_771_fu_628_p2);

assign and_ln104_fu_604_p2 = (xor_ln104_295_fu_598_p2 & icmp_ln86_fu_402_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1340_p65;

assign icmp_ln86_625_fu_408_p2 = (($signed(x_1_val) < $signed(18'd231234)) ? 1'b1 : 1'b0);

assign icmp_ln86_626_fu_414_p2 = (($signed(x_30_val) < $signed(18'd732)) ? 1'b1 : 1'b0);

assign icmp_ln86_627_fu_420_p2 = (($signed(x_39_val) < $signed(18'd1127)) ? 1'b1 : 1'b0);

assign icmp_ln86_628_fu_426_p2 = (($signed(x_4_val) < $signed(18'd20622)) ? 1'b1 : 1'b0);

assign icmp_ln86_629_fu_432_p2 = (($signed(x_34_val) < $signed(18'd475)) ? 1'b1 : 1'b0);

assign icmp_ln86_630_fu_438_p2 = (($signed(x_26_val) < $signed(18'd120257)) ? 1'b1 : 1'b0);

assign icmp_ln86_631_fu_444_p2 = (($signed(x_16_val) < $signed(18'd131)) ? 1'b1 : 1'b0);

assign icmp_ln86_632_fu_450_p2 = (($signed(x_24_val) < $signed(18'd372)) ? 1'b1 : 1'b0);

assign icmp_ln86_633_fu_456_p2 = (($signed(x_19_val) < $signed(18'd251747)) ? 1'b1 : 1'b0);

assign icmp_ln86_634_fu_462_p2 = (($signed(x_17_val) < $signed(18'd72)) ? 1'b1 : 1'b0);

assign icmp_ln86_635_fu_468_p2 = (($signed(x_49_val) < $signed(18'd74847)) ? 1'b1 : 1'b0);

assign icmp_ln86_636_fu_474_p2 = (($signed(x_23_val) < $signed(18'd36)) ? 1'b1 : 1'b0);

assign icmp_ln86_637_fu_480_p2 = (($signed(x_19_val) < $signed(18'd1715)) ? 1'b1 : 1'b0);

assign icmp_ln86_638_fu_486_p2 = (($signed(x_49_val) < $signed(18'd182821)) ? 1'b1 : 1'b0);

assign icmp_ln86_639_fu_492_p2 = (($signed(x_4_val) < $signed(18'd46695)) ? 1'b1 : 1'b0);

assign icmp_ln86_640_fu_498_p2 = (($signed(x_12_val) < $signed(18'd258786)) ? 1'b1 : 1'b0);

assign icmp_ln86_641_fu_504_p2 = (($signed(x_17_val) < $signed(18'd45)) ? 1'b1 : 1'b0);

assign icmp_ln86_642_fu_510_p2 = (($signed(x_17_val) < $signed(18'd27)) ? 1'b1 : 1'b0);

assign icmp_ln86_643_fu_516_p2 = (($signed(x_16_val) < $signed(18'd125)) ? 1'b1 : 1'b0);

assign icmp_ln86_644_fu_522_p2 = (($signed(x_4_val) < $signed(18'd83609)) ? 1'b1 : 1'b0);

assign icmp_ln86_645_fu_528_p2 = (($signed(x_50_val) < $signed(18'd44919)) ? 1'b1 : 1'b0);

assign icmp_ln86_646_fu_534_p2 = (($signed(x_13_val) < $signed(18'd442)) ? 1'b1 : 1'b0);

assign icmp_ln86_647_fu_540_p2 = (($signed(x_48_val) < $signed(18'd90201)) ? 1'b1 : 1'b0);

assign icmp_ln86_648_fu_556_p2 = (($signed(tmp_8_fu_546_p4) < $signed(16'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_649_fu_562_p2 = (($signed(x_9_val) < $signed(18'd3078)) ? 1'b1 : 1'b0);

assign icmp_ln86_650_fu_568_p2 = (($signed(x_18_val) < $signed(18'd1429)) ? 1'b1 : 1'b0);

assign icmp_ln86_651_fu_574_p2 = (($signed(x_24_val) < $signed(18'd346)) ? 1'b1 : 1'b0);

assign icmp_ln86_652_fu_580_p2 = (($signed(x_49_val) < $signed(18'd171694)) ? 1'b1 : 1'b0);

assign icmp_ln86_653_fu_586_p2 = (($signed(x_31_val) < $signed(18'd6287)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_402_p2 = (($signed(tmp_fu_392_p4) < $signed(16'd1)) ? 1'b1 : 1'b0);

assign or_ln117_548_fu_772_p2 = (xor_ln117_fu_766_p2 | icmp_ln86_633_fu_456_p2);

assign or_ln117_549_fu_782_p2 = (and_ln104_115_fu_676_p2 | and_ln102_774_fu_646_p2);

assign or_ln117_550_fu_796_p2 = (or_ln117_549_fu_782_p2 | and_ln102_783_fu_706_p2);

assign or_ln117_551_fu_814_p2 = (and_ln104_115_fu_676_p2 | and_ln102_770_fu_610_p2);

assign or_ln117_552_fu_828_p2 = (or_ln117_551_fu_814_p2 | and_ln102_784_fu_712_p2);

assign or_ln117_553_fu_842_p2 = (or_ln117_551_fu_814_p2 | and_ln102_775_fu_658_p2);

assign or_ln117_554_fu_856_p2 = (or_ln117_553_fu_842_p2 | and_ln102_786_fu_724_p2);

assign or_ln117_555_fu_874_p2 = (and_ln104_115_fu_676_p2 | and_ln102_fu_592_p2);

assign or_ln117_556_fu_888_p2 = (or_ln117_555_fu_874_p2 | and_ln102_788_fu_736_p2);

assign or_ln117_557_fu_902_p2 = (and_ln102_fu_592_p2 | and_ln102_771_fu_628_p2);

assign or_ln117_558_fu_916_p2 = (or_ln117_557_fu_902_p2 | and_ln102_789_fu_742_p2);

assign or_ln117_559_fu_930_p2 = (or_ln117_557_fu_902_p2 | and_ln102_776_fu_682_p2);

assign or_ln117_560_fu_944_p2 = (or_ln117_559_fu_930_p2 | and_ln102_791_fu_754_p2);

assign or_ln117_561_fu_1131_p2 = (icmp_ln86_reg_1472 | and_ln102_792_fu_1067_p2);

assign or_ln117_562_fu_1139_p2 = (icmp_ln86_reg_1472 | and_ln102_777_fu_1027_p2);

assign or_ln117_563_fu_1152_p2 = (or_ln117_562_fu_1139_p2 | and_ln102_794_fu_1077_p2);

assign or_ln117_564_fu_1166_p2 = (icmp_ln86_reg_1472 | and_ln102_772_fu_995_p2);

assign or_ln117_565_fu_1179_p2 = (or_ln117_564_fu_1166_p2 | and_ln102_795_fu_1083_p2);

assign or_ln117_566_fu_1193_p2 = (or_ln117_564_fu_1166_p2 | and_ln102_778_fu_1037_p2);

assign or_ln117_567_fu_1207_p2 = (or_ln117_566_fu_1193_p2 | and_ln102_797_fu_1093_p2);

assign or_ln117_568_fu_1221_p2 = (icmp_ln86_reg_1472 | and_ln102_769_fu_979_p2);

assign or_ln117_569_fu_1234_p2 = (or_ln117_568_fu_1221_p2 | and_ln102_798_fu_1099_p2);

assign or_ln117_570_fu_1248_p2 = (or_ln117_568_fu_1221_p2 | and_ln102_779_fu_1047_p2);

assign or_ln117_571_fu_1262_p2 = (or_ln117_570_fu_1248_p2 | and_ln102_800_fu_1109_p2);

assign or_ln117_572_fu_1276_p2 = (or_ln117_568_fu_1221_p2 | and_ln102_773_fu_1011_p2);

assign or_ln117_573_fu_1290_p2 = (or_ln117_572_fu_1276_p2 | and_ln102_801_fu_1115_p2);

assign or_ln117_574_fu_1304_p2 = (or_ln117_572_fu_1276_p2 | and_ln102_780_fu_1057_p2);

assign or_ln117_575_fu_1318_p2 = (or_ln117_574_fu_1304_p2 | and_ln102_803_fu_1125_p2);

assign or_ln117_fu_760_p2 = (and_ln104_115_fu_676_p2 | and_ln102_781_fu_694_p2);

assign select_ln117_607_fu_802_p3 = ((or_ln117_549_fu_782_p2[0:0] == 1'b1) ? select_ln117_fu_788_p3 : 2'd3);

assign select_ln117_608_fu_820_p3 = ((or_ln117_550_fu_796_p2[0:0] == 1'b1) ? zext_ln117_67_fu_810_p1 : 3'd4);

assign select_ln117_609_fu_834_p3 = ((or_ln117_551_fu_814_p2[0:0] == 1'b1) ? select_ln117_608_fu_820_p3 : 3'd5);

assign select_ln117_610_fu_848_p3 = ((or_ln117_552_fu_828_p2[0:0] == 1'b1) ? select_ln117_609_fu_834_p3 : 3'd6);

assign select_ln117_611_fu_862_p3 = ((or_ln117_553_fu_842_p2[0:0] == 1'b1) ? select_ln117_610_fu_848_p3 : 3'd7);

assign select_ln117_612_fu_880_p3 = ((or_ln117_554_fu_856_p2[0:0] == 1'b1) ? zext_ln117_68_fu_870_p1 : 4'd8);

assign select_ln117_613_fu_894_p3 = ((or_ln117_555_fu_874_p2[0:0] == 1'b1) ? select_ln117_612_fu_880_p3 : 4'd9);

assign select_ln117_614_fu_908_p3 = ((or_ln117_556_fu_888_p2[0:0] == 1'b1) ? select_ln117_613_fu_894_p3 : 4'd10);

assign select_ln117_615_fu_922_p3 = ((or_ln117_557_fu_902_p2[0:0] == 1'b1) ? select_ln117_614_fu_908_p3 : 4'd11);

assign select_ln117_616_fu_936_p3 = ((or_ln117_558_fu_916_p2[0:0] == 1'b1) ? select_ln117_615_fu_922_p3 : 4'd12);

assign select_ln117_617_fu_950_p3 = ((or_ln117_559_fu_930_p2[0:0] == 1'b1) ? select_ln117_616_fu_936_p3 : 4'd13);

assign select_ln117_618_fu_958_p3 = ((or_ln117_560_fu_944_p2[0:0] == 1'b1) ? select_ln117_617_fu_950_p3 : 4'd14);

assign select_ln117_619_fu_966_p3 = ((icmp_ln86_fu_402_p2[0:0] == 1'b1) ? select_ln117_618_fu_958_p3 : 4'd15);

assign select_ln117_620_fu_1144_p3 = ((or_ln117_561_fu_1131_p2[0:0] == 1'b1) ? zext_ln117_69_fu_1136_p1 : 5'd16);

assign select_ln117_621_fu_1158_p3 = ((or_ln117_562_fu_1139_p2[0:0] == 1'b1) ? select_ln117_620_fu_1144_p3 : 5'd17);

assign select_ln117_622_fu_1171_p3 = ((or_ln117_563_fu_1152_p2[0:0] == 1'b1) ? select_ln117_621_fu_1158_p3 : 5'd18);

assign select_ln117_623_fu_1185_p3 = ((or_ln117_564_fu_1166_p2[0:0] == 1'b1) ? select_ln117_622_fu_1171_p3 : 5'd19);

assign select_ln117_624_fu_1199_p3 = ((or_ln117_565_fu_1179_p2[0:0] == 1'b1) ? select_ln117_623_fu_1185_p3 : 5'd20);

assign select_ln117_625_fu_1213_p3 = ((or_ln117_566_fu_1193_p2[0:0] == 1'b1) ? select_ln117_624_fu_1199_p3 : 5'd21);

assign select_ln117_626_fu_1226_p3 = ((or_ln117_567_fu_1207_p2[0:0] == 1'b1) ? select_ln117_625_fu_1213_p3 : 5'd22);

assign select_ln117_627_fu_1240_p3 = ((or_ln117_568_fu_1221_p2[0:0] == 1'b1) ? select_ln117_626_fu_1226_p3 : 5'd23);

assign select_ln117_628_fu_1254_p3 = ((or_ln117_569_fu_1234_p2[0:0] == 1'b1) ? select_ln117_627_fu_1240_p3 : 5'd24);

assign select_ln117_629_fu_1268_p3 = ((or_ln117_570_fu_1248_p2[0:0] == 1'b1) ? select_ln117_628_fu_1254_p3 : 5'd25);

assign select_ln117_630_fu_1282_p3 = ((or_ln117_571_fu_1262_p2[0:0] == 1'b1) ? select_ln117_629_fu_1268_p3 : 5'd26);

assign select_ln117_631_fu_1296_p3 = ((or_ln117_572_fu_1276_p2[0:0] == 1'b1) ? select_ln117_630_fu_1282_p3 : 5'd27);

assign select_ln117_632_fu_1310_p3 = ((or_ln117_573_fu_1290_p2[0:0] == 1'b1) ? select_ln117_631_fu_1296_p3 : 5'd28);

assign select_ln117_633_fu_1324_p3 = ((or_ln117_574_fu_1304_p2[0:0] == 1'b1) ? select_ln117_632_fu_1310_p3 : 5'd29);

assign select_ln117_fu_788_p3 = ((or_ln117_fu_760_p2[0:0] == 1'b1) ? zext_ln117_fu_778_p1 : 2'd2);

assign tmp_8_fu_546_p4 = {{x_17_val[17:2]}};

assign tmp_fu_392_p4 = {{x_36_val[17:2]}};

assign xor_ln104_295_fu_598_p2 = (icmp_ln86_625_fu_408_p2 ^ 1'd1);

assign xor_ln104_296_fu_984_p2 = (icmp_ln86_626_reg_1481 ^ 1'd1);

assign xor_ln104_297_fu_616_p2 = (icmp_ln86_627_fu_420_p2 ^ 1'd1);

assign xor_ln104_298_fu_634_p2 = (icmp_ln86_628_fu_426_p2 ^ 1'd1);

assign xor_ln104_299_fu_1000_p2 = (icmp_ln86_629_reg_1487 ^ 1'd1);

assign xor_ln104_300_fu_1016_p2 = (icmp_ln86_630_reg_1493 ^ 1'd1);

assign xor_ln104_301_fu_652_p2 = (icmp_ln86_631_fu_444_p2 ^ 1'd1);

assign xor_ln104_302_fu_664_p2 = (icmp_ln86_632_fu_450_p2 ^ 1'd1);

assign xor_ln104_303_fu_670_p2 = (icmp_ln86_633_fu_456_p2 ^ 1'd1);

assign xor_ln104_304_fu_688_p2 = (icmp_ln86_634_fu_462_p2 ^ 1'd1);

assign xor_ln104_305_fu_1032_p2 = (icmp_ln86_635_reg_1499 ^ 1'd1);

assign xor_ln104_306_fu_1042_p2 = (icmp_ln86_636_reg_1505 ^ 1'd1);

assign xor_ln104_307_fu_1052_p2 = (icmp_ln86_637_reg_1511 ^ 1'd1);

assign xor_ln104_308_fu_1062_p2 = (icmp_ln86_638_reg_1517 ^ 1'd1);

assign xor_ln104_fu_974_p2 = (icmp_ln86_reg_1472 ^ 1'd1);

assign xor_ln117_fu_766_p2 = (1'd1 ^ and_ln102_771_fu_628_p2);

assign zext_ln117_67_fu_810_p1 = select_ln117_607_fu_802_p3;

assign zext_ln117_68_fu_870_p1 = select_ln117_611_fu_862_p3;

assign zext_ln117_69_fu_1136_p1 = select_ln117_619_reg_1563;

assign zext_ln117_fu_778_p1 = or_ln117_548_fu_772_p2;

endmodule //my_prj_decision_function_77
