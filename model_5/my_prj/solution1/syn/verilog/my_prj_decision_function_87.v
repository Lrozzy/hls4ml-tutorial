// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_87 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_3_val,
        x_7_val,
        x_10_val,
        x_14_val,
        x_15_val,
        x_16_val,
        x_18_val,
        x_19_val,
        x_25_val,
        x_29_val,
        x_43_val,
        x_47_val,
        x_49_val,
        x_50_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_3_val;
input  [17:0] x_7_val;
input  [17:0] x_10_val;
input  [17:0] x_14_val;
input  [17:0] x_15_val;
input  [17:0] x_16_val;
input  [17:0] x_18_val;
input  [17:0] x_19_val;
input  [17:0] x_25_val;
input  [17:0] x_29_val;
input  [17:0] x_43_val;
input  [17:0] x_47_val;
input  [17:0] x_49_val;
input  [17:0] x_50_val;
input  [17:0] x_52_val;
output  [12:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_368_p2;
reg   [0:0] icmp_ln86_reg_1448;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_332_fu_380_p2;
reg   [0:0] icmp_ln86_332_reg_1457;
wire   [0:0] icmp_ln86_335_fu_398_p2;
reg   [0:0] icmp_ln86_335_reg_1463;
wire   [0:0] icmp_ln86_336_fu_404_p2;
reg   [0:0] icmp_ln86_336_reg_1469;
wire   [0:0] icmp_ln86_341_fu_444_p2;
reg   [0:0] icmp_ln86_341_reg_1475;
wire   [0:0] icmp_ln86_342_fu_450_p2;
reg   [0:0] icmp_ln86_342_reg_1482;
wire   [0:0] icmp_ln86_343_fu_456_p2;
reg   [0:0] icmp_ln86_343_reg_1488;
wire   [0:0] icmp_ln86_344_fu_462_p2;
reg   [0:0] icmp_ln86_344_reg_1494;
wire   [0:0] icmp_ln86_353_fu_526_p2;
reg   [0:0] icmp_ln86_353_reg_1500;
wire   [0:0] icmp_ln86_354_fu_532_p2;
reg   [0:0] icmp_ln86_354_reg_1505;
wire   [0:0] icmp_ln86_355_fu_538_p2;
reg   [0:0] icmp_ln86_355_reg_1510;
wire   [0:0] icmp_ln86_356_fu_544_p2;
reg   [0:0] icmp_ln86_356_reg_1515;
wire   [0:0] icmp_ln86_357_fu_550_p2;
reg   [0:0] icmp_ln86_357_reg_1520;
wire   [0:0] icmp_ln86_358_fu_556_p2;
reg   [0:0] icmp_ln86_358_reg_1525;
wire   [0:0] icmp_ln86_359_fu_562_p2;
reg   [0:0] icmp_ln86_359_reg_1530;
wire   [4:0] select_ln117_334_fu_942_p3;
reg   [4:0] select_ln117_334_reg_1535;
wire    ap_block_pp0_stage0;
wire   [14:0] tmp_fu_434_p4;
wire   [15:0] tmp_5_fu_504_p4;
wire   [0:0] icmp_ln86_331_fu_374_p2;
wire   [0:0] xor_ln104_156_fu_574_p2;
wire   [0:0] icmp_ln86_333_fu_386_p2;
wire   [0:0] and_ln102_fu_568_p2;
wire   [0:0] xor_ln104_158_fu_592_p2;
wire   [0:0] icmp_ln86_334_fu_392_p2;
wire   [0:0] and_ln104_fu_580_p2;
wire   [0:0] xor_ln104_159_fu_610_p2;
wire   [0:0] icmp_ln86_337_fu_410_p2;
wire   [0:0] and_ln102_407_fu_586_p2;
wire   [0:0] icmp_ln86_338_fu_416_p2;
wire   [0:0] and_ln104_60_fu_598_p2;
wire   [0:0] icmp_ln86_339_fu_422_p2;
wire   [0:0] and_ln102_408_fu_604_p2;
wire   [0:0] icmp_ln86_340_fu_428_p2;
wire   [0:0] and_ln104_61_fu_616_p2;
wire   [0:0] icmp_ln86_345_fu_468_p2;
wire   [0:0] and_ln102_411_fu_622_p2;
wire   [0:0] icmp_ln86_346_fu_474_p2;
wire   [0:0] xor_ln104_162_fu_628_p2;
wire   [0:0] and_ln102_420_fu_676_p2;
wire   [0:0] icmp_ln86_347_fu_480_p2;
wire   [0:0] and_ln102_412_fu_634_p2;
wire   [0:0] icmp_ln86_348_fu_486_p2;
wire   [0:0] xor_ln104_163_fu_640_p2;
wire   [0:0] and_ln102_423_fu_694_p2;
wire   [0:0] icmp_ln86_349_fu_492_p2;
wire   [0:0] and_ln102_413_fu_646_p2;
wire   [0:0] icmp_ln86_350_fu_498_p2;
wire   [0:0] xor_ln104_164_fu_652_p2;
wire   [0:0] and_ln102_426_fu_712_p2;
wire   [0:0] icmp_ln86_351_fu_514_p2;
wire   [0:0] and_ln102_414_fu_658_p2;
wire   [0:0] icmp_ln86_352_fu_520_p2;
wire   [0:0] xor_ln104_165_fu_664_p2;
wire   [0:0] and_ln102_429_fu_730_p2;
wire   [0:0] and_ln102_419_fu_670_p2;
wire   [0:0] xor_ln117_fu_742_p2;
wire   [0:0] and_ln102_421_fu_682_p2;
wire   [1:0] zext_ln117_fu_748_p1;
wire   [0:0] or_ln117_fu_752_p2;
wire   [1:0] select_ln117_fu_758_p3;
wire   [1:0] select_ln117_321_fu_766_p3;
wire   [0:0] and_ln102_422_fu_688_p2;
wire   [2:0] zext_ln117_37_fu_774_p1;
wire   [0:0] or_ln117_291_fu_778_p2;
wire   [2:0] select_ln117_322_fu_784_p3;
wire   [0:0] or_ln117_292_fu_792_p2;
wire   [0:0] and_ln102_424_fu_700_p2;
wire   [2:0] select_ln117_323_fu_798_p3;
wire   [0:0] or_ln117_293_fu_806_p2;
wire   [2:0] select_ln117_324_fu_812_p3;
wire   [2:0] select_ln117_325_fu_820_p3;
wire   [0:0] and_ln102_425_fu_706_p2;
wire   [3:0] zext_ln117_38_fu_828_p1;
wire   [0:0] or_ln117_294_fu_832_p2;
wire   [3:0] select_ln117_326_fu_838_p3;
wire   [0:0] or_ln117_295_fu_846_p2;
wire   [0:0] and_ln102_427_fu_718_p2;
wire   [3:0] select_ln117_327_fu_852_p3;
wire   [0:0] or_ln117_296_fu_860_p2;
wire   [3:0] select_ln117_328_fu_866_p3;
wire   [0:0] or_ln117_297_fu_874_p2;
wire   [0:0] and_ln102_428_fu_724_p2;
wire   [3:0] select_ln117_329_fu_880_p3;
wire   [0:0] or_ln117_298_fu_888_p2;
wire   [3:0] select_ln117_330_fu_894_p3;
wire   [0:0] or_ln117_299_fu_902_p2;
wire   [0:0] and_ln102_430_fu_736_p2;
wire   [3:0] select_ln117_331_fu_908_p3;
wire   [0:0] or_ln117_300_fu_916_p2;
wire   [3:0] select_ln117_332_fu_922_p3;
wire   [3:0] select_ln117_333_fu_930_p3;
wire   [4:0] zext_ln117_39_fu_938_p1;
wire   [0:0] xor_ln104_fu_950_p2;
wire   [0:0] xor_ln104_157_fu_960_p2;
wire   [0:0] and_ln102_406_fu_955_p2;
wire   [0:0] xor_ln104_160_fu_976_p2;
wire   [0:0] and_ln104_59_fu_965_p2;
wire   [0:0] xor_ln104_161_fu_992_p2;
wire   [0:0] and_ln102_409_fu_971_p2;
wire   [0:0] and_ln104_62_fu_981_p2;
wire   [0:0] and_ln102_410_fu_987_p2;
wire   [0:0] and_ln104_63_fu_997_p2;
wire   [0:0] and_ln102_415_fu_1003_p2;
wire   [0:0] xor_ln104_166_fu_1008_p2;
wire   [0:0] and_ln102_432_fu_1048_p2;
wire   [0:0] and_ln102_416_fu_1013_p2;
wire   [0:0] xor_ln104_167_fu_1018_p2;
wire   [0:0] and_ln102_435_fu_1064_p2;
wire   [0:0] and_ln102_417_fu_1023_p2;
wire   [0:0] xor_ln104_168_fu_1028_p2;
wire   [0:0] and_ln102_438_fu_1080_p2;
wire   [0:0] and_ln102_418_fu_1033_p2;
wire   [0:0] xor_ln104_169_fu_1038_p2;
wire   [0:0] and_ln102_441_fu_1096_p2;
wire   [0:0] and_ln102_431_fu_1043_p2;
wire   [0:0] or_ln117_301_fu_1107_p2;
wire   [0:0] or_ln117_302_fu_1112_p2;
wire   [0:0] and_ln102_433_fu_1053_p2;
wire   [4:0] select_ln117_335_fu_1117_p3;
wire   [0:0] or_ln117_303_fu_1124_p2;
wire   [4:0] select_ln117_336_fu_1130_p3;
wire   [0:0] or_ln117_304_fu_1138_p2;
wire   [0:0] and_ln102_434_fu_1059_p2;
wire   [4:0] select_ln117_337_fu_1143_p3;
wire   [0:0] or_ln117_305_fu_1151_p2;
wire   [4:0] select_ln117_338_fu_1157_p3;
wire   [0:0] or_ln117_306_fu_1165_p2;
wire   [0:0] and_ln102_436_fu_1069_p2;
wire   [4:0] select_ln117_339_fu_1171_p3;
wire   [0:0] or_ln117_307_fu_1179_p2;
wire   [4:0] select_ln117_340_fu_1185_p3;
wire   [0:0] or_ln117_308_fu_1193_p2;
wire   [0:0] and_ln102_437_fu_1075_p2;
wire   [4:0] select_ln117_341_fu_1198_p3;
wire   [0:0] or_ln117_309_fu_1206_p2;
wire   [4:0] select_ln117_342_fu_1212_p3;
wire   [0:0] or_ln117_310_fu_1220_p2;
wire   [0:0] and_ln102_439_fu_1085_p2;
wire   [4:0] select_ln117_343_fu_1226_p3;
wire   [0:0] or_ln117_311_fu_1234_p2;
wire   [4:0] select_ln117_344_fu_1240_p3;
wire   [0:0] or_ln117_312_fu_1248_p2;
wire   [0:0] and_ln102_440_fu_1091_p2;
wire   [4:0] select_ln117_345_fu_1254_p3;
wire   [0:0] or_ln117_313_fu_1262_p2;
wire   [4:0] select_ln117_346_fu_1268_p3;
wire   [0:0] or_ln117_314_fu_1276_p2;
wire   [0:0] and_ln102_442_fu_1101_p2;
wire   [4:0] select_ln117_347_fu_1282_p3;
wire   [0:0] or_ln117_315_fu_1290_p2;
wire   [4:0] select_ln117_348_fu_1296_p3;
wire   [12:0] agg_result_fu_1312_p65;
wire   [4:0] agg_result_fu_1312_p66;
wire   [12:0] agg_result_fu_1312_p67;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1312_p1;
wire   [4:0] agg_result_fu_1312_p3;
wire   [4:0] agg_result_fu_1312_p5;
wire   [4:0] agg_result_fu_1312_p7;
wire   [4:0] agg_result_fu_1312_p9;
wire   [4:0] agg_result_fu_1312_p11;
wire   [4:0] agg_result_fu_1312_p13;
wire   [4:0] agg_result_fu_1312_p15;
wire   [4:0] agg_result_fu_1312_p17;
wire   [4:0] agg_result_fu_1312_p19;
wire   [4:0] agg_result_fu_1312_p21;
wire   [4:0] agg_result_fu_1312_p23;
wire   [4:0] agg_result_fu_1312_p25;
wire   [4:0] agg_result_fu_1312_p27;
wire   [4:0] agg_result_fu_1312_p29;
wire   [4:0] agg_result_fu_1312_p31;
wire  signed [4:0] agg_result_fu_1312_p33;
wire  signed [4:0] agg_result_fu_1312_p35;
wire  signed [4:0] agg_result_fu_1312_p37;
wire  signed [4:0] agg_result_fu_1312_p39;
wire  signed [4:0] agg_result_fu_1312_p41;
wire  signed [4:0] agg_result_fu_1312_p43;
wire  signed [4:0] agg_result_fu_1312_p45;
wire  signed [4:0] agg_result_fu_1312_p47;
wire  signed [4:0] agg_result_fu_1312_p49;
wire  signed [4:0] agg_result_fu_1312_p51;
wire  signed [4:0] agg_result_fu_1312_p53;
wire  signed [4:0] agg_result_fu_1312_p55;
wire  signed [4:0] agg_result_fu_1312_p57;
wire  signed [4:0] agg_result_fu_1312_p59;
wire  signed [4:0] agg_result_fu_1312_p61;
wire  signed [4:0] agg_result_fu_1312_p63;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_65_5_13_1_1_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 13 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 13 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 13 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 13 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 13 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 13 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 13 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 13 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 13 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 13 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 13 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 13 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 13 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 13 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 13 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 13 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 13 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 13 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 13 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 13 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 13 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 13 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 13 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 13 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 13 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 13 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 13 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 13 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 13 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 13 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 13 ),
    .CASE31( 5'h1F ),
    .din31_WIDTH( 13 ),
    .def_WIDTH( 13 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 13 ))
sparsemux_65_5_13_1_1_x_U35(
    .din0(13'd7889),
    .din1(13'd767),
    .din2(13'd2312),
    .din3(13'd581),
    .din4(13'd2203),
    .din5(13'd440),
    .din6(13'd597),
    .din7(13'd7696),
    .din8(13'd7849),
    .din9(13'd487),
    .din10(13'd949),
    .din11(13'd8152),
    .din12(13'd7839),
    .din13(13'd8127),
    .din14(13'd7704),
    .din15(13'd7593),
    .din16(13'd294),
    .din17(13'd7803),
    .din18(13'd7728),
    .din19(13'd7596),
    .din20(13'd8141),
    .din21(13'd7690),
    .din22(13'd1213),
    .din23(13'd153),
    .din24(13'd7688),
    .din25(13'd7969),
    .din26(13'd7997),
    .din27(13'd7593),
    .din28(13'd7646),
    .din29(13'd7554),
    .din30(13'd115),
    .din31(13'd7575),
    .def(agg_result_fu_1312_p65),
    .sel(agg_result_fu_1312_p66),
    .dout(agg_result_fu_1312_p67)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_332_reg_1457 <= icmp_ln86_332_fu_380_p2;
        icmp_ln86_335_reg_1463 <= icmp_ln86_335_fu_398_p2;
        icmp_ln86_336_reg_1469 <= icmp_ln86_336_fu_404_p2;
        icmp_ln86_341_reg_1475 <= icmp_ln86_341_fu_444_p2;
        icmp_ln86_342_reg_1482 <= icmp_ln86_342_fu_450_p2;
        icmp_ln86_343_reg_1488 <= icmp_ln86_343_fu_456_p2;
        icmp_ln86_344_reg_1494 <= icmp_ln86_344_fu_462_p2;
        icmp_ln86_353_reg_1500 <= icmp_ln86_353_fu_526_p2;
        icmp_ln86_354_reg_1505 <= icmp_ln86_354_fu_532_p2;
        icmp_ln86_355_reg_1510 <= icmp_ln86_355_fu_538_p2;
        icmp_ln86_356_reg_1515 <= icmp_ln86_356_fu_544_p2;
        icmp_ln86_357_reg_1520 <= icmp_ln86_357_fu_550_p2;
        icmp_ln86_358_reg_1525 <= icmp_ln86_358_fu_556_p2;
        icmp_ln86_359_reg_1530 <= icmp_ln86_359_fu_562_p2;
        icmp_ln86_reg_1448 <= icmp_ln86_fu_368_p2;
        select_ln117_334_reg_1535 <= select_ln117_334_fu_942_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1312_p65 = 'bx;

assign agg_result_fu_1312_p66 = ((or_ln117_315_fu_1290_p2[0:0] == 1'b1) ? select_ln117_348_fu_1296_p3 : 5'd31);

assign and_ln102_406_fu_955_p2 = (xor_ln104_fu_950_p2 & icmp_ln86_332_reg_1457);

assign and_ln102_407_fu_586_p2 = (icmp_ln86_333_fu_386_p2 & and_ln102_fu_568_p2);

assign and_ln102_408_fu_604_p2 = (icmp_ln86_334_fu_392_p2 & and_ln104_fu_580_p2);

assign and_ln102_409_fu_971_p2 = (icmp_ln86_335_reg_1463 & and_ln102_406_fu_955_p2);

assign and_ln102_410_fu_987_p2 = (icmp_ln86_336_reg_1469 & and_ln104_59_fu_965_p2);

assign and_ln102_411_fu_622_p2 = (icmp_ln86_337_fu_410_p2 & and_ln102_407_fu_586_p2);

assign and_ln102_412_fu_634_p2 = (icmp_ln86_338_fu_416_p2 & and_ln104_60_fu_598_p2);

assign and_ln102_413_fu_646_p2 = (icmp_ln86_339_fu_422_p2 & and_ln102_408_fu_604_p2);

assign and_ln102_414_fu_658_p2 = (icmp_ln86_340_fu_428_p2 & and_ln104_61_fu_616_p2);

assign and_ln102_415_fu_1003_p2 = (icmp_ln86_341_reg_1475 & and_ln102_409_fu_971_p2);

assign and_ln102_416_fu_1013_p2 = (icmp_ln86_342_reg_1482 & and_ln104_62_fu_981_p2);

assign and_ln102_417_fu_1023_p2 = (icmp_ln86_343_reg_1488 & and_ln102_410_fu_987_p2);

assign and_ln102_418_fu_1033_p2 = (icmp_ln86_344_reg_1494 & and_ln104_63_fu_997_p2);

assign and_ln102_419_fu_670_p2 = (icmp_ln86_345_fu_468_p2 & and_ln102_411_fu_622_p2);

assign and_ln102_420_fu_676_p2 = (xor_ln104_162_fu_628_p2 & icmp_ln86_346_fu_474_p2);

assign and_ln102_421_fu_682_p2 = (and_ln102_420_fu_676_p2 & and_ln102_407_fu_586_p2);

assign and_ln102_422_fu_688_p2 = (icmp_ln86_347_fu_480_p2 & and_ln102_412_fu_634_p2);

assign and_ln102_423_fu_694_p2 = (xor_ln104_163_fu_640_p2 & icmp_ln86_348_fu_486_p2);

assign and_ln102_424_fu_700_p2 = (and_ln104_60_fu_598_p2 & and_ln102_423_fu_694_p2);

assign and_ln102_425_fu_706_p2 = (icmp_ln86_349_fu_492_p2 & and_ln102_413_fu_646_p2);

assign and_ln102_426_fu_712_p2 = (xor_ln104_164_fu_652_p2 & icmp_ln86_350_fu_498_p2);

assign and_ln102_427_fu_718_p2 = (and_ln102_426_fu_712_p2 & and_ln102_408_fu_604_p2);

assign and_ln102_428_fu_724_p2 = (icmp_ln86_351_fu_514_p2 & and_ln102_414_fu_658_p2);

assign and_ln102_429_fu_730_p2 = (xor_ln104_165_fu_664_p2 & icmp_ln86_352_fu_520_p2);

assign and_ln102_430_fu_736_p2 = (and_ln104_61_fu_616_p2 & and_ln102_429_fu_730_p2);

assign and_ln102_431_fu_1043_p2 = (icmp_ln86_353_reg_1500 & and_ln102_415_fu_1003_p2);

assign and_ln102_432_fu_1048_p2 = (xor_ln104_166_fu_1008_p2 & icmp_ln86_354_reg_1505);

assign and_ln102_433_fu_1053_p2 = (and_ln102_432_fu_1048_p2 & and_ln102_409_fu_971_p2);

assign and_ln102_434_fu_1059_p2 = (icmp_ln86_355_reg_1510 & and_ln102_416_fu_1013_p2);

assign and_ln102_435_fu_1064_p2 = (xor_ln104_167_fu_1018_p2 & icmp_ln86_356_reg_1515);

assign and_ln102_436_fu_1069_p2 = (and_ln104_62_fu_981_p2 & and_ln102_435_fu_1064_p2);

assign and_ln102_437_fu_1075_p2 = (icmp_ln86_357_reg_1520 & and_ln102_417_fu_1023_p2);

assign and_ln102_438_fu_1080_p2 = (xor_ln104_168_fu_1028_p2 & icmp_ln86_358_reg_1525);

assign and_ln102_439_fu_1085_p2 = (and_ln102_438_fu_1080_p2 & and_ln102_410_fu_987_p2);

assign and_ln102_440_fu_1091_p2 = (icmp_ln86_341_reg_1475 & and_ln102_418_fu_1033_p2);

assign and_ln102_441_fu_1096_p2 = (xor_ln104_169_fu_1038_p2 & icmp_ln86_359_reg_1530);

assign and_ln102_442_fu_1101_p2 = (and_ln104_63_fu_997_p2 & and_ln102_441_fu_1096_p2);

assign and_ln102_fu_568_p2 = (icmp_ln86_fu_368_p2 & icmp_ln86_331_fu_374_p2);

assign and_ln104_59_fu_965_p2 = (xor_ln104_fu_950_p2 & xor_ln104_157_fu_960_p2);

assign and_ln104_60_fu_598_p2 = (xor_ln104_158_fu_592_p2 & and_ln102_fu_568_p2);

assign and_ln104_61_fu_616_p2 = (xor_ln104_159_fu_610_p2 & and_ln104_fu_580_p2);

assign and_ln104_62_fu_981_p2 = (xor_ln104_160_fu_976_p2 & and_ln102_406_fu_955_p2);

assign and_ln104_63_fu_997_p2 = (xor_ln104_161_fu_992_p2 & and_ln104_59_fu_965_p2);

assign and_ln104_fu_580_p2 = (xor_ln104_156_fu_574_p2 & icmp_ln86_fu_368_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1312_p67;

assign icmp_ln86_331_fu_374_p2 = (($signed(x_19_val) < $signed(18'd3019)) ? 1'b1 : 1'b0);

assign icmp_ln86_332_fu_380_p2 = (($signed(x_47_val) < $signed(18'd88951)) ? 1'b1 : 1'b0);

assign icmp_ln86_333_fu_386_p2 = (($signed(x_50_val) < $signed(18'd87944)) ? 1'b1 : 1'b0);

assign icmp_ln86_334_fu_392_p2 = (($signed(x_19_val) < $signed(18'd5330)) ? 1'b1 : 1'b0);

assign icmp_ln86_335_fu_398_p2 = (($signed(x_1_val) < $signed(18'd235951)) ? 1'b1 : 1'b0);

assign icmp_ln86_336_fu_404_p2 = (($signed(x_29_val) < $signed(18'd7585)) ? 1'b1 : 1'b0);

assign icmp_ln86_337_fu_410_p2 = (($signed(x_50_val) < $signed(18'd74832)) ? 1'b1 : 1'b0);

assign icmp_ln86_338_fu_416_p2 = (($signed(x_1_val) < $signed(18'd68855)) ? 1'b1 : 1'b0);

assign icmp_ln86_339_fu_422_p2 = (($signed(x_50_val) < $signed(18'd72563)) ? 1'b1 : 1'b0);

assign icmp_ln86_340_fu_428_p2 = (($signed(x_25_val) < $signed(18'd290)) ? 1'b1 : 1'b0);

assign icmp_ln86_341_fu_444_p2 = (($signed(tmp_fu_434_p4) < $signed(15'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_342_fu_450_p2 = (($signed(x_49_val) < $signed(18'd77810)) ? 1'b1 : 1'b0);

assign icmp_ln86_343_fu_456_p2 = (($signed(x_43_val) < $signed(18'd62)) ? 1'b1 : 1'b0);

assign icmp_ln86_344_fu_462_p2 = (($signed(x_1_val) < $signed(18'd23281)) ? 1'b1 : 1'b0);

assign icmp_ln86_345_fu_468_p2 = (($signed(x_50_val) < $signed(18'd69307)) ? 1'b1 : 1'b0);

assign icmp_ln86_346_fu_474_p2 = (($signed(x_15_val) < $signed(18'd7)) ? 1'b1 : 1'b0);

assign icmp_ln86_347_fu_480_p2 = (($signed(x_7_val) < $signed(18'd6862)) ? 1'b1 : 1'b0);

assign icmp_ln86_348_fu_486_p2 = (($signed(x_3_val) < $signed(18'd90408)) ? 1'b1 : 1'b0);

assign icmp_ln86_349_fu_492_p2 = (($signed(x_18_val) < $signed(18'd4528)) ? 1'b1 : 1'b0);

assign icmp_ln86_350_fu_498_p2 = (($signed(x_52_val) < $signed(18'd64001)) ? 1'b1 : 1'b0);

assign icmp_ln86_351_fu_514_p2 = (($signed(tmp_5_fu_504_p4) < $signed(16'd1)) ? 1'b1 : 1'b0);

assign icmp_ln86_352_fu_520_p2 = (($signed(x_1_val) < $signed(18'd65130)) ? 1'b1 : 1'b0);

assign icmp_ln86_353_fu_526_p2 = (($signed(x_50_val) < $signed(18'd83919)) ? 1'b1 : 1'b0);

assign icmp_ln86_354_fu_532_p2 = (($signed(x_16_val) < $signed(18'd57)) ? 1'b1 : 1'b0);

assign icmp_ln86_355_fu_538_p2 = (($signed(x_50_val) < $signed(18'd87152)) ? 1'b1 : 1'b0);

assign icmp_ln86_356_fu_544_p2 = (($signed(x_50_val) < $signed(18'd85708)) ? 1'b1 : 1'b0);

assign icmp_ln86_357_fu_550_p2 = (($signed(x_14_val) < $signed(18'd50)) ? 1'b1 : 1'b0);

assign icmp_ln86_358_fu_556_p2 = (($signed(x_50_val) < $signed(18'd85407)) ? 1'b1 : 1'b0);

assign icmp_ln86_359_fu_562_p2 = (($signed(x_10_val) < $signed(18'd163)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_368_p2 = (($signed(x_7_val) < $signed(18'd7208)) ? 1'b1 : 1'b0);

assign or_ln117_291_fu_778_p2 = (and_ln102_422_fu_688_p2 | and_ln102_407_fu_586_p2);

assign or_ln117_292_fu_792_p2 = (and_ln102_412_fu_634_p2 | and_ln102_407_fu_586_p2);

assign or_ln117_293_fu_806_p2 = (or_ln117_292_fu_792_p2 | and_ln102_424_fu_700_p2);

assign or_ln117_294_fu_832_p2 = (and_ln102_fu_568_p2 | and_ln102_425_fu_706_p2);

assign or_ln117_295_fu_846_p2 = (and_ln102_fu_568_p2 | and_ln102_413_fu_646_p2);

assign or_ln117_296_fu_860_p2 = (or_ln117_295_fu_846_p2 | and_ln102_427_fu_718_p2);

assign or_ln117_297_fu_874_p2 = (and_ln102_fu_568_p2 | and_ln102_408_fu_604_p2);

assign or_ln117_298_fu_888_p2 = (or_ln117_297_fu_874_p2 | and_ln102_428_fu_724_p2);

assign or_ln117_299_fu_902_p2 = (or_ln117_297_fu_874_p2 | and_ln102_414_fu_658_p2);

assign or_ln117_300_fu_916_p2 = (or_ln117_299_fu_902_p2 | and_ln102_430_fu_736_p2);

assign or_ln117_301_fu_1107_p2 = (icmp_ln86_reg_1448 | and_ln102_431_fu_1043_p2);

assign or_ln117_302_fu_1112_p2 = (icmp_ln86_reg_1448 | and_ln102_415_fu_1003_p2);

assign or_ln117_303_fu_1124_p2 = (or_ln117_302_fu_1112_p2 | and_ln102_433_fu_1053_p2);

assign or_ln117_304_fu_1138_p2 = (icmp_ln86_reg_1448 | and_ln102_409_fu_971_p2);

assign or_ln117_305_fu_1151_p2 = (or_ln117_304_fu_1138_p2 | and_ln102_434_fu_1059_p2);

assign or_ln117_306_fu_1165_p2 = (or_ln117_304_fu_1138_p2 | and_ln102_416_fu_1013_p2);

assign or_ln117_307_fu_1179_p2 = (or_ln117_306_fu_1165_p2 | and_ln102_436_fu_1069_p2);

assign or_ln117_308_fu_1193_p2 = (icmp_ln86_reg_1448 | and_ln102_406_fu_955_p2);

assign or_ln117_309_fu_1206_p2 = (or_ln117_308_fu_1193_p2 | and_ln102_437_fu_1075_p2);

assign or_ln117_310_fu_1220_p2 = (or_ln117_308_fu_1193_p2 | and_ln102_417_fu_1023_p2);

assign or_ln117_311_fu_1234_p2 = (or_ln117_310_fu_1220_p2 | and_ln102_439_fu_1085_p2);

assign or_ln117_312_fu_1248_p2 = (or_ln117_308_fu_1193_p2 | and_ln102_410_fu_987_p2);

assign or_ln117_313_fu_1262_p2 = (or_ln117_312_fu_1248_p2 | and_ln102_440_fu_1091_p2);

assign or_ln117_314_fu_1276_p2 = (or_ln117_312_fu_1248_p2 | and_ln102_418_fu_1033_p2);

assign or_ln117_315_fu_1290_p2 = (or_ln117_314_fu_1276_p2 | and_ln102_442_fu_1101_p2);

assign or_ln117_fu_752_p2 = (and_ln102_421_fu_682_p2 | and_ln102_411_fu_622_p2);

assign select_ln117_321_fu_766_p3 = ((or_ln117_fu_752_p2[0:0] == 1'b1) ? select_ln117_fu_758_p3 : 2'd3);

assign select_ln117_322_fu_784_p3 = ((and_ln102_407_fu_586_p2[0:0] == 1'b1) ? zext_ln117_37_fu_774_p1 : 3'd4);

assign select_ln117_323_fu_798_p3 = ((or_ln117_291_fu_778_p2[0:0] == 1'b1) ? select_ln117_322_fu_784_p3 : 3'd5);

assign select_ln117_324_fu_812_p3 = ((or_ln117_292_fu_792_p2[0:0] == 1'b1) ? select_ln117_323_fu_798_p3 : 3'd6);

assign select_ln117_325_fu_820_p3 = ((or_ln117_293_fu_806_p2[0:0] == 1'b1) ? select_ln117_324_fu_812_p3 : 3'd7);

assign select_ln117_326_fu_838_p3 = ((and_ln102_fu_568_p2[0:0] == 1'b1) ? zext_ln117_38_fu_828_p1 : 4'd8);

assign select_ln117_327_fu_852_p3 = ((or_ln117_294_fu_832_p2[0:0] == 1'b1) ? select_ln117_326_fu_838_p3 : 4'd9);

assign select_ln117_328_fu_866_p3 = ((or_ln117_295_fu_846_p2[0:0] == 1'b1) ? select_ln117_327_fu_852_p3 : 4'd10);

assign select_ln117_329_fu_880_p3 = ((or_ln117_296_fu_860_p2[0:0] == 1'b1) ? select_ln117_328_fu_866_p3 : 4'd11);

assign select_ln117_330_fu_894_p3 = ((or_ln117_297_fu_874_p2[0:0] == 1'b1) ? select_ln117_329_fu_880_p3 : 4'd12);

assign select_ln117_331_fu_908_p3 = ((or_ln117_298_fu_888_p2[0:0] == 1'b1) ? select_ln117_330_fu_894_p3 : 4'd13);

assign select_ln117_332_fu_922_p3 = ((or_ln117_299_fu_902_p2[0:0] == 1'b1) ? select_ln117_331_fu_908_p3 : 4'd14);

assign select_ln117_333_fu_930_p3 = ((or_ln117_300_fu_916_p2[0:0] == 1'b1) ? select_ln117_332_fu_922_p3 : 4'd15);

assign select_ln117_334_fu_942_p3 = ((icmp_ln86_fu_368_p2[0:0] == 1'b1) ? zext_ln117_39_fu_938_p1 : 5'd16);

assign select_ln117_335_fu_1117_p3 = ((or_ln117_301_fu_1107_p2[0:0] == 1'b1) ? select_ln117_334_reg_1535 : 5'd17);

assign select_ln117_336_fu_1130_p3 = ((or_ln117_302_fu_1112_p2[0:0] == 1'b1) ? select_ln117_335_fu_1117_p3 : 5'd18);

assign select_ln117_337_fu_1143_p3 = ((or_ln117_303_fu_1124_p2[0:0] == 1'b1) ? select_ln117_336_fu_1130_p3 : 5'd19);

assign select_ln117_338_fu_1157_p3 = ((or_ln117_304_fu_1138_p2[0:0] == 1'b1) ? select_ln117_337_fu_1143_p3 : 5'd20);

assign select_ln117_339_fu_1171_p3 = ((or_ln117_305_fu_1151_p2[0:0] == 1'b1) ? select_ln117_338_fu_1157_p3 : 5'd21);

assign select_ln117_340_fu_1185_p3 = ((or_ln117_306_fu_1165_p2[0:0] == 1'b1) ? select_ln117_339_fu_1171_p3 : 5'd22);

assign select_ln117_341_fu_1198_p3 = ((or_ln117_307_fu_1179_p2[0:0] == 1'b1) ? select_ln117_340_fu_1185_p3 : 5'd23);

assign select_ln117_342_fu_1212_p3 = ((or_ln117_308_fu_1193_p2[0:0] == 1'b1) ? select_ln117_341_fu_1198_p3 : 5'd24);

assign select_ln117_343_fu_1226_p3 = ((or_ln117_309_fu_1206_p2[0:0] == 1'b1) ? select_ln117_342_fu_1212_p3 : 5'd25);

assign select_ln117_344_fu_1240_p3 = ((or_ln117_310_fu_1220_p2[0:0] == 1'b1) ? select_ln117_343_fu_1226_p3 : 5'd26);

assign select_ln117_345_fu_1254_p3 = ((or_ln117_311_fu_1234_p2[0:0] == 1'b1) ? select_ln117_344_fu_1240_p3 : 5'd27);

assign select_ln117_346_fu_1268_p3 = ((or_ln117_312_fu_1248_p2[0:0] == 1'b1) ? select_ln117_345_fu_1254_p3 : 5'd28);

assign select_ln117_347_fu_1282_p3 = ((or_ln117_313_fu_1262_p2[0:0] == 1'b1) ? select_ln117_346_fu_1268_p3 : 5'd29);

assign select_ln117_348_fu_1296_p3 = ((or_ln117_314_fu_1276_p2[0:0] == 1'b1) ? select_ln117_347_fu_1282_p3 : 5'd30);

assign select_ln117_fu_758_p3 = ((and_ln102_411_fu_622_p2[0:0] == 1'b1) ? zext_ln117_fu_748_p1 : 2'd2);

assign tmp_5_fu_504_p4 = {{x_15_val[17:2]}};

assign tmp_fu_434_p4 = {{x_15_val[17:3]}};

assign xor_ln104_156_fu_574_p2 = (icmp_ln86_331_fu_374_p2 ^ 1'd1);

assign xor_ln104_157_fu_960_p2 = (icmp_ln86_332_reg_1457 ^ 1'd1);

assign xor_ln104_158_fu_592_p2 = (icmp_ln86_333_fu_386_p2 ^ 1'd1);

assign xor_ln104_159_fu_610_p2 = (icmp_ln86_334_fu_392_p2 ^ 1'd1);

assign xor_ln104_160_fu_976_p2 = (icmp_ln86_335_reg_1463 ^ 1'd1);

assign xor_ln104_161_fu_992_p2 = (icmp_ln86_336_reg_1469 ^ 1'd1);

assign xor_ln104_162_fu_628_p2 = (icmp_ln86_337_fu_410_p2 ^ 1'd1);

assign xor_ln104_163_fu_640_p2 = (icmp_ln86_338_fu_416_p2 ^ 1'd1);

assign xor_ln104_164_fu_652_p2 = (icmp_ln86_339_fu_422_p2 ^ 1'd1);

assign xor_ln104_165_fu_664_p2 = (icmp_ln86_340_fu_428_p2 ^ 1'd1);

assign xor_ln104_166_fu_1008_p2 = (icmp_ln86_341_reg_1475 ^ 1'd1);

assign xor_ln104_167_fu_1018_p2 = (icmp_ln86_342_reg_1482 ^ 1'd1);

assign xor_ln104_168_fu_1028_p2 = (icmp_ln86_343_reg_1488 ^ 1'd1);

assign xor_ln104_169_fu_1038_p2 = (icmp_ln86_344_reg_1494 ^ 1'd1);

assign xor_ln104_fu_950_p2 = (icmp_ln86_reg_1448 ^ 1'd1);

assign xor_ln117_fu_742_p2 = (1'd1 ^ and_ln102_419_fu_670_p2);

assign zext_ln117_37_fu_774_p1 = select_ln117_321_fu_766_p3;

assign zext_ln117_38_fu_828_p1 = select_ln117_325_fu_820_p3;

assign zext_ln117_39_fu_938_p1 = select_ln117_333_fu_930_p3;

assign zext_ln117_fu_748_p1 = xor_ln117_fu_742_p2;

endmodule //my_prj_decision_function_87
