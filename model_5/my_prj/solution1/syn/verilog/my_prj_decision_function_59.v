// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module my_prj_decision_function_59 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_1_val,
        x_4_val,
        x_10_val,
        x_11_val,
        x_13_val,
        x_17_val,
        x_18_val,
        x_19_val,
        x_23_val,
        x_24_val,
        x_26_val,
        x_27_val,
        x_29_val,
        x_32_val,
        x_33_val,
        x_34_val,
        x_35_val,
        x_42_val,
        x_47_val,
        x_48_val,
        x_51_val,
        x_52_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_1_val;
input  [17:0] x_4_val;
input  [17:0] x_10_val;
input  [17:0] x_11_val;
input  [17:0] x_13_val;
input  [17:0] x_17_val;
input  [17:0] x_18_val;
input  [17:0] x_19_val;
input  [17:0] x_23_val;
input  [17:0] x_24_val;
input  [17:0] x_26_val;
input  [17:0] x_27_val;
input  [17:0] x_29_val;
input  [17:0] x_32_val;
input  [17:0] x_33_val;
input  [17:0] x_34_val;
input  [17:0] x_35_val;
input  [17:0] x_42_val;
input  [17:0] x_47_val;
input  [17:0] x_48_val;
input  [17:0] x_51_val;
input  [17:0] x_52_val;
output  [10:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_402_p2;
reg   [0:0] icmp_ln86_reg_1456;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_1155_fu_438_p2;
reg   [0:0] icmp_ln86_1155_reg_1462;
wire   [0:0] icmp_ln86_1159_fu_462_p2;
reg   [0:0] icmp_ln86_1159_reg_1468;
wire   [0:0] icmp_ln86_1160_fu_468_p2;
reg   [0:0] icmp_ln86_1160_reg_1473;
wire   [0:0] icmp_ln86_1161_fu_474_p2;
reg   [0:0] icmp_ln86_1161_reg_1478;
wire   [0:0] icmp_ln86_1162_fu_480_p2;
reg   [0:0] icmp_ln86_1162_reg_1484;
wire   [0:0] icmp_ln86_1163_fu_486_p2;
reg   [0:0] icmp_ln86_1163_reg_1490;
wire   [0:0] icmp_ln86_1171_fu_534_p2;
reg   [0:0] icmp_ln86_1171_reg_1496;
wire   [0:0] icmp_ln86_1172_fu_540_p2;
reg   [0:0] icmp_ln86_1172_reg_1501;
wire   [0:0] icmp_ln86_1173_fu_546_p2;
reg   [0:0] icmp_ln86_1173_reg_1506;
wire   [0:0] icmp_ln86_1174_fu_552_p2;
reg   [0:0] icmp_ln86_1174_reg_1511;
wire   [0:0] icmp_ln86_1175_fu_558_p2;
reg   [0:0] icmp_ln86_1175_reg_1516;
wire   [0:0] icmp_ln86_1176_fu_564_p2;
reg   [0:0] icmp_ln86_1176_reg_1521;
wire   [0:0] icmp_ln86_1177_fu_570_p2;
reg   [0:0] icmp_ln86_1177_reg_1526;
wire   [0:0] icmp_ln86_1178_fu_576_p2;
reg   [0:0] icmp_ln86_1178_reg_1531;
wire   [0:0] and_ln104_208_fu_618_p2;
reg   [0:0] and_ln104_208_reg_1536;
wire   [0:0] and_ln104_210_fu_654_p2;
reg   [0:0] and_ln104_210_reg_1542;
wire   [0:0] and_ln102_1408_fu_660_p2;
reg   [0:0] and_ln102_1408_reg_1547;
wire   [0:0] and_ln104_211_fu_672_p2;
reg   [0:0] and_ln104_211_reg_1553;
wire   [0:0] and_ln102_1414_fu_720_p2;
reg   [0:0] and_ln102_1414_reg_1559;
wire   [0:0] or_ln117_1028_fu_978_p2;
reg   [0:0] or_ln117_1028_reg_1564;
wire   [3:0] select_ln117_1124_fu_992_p3;
reg   [3:0] select_ln117_1124_reg_1569;
wire   [0:0] or_ln117_1036_fu_1000_p2;
reg   [0:0] or_ln117_1036_reg_1574;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln86_1150_fu_408_p2;
wire   [0:0] xor_ln104_544_fu_594_p2;
wire   [0:0] icmp_ln86_1151_fu_414_p2;
wire   [0:0] xor_ln104_fu_582_p2;
wire   [0:0] xor_ln104_545_fu_612_p2;
wire   [0:0] icmp_ln86_1152_fu_420_p2;
wire   [0:0] and_ln102_fu_588_p2;
wire   [0:0] xor_ln104_546_fu_630_p2;
wire   [0:0] icmp_ln86_1153_fu_426_p2;
wire   [0:0] and_ln104_fu_600_p2;
wire   [0:0] xor_ln104_547_fu_648_p2;
wire   [0:0] icmp_ln86_1154_fu_432_p2;
wire   [0:0] and_ln102_1405_fu_606_p2;
wire   [0:0] xor_ln104_548_fu_666_p2;
wire   [0:0] icmp_ln86_1156_fu_444_p2;
wire   [0:0] and_ln102_1406_fu_624_p2;
wire   [0:0] icmp_ln86_1157_fu_450_p2;
wire   [0:0] and_ln104_209_fu_636_p2;
wire   [0:0] icmp_ln86_1158_fu_456_p2;
wire   [0:0] and_ln102_1407_fu_642_p2;
wire   [0:0] icmp_ln86_1164_fu_492_p2;
wire   [0:0] and_ln102_1410_fu_678_p2;
wire   [0:0] icmp_ln86_1165_fu_498_p2;
wire   [0:0] xor_ln104_550_fu_684_p2;
wire   [0:0] and_ln102_1419_fu_732_p2;
wire   [0:0] icmp_ln86_1166_fu_504_p2;
wire   [0:0] and_ln102_1411_fu_690_p2;
wire   [0:0] icmp_ln86_1167_fu_510_p2;
wire   [0:0] xor_ln104_551_fu_696_p2;
wire   [0:0] and_ln102_1422_fu_750_p2;
wire   [0:0] icmp_ln86_1168_fu_516_p2;
wire   [0:0] and_ln102_1412_fu_702_p2;
wire   [0:0] icmp_ln86_1169_fu_522_p2;
wire   [0:0] xor_ln104_552_fu_708_p2;
wire   [0:0] and_ln102_1425_fu_768_p2;
wire   [0:0] icmp_ln86_1170_fu_528_p2;
wire   [0:0] and_ln102_1413_fu_714_p2;
wire   [0:0] and_ln102_1418_fu_726_p2;
wire   [0:0] xor_ln117_fu_792_p2;
wire   [0:0] or_ln117_fu_786_p2;
wire   [1:0] zext_ln117_fu_798_p1;
wire   [0:0] or_ln117_1016_fu_802_p2;
wire   [0:0] and_ln102_1420_fu_738_p2;
wire   [1:0] select_ln117_fu_808_p3;
wire   [1:0] select_ln117_1112_fu_822_p3;
wire   [0:0] or_ln117_1017_fu_816_p2;
wire   [2:0] zext_ln117_121_fu_830_p1;
wire   [0:0] or_ln117_1018_fu_834_p2;
wire   [0:0] and_ln102_1421_fu_744_p2;
wire   [2:0] select_ln117_1113_fu_840_p3;
wire   [0:0] or_ln117_1019_fu_848_p2;
wire   [2:0] select_ln117_1114_fu_854_p3;
wire   [0:0] or_ln117_1020_fu_862_p2;
wire   [0:0] and_ln102_1423_fu_756_p2;
wire   [2:0] select_ln117_1115_fu_868_p3;
wire   [2:0] select_ln117_1116_fu_882_p3;
wire   [0:0] or_ln117_1021_fu_876_p2;
wire   [3:0] zext_ln117_122_fu_890_p1;
wire   [0:0] or_ln117_1022_fu_894_p2;
wire   [0:0] and_ln102_1424_fu_762_p2;
wire   [3:0] select_ln117_1117_fu_900_p3;
wire   [0:0] or_ln117_1023_fu_908_p2;
wire   [3:0] select_ln117_1118_fu_914_p3;
wire   [0:0] or_ln117_1024_fu_922_p2;
wire   [0:0] and_ln102_1426_fu_774_p2;
wire   [3:0] select_ln117_1119_fu_928_p3;
wire   [0:0] or_ln117_1025_fu_936_p2;
wire   [3:0] select_ln117_1120_fu_942_p3;
wire   [0:0] or_ln117_1026_fu_950_p2;
wire   [0:0] and_ln102_1427_fu_780_p2;
wire   [3:0] select_ln117_1121_fu_956_p3;
wire   [0:0] or_ln117_1027_fu_964_p2;
wire   [3:0] select_ln117_1122_fu_970_p3;
wire   [3:0] select_ln117_1123_fu_984_p3;
wire   [0:0] xor_ln104_549_fu_1010_p2;
wire   [0:0] and_ln102_1409_fu_1006_p2;
wire   [0:0] and_ln104_212_fu_1015_p2;
wire   [0:0] xor_ln104_553_fu_1020_p2;
wire   [0:0] and_ln102_1428_fu_1059_p2;
wire   [0:0] xor_ln104_554_fu_1025_p2;
wire   [0:0] and_ln102_1430_fu_1069_p2;
wire   [0:0] and_ln102_1415_fu_1030_p2;
wire   [0:0] xor_ln104_555_fu_1034_p2;
wire   [0:0] and_ln102_1433_fu_1084_p2;
wire   [0:0] and_ln102_1416_fu_1039_p2;
wire   [0:0] xor_ln104_556_fu_1044_p2;
wire   [0:0] and_ln102_1436_fu_1099_p2;
wire   [0:0] and_ln102_1417_fu_1049_p2;
wire   [0:0] xor_ln104_557_fu_1054_p2;
wire   [0:0] and_ln102_1439_fu_1115_p2;
wire   [0:0] and_ln102_1429_fu_1064_p2;
wire   [0:0] or_ln117_1029_fu_1126_p2;
wire   [4:0] zext_ln117_123_fu_1131_p1;
wire   [0:0] or_ln117_1030_fu_1134_p2;
wire   [0:0] and_ln102_1431_fu_1074_p2;
wire   [4:0] select_ln117_1125_fu_1138_p3;
wire   [0:0] or_ln117_1031_fu_1146_p2;
wire   [4:0] select_ln117_1126_fu_1152_p3;
wire   [0:0] or_ln117_1032_fu_1160_p2;
wire   [0:0] and_ln102_1432_fu_1079_p2;
wire   [4:0] select_ln117_1127_fu_1164_p3;
wire   [0:0] or_ln117_1033_fu_1172_p2;
wire   [4:0] select_ln117_1128_fu_1178_p3;
wire   [0:0] or_ln117_1034_fu_1186_p2;
wire   [0:0] and_ln102_1434_fu_1089_p2;
wire   [4:0] select_ln117_1129_fu_1192_p3;
wire   [0:0] or_ln117_1035_fu_1200_p2;
wire   [4:0] select_ln117_1130_fu_1206_p3;
wire   [0:0] and_ln102_1435_fu_1094_p2;
wire   [4:0] select_ln117_1131_fu_1214_p3;
wire   [0:0] or_ln117_1037_fu_1222_p2;
wire   [4:0] select_ln117_1132_fu_1227_p3;
wire   [0:0] or_ln117_1038_fu_1234_p2;
wire   [0:0] and_ln102_1437_fu_1104_p2;
wire   [4:0] select_ln117_1133_fu_1239_p3;
wire   [0:0] or_ln117_1039_fu_1247_p2;
wire   [4:0] select_ln117_1134_fu_1253_p3;
wire   [0:0] or_ln117_1040_fu_1261_p2;
wire   [0:0] and_ln102_1438_fu_1110_p2;
wire   [4:0] select_ln117_1135_fu_1266_p3;
wire   [0:0] or_ln117_1041_fu_1274_p2;
wire   [4:0] select_ln117_1136_fu_1280_p3;
wire   [0:0] or_ln117_1042_fu_1288_p2;
wire   [0:0] and_ln102_1440_fu_1120_p2;
wire   [4:0] select_ln117_1137_fu_1294_p3;
wire   [0:0] or_ln117_1043_fu_1302_p2;
wire   [4:0] select_ln117_1138_fu_1308_p3;
wire   [10:0] agg_result_fu_1324_p63;
wire   [4:0] agg_result_fu_1324_p64;
wire   [10:0] agg_result_fu_1324_p65;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [4:0] agg_result_fu_1324_p1;
wire   [4:0] agg_result_fu_1324_p3;
wire   [4:0] agg_result_fu_1324_p5;
wire   [4:0] agg_result_fu_1324_p7;
wire   [4:0] agg_result_fu_1324_p9;
wire   [4:0] agg_result_fu_1324_p11;
wire   [4:0] agg_result_fu_1324_p13;
wire   [4:0] agg_result_fu_1324_p15;
wire   [4:0] agg_result_fu_1324_p17;
wire   [4:0] agg_result_fu_1324_p19;
wire   [4:0] agg_result_fu_1324_p21;
wire   [4:0] agg_result_fu_1324_p23;
wire   [4:0] agg_result_fu_1324_p25;
wire   [4:0] agg_result_fu_1324_p27;
wire   [4:0] agg_result_fu_1324_p29;
wire   [4:0] agg_result_fu_1324_p31;
wire  signed [4:0] agg_result_fu_1324_p33;
wire  signed [4:0] agg_result_fu_1324_p35;
wire  signed [4:0] agg_result_fu_1324_p37;
wire  signed [4:0] agg_result_fu_1324_p39;
wire  signed [4:0] agg_result_fu_1324_p41;
wire  signed [4:0] agg_result_fu_1324_p43;
wire  signed [4:0] agg_result_fu_1324_p45;
wire  signed [4:0] agg_result_fu_1324_p47;
wire  signed [4:0] agg_result_fu_1324_p49;
wire  signed [4:0] agg_result_fu_1324_p51;
wire  signed [4:0] agg_result_fu_1324_p53;
wire  signed [4:0] agg_result_fu_1324_p55;
wire  signed [4:0] agg_result_fu_1324_p57;
wire  signed [4:0] agg_result_fu_1324_p59;
wire  signed [4:0] agg_result_fu_1324_p61;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) my_prj_sparsemux_63_5_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 11 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 11 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 11 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 11 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 11 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 11 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 11 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 11 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 11 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 11 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 11 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 11 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 11 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 11 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 11 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 11 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 11 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 11 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 11 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 11 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 11 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 11 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 11 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 11 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 11 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 11 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 11 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 11 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 11 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 11 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 11 ),
    .def_WIDTH( 11 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 11 ))
sparsemux_63_5_11_1_1_U927(
    .din0(11'd727),
    .din1(11'd1667),
    .din2(11'd108),
    .din3(11'd710),
    .din4(11'd1894),
    .din5(11'd1999),
    .din6(11'd22),
    .din7(11'd1987),
    .din8(11'd57),
    .din9(11'd1283),
    .din10(11'd209),
    .din11(11'd297),
    .din12(11'd76),
    .din13(11'd278),
    .din14(11'd1932),
    .din15(11'd1842),
    .din16(11'd13),
    .din17(11'd1725),
    .din18(11'd1126),
    .din19(11'd1989),
    .din20(11'd727),
    .din21(11'd1886),
    .din22(11'd183),
    .din23(11'd1786),
    .din24(11'd469),
    .din25(11'd519),
    .din26(11'd1738),
    .din27(11'd125),
    .din28(11'd511),
    .din29(11'd1946),
    .din30(11'd90),
    .def(agg_result_fu_1324_p63),
    .sel(agg_result_fu_1324_p64),
    .dout(agg_result_fu_1324_p65)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln102_1408_reg_1547 <= and_ln102_1408_fu_660_p2;
        and_ln102_1414_reg_1559 <= and_ln102_1414_fu_720_p2;
        and_ln104_208_reg_1536 <= and_ln104_208_fu_618_p2;
        and_ln104_210_reg_1542 <= and_ln104_210_fu_654_p2;
        and_ln104_211_reg_1553 <= and_ln104_211_fu_672_p2;
        icmp_ln86_1155_reg_1462 <= icmp_ln86_1155_fu_438_p2;
        icmp_ln86_1159_reg_1468 <= icmp_ln86_1159_fu_462_p2;
        icmp_ln86_1160_reg_1473 <= icmp_ln86_1160_fu_468_p2;
        icmp_ln86_1161_reg_1478 <= icmp_ln86_1161_fu_474_p2;
        icmp_ln86_1162_reg_1484 <= icmp_ln86_1162_fu_480_p2;
        icmp_ln86_1163_reg_1490 <= icmp_ln86_1163_fu_486_p2;
        icmp_ln86_1171_reg_1496 <= icmp_ln86_1171_fu_534_p2;
        icmp_ln86_1172_reg_1501 <= icmp_ln86_1172_fu_540_p2;
        icmp_ln86_1173_reg_1506 <= icmp_ln86_1173_fu_546_p2;
        icmp_ln86_1174_reg_1511 <= icmp_ln86_1174_fu_552_p2;
        icmp_ln86_1175_reg_1516 <= icmp_ln86_1175_fu_558_p2;
        icmp_ln86_1176_reg_1521 <= icmp_ln86_1176_fu_564_p2;
        icmp_ln86_1177_reg_1526 <= icmp_ln86_1177_fu_570_p2;
        icmp_ln86_1178_reg_1531 <= icmp_ln86_1178_fu_576_p2;
        icmp_ln86_reg_1456 <= icmp_ln86_fu_402_p2;
        or_ln117_1028_reg_1564 <= or_ln117_1028_fu_978_p2;
        or_ln117_1036_reg_1574 <= or_ln117_1036_fu_1000_p2;
        select_ln117_1124_reg_1569 <= select_ln117_1124_fu_992_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_fu_1324_p63 = 'bx;

assign agg_result_fu_1324_p64 = ((or_ln117_1043_fu_1302_p2[0:0] == 1'b1) ? select_ln117_1138_fu_1308_p3 : 5'd30);

assign and_ln102_1405_fu_606_p2 = (xor_ln104_fu_582_p2 & icmp_ln86_1151_fu_414_p2);

assign and_ln102_1406_fu_624_p2 = (icmp_ln86_1152_fu_420_p2 & and_ln102_fu_588_p2);

assign and_ln102_1407_fu_642_p2 = (icmp_ln86_1153_fu_426_p2 & and_ln104_fu_600_p2);

assign and_ln102_1408_fu_660_p2 = (icmp_ln86_1154_fu_432_p2 & and_ln102_1405_fu_606_p2);

assign and_ln102_1409_fu_1006_p2 = (icmp_ln86_1155_reg_1462 & and_ln104_208_reg_1536);

assign and_ln102_1410_fu_678_p2 = (icmp_ln86_1156_fu_444_p2 & and_ln102_1406_fu_624_p2);

assign and_ln102_1411_fu_690_p2 = (icmp_ln86_1157_fu_450_p2 & and_ln104_209_fu_636_p2);

assign and_ln102_1412_fu_702_p2 = (icmp_ln86_1158_fu_456_p2 & and_ln102_1407_fu_642_p2);

assign and_ln102_1413_fu_714_p2 = (icmp_ln86_1159_fu_462_p2 & and_ln104_210_fu_654_p2);

assign and_ln102_1414_fu_720_p2 = (icmp_ln86_1160_fu_468_p2 & and_ln102_1408_fu_660_p2);

assign and_ln102_1415_fu_1030_p2 = (icmp_ln86_1161_reg_1478 & and_ln104_211_reg_1553);

assign and_ln102_1416_fu_1039_p2 = (icmp_ln86_1162_reg_1484 & and_ln102_1409_fu_1006_p2);

assign and_ln102_1417_fu_1049_p2 = (icmp_ln86_1163_reg_1490 & and_ln104_212_fu_1015_p2);

assign and_ln102_1418_fu_726_p2 = (icmp_ln86_1164_fu_492_p2 & and_ln102_1410_fu_678_p2);

assign and_ln102_1419_fu_732_p2 = (xor_ln104_550_fu_684_p2 & icmp_ln86_1165_fu_498_p2);

assign and_ln102_1420_fu_738_p2 = (and_ln102_1419_fu_732_p2 & and_ln102_1406_fu_624_p2);

assign and_ln102_1421_fu_744_p2 = (icmp_ln86_1166_fu_504_p2 & and_ln102_1411_fu_690_p2);

assign and_ln102_1422_fu_750_p2 = (xor_ln104_551_fu_696_p2 & icmp_ln86_1167_fu_510_p2);

assign and_ln102_1423_fu_756_p2 = (and_ln104_209_fu_636_p2 & and_ln102_1422_fu_750_p2);

assign and_ln102_1424_fu_762_p2 = (icmp_ln86_1168_fu_516_p2 & and_ln102_1412_fu_702_p2);

assign and_ln102_1425_fu_768_p2 = (xor_ln104_552_fu_708_p2 & icmp_ln86_1169_fu_522_p2);

assign and_ln102_1426_fu_774_p2 = (and_ln102_1425_fu_768_p2 & and_ln102_1407_fu_642_p2);

assign and_ln102_1427_fu_780_p2 = (icmp_ln86_1170_fu_528_p2 & and_ln102_1413_fu_714_p2);

assign and_ln102_1428_fu_1059_p2 = (xor_ln104_553_fu_1020_p2 & icmp_ln86_1171_reg_1496);

assign and_ln102_1429_fu_1064_p2 = (and_ln104_210_reg_1542 & and_ln102_1428_fu_1059_p2);

assign and_ln102_1430_fu_1069_p2 = (xor_ln104_554_fu_1025_p2 & icmp_ln86_1172_reg_1501);

assign and_ln102_1431_fu_1074_p2 = (and_ln102_1430_fu_1069_p2 & and_ln102_1408_reg_1547);

assign and_ln102_1432_fu_1079_p2 = (icmp_ln86_1173_reg_1506 & and_ln102_1415_fu_1030_p2);

assign and_ln102_1433_fu_1084_p2 = (xor_ln104_555_fu_1034_p2 & icmp_ln86_1174_reg_1511);

assign and_ln102_1434_fu_1089_p2 = (and_ln104_211_reg_1553 & and_ln102_1433_fu_1084_p2);

assign and_ln102_1435_fu_1094_p2 = (icmp_ln86_1175_reg_1516 & and_ln102_1416_fu_1039_p2);

assign and_ln102_1436_fu_1099_p2 = (xor_ln104_556_fu_1044_p2 & icmp_ln86_1176_reg_1521);

assign and_ln102_1437_fu_1104_p2 = (and_ln102_1436_fu_1099_p2 & and_ln102_1409_fu_1006_p2);

assign and_ln102_1438_fu_1110_p2 = (icmp_ln86_1177_reg_1526 & and_ln102_1417_fu_1049_p2);

assign and_ln102_1439_fu_1115_p2 = (xor_ln104_557_fu_1054_p2 & icmp_ln86_1178_reg_1531);

assign and_ln102_1440_fu_1120_p2 = (and_ln104_212_fu_1015_p2 & and_ln102_1439_fu_1115_p2);

assign and_ln102_fu_588_p2 = (icmp_ln86_fu_402_p2 & icmp_ln86_1150_fu_408_p2);

assign and_ln104_208_fu_618_p2 = (xor_ln104_fu_582_p2 & xor_ln104_545_fu_612_p2);

assign and_ln104_209_fu_636_p2 = (xor_ln104_546_fu_630_p2 & and_ln102_fu_588_p2);

assign and_ln104_210_fu_654_p2 = (xor_ln104_547_fu_648_p2 & and_ln104_fu_600_p2);

assign and_ln104_211_fu_672_p2 = (xor_ln104_548_fu_666_p2 & and_ln102_1405_fu_606_p2);

assign and_ln104_212_fu_1015_p2 = (xor_ln104_549_fu_1010_p2 & and_ln104_208_reg_1536);

assign and_ln104_fu_600_p2 = (xor_ln104_544_fu_594_p2 & icmp_ln86_fu_402_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = agg_result_fu_1324_p65;

assign icmp_ln86_1150_fu_408_p2 = (($signed(x_1_val) < $signed(18'd154591)) ? 1'b1 : 1'b0);

assign icmp_ln86_1151_fu_414_p2 = (($signed(x_51_val) < $signed(18'd1007)) ? 1'b1 : 1'b0);

assign icmp_ln86_1152_fu_420_p2 = (($signed(x_17_val) < $signed(18'd6)) ? 1'b1 : 1'b0);

assign icmp_ln86_1153_fu_426_p2 = (($signed(x_4_val) < $signed(18'd94730)) ? 1'b1 : 1'b0);

assign icmp_ln86_1154_fu_432_p2 = (($signed(x_18_val) < $signed(18'd965)) ? 1'b1 : 1'b0);

assign icmp_ln86_1155_fu_438_p2 = (($signed(x_35_val) < $signed(18'd80)) ? 1'b1 : 1'b0);

assign icmp_ln86_1156_fu_444_p2 = (($signed(x_29_val) < $signed(18'd19425)) ? 1'b1 : 1'b0);

assign icmp_ln86_1157_fu_450_p2 = (($signed(x_33_val) < $signed(18'd732)) ? 1'b1 : 1'b0);

assign icmp_ln86_1158_fu_456_p2 = (($signed(x_11_val) < $signed(18'd164)) ? 1'b1 : 1'b0);

assign icmp_ln86_1159_fu_462_p2 = (($signed(x_10_val) < $signed(18'd565)) ? 1'b1 : 1'b0);

assign icmp_ln86_1160_fu_468_p2 = (($signed(x_1_val) < $signed(18'd136763)) ? 1'b1 : 1'b0);

assign icmp_ln86_1161_fu_474_p2 = (($signed(x_19_val) < $signed(18'd876)) ? 1'b1 : 1'b0);

assign icmp_ln86_1162_fu_480_p2 = (($signed(x_32_val) < $signed(18'd925)) ? 1'b1 : 1'b0);

assign icmp_ln86_1163_fu_486_p2 = (($signed(x_23_val) < $signed(18'd30)) ? 1'b1 : 1'b0);

assign icmp_ln86_1164_fu_492_p2 = (($signed(x_19_val) < $signed(18'd1094)) ? 1'b1 : 1'b0);

assign icmp_ln86_1165_fu_498_p2 = (($signed(x_18_val) < $signed(18'd689)) ? 1'b1 : 1'b0);

assign icmp_ln86_1166_fu_504_p2 = (($signed(x_48_val) < $signed(18'd93199)) ? 1'b1 : 1'b0);

assign icmp_ln86_1167_fu_510_p2 = (($signed(x_26_val) < $signed(18'd17751)) ? 1'b1 : 1'b0);

assign icmp_ln86_1168_fu_516_p2 = (($signed(x_24_val) < $signed(18'd379)) ? 1'b1 : 1'b0);

assign icmp_ln86_1169_fu_522_p2 = (($signed(x_10_val) < $signed(18'd592)) ? 1'b1 : 1'b0);

assign icmp_ln86_1170_fu_528_p2 = (($signed(x_13_val) < $signed(18'd489)) ? 1'b1 : 1'b0);

assign icmp_ln86_1171_fu_534_p2 = (($signed(x_11_val) < $signed(18'd589)) ? 1'b1 : 1'b0);

assign icmp_ln86_1172_fu_540_p2 = (($signed(x_42_val) < $signed(18'd133)) ? 1'b1 : 1'b0);

assign icmp_ln86_1173_fu_546_p2 = (($signed(x_52_val) < $signed(18'd55809)) ? 1'b1 : 1'b0);

assign icmp_ln86_1174_fu_552_p2 = (($signed(x_47_val) < $signed(18'd25552)) ? 1'b1 : 1'b0);

assign icmp_ln86_1175_fu_558_p2 = (($signed(x_27_val) < $signed(18'd51458)) ? 1'b1 : 1'b0);

assign icmp_ln86_1176_fu_564_p2 = (($signed(x_10_val) < $signed(18'd947)) ? 1'b1 : 1'b0);

assign icmp_ln86_1177_fu_570_p2 = (($signed(x_23_val) < $signed(18'd29)) ? 1'b1 : 1'b0);

assign icmp_ln86_1178_fu_576_p2 = (($signed(x_34_val) < $signed(18'd491)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_402_p2 = (($signed(x_51_val) < $signed(18'd883)) ? 1'b1 : 1'b0);

assign or_ln117_1016_fu_802_p2 = (and_ln102_1414_fu_720_p2 | and_ln102_1410_fu_678_p2);

assign or_ln117_1017_fu_816_p2 = (or_ln117_1016_fu_802_p2 | and_ln102_1420_fu_738_p2);

assign or_ln117_1018_fu_834_p2 = (and_ln102_1414_fu_720_p2 | and_ln102_1406_fu_624_p2);

assign or_ln117_1019_fu_848_p2 = (or_ln117_1018_fu_834_p2 | and_ln102_1421_fu_744_p2);

assign or_ln117_1020_fu_862_p2 = (or_ln117_1018_fu_834_p2 | and_ln102_1411_fu_690_p2);

assign or_ln117_1021_fu_876_p2 = (or_ln117_1020_fu_862_p2 | and_ln102_1423_fu_756_p2);

assign or_ln117_1022_fu_894_p2 = (and_ln102_fu_588_p2 | and_ln102_1414_fu_720_p2);

assign or_ln117_1023_fu_908_p2 = (or_ln117_1022_fu_894_p2 | and_ln102_1424_fu_762_p2);

assign or_ln117_1024_fu_922_p2 = (or_ln117_1022_fu_894_p2 | and_ln102_1412_fu_702_p2);

assign or_ln117_1025_fu_936_p2 = (or_ln117_1024_fu_922_p2 | and_ln102_1426_fu_774_p2);

assign or_ln117_1026_fu_950_p2 = (or_ln117_1022_fu_894_p2 | and_ln102_1407_fu_642_p2);

assign or_ln117_1027_fu_964_p2 = (or_ln117_1026_fu_950_p2 | and_ln102_1427_fu_780_p2);

assign or_ln117_1028_fu_978_p2 = (or_ln117_1026_fu_950_p2 | and_ln102_1413_fu_714_p2);

assign or_ln117_1029_fu_1126_p2 = (or_ln117_1028_reg_1564 | and_ln102_1429_fu_1064_p2);

assign or_ln117_1030_fu_1134_p2 = (icmp_ln86_reg_1456 | and_ln102_1414_reg_1559);

assign or_ln117_1031_fu_1146_p2 = (or_ln117_1030_fu_1134_p2 | and_ln102_1431_fu_1074_p2);

assign or_ln117_1032_fu_1160_p2 = (icmp_ln86_reg_1456 | and_ln102_1408_reg_1547);

assign or_ln117_1033_fu_1172_p2 = (or_ln117_1032_fu_1160_p2 | and_ln102_1432_fu_1079_p2);

assign or_ln117_1034_fu_1186_p2 = (or_ln117_1032_fu_1160_p2 | and_ln102_1415_fu_1030_p2);

assign or_ln117_1035_fu_1200_p2 = (or_ln117_1034_fu_1186_p2 | and_ln102_1434_fu_1089_p2);

assign or_ln117_1036_fu_1000_p2 = (icmp_ln86_fu_402_p2 | and_ln102_1405_fu_606_p2);

assign or_ln117_1037_fu_1222_p2 = (or_ln117_1036_reg_1574 | and_ln102_1435_fu_1094_p2);

assign or_ln117_1038_fu_1234_p2 = (or_ln117_1036_reg_1574 | and_ln102_1416_fu_1039_p2);

assign or_ln117_1039_fu_1247_p2 = (or_ln117_1038_fu_1234_p2 | and_ln102_1437_fu_1104_p2);

assign or_ln117_1040_fu_1261_p2 = (or_ln117_1036_reg_1574 | and_ln102_1409_fu_1006_p2);

assign or_ln117_1041_fu_1274_p2 = (or_ln117_1040_fu_1261_p2 | and_ln102_1438_fu_1110_p2);

assign or_ln117_1042_fu_1288_p2 = (or_ln117_1040_fu_1261_p2 | and_ln102_1417_fu_1049_p2);

assign or_ln117_1043_fu_1302_p2 = (or_ln117_1042_fu_1288_p2 | and_ln102_1440_fu_1120_p2);

assign or_ln117_fu_786_p2 = (and_ln102_1418_fu_726_p2 | and_ln102_1414_fu_720_p2);

assign select_ln117_1112_fu_822_p3 = ((or_ln117_1016_fu_802_p2[0:0] == 1'b1) ? select_ln117_fu_808_p3 : 2'd3);

assign select_ln117_1113_fu_840_p3 = ((or_ln117_1017_fu_816_p2[0:0] == 1'b1) ? zext_ln117_121_fu_830_p1 : 3'd4);

assign select_ln117_1114_fu_854_p3 = ((or_ln117_1018_fu_834_p2[0:0] == 1'b1) ? select_ln117_1113_fu_840_p3 : 3'd5);

assign select_ln117_1115_fu_868_p3 = ((or_ln117_1019_fu_848_p2[0:0] == 1'b1) ? select_ln117_1114_fu_854_p3 : 3'd6);

assign select_ln117_1116_fu_882_p3 = ((or_ln117_1020_fu_862_p2[0:0] == 1'b1) ? select_ln117_1115_fu_868_p3 : 3'd7);

assign select_ln117_1117_fu_900_p3 = ((or_ln117_1021_fu_876_p2[0:0] == 1'b1) ? zext_ln117_122_fu_890_p1 : 4'd8);

assign select_ln117_1118_fu_914_p3 = ((or_ln117_1022_fu_894_p2[0:0] == 1'b1) ? select_ln117_1117_fu_900_p3 : 4'd9);

assign select_ln117_1119_fu_928_p3 = ((or_ln117_1023_fu_908_p2[0:0] == 1'b1) ? select_ln117_1118_fu_914_p3 : 4'd10);

assign select_ln117_1120_fu_942_p3 = ((or_ln117_1024_fu_922_p2[0:0] == 1'b1) ? select_ln117_1119_fu_928_p3 : 4'd11);

assign select_ln117_1121_fu_956_p3 = ((or_ln117_1025_fu_936_p2[0:0] == 1'b1) ? select_ln117_1120_fu_942_p3 : 4'd12);

assign select_ln117_1122_fu_970_p3 = ((or_ln117_1026_fu_950_p2[0:0] == 1'b1) ? select_ln117_1121_fu_956_p3 : 4'd13);

assign select_ln117_1123_fu_984_p3 = ((or_ln117_1027_fu_964_p2[0:0] == 1'b1) ? select_ln117_1122_fu_970_p3 : 4'd14);

assign select_ln117_1124_fu_992_p3 = ((or_ln117_1028_fu_978_p2[0:0] == 1'b1) ? select_ln117_1123_fu_984_p3 : 4'd15);

assign select_ln117_1125_fu_1138_p3 = ((or_ln117_1029_fu_1126_p2[0:0] == 1'b1) ? zext_ln117_123_fu_1131_p1 : 5'd16);

assign select_ln117_1126_fu_1152_p3 = ((or_ln117_1030_fu_1134_p2[0:0] == 1'b1) ? select_ln117_1125_fu_1138_p3 : 5'd17);

assign select_ln117_1127_fu_1164_p3 = ((or_ln117_1031_fu_1146_p2[0:0] == 1'b1) ? select_ln117_1126_fu_1152_p3 : 5'd18);

assign select_ln117_1128_fu_1178_p3 = ((or_ln117_1032_fu_1160_p2[0:0] == 1'b1) ? select_ln117_1127_fu_1164_p3 : 5'd19);

assign select_ln117_1129_fu_1192_p3 = ((or_ln117_1033_fu_1172_p2[0:0] == 1'b1) ? select_ln117_1128_fu_1178_p3 : 5'd20);

assign select_ln117_1130_fu_1206_p3 = ((or_ln117_1034_fu_1186_p2[0:0] == 1'b1) ? select_ln117_1129_fu_1192_p3 : 5'd21);

assign select_ln117_1131_fu_1214_p3 = ((or_ln117_1035_fu_1200_p2[0:0] == 1'b1) ? select_ln117_1130_fu_1206_p3 : 5'd22);

assign select_ln117_1132_fu_1227_p3 = ((or_ln117_1036_reg_1574[0:0] == 1'b1) ? select_ln117_1131_fu_1214_p3 : 5'd23);

assign select_ln117_1133_fu_1239_p3 = ((or_ln117_1037_fu_1222_p2[0:0] == 1'b1) ? select_ln117_1132_fu_1227_p3 : 5'd24);

assign select_ln117_1134_fu_1253_p3 = ((or_ln117_1038_fu_1234_p2[0:0] == 1'b1) ? select_ln117_1133_fu_1239_p3 : 5'd25);

assign select_ln117_1135_fu_1266_p3 = ((or_ln117_1039_fu_1247_p2[0:0] == 1'b1) ? select_ln117_1134_fu_1253_p3 : 5'd26);

assign select_ln117_1136_fu_1280_p3 = ((or_ln117_1040_fu_1261_p2[0:0] == 1'b1) ? select_ln117_1135_fu_1266_p3 : 5'd27);

assign select_ln117_1137_fu_1294_p3 = ((or_ln117_1041_fu_1274_p2[0:0] == 1'b1) ? select_ln117_1136_fu_1280_p3 : 5'd28);

assign select_ln117_1138_fu_1308_p3 = ((or_ln117_1042_fu_1288_p2[0:0] == 1'b1) ? select_ln117_1137_fu_1294_p3 : 5'd29);

assign select_ln117_fu_808_p3 = ((or_ln117_fu_786_p2[0:0] == 1'b1) ? zext_ln117_fu_798_p1 : 2'd2);

assign xor_ln104_544_fu_594_p2 = (icmp_ln86_1150_fu_408_p2 ^ 1'd1);

assign xor_ln104_545_fu_612_p2 = (icmp_ln86_1151_fu_414_p2 ^ 1'd1);

assign xor_ln104_546_fu_630_p2 = (icmp_ln86_1152_fu_420_p2 ^ 1'd1);

assign xor_ln104_547_fu_648_p2 = (icmp_ln86_1153_fu_426_p2 ^ 1'd1);

assign xor_ln104_548_fu_666_p2 = (icmp_ln86_1154_fu_432_p2 ^ 1'd1);

assign xor_ln104_549_fu_1010_p2 = (icmp_ln86_1155_reg_1462 ^ 1'd1);

assign xor_ln104_550_fu_684_p2 = (icmp_ln86_1156_fu_444_p2 ^ 1'd1);

assign xor_ln104_551_fu_696_p2 = (icmp_ln86_1157_fu_450_p2 ^ 1'd1);

assign xor_ln104_552_fu_708_p2 = (icmp_ln86_1158_fu_456_p2 ^ 1'd1);

assign xor_ln104_553_fu_1020_p2 = (icmp_ln86_1159_reg_1468 ^ 1'd1);

assign xor_ln104_554_fu_1025_p2 = (icmp_ln86_1160_reg_1473 ^ 1'd1);

assign xor_ln104_555_fu_1034_p2 = (icmp_ln86_1161_reg_1478 ^ 1'd1);

assign xor_ln104_556_fu_1044_p2 = (icmp_ln86_1162_reg_1484 ^ 1'd1);

assign xor_ln104_557_fu_1054_p2 = (icmp_ln86_1163_reg_1490 ^ 1'd1);

assign xor_ln104_fu_582_p2 = (icmp_ln86_fu_402_p2 ^ 1'd1);

assign xor_ln117_fu_792_p2 = (1'd1 ^ and_ln102_1414_fu_720_p2);

assign zext_ln117_121_fu_830_p1 = select_ln117_1112_fu_822_p3;

assign zext_ln117_122_fu_890_p1 = select_ln117_1116_fu_882_p3;

assign zext_ln117_123_fu_1131_p1 = select_ln117_1124_reg_1569;

assign zext_ln117_fu_798_p1 = xor_ln117_fu_792_p2;

endmodule //my_prj_decision_function_59
